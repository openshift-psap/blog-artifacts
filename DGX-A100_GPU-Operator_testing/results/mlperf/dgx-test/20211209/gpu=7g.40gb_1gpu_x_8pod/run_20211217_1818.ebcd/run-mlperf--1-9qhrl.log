8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169'
Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761507
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:27 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-18-09 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ set +x
Fri Dec 17 17:18:27 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-9qhrl to the sync file ...
run-mlperf--1-9qhrl Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
     2	run-mlperf--1-zcmvv
     3	run-mlperf--1-kcdh9
     4	run-mlperf--1-5dr8m
     5	run-mlperf--1-2997d
     6	run-mlperf--1-9qhrl
Fri Dec 17 17:18:32 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514072, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514327, "event_type": "POINT_IN_TIME", "key": "seed", "value": 145306917, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 145306917
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761516754, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516755, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540987, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540987, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761543274, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543275, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.17s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543616, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543617, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543618, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.346, Average Loss: 0.022, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.119, Average Loss: 0.451, avg. samples / sec: 766.86
Iteration:     40, Loss function: 20.795, Average Loss: 0.853, avg. samples / sec: 829.04
Iteration:     60, Loss function: 20.452, Average Loss: 1.242, avg. samples / sec: 850.09
Iteration:     80, Loss function: 20.115, Average Loss: 1.616, avg. samples / sec: 889.61
Iteration:    100, Loss function: 16.470, Average Loss: 1.954, avg. samples / sec: 871.39
Iteration:    120, Loss function: 12.349, Average Loss: 2.176, avg. samples / sec: 641.86
Iteration:    140, Loss function: 9.859, Average Loss: 2.339, avg. samples / sec: 894.20
Iteration:    160, Loss function: 9.294, Average Loss: 2.480, avg. samples / sec: 953.10
Iteration:    180, Loss function: 8.940, Average Loss: 2.610, avg. samples / sec: 915.48
Iteration:    200, Loss function: 8.572, Average Loss: 2.734, avg. samples / sec: 946.81
Iteration:    220, Loss function: 8.473, Average Loss: 2.853, avg. samples / sec: 948.24
Iteration:    240, Loss function: 8.500, Average Loss: 2.968, avg. samples / sec: 948.64
Iteration:    260, Loss function: 8.684, Average Loss: 3.080, avg. samples / sec: 973.03
Iteration:    280, Loss function: 8.652, Average Loss: 3.192, avg. samples / sec: 943.45
Iteration:    300, Loss function: 8.393, Average Loss: 3.296, avg. samples / sec: 950.29
Iteration:    320, Loss function: 8.291, Average Loss: 3.396, avg. samples / sec: 960.18
Iteration:    340, Loss function: 8.221, Average Loss: 3.492, avg. samples / sec: 981.63
Iteration:    360, Loss function: 7.921, Average Loss: 3.584, avg. samples / sec: 955.21
Iteration:    380, Loss function: 7.968, Average Loss: 3.673, avg. samples / sec: 872.96
Iteration:    400, Loss function: 7.908, Average Loss: 3.756, avg. samples / sec: 936.93
Iteration:    420, Loss function: 7.598, Average Loss: 3.836, avg. samples / sec: 970.92
Iteration:    440, Loss function: 7.889, Average Loss: 3.915, avg. samples / sec: 962.70
Iteration:    460, Loss function: 7.887, Average Loss: 3.991, avg. samples / sec: 989.99
Iteration:    480, Loss function: 7.378, Average Loss: 4.064, avg. samples / sec: 974.13
Iteration:    500, Loss function: 7.444, Average Loss: 4.133, avg. samples / sec: 994.11
Iteration:    520, Loss function: 7.358, Average Loss: 4.200, avg. samples / sec: 988.19
Iteration:    540, Loss function: 7.471, Average Loss: 4.265, avg. samples / sec: 898.00
Iteration:    560, Loss function: 7.174, Average Loss: 4.326, avg. samples / sec: 973.33
Iteration:    580, Loss function: 7.260, Average Loss: 4.385, avg. samples / sec: 878.52
Iteration:    600, Loss function: 7.255, Average Loss: 4.443, avg. samples / sec: 946.84
Iteration:    620, Loss function: 7.016, Average Loss: 4.499, avg. samples / sec: 784.04
Iteration:    640, Loss function: 6.962, Average Loss: 4.553, avg. samples / sec: 971.54
Iteration:    660, Loss function: 7.121, Average Loss: 4.606, avg. samples / sec: 907.94
Iteration:    680, Loss function: 7.320, Average Loss: 4.657, avg. samples / sec: 967.68
Iteration:    700, Loss function: 6.820, Average Loss: 4.704, avg. samples / sec: 904.81
Iteration:    720, Loss function: 6.833, Average Loss: 4.753, avg. samples / sec: 921.66
Iteration:    740, Loss function: 6.868, Average Loss: 4.798, avg. samples / sec: 943.70
Iteration:    760, Loss function: 7.109, Average Loss: 4.841, avg. samples / sec: 909.30
Iteration:    780, Loss function: 6.744, Average Loss: 4.883, avg. samples / sec: 930.74
Iteration:    800, Loss function: 7.018, Average Loss: 4.921, avg. samples / sec: 899.81
Iteration:    820, Loss function: 6.752, Average Loss: 4.958, avg. samples / sec: 918.87
Iteration:    840, Loss function: 6.718, Average Loss: 4.993, avg. samples / sec: 920.70
Iteration:    860, Loss function: 6.788, Average Loss: 5.026, avg. samples / sec: 977.35
Iteration:    880, Loss function: 6.595, Average Loss: 5.057, avg. samples / sec: 986.53
Iteration:    900, Loss function: 6.794, Average Loss: 5.087, avg. samples / sec: 924.80
Iteration:    920, Loss function: 6.711, Average Loss: 5.115, avg. samples / sec: 973.17
Iteration:    940, Loss function: 6.701, Average Loss: 5.144, avg. samples / sec: 974.86
Iteration:    960, Loss function: 6.394, Average Loss: 5.172, avg. samples / sec: 980.44
Iteration:    980, Loss function: 6.399, Average Loss: 5.198, avg. samples / sec: 982.20
Iteration:   1000, Loss function: 6.530, Average Loss: 5.223, avg. samples / sec: 979.97
Iteration:   1020, Loss function: 6.297, Average Loss: 5.246, avg. samples / sec: 973.44
:::MLLOG {"namespace": "", "time_ms": 1639761670665, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761670676, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.660, Average Loss: 5.270, avg. samples / sec: 958.71
Iteration:   1060, Loss function: 6.352, Average Loss: 5.292, avg. samples / sec: 878.76
Iteration:   1080, Loss function: 6.197, Average Loss: 5.314, avg. samples / sec: 922.85
Iteration:   1100, Loss function: 6.005, Average Loss: 5.333, avg. samples / sec: 939.35
Iteration:   1120, Loss function: 6.132, Average Loss: 5.352, avg. samples / sec: 978.57
Iteration:   1140, Loss function: 6.536, Average Loss: 5.371, avg. samples / sec: 989.70
Iteration:   1160, Loss function: 6.060, Average Loss: 5.388, avg. samples / sec: 978.07
Iteration:   1180, Loss function: 6.183, Average Loss: 5.404, avg. samples / sec: 961.83
Iteration:   1200, Loss function: 6.400, Average Loss: 5.420, avg. samples / sec: 981.31
Iteration:   1220, Loss function: 6.282, Average Loss: 5.435, avg. samples / sec: 967.45
Iteration:   1240, Loss function: 5.937, Average Loss: 5.447, avg. samples / sec: 969.49
Iteration:   1260, Loss function: 5.987, Average Loss: 5.459, avg. samples / sec: 916.22
Iteration:   1280, Loss function: 5.882, Average Loss: 5.472, avg. samples / sec: 926.81
Iteration:   1300, Loss function: 6.109, Average Loss: 5.485, avg. samples / sec: 902.34
Iteration:   1320, Loss function: 6.158, Average Loss: 5.497, avg. samples / sec: 928.09
Iteration:   1340, Loss function: 5.792, Average Loss: 5.507, avg. samples / sec: 943.15
Iteration:   1360, Loss function: 5.955, Average Loss: 5.517, avg. samples / sec: 918.32
Iteration:   1380, Loss function: 6.139, Average Loss: 5.527, avg. samples / sec: 967.68
Iteration:   1400, Loss function: 6.004, Average Loss: 5.535, avg. samples / sec: 939.50
Iteration:   1420, Loss function: 6.003, Average Loss: 5.543, avg. samples / sec: 932.63
Iteration:   1440, Loss function: 6.465, Average Loss: 5.552, avg. samples / sec: 968.15
Iteration:   1460, Loss function: 6.205, Average Loss: 5.561, avg. samples / sec: 941.52
Iteration:   1480, Loss function: 5.781, Average Loss: 5.569, avg. samples / sec: 984.14
Iteration:   1500, Loss function: 6.063, Average Loss: 5.577, avg. samples / sec: 878.44
Iteration:   1520, Loss function: 5.986, Average Loss: 5.582, avg. samples / sec: 963.55
Iteration:   1540, Loss function: 6.014, Average Loss: 5.586, avg. samples / sec: 995.86
Iteration:   1560, Loss function: 5.570, Average Loss: 5.590, avg. samples / sec: 925.15
Iteration:   1580, Loss function: 5.662, Average Loss: 5.595, avg. samples / sec: 975.88
Iteration:   1600, Loss function: 6.148, Average Loss: 5.600, avg. samples / sec: 976.86
Iteration:   1620, Loss function: 5.696, Average Loss: 5.604, avg. samples / sec: 986.54
Iteration:   1640, Loss function: 5.876, Average Loss: 5.607, avg. samples / sec: 980.46
Iteration:   1660, Loss function: 5.992, Average Loss: 5.612, avg. samples / sec: 935.69
Iteration:   1680, Loss function: 5.730, Average Loss: 5.616, avg. samples / sec: 980.25
Iteration:   1700, Loss function: 5.530, Average Loss: 5.620, avg. samples / sec: 971.99
Iteration:   1720, Loss function: 5.721, Average Loss: 5.623, avg. samples / sec: 979.11
Iteration:   1740, Loss function: 5.753, Average Loss: 5.626, avg. samples / sec: 953.20
Iteration:   1760, Loss function: 5.447, Average Loss: 5.627, avg. samples / sec: 914.41
Iteration:   1780, Loss function: 5.617, Average Loss: 5.628, avg. samples / sec: 920.08
Iteration:   1800, Loss function: 5.858, Average Loss: 5.630, avg. samples / sec: 988.58
Iteration:   1820, Loss function: 6.075, Average Loss: 5.631, avg. samples / sec: 911.35
Iteration:   1840, Loss function: 5.743, Average Loss: 5.632, avg. samples / sec: 965.30
Iteration:   1860, Loss function: 5.720, Average Loss: 5.631, avg. samples / sec: 890.34
Iteration:   1880, Loss function: 5.793, Average Loss: 5.633, avg. samples / sec: 974.18
Iteration:   1900, Loss function: 5.846, Average Loss: 5.633, avg. samples / sec: 979.63
Iteration:   1920, Loss function: 5.700, Average Loss: 5.632, avg. samples / sec: 970.17
Iteration:   1940, Loss function: 5.945, Average Loss: 5.632, avg. samples / sec: 969.64
Iteration:   1960, Loss function: 5.467, Average Loss: 5.631, avg. samples / sec: 942.46
Iteration:   1980, Loss function: 5.709, Average Loss: 5.631, avg. samples / sec: 963.63
Iteration:   2000, Loss function: 5.470, Average Loss: 5.630, avg. samples / sec: 966.16
Iteration:   2020, Loss function: 5.595, Average Loss: 5.628, avg. samples / sec: 930.53
Iteration:   2040, Loss function: 5.683, Average Loss: 5.628, avg. samples / sec: 950.30
:::MLLOG {"namespace": "", "time_ms": 1639761794387, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794389, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.427, Average Loss: 5.625, avg. samples / sec: 831.37
Iteration:   2080, Loss function: 5.089, Average Loss: 5.623, avg. samples / sec: 876.37
Iteration:   2100, Loss function: 5.512, Average Loss: 5.622, avg. samples / sec: 987.89
Iteration:   2120, Loss function: 5.317, Average Loss: 5.618, avg. samples / sec: 974.28
Iteration:   2140, Loss function: 5.439, Average Loss: 5.616, avg. samples / sec: 982.18
Iteration:   2160, Loss function: 5.473, Average Loss: 5.614, avg. samples / sec: 941.22
Iteration:   2180, Loss function: 5.362, Average Loss: 5.612, avg. samples / sec: 861.88
Iteration:   2200, Loss function: 5.376, Average Loss: 5.608, avg. samples / sec: 966.63
Iteration:   2220, Loss function: 5.615, Average Loss: 5.606, avg. samples / sec: 907.51
Iteration:   2240, Loss function: 5.518, Average Loss: 5.604, avg. samples / sec: 983.48
Iteration:   2260, Loss function: 5.306, Average Loss: 5.601, avg. samples / sec: 969.36
Iteration:   2280, Loss function: 5.355, Average Loss: 5.598, avg. samples / sec: 957.05
Iteration:   2300, Loss function: 5.137, Average Loss: 5.595, avg. samples / sec: 950.28
Iteration:   2320, Loss function: 5.046, Average Loss: 5.593, avg. samples / sec: 985.98
Iteration:   2340, Loss function: 5.718, Average Loss: 5.591, avg. samples / sec: 960.09
Iteration:   2360, Loss function: 5.333, Average Loss: 5.587, avg. samples / sec: 942.57
Iteration:   2380, Loss function: 5.265, Average Loss: 5.583, avg. samples / sec: 933.25
Iteration:   2400, Loss function: 5.503, Average Loss: 5.578, avg. samples / sec: 985.93
Iteration:   2420, Loss function: 5.725, Average Loss: 5.574, avg. samples / sec: 991.79
Iteration:   2440, Loss function: 5.511, Average Loss: 5.572, avg. samples / sec: 998.69
Iteration:   2460, Loss function: 5.146, Average Loss: 5.568, avg. samples / sec: 917.52
Iteration:   2480, Loss function: 5.540, Average Loss: 5.564, avg. samples / sec: 979.18
Iteration:   2500, Loss function: 5.432, Average Loss: 5.561, avg. samples / sec: 973.45
Iteration:   2520, Loss function: 5.472, Average Loss: 5.555, avg. samples / sec: 883.45
Iteration:   2540, Loss function: 5.493, Average Loss: 5.552, avg. samples / sec: 921.44
Iteration:   2560, Loss function: 5.285, Average Loss: 5.548, avg. samples / sec: 974.53
Iteration:   2580, Loss function: 5.334, Average Loss: 5.544, avg. samples / sec: 968.99
Iteration:   2600, Loss function: 5.354, Average Loss: 5.540, avg. samples / sec: 987.92
Iteration:   2620, Loss function: 5.521, Average Loss: 5.535, avg. samples / sec: 995.02
Iteration:   2640, Loss function: 5.298, Average Loss: 5.533, avg. samples / sec: 974.36
Iteration:   2660, Loss function: 5.078, Average Loss: 5.530, avg. samples / sec: 851.39
Iteration:   2680, Loss function: 5.207, Average Loss: 5.526, avg. samples / sec: 979.31
Iteration:   2700, Loss function: 5.203, Average Loss: 5.521, avg. samples / sec: 902.23
Iteration:   2720, Loss function: 5.241, Average Loss: 5.517, avg. samples / sec: 971.46
Iteration:   2740, Loss function: 5.145, Average Loss: 5.513, avg. samples / sec: 910.98
Iteration:   2760, Loss function: 4.986, Average Loss: 5.509, avg. samples / sec: 917.57
Iteration:   2780, Loss function: 5.572, Average Loss: 5.505, avg. samples / sec: 945.89
Iteration:   2800, Loss function: 5.178, Average Loss: 5.499, avg. samples / sec: 905.69
Iteration:   2820, Loss function: 5.432, Average Loss: 5.494, avg. samples / sec: 966.94
Iteration:   2840, Loss function: 5.119, Average Loss: 5.490, avg. samples / sec: 877.09
Iteration:   2860, Loss function: 5.022, Average Loss: 5.485, avg. samples / sec: 995.22
Iteration:   2880, Loss function: 5.303, Average Loss: 5.481, avg. samples / sec: 898.40
Iteration:   2900, Loss function: 5.179, Average Loss: 5.477, avg. samples / sec: 977.44
Iteration:   2920, Loss function: 5.150, Average Loss: 5.472, avg. samples / sec: 946.11
Iteration:   2940, Loss function: 5.161, Average Loss: 5.467, avg. samples / sec: 979.17
Iteration:   2960, Loss function: 5.389, Average Loss: 5.463, avg. samples / sec: 943.49
Iteration:   2980, Loss function: 5.224, Average Loss: 5.460, avg. samples / sec: 990.96
Iteration:   3000, Loss function: 5.247, Average Loss: 5.454, avg. samples / sec: 943.00
Iteration:   3020, Loss function: 5.309, Average Loss: 5.448, avg. samples / sec: 949.78
Iteration:   3040, Loss function: 5.267, Average Loss: 5.443, avg. samples / sec: 956.31
Iteration:   3060, Loss function: 5.184, Average Loss: 5.438, avg. samples / sec: 969.88
Iteration:   3080, Loss function: 4.935, Average Loss: 5.433, avg. samples / sec: 961.73
:::MLLOG {"namespace": "", "time_ms": 1639761917940, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917941, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.286, Average Loss: 5.427, avg. samples / sec: 921.65
Iteration:   3120, Loss function: 5.154, Average Loss: 5.421, avg. samples / sec: 924.03
Iteration:   3140, Loss function: 5.215, Average Loss: 5.415, avg. samples / sec: 973.64
Iteration:   3160, Loss function: 5.302, Average Loss: 5.410, avg. samples / sec: 973.90
Iteration:   3180, Loss function: 4.995, Average Loss: 5.405, avg. samples / sec: 993.12
Iteration:   3200, Loss function: 5.359, Average Loss: 5.400, avg. samples / sec: 997.16
Iteration:   3220, Loss function: 5.132, Average Loss: 5.395, avg. samples / sec: 985.10
Iteration:   3240, Loss function: 5.247, Average Loss: 5.390, avg. samples / sec: 958.28
Iteration:   3260, Loss function: 5.079, Average Loss: 5.384, avg. samples / sec: 925.19
Iteration:   3280, Loss function: 4.848, Average Loss: 5.378, avg. samples / sec: 904.77
Iteration:   3300, Loss function: 4.754, Average Loss: 5.371, avg. samples / sec: 989.00
Iteration:   3320, Loss function: 4.907, Average Loss: 5.366, avg. samples / sec: 977.20
Iteration:   3340, Loss function: 5.141, Average Loss: 5.362, avg. samples / sec: 930.79
Iteration:   3360, Loss function: 5.156, Average Loss: 5.356, avg. samples / sec: 873.83
Iteration:   3380, Loss function: 5.441, Average Loss: 5.350, avg. samples / sec: 994.49
Iteration:   3400, Loss function: 4.705, Average Loss: 5.345, avg. samples / sec: 963.86
Iteration:   3420, Loss function: 5.223, Average Loss: 5.340, avg. samples / sec: 954.82
Iteration:   3440, Loss function: 4.849, Average Loss: 5.336, avg. samples / sec: 994.31
Iteration:   3460, Loss function: 5.172, Average Loss: 5.331, avg. samples / sec: 983.04
Iteration:   3480, Loss function: 5.078, Average Loss: 5.326, avg. samples / sec: 933.13
Iteration:   3500, Loss function: 5.189, Average Loss: 5.322, avg. samples / sec: 945.96
Iteration:   3520, Loss function: 5.119, Average Loss: 5.319, avg. samples / sec: 960.32
Iteration:   3540, Loss function: 5.178, Average Loss: 5.315, avg. samples / sec: 941.36
Iteration:   3560, Loss function: 4.862, Average Loss: 5.311, avg. samples / sec: 973.01
Iteration:   3580, Loss function: 5.084, Average Loss: 5.307, avg. samples / sec: 987.42
Iteration:   3600, Loss function: 5.115, Average Loss: 5.301, avg. samples / sec: 992.15
Iteration:   3620, Loss function: 4.793, Average Loss: 5.295, avg. samples / sec: 957.64
Iteration:   3640, Loss function: 4.784, Average Loss: 5.290, avg. samples / sec: 970.68
Iteration:   3660, Loss function: 4.964, Average Loss: 5.285, avg. samples / sec: 988.62
Iteration:   3680, Loss function: 5.398, Average Loss: 5.279, avg. samples / sec: 924.53
Iteration:   3700, Loss function: 5.063, Average Loss: 5.274, avg. samples / sec: 972.36
Iteration:   3720, Loss function: 4.881, Average Loss: 5.268, avg. samples / sec: 973.67
Iteration:   3740, Loss function: 5.134, Average Loss: 5.263, avg. samples / sec: 892.87
Iteration:   3760, Loss function: 5.106, Average Loss: 5.259, avg. samples / sec: 968.86
Iteration:   3780, Loss function: 5.256, Average Loss: 5.256, avg. samples / sec: 997.19
Iteration:   3800, Loss function: 5.302, Average Loss: 5.252, avg. samples / sec: 932.97
Iteration:   3820, Loss function: 5.193, Average Loss: 5.248, avg. samples / sec: 894.35
Iteration:   3840, Loss function: 4.693, Average Loss: 5.245, avg. samples / sec: 962.59
Iteration:   3860, Loss function: 4.881, Average Loss: 5.239, avg. samples / sec: 905.36
Iteration:   3880, Loss function: 4.877, Average Loss: 5.233, avg. samples / sec: 977.42
Iteration:   3900, Loss function: 5.108, Average Loss: 5.229, avg. samples / sec: 914.83
Iteration:   3920, Loss function: 5.036, Average Loss: 5.223, avg. samples / sec: 964.98
Iteration:   3940, Loss function: 5.096, Average Loss: 5.218, avg. samples / sec: 949.17
Iteration:   3960, Loss function: 4.832, Average Loss: 5.214, avg. samples / sec: 921.18
Iteration:   3980, Loss function: 4.859, Average Loss: 5.209, avg. samples / sec: 980.11
Iteration:   4000, Loss function: 5.120, Average Loss: 5.205, avg. samples / sec: 953.83
Iteration:   4020, Loss function: 4.859, Average Loss: 5.201, avg. samples / sec: 959.72
Iteration:   4040, Loss function: 4.998, Average Loss: 5.198, avg. samples / sec: 921.22
Iteration:   4060, Loss function: 5.190, Average Loss: 5.194, avg. samples / sec: 924.96
Iteration:   4080, Loss function: 5.248, Average Loss: 5.189, avg. samples / sec: 961.03
Iteration:   4100, Loss function: 5.116, Average Loss: 5.186, avg. samples / sec: 783.64
:::MLLOG {"namespace": "", "time_ms": 1639762041552, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762041554, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.860, Average Loss: 5.183, avg. samples / sec: 941.46
Iteration:   4140, Loss function: 5.132, Average Loss: 5.178, avg. samples / sec: 890.53
Iteration:   4160, Loss function: 4.893, Average Loss: 5.172, avg. samples / sec: 981.28
Iteration:   4180, Loss function: 5.051, Average Loss: 5.166, avg. samples / sec: 920.44
Iteration:   4200, Loss function: 4.876, Average Loss: 5.161, avg. samples / sec: 854.74
Iteration:   4220, Loss function: 4.752, Average Loss: 5.156, avg. samples / sec: 950.85
Iteration:   4240, Loss function: 4.908, Average Loss: 5.151, avg. samples / sec: 953.57
Iteration:   4260, Loss function: 5.035, Average Loss: 5.147, avg. samples / sec: 874.15
Iteration:   4280, Loss function: 5.085, Average Loss: 5.140, avg. samples / sec: 846.36
Iteration:   4300, Loss function: 4.942, Average Loss: 5.135, avg. samples / sec: 879.46
Iteration:   4320, Loss function: 4.773, Average Loss: 5.130, avg. samples / sec: 992.45
Iteration:   4340, Loss function: 4.727, Average Loss: 5.125, avg. samples / sec: 988.25
Iteration:   4360, Loss function: 4.762, Average Loss: 5.121, avg. samples / sec: 954.94
Iteration:   4380, Loss function: 5.023, Average Loss: 5.116, avg. samples / sec: 989.82
Iteration:   4400, Loss function: 4.734, Average Loss: 5.111, avg. samples / sec: 987.09
Iteration:   4420, Loss function: 4.923, Average Loss: 5.106, avg. samples / sec: 983.86
Iteration:   4440, Loss function: 4.742, Average Loss: 5.102, avg. samples / sec: 948.06
Iteration:   4460, Loss function: 5.145, Average Loss: 5.098, avg. samples / sec: 940.36
Iteration:   4480, Loss function: 4.989, Average Loss: 5.095, avg. samples / sec: 982.85
Iteration:   4500, Loss function: 4.866, Average Loss: 5.092, avg. samples / sec: 959.28
Iteration:   4520, Loss function: 4.619, Average Loss: 5.088, avg. samples / sec: 936.92
Iteration:   4540, Loss function: 5.040, Average Loss: 5.083, avg. samples / sec: 952.67
Iteration:   4560, Loss function: 4.793, Average Loss: 5.078, avg. samples / sec: 913.07
Iteration:   4580, Loss function: 4.811, Average Loss: 5.076, avg. samples / sec: 929.47
Iteration:   4600, Loss function: 4.800, Average Loss: 5.073, avg. samples / sec: 903.62
Iteration:   4620, Loss function: 4.797, Average Loss: 5.069, avg. samples / sec: 953.86
Iteration:   4640, Loss function: 4.616, Average Loss: 5.063, avg. samples / sec: 956.99
Iteration:   4660, Loss function: 4.726, Average Loss: 5.059, avg. samples / sec: 964.58
Iteration:   4680, Loss function: 5.137, Average Loss: 5.054, avg. samples / sec: 995.19
Iteration:   4700, Loss function: 4.736, Average Loss: 5.051, avg. samples / sec: 888.49
Iteration:   4720, Loss function: 4.529, Average Loss: 5.045, avg. samples / sec: 953.56
Iteration:   4740, Loss function: 4.866, Average Loss: 5.041, avg. samples / sec: 944.79
Iteration:   4760, Loss function: 4.565, Average Loss: 5.037, avg. samples / sec: 919.11
Iteration:   4780, Loss function: 5.078, Average Loss: 5.033, avg. samples / sec: 945.27
Iteration:   4800, Loss function: 4.904, Average Loss: 5.030, avg. samples / sec: 969.60
Iteration:   4820, Loss function: 4.929, Average Loss: 5.027, avg. samples / sec: 944.00
Iteration:   4840, Loss function: 5.193, Average Loss: 5.023, avg. samples / sec: 909.96
Iteration:   4860, Loss function: 4.737, Average Loss: 5.018, avg. samples / sec: 923.91
Iteration:   4880, Loss function: 5.262, Average Loss: 5.015, avg. samples / sec: 923.61
Iteration:   4900, Loss function: 4.665, Average Loss: 5.011, avg. samples / sec: 978.92
Iteration:   4920, Loss function: 4.739, Average Loss: 5.008, avg. samples / sec: 980.55
Iteration:   4940, Loss function: 4.700, Average Loss: 5.004, avg. samples / sec: 928.44
Iteration:   4960, Loss function: 4.655, Average Loss: 5.001, avg. samples / sec: 925.45
Iteration:   4980, Loss function: 4.565, Average Loss: 4.997, avg. samples / sec: 921.24
Iteration:   5000, Loss function: 4.775, Average Loss: 4.995, avg. samples / sec: 1000.52
Iteration:   5020, Loss function: 5.115, Average Loss: 4.992, avg. samples / sec: 976.53
Iteration:   5040, Loss function: 4.863, Average Loss: 4.989, avg. samples / sec: 938.35
Iteration:   5060, Loss function: 4.737, Average Loss: 4.985, avg. samples / sec: 974.95
Iteration:   5080, Loss function: 4.659, Average Loss: 4.981, avg. samples / sec: 969.49
Iteration:   5100, Loss function: 4.670, Average Loss: 4.977, avg. samples / sec: 998.43
Iteration:   5120, Loss function: 4.722, Average Loss: 4.975, avg. samples / sec: 996.96
Iteration:   5140, Loss function: 4.823, Average Loss: 4.971, avg. samples / sec: 990.37
:::MLLOG {"namespace": "", "time_ms": 1639762165653, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.39 s
:::MLLOG {"namespace": "", "time_ms": 1639762196147, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762196149, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762196150, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.864, Average Loss: 4.966, avg. samples / sec: 69.10
Iteration:   5180, Loss function: 4.663, Average Loss: 4.962, avg. samples / sec: 965.07
DONE (t=4.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10867
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21912
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09806
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19490
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10867 AP goal: 0.10000
Iteration:   5200, Loss function: 4.828, Average Loss: 4.958, avg. samples / sec: 1013.16
:::MLLOG {"namespace": "", "time_ms": 1639762202913, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202914, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10866804973834862, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202914, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762203162, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:30:04 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:30:04 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514072, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514327, "event_type": "POINT_IN_TIME", "key": "seed", "value": 145306917, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 145306917
:::MLLOG {"namespace": "", "time_ms": 1639761516754, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516755, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516759, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540987, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540987, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761543274, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543275, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.17s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543616, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543617, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543618, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.346, Average Loss: 0.022, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.119, Average Loss: 0.451, avg. samples / sec: 766.86
Iteration:     40, Loss function: 20.795, Average Loss: 0.853, avg. samples / sec: 829.04
Iteration:     60, Loss function: 20.452, Average Loss: 1.242, avg. samples / sec: 850.09
Iteration:     80, Loss function: 20.115, Average Loss: 1.616, avg. samples / sec: 889.61
Iteration:    100, Loss function: 16.470, Average Loss: 1.954, avg. samples / sec: 871.39
Iteration:    120, Loss function: 12.349, Average Loss: 2.176, avg. samples / sec: 641.86
Iteration:    140, Loss function: 9.859, Average Loss: 2.339, avg. samples / sec: 894.20
Iteration:    160, Loss function: 9.294, Average Loss: 2.480, avg. samples / sec: 953.10
Iteration:    180, Loss function: 8.940, Average Loss: 2.610, avg. samples / sec: 915.48
Iteration:    200, Loss function: 8.572, Average Loss: 2.734, avg. samples / sec: 946.81
Iteration:    220, Loss function: 8.473, Average Loss: 2.853, avg. samples / sec: 948.24
Iteration:    240, Loss function: 8.500, Average Loss: 2.968, avg. samples / sec: 948.64
Iteration:    260, Loss function: 8.684, Average Loss: 3.080, avg. samples / sec: 973.03
Iteration:    280, Loss function: 8.652, Average Loss: 3.192, avg. samples / sec: 943.45
Iteration:    300, Loss function: 8.393, Average Loss: 3.296, avg. samples / sec: 950.29
Iteration:    320, Loss function: 8.291, Average Loss: 3.396, avg. samples / sec: 960.18
Iteration:    340, Loss function: 8.221, Average Loss: 3.492, avg. samples / sec: 981.63
Iteration:    360, Loss function: 7.921, Average Loss: 3.584, avg. samples / sec: 955.21
Iteration:    380, Loss function: 7.968, Average Loss: 3.673, avg. samples / sec: 872.96
Iteration:    400, Loss function: 7.908, Average Loss: 3.756, avg. samples / sec: 936.93
Iteration:    420, Loss function: 7.598, Average Loss: 3.836, avg. samples / sec: 970.92
Iteration:    440, Loss function: 7.889, Average Loss: 3.915, avg. samples / sec: 962.70
Iteration:    460, Loss function: 7.887, Average Loss: 3.991, avg. samples / sec: 989.99
Iteration:    480, Loss function: 7.378, Average Loss: 4.064, avg. samples / sec: 974.13
Iteration:    500, Loss function: 7.444, Average Loss: 4.133, avg. samples / sec: 994.11
Iteration:    520, Loss function: 7.358, Average Loss: 4.200, avg. samples / sec: 988.19
Iteration:    540, Loss function: 7.471, Average Loss: 4.265, avg. samples / sec: 898.00
Iteration:    560, Loss function: 7.174, Average Loss: 4.326, avg. samples / sec: 973.33
Iteration:    580, Loss function: 7.260, Average Loss: 4.385, avg. samples / sec: 878.52
Iteration:    600, Loss function: 7.255, Average Loss: 4.443, avg. samples / sec: 946.84
Iteration:    620, Loss function: 7.016, Average Loss: 4.499, avg. samples / sec: 784.04
Iteration:    640, Loss function: 6.962, Average Loss: 4.553, avg. samples / sec: 971.54
Iteration:    660, Loss function: 7.121, Average Loss: 4.606, avg. samples / sec: 907.94
Iteration:    680, Loss function: 7.320, Average Loss: 4.657, avg. samples / sec: 967.68
Iteration:    700, Loss function: 6.820, Average Loss: 4.704, avg. samples / sec: 904.81
Iteration:    720, Loss function: 6.833, Average Loss: 4.753, avg. samples / sec: 921.66
Iteration:    740, Loss function: 6.868, Average Loss: 4.798, avg. samples / sec: 943.70
Iteration:    760, Loss function: 7.109, Average Loss: 4.841, avg. samples / sec: 909.30
Iteration:    780, Loss function: 6.744, Average Loss: 4.883, avg. samples / sec: 930.74
Iteration:    800, Loss function: 7.018, Average Loss: 4.921, avg. samples / sec: 899.81
Iteration:    820, Loss function: 6.752, Average Loss: 4.958, avg. samples / sec: 918.87
Iteration:    840, Loss function: 6.718, Average Loss: 4.993, avg. samples / sec: 920.70
Iteration:    860, Loss function: 6.788, Average Loss: 5.026, avg. samples / sec: 977.35
Iteration:    880, Loss function: 6.595, Average Loss: 5.057, avg. samples / sec: 986.53
Iteration:    900, Loss function: 6.794, Average Loss: 5.087, avg. samples / sec: 924.80
Iteration:    920, Loss function: 6.711, Average Loss: 5.115, avg. samples / sec: 973.17
Iteration:    940, Loss function: 6.701, Average Loss: 5.144, avg. samples / sec: 974.86
Iteration:    960, Loss function: 6.394, Average Loss: 5.172, avg. samples / sec: 980.44
Iteration:    980, Loss function: 6.399, Average Loss: 5.198, avg. samples / sec: 982.20
Iteration:   1000, Loss function: 6.530, Average Loss: 5.223, avg. samples / sec: 979.97
Iteration:   1020, Loss function: 6.297, Average Loss: 5.246, avg. samples / sec: 973.44
:::MLLOG {"namespace": "", "time_ms": 1639761670665, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761670676, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.660, Average Loss: 5.270, avg. samples / sec: 958.71
Iteration:   1060, Loss function: 6.352, Average Loss: 5.292, avg. samples / sec: 878.76
Iteration:   1080, Loss function: 6.197, Average Loss: 5.314, avg. samples / sec: 922.85
Iteration:   1100, Loss function: 6.005, Average Loss: 5.333, avg. samples / sec: 939.35
Iteration:   1120, Loss function: 6.132, Average Loss: 5.352, avg. samples / sec: 978.57
Iteration:   1140, Loss function: 6.536, Average Loss: 5.371, avg. samples / sec: 989.70
Iteration:   1160, Loss function: 6.060, Average Loss: 5.388, avg. samples / sec: 978.07
Iteration:   1180, Loss function: 6.183, Average Loss: 5.404, avg. samples / sec: 961.83
Iteration:   1200, Loss function: 6.400, Average Loss: 5.420, avg. samples / sec: 981.31
Iteration:   1220, Loss function: 6.282, Average Loss: 5.435, avg. samples / sec: 967.45
Iteration:   1240, Loss function: 5.937, Average Loss: 5.447, avg. samples / sec: 969.49
Iteration:   1260, Loss function: 5.987, Average Loss: 5.459, avg. samples / sec: 916.22
Iteration:   1280, Loss function: 5.882, Average Loss: 5.472, avg. samples / sec: 926.81
Iteration:   1300, Loss function: 6.109, Average Loss: 5.485, avg. samples / sec: 902.34
Iteration:   1320, Loss function: 6.158, Average Loss: 5.497, avg. samples / sec: 928.09
Iteration:   1340, Loss function: 5.792, Average Loss: 5.507, avg. samples / sec: 943.15
Iteration:   1360, Loss function: 5.955, Average Loss: 5.517, avg. samples / sec: 918.32
Iteration:   1380, Loss function: 6.139, Average Loss: 5.527, avg. samples / sec: 967.68
Iteration:   1400, Loss function: 6.004, Average Loss: 5.535, avg. samples / sec: 939.50
Iteration:   1420, Loss function: 6.003, Average Loss: 5.543, avg. samples / sec: 932.63
Iteration:   1440, Loss function: 6.465, Average Loss: 5.552, avg. samples / sec: 968.15
Iteration:   1460, Loss function: 6.205, Average Loss: 5.561, avg. samples / sec: 941.52
Iteration:   1480, Loss function: 5.781, Average Loss: 5.569, avg. samples / sec: 984.14
Iteration:   1500, Loss function: 6.063, Average Loss: 5.577, avg. samples / sec: 878.44
Iteration:   1520, Loss function: 5.986, Average Loss: 5.582, avg. samples / sec: 963.55
Iteration:   1540, Loss function: 6.014, Average Loss: 5.586, avg. samples / sec: 995.86
Iteration:   1560, Loss function: 5.570, Average Loss: 5.590, avg. samples / sec: 925.15
Iteration:   1580, Loss function: 5.662, Average Loss: 5.595, avg. samples / sec: 975.88
Iteration:   1600, Loss function: 6.148, Average Loss: 5.600, avg. samples / sec: 976.86
Iteration:   1620, Loss function: 5.696, Average Loss: 5.604, avg. samples / sec: 986.54
Iteration:   1640, Loss function: 5.876, Average Loss: 5.607, avg. samples / sec: 980.46
Iteration:   1660, Loss function: 5.992, Average Loss: 5.612, avg. samples / sec: 935.69
Iteration:   1680, Loss function: 5.730, Average Loss: 5.616, avg. samples / sec: 980.25
Iteration:   1700, Loss function: 5.530, Average Loss: 5.620, avg. samples / sec: 971.99
Iteration:   1720, Loss function: 5.721, Average Loss: 5.623, avg. samples / sec: 979.11
Iteration:   1740, Loss function: 5.753, Average Loss: 5.626, avg. samples / sec: 953.20
Iteration:   1760, Loss function: 5.447, Average Loss: 5.627, avg. samples / sec: 914.41
Iteration:   1780, Loss function: 5.617, Average Loss: 5.628, avg. samples / sec: 920.08
Iteration:   1800, Loss function: 5.858, Average Loss: 5.630, avg. samples / sec: 988.58
Iteration:   1820, Loss function: 6.075, Average Loss: 5.631, avg. samples / sec: 911.35
Iteration:   1840, Loss function: 5.743, Average Loss: 5.632, avg. samples / sec: 965.30
Iteration:   1860, Loss function: 5.720, Average Loss: 5.631, avg. samples / sec: 890.34
Iteration:   1880, Loss function: 5.793, Average Loss: 5.633, avg. samples / sec: 974.18
Iteration:   1900, Loss function: 5.846, Average Loss: 5.633, avg. samples / sec: 979.63
Iteration:   1920, Loss function: 5.700, Average Loss: 5.632, avg. samples / sec: 970.17
Iteration:   1940, Loss function: 5.945, Average Loss: 5.632, avg. samples / sec: 969.64
Iteration:   1960, Loss function: 5.467, Average Loss: 5.631, avg. samples / sec: 942.46
Iteration:   1980, Loss function: 5.709, Average Loss: 5.631, avg. samples / sec: 963.63
Iteration:   2000, Loss function: 5.470, Average Loss: 5.630, avg. samples / sec: 966.16
Iteration:   2020, Loss function: 5.595, Average Loss: 5.628, avg. samples / sec: 930.53
Iteration:   2040, Loss function: 5.683, Average Loss: 5.628, avg. samples / sec: 950.30
:::MLLOG {"namespace": "", "time_ms": 1639761794387, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794389, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.427, Average Loss: 5.625, avg. samples / sec: 831.37
Iteration:   2080, Loss function: 5.089, Average Loss: 5.623, avg. samples / sec: 876.37
Iteration:   2100, Loss function: 5.512, Average Loss: 5.622, avg. samples / sec: 987.89
Iteration:   2120, Loss function: 5.317, Average Loss: 5.618, avg. samples / sec: 974.28
Iteration:   2140, Loss function: 5.439, Average Loss: 5.616, avg. samples / sec: 982.18
Iteration:   2160, Loss function: 5.473, Average Loss: 5.614, avg. samples / sec: 941.22
Iteration:   2180, Loss function: 5.362, Average Loss: 5.612, avg. samples / sec: 861.88
Iteration:   2200, Loss function: 5.376, Average Loss: 5.608, avg. samples / sec: 966.63
Iteration:   2220, Loss function: 5.615, Average Loss: 5.606, avg. samples / sec: 907.51
Iteration:   2240, Loss function: 5.518, Average Loss: 5.604, avg. samples / sec: 983.48
Iteration:   2260, Loss function: 5.306, Average Loss: 5.601, avg. samples / sec: 969.36
Iteration:   2280, Loss function: 5.355, Average Loss: 5.598, avg. samples / sec: 957.05
Iteration:   2300, Loss function: 5.137, Average Loss: 5.595, avg. samples / sec: 950.28
Iteration:   2320, Loss function: 5.046, Average Loss: 5.593, avg. samples / sec: 985.98
Iteration:   2340, Loss function: 5.718, Average Loss: 5.591, avg. samples / sec: 960.09
Iteration:   2360, Loss function: 5.333, Average Loss: 5.587, avg. samples / sec: 942.57
Iteration:   2380, Loss function: 5.265, Average Loss: 5.583, avg. samples / sec: 933.25
Iteration:   2400, Loss function: 5.503, Average Loss: 5.578, avg. samples / sec: 985.93
Iteration:   2420, Loss function: 5.725, Average Loss: 5.574, avg. samples / sec: 991.79
Iteration:   2440, Loss function: 5.511, Average Loss: 5.572, avg. samples / sec: 998.69
Iteration:   2460, Loss function: 5.146, Average Loss: 5.568, avg. samples / sec: 917.52
Iteration:   2480, Loss function: 5.540, Average Loss: 5.564, avg. samples / sec: 979.18
Iteration:   2500, Loss function: 5.432, Average Loss: 5.561, avg. samples / sec: 973.45
Iteration:   2520, Loss function: 5.472, Average Loss: 5.555, avg. samples / sec: 883.45
Iteration:   2540, Loss function: 5.493, Average Loss: 5.552, avg. samples / sec: 921.44
Iteration:   2560, Loss function: 5.285, Average Loss: 5.548, avg. samples / sec: 974.53
Iteration:   2580, Loss function: 5.334, Average Loss: 5.544, avg. samples / sec: 968.99
Iteration:   2600, Loss function: 5.354, Average Loss: 5.540, avg. samples / sec: 987.92
Iteration:   2620, Loss function: 5.521, Average Loss: 5.535, avg. samples / sec: 995.02
Iteration:   2640, Loss function: 5.298, Average Loss: 5.533, avg. samples / sec: 974.36
Iteration:   2660, Loss function: 5.078, Average Loss: 5.530, avg. samples / sec: 851.39
Iteration:   2680, Loss function: 5.207, Average Loss: 5.526, avg. samples / sec: 979.31
Iteration:   2700, Loss function: 5.203, Average Loss: 5.521, avg. samples / sec: 902.23
Iteration:   2720, Loss function: 5.241, Average Loss: 5.517, avg. samples / sec: 971.46
Iteration:   2740, Loss function: 5.145, Average Loss: 5.513, avg. samples / sec: 910.98
Iteration:   2760, Loss function: 4.986, Average Loss: 5.509, avg. samples / sec: 917.57
Iteration:   2780, Loss function: 5.572, Average Loss: 5.505, avg. samples / sec: 945.89
Iteration:   2800, Loss function: 5.178, Average Loss: 5.499, avg. samples / sec: 905.69
Iteration:   2820, Loss function: 5.432, Average Loss: 5.494, avg. samples / sec: 966.94
Iteration:   2840, Loss function: 5.119, Average Loss: 5.490, avg. samples / sec: 877.09
Iteration:   2860, Loss function: 5.022, Average Loss: 5.485, avg. samples / sec: 995.22
Iteration:   2880, Loss function: 5.303, Average Loss: 5.481, avg. samples / sec: 898.40
Iteration:   2900, Loss function: 5.179, Average Loss: 5.477, avg. samples / sec: 977.44
Iteration:   2920, Loss function: 5.150, Average Loss: 5.472, avg. samples / sec: 946.11
Iteration:   2940, Loss function: 5.161, Average Loss: 5.467, avg. samples / sec: 979.17
Iteration:   2960, Loss function: 5.389, Average Loss: 5.463, avg. samples / sec: 943.49
Iteration:   2980, Loss function: 5.224, Average Loss: 5.460, avg. samples / sec: 990.96
Iteration:   3000, Loss function: 5.247, Average Loss: 5.454, avg. samples / sec: 943.00
Iteration:   3020, Loss function: 5.309, Average Loss: 5.448, avg. samples / sec: 949.78
Iteration:   3040, Loss function: 5.267, Average Loss: 5.443, avg. samples / sec: 956.31
Iteration:   3060, Loss function: 5.184, Average Loss: 5.438, avg. samples / sec: 969.88
Iteration:   3080, Loss function: 4.935, Average Loss: 5.433, avg. samples / sec: 961.73
:::MLLOG {"namespace": "", "time_ms": 1639761917940, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917941, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.286, Average Loss: 5.427, avg. samples / sec: 921.65
Iteration:   3120, Loss function: 5.154, Average Loss: 5.421, avg. samples / sec: 924.03
Iteration:   3140, Loss function: 5.215, Average Loss: 5.415, avg. samples / sec: 973.64
Iteration:   3160, Loss function: 5.302, Average Loss: 5.410, avg. samples / sec: 973.90
Iteration:   3180, Loss function: 4.995, Average Loss: 5.405, avg. samples / sec: 993.12
Iteration:   3200, Loss function: 5.359, Average Loss: 5.400, avg. samples / sec: 997.16
Iteration:   3220, Loss function: 5.132, Average Loss: 5.395, avg. samples / sec: 985.10
Iteration:   3240, Loss function: 5.247, Average Loss: 5.390, avg. samples / sec: 958.28
Iteration:   3260, Loss function: 5.079, Average Loss: 5.384, avg. samples / sec: 925.19
Iteration:   3280, Loss function: 4.848, Average Loss: 5.378, avg. samples / sec: 904.77
Iteration:   3300, Loss function: 4.754, Average Loss: 5.371, avg. samples / sec: 989.00
Iteration:   3320, Loss function: 4.907, Average Loss: 5.366, avg. samples / sec: 977.20
Iteration:   3340, Loss function: 5.141, Average Loss: 5.362, avg. samples / sec: 930.79
Iteration:   3360, Loss function: 5.156, Average Loss: 5.356, avg. samples / sec: 873.83
Iteration:   3380, Loss function: 5.441, Average Loss: 5.350, avg. samples / sec: 994.49
Iteration:   3400, Loss function: 4.705, Average Loss: 5.345, avg. samples / sec: 963.86
Iteration:   3420, Loss function: 5.223, Average Loss: 5.340, avg. samples / sec: 954.82
Iteration:   3440, Loss function: 4.849, Average Loss: 5.336, avg. samples / sec: 994.31
Iteration:   3460, Loss function: 5.172, Average Loss: 5.331, avg. samples / sec: 983.04
Iteration:   3480, Loss function: 5.078, Average Loss: 5.326, avg. samples / sec: 933.13
Iteration:   3500, Loss function: 5.189, Average Loss: 5.322, avg. samples / sec: 945.96
Iteration:   3520, Loss function: 5.119, Average Loss: 5.319, avg. samples / sec: 960.32
Iteration:   3540, Loss function: 5.178, Average Loss: 5.315, avg. samples / sec: 941.36
Iteration:   3560, Loss function: 4.862, Average Loss: 5.311, avg. samples / sec: 973.01
Iteration:   3580, Loss function: 5.084, Average Loss: 5.307, avg. samples / sec: 987.42
Iteration:   3600, Loss function: 5.115, Average Loss: 5.301, avg. samples / sec: 992.15
Iteration:   3620, Loss function: 4.793, Average Loss: 5.295, avg. samples / sec: 957.64
Iteration:   3640, Loss function: 4.784, Average Loss: 5.290, avg. samples / sec: 970.68
Iteration:   3660, Loss function: 4.964, Average Loss: 5.285, avg. samples / sec: 988.62
Iteration:   3680, Loss function: 5.398, Average Loss: 5.279, avg. samples / sec: 924.53
Iteration:   3700, Loss function: 5.063, Average Loss: 5.274, avg. samples / sec: 972.36
Iteration:   3720, Loss function: 4.881, Average Loss: 5.268, avg. samples / sec: 973.67
Iteration:   3740, Loss function: 5.134, Average Loss: 5.263, avg. samples / sec: 892.87
Iteration:   3760, Loss function: 5.106, Average Loss: 5.259, avg. samples / sec: 968.86
Iteration:   3780, Loss function: 5.256, Average Loss: 5.256, avg. samples / sec: 997.19
Iteration:   3800, Loss function: 5.302, Average Loss: 5.252, avg. samples / sec: 932.97
Iteration:   3820, Loss function: 5.193, Average Loss: 5.248, avg. samples / sec: 894.35
Iteration:   3840, Loss function: 4.693, Average Loss: 5.245, avg. samples / sec: 962.59
Iteration:   3860, Loss function: 4.881, Average Loss: 5.239, avg. samples / sec: 905.36
Iteration:   3880, Loss function: 4.877, Average Loss: 5.233, avg. samples / sec: 977.42
Iteration:   3900, Loss function: 5.108, Average Loss: 5.229, avg. samples / sec: 914.83
Iteration:   3920, Loss function: 5.036, Average Loss: 5.223, avg. samples / sec: 964.98
Iteration:   3940, Loss function: 5.096, Average Loss: 5.218, avg. samples / sec: 949.17
Iteration:   3960, Loss function: 4.832, Average Loss: 5.214, avg. samples / sec: 921.18
Iteration:   3980, Loss function: 4.859, Average Loss: 5.209, avg. samples / sec: 980.11
Iteration:   4000, Loss function: 5.120, Average Loss: 5.205, avg. samples / sec: 953.83
Iteration:   4020, Loss function: 4.859, Average Loss: 5.201, avg. samples / sec: 959.72
Iteration:   4040, Loss function: 4.998, Average Loss: 5.198, avg. samples / sec: 921.22
Iteration:   4060, Loss function: 5.190, Average Loss: 5.194, avg. samples / sec: 924.96
Iteration:   4080, Loss function: 5.248, Average Loss: 5.189, avg. samples / sec: 961.03
Iteration:   4100, Loss function: 5.116, Average Loss: 5.186, avg. samples / sec: 783.64
:::MLLOG {"namespace": "", "time_ms": 1639762041552, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762041554, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.860, Average Loss: 5.183, avg. samples / sec: 941.46
Iteration:   4140, Loss function: 5.132, Average Loss: 5.178, avg. samples / sec: 890.53
Iteration:   4160, Loss function: 4.893, Average Loss: 5.172, avg. samples / sec: 981.28
Iteration:   4180, Loss function: 5.051, Average Loss: 5.166, avg. samples / sec: 920.44
Iteration:   4200, Loss function: 4.876, Average Loss: 5.161, avg. samples / sec: 854.74
Iteration:   4220, Loss function: 4.752, Average Loss: 5.156, avg. samples / sec: 950.85
Iteration:   4240, Loss function: 4.908, Average Loss: 5.151, avg. samples / sec: 953.57
Iteration:   4260, Loss function: 5.035, Average Loss: 5.147, avg. samples / sec: 874.15
Iteration:   4280, Loss function: 5.085, Average Loss: 5.140, avg. samples / sec: 846.36
Iteration:   4300, Loss function: 4.942, Average Loss: 5.135, avg. samples / sec: 879.46
Iteration:   4320, Loss function: 4.773, Average Loss: 5.130, avg. samples / sec: 992.45
Iteration:   4340, Loss function: 4.727, Average Loss: 5.125, avg. samples / sec: 988.25
Iteration:   4360, Loss function: 4.762, Average Loss: 5.121, avg. samples / sec: 954.94
Iteration:   4380, Loss function: 5.023, Average Loss: 5.116, avg. samples / sec: 989.82
Iteration:   4400, Loss function: 4.734, Average Loss: 5.111, avg. samples / sec: 987.09
Iteration:   4420, Loss function: 4.923, Average Loss: 5.106, avg. samples / sec: 983.86
Iteration:   4440, Loss function: 4.742, Average Loss: 5.102, avg. samples / sec: 948.06
Iteration:   4460, Loss function: 5.145, Average Loss: 5.098, avg. samples / sec: 940.36
Iteration:   4480, Loss function: 4.989, Average Loss: 5.095, avg. samples / sec: 982.85
Iteration:   4500, Loss function: 4.866, Average Loss: 5.092, avg. samples / sec: 959.28
Iteration:   4520, Loss function: 4.619, Average Loss: 5.088, avg. samples / sec: 936.92
Iteration:   4540, Loss function: 5.040, Average Loss: 5.083, avg. samples / sec: 952.67
Iteration:   4560, Loss function: 4.793, Average Loss: 5.078, avg. samples / sec: 913.07
Iteration:   4580, Loss function: 4.811, Average Loss: 5.076, avg. samples / sec: 929.47
Iteration:   4600, Loss function: 4.800, Average Loss: 5.073, avg. samples / sec: 903.62
Iteration:   4620, Loss function: 4.797, Average Loss: 5.069, avg. samples / sec: 953.86
Iteration:   4640, Loss function: 4.616, Average Loss: 5.063, avg. samples / sec: 956.99
Iteration:   4660, Loss function: 4.726, Average Loss: 5.059, avg. samples / sec: 964.58
Iteration:   4680, Loss function: 5.137, Average Loss: 5.054, avg. samples / sec: 995.19
Iteration:   4700, Loss function: 4.736, Average Loss: 5.051, avg. samples / sec: 888.49
Iteration:   4720, Loss function: 4.529, Average Loss: 5.045, avg. samples / sec: 953.56
Iteration:   4740, Loss function: 4.866, Average Loss: 5.041, avg. samples / sec: 944.79
Iteration:   4760, Loss function: 4.565, Average Loss: 5.037, avg. samples / sec: 919.11
Iteration:   4780, Loss function: 5.078, Average Loss: 5.033, avg. samples / sec: 945.27
Iteration:   4800, Loss function: 4.904, Average Loss: 5.030, avg. samples / sec: 969.60
Iteration:   4820, Loss function: 4.929, Average Loss: 5.027, avg. samples / sec: 944.00
Iteration:   4840, Loss function: 5.193, Average Loss: 5.023, avg. samples / sec: 909.96
Iteration:   4860, Loss function: 4.737, Average Loss: 5.018, avg. samples / sec: 923.91
Iteration:   4880, Loss function: 5.262, Average Loss: 5.015, avg. samples / sec: 923.61
Iteration:   4900, Loss function: 4.665, Average Loss: 5.011, avg. samples / sec: 978.92
Iteration:   4920, Loss function: 4.739, Average Loss: 5.008, avg. samples / sec: 980.55
Iteration:   4940, Loss function: 4.700, Average Loss: 5.004, avg. samples / sec: 928.44
Iteration:   4960, Loss function: 4.655, Average Loss: 5.001, avg. samples / sec: 925.45
Iteration:   4980, Loss function: 4.565, Average Loss: 4.997, avg. samples / sec: 921.24
Iteration:   5000, Loss function: 4.775, Average Loss: 4.995, avg. samples / sec: 1000.52
Iteration:   5020, Loss function: 5.115, Average Loss: 4.992, avg. samples / sec: 976.53
Iteration:   5040, Loss function: 4.863, Average Loss: 4.989, avg. samples / sec: 938.35
Iteration:   5060, Loss function: 4.737, Average Loss: 4.985, avg. samples / sec: 974.95
Iteration:   5080, Loss function: 4.659, Average Loss: 4.981, avg. samples / sec: 969.49
Iteration:   5100, Loss function: 4.670, Average Loss: 4.977, avg. samples / sec: 998.43
Iteration:   5120, Loss function: 4.722, Average Loss: 4.975, avg. samples / sec: 996.96
Iteration:   5140, Loss function: 4.823, Average Loss: 4.971, avg. samples / sec: 990.37
:::MLLOG {"namespace": "", "time_ms": 1639762165653, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.39 s
:::MLLOG {"namespace": "", "time_ms": 1639762196147, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762196149, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762196150, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.864, Average Loss: 4.966, avg. samples / sec: 69.10
Iteration:   5180, Loss function: 4.663, Average Loss: 4.962, avg. samples / sec: 965.07
DONE (t=4.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10867
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21912
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09806
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19490
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21733
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10867 AP goal: 0.10000
Iteration:   5200, Loss function: 4.828, Average Loss: 4.958, avg. samples / sec: 1013.16
:::MLLOG {"namespace": "", "time_ms": 1639762202913, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202914, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10866804973834862, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202914, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762203162, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762204
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:30:04 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:27 PM'
START TIMING RUN WAS 2021-12-17 05:18:27 PM
ENDING TIMING RUN AT 2021-12-17 05:30:04 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:30:04 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ result=697
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,697,nvidia,2021-12-17 05:18:27 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,697,nvidia,2021-12-17 05:18:27 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
