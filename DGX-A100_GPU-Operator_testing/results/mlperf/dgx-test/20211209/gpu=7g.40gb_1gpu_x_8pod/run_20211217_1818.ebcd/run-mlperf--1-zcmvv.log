8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ echo 'Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761506
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:26 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:26 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:26 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
Patching 'bind_launch.py' to err-exit on failure ...
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-18-09 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ set +x
Fri Dec 17 17:18:26 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-zcmvv to the sync file ...
run-mlperf--1-zcmvv Found 2 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
     2	run-mlperf--1-zcmvv
Fri Dec 17 17:18:31 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761513861, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761513995, "event_type": "POINT_IN_TIME", "key": "seed", "value": 943957398, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 943957398
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761516574, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516575, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516578, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540791, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540792, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761543016, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543017, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543394, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543395, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543397, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.562, Average Loss: 0.023, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.081, Average Loss: 0.455, avg. samples / sec: 802.40
Iteration:     40, Loss function: 20.828, Average Loss: 0.856, avg. samples / sec: 818.38
Iteration:     60, Loss function: 20.384, Average Loss: 1.246, avg. samples / sec: 835.30
Iteration:     80, Loss function: 19.806, Average Loss: 1.619, avg. samples / sec: 829.97
Iteration:    100, Loss function: 15.556, Average Loss: 1.945, avg. samples / sec: 870.05
Iteration:    120, Loss function: 11.416, Average Loss: 2.153, avg. samples / sec: 672.51
Iteration:    140, Loss function: 9.610, Average Loss: 2.311, avg. samples / sec: 864.53
Iteration:    160, Loss function: 9.168, Average Loss: 2.453, avg. samples / sec: 945.87
Iteration:    180, Loss function: 8.952, Average Loss: 2.583, avg. samples / sec: 975.01
Iteration:    200, Loss function: 8.695, Average Loss: 2.708, avg. samples / sec: 943.12
Iteration:    220, Loss function: 8.607, Average Loss: 2.828, avg. samples / sec: 959.87
Iteration:    240, Loss function: 8.690, Average Loss: 2.945, avg. samples / sec: 918.74
Iteration:    260, Loss function: 8.881, Average Loss: 3.060, avg. samples / sec: 937.93
Iteration:    280, Loss function: 8.556, Average Loss: 3.171, avg. samples / sec: 945.39
Iteration:    300, Loss function: 8.456, Average Loss: 3.276, avg. samples / sec: 919.89
Iteration:    320, Loss function: 8.340, Average Loss: 3.382, avg. samples / sec: 882.33
Iteration:    340, Loss function: 8.367, Average Loss: 3.481, avg. samples / sec: 836.06
Iteration:    360, Loss function: 8.000, Average Loss: 3.574, avg. samples / sec: 959.42
Iteration:    380, Loss function: 7.947, Average Loss: 3.664, avg. samples / sec: 889.94
Iteration:    400, Loss function: 7.849, Average Loss: 3.749, avg. samples / sec: 921.90
Iteration:    420, Loss function: 7.627, Average Loss: 3.830, avg. samples / sec: 935.08
Iteration:    440, Loss function: 7.820, Average Loss: 3.909, avg. samples / sec: 941.30
Iteration:    460, Loss function: 7.900, Average Loss: 3.986, avg. samples / sec: 902.51
Iteration:    480, Loss function: 7.644, Average Loss: 4.061, avg. samples / sec: 949.52
Iteration:    500, Loss function: 7.842, Average Loss: 4.132, avg. samples / sec: 866.68
Iteration:    520, Loss function: 7.524, Average Loss: 4.200, avg. samples / sec: 925.60
Iteration:    540, Loss function: 7.443, Average Loss: 4.265, avg. samples / sec: 938.93
Iteration:    560, Loss function: 7.100, Average Loss: 4.326, avg. samples / sec: 951.91
Iteration:    580, Loss function: 7.291, Average Loss: 4.387, avg. samples / sec: 948.05
Iteration:    600, Loss function: 7.124, Average Loss: 4.446, avg. samples / sec: 942.44
Iteration:    620, Loss function: 6.966, Average Loss: 4.501, avg. samples / sec: 819.62
Iteration:    640, Loss function: 6.916, Average Loss: 4.555, avg. samples / sec: 940.88
Iteration:    660, Loss function: 7.188, Average Loss: 4.607, avg. samples / sec: 981.20
Iteration:    680, Loss function: 7.178, Average Loss: 4.658, avg. samples / sec: 975.99
Iteration:    700, Loss function: 6.896, Average Loss: 4.706, avg. samples / sec: 969.24
Iteration:    720, Loss function: 6.891, Average Loss: 4.754, avg. samples / sec: 955.70
Iteration:    740, Loss function: 6.920, Average Loss: 4.799, avg. samples / sec: 963.21
Iteration:    760, Loss function: 7.011, Average Loss: 4.842, avg. samples / sec: 979.46
Iteration:    780, Loss function: 6.765, Average Loss: 4.883, avg. samples / sec: 927.07
Iteration:    800, Loss function: 7.015, Average Loss: 4.922, avg. samples / sec: 955.24
Iteration:    820, Loss function: 6.764, Average Loss: 4.959, avg. samples / sec: 955.42
Iteration:    840, Loss function: 6.675, Average Loss: 4.994, avg. samples / sec: 966.42
Iteration:    860, Loss function: 6.770, Average Loss: 5.029, avg. samples / sec: 971.93
Iteration:    880, Loss function: 6.783, Average Loss: 5.061, avg. samples / sec: 956.41
Iteration:    900, Loss function: 6.858, Average Loss: 5.092, avg. samples / sec: 937.05
Iteration:    920, Loss function: 6.530, Average Loss: 5.121, avg. samples / sec: 925.41
Iteration:    940, Loss function: 6.801, Average Loss: 5.150, avg. samples / sec: 953.59
Iteration:    960, Loss function: 6.398, Average Loss: 5.178, avg. samples / sec: 920.39
Iteration:    980, Loss function: 6.485, Average Loss: 5.205, avg. samples / sec: 941.56
Iteration:   1000, Loss function: 6.692, Average Loss: 5.231, avg. samples / sec: 964.33
Iteration:   1020, Loss function: 6.442, Average Loss: 5.254, avg. samples / sec: 937.74
:::MLLOG {"namespace": "", "time_ms": 1639761671535, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761671537, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.588, Average Loss: 5.277, avg. samples / sec: 862.31
Iteration:   1060, Loss function: 6.272, Average Loss: 5.300, avg. samples / sec: 977.57
Iteration:   1080, Loss function: 6.207, Average Loss: 5.321, avg. samples / sec: 978.22
Iteration:   1100, Loss function: 6.091, Average Loss: 5.340, avg. samples / sec: 951.09
Iteration:   1120, Loss function: 6.219, Average Loss: 5.359, avg. samples / sec: 965.90
Iteration:   1140, Loss function: 6.446, Average Loss: 5.377, avg. samples / sec: 964.94
Iteration:   1160, Loss function: 6.176, Average Loss: 5.396, avg. samples / sec: 919.49
Iteration:   1180, Loss function: 6.124, Average Loss: 5.412, avg. samples / sec: 959.47
Iteration:   1200, Loss function: 6.185, Average Loss: 5.428, avg. samples / sec: 902.09
Iteration:   1220, Loss function: 6.197, Average Loss: 5.442, avg. samples / sec: 944.69
Iteration:   1240, Loss function: 6.211, Average Loss: 5.456, avg. samples / sec: 971.01
Iteration:   1260, Loss function: 6.089, Average Loss: 5.468, avg. samples / sec: 961.00
Iteration:   1280, Loss function: 5.898, Average Loss: 5.480, avg. samples / sec: 974.92
Iteration:   1300, Loss function: 6.145, Average Loss: 5.493, avg. samples / sec: 960.10
Iteration:   1320, Loss function: 6.061, Average Loss: 5.505, avg. samples / sec: 984.23
Iteration:   1340, Loss function: 5.966, Average Loss: 5.515, avg. samples / sec: 965.20
Iteration:   1360, Loss function: 5.942, Average Loss: 5.526, avg. samples / sec: 979.73
Iteration:   1380, Loss function: 6.252, Average Loss: 5.536, avg. samples / sec: 913.14
Iteration:   1400, Loss function: 6.135, Average Loss: 5.544, avg. samples / sec: 977.83
Iteration:   1420, Loss function: 5.907, Average Loss: 5.552, avg. samples / sec: 954.91
Iteration:   1440, Loss function: 6.286, Average Loss: 5.562, avg. samples / sec: 934.05
Iteration:   1460, Loss function: 6.259, Average Loss: 5.570, avg. samples / sec: 958.20
Iteration:   1480, Loss function: 6.020, Average Loss: 5.577, avg. samples / sec: 908.46
Iteration:   1500, Loss function: 5.918, Average Loss: 5.585, avg. samples / sec: 887.37
Iteration:   1520, Loss function: 6.039, Average Loss: 5.591, avg. samples / sec: 964.52
Iteration:   1540, Loss function: 6.043, Average Loss: 5.596, avg. samples / sec: 982.83
Iteration:   1560, Loss function: 5.689, Average Loss: 5.600, avg. samples / sec: 994.25
Iteration:   1580, Loss function: 5.670, Average Loss: 5.605, avg. samples / sec: 974.31
Iteration:   1600, Loss function: 6.099, Average Loss: 5.610, avg. samples / sec: 927.14
Iteration:   1620, Loss function: 5.750, Average Loss: 5.615, avg. samples / sec: 891.02
Iteration:   1640, Loss function: 5.934, Average Loss: 5.618, avg. samples / sec: 890.33
Iteration:   1660, Loss function: 6.009, Average Loss: 5.622, avg. samples / sec: 985.83
Iteration:   1680, Loss function: 5.729, Average Loss: 5.625, avg. samples / sec: 935.65
Iteration:   1700, Loss function: 5.518, Average Loss: 5.629, avg. samples / sec: 932.79
Iteration:   1720, Loss function: 5.694, Average Loss: 5.630, avg. samples / sec: 937.94
Iteration:   1740, Loss function: 5.956, Average Loss: 5.633, avg. samples / sec: 869.90
Iteration:   1760, Loss function: 5.597, Average Loss: 5.634, avg. samples / sec: 960.35
Iteration:   1780, Loss function: 5.983, Average Loss: 5.636, avg. samples / sec: 971.95
Iteration:   1800, Loss function: 5.598, Average Loss: 5.638, avg. samples / sec: 996.42
Iteration:   1820, Loss function: 5.952, Average Loss: 5.640, avg. samples / sec: 964.28
Iteration:   1840, Loss function: 6.053, Average Loss: 5.642, avg. samples / sec: 919.54
Iteration:   1860, Loss function: 5.538, Average Loss: 5.641, avg. samples / sec: 977.08
Iteration:   1880, Loss function: 5.778, Average Loss: 5.642, avg. samples / sec: 935.15
Iteration:   1900, Loss function: 5.869, Average Loss: 5.643, avg. samples / sec: 913.43
Iteration:   1920, Loss function: 5.951, Average Loss: 5.642, avg. samples / sec: 966.72
Iteration:   1940, Loss function: 6.105, Average Loss: 5.642, avg. samples / sec: 993.92
Iteration:   1960, Loss function: 5.675, Average Loss: 5.642, avg. samples / sec: 968.40
Iteration:   1980, Loss function: 5.684, Average Loss: 5.641, avg. samples / sec: 918.12
Iteration:   2000, Loss function: 5.596, Average Loss: 5.640, avg. samples / sec: 973.80
Iteration:   2020, Loss function: 5.446, Average Loss: 5.638, avg. samples / sec: 974.04
Iteration:   2040, Loss function: 5.701, Average Loss: 5.637, avg. samples / sec: 930.87
:::MLLOG {"namespace": "", "time_ms": 1639761795222, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761795223, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.515, Average Loss: 5.635, avg. samples / sec: 948.65
Iteration:   2080, Loss function: 4.971, Average Loss: 5.633, avg. samples / sec: 958.73
Iteration:   2100, Loss function: 5.522, Average Loss: 5.632, avg. samples / sec: 970.71
Iteration:   2120, Loss function: 5.468, Average Loss: 5.629, avg. samples / sec: 947.21
Iteration:   2140, Loss function: 5.537, Average Loss: 5.626, avg. samples / sec: 921.52
Iteration:   2160, Loss function: 5.510, Average Loss: 5.624, avg. samples / sec: 914.67
Iteration:   2180, Loss function: 5.325, Average Loss: 5.622, avg. samples / sec: 975.12
Iteration:   2200, Loss function: 5.542, Average Loss: 5.618, avg. samples / sec: 966.97
Iteration:   2220, Loss function: 5.513, Average Loss: 5.616, avg. samples / sec: 973.02
Iteration:   2240, Loss function: 5.548, Average Loss: 5.614, avg. samples / sec: 983.33
Iteration:   2260, Loss function: 5.310, Average Loss: 5.611, avg. samples / sec: 941.28
Iteration:   2280, Loss function: 5.324, Average Loss: 5.608, avg. samples / sec: 991.50
Iteration:   2300, Loss function: 5.091, Average Loss: 5.604, avg. samples / sec: 974.79
Iteration:   2320, Loss function: 5.391, Average Loss: 5.601, avg. samples / sec: 952.96
Iteration:   2340, Loss function: 5.259, Average Loss: 5.596, avg. samples / sec: 980.87
Iteration:   2360, Loss function: 5.394, Average Loss: 5.592, avg. samples / sec: 955.47
Iteration:   2380, Loss function: 5.201, Average Loss: 5.589, avg. samples / sec: 978.46
Iteration:   2400, Loss function: 5.522, Average Loss: 5.585, avg. samples / sec: 913.71
Iteration:   2420, Loss function: 5.572, Average Loss: 5.582, avg. samples / sec: 943.36
Iteration:   2440, Loss function: 5.509, Average Loss: 5.578, avg. samples / sec: 972.76
Iteration:   2460, Loss function: 5.261, Average Loss: 5.575, avg. samples / sec: 976.98
Iteration:   2480, Loss function: 5.392, Average Loss: 5.572, avg. samples / sec: 973.60
Iteration:   2500, Loss function: 5.465, Average Loss: 5.567, avg. samples / sec: 986.14
Iteration:   2520, Loss function: 5.217, Average Loss: 5.563, avg. samples / sec: 964.07
Iteration:   2540, Loss function: 5.469, Average Loss: 5.560, avg. samples / sec: 973.65
Iteration:   2560, Loss function: 5.131, Average Loss: 5.556, avg. samples / sec: 978.90
Iteration:   2580, Loss function: 5.346, Average Loss: 5.553, avg. samples / sec: 962.43
Iteration:   2600, Loss function: 5.595, Average Loss: 5.551, avg. samples / sec: 973.38
Iteration:   2620, Loss function: 5.517, Average Loss: 5.547, avg. samples / sec: 968.78
Iteration:   2640, Loss function: 5.276, Average Loss: 5.546, avg. samples / sec: 971.15
Iteration:   2660, Loss function: 5.191, Average Loss: 5.542, avg. samples / sec: 963.77
Iteration:   2680, Loss function: 5.262, Average Loss: 5.538, avg. samples / sec: 963.34
Iteration:   2700, Loss function: 5.242, Average Loss: 5.533, avg. samples / sec: 951.56
Iteration:   2720, Loss function: 5.411, Average Loss: 5.529, avg. samples / sec: 955.27
Iteration:   2740, Loss function: 4.983, Average Loss: 5.524, avg. samples / sec: 950.16
Iteration:   2760, Loss function: 4.913, Average Loss: 5.518, avg. samples / sec: 930.15
Iteration:   2780, Loss function: 5.526, Average Loss: 5.515, avg. samples / sec: 955.95
Iteration:   2800, Loss function: 5.298, Average Loss: 5.510, avg. samples / sec: 946.68
Iteration:   2820, Loss function: 5.400, Average Loss: 5.505, avg. samples / sec: 933.22
Iteration:   2840, Loss function: 5.064, Average Loss: 5.500, avg. samples / sec: 989.51
Iteration:   2860, Loss function: 5.038, Average Loss: 5.496, avg. samples / sec: 951.85
Iteration:   2880, Loss function: 5.249, Average Loss: 5.492, avg. samples / sec: 972.30
Iteration:   2900, Loss function: 4.906, Average Loss: 5.486, avg. samples / sec: 942.31
Iteration:   2920, Loss function: 5.248, Average Loss: 5.480, avg. samples / sec: 955.96
Iteration:   2940, Loss function: 4.994, Average Loss: 5.475, avg. samples / sec: 902.71
Iteration:   2960, Loss function: 5.360, Average Loss: 5.471, avg. samples / sec: 984.38
Iteration:   2980, Loss function: 5.214, Average Loss: 5.468, avg. samples / sec: 970.79
Iteration:   3000, Loss function: 5.265, Average Loss: 5.462, avg. samples / sec: 980.26
Iteration:   3020, Loss function: 5.250, Average Loss: 5.456, avg. samples / sec: 972.07
Iteration:   3040, Loss function: 5.252, Average Loss: 5.451, avg. samples / sec: 969.37
Iteration:   3060, Loss function: 5.045, Average Loss: 5.446, avg. samples / sec: 962.59
Iteration:   3080, Loss function: 4.987, Average Loss: 5.440, avg. samples / sec: 959.91
:::MLLOG {"namespace": "", "time_ms": 1639761917203, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917204, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.295, Average Loss: 5.435, avg. samples / sec: 979.75
Iteration:   3120, Loss function: 4.840, Average Loss: 5.429, avg. samples / sec: 965.73
Iteration:   3140, Loss function: 5.140, Average Loss: 5.423, avg. samples / sec: 960.44
Iteration:   3160, Loss function: 5.438, Average Loss: 5.418, avg. samples / sec: 954.70
Iteration:   3180, Loss function: 4.986, Average Loss: 5.412, avg. samples / sec: 895.82
Iteration:   3200, Loss function: 5.268, Average Loss: 5.406, avg. samples / sec: 954.32
Iteration:   3220, Loss function: 5.158, Average Loss: 5.402, avg. samples / sec: 911.17
Iteration:   3240, Loss function: 5.280, Average Loss: 5.396, avg. samples / sec: 987.86
Iteration:   3260, Loss function: 5.131, Average Loss: 5.392, avg. samples / sec: 998.72
Iteration:   3280, Loss function: 4.645, Average Loss: 5.385, avg. samples / sec: 960.92
Iteration:   3300, Loss function: 4.920, Average Loss: 5.379, avg. samples / sec: 955.84
Iteration:   3320, Loss function: 4.820, Average Loss: 5.374, avg. samples / sec: 921.61
Iteration:   3340, Loss function: 5.101, Average Loss: 5.369, avg. samples / sec: 952.74
Iteration:   3360, Loss function: 4.977, Average Loss: 5.362, avg. samples / sec: 969.14
Iteration:   3380, Loss function: 5.205, Average Loss: 5.356, avg. samples / sec: 1004.66
Iteration:   3400, Loss function: 4.752, Average Loss: 5.351, avg. samples / sec: 929.27
Iteration:   3420, Loss function: 5.091, Average Loss: 5.345, avg. samples / sec: 928.29
Iteration:   3440, Loss function: 4.927, Average Loss: 5.340, avg. samples / sec: 950.55
Iteration:   3460, Loss function: 5.099, Average Loss: 5.336, avg. samples / sec: 989.01
Iteration:   3480, Loss function: 5.219, Average Loss: 5.331, avg. samples / sec: 967.59
Iteration:   3500, Loss function: 5.217, Average Loss: 5.327, avg. samples / sec: 957.85
Iteration:   3520, Loss function: 4.969, Average Loss: 5.324, avg. samples / sec: 902.58
Iteration:   3540, Loss function: 5.038, Average Loss: 5.319, avg. samples / sec: 968.06
Iteration:   3560, Loss function: 5.028, Average Loss: 5.316, avg. samples / sec: 953.15
Iteration:   3580, Loss function: 5.016, Average Loss: 5.312, avg. samples / sec: 878.95
Iteration:   3600, Loss function: 5.339, Average Loss: 5.306, avg. samples / sec: 924.99
Iteration:   3620, Loss function: 4.684, Average Loss: 5.301, avg. samples / sec: 968.25
Iteration:   3640, Loss function: 4.876, Average Loss: 5.297, avg. samples / sec: 897.55
Iteration:   3660, Loss function: 5.119, Average Loss: 5.293, avg. samples / sec: 958.45
Iteration:   3680, Loss function: 5.058, Average Loss: 5.287, avg. samples / sec: 960.62
Iteration:   3700, Loss function: 5.070, Average Loss: 5.282, avg. samples / sec: 964.62
Iteration:   3720, Loss function: 4.948, Average Loss: 5.276, avg. samples / sec: 978.14
Iteration:   3740, Loss function: 5.078, Average Loss: 5.272, avg. samples / sec: 989.89
Iteration:   3760, Loss function: 5.076, Average Loss: 5.268, avg. samples / sec: 986.07
Iteration:   3780, Loss function: 4.937, Average Loss: 5.263, avg. samples / sec: 972.40
Iteration:   3800, Loss function: 5.144, Average Loss: 5.260, avg. samples / sec: 975.86
Iteration:   3820, Loss function: 5.112, Average Loss: 5.255, avg. samples / sec: 927.72
Iteration:   3840, Loss function: 4.713, Average Loss: 5.251, avg. samples / sec: 922.54
Iteration:   3860, Loss function: 5.075, Average Loss: 5.246, avg. samples / sec: 969.53
Iteration:   3880, Loss function: 5.030, Average Loss: 5.240, avg. samples / sec: 926.03
Iteration:   3900, Loss function: 5.128, Average Loss: 5.236, avg. samples / sec: 959.80
Iteration:   3920, Loss function: 4.923, Average Loss: 5.229, avg. samples / sec: 977.32
Iteration:   3940, Loss function: 4.885, Average Loss: 5.224, avg. samples / sec: 984.09
Iteration:   3960, Loss function: 4.813, Average Loss: 5.220, avg. samples / sec: 979.84
Iteration:   3980, Loss function: 4.841, Average Loss: 5.215, avg. samples / sec: 974.90
Iteration:   4000, Loss function: 5.205, Average Loss: 5.211, avg. samples / sec: 983.36
Iteration:   4020, Loss function: 5.091, Average Loss: 5.207, avg. samples / sec: 932.86
Iteration:   4040, Loss function: 5.013, Average Loss: 5.203, avg. samples / sec: 941.86
Iteration:   4060, Loss function: 5.207, Average Loss: 5.200, avg. samples / sec: 959.16
Iteration:   4080, Loss function: 5.182, Average Loss: 5.195, avg. samples / sec: 937.38
Iteration:   4100, Loss function: 5.146, Average Loss: 5.193, avg. samples / sec: 931.09
:::MLLOG {"namespace": "", "time_ms": 1639762040188, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762040190, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.183, Average Loss: 5.190, avg. samples / sec: 966.84
Iteration:   4140, Loss function: 5.035, Average Loss: 5.185, avg. samples / sec: 971.11
Iteration:   4160, Loss function: 4.790, Average Loss: 5.178, avg. samples / sec: 929.56
Iteration:   4180, Loss function: 5.015, Average Loss: 5.172, avg. samples / sec: 981.93
Iteration:   4200, Loss function: 4.889, Average Loss: 5.167, avg. samples / sec: 963.03
Iteration:   4220, Loss function: 4.656, Average Loss: 5.162, avg. samples / sec: 950.62
Iteration:   4240, Loss function: 4.976, Average Loss: 5.157, avg. samples / sec: 882.13
Iteration:   4260, Loss function: 5.163, Average Loss: 5.153, avg. samples / sec: 975.11
Iteration:   4280, Loss function: 5.149, Average Loss: 5.148, avg. samples / sec: 990.97
Iteration:   4300, Loss function: 4.670, Average Loss: 5.141, avg. samples / sec: 965.24
Iteration:   4320, Loss function: 4.950, Average Loss: 5.137, avg. samples / sec: 976.77
Iteration:   4340, Loss function: 4.750, Average Loss: 5.131, avg. samples / sec: 964.04
Iteration:   4360, Loss function: 4.992, Average Loss: 5.127, avg. samples / sec: 957.03
Iteration:   4380, Loss function: 5.096, Average Loss: 5.122, avg. samples / sec: 910.75
Iteration:   4400, Loss function: 5.004, Average Loss: 5.118, avg. samples / sec: 891.26
Iteration:   4420, Loss function: 4.910, Average Loss: 5.113, avg. samples / sec: 980.25
Iteration:   4440, Loss function: 4.971, Average Loss: 5.109, avg. samples / sec: 976.91
Iteration:   4460, Loss function: 5.091, Average Loss: 5.105, avg. samples / sec: 986.06
Iteration:   4480, Loss function: 5.076, Average Loss: 5.103, avg. samples / sec: 938.66
Iteration:   4500, Loss function: 4.815, Average Loss: 5.100, avg. samples / sec: 916.01
Iteration:   4520, Loss function: 4.690, Average Loss: 5.095, avg. samples / sec: 988.40
Iteration:   4540, Loss function: 5.053, Average Loss: 5.091, avg. samples / sec: 964.37
Iteration:   4560, Loss function: 4.792, Average Loss: 5.087, avg. samples / sec: 990.91
Iteration:   4580, Loss function: 4.847, Average Loss: 5.085, avg. samples / sec: 937.11
Iteration:   4600, Loss function: 4.829, Average Loss: 5.081, avg. samples / sec: 954.55
Iteration:   4620, Loss function: 4.638, Average Loss: 5.076, avg. samples / sec: 969.52
Iteration:   4640, Loss function: 4.697, Average Loss: 5.071, avg. samples / sec: 942.81
Iteration:   4660, Loss function: 4.731, Average Loss: 5.068, avg. samples / sec: 984.16
Iteration:   4680, Loss function: 5.220, Average Loss: 5.063, avg. samples / sec: 981.80
Iteration:   4700, Loss function: 4.707, Average Loss: 5.058, avg. samples / sec: 954.87
Iteration:   4720, Loss function: 4.777, Average Loss: 5.053, avg. samples / sec: 989.20
Iteration:   4740, Loss function: 4.821, Average Loss: 5.050, avg. samples / sec: 978.23
Iteration:   4760, Loss function: 4.599, Average Loss: 5.047, avg. samples / sec: 938.09
Iteration:   4780, Loss function: 5.035, Average Loss: 5.043, avg. samples / sec: 946.32
Iteration:   4800, Loss function: 5.053, Average Loss: 5.041, avg. samples / sec: 991.31
Iteration:   4820, Loss function: 4.859, Average Loss: 5.037, avg. samples / sec: 920.55
Iteration:   4840, Loss function: 5.103, Average Loss: 5.034, avg. samples / sec: 976.29
Iteration:   4860, Loss function: 4.664, Average Loss: 5.030, avg. samples / sec: 977.33
Iteration:   4880, Loss function: 5.116, Average Loss: 5.026, avg. samples / sec: 947.56
Iteration:   4900, Loss function: 4.613, Average Loss: 5.021, avg. samples / sec: 974.79
Iteration:   4920, Loss function: 4.824, Average Loss: 5.018, avg. samples / sec: 946.10
Iteration:   4940, Loss function: 4.662, Average Loss: 5.014, avg. samples / sec: 928.12
Iteration:   4960, Loss function: 4.680, Average Loss: 5.010, avg. samples / sec: 898.33
Iteration:   4980, Loss function: 4.602, Average Loss: 5.006, avg. samples / sec: 928.33
Iteration:   5000, Loss function: 4.958, Average Loss: 5.002, avg. samples / sec: 970.87
Iteration:   5020, Loss function: 5.215, Average Loss: 4.998, avg. samples / sec: 992.95
Iteration:   5040, Loss function: 4.828, Average Loss: 4.995, avg. samples / sec: 840.26
Iteration:   5060, Loss function: 4.670, Average Loss: 4.991, avg. samples / sec: 946.53
Iteration:   5080, Loss function: 4.545, Average Loss: 4.987, avg. samples / sec: 928.71
Iteration:   5100, Loss function: 4.872, Average Loss: 4.985, avg. samples / sec: 940.58
Iteration:   5120, Loss function: 4.701, Average Loss: 4.982, avg. samples / sec: 995.06
Iteration:   5140, Loss function: 4.882, Average Loss: 4.978, avg. samples / sec: 998.56
:::MLLOG {"namespace": "", "time_ms": 1639762163120, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.54 s
:::MLLOG {"namespace": "", "time_ms": 1639762193717, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762193766, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762193766, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.825, Average Loss: 4.973, avg. samples / sec: 69.23
Iteration:   5180, Loss function: 4.945, Average Loss: 4.968, avg. samples / sec: 992.67
DONE (t=3.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10326
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21179
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.08956
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18796
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20894
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20894
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10326 AP goal: 0.10000
Iteration:   5200, Loss function: 4.589, Average Loss: 4.964, avg. samples / sec: 951.89
:::MLLOG {"namespace": "", "time_ms": 1639762200424, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200425, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10325847697924241, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200425, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200641, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:30:02 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:30:02 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761513861, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761513995, "event_type": "POINT_IN_TIME", "key": "seed", "value": 943957398, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 943957398
:::MLLOG {"namespace": "", "time_ms": 1639761516574, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516575, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516578, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516579, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540791, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540792, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761543016, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543017, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543394, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543395, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543397, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.562, Average Loss: 0.023, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.081, Average Loss: 0.455, avg. samples / sec: 802.40
Iteration:     40, Loss function: 20.828, Average Loss: 0.856, avg. samples / sec: 818.38
Iteration:     60, Loss function: 20.384, Average Loss: 1.246, avg. samples / sec: 835.30
Iteration:     80, Loss function: 19.806, Average Loss: 1.619, avg. samples / sec: 829.97
Iteration:    100, Loss function: 15.556, Average Loss: 1.945, avg. samples / sec: 870.05
Iteration:    120, Loss function: 11.416, Average Loss: 2.153, avg. samples / sec: 672.51
Iteration:    140, Loss function: 9.610, Average Loss: 2.311, avg. samples / sec: 864.53
Iteration:    160, Loss function: 9.168, Average Loss: 2.453, avg. samples / sec: 945.87
Iteration:    180, Loss function: 8.952, Average Loss: 2.583, avg. samples / sec: 975.01
Iteration:    200, Loss function: 8.695, Average Loss: 2.708, avg. samples / sec: 943.12
Iteration:    220, Loss function: 8.607, Average Loss: 2.828, avg. samples / sec: 959.87
Iteration:    240, Loss function: 8.690, Average Loss: 2.945, avg. samples / sec: 918.74
Iteration:    260, Loss function: 8.881, Average Loss: 3.060, avg. samples / sec: 937.93
Iteration:    280, Loss function: 8.556, Average Loss: 3.171, avg. samples / sec: 945.39
Iteration:    300, Loss function: 8.456, Average Loss: 3.276, avg. samples / sec: 919.89
Iteration:    320, Loss function: 8.340, Average Loss: 3.382, avg. samples / sec: 882.33
Iteration:    340, Loss function: 8.367, Average Loss: 3.481, avg. samples / sec: 836.06
Iteration:    360, Loss function: 8.000, Average Loss: 3.574, avg. samples / sec: 959.42
Iteration:    380, Loss function: 7.947, Average Loss: 3.664, avg. samples / sec: 889.94
Iteration:    400, Loss function: 7.849, Average Loss: 3.749, avg. samples / sec: 921.90
Iteration:    420, Loss function: 7.627, Average Loss: 3.830, avg. samples / sec: 935.08
Iteration:    440, Loss function: 7.820, Average Loss: 3.909, avg. samples / sec: 941.30
Iteration:    460, Loss function: 7.900, Average Loss: 3.986, avg. samples / sec: 902.51
Iteration:    480, Loss function: 7.644, Average Loss: 4.061, avg. samples / sec: 949.52
Iteration:    500, Loss function: 7.842, Average Loss: 4.132, avg. samples / sec: 866.68
Iteration:    520, Loss function: 7.524, Average Loss: 4.200, avg. samples / sec: 925.60
Iteration:    540, Loss function: 7.443, Average Loss: 4.265, avg. samples / sec: 938.93
Iteration:    560, Loss function: 7.100, Average Loss: 4.326, avg. samples / sec: 951.91
Iteration:    580, Loss function: 7.291, Average Loss: 4.387, avg. samples / sec: 948.05
Iteration:    600, Loss function: 7.124, Average Loss: 4.446, avg. samples / sec: 942.44
Iteration:    620, Loss function: 6.966, Average Loss: 4.501, avg. samples / sec: 819.62
Iteration:    640, Loss function: 6.916, Average Loss: 4.555, avg. samples / sec: 940.88
Iteration:    660, Loss function: 7.188, Average Loss: 4.607, avg. samples / sec: 981.20
Iteration:    680, Loss function: 7.178, Average Loss: 4.658, avg. samples / sec: 975.99
Iteration:    700, Loss function: 6.896, Average Loss: 4.706, avg. samples / sec: 969.24
Iteration:    720, Loss function: 6.891, Average Loss: 4.754, avg. samples / sec: 955.70
Iteration:    740, Loss function: 6.920, Average Loss: 4.799, avg. samples / sec: 963.21
Iteration:    760, Loss function: 7.011, Average Loss: 4.842, avg. samples / sec: 979.46
Iteration:    780, Loss function: 6.765, Average Loss: 4.883, avg. samples / sec: 927.07
Iteration:    800, Loss function: 7.015, Average Loss: 4.922, avg. samples / sec: 955.24
Iteration:    820, Loss function: 6.764, Average Loss: 4.959, avg. samples / sec: 955.42
Iteration:    840, Loss function: 6.675, Average Loss: 4.994, avg. samples / sec: 966.42
Iteration:    860, Loss function: 6.770, Average Loss: 5.029, avg. samples / sec: 971.93
Iteration:    880, Loss function: 6.783, Average Loss: 5.061, avg. samples / sec: 956.41
Iteration:    900, Loss function: 6.858, Average Loss: 5.092, avg. samples / sec: 937.05
Iteration:    920, Loss function: 6.530, Average Loss: 5.121, avg. samples / sec: 925.41
Iteration:    940, Loss function: 6.801, Average Loss: 5.150, avg. samples / sec: 953.59
Iteration:    960, Loss function: 6.398, Average Loss: 5.178, avg. samples / sec: 920.39
Iteration:    980, Loss function: 6.485, Average Loss: 5.205, avg. samples / sec: 941.56
Iteration:   1000, Loss function: 6.692, Average Loss: 5.231, avg. samples / sec: 964.33
Iteration:   1020, Loss function: 6.442, Average Loss: 5.254, avg. samples / sec: 937.74
:::MLLOG {"namespace": "", "time_ms": 1639761671535, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761671537, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.588, Average Loss: 5.277, avg. samples / sec: 862.31
Iteration:   1060, Loss function: 6.272, Average Loss: 5.300, avg. samples / sec: 977.57
Iteration:   1080, Loss function: 6.207, Average Loss: 5.321, avg. samples / sec: 978.22
Iteration:   1100, Loss function: 6.091, Average Loss: 5.340, avg. samples / sec: 951.09
Iteration:   1120, Loss function: 6.219, Average Loss: 5.359, avg. samples / sec: 965.90
Iteration:   1140, Loss function: 6.446, Average Loss: 5.377, avg. samples / sec: 964.94
Iteration:   1160, Loss function: 6.176, Average Loss: 5.396, avg. samples / sec: 919.49
Iteration:   1180, Loss function: 6.124, Average Loss: 5.412, avg. samples / sec: 959.47
Iteration:   1200, Loss function: 6.185, Average Loss: 5.428, avg. samples / sec: 902.09
Iteration:   1220, Loss function: 6.197, Average Loss: 5.442, avg. samples / sec: 944.69
Iteration:   1240, Loss function: 6.211, Average Loss: 5.456, avg. samples / sec: 971.01
Iteration:   1260, Loss function: 6.089, Average Loss: 5.468, avg. samples / sec: 961.00
Iteration:   1280, Loss function: 5.898, Average Loss: 5.480, avg. samples / sec: 974.92
Iteration:   1300, Loss function: 6.145, Average Loss: 5.493, avg. samples / sec: 960.10
Iteration:   1320, Loss function: 6.061, Average Loss: 5.505, avg. samples / sec: 984.23
Iteration:   1340, Loss function: 5.966, Average Loss: 5.515, avg. samples / sec: 965.20
Iteration:   1360, Loss function: 5.942, Average Loss: 5.526, avg. samples / sec: 979.73
Iteration:   1380, Loss function: 6.252, Average Loss: 5.536, avg. samples / sec: 913.14
Iteration:   1400, Loss function: 6.135, Average Loss: 5.544, avg. samples / sec: 977.83
Iteration:   1420, Loss function: 5.907, Average Loss: 5.552, avg. samples / sec: 954.91
Iteration:   1440, Loss function: 6.286, Average Loss: 5.562, avg. samples / sec: 934.05
Iteration:   1460, Loss function: 6.259, Average Loss: 5.570, avg. samples / sec: 958.20
Iteration:   1480, Loss function: 6.020, Average Loss: 5.577, avg. samples / sec: 908.46
Iteration:   1500, Loss function: 5.918, Average Loss: 5.585, avg. samples / sec: 887.37
Iteration:   1520, Loss function: 6.039, Average Loss: 5.591, avg. samples / sec: 964.52
Iteration:   1540, Loss function: 6.043, Average Loss: 5.596, avg. samples / sec: 982.83
Iteration:   1560, Loss function: 5.689, Average Loss: 5.600, avg. samples / sec: 994.25
Iteration:   1580, Loss function: 5.670, Average Loss: 5.605, avg. samples / sec: 974.31
Iteration:   1600, Loss function: 6.099, Average Loss: 5.610, avg. samples / sec: 927.14
Iteration:   1620, Loss function: 5.750, Average Loss: 5.615, avg. samples / sec: 891.02
Iteration:   1640, Loss function: 5.934, Average Loss: 5.618, avg. samples / sec: 890.33
Iteration:   1660, Loss function: 6.009, Average Loss: 5.622, avg. samples / sec: 985.83
Iteration:   1680, Loss function: 5.729, Average Loss: 5.625, avg. samples / sec: 935.65
Iteration:   1700, Loss function: 5.518, Average Loss: 5.629, avg. samples / sec: 932.79
Iteration:   1720, Loss function: 5.694, Average Loss: 5.630, avg. samples / sec: 937.94
Iteration:   1740, Loss function: 5.956, Average Loss: 5.633, avg. samples / sec: 869.90
Iteration:   1760, Loss function: 5.597, Average Loss: 5.634, avg. samples / sec: 960.35
Iteration:   1780, Loss function: 5.983, Average Loss: 5.636, avg. samples / sec: 971.95
Iteration:   1800, Loss function: 5.598, Average Loss: 5.638, avg. samples / sec: 996.42
Iteration:   1820, Loss function: 5.952, Average Loss: 5.640, avg. samples / sec: 964.28
Iteration:   1840, Loss function: 6.053, Average Loss: 5.642, avg. samples / sec: 919.54
Iteration:   1860, Loss function: 5.538, Average Loss: 5.641, avg. samples / sec: 977.08
Iteration:   1880, Loss function: 5.778, Average Loss: 5.642, avg. samples / sec: 935.15
Iteration:   1900, Loss function: 5.869, Average Loss: 5.643, avg. samples / sec: 913.43
Iteration:   1920, Loss function: 5.951, Average Loss: 5.642, avg. samples / sec: 966.72
Iteration:   1940, Loss function: 6.105, Average Loss: 5.642, avg. samples / sec: 993.92
Iteration:   1960, Loss function: 5.675, Average Loss: 5.642, avg. samples / sec: 968.40
Iteration:   1980, Loss function: 5.684, Average Loss: 5.641, avg. samples / sec: 918.12
Iteration:   2000, Loss function: 5.596, Average Loss: 5.640, avg. samples / sec: 973.80
Iteration:   2020, Loss function: 5.446, Average Loss: 5.638, avg. samples / sec: 974.04
Iteration:   2040, Loss function: 5.701, Average Loss: 5.637, avg. samples / sec: 930.87
:::MLLOG {"namespace": "", "time_ms": 1639761795222, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761795223, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.515, Average Loss: 5.635, avg. samples / sec: 948.65
Iteration:   2080, Loss function: 4.971, Average Loss: 5.633, avg. samples / sec: 958.73
Iteration:   2100, Loss function: 5.522, Average Loss: 5.632, avg. samples / sec: 970.71
Iteration:   2120, Loss function: 5.468, Average Loss: 5.629, avg. samples / sec: 947.21
Iteration:   2140, Loss function: 5.537, Average Loss: 5.626, avg. samples / sec: 921.52
Iteration:   2160, Loss function: 5.510, Average Loss: 5.624, avg. samples / sec: 914.67
Iteration:   2180, Loss function: 5.325, Average Loss: 5.622, avg. samples / sec: 975.12
Iteration:   2200, Loss function: 5.542, Average Loss: 5.618, avg. samples / sec: 966.97
Iteration:   2220, Loss function: 5.513, Average Loss: 5.616, avg. samples / sec: 973.02
Iteration:   2240, Loss function: 5.548, Average Loss: 5.614, avg. samples / sec: 983.33
Iteration:   2260, Loss function: 5.310, Average Loss: 5.611, avg. samples / sec: 941.28
Iteration:   2280, Loss function: 5.324, Average Loss: 5.608, avg. samples / sec: 991.50
Iteration:   2300, Loss function: 5.091, Average Loss: 5.604, avg. samples / sec: 974.79
Iteration:   2320, Loss function: 5.391, Average Loss: 5.601, avg. samples / sec: 952.96
Iteration:   2340, Loss function: 5.259, Average Loss: 5.596, avg. samples / sec: 980.87
Iteration:   2360, Loss function: 5.394, Average Loss: 5.592, avg. samples / sec: 955.47
Iteration:   2380, Loss function: 5.201, Average Loss: 5.589, avg. samples / sec: 978.46
Iteration:   2400, Loss function: 5.522, Average Loss: 5.585, avg. samples / sec: 913.71
Iteration:   2420, Loss function: 5.572, Average Loss: 5.582, avg. samples / sec: 943.36
Iteration:   2440, Loss function: 5.509, Average Loss: 5.578, avg. samples / sec: 972.76
Iteration:   2460, Loss function: 5.261, Average Loss: 5.575, avg. samples / sec: 976.98
Iteration:   2480, Loss function: 5.392, Average Loss: 5.572, avg. samples / sec: 973.60
Iteration:   2500, Loss function: 5.465, Average Loss: 5.567, avg. samples / sec: 986.14
Iteration:   2520, Loss function: 5.217, Average Loss: 5.563, avg. samples / sec: 964.07
Iteration:   2540, Loss function: 5.469, Average Loss: 5.560, avg. samples / sec: 973.65
Iteration:   2560, Loss function: 5.131, Average Loss: 5.556, avg. samples / sec: 978.90
Iteration:   2580, Loss function: 5.346, Average Loss: 5.553, avg. samples / sec: 962.43
Iteration:   2600, Loss function: 5.595, Average Loss: 5.551, avg. samples / sec: 973.38
Iteration:   2620, Loss function: 5.517, Average Loss: 5.547, avg. samples / sec: 968.78
Iteration:   2640, Loss function: 5.276, Average Loss: 5.546, avg. samples / sec: 971.15
Iteration:   2660, Loss function: 5.191, Average Loss: 5.542, avg. samples / sec: 963.77
Iteration:   2680, Loss function: 5.262, Average Loss: 5.538, avg. samples / sec: 963.34
Iteration:   2700, Loss function: 5.242, Average Loss: 5.533, avg. samples / sec: 951.56
Iteration:   2720, Loss function: 5.411, Average Loss: 5.529, avg. samples / sec: 955.27
Iteration:   2740, Loss function: 4.983, Average Loss: 5.524, avg. samples / sec: 950.16
Iteration:   2760, Loss function: 4.913, Average Loss: 5.518, avg. samples / sec: 930.15
Iteration:   2780, Loss function: 5.526, Average Loss: 5.515, avg. samples / sec: 955.95
Iteration:   2800, Loss function: 5.298, Average Loss: 5.510, avg. samples / sec: 946.68
Iteration:   2820, Loss function: 5.400, Average Loss: 5.505, avg. samples / sec: 933.22
Iteration:   2840, Loss function: 5.064, Average Loss: 5.500, avg. samples / sec: 989.51
Iteration:   2860, Loss function: 5.038, Average Loss: 5.496, avg. samples / sec: 951.85
Iteration:   2880, Loss function: 5.249, Average Loss: 5.492, avg. samples / sec: 972.30
Iteration:   2900, Loss function: 4.906, Average Loss: 5.486, avg. samples / sec: 942.31
Iteration:   2920, Loss function: 5.248, Average Loss: 5.480, avg. samples / sec: 955.96
Iteration:   2940, Loss function: 4.994, Average Loss: 5.475, avg. samples / sec: 902.71
Iteration:   2960, Loss function: 5.360, Average Loss: 5.471, avg. samples / sec: 984.38
Iteration:   2980, Loss function: 5.214, Average Loss: 5.468, avg. samples / sec: 970.79
Iteration:   3000, Loss function: 5.265, Average Loss: 5.462, avg. samples / sec: 980.26
Iteration:   3020, Loss function: 5.250, Average Loss: 5.456, avg. samples / sec: 972.07
Iteration:   3040, Loss function: 5.252, Average Loss: 5.451, avg. samples / sec: 969.37
Iteration:   3060, Loss function: 5.045, Average Loss: 5.446, avg. samples / sec: 962.59
Iteration:   3080, Loss function: 4.987, Average Loss: 5.440, avg. samples / sec: 959.91
:::MLLOG {"namespace": "", "time_ms": 1639761917203, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917204, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.295, Average Loss: 5.435, avg. samples / sec: 979.75
Iteration:   3120, Loss function: 4.840, Average Loss: 5.429, avg. samples / sec: 965.73
Iteration:   3140, Loss function: 5.140, Average Loss: 5.423, avg. samples / sec: 960.44
Iteration:   3160, Loss function: 5.438, Average Loss: 5.418, avg. samples / sec: 954.70
Iteration:   3180, Loss function: 4.986, Average Loss: 5.412, avg. samples / sec: 895.82
Iteration:   3200, Loss function: 5.268, Average Loss: 5.406, avg. samples / sec: 954.32
Iteration:   3220, Loss function: 5.158, Average Loss: 5.402, avg. samples / sec: 911.17
Iteration:   3240, Loss function: 5.280, Average Loss: 5.396, avg. samples / sec: 987.86
Iteration:   3260, Loss function: 5.131, Average Loss: 5.392, avg. samples / sec: 998.72
Iteration:   3280, Loss function: 4.645, Average Loss: 5.385, avg. samples / sec: 960.92
Iteration:   3300, Loss function: 4.920, Average Loss: 5.379, avg. samples / sec: 955.84
Iteration:   3320, Loss function: 4.820, Average Loss: 5.374, avg. samples / sec: 921.61
Iteration:   3340, Loss function: 5.101, Average Loss: 5.369, avg. samples / sec: 952.74
Iteration:   3360, Loss function: 4.977, Average Loss: 5.362, avg. samples / sec: 969.14
Iteration:   3380, Loss function: 5.205, Average Loss: 5.356, avg. samples / sec: 1004.66
Iteration:   3400, Loss function: 4.752, Average Loss: 5.351, avg. samples / sec: 929.27
Iteration:   3420, Loss function: 5.091, Average Loss: 5.345, avg. samples / sec: 928.29
Iteration:   3440, Loss function: 4.927, Average Loss: 5.340, avg. samples / sec: 950.55
Iteration:   3460, Loss function: 5.099, Average Loss: 5.336, avg. samples / sec: 989.01
Iteration:   3480, Loss function: 5.219, Average Loss: 5.331, avg. samples / sec: 967.59
Iteration:   3500, Loss function: 5.217, Average Loss: 5.327, avg. samples / sec: 957.85
Iteration:   3520, Loss function: 4.969, Average Loss: 5.324, avg. samples / sec: 902.58
Iteration:   3540, Loss function: 5.038, Average Loss: 5.319, avg. samples / sec: 968.06
Iteration:   3560, Loss function: 5.028, Average Loss: 5.316, avg. samples / sec: 953.15
Iteration:   3580, Loss function: 5.016, Average Loss: 5.312, avg. samples / sec: 878.95
Iteration:   3600, Loss function: 5.339, Average Loss: 5.306, avg. samples / sec: 924.99
Iteration:   3620, Loss function: 4.684, Average Loss: 5.301, avg. samples / sec: 968.25
Iteration:   3640, Loss function: 4.876, Average Loss: 5.297, avg. samples / sec: 897.55
Iteration:   3660, Loss function: 5.119, Average Loss: 5.293, avg. samples / sec: 958.45
Iteration:   3680, Loss function: 5.058, Average Loss: 5.287, avg. samples / sec: 960.62
Iteration:   3700, Loss function: 5.070, Average Loss: 5.282, avg. samples / sec: 964.62
Iteration:   3720, Loss function: 4.948, Average Loss: 5.276, avg. samples / sec: 978.14
Iteration:   3740, Loss function: 5.078, Average Loss: 5.272, avg. samples / sec: 989.89
Iteration:   3760, Loss function: 5.076, Average Loss: 5.268, avg. samples / sec: 986.07
Iteration:   3780, Loss function: 4.937, Average Loss: 5.263, avg. samples / sec: 972.40
Iteration:   3800, Loss function: 5.144, Average Loss: 5.260, avg. samples / sec: 975.86
Iteration:   3820, Loss function: 5.112, Average Loss: 5.255, avg. samples / sec: 927.72
Iteration:   3840, Loss function: 4.713, Average Loss: 5.251, avg. samples / sec: 922.54
Iteration:   3860, Loss function: 5.075, Average Loss: 5.246, avg. samples / sec: 969.53
Iteration:   3880, Loss function: 5.030, Average Loss: 5.240, avg. samples / sec: 926.03
Iteration:   3900, Loss function: 5.128, Average Loss: 5.236, avg. samples / sec: 959.80
Iteration:   3920, Loss function: 4.923, Average Loss: 5.229, avg. samples / sec: 977.32
Iteration:   3940, Loss function: 4.885, Average Loss: 5.224, avg. samples / sec: 984.09
Iteration:   3960, Loss function: 4.813, Average Loss: 5.220, avg. samples / sec: 979.84
Iteration:   3980, Loss function: 4.841, Average Loss: 5.215, avg. samples / sec: 974.90
Iteration:   4000, Loss function: 5.205, Average Loss: 5.211, avg. samples / sec: 983.36
Iteration:   4020, Loss function: 5.091, Average Loss: 5.207, avg. samples / sec: 932.86
Iteration:   4040, Loss function: 5.013, Average Loss: 5.203, avg. samples / sec: 941.86
Iteration:   4060, Loss function: 5.207, Average Loss: 5.200, avg. samples / sec: 959.16
Iteration:   4080, Loss function: 5.182, Average Loss: 5.195, avg. samples / sec: 937.38
Iteration:   4100, Loss function: 5.146, Average Loss: 5.193, avg. samples / sec: 931.09
:::MLLOG {"namespace": "", "time_ms": 1639762040188, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762040190, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.183, Average Loss: 5.190, avg. samples / sec: 966.84
Iteration:   4140, Loss function: 5.035, Average Loss: 5.185, avg. samples / sec: 971.11
Iteration:   4160, Loss function: 4.790, Average Loss: 5.178, avg. samples / sec: 929.56
Iteration:   4180, Loss function: 5.015, Average Loss: 5.172, avg. samples / sec: 981.93
Iteration:   4200, Loss function: 4.889, Average Loss: 5.167, avg. samples / sec: 963.03
Iteration:   4220, Loss function: 4.656, Average Loss: 5.162, avg. samples / sec: 950.62
Iteration:   4240, Loss function: 4.976, Average Loss: 5.157, avg. samples / sec: 882.13
Iteration:   4260, Loss function: 5.163, Average Loss: 5.153, avg. samples / sec: 975.11
Iteration:   4280, Loss function: 5.149, Average Loss: 5.148, avg. samples / sec: 990.97
Iteration:   4300, Loss function: 4.670, Average Loss: 5.141, avg. samples / sec: 965.24
Iteration:   4320, Loss function: 4.950, Average Loss: 5.137, avg. samples / sec: 976.77
Iteration:   4340, Loss function: 4.750, Average Loss: 5.131, avg. samples / sec: 964.04
Iteration:   4360, Loss function: 4.992, Average Loss: 5.127, avg. samples / sec: 957.03
Iteration:   4380, Loss function: 5.096, Average Loss: 5.122, avg. samples / sec: 910.75
Iteration:   4400, Loss function: 5.004, Average Loss: 5.118, avg. samples / sec: 891.26
Iteration:   4420, Loss function: 4.910, Average Loss: 5.113, avg. samples / sec: 980.25
Iteration:   4440, Loss function: 4.971, Average Loss: 5.109, avg. samples / sec: 976.91
Iteration:   4460, Loss function: 5.091, Average Loss: 5.105, avg. samples / sec: 986.06
Iteration:   4480, Loss function: 5.076, Average Loss: 5.103, avg. samples / sec: 938.66
Iteration:   4500, Loss function: 4.815, Average Loss: 5.100, avg. samples / sec: 916.01
Iteration:   4520, Loss function: 4.690, Average Loss: 5.095, avg. samples / sec: 988.40
Iteration:   4540, Loss function: 5.053, Average Loss: 5.091, avg. samples / sec: 964.37
Iteration:   4560, Loss function: 4.792, Average Loss: 5.087, avg. samples / sec: 990.91
Iteration:   4580, Loss function: 4.847, Average Loss: 5.085, avg. samples / sec: 937.11
Iteration:   4600, Loss function: 4.829, Average Loss: 5.081, avg. samples / sec: 954.55
Iteration:   4620, Loss function: 4.638, Average Loss: 5.076, avg. samples / sec: 969.52
Iteration:   4640, Loss function: 4.697, Average Loss: 5.071, avg. samples / sec: 942.81
Iteration:   4660, Loss function: 4.731, Average Loss: 5.068, avg. samples / sec: 984.16
Iteration:   4680, Loss function: 5.220, Average Loss: 5.063, avg. samples / sec: 981.80
Iteration:   4700, Loss function: 4.707, Average Loss: 5.058, avg. samples / sec: 954.87
Iteration:   4720, Loss function: 4.777, Average Loss: 5.053, avg. samples / sec: 989.20
Iteration:   4740, Loss function: 4.821, Average Loss: 5.050, avg. samples / sec: 978.23
Iteration:   4760, Loss function: 4.599, Average Loss: 5.047, avg. samples / sec: 938.09
Iteration:   4780, Loss function: 5.035, Average Loss: 5.043, avg. samples / sec: 946.32
Iteration:   4800, Loss function: 5.053, Average Loss: 5.041, avg. samples / sec: 991.31
Iteration:   4820, Loss function: 4.859, Average Loss: 5.037, avg. samples / sec: 920.55
Iteration:   4840, Loss function: 5.103, Average Loss: 5.034, avg. samples / sec: 976.29
Iteration:   4860, Loss function: 4.664, Average Loss: 5.030, avg. samples / sec: 977.33
Iteration:   4880, Loss function: 5.116, Average Loss: 5.026, avg. samples / sec: 947.56
Iteration:   4900, Loss function: 4.613, Average Loss: 5.021, avg. samples / sec: 974.79
Iteration:   4920, Loss function: 4.824, Average Loss: 5.018, avg. samples / sec: 946.10
Iteration:   4940, Loss function: 4.662, Average Loss: 5.014, avg. samples / sec: 928.12
Iteration:   4960, Loss function: 4.680, Average Loss: 5.010, avg. samples / sec: 898.33
Iteration:   4980, Loss function: 4.602, Average Loss: 5.006, avg. samples / sec: 928.33
Iteration:   5000, Loss function: 4.958, Average Loss: 5.002, avg. samples / sec: 970.87
Iteration:   5020, Loss function: 5.215, Average Loss: 4.998, avg. samples / sec: 992.95
Iteration:   5040, Loss function: 4.828, Average Loss: 4.995, avg. samples / sec: 840.26
Iteration:   5060, Loss function: 4.670, Average Loss: 4.991, avg. samples / sec: 946.53
Iteration:   5080, Loss function: 4.545, Average Loss: 4.987, avg. samples / sec: 928.71
Iteration:   5100, Loss function: 4.872, Average Loss: 4.985, avg. samples / sec: 940.58
Iteration:   5120, Loss function: 4.701, Average Loss: 4.982, avg. samples / sec: 995.06
Iteration:   5140, Loss function: 4.882, Average Loss: 4.978, avg. samples / sec: 998.56
:::MLLOG {"namespace": "", "time_ms": 1639762163120, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.54 s
:::MLLOG {"namespace": "", "time_ms": 1639762193717, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762193766, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762193766, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.825, Average Loss: 4.973, avg. samples / sec: 69.23
Iteration:   5180, Loss function: 4.945, Average Loss: 4.968, avg. samples / sec: 992.67
DONE (t=3.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10326
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21179
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.08956
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18796
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20894
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20894
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10326 AP goal: 0.10000
Iteration:   5200, Loss function: 4.589, Average Loss: 4.964, avg. samples / sec: 951.89
:::MLLOG {"namespace": "", "time_ms": 1639762200424, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200425, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10325847697924241, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200425, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200641, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762202
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:30:02 PM'
START TIMING RUN WAS 2021-12-17 05:18:26 PM
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:26 PM'
ENDING TIMING RUN AT 2021-12-17 05:30:02 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:30:02 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ result=696
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-17 05:18:26 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-17 05:18:26 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
