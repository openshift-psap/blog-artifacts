8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e'
Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761507
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:27 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-18-09 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ set +x
Fri Dec 17 17:18:27 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-2997d to the sync file ...
run-mlperf--1-2997d Found 5 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
     2	run-mlperf--1-zcmvv
     3	run-mlperf--1-kcdh9
     4	run-mlperf--1-5dr8m
     5	run-mlperf--1-2997d
Fri Dec 17 17:18:32 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514039, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3929475380, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3929475380
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761516716, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516716, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516721, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540975, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540975, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761543351, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543352, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543687, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543688, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543689, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.787, Average Loss: 0.023, avg. samples / sec: 4.28
Iteration:     20, Loss function: 21.047, Average Loss: 0.458, avg. samples / sec: 765.16
Iteration:     40, Loss function: 20.954, Average Loss: 0.861, avg. samples / sec: 864.85
Iteration:     60, Loss function: 20.429, Average Loss: 1.251, avg. samples / sec: 878.71
Iteration:     80, Loss function: 20.324, Average Loss: 1.628, avg. samples / sec: 884.29
Iteration:    100, Loss function: 17.812, Average Loss: 1.978, avg. samples / sec: 867.74
Iteration:    120, Loss function: 12.964, Average Loss: 2.224, avg. samples / sec: 693.57
Iteration:    140, Loss function: 9.986, Average Loss: 2.405, avg. samples / sec: 941.38
Iteration:    160, Loss function: 9.517, Average Loss: 2.550, avg. samples / sec: 941.68
Iteration:    180, Loss function: 9.202, Average Loss: 2.683, avg. samples / sec: 870.49
Iteration:    200, Loss function: 8.684, Average Loss: 2.809, avg. samples / sec: 951.78
Iteration:    220, Loss function: 8.521, Average Loss: 2.930, avg. samples / sec: 884.83
Iteration:    240, Loss function: 8.765, Average Loss: 3.047, avg. samples / sec: 944.06
Iteration:    260, Loss function: 8.790, Average Loss: 3.159, avg. samples / sec: 948.77
Iteration:    280, Loss function: 8.522, Average Loss: 3.268, avg. samples / sec: 944.16
Iteration:    300, Loss function: 8.489, Average Loss: 3.374, avg. samples / sec: 931.94
Iteration:    320, Loss function: 8.429, Average Loss: 3.475, avg. samples / sec: 967.19
Iteration:    340, Loss function: 8.417, Average Loss: 3.571, avg. samples / sec: 988.11
Iteration:    360, Loss function: 8.070, Average Loss: 3.663, avg. samples / sec: 964.31
Iteration:    380, Loss function: 7.930, Average Loss: 3.751, avg. samples / sec: 940.24
Iteration:    400, Loss function: 8.143, Average Loss: 3.836, avg. samples / sec: 964.72
Iteration:    420, Loss function: 7.610, Average Loss: 3.917, avg. samples / sec: 908.48
Iteration:    440, Loss function: 7.823, Average Loss: 3.993, avg. samples / sec: 935.74
Iteration:    460, Loss function: 7.778, Average Loss: 4.068, avg. samples / sec: 916.05
Iteration:    480, Loss function: 7.567, Average Loss: 4.140, avg. samples / sec: 929.74
Iteration:    500, Loss function: 7.679, Average Loss: 4.211, avg. samples / sec: 977.77
Iteration:    520, Loss function: 7.474, Average Loss: 4.279, avg. samples / sec: 926.11
Iteration:    540, Loss function: 7.570, Average Loss: 4.344, avg. samples / sec: 982.20
Iteration:    560, Loss function: 7.230, Average Loss: 4.404, avg. samples / sec: 917.76
Iteration:    580, Loss function: 7.207, Average Loss: 4.463, avg. samples / sec: 949.96
Iteration:    600, Loss function: 7.255, Average Loss: 4.521, avg. samples / sec: 972.90
Iteration:    620, Loss function: 7.017, Average Loss: 4.575, avg. samples / sec: 781.80
Iteration:    640, Loss function: 6.917, Average Loss: 4.629, avg. samples / sec: 975.59
Iteration:    660, Loss function: 7.200, Average Loss: 4.679, avg. samples / sec: 965.48
Iteration:    680, Loss function: 7.204, Average Loss: 4.728, avg. samples / sec: 932.85
Iteration:    700, Loss function: 6.650, Average Loss: 4.773, avg. samples / sec: 947.63
Iteration:    720, Loss function: 6.998, Average Loss: 4.820, avg. samples / sec: 971.17
Iteration:    740, Loss function: 7.017, Average Loss: 4.864, avg. samples / sec: 952.18
Iteration:    760, Loss function: 7.202, Average Loss: 4.906, avg. samples / sec: 908.76
Iteration:    780, Loss function: 7.026, Average Loss: 4.947, avg. samples / sec: 945.46
Iteration:    800, Loss function: 7.001, Average Loss: 4.985, avg. samples / sec: 974.38
Iteration:    820, Loss function: 6.929, Average Loss: 5.023, avg. samples / sec: 941.70
Iteration:    840, Loss function: 6.822, Average Loss: 5.059, avg. samples / sec: 985.71
Iteration:    860, Loss function: 6.799, Average Loss: 5.092, avg. samples / sec: 967.77
Iteration:    880, Loss function: 6.860, Average Loss: 5.123, avg. samples / sec: 983.06
Iteration:    900, Loss function: 6.739, Average Loss: 5.152, avg. samples / sec: 950.85
Iteration:    920, Loss function: 6.612, Average Loss: 5.180, avg. samples / sec: 882.18
Iteration:    940, Loss function: 6.754, Average Loss: 5.209, avg. samples / sec: 908.85
Iteration:    960, Loss function: 6.304, Average Loss: 5.236, avg. samples / sec: 977.11
Iteration:    980, Loss function: 6.719, Average Loss: 5.263, avg. samples / sec: 986.23
Iteration:   1000, Loss function: 6.500, Average Loss: 5.287, avg. samples / sec: 938.35
Iteration:   1020, Loss function: 6.451, Average Loss: 5.310, avg. samples / sec: 984.72
:::MLLOG {"namespace": "", "time_ms": 1639761670477, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761670479, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.700, Average Loss: 5.334, avg. samples / sec: 910.25
Iteration:   1060, Loss function: 6.328, Average Loss: 5.356, avg. samples / sec: 972.65
Iteration:   1080, Loss function: 6.376, Average Loss: 5.376, avg. samples / sec: 940.21
Iteration:   1100, Loss function: 6.131, Average Loss: 5.396, avg. samples / sec: 923.52
Iteration:   1120, Loss function: 6.365, Average Loss: 5.415, avg. samples / sec: 986.44
Iteration:   1140, Loss function: 6.519, Average Loss: 5.433, avg. samples / sec: 932.45
Iteration:   1160, Loss function: 6.245, Average Loss: 5.450, avg. samples / sec: 943.38
Iteration:   1180, Loss function: 6.311, Average Loss: 5.467, avg. samples / sec: 956.31
Iteration:   1200, Loss function: 6.274, Average Loss: 5.482, avg. samples / sec: 892.77
Iteration:   1220, Loss function: 6.195, Average Loss: 5.496, avg. samples / sec: 995.25
Iteration:   1240, Loss function: 6.110, Average Loss: 5.507, avg. samples / sec: 968.06
Iteration:   1260, Loss function: 5.800, Average Loss: 5.519, avg. samples / sec: 906.95
Iteration:   1280, Loss function: 5.933, Average Loss: 5.531, avg. samples / sec: 827.11
Iteration:   1300, Loss function: 5.871, Average Loss: 5.542, avg. samples / sec: 940.47
Iteration:   1320, Loss function: 6.028, Average Loss: 5.554, avg. samples / sec: 921.75
Iteration:   1340, Loss function: 5.848, Average Loss: 5.563, avg. samples / sec: 964.02
Iteration:   1360, Loss function: 6.027, Average Loss: 5.573, avg. samples / sec: 972.11
Iteration:   1380, Loss function: 6.154, Average Loss: 5.582, avg. samples / sec: 970.90
Iteration:   1400, Loss function: 6.031, Average Loss: 5.589, avg. samples / sec: 956.24
Iteration:   1420, Loss function: 5.946, Average Loss: 5.596, avg. samples / sec: 966.63
Iteration:   1440, Loss function: 6.328, Average Loss: 5.603, avg. samples / sec: 899.84
Iteration:   1460, Loss function: 6.251, Average Loss: 5.609, avg. samples / sec: 991.62
Iteration:   1480, Loss function: 5.987, Average Loss: 5.616, avg. samples / sec: 949.08
Iteration:   1500, Loss function: 5.992, Average Loss: 5.623, avg. samples / sec: 951.36
Iteration:   1520, Loss function: 6.103, Average Loss: 5.629, avg. samples / sec: 942.22
Iteration:   1540, Loss function: 5.979, Average Loss: 5.632, avg. samples / sec: 889.48
Iteration:   1560, Loss function: 5.805, Average Loss: 5.636, avg. samples / sec: 922.21
Iteration:   1580, Loss function: 5.492, Average Loss: 5.641, avg. samples / sec: 946.29
Iteration:   1600, Loss function: 6.236, Average Loss: 5.647, avg. samples / sec: 900.30
Iteration:   1620, Loss function: 5.943, Average Loss: 5.651, avg. samples / sec: 972.43
Iteration:   1640, Loss function: 6.030, Average Loss: 5.655, avg. samples / sec: 978.10
Iteration:   1660, Loss function: 5.869, Average Loss: 5.659, avg. samples / sec: 975.27
Iteration:   1680, Loss function: 5.774, Average Loss: 5.661, avg. samples / sec: 991.45
Iteration:   1700, Loss function: 5.302, Average Loss: 5.664, avg. samples / sec: 965.04
Iteration:   1720, Loss function: 5.568, Average Loss: 5.665, avg. samples / sec: 949.22
Iteration:   1740, Loss function: 5.808, Average Loss: 5.668, avg. samples / sec: 930.99
Iteration:   1760, Loss function: 5.623, Average Loss: 5.670, avg. samples / sec: 943.55
Iteration:   1780, Loss function: 5.909, Average Loss: 5.670, avg. samples / sec: 979.89
Iteration:   1800, Loss function: 5.559, Average Loss: 5.671, avg. samples / sec: 985.79
Iteration:   1820, Loss function: 5.997, Average Loss: 5.673, avg. samples / sec: 972.93
Iteration:   1840, Loss function: 6.042, Average Loss: 5.673, avg. samples / sec: 969.05
Iteration:   1860, Loss function: 5.618, Average Loss: 5.672, avg. samples / sec: 928.35
Iteration:   1880, Loss function: 5.815, Average Loss: 5.673, avg. samples / sec: 981.36
Iteration:   1900, Loss function: 5.780, Average Loss: 5.673, avg. samples / sec: 940.03
Iteration:   1920, Loss function: 5.594, Average Loss: 5.673, avg. samples / sec: 825.96
Iteration:   1940, Loss function: 5.947, Average Loss: 5.672, avg. samples / sec: 932.26
Iteration:   1960, Loss function: 5.571, Average Loss: 5.670, avg. samples / sec: 884.22
Iteration:   1980, Loss function: 5.836, Average Loss: 5.669, avg. samples / sec: 987.04
Iteration:   2000, Loss function: 5.618, Average Loss: 5.668, avg. samples / sec: 955.00
Iteration:   2020, Loss function: 5.668, Average Loss: 5.666, avg. samples / sec: 987.84
Iteration:   2040, Loss function: 5.571, Average Loss: 5.665, avg. samples / sec: 948.99
:::MLLOG {"namespace": "", "time_ms": 1639761794661, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794663, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.750, Average Loss: 5.663, avg. samples / sec: 957.77
Iteration:   2080, Loss function: 5.010, Average Loss: 5.660, avg. samples / sec: 979.26
Iteration:   2100, Loss function: 5.651, Average Loss: 5.658, avg. samples / sec: 967.66
Iteration:   2120, Loss function: 5.355, Average Loss: 5.655, avg. samples / sec: 908.59
Iteration:   2140, Loss function: 5.392, Average Loss: 5.651, avg. samples / sec: 987.49
Iteration:   2160, Loss function: 5.530, Average Loss: 5.650, avg. samples / sec: 973.52
Iteration:   2180, Loss function: 5.390, Average Loss: 5.647, avg. samples / sec: 982.11
Iteration:   2200, Loss function: 5.401, Average Loss: 5.643, avg. samples / sec: 980.55
Iteration:   2220, Loss function: 5.618, Average Loss: 5.641, avg. samples / sec: 963.71
Iteration:   2240, Loss function: 5.330, Average Loss: 5.638, avg. samples / sec: 963.72
Iteration:   2260, Loss function: 5.445, Average Loss: 5.633, avg. samples / sec: 991.01
Iteration:   2280, Loss function: 5.121, Average Loss: 5.630, avg. samples / sec: 956.57
Iteration:   2300, Loss function: 5.177, Average Loss: 5.627, avg. samples / sec: 952.05
Iteration:   2320, Loss function: 5.362, Average Loss: 5.624, avg. samples / sec: 994.16
Iteration:   2340, Loss function: 5.493, Average Loss: 5.620, avg. samples / sec: 968.40
Iteration:   2360, Loss function: 5.365, Average Loss: 5.615, avg. samples / sec: 974.60
Iteration:   2380, Loss function: 5.362, Average Loss: 5.612, avg. samples / sec: 929.26
Iteration:   2400, Loss function: 5.561, Average Loss: 5.608, avg. samples / sec: 946.02
Iteration:   2420, Loss function: 5.475, Average Loss: 5.604, avg. samples / sec: 942.61
Iteration:   2440, Loss function: 5.558, Average Loss: 5.600, avg. samples / sec: 943.75
Iteration:   2460, Loss function: 5.210, Average Loss: 5.596, avg. samples / sec: 976.19
Iteration:   2480, Loss function: 5.357, Average Loss: 5.592, avg. samples / sec: 979.54
Iteration:   2500, Loss function: 5.496, Average Loss: 5.588, avg. samples / sec: 958.21
Iteration:   2520, Loss function: 5.211, Average Loss: 5.584, avg. samples / sec: 981.32
Iteration:   2540, Loss function: 5.400, Average Loss: 5.580, avg. samples / sec: 985.73
Iteration:   2560, Loss function: 5.374, Average Loss: 5.576, avg. samples / sec: 851.01
Iteration:   2580, Loss function: 5.396, Average Loss: 5.573, avg. samples / sec: 912.12
Iteration:   2600, Loss function: 5.377, Average Loss: 5.570, avg. samples / sec: 964.65
Iteration:   2620, Loss function: 5.609, Average Loss: 5.565, avg. samples / sec: 974.50
Iteration:   2640, Loss function: 5.310, Average Loss: 5.563, avg. samples / sec: 876.16
Iteration:   2660, Loss function: 5.172, Average Loss: 5.559, avg. samples / sec: 975.10
Iteration:   2680, Loss function: 5.135, Average Loss: 5.555, avg. samples / sec: 987.61
Iteration:   2700, Loss function: 5.002, Average Loss: 5.550, avg. samples / sec: 930.73
Iteration:   2720, Loss function: 5.227, Average Loss: 5.546, avg. samples / sec: 973.86
Iteration:   2740, Loss function: 5.125, Average Loss: 5.541, avg. samples / sec: 982.10
Iteration:   2760, Loss function: 5.070, Average Loss: 5.536, avg. samples / sec: 950.47
Iteration:   2780, Loss function: 5.331, Average Loss: 5.532, avg. samples / sec: 956.67
Iteration:   2800, Loss function: 5.297, Average Loss: 5.527, avg. samples / sec: 880.17
Iteration:   2820, Loss function: 5.267, Average Loss: 5.522, avg. samples / sec: 933.20
Iteration:   2840, Loss function: 5.136, Average Loss: 5.517, avg. samples / sec: 941.89
Iteration:   2860, Loss function: 5.073, Average Loss: 5.511, avg. samples / sec: 928.27
Iteration:   2880, Loss function: 5.273, Average Loss: 5.507, avg. samples / sec: 956.72
Iteration:   2900, Loss function: 5.224, Average Loss: 5.502, avg. samples / sec: 975.18
Iteration:   2920, Loss function: 5.169, Average Loss: 5.497, avg. samples / sec: 945.51
Iteration:   2940, Loss function: 4.940, Average Loss: 5.492, avg. samples / sec: 950.84
Iteration:   2960, Loss function: 5.426, Average Loss: 5.488, avg. samples / sec: 945.04
Iteration:   2980, Loss function: 5.237, Average Loss: 5.484, avg. samples / sec: 950.53
Iteration:   3000, Loss function: 5.276, Average Loss: 5.478, avg. samples / sec: 851.09
Iteration:   3020, Loss function: 5.391, Average Loss: 5.472, avg. samples / sec: 946.51
Iteration:   3040, Loss function: 5.291, Average Loss: 5.467, avg. samples / sec: 973.60
Iteration:   3060, Loss function: 5.119, Average Loss: 5.461, avg. samples / sec: 957.03
Iteration:   3080, Loss function: 4.981, Average Loss: 5.455, avg. samples / sec: 918.10
:::MLLOG {"namespace": "", "time_ms": 1639761917899, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917901, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.165, Average Loss: 5.449, avg. samples / sec: 891.77
Iteration:   3120, Loss function: 5.087, Average Loss: 5.442, avg. samples / sec: 914.15
Iteration:   3140, Loss function: 5.097, Average Loss: 5.437, avg. samples / sec: 941.46
Iteration:   3160, Loss function: 5.488, Average Loss: 5.432, avg. samples / sec: 973.20
Iteration:   3180, Loss function: 4.999, Average Loss: 5.427, avg. samples / sec: 952.09
Iteration:   3200, Loss function: 5.487, Average Loss: 5.422, avg. samples / sec: 890.97
Iteration:   3220, Loss function: 5.178, Average Loss: 5.417, avg. samples / sec: 938.09
Iteration:   3240, Loss function: 5.164, Average Loss: 5.412, avg. samples / sec: 938.86
Iteration:   3260, Loss function: 4.996, Average Loss: 5.406, avg. samples / sec: 908.20
Iteration:   3280, Loss function: 4.969, Average Loss: 5.400, avg. samples / sec: 934.40
Iteration:   3300, Loss function: 4.729, Average Loss: 5.394, avg. samples / sec: 967.98
Iteration:   3320, Loss function: 5.017, Average Loss: 5.389, avg. samples / sec: 971.10
Iteration:   3340, Loss function: 4.928, Average Loss: 5.385, avg. samples / sec: 916.81
Iteration:   3360, Loss function: 5.256, Average Loss: 5.378, avg. samples / sec: 976.68
Iteration:   3380, Loss function: 5.029, Average Loss: 5.372, avg. samples / sec: 882.93
Iteration:   3400, Loss function: 4.796, Average Loss: 5.368, avg. samples / sec: 936.66
Iteration:   3420, Loss function: 5.131, Average Loss: 5.362, avg. samples / sec: 917.39
Iteration:   3440, Loss function: 4.850, Average Loss: 5.356, avg. samples / sec: 920.70
Iteration:   3460, Loss function: 5.346, Average Loss: 5.352, avg. samples / sec: 979.96
Iteration:   3480, Loss function: 5.440, Average Loss: 5.347, avg. samples / sec: 978.57
Iteration:   3500, Loss function: 5.306, Average Loss: 5.344, avg. samples / sec: 926.16
Iteration:   3520, Loss function: 5.025, Average Loss: 5.340, avg. samples / sec: 988.24
Iteration:   3540, Loss function: 5.075, Average Loss: 5.335, avg. samples / sec: 918.81
Iteration:   3560, Loss function: 4.956, Average Loss: 5.331, avg. samples / sec: 984.95
Iteration:   3580, Loss function: 5.128, Average Loss: 5.326, avg. samples / sec: 939.06
Iteration:   3600, Loss function: 5.405, Average Loss: 5.321, avg. samples / sec: 978.86
Iteration:   3620, Loss function: 4.900, Average Loss: 5.316, avg. samples / sec: 961.33
Iteration:   3640, Loss function: 4.862, Average Loss: 5.309, avg. samples / sec: 988.98
Iteration:   3660, Loss function: 5.010, Average Loss: 5.304, avg. samples / sec: 973.72
Iteration:   3680, Loss function: 5.231, Average Loss: 5.298, avg. samples / sec: 963.25
Iteration:   3700, Loss function: 5.030, Average Loss: 5.294, avg. samples / sec: 985.91
Iteration:   3720, Loss function: 4.909, Average Loss: 5.289, avg. samples / sec: 979.70
Iteration:   3740, Loss function: 5.044, Average Loss: 5.284, avg. samples / sec: 949.52
Iteration:   3760, Loss function: 5.119, Average Loss: 5.280, avg. samples / sec: 990.73
Iteration:   3780, Loss function: 4.908, Average Loss: 5.275, avg. samples / sec: 932.76
Iteration:   3800, Loss function: 4.996, Average Loss: 5.271, avg. samples / sec: 931.54
Iteration:   3820, Loss function: 5.325, Average Loss: 5.266, avg. samples / sec: 931.68
Iteration:   3840, Loss function: 4.997, Average Loss: 5.262, avg. samples / sec: 937.47
Iteration:   3860, Loss function: 5.098, Average Loss: 5.257, avg. samples / sec: 872.93
Iteration:   3880, Loss function: 4.953, Average Loss: 5.252, avg. samples / sec: 965.05
Iteration:   3900, Loss function: 4.996, Average Loss: 5.247, avg. samples / sec: 938.67
Iteration:   3920, Loss function: 4.918, Average Loss: 5.241, avg. samples / sec: 881.33
Iteration:   3940, Loss function: 5.000, Average Loss: 5.236, avg. samples / sec: 989.41
Iteration:   3960, Loss function: 5.105, Average Loss: 5.232, avg. samples / sec: 941.97
Iteration:   3980, Loss function: 4.827, Average Loss: 5.226, avg. samples / sec: 899.18
Iteration:   4000, Loss function: 5.026, Average Loss: 5.223, avg. samples / sec: 971.01
Iteration:   4020, Loss function: 4.883, Average Loss: 5.218, avg. samples / sec: 898.85
Iteration:   4040, Loss function: 5.024, Average Loss: 5.214, avg. samples / sec: 931.54
Iteration:   4060, Loss function: 5.173, Average Loss: 5.211, avg. samples / sec: 937.59
Iteration:   4080, Loss function: 4.983, Average Loss: 5.206, avg. samples / sec: 921.26
Iteration:   4100, Loss function: 4.986, Average Loss: 5.202, avg. samples / sec: 893.07
:::MLLOG {"namespace": "", "time_ms": 1639762042593, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762042596, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.163, Average Loss: 5.198, avg. samples / sec: 922.72
Iteration:   4140, Loss function: 5.077, Average Loss: 5.194, avg. samples / sec: 943.11
Iteration:   4160, Loss function: 5.174, Average Loss: 5.187, avg. samples / sec: 931.67
Iteration:   4180, Loss function: 5.053, Average Loss: 5.181, avg. samples / sec: 981.72
Iteration:   4200, Loss function: 4.818, Average Loss: 5.176, avg. samples / sec: 958.64
Iteration:   4220, Loss function: 4.839, Average Loss: 5.170, avg. samples / sec: 901.36
Iteration:   4240, Loss function: 4.872, Average Loss: 5.165, avg. samples / sec: 908.20
Iteration:   4260, Loss function: 5.189, Average Loss: 5.160, avg. samples / sec: 844.66
Iteration:   4280, Loss function: 4.814, Average Loss: 5.154, avg. samples / sec: 943.24
Iteration:   4300, Loss function: 4.968, Average Loss: 5.147, avg. samples / sec: 967.11
Iteration:   4320, Loss function: 4.678, Average Loss: 5.143, avg. samples / sec: 943.80
Iteration:   4340, Loss function: 4.751, Average Loss: 5.138, avg. samples / sec: 971.03
Iteration:   4360, Loss function: 4.983, Average Loss: 5.135, avg. samples / sec: 986.55
Iteration:   4380, Loss function: 5.022, Average Loss: 5.131, avg. samples / sec: 986.79
Iteration:   4400, Loss function: 5.047, Average Loss: 5.126, avg. samples / sec: 986.09
Iteration:   4420, Loss function: 5.079, Average Loss: 5.120, avg. samples / sec: 988.60
Iteration:   4440, Loss function: 4.823, Average Loss: 5.115, avg. samples / sec: 959.46
Iteration:   4460, Loss function: 5.093, Average Loss: 5.111, avg. samples / sec: 977.28
Iteration:   4480, Loss function: 4.788, Average Loss: 5.107, avg. samples / sec: 973.58
Iteration:   4500, Loss function: 4.991, Average Loss: 5.104, avg. samples / sec: 941.71
Iteration:   4520, Loss function: 4.666, Average Loss: 5.098, avg. samples / sec: 973.37
Iteration:   4540, Loss function: 5.172, Average Loss: 5.094, avg. samples / sec: 948.51
Iteration:   4560, Loss function: 4.810, Average Loss: 5.091, avg. samples / sec: 929.65
Iteration:   4580, Loss function: 4.742, Average Loss: 5.088, avg. samples / sec: 992.47
Iteration:   4600, Loss function: 4.952, Average Loss: 5.084, avg. samples / sec: 903.72
Iteration:   4620, Loss function: 4.815, Average Loss: 5.080, avg. samples / sec: 904.99
Iteration:   4640, Loss function: 4.604, Average Loss: 5.074, avg. samples / sec: 992.31
Iteration:   4660, Loss function: 4.660, Average Loss: 5.070, avg. samples / sec: 982.70
Iteration:   4680, Loss function: 5.574, Average Loss: 5.066, avg. samples / sec: 965.44
Iteration:   4700, Loss function: 4.667, Average Loss: 5.062, avg. samples / sec: 884.67
Iteration:   4720, Loss function: 4.702, Average Loss: 5.057, avg. samples / sec: 972.53
Iteration:   4740, Loss function: 4.809, Average Loss: 5.053, avg. samples / sec: 947.52
Iteration:   4760, Loss function: 4.653, Average Loss: 5.050, avg. samples / sec: 952.22
Iteration:   4780, Loss function: 5.190, Average Loss: 5.046, avg. samples / sec: 943.09
Iteration:   4800, Loss function: 4.936, Average Loss: 5.044, avg. samples / sec: 952.00
Iteration:   4820, Loss function: 4.878, Average Loss: 5.041, avg. samples / sec: 921.22
Iteration:   4840, Loss function: 5.037, Average Loss: 5.037, avg. samples / sec: 915.67
Iteration:   4860, Loss function: 4.681, Average Loss: 5.033, avg. samples / sec: 953.56
Iteration:   4880, Loss function: 5.037, Average Loss: 5.030, avg. samples / sec: 988.62
Iteration:   4900, Loss function: 4.543, Average Loss: 5.026, avg. samples / sec: 984.04
Iteration:   4920, Loss function: 4.880, Average Loss: 5.023, avg. samples / sec: 952.31
Iteration:   4940, Loss function: 4.682, Average Loss: 5.019, avg. samples / sec: 947.38
Iteration:   4960, Loss function: 4.725, Average Loss: 5.015, avg. samples / sec: 971.53
Iteration:   4980, Loss function: 4.626, Average Loss: 5.011, avg. samples / sec: 931.26
Iteration:   5000, Loss function: 4.992, Average Loss: 5.008, avg. samples / sec: 956.61
Iteration:   5020, Loss function: 5.136, Average Loss: 5.005, avg. samples / sec: 943.80
Iteration:   5040, Loss function: 4.998, Average Loss: 5.003, avg. samples / sec: 987.70
Iteration:   5060, Loss function: 4.550, Average Loss: 5.000, avg. samples / sec: 937.90
Iteration:   5080, Loss function: 4.785, Average Loss: 4.996, avg. samples / sec: 974.05
Iteration:   5100, Loss function: 4.813, Average Loss: 4.994, avg. samples / sec: 990.52
Iteration:   5120, Loss function: 4.559, Average Loss: 4.990, avg. samples / sec: 997.21
Iteration:   5140, Loss function: 4.928, Average Loss: 4.986, avg. samples / sec: 990.10
:::MLLOG {"namespace": "", "time_ms": 1639762165685, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.81 s
:::MLLOG {"namespace": "", "time_ms": 1639762198591, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762198608, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762198609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.13s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.830, Average Loss: 4.980, avg. samples / sec: 64.05
Iteration:   5180, Loss function: 4.678, Average Loss: 4.975, avg. samples / sec: 1004.40
DONE (t=3.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10903
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21987
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10089
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13888
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21822
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21822
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10903 AP goal: 0.10000
Iteration:   5200, Loss function: 4.589, Average Loss: 4.970, avg. samples / sec: 1023.03
:::MLLOG {"namespace": "", "time_ms": 1639762205425, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205426, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10902957414029175, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205426, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205565, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:30:06 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:30:06 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514039, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3929475380, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3929475380
:::MLLOG {"namespace": "", "time_ms": 1639761516716, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516716, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516721, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516722, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540975, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540975, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761543351, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543352, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543687, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543688, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543689, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.787, Average Loss: 0.023, avg. samples / sec: 4.28
Iteration:     20, Loss function: 21.047, Average Loss: 0.458, avg. samples / sec: 765.16
Iteration:     40, Loss function: 20.954, Average Loss: 0.861, avg. samples / sec: 864.85
Iteration:     60, Loss function: 20.429, Average Loss: 1.251, avg. samples / sec: 878.71
Iteration:     80, Loss function: 20.324, Average Loss: 1.628, avg. samples / sec: 884.29
Iteration:    100, Loss function: 17.812, Average Loss: 1.978, avg. samples / sec: 867.74
Iteration:    120, Loss function: 12.964, Average Loss: 2.224, avg. samples / sec: 693.57
Iteration:    140, Loss function: 9.986, Average Loss: 2.405, avg. samples / sec: 941.38
Iteration:    160, Loss function: 9.517, Average Loss: 2.550, avg. samples / sec: 941.68
Iteration:    180, Loss function: 9.202, Average Loss: 2.683, avg. samples / sec: 870.49
Iteration:    200, Loss function: 8.684, Average Loss: 2.809, avg. samples / sec: 951.78
Iteration:    220, Loss function: 8.521, Average Loss: 2.930, avg. samples / sec: 884.83
Iteration:    240, Loss function: 8.765, Average Loss: 3.047, avg. samples / sec: 944.06
Iteration:    260, Loss function: 8.790, Average Loss: 3.159, avg. samples / sec: 948.77
Iteration:    280, Loss function: 8.522, Average Loss: 3.268, avg. samples / sec: 944.16
Iteration:    300, Loss function: 8.489, Average Loss: 3.374, avg. samples / sec: 931.94
Iteration:    320, Loss function: 8.429, Average Loss: 3.475, avg. samples / sec: 967.19
Iteration:    340, Loss function: 8.417, Average Loss: 3.571, avg. samples / sec: 988.11
Iteration:    360, Loss function: 8.070, Average Loss: 3.663, avg. samples / sec: 964.31
Iteration:    380, Loss function: 7.930, Average Loss: 3.751, avg. samples / sec: 940.24
Iteration:    400, Loss function: 8.143, Average Loss: 3.836, avg. samples / sec: 964.72
Iteration:    420, Loss function: 7.610, Average Loss: 3.917, avg. samples / sec: 908.48
Iteration:    440, Loss function: 7.823, Average Loss: 3.993, avg. samples / sec: 935.74
Iteration:    460, Loss function: 7.778, Average Loss: 4.068, avg. samples / sec: 916.05
Iteration:    480, Loss function: 7.567, Average Loss: 4.140, avg. samples / sec: 929.74
Iteration:    500, Loss function: 7.679, Average Loss: 4.211, avg. samples / sec: 977.77
Iteration:    520, Loss function: 7.474, Average Loss: 4.279, avg. samples / sec: 926.11
Iteration:    540, Loss function: 7.570, Average Loss: 4.344, avg. samples / sec: 982.20
Iteration:    560, Loss function: 7.230, Average Loss: 4.404, avg. samples / sec: 917.76
Iteration:    580, Loss function: 7.207, Average Loss: 4.463, avg. samples / sec: 949.96
Iteration:    600, Loss function: 7.255, Average Loss: 4.521, avg. samples / sec: 972.90
Iteration:    620, Loss function: 7.017, Average Loss: 4.575, avg. samples / sec: 781.80
Iteration:    640, Loss function: 6.917, Average Loss: 4.629, avg. samples / sec: 975.59
Iteration:    660, Loss function: 7.200, Average Loss: 4.679, avg. samples / sec: 965.48
Iteration:    680, Loss function: 7.204, Average Loss: 4.728, avg. samples / sec: 932.85
Iteration:    700, Loss function: 6.650, Average Loss: 4.773, avg. samples / sec: 947.63
Iteration:    720, Loss function: 6.998, Average Loss: 4.820, avg. samples / sec: 971.17
Iteration:    740, Loss function: 7.017, Average Loss: 4.864, avg. samples / sec: 952.18
Iteration:    760, Loss function: 7.202, Average Loss: 4.906, avg. samples / sec: 908.76
Iteration:    780, Loss function: 7.026, Average Loss: 4.947, avg. samples / sec: 945.46
Iteration:    800, Loss function: 7.001, Average Loss: 4.985, avg. samples / sec: 974.38
Iteration:    820, Loss function: 6.929, Average Loss: 5.023, avg. samples / sec: 941.70
Iteration:    840, Loss function: 6.822, Average Loss: 5.059, avg. samples / sec: 985.71
Iteration:    860, Loss function: 6.799, Average Loss: 5.092, avg. samples / sec: 967.77
Iteration:    880, Loss function: 6.860, Average Loss: 5.123, avg. samples / sec: 983.06
Iteration:    900, Loss function: 6.739, Average Loss: 5.152, avg. samples / sec: 950.85
Iteration:    920, Loss function: 6.612, Average Loss: 5.180, avg. samples / sec: 882.18
Iteration:    940, Loss function: 6.754, Average Loss: 5.209, avg. samples / sec: 908.85
Iteration:    960, Loss function: 6.304, Average Loss: 5.236, avg. samples / sec: 977.11
Iteration:    980, Loss function: 6.719, Average Loss: 5.263, avg. samples / sec: 986.23
Iteration:   1000, Loss function: 6.500, Average Loss: 5.287, avg. samples / sec: 938.35
Iteration:   1020, Loss function: 6.451, Average Loss: 5.310, avg. samples / sec: 984.72
:::MLLOG {"namespace": "", "time_ms": 1639761670477, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761670479, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.700, Average Loss: 5.334, avg. samples / sec: 910.25
Iteration:   1060, Loss function: 6.328, Average Loss: 5.356, avg. samples / sec: 972.65
Iteration:   1080, Loss function: 6.376, Average Loss: 5.376, avg. samples / sec: 940.21
Iteration:   1100, Loss function: 6.131, Average Loss: 5.396, avg. samples / sec: 923.52
Iteration:   1120, Loss function: 6.365, Average Loss: 5.415, avg. samples / sec: 986.44
Iteration:   1140, Loss function: 6.519, Average Loss: 5.433, avg. samples / sec: 932.45
Iteration:   1160, Loss function: 6.245, Average Loss: 5.450, avg. samples / sec: 943.38
Iteration:   1180, Loss function: 6.311, Average Loss: 5.467, avg. samples / sec: 956.31
Iteration:   1200, Loss function: 6.274, Average Loss: 5.482, avg. samples / sec: 892.77
Iteration:   1220, Loss function: 6.195, Average Loss: 5.496, avg. samples / sec: 995.25
Iteration:   1240, Loss function: 6.110, Average Loss: 5.507, avg. samples / sec: 968.06
Iteration:   1260, Loss function: 5.800, Average Loss: 5.519, avg. samples / sec: 906.95
Iteration:   1280, Loss function: 5.933, Average Loss: 5.531, avg. samples / sec: 827.11
Iteration:   1300, Loss function: 5.871, Average Loss: 5.542, avg. samples / sec: 940.47
Iteration:   1320, Loss function: 6.028, Average Loss: 5.554, avg. samples / sec: 921.75
Iteration:   1340, Loss function: 5.848, Average Loss: 5.563, avg. samples / sec: 964.02
Iteration:   1360, Loss function: 6.027, Average Loss: 5.573, avg. samples / sec: 972.11
Iteration:   1380, Loss function: 6.154, Average Loss: 5.582, avg. samples / sec: 970.90
Iteration:   1400, Loss function: 6.031, Average Loss: 5.589, avg. samples / sec: 956.24
Iteration:   1420, Loss function: 5.946, Average Loss: 5.596, avg. samples / sec: 966.63
Iteration:   1440, Loss function: 6.328, Average Loss: 5.603, avg. samples / sec: 899.84
Iteration:   1460, Loss function: 6.251, Average Loss: 5.609, avg. samples / sec: 991.62
Iteration:   1480, Loss function: 5.987, Average Loss: 5.616, avg. samples / sec: 949.08
Iteration:   1500, Loss function: 5.992, Average Loss: 5.623, avg. samples / sec: 951.36
Iteration:   1520, Loss function: 6.103, Average Loss: 5.629, avg. samples / sec: 942.22
Iteration:   1540, Loss function: 5.979, Average Loss: 5.632, avg. samples / sec: 889.48
Iteration:   1560, Loss function: 5.805, Average Loss: 5.636, avg. samples / sec: 922.21
Iteration:   1580, Loss function: 5.492, Average Loss: 5.641, avg. samples / sec: 946.29
Iteration:   1600, Loss function: 6.236, Average Loss: 5.647, avg. samples / sec: 900.30
Iteration:   1620, Loss function: 5.943, Average Loss: 5.651, avg. samples / sec: 972.43
Iteration:   1640, Loss function: 6.030, Average Loss: 5.655, avg. samples / sec: 978.10
Iteration:   1660, Loss function: 5.869, Average Loss: 5.659, avg. samples / sec: 975.27
Iteration:   1680, Loss function: 5.774, Average Loss: 5.661, avg. samples / sec: 991.45
Iteration:   1700, Loss function: 5.302, Average Loss: 5.664, avg. samples / sec: 965.04
Iteration:   1720, Loss function: 5.568, Average Loss: 5.665, avg. samples / sec: 949.22
Iteration:   1740, Loss function: 5.808, Average Loss: 5.668, avg. samples / sec: 930.99
Iteration:   1760, Loss function: 5.623, Average Loss: 5.670, avg. samples / sec: 943.55
Iteration:   1780, Loss function: 5.909, Average Loss: 5.670, avg. samples / sec: 979.89
Iteration:   1800, Loss function: 5.559, Average Loss: 5.671, avg. samples / sec: 985.79
Iteration:   1820, Loss function: 5.997, Average Loss: 5.673, avg. samples / sec: 972.93
Iteration:   1840, Loss function: 6.042, Average Loss: 5.673, avg. samples / sec: 969.05
Iteration:   1860, Loss function: 5.618, Average Loss: 5.672, avg. samples / sec: 928.35
Iteration:   1880, Loss function: 5.815, Average Loss: 5.673, avg. samples / sec: 981.36
Iteration:   1900, Loss function: 5.780, Average Loss: 5.673, avg. samples / sec: 940.03
Iteration:   1920, Loss function: 5.594, Average Loss: 5.673, avg. samples / sec: 825.96
Iteration:   1940, Loss function: 5.947, Average Loss: 5.672, avg. samples / sec: 932.26
Iteration:   1960, Loss function: 5.571, Average Loss: 5.670, avg. samples / sec: 884.22
Iteration:   1980, Loss function: 5.836, Average Loss: 5.669, avg. samples / sec: 987.04
Iteration:   2000, Loss function: 5.618, Average Loss: 5.668, avg. samples / sec: 955.00
Iteration:   2020, Loss function: 5.668, Average Loss: 5.666, avg. samples / sec: 987.84
Iteration:   2040, Loss function: 5.571, Average Loss: 5.665, avg. samples / sec: 948.99
:::MLLOG {"namespace": "", "time_ms": 1639761794661, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794663, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.750, Average Loss: 5.663, avg. samples / sec: 957.77
Iteration:   2080, Loss function: 5.010, Average Loss: 5.660, avg. samples / sec: 979.26
Iteration:   2100, Loss function: 5.651, Average Loss: 5.658, avg. samples / sec: 967.66
Iteration:   2120, Loss function: 5.355, Average Loss: 5.655, avg. samples / sec: 908.59
Iteration:   2140, Loss function: 5.392, Average Loss: 5.651, avg. samples / sec: 987.49
Iteration:   2160, Loss function: 5.530, Average Loss: 5.650, avg. samples / sec: 973.52
Iteration:   2180, Loss function: 5.390, Average Loss: 5.647, avg. samples / sec: 982.11
Iteration:   2200, Loss function: 5.401, Average Loss: 5.643, avg. samples / sec: 980.55
Iteration:   2220, Loss function: 5.618, Average Loss: 5.641, avg. samples / sec: 963.71
Iteration:   2240, Loss function: 5.330, Average Loss: 5.638, avg. samples / sec: 963.72
Iteration:   2260, Loss function: 5.445, Average Loss: 5.633, avg. samples / sec: 991.01
Iteration:   2280, Loss function: 5.121, Average Loss: 5.630, avg. samples / sec: 956.57
Iteration:   2300, Loss function: 5.177, Average Loss: 5.627, avg. samples / sec: 952.05
Iteration:   2320, Loss function: 5.362, Average Loss: 5.624, avg. samples / sec: 994.16
Iteration:   2340, Loss function: 5.493, Average Loss: 5.620, avg. samples / sec: 968.40
Iteration:   2360, Loss function: 5.365, Average Loss: 5.615, avg. samples / sec: 974.60
Iteration:   2380, Loss function: 5.362, Average Loss: 5.612, avg. samples / sec: 929.26
Iteration:   2400, Loss function: 5.561, Average Loss: 5.608, avg. samples / sec: 946.02
Iteration:   2420, Loss function: 5.475, Average Loss: 5.604, avg. samples / sec: 942.61
Iteration:   2440, Loss function: 5.558, Average Loss: 5.600, avg. samples / sec: 943.75
Iteration:   2460, Loss function: 5.210, Average Loss: 5.596, avg. samples / sec: 976.19
Iteration:   2480, Loss function: 5.357, Average Loss: 5.592, avg. samples / sec: 979.54
Iteration:   2500, Loss function: 5.496, Average Loss: 5.588, avg. samples / sec: 958.21
Iteration:   2520, Loss function: 5.211, Average Loss: 5.584, avg. samples / sec: 981.32
Iteration:   2540, Loss function: 5.400, Average Loss: 5.580, avg. samples / sec: 985.73
Iteration:   2560, Loss function: 5.374, Average Loss: 5.576, avg. samples / sec: 851.01
Iteration:   2580, Loss function: 5.396, Average Loss: 5.573, avg. samples / sec: 912.12
Iteration:   2600, Loss function: 5.377, Average Loss: 5.570, avg. samples / sec: 964.65
Iteration:   2620, Loss function: 5.609, Average Loss: 5.565, avg. samples / sec: 974.50
Iteration:   2640, Loss function: 5.310, Average Loss: 5.563, avg. samples / sec: 876.16
Iteration:   2660, Loss function: 5.172, Average Loss: 5.559, avg. samples / sec: 975.10
Iteration:   2680, Loss function: 5.135, Average Loss: 5.555, avg. samples / sec: 987.61
Iteration:   2700, Loss function: 5.002, Average Loss: 5.550, avg. samples / sec: 930.73
Iteration:   2720, Loss function: 5.227, Average Loss: 5.546, avg. samples / sec: 973.86
Iteration:   2740, Loss function: 5.125, Average Loss: 5.541, avg. samples / sec: 982.10
Iteration:   2760, Loss function: 5.070, Average Loss: 5.536, avg. samples / sec: 950.47
Iteration:   2780, Loss function: 5.331, Average Loss: 5.532, avg. samples / sec: 956.67
Iteration:   2800, Loss function: 5.297, Average Loss: 5.527, avg. samples / sec: 880.17
Iteration:   2820, Loss function: 5.267, Average Loss: 5.522, avg. samples / sec: 933.20
Iteration:   2840, Loss function: 5.136, Average Loss: 5.517, avg. samples / sec: 941.89
Iteration:   2860, Loss function: 5.073, Average Loss: 5.511, avg. samples / sec: 928.27
Iteration:   2880, Loss function: 5.273, Average Loss: 5.507, avg. samples / sec: 956.72
Iteration:   2900, Loss function: 5.224, Average Loss: 5.502, avg. samples / sec: 975.18
Iteration:   2920, Loss function: 5.169, Average Loss: 5.497, avg. samples / sec: 945.51
Iteration:   2940, Loss function: 4.940, Average Loss: 5.492, avg. samples / sec: 950.84
Iteration:   2960, Loss function: 5.426, Average Loss: 5.488, avg. samples / sec: 945.04
Iteration:   2980, Loss function: 5.237, Average Loss: 5.484, avg. samples / sec: 950.53
Iteration:   3000, Loss function: 5.276, Average Loss: 5.478, avg. samples / sec: 851.09
Iteration:   3020, Loss function: 5.391, Average Loss: 5.472, avg. samples / sec: 946.51
Iteration:   3040, Loss function: 5.291, Average Loss: 5.467, avg. samples / sec: 973.60
Iteration:   3060, Loss function: 5.119, Average Loss: 5.461, avg. samples / sec: 957.03
Iteration:   3080, Loss function: 4.981, Average Loss: 5.455, avg. samples / sec: 918.10
:::MLLOG {"namespace": "", "time_ms": 1639761917899, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917901, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.165, Average Loss: 5.449, avg. samples / sec: 891.77
Iteration:   3120, Loss function: 5.087, Average Loss: 5.442, avg. samples / sec: 914.15
Iteration:   3140, Loss function: 5.097, Average Loss: 5.437, avg. samples / sec: 941.46
Iteration:   3160, Loss function: 5.488, Average Loss: 5.432, avg. samples / sec: 973.20
Iteration:   3180, Loss function: 4.999, Average Loss: 5.427, avg. samples / sec: 952.09
Iteration:   3200, Loss function: 5.487, Average Loss: 5.422, avg. samples / sec: 890.97
Iteration:   3220, Loss function: 5.178, Average Loss: 5.417, avg. samples / sec: 938.09
Iteration:   3240, Loss function: 5.164, Average Loss: 5.412, avg. samples / sec: 938.86
Iteration:   3260, Loss function: 4.996, Average Loss: 5.406, avg. samples / sec: 908.20
Iteration:   3280, Loss function: 4.969, Average Loss: 5.400, avg. samples / sec: 934.40
Iteration:   3300, Loss function: 4.729, Average Loss: 5.394, avg. samples / sec: 967.98
Iteration:   3320, Loss function: 5.017, Average Loss: 5.389, avg. samples / sec: 971.10
Iteration:   3340, Loss function: 4.928, Average Loss: 5.385, avg. samples / sec: 916.81
Iteration:   3360, Loss function: 5.256, Average Loss: 5.378, avg. samples / sec: 976.68
Iteration:   3380, Loss function: 5.029, Average Loss: 5.372, avg. samples / sec: 882.93
Iteration:   3400, Loss function: 4.796, Average Loss: 5.368, avg. samples / sec: 936.66
Iteration:   3420, Loss function: 5.131, Average Loss: 5.362, avg. samples / sec: 917.39
Iteration:   3440, Loss function: 4.850, Average Loss: 5.356, avg. samples / sec: 920.70
Iteration:   3460, Loss function: 5.346, Average Loss: 5.352, avg. samples / sec: 979.96
Iteration:   3480, Loss function: 5.440, Average Loss: 5.347, avg. samples / sec: 978.57
Iteration:   3500, Loss function: 5.306, Average Loss: 5.344, avg. samples / sec: 926.16
Iteration:   3520, Loss function: 5.025, Average Loss: 5.340, avg. samples / sec: 988.24
Iteration:   3540, Loss function: 5.075, Average Loss: 5.335, avg. samples / sec: 918.81
Iteration:   3560, Loss function: 4.956, Average Loss: 5.331, avg. samples / sec: 984.95
Iteration:   3580, Loss function: 5.128, Average Loss: 5.326, avg. samples / sec: 939.06
Iteration:   3600, Loss function: 5.405, Average Loss: 5.321, avg. samples / sec: 978.86
Iteration:   3620, Loss function: 4.900, Average Loss: 5.316, avg. samples / sec: 961.33
Iteration:   3640, Loss function: 4.862, Average Loss: 5.309, avg. samples / sec: 988.98
Iteration:   3660, Loss function: 5.010, Average Loss: 5.304, avg. samples / sec: 973.72
Iteration:   3680, Loss function: 5.231, Average Loss: 5.298, avg. samples / sec: 963.25
Iteration:   3700, Loss function: 5.030, Average Loss: 5.294, avg. samples / sec: 985.91
Iteration:   3720, Loss function: 4.909, Average Loss: 5.289, avg. samples / sec: 979.70
Iteration:   3740, Loss function: 5.044, Average Loss: 5.284, avg. samples / sec: 949.52
Iteration:   3760, Loss function: 5.119, Average Loss: 5.280, avg. samples / sec: 990.73
Iteration:   3780, Loss function: 4.908, Average Loss: 5.275, avg. samples / sec: 932.76
Iteration:   3800, Loss function: 4.996, Average Loss: 5.271, avg. samples / sec: 931.54
Iteration:   3820, Loss function: 5.325, Average Loss: 5.266, avg. samples / sec: 931.68
Iteration:   3840, Loss function: 4.997, Average Loss: 5.262, avg. samples / sec: 937.47
Iteration:   3860, Loss function: 5.098, Average Loss: 5.257, avg. samples / sec: 872.93
Iteration:   3880, Loss function: 4.953, Average Loss: 5.252, avg. samples / sec: 965.05
Iteration:   3900, Loss function: 4.996, Average Loss: 5.247, avg. samples / sec: 938.67
Iteration:   3920, Loss function: 4.918, Average Loss: 5.241, avg. samples / sec: 881.33
Iteration:   3940, Loss function: 5.000, Average Loss: 5.236, avg. samples / sec: 989.41
Iteration:   3960, Loss function: 5.105, Average Loss: 5.232, avg. samples / sec: 941.97
Iteration:   3980, Loss function: 4.827, Average Loss: 5.226, avg. samples / sec: 899.18
Iteration:   4000, Loss function: 5.026, Average Loss: 5.223, avg. samples / sec: 971.01
Iteration:   4020, Loss function: 4.883, Average Loss: 5.218, avg. samples / sec: 898.85
Iteration:   4040, Loss function: 5.024, Average Loss: 5.214, avg. samples / sec: 931.54
Iteration:   4060, Loss function: 5.173, Average Loss: 5.211, avg. samples / sec: 937.59
Iteration:   4080, Loss function: 4.983, Average Loss: 5.206, avg. samples / sec: 921.26
Iteration:   4100, Loss function: 4.986, Average Loss: 5.202, avg. samples / sec: 893.07
:::MLLOG {"namespace": "", "time_ms": 1639762042593, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762042596, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.163, Average Loss: 5.198, avg. samples / sec: 922.72
Iteration:   4140, Loss function: 5.077, Average Loss: 5.194, avg. samples / sec: 943.11
Iteration:   4160, Loss function: 5.174, Average Loss: 5.187, avg. samples / sec: 931.67
Iteration:   4180, Loss function: 5.053, Average Loss: 5.181, avg. samples / sec: 981.72
Iteration:   4200, Loss function: 4.818, Average Loss: 5.176, avg. samples / sec: 958.64
Iteration:   4220, Loss function: 4.839, Average Loss: 5.170, avg. samples / sec: 901.36
Iteration:   4240, Loss function: 4.872, Average Loss: 5.165, avg. samples / sec: 908.20
Iteration:   4260, Loss function: 5.189, Average Loss: 5.160, avg. samples / sec: 844.66
Iteration:   4280, Loss function: 4.814, Average Loss: 5.154, avg. samples / sec: 943.24
Iteration:   4300, Loss function: 4.968, Average Loss: 5.147, avg. samples / sec: 967.11
Iteration:   4320, Loss function: 4.678, Average Loss: 5.143, avg. samples / sec: 943.80
Iteration:   4340, Loss function: 4.751, Average Loss: 5.138, avg. samples / sec: 971.03
Iteration:   4360, Loss function: 4.983, Average Loss: 5.135, avg. samples / sec: 986.55
Iteration:   4380, Loss function: 5.022, Average Loss: 5.131, avg. samples / sec: 986.79
Iteration:   4400, Loss function: 5.047, Average Loss: 5.126, avg. samples / sec: 986.09
Iteration:   4420, Loss function: 5.079, Average Loss: 5.120, avg. samples / sec: 988.60
Iteration:   4440, Loss function: 4.823, Average Loss: 5.115, avg. samples / sec: 959.46
Iteration:   4460, Loss function: 5.093, Average Loss: 5.111, avg. samples / sec: 977.28
Iteration:   4480, Loss function: 4.788, Average Loss: 5.107, avg. samples / sec: 973.58
Iteration:   4500, Loss function: 4.991, Average Loss: 5.104, avg. samples / sec: 941.71
Iteration:   4520, Loss function: 4.666, Average Loss: 5.098, avg. samples / sec: 973.37
Iteration:   4540, Loss function: 5.172, Average Loss: 5.094, avg. samples / sec: 948.51
Iteration:   4560, Loss function: 4.810, Average Loss: 5.091, avg. samples / sec: 929.65
Iteration:   4580, Loss function: 4.742, Average Loss: 5.088, avg. samples / sec: 992.47
Iteration:   4600, Loss function: 4.952, Average Loss: 5.084, avg. samples / sec: 903.72
Iteration:   4620, Loss function: 4.815, Average Loss: 5.080, avg. samples / sec: 904.99
Iteration:   4640, Loss function: 4.604, Average Loss: 5.074, avg. samples / sec: 992.31
Iteration:   4660, Loss function: 4.660, Average Loss: 5.070, avg. samples / sec: 982.70
Iteration:   4680, Loss function: 5.574, Average Loss: 5.066, avg. samples / sec: 965.44
Iteration:   4700, Loss function: 4.667, Average Loss: 5.062, avg. samples / sec: 884.67
Iteration:   4720, Loss function: 4.702, Average Loss: 5.057, avg. samples / sec: 972.53
Iteration:   4740, Loss function: 4.809, Average Loss: 5.053, avg. samples / sec: 947.52
Iteration:   4760, Loss function: 4.653, Average Loss: 5.050, avg. samples / sec: 952.22
Iteration:   4780, Loss function: 5.190, Average Loss: 5.046, avg. samples / sec: 943.09
Iteration:   4800, Loss function: 4.936, Average Loss: 5.044, avg. samples / sec: 952.00
Iteration:   4820, Loss function: 4.878, Average Loss: 5.041, avg. samples / sec: 921.22
Iteration:   4840, Loss function: 5.037, Average Loss: 5.037, avg. samples / sec: 915.67
Iteration:   4860, Loss function: 4.681, Average Loss: 5.033, avg. samples / sec: 953.56
Iteration:   4880, Loss function: 5.037, Average Loss: 5.030, avg. samples / sec: 988.62
Iteration:   4900, Loss function: 4.543, Average Loss: 5.026, avg. samples / sec: 984.04
Iteration:   4920, Loss function: 4.880, Average Loss: 5.023, avg. samples / sec: 952.31
Iteration:   4940, Loss function: 4.682, Average Loss: 5.019, avg. samples / sec: 947.38
Iteration:   4960, Loss function: 4.725, Average Loss: 5.015, avg. samples / sec: 971.53
Iteration:   4980, Loss function: 4.626, Average Loss: 5.011, avg. samples / sec: 931.26
Iteration:   5000, Loss function: 4.992, Average Loss: 5.008, avg. samples / sec: 956.61
Iteration:   5020, Loss function: 5.136, Average Loss: 5.005, avg. samples / sec: 943.80
Iteration:   5040, Loss function: 4.998, Average Loss: 5.003, avg. samples / sec: 987.70
Iteration:   5060, Loss function: 4.550, Average Loss: 5.000, avg. samples / sec: 937.90
Iteration:   5080, Loss function: 4.785, Average Loss: 4.996, avg. samples / sec: 974.05
Iteration:   5100, Loss function: 4.813, Average Loss: 4.994, avg. samples / sec: 990.52
Iteration:   5120, Loss function: 4.559, Average Loss: 4.990, avg. samples / sec: 997.21
Iteration:   5140, Loss function: 4.928, Average Loss: 4.986, avg. samples / sec: 990.10
:::MLLOG {"namespace": "", "time_ms": 1639762165685, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.81 s
:::MLLOG {"namespace": "", "time_ms": 1639762198591, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762198608, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762198609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.13s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.830, Average Loss: 4.980, avg. samples / sec: 64.05
Iteration:   5180, Loss function: 4.678, Average Loss: 4.975, avg. samples / sec: 1004.40
DONE (t=3.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10903
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21987
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10089
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13888
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21822
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21822
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10903 AP goal: 0.10000
Iteration:   5200, Loss function: 4.589, Average Loss: 4.970, avg. samples / sec: 1023.03
:::MLLOG {"namespace": "", "time_ms": 1639762205425, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205426, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10902957414029175, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205426, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762205565, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762206
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:30:06 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:27 PM'
START TIMING RUN WAS 2021-12-17 05:18:27 PM
ENDING TIMING RUN AT 2021-12-17 05:30:06 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:30:06 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ result=699
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-17 05:18:27 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-17 05:18:27 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
