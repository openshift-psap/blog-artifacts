8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f'
Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761507
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:27 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-18-09 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ set +x
Fri Dec 17 17:18:27 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-5dr8m to the sync file ...
run-mlperf--1-5dr8m Found 4 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
     2	run-mlperf--1-zcmvv
     3	run-mlperf--1-kcdh9
     4	run-mlperf--1-5dr8m
Fri Dec 17 17:18:32 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514015, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514280, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1219145588, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1219145588
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516738, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516738, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761541025, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761541025, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761542969, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761542970, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543337, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543338, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543339, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.326, Average Loss: 0.023, avg. samples / sec: 4.34
Iteration:     20, Loss function: 21.153, Average Loss: 0.462, avg. samples / sec: 799.37
Iteration:     40, Loss function: 20.812, Average Loss: 0.864, avg. samples / sec: 862.71
Iteration:     60, Loss function: 20.387, Average Loss: 1.253, avg. samples / sec: 917.74
Iteration:     80, Loss function: 19.556, Average Loss: 1.625, avg. samples / sec: 884.13
Iteration:    100, Loss function: 14.340, Average Loss: 1.938, avg. samples / sec: 883.17
Iteration:    120, Loss function: 10.783, Average Loss: 2.132, avg. samples / sec: 643.07
Iteration:    140, Loss function: 9.532, Average Loss: 2.284, avg. samples / sec: 914.49
Iteration:    160, Loss function: 9.119, Average Loss: 2.422, avg. samples / sec: 906.62
Iteration:    180, Loss function: 8.865, Average Loss: 2.550, avg. samples / sec: 892.04
Iteration:    200, Loss function: 8.610, Average Loss: 2.675, avg. samples / sec: 932.52
Iteration:    220, Loss function: 8.443, Average Loss: 2.794, avg. samples / sec: 947.48
Iteration:    240, Loss function: 9.148, Average Loss: 2.911, avg. samples / sec: 956.15
Iteration:    260, Loss function: 9.013, Average Loss: 3.031, avg. samples / sec: 915.86
Iteration:    280, Loss function: 8.450, Average Loss: 3.143, avg. samples / sec: 945.19
Iteration:    300, Loss function: 8.371, Average Loss: 3.246, avg. samples / sec: 937.71
Iteration:    320, Loss function: 8.501, Average Loss: 3.347, avg. samples / sec: 933.31
Iteration:    340, Loss function: 8.244, Average Loss: 3.445, avg. samples / sec: 934.02
Iteration:    360, Loss function: 8.097, Average Loss: 3.539, avg. samples / sec: 932.43
Iteration:    380, Loss function: 7.904, Average Loss: 3.629, avg. samples / sec: 944.27
Iteration:    400, Loss function: 7.776, Average Loss: 3.713, avg. samples / sec: 966.12
Iteration:    420, Loss function: 7.698, Average Loss: 3.794, avg. samples / sec: 973.46
Iteration:    440, Loss function: 8.147, Average Loss: 3.874, avg. samples / sec: 966.90
Iteration:    460, Loss function: 7.858, Average Loss: 3.955, avg. samples / sec: 961.81
Iteration:    480, Loss function: 7.246, Average Loss: 4.029, avg. samples / sec: 962.24
Iteration:    500, Loss function: 7.665, Average Loss: 4.099, avg. samples / sec: 947.11
Iteration:    520, Loss function: 7.411, Average Loss: 4.167, avg. samples / sec: 975.11
Iteration:    540, Loss function: 7.357, Average Loss: 4.233, avg. samples / sec: 993.22
Iteration:    560, Loss function: 7.189, Average Loss: 4.295, avg. samples / sec: 979.68
Iteration:    580, Loss function: 7.178, Average Loss: 4.356, avg. samples / sec: 959.22
Iteration:    600, Loss function: 7.323, Average Loss: 4.415, avg. samples / sec: 902.10
Iteration:    620, Loss function: 7.137, Average Loss: 4.472, avg. samples / sec: 925.73
Iteration:    640, Loss function: 6.963, Average Loss: 4.526, avg. samples / sec: 1001.99
Iteration:    660, Loss function: 7.114, Average Loss: 4.580, avg. samples / sec: 937.17
Iteration:    680, Loss function: 7.384, Average Loss: 4.632, avg. samples / sec: 951.04
Iteration:    700, Loss function: 6.870, Average Loss: 4.680, avg. samples / sec: 929.62
Iteration:    720, Loss function: 6.942, Average Loss: 4.729, avg. samples / sec: 963.63
Iteration:    740, Loss function: 7.057, Average Loss: 4.774, avg. samples / sec: 981.07
Iteration:    760, Loss function: 7.091, Average Loss: 4.817, avg. samples / sec: 991.59
Iteration:    780, Loss function: 6.839, Average Loss: 4.860, avg. samples / sec: 942.56
Iteration:    800, Loss function: 7.280, Average Loss: 4.900, avg. samples / sec: 950.00
Iteration:    820, Loss function: 6.851, Average Loss: 4.937, avg. samples / sec: 983.57
Iteration:    840, Loss function: 6.628, Average Loss: 4.973, avg. samples / sec: 960.12
Iteration:    860, Loss function: 6.765, Average Loss: 5.008, avg. samples / sec: 976.82
Iteration:    880, Loss function: 6.587, Average Loss: 5.040, avg. samples / sec: 942.26
Iteration:    900, Loss function: 6.917, Average Loss: 5.071, avg. samples / sec: 975.56
Iteration:    920, Loss function: 6.496, Average Loss: 5.099, avg. samples / sec: 983.40
Iteration:    940, Loss function: 6.802, Average Loss: 5.128, avg. samples / sec: 994.09
Iteration:    960, Loss function: 6.407, Average Loss: 5.157, avg. samples / sec: 978.82
Iteration:    980, Loss function: 6.447, Average Loss: 5.184, avg. samples / sec: 975.24
Iteration:   1000, Loss function: 6.668, Average Loss: 5.210, avg. samples / sec: 948.78
Iteration:   1020, Loss function: 6.224, Average Loss: 5.233, avg. samples / sec: 988.13
:::MLLOG {"namespace": "", "time_ms": 1639761668606, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761668609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.471, Average Loss: 5.258, avg. samples / sec: 983.46
Iteration:   1060, Loss function: 6.398, Average Loss: 5.281, avg. samples / sec: 978.81
Iteration:   1080, Loss function: 6.210, Average Loss: 5.303, avg. samples / sec: 952.77
Iteration:   1100, Loss function: 6.118, Average Loss: 5.323, avg. samples / sec: 969.81
Iteration:   1120, Loss function: 6.224, Average Loss: 5.343, avg. samples / sec: 891.16
Iteration:   1140, Loss function: 6.466, Average Loss: 5.361, avg. samples / sec: 952.98
Iteration:   1160, Loss function: 6.276, Average Loss: 5.380, avg. samples / sec: 969.75
Iteration:   1180, Loss function: 6.161, Average Loss: 5.396, avg. samples / sec: 969.61
Iteration:   1200, Loss function: 6.319, Average Loss: 5.412, avg. samples / sec: 972.47
Iteration:   1220, Loss function: 6.128, Average Loss: 5.427, avg. samples / sec: 986.67
Iteration:   1240, Loss function: 6.163, Average Loss: 5.441, avg. samples / sec: 977.03
Iteration:   1260, Loss function: 5.984, Average Loss: 5.454, avg. samples / sec: 929.25
Iteration:   1280, Loss function: 5.843, Average Loss: 5.467, avg. samples / sec: 993.54
Iteration:   1300, Loss function: 6.038, Average Loss: 5.480, avg. samples / sec: 971.86
Iteration:   1320, Loss function: 6.020, Average Loss: 5.492, avg. samples / sec: 925.51
Iteration:   1340, Loss function: 5.798, Average Loss: 5.503, avg. samples / sec: 981.36
Iteration:   1360, Loss function: 5.976, Average Loss: 5.514, avg. samples / sec: 970.54
Iteration:   1380, Loss function: 6.241, Average Loss: 5.525, avg. samples / sec: 1004.46
Iteration:   1400, Loss function: 6.122, Average Loss: 5.534, avg. samples / sec: 975.92
Iteration:   1420, Loss function: 6.094, Average Loss: 5.543, avg. samples / sec: 971.01
Iteration:   1440, Loss function: 6.326, Average Loss: 5.550, avg. samples / sec: 958.15
Iteration:   1460, Loss function: 6.187, Average Loss: 5.560, avg. samples / sec: 926.08
Iteration:   1480, Loss function: 6.039, Average Loss: 5.568, avg. samples / sec: 976.46
Iteration:   1500, Loss function: 6.119, Average Loss: 5.577, avg. samples / sec: 914.76
Iteration:   1520, Loss function: 5.813, Average Loss: 5.582, avg. samples / sec: 943.33
Iteration:   1540, Loss function: 5.914, Average Loss: 5.586, avg. samples / sec: 989.49
Iteration:   1560, Loss function: 5.630, Average Loss: 5.591, avg. samples / sec: 971.17
Iteration:   1580, Loss function: 5.664, Average Loss: 5.596, avg. samples / sec: 970.72
Iteration:   1600, Loss function: 6.142, Average Loss: 5.601, avg. samples / sec: 967.05
Iteration:   1620, Loss function: 5.839, Average Loss: 5.605, avg. samples / sec: 973.20
Iteration:   1640, Loss function: 5.815, Average Loss: 5.608, avg. samples / sec: 965.01
Iteration:   1660, Loss function: 5.648, Average Loss: 5.612, avg. samples / sec: 987.34
Iteration:   1680, Loss function: 5.711, Average Loss: 5.615, avg. samples / sec: 900.11
Iteration:   1700, Loss function: 5.462, Average Loss: 5.619, avg. samples / sec: 882.53
Iteration:   1720, Loss function: 5.666, Average Loss: 5.621, avg. samples / sec: 945.74
Iteration:   1740, Loss function: 5.749, Average Loss: 5.624, avg. samples / sec: 981.66
Iteration:   1760, Loss function: 5.483, Average Loss: 5.626, avg. samples / sec: 972.20
Iteration:   1780, Loss function: 5.701, Average Loss: 5.627, avg. samples / sec: 977.62
Iteration:   1800, Loss function: 5.692, Average Loss: 5.629, avg. samples / sec: 990.76
Iteration:   1820, Loss function: 5.989, Average Loss: 5.632, avg. samples / sec: 945.45
Iteration:   1840, Loss function: 5.940, Average Loss: 5.633, avg. samples / sec: 924.34
Iteration:   1860, Loss function: 5.785, Average Loss: 5.634, avg. samples / sec: 968.19
Iteration:   1880, Loss function: 5.966, Average Loss: 5.636, avg. samples / sec: 967.93
Iteration:   1900, Loss function: 5.870, Average Loss: 5.636, avg. samples / sec: 971.37
Iteration:   1920, Loss function: 5.748, Average Loss: 5.636, avg. samples / sec: 971.02
Iteration:   1940, Loss function: 5.736, Average Loss: 5.637, avg. samples / sec: 975.02
Iteration:   1960, Loss function: 5.660, Average Loss: 5.636, avg. samples / sec: 975.00
Iteration:   1980, Loss function: 5.751, Average Loss: 5.635, avg. samples / sec: 887.33
Iteration:   2000, Loss function: 5.593, Average Loss: 5.634, avg. samples / sec: 989.76
Iteration:   2020, Loss function: 5.690, Average Loss: 5.632, avg. samples / sec: 965.19
Iteration:   2040, Loss function: 5.728, Average Loss: 5.632, avg. samples / sec: 977.50
:::MLLOG {"namespace": "", "time_ms": 1639761790724, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761790725, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.422, Average Loss: 5.630, avg. samples / sec: 985.94
Iteration:   2080, Loss function: 5.209, Average Loss: 5.628, avg. samples / sec: 963.59
Iteration:   2100, Loss function: 5.484, Average Loss: 5.626, avg. samples / sec: 976.24
Iteration:   2120, Loss function: 5.150, Average Loss: 5.624, avg. samples / sec: 977.42
Iteration:   2140, Loss function: 5.429, Average Loss: 5.621, avg. samples / sec: 928.71
Iteration:   2160, Loss function: 5.286, Average Loss: 5.619, avg. samples / sec: 920.79
Iteration:   2180, Loss function: 5.347, Average Loss: 5.617, avg. samples / sec: 857.43
Iteration:   2200, Loss function: 5.426, Average Loss: 5.612, avg. samples / sec: 929.59
Iteration:   2220, Loss function: 5.506, Average Loss: 5.609, avg. samples / sec: 940.13
Iteration:   2240, Loss function: 5.422, Average Loss: 5.607, avg. samples / sec: 992.38
Iteration:   2260, Loss function: 5.407, Average Loss: 5.604, avg. samples / sec: 977.52
Iteration:   2280, Loss function: 5.268, Average Loss: 5.601, avg. samples / sec: 979.04
Iteration:   2300, Loss function: 5.068, Average Loss: 5.599, avg. samples / sec: 968.49
Iteration:   2320, Loss function: 5.346, Average Loss: 5.597, avg. samples / sec: 987.41
Iteration:   2340, Loss function: 5.326, Average Loss: 5.593, avg. samples / sec: 964.31
Iteration:   2360, Loss function: 5.242, Average Loss: 5.589, avg. samples / sec: 976.21
Iteration:   2380, Loss function: 5.387, Average Loss: 5.585, avg. samples / sec: 981.01
Iteration:   2400, Loss function: 5.501, Average Loss: 5.580, avg. samples / sec: 972.66
Iteration:   2420, Loss function: 5.561, Average Loss: 5.576, avg. samples / sec: 972.78
Iteration:   2440, Loss function: 5.359, Average Loss: 5.573, avg. samples / sec: 991.22
Iteration:   2460, Loss function: 5.197, Average Loss: 5.569, avg. samples / sec: 979.37
Iteration:   2480, Loss function: 5.301, Average Loss: 5.564, avg. samples / sec: 979.84
Iteration:   2500, Loss function: 5.105, Average Loss: 5.561, avg. samples / sec: 914.77
Iteration:   2520, Loss function: 5.331, Average Loss: 5.555, avg. samples / sec: 835.76
Iteration:   2540, Loss function: 5.339, Average Loss: 5.552, avg. samples / sec: 940.57
Iteration:   2560, Loss function: 5.314, Average Loss: 5.549, avg. samples / sec: 970.66
Iteration:   2580, Loss function: 5.408, Average Loss: 5.545, avg. samples / sec: 981.74
Iteration:   2600, Loss function: 5.295, Average Loss: 5.542, avg. samples / sec: 971.73
Iteration:   2620, Loss function: 5.550, Average Loss: 5.537, avg. samples / sec: 954.32
Iteration:   2640, Loss function: 5.232, Average Loss: 5.535, avg. samples / sec: 893.37
Iteration:   2660, Loss function: 5.179, Average Loss: 5.531, avg. samples / sec: 976.94
Iteration:   2680, Loss function: 5.238, Average Loss: 5.527, avg. samples / sec: 963.18
Iteration:   2700, Loss function: 5.262, Average Loss: 5.522, avg. samples / sec: 985.90
Iteration:   2720, Loss function: 5.150, Average Loss: 5.518, avg. samples / sec: 948.30
Iteration:   2740, Loss function: 4.862, Average Loss: 5.514, avg. samples / sec: 965.36
Iteration:   2760, Loss function: 4.837, Average Loss: 5.508, avg. samples / sec: 955.48
Iteration:   2780, Loss function: 5.516, Average Loss: 5.504, avg. samples / sec: 924.18
Iteration:   2800, Loss function: 5.261, Average Loss: 5.499, avg. samples / sec: 998.76
Iteration:   2820, Loss function: 5.437, Average Loss: 5.496, avg. samples / sec: 980.91
Iteration:   2840, Loss function: 5.227, Average Loss: 5.492, avg. samples / sec: 990.97
Iteration:   2860, Loss function: 5.189, Average Loss: 5.487, avg. samples / sec: 843.75
Iteration:   2880, Loss function: 5.400, Average Loss: 5.482, avg. samples / sec: 989.09
Iteration:   2900, Loss function: 5.214, Average Loss: 5.478, avg. samples / sec: 976.60
Iteration:   2920, Loss function: 5.308, Average Loss: 5.472, avg. samples / sec: 963.22
Iteration:   2940, Loss function: 5.079, Average Loss: 5.468, avg. samples / sec: 985.07
Iteration:   2960, Loss function: 5.399, Average Loss: 5.463, avg. samples / sec: 961.82
Iteration:   2980, Loss function: 5.105, Average Loss: 5.459, avg. samples / sec: 987.93
Iteration:   3000, Loss function: 5.244, Average Loss: 5.453, avg. samples / sec: 958.74
Iteration:   3020, Loss function: 5.268, Average Loss: 5.448, avg. samples / sec: 932.52
Iteration:   3040, Loss function: 5.323, Average Loss: 5.443, avg. samples / sec: 979.44
Iteration:   3060, Loss function: 5.094, Average Loss: 5.438, avg. samples / sec: 982.92
Iteration:   3080, Loss function: 5.105, Average Loss: 5.433, avg. samples / sec: 901.22
:::MLLOG {"namespace": "", "time_ms": 1639761913397, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761913399, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.235, Average Loss: 5.428, avg. samples / sec: 915.61
Iteration:   3120, Loss function: 5.182, Average Loss: 5.422, avg. samples / sec: 988.97
Iteration:   3140, Loss function: 5.237, Average Loss: 5.418, avg. samples / sec: 988.07
Iteration:   3160, Loss function: 5.276, Average Loss: 5.413, avg. samples / sec: 970.28
Iteration:   3180, Loss function: 5.150, Average Loss: 5.409, avg. samples / sec: 953.27
Iteration:   3200, Loss function: 5.329, Average Loss: 5.404, avg. samples / sec: 977.74
Iteration:   3220, Loss function: 5.265, Average Loss: 5.399, avg. samples / sec: 951.03
Iteration:   3240, Loss function: 5.147, Average Loss: 5.394, avg. samples / sec: 969.30
Iteration:   3260, Loss function: 5.060, Average Loss: 5.389, avg. samples / sec: 975.22
Iteration:   3280, Loss function: 4.776, Average Loss: 5.382, avg. samples / sec: 976.18
Iteration:   3300, Loss function: 4.649, Average Loss: 5.376, avg. samples / sec: 975.92
Iteration:   3320, Loss function: 4.743, Average Loss: 5.371, avg. samples / sec: 947.63
Iteration:   3340, Loss function: 5.000, Average Loss: 5.367, avg. samples / sec: 885.64
Iteration:   3360, Loss function: 5.238, Average Loss: 5.361, avg. samples / sec: 975.96
Iteration:   3380, Loss function: 5.192, Average Loss: 5.354, avg. samples / sec: 977.04
Iteration:   3400, Loss function: 4.783, Average Loss: 5.349, avg. samples / sec: 986.51
Iteration:   3420, Loss function: 5.163, Average Loss: 5.343, avg. samples / sec: 966.70
Iteration:   3440, Loss function: 4.990, Average Loss: 5.339, avg. samples / sec: 989.49
Iteration:   3460, Loss function: 5.246, Average Loss: 5.334, avg. samples / sec: 976.59
Iteration:   3480, Loss function: 5.251, Average Loss: 5.330, avg. samples / sec: 977.70
Iteration:   3500, Loss function: 5.308, Average Loss: 5.326, avg. samples / sec: 972.74
Iteration:   3520, Loss function: 5.109, Average Loss: 5.323, avg. samples / sec: 991.01
Iteration:   3540, Loss function: 4.967, Average Loss: 5.318, avg. samples / sec: 953.64
Iteration:   3560, Loss function: 4.970, Average Loss: 5.315, avg. samples / sec: 976.61
Iteration:   3580, Loss function: 5.060, Average Loss: 5.310, avg. samples / sec: 983.04
Iteration:   3600, Loss function: 5.231, Average Loss: 5.304, avg. samples / sec: 980.34
Iteration:   3620, Loss function: 4.849, Average Loss: 5.299, avg. samples / sec: 976.98
Iteration:   3640, Loss function: 4.731, Average Loss: 5.294, avg. samples / sec: 969.49
Iteration:   3660, Loss function: 5.053, Average Loss: 5.289, avg. samples / sec: 985.41
Iteration:   3680, Loss function: 5.253, Average Loss: 5.283, avg. samples / sec: 949.19
Iteration:   3700, Loss function: 5.016, Average Loss: 5.279, avg. samples / sec: 974.18
Iteration:   3720, Loss function: 4.798, Average Loss: 5.273, avg. samples / sec: 961.28
Iteration:   3740, Loss function: 5.211, Average Loss: 5.268, avg. samples / sec: 987.66
Iteration:   3760, Loss function: 5.087, Average Loss: 5.264, avg. samples / sec: 898.22
Iteration:   3780, Loss function: 5.028, Average Loss: 5.260, avg. samples / sec: 905.07
Iteration:   3800, Loss function: 5.024, Average Loss: 5.257, avg. samples / sec: 884.53
Iteration:   3820, Loss function: 5.237, Average Loss: 5.253, avg. samples / sec: 966.68
Iteration:   3840, Loss function: 4.798, Average Loss: 5.248, avg. samples / sec: 946.43
Iteration:   3860, Loss function: 4.790, Average Loss: 5.244, avg. samples / sec: 980.96
Iteration:   3880, Loss function: 4.990, Average Loss: 5.238, avg. samples / sec: 917.67
Iteration:   3900, Loss function: 5.113, Average Loss: 5.233, avg. samples / sec: 966.39
Iteration:   3920, Loss function: 5.016, Average Loss: 5.227, avg. samples / sec: 982.93
Iteration:   3940, Loss function: 5.030, Average Loss: 5.222, avg. samples / sec: 979.44
Iteration:   3960, Loss function: 4.785, Average Loss: 5.218, avg. samples / sec: 979.38
Iteration:   3980, Loss function: 4.901, Average Loss: 5.213, avg. samples / sec: 977.41
Iteration:   4000, Loss function: 5.173, Average Loss: 5.209, avg. samples / sec: 950.31
Iteration:   4020, Loss function: 4.887, Average Loss: 5.204, avg. samples / sec: 940.67
Iteration:   4040, Loss function: 5.009, Average Loss: 5.201, avg. samples / sec: 985.14
Iteration:   4060, Loss function: 5.086, Average Loss: 5.197, avg. samples / sec: 976.38
Iteration:   4080, Loss function: 4.983, Average Loss: 5.192, avg. samples / sec: 984.51
Iteration:   4100, Loss function: 5.146, Average Loss: 5.189, avg. samples / sec: 976.66
:::MLLOG {"namespace": "", "time_ms": 1639762035047, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762035049, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.857, Average Loss: 5.184, avg. samples / sec: 975.86
Iteration:   4140, Loss function: 4.912, Average Loss: 5.179, avg. samples / sec: 930.89
Iteration:   4160, Loss function: 4.989, Average Loss: 5.172, avg. samples / sec: 946.26
Iteration:   4180, Loss function: 5.183, Average Loss: 5.167, avg. samples / sec: 984.18
Iteration:   4200, Loss function: 4.958, Average Loss: 5.163, avg. samples / sec: 969.64
Iteration:   4220, Loss function: 4.869, Average Loss: 5.158, avg. samples / sec: 985.45
Iteration:   4240, Loss function: 4.895, Average Loss: 5.152, avg. samples / sec: 886.28
Iteration:   4260, Loss function: 5.102, Average Loss: 5.148, avg. samples / sec: 986.00
Iteration:   4280, Loss function: 4.906, Average Loss: 5.143, avg. samples / sec: 981.73
Iteration:   4300, Loss function: 4.827, Average Loss: 5.137, avg. samples / sec: 978.14
Iteration:   4320, Loss function: 4.707, Average Loss: 5.133, avg. samples / sec: 981.43
Iteration:   4340, Loss function: 4.824, Average Loss: 5.129, avg. samples / sec: 973.03
Iteration:   4360, Loss function: 4.938, Average Loss: 5.124, avg. samples / sec: 983.18
Iteration:   4380, Loss function: 5.091, Average Loss: 5.120, avg. samples / sec: 934.20
Iteration:   4400, Loss function: 4.818, Average Loss: 5.115, avg. samples / sec: 981.88
Iteration:   4420, Loss function: 4.876, Average Loss: 5.110, avg. samples / sec: 928.05
Iteration:   4440, Loss function: 4.981, Average Loss: 5.105, avg. samples / sec: 960.85
Iteration:   4460, Loss function: 4.883, Average Loss: 5.101, avg. samples / sec: 968.82
Iteration:   4480, Loss function: 4.932, Average Loss: 5.098, avg. samples / sec: 953.03
Iteration:   4500, Loss function: 4.878, Average Loss: 5.094, avg. samples / sec: 967.17
Iteration:   4520, Loss function: 4.665, Average Loss: 5.090, avg. samples / sec: 974.40
Iteration:   4540, Loss function: 5.020, Average Loss: 5.084, avg. samples / sec: 980.14
Iteration:   4560, Loss function: 4.658, Average Loss: 5.080, avg. samples / sec: 904.71
Iteration:   4580, Loss function: 4.661, Average Loss: 5.077, avg. samples / sec: 973.29
Iteration:   4600, Loss function: 4.922, Average Loss: 5.074, avg. samples / sec: 963.79
Iteration:   4620, Loss function: 4.767, Average Loss: 5.069, avg. samples / sec: 969.31
Iteration:   4640, Loss function: 4.798, Average Loss: 5.065, avg. samples / sec: 983.80
Iteration:   4660, Loss function: 4.720, Average Loss: 5.062, avg. samples / sec: 979.32
Iteration:   4680, Loss function: 5.090, Average Loss: 5.058, avg. samples / sec: 972.31
Iteration:   4700, Loss function: 4.727, Average Loss: 5.054, avg. samples / sec: 984.97
Iteration:   4720, Loss function: 4.803, Average Loss: 5.049, avg. samples / sec: 948.61
Iteration:   4740, Loss function: 4.758, Average Loss: 5.045, avg. samples / sec: 976.37
Iteration:   4760, Loss function: 4.675, Average Loss: 5.042, avg. samples / sec: 973.85
Iteration:   4780, Loss function: 5.068, Average Loss: 5.039, avg. samples / sec: 984.55
Iteration:   4800, Loss function: 4.787, Average Loss: 5.035, avg. samples / sec: 971.59
Iteration:   4820, Loss function: 4.805, Average Loss: 5.032, avg. samples / sec: 976.34
Iteration:   4840, Loss function: 5.172, Average Loss: 5.029, avg. samples / sec: 989.01
Iteration:   4860, Loss function: 4.659, Average Loss: 5.025, avg. samples / sec: 977.28
Iteration:   4880, Loss function: 5.061, Average Loss: 5.021, avg. samples / sec: 986.15
Iteration:   4900, Loss function: 4.683, Average Loss: 5.018, avg. samples / sec: 912.40
Iteration:   4920, Loss function: 4.760, Average Loss: 5.014, avg. samples / sec: 977.88
Iteration:   4940, Loss function: 4.969, Average Loss: 5.010, avg. samples / sec: 941.16
Iteration:   4960, Loss function: 4.651, Average Loss: 5.007, avg. samples / sec: 982.87
Iteration:   4980, Loss function: 4.422, Average Loss: 5.001, avg. samples / sec: 966.18
Iteration:   5000, Loss function: 4.815, Average Loss: 4.997, avg. samples / sec: 966.32
Iteration:   5020, Loss function: 5.151, Average Loss: 4.994, avg. samples / sec: 963.58
Iteration:   5040, Loss function: 4.861, Average Loss: 4.990, avg. samples / sec: 911.31
Iteration:   5060, Loss function: 4.621, Average Loss: 4.987, avg. samples / sec: 917.58
Iteration:   5080, Loss function: 4.432, Average Loss: 4.983, avg. samples / sec: 984.47
Iteration:   5100, Loss function: 4.771, Average Loss: 4.979, avg. samples / sec: 923.84
Iteration:   5120, Loss function: 4.683, Average Loss: 4.976, avg. samples / sec: 936.76
Iteration:   5140, Loss function: 4.900, Average Loss: 4.973, avg. samples / sec: 990.33
:::MLLOG {"namespace": "", "time_ms": 1639762156926, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.81 s
:::MLLOG {"namespace": "", "time_ms": 1639762189830, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762189898, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762189898, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.76s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.861, Average Loss: 4.968, avg. samples / sec: 64.55
DONE (t=2.78s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10958
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21779
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10184
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19386
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20467
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10958 AP goal: 0.10000
Iteration:   5180, Loss function: 4.899, Average Loss: 4.963, avg. samples / sec: 1010.85
:::MLLOG {"namespace": "", "time_ms": 1639762194149, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194150, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10957672620234912, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194150, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194343, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:29:55 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:29:55 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514015, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514280, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1219145588, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1219145588
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516738, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516738, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516739, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761541025, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761541025, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761542969, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761542970, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543337, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543338, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543339, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.326, Average Loss: 0.023, avg. samples / sec: 4.34
Iteration:     20, Loss function: 21.153, Average Loss: 0.462, avg. samples / sec: 799.37
Iteration:     40, Loss function: 20.812, Average Loss: 0.864, avg. samples / sec: 862.71
Iteration:     60, Loss function: 20.387, Average Loss: 1.253, avg. samples / sec: 917.74
Iteration:     80, Loss function: 19.556, Average Loss: 1.625, avg. samples / sec: 884.13
Iteration:    100, Loss function: 14.340, Average Loss: 1.938, avg. samples / sec: 883.17
Iteration:    120, Loss function: 10.783, Average Loss: 2.132, avg. samples / sec: 643.07
Iteration:    140, Loss function: 9.532, Average Loss: 2.284, avg. samples / sec: 914.49
Iteration:    160, Loss function: 9.119, Average Loss: 2.422, avg. samples / sec: 906.62
Iteration:    180, Loss function: 8.865, Average Loss: 2.550, avg. samples / sec: 892.04
Iteration:    200, Loss function: 8.610, Average Loss: 2.675, avg. samples / sec: 932.52
Iteration:    220, Loss function: 8.443, Average Loss: 2.794, avg. samples / sec: 947.48
Iteration:    240, Loss function: 9.148, Average Loss: 2.911, avg. samples / sec: 956.15
Iteration:    260, Loss function: 9.013, Average Loss: 3.031, avg. samples / sec: 915.86
Iteration:    280, Loss function: 8.450, Average Loss: 3.143, avg. samples / sec: 945.19
Iteration:    300, Loss function: 8.371, Average Loss: 3.246, avg. samples / sec: 937.71
Iteration:    320, Loss function: 8.501, Average Loss: 3.347, avg. samples / sec: 933.31
Iteration:    340, Loss function: 8.244, Average Loss: 3.445, avg. samples / sec: 934.02
Iteration:    360, Loss function: 8.097, Average Loss: 3.539, avg. samples / sec: 932.43
Iteration:    380, Loss function: 7.904, Average Loss: 3.629, avg. samples / sec: 944.27
Iteration:    400, Loss function: 7.776, Average Loss: 3.713, avg. samples / sec: 966.12
Iteration:    420, Loss function: 7.698, Average Loss: 3.794, avg. samples / sec: 973.46
Iteration:    440, Loss function: 8.147, Average Loss: 3.874, avg. samples / sec: 966.90
Iteration:    460, Loss function: 7.858, Average Loss: 3.955, avg. samples / sec: 961.81
Iteration:    480, Loss function: 7.246, Average Loss: 4.029, avg. samples / sec: 962.24
Iteration:    500, Loss function: 7.665, Average Loss: 4.099, avg. samples / sec: 947.11
Iteration:    520, Loss function: 7.411, Average Loss: 4.167, avg. samples / sec: 975.11
Iteration:    540, Loss function: 7.357, Average Loss: 4.233, avg. samples / sec: 993.22
Iteration:    560, Loss function: 7.189, Average Loss: 4.295, avg. samples / sec: 979.68
Iteration:    580, Loss function: 7.178, Average Loss: 4.356, avg. samples / sec: 959.22
Iteration:    600, Loss function: 7.323, Average Loss: 4.415, avg. samples / sec: 902.10
Iteration:    620, Loss function: 7.137, Average Loss: 4.472, avg. samples / sec: 925.73
Iteration:    640, Loss function: 6.963, Average Loss: 4.526, avg. samples / sec: 1001.99
Iteration:    660, Loss function: 7.114, Average Loss: 4.580, avg. samples / sec: 937.17
Iteration:    680, Loss function: 7.384, Average Loss: 4.632, avg. samples / sec: 951.04
Iteration:    700, Loss function: 6.870, Average Loss: 4.680, avg. samples / sec: 929.62
Iteration:    720, Loss function: 6.942, Average Loss: 4.729, avg. samples / sec: 963.63
Iteration:    740, Loss function: 7.057, Average Loss: 4.774, avg. samples / sec: 981.07
Iteration:    760, Loss function: 7.091, Average Loss: 4.817, avg. samples / sec: 991.59
Iteration:    780, Loss function: 6.839, Average Loss: 4.860, avg. samples / sec: 942.56
Iteration:    800, Loss function: 7.280, Average Loss: 4.900, avg. samples / sec: 950.00
Iteration:    820, Loss function: 6.851, Average Loss: 4.937, avg. samples / sec: 983.57
Iteration:    840, Loss function: 6.628, Average Loss: 4.973, avg. samples / sec: 960.12
Iteration:    860, Loss function: 6.765, Average Loss: 5.008, avg. samples / sec: 976.82
Iteration:    880, Loss function: 6.587, Average Loss: 5.040, avg. samples / sec: 942.26
Iteration:    900, Loss function: 6.917, Average Loss: 5.071, avg. samples / sec: 975.56
Iteration:    920, Loss function: 6.496, Average Loss: 5.099, avg. samples / sec: 983.40
Iteration:    940, Loss function: 6.802, Average Loss: 5.128, avg. samples / sec: 994.09
Iteration:    960, Loss function: 6.407, Average Loss: 5.157, avg. samples / sec: 978.82
Iteration:    980, Loss function: 6.447, Average Loss: 5.184, avg. samples / sec: 975.24
Iteration:   1000, Loss function: 6.668, Average Loss: 5.210, avg. samples / sec: 948.78
Iteration:   1020, Loss function: 6.224, Average Loss: 5.233, avg. samples / sec: 988.13
:::MLLOG {"namespace": "", "time_ms": 1639761668606, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761668609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.471, Average Loss: 5.258, avg. samples / sec: 983.46
Iteration:   1060, Loss function: 6.398, Average Loss: 5.281, avg. samples / sec: 978.81
Iteration:   1080, Loss function: 6.210, Average Loss: 5.303, avg. samples / sec: 952.77
Iteration:   1100, Loss function: 6.118, Average Loss: 5.323, avg. samples / sec: 969.81
Iteration:   1120, Loss function: 6.224, Average Loss: 5.343, avg. samples / sec: 891.16
Iteration:   1140, Loss function: 6.466, Average Loss: 5.361, avg. samples / sec: 952.98
Iteration:   1160, Loss function: 6.276, Average Loss: 5.380, avg. samples / sec: 969.75
Iteration:   1180, Loss function: 6.161, Average Loss: 5.396, avg. samples / sec: 969.61
Iteration:   1200, Loss function: 6.319, Average Loss: 5.412, avg. samples / sec: 972.47
Iteration:   1220, Loss function: 6.128, Average Loss: 5.427, avg. samples / sec: 986.67
Iteration:   1240, Loss function: 6.163, Average Loss: 5.441, avg. samples / sec: 977.03
Iteration:   1260, Loss function: 5.984, Average Loss: 5.454, avg. samples / sec: 929.25
Iteration:   1280, Loss function: 5.843, Average Loss: 5.467, avg. samples / sec: 993.54
Iteration:   1300, Loss function: 6.038, Average Loss: 5.480, avg. samples / sec: 971.86
Iteration:   1320, Loss function: 6.020, Average Loss: 5.492, avg. samples / sec: 925.51
Iteration:   1340, Loss function: 5.798, Average Loss: 5.503, avg. samples / sec: 981.36
Iteration:   1360, Loss function: 5.976, Average Loss: 5.514, avg. samples / sec: 970.54
Iteration:   1380, Loss function: 6.241, Average Loss: 5.525, avg. samples / sec: 1004.46
Iteration:   1400, Loss function: 6.122, Average Loss: 5.534, avg. samples / sec: 975.92
Iteration:   1420, Loss function: 6.094, Average Loss: 5.543, avg. samples / sec: 971.01
Iteration:   1440, Loss function: 6.326, Average Loss: 5.550, avg. samples / sec: 958.15
Iteration:   1460, Loss function: 6.187, Average Loss: 5.560, avg. samples / sec: 926.08
Iteration:   1480, Loss function: 6.039, Average Loss: 5.568, avg. samples / sec: 976.46
Iteration:   1500, Loss function: 6.119, Average Loss: 5.577, avg. samples / sec: 914.76
Iteration:   1520, Loss function: 5.813, Average Loss: 5.582, avg. samples / sec: 943.33
Iteration:   1540, Loss function: 5.914, Average Loss: 5.586, avg. samples / sec: 989.49
Iteration:   1560, Loss function: 5.630, Average Loss: 5.591, avg. samples / sec: 971.17
Iteration:   1580, Loss function: 5.664, Average Loss: 5.596, avg. samples / sec: 970.72
Iteration:   1600, Loss function: 6.142, Average Loss: 5.601, avg. samples / sec: 967.05
Iteration:   1620, Loss function: 5.839, Average Loss: 5.605, avg. samples / sec: 973.20
Iteration:   1640, Loss function: 5.815, Average Loss: 5.608, avg. samples / sec: 965.01
Iteration:   1660, Loss function: 5.648, Average Loss: 5.612, avg. samples / sec: 987.34
Iteration:   1680, Loss function: 5.711, Average Loss: 5.615, avg. samples / sec: 900.11
Iteration:   1700, Loss function: 5.462, Average Loss: 5.619, avg. samples / sec: 882.53
Iteration:   1720, Loss function: 5.666, Average Loss: 5.621, avg. samples / sec: 945.74
Iteration:   1740, Loss function: 5.749, Average Loss: 5.624, avg. samples / sec: 981.66
Iteration:   1760, Loss function: 5.483, Average Loss: 5.626, avg. samples / sec: 972.20
Iteration:   1780, Loss function: 5.701, Average Loss: 5.627, avg. samples / sec: 977.62
Iteration:   1800, Loss function: 5.692, Average Loss: 5.629, avg. samples / sec: 990.76
Iteration:   1820, Loss function: 5.989, Average Loss: 5.632, avg. samples / sec: 945.45
Iteration:   1840, Loss function: 5.940, Average Loss: 5.633, avg. samples / sec: 924.34
Iteration:   1860, Loss function: 5.785, Average Loss: 5.634, avg. samples / sec: 968.19
Iteration:   1880, Loss function: 5.966, Average Loss: 5.636, avg. samples / sec: 967.93
Iteration:   1900, Loss function: 5.870, Average Loss: 5.636, avg. samples / sec: 971.37
Iteration:   1920, Loss function: 5.748, Average Loss: 5.636, avg. samples / sec: 971.02
Iteration:   1940, Loss function: 5.736, Average Loss: 5.637, avg. samples / sec: 975.02
Iteration:   1960, Loss function: 5.660, Average Loss: 5.636, avg. samples / sec: 975.00
Iteration:   1980, Loss function: 5.751, Average Loss: 5.635, avg. samples / sec: 887.33
Iteration:   2000, Loss function: 5.593, Average Loss: 5.634, avg. samples / sec: 989.76
Iteration:   2020, Loss function: 5.690, Average Loss: 5.632, avg. samples / sec: 965.19
Iteration:   2040, Loss function: 5.728, Average Loss: 5.632, avg. samples / sec: 977.50
:::MLLOG {"namespace": "", "time_ms": 1639761790724, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761790725, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.422, Average Loss: 5.630, avg. samples / sec: 985.94
Iteration:   2080, Loss function: 5.209, Average Loss: 5.628, avg. samples / sec: 963.59
Iteration:   2100, Loss function: 5.484, Average Loss: 5.626, avg. samples / sec: 976.24
Iteration:   2120, Loss function: 5.150, Average Loss: 5.624, avg. samples / sec: 977.42
Iteration:   2140, Loss function: 5.429, Average Loss: 5.621, avg. samples / sec: 928.71
Iteration:   2160, Loss function: 5.286, Average Loss: 5.619, avg. samples / sec: 920.79
Iteration:   2180, Loss function: 5.347, Average Loss: 5.617, avg. samples / sec: 857.43
Iteration:   2200, Loss function: 5.426, Average Loss: 5.612, avg. samples / sec: 929.59
Iteration:   2220, Loss function: 5.506, Average Loss: 5.609, avg. samples / sec: 940.13
Iteration:   2240, Loss function: 5.422, Average Loss: 5.607, avg. samples / sec: 992.38
Iteration:   2260, Loss function: 5.407, Average Loss: 5.604, avg. samples / sec: 977.52
Iteration:   2280, Loss function: 5.268, Average Loss: 5.601, avg. samples / sec: 979.04
Iteration:   2300, Loss function: 5.068, Average Loss: 5.599, avg. samples / sec: 968.49
Iteration:   2320, Loss function: 5.346, Average Loss: 5.597, avg. samples / sec: 987.41
Iteration:   2340, Loss function: 5.326, Average Loss: 5.593, avg. samples / sec: 964.31
Iteration:   2360, Loss function: 5.242, Average Loss: 5.589, avg. samples / sec: 976.21
Iteration:   2380, Loss function: 5.387, Average Loss: 5.585, avg. samples / sec: 981.01
Iteration:   2400, Loss function: 5.501, Average Loss: 5.580, avg. samples / sec: 972.66
Iteration:   2420, Loss function: 5.561, Average Loss: 5.576, avg. samples / sec: 972.78
Iteration:   2440, Loss function: 5.359, Average Loss: 5.573, avg. samples / sec: 991.22
Iteration:   2460, Loss function: 5.197, Average Loss: 5.569, avg. samples / sec: 979.37
Iteration:   2480, Loss function: 5.301, Average Loss: 5.564, avg. samples / sec: 979.84
Iteration:   2500, Loss function: 5.105, Average Loss: 5.561, avg. samples / sec: 914.77
Iteration:   2520, Loss function: 5.331, Average Loss: 5.555, avg. samples / sec: 835.76
Iteration:   2540, Loss function: 5.339, Average Loss: 5.552, avg. samples / sec: 940.57
Iteration:   2560, Loss function: 5.314, Average Loss: 5.549, avg. samples / sec: 970.66
Iteration:   2580, Loss function: 5.408, Average Loss: 5.545, avg. samples / sec: 981.74
Iteration:   2600, Loss function: 5.295, Average Loss: 5.542, avg. samples / sec: 971.73
Iteration:   2620, Loss function: 5.550, Average Loss: 5.537, avg. samples / sec: 954.32
Iteration:   2640, Loss function: 5.232, Average Loss: 5.535, avg. samples / sec: 893.37
Iteration:   2660, Loss function: 5.179, Average Loss: 5.531, avg. samples / sec: 976.94
Iteration:   2680, Loss function: 5.238, Average Loss: 5.527, avg. samples / sec: 963.18
Iteration:   2700, Loss function: 5.262, Average Loss: 5.522, avg. samples / sec: 985.90
Iteration:   2720, Loss function: 5.150, Average Loss: 5.518, avg. samples / sec: 948.30
Iteration:   2740, Loss function: 4.862, Average Loss: 5.514, avg. samples / sec: 965.36
Iteration:   2760, Loss function: 4.837, Average Loss: 5.508, avg. samples / sec: 955.48
Iteration:   2780, Loss function: 5.516, Average Loss: 5.504, avg. samples / sec: 924.18
Iteration:   2800, Loss function: 5.261, Average Loss: 5.499, avg. samples / sec: 998.76
Iteration:   2820, Loss function: 5.437, Average Loss: 5.496, avg. samples / sec: 980.91
Iteration:   2840, Loss function: 5.227, Average Loss: 5.492, avg. samples / sec: 990.97
Iteration:   2860, Loss function: 5.189, Average Loss: 5.487, avg. samples / sec: 843.75
Iteration:   2880, Loss function: 5.400, Average Loss: 5.482, avg. samples / sec: 989.09
Iteration:   2900, Loss function: 5.214, Average Loss: 5.478, avg. samples / sec: 976.60
Iteration:   2920, Loss function: 5.308, Average Loss: 5.472, avg. samples / sec: 963.22
Iteration:   2940, Loss function: 5.079, Average Loss: 5.468, avg. samples / sec: 985.07
Iteration:   2960, Loss function: 5.399, Average Loss: 5.463, avg. samples / sec: 961.82
Iteration:   2980, Loss function: 5.105, Average Loss: 5.459, avg. samples / sec: 987.93
Iteration:   3000, Loss function: 5.244, Average Loss: 5.453, avg. samples / sec: 958.74
Iteration:   3020, Loss function: 5.268, Average Loss: 5.448, avg. samples / sec: 932.52
Iteration:   3040, Loss function: 5.323, Average Loss: 5.443, avg. samples / sec: 979.44
Iteration:   3060, Loss function: 5.094, Average Loss: 5.438, avg. samples / sec: 982.92
Iteration:   3080, Loss function: 5.105, Average Loss: 5.433, avg. samples / sec: 901.22
:::MLLOG {"namespace": "", "time_ms": 1639761913397, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761913399, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.235, Average Loss: 5.428, avg. samples / sec: 915.61
Iteration:   3120, Loss function: 5.182, Average Loss: 5.422, avg. samples / sec: 988.97
Iteration:   3140, Loss function: 5.237, Average Loss: 5.418, avg. samples / sec: 988.07
Iteration:   3160, Loss function: 5.276, Average Loss: 5.413, avg. samples / sec: 970.28
Iteration:   3180, Loss function: 5.150, Average Loss: 5.409, avg. samples / sec: 953.27
Iteration:   3200, Loss function: 5.329, Average Loss: 5.404, avg. samples / sec: 977.74
Iteration:   3220, Loss function: 5.265, Average Loss: 5.399, avg. samples / sec: 951.03
Iteration:   3240, Loss function: 5.147, Average Loss: 5.394, avg. samples / sec: 969.30
Iteration:   3260, Loss function: 5.060, Average Loss: 5.389, avg. samples / sec: 975.22
Iteration:   3280, Loss function: 4.776, Average Loss: 5.382, avg. samples / sec: 976.18
Iteration:   3300, Loss function: 4.649, Average Loss: 5.376, avg. samples / sec: 975.92
Iteration:   3320, Loss function: 4.743, Average Loss: 5.371, avg. samples / sec: 947.63
Iteration:   3340, Loss function: 5.000, Average Loss: 5.367, avg. samples / sec: 885.64
Iteration:   3360, Loss function: 5.238, Average Loss: 5.361, avg. samples / sec: 975.96
Iteration:   3380, Loss function: 5.192, Average Loss: 5.354, avg. samples / sec: 977.04
Iteration:   3400, Loss function: 4.783, Average Loss: 5.349, avg. samples / sec: 986.51
Iteration:   3420, Loss function: 5.163, Average Loss: 5.343, avg. samples / sec: 966.70
Iteration:   3440, Loss function: 4.990, Average Loss: 5.339, avg. samples / sec: 989.49
Iteration:   3460, Loss function: 5.246, Average Loss: 5.334, avg. samples / sec: 976.59
Iteration:   3480, Loss function: 5.251, Average Loss: 5.330, avg. samples / sec: 977.70
Iteration:   3500, Loss function: 5.308, Average Loss: 5.326, avg. samples / sec: 972.74
Iteration:   3520, Loss function: 5.109, Average Loss: 5.323, avg. samples / sec: 991.01
Iteration:   3540, Loss function: 4.967, Average Loss: 5.318, avg. samples / sec: 953.64
Iteration:   3560, Loss function: 4.970, Average Loss: 5.315, avg. samples / sec: 976.61
Iteration:   3580, Loss function: 5.060, Average Loss: 5.310, avg. samples / sec: 983.04
Iteration:   3600, Loss function: 5.231, Average Loss: 5.304, avg. samples / sec: 980.34
Iteration:   3620, Loss function: 4.849, Average Loss: 5.299, avg. samples / sec: 976.98
Iteration:   3640, Loss function: 4.731, Average Loss: 5.294, avg. samples / sec: 969.49
Iteration:   3660, Loss function: 5.053, Average Loss: 5.289, avg. samples / sec: 985.41
Iteration:   3680, Loss function: 5.253, Average Loss: 5.283, avg. samples / sec: 949.19
Iteration:   3700, Loss function: 5.016, Average Loss: 5.279, avg. samples / sec: 974.18
Iteration:   3720, Loss function: 4.798, Average Loss: 5.273, avg. samples / sec: 961.28
Iteration:   3740, Loss function: 5.211, Average Loss: 5.268, avg. samples / sec: 987.66
Iteration:   3760, Loss function: 5.087, Average Loss: 5.264, avg. samples / sec: 898.22
Iteration:   3780, Loss function: 5.028, Average Loss: 5.260, avg. samples / sec: 905.07
Iteration:   3800, Loss function: 5.024, Average Loss: 5.257, avg. samples / sec: 884.53
Iteration:   3820, Loss function: 5.237, Average Loss: 5.253, avg. samples / sec: 966.68
Iteration:   3840, Loss function: 4.798, Average Loss: 5.248, avg. samples / sec: 946.43
Iteration:   3860, Loss function: 4.790, Average Loss: 5.244, avg. samples / sec: 980.96
Iteration:   3880, Loss function: 4.990, Average Loss: 5.238, avg. samples / sec: 917.67
Iteration:   3900, Loss function: 5.113, Average Loss: 5.233, avg. samples / sec: 966.39
Iteration:   3920, Loss function: 5.016, Average Loss: 5.227, avg. samples / sec: 982.93
Iteration:   3940, Loss function: 5.030, Average Loss: 5.222, avg. samples / sec: 979.44
Iteration:   3960, Loss function: 4.785, Average Loss: 5.218, avg. samples / sec: 979.38
Iteration:   3980, Loss function: 4.901, Average Loss: 5.213, avg. samples / sec: 977.41
Iteration:   4000, Loss function: 5.173, Average Loss: 5.209, avg. samples / sec: 950.31
Iteration:   4020, Loss function: 4.887, Average Loss: 5.204, avg. samples / sec: 940.67
Iteration:   4040, Loss function: 5.009, Average Loss: 5.201, avg. samples / sec: 985.14
Iteration:   4060, Loss function: 5.086, Average Loss: 5.197, avg. samples / sec: 976.38
Iteration:   4080, Loss function: 4.983, Average Loss: 5.192, avg. samples / sec: 984.51
Iteration:   4100, Loss function: 5.146, Average Loss: 5.189, avg. samples / sec: 976.66
:::MLLOG {"namespace": "", "time_ms": 1639762035047, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762035049, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.857, Average Loss: 5.184, avg. samples / sec: 975.86
Iteration:   4140, Loss function: 4.912, Average Loss: 5.179, avg. samples / sec: 930.89
Iteration:   4160, Loss function: 4.989, Average Loss: 5.172, avg. samples / sec: 946.26
Iteration:   4180, Loss function: 5.183, Average Loss: 5.167, avg. samples / sec: 984.18
Iteration:   4200, Loss function: 4.958, Average Loss: 5.163, avg. samples / sec: 969.64
Iteration:   4220, Loss function: 4.869, Average Loss: 5.158, avg. samples / sec: 985.45
Iteration:   4240, Loss function: 4.895, Average Loss: 5.152, avg. samples / sec: 886.28
Iteration:   4260, Loss function: 5.102, Average Loss: 5.148, avg. samples / sec: 986.00
Iteration:   4280, Loss function: 4.906, Average Loss: 5.143, avg. samples / sec: 981.73
Iteration:   4300, Loss function: 4.827, Average Loss: 5.137, avg. samples / sec: 978.14
Iteration:   4320, Loss function: 4.707, Average Loss: 5.133, avg. samples / sec: 981.43
Iteration:   4340, Loss function: 4.824, Average Loss: 5.129, avg. samples / sec: 973.03
Iteration:   4360, Loss function: 4.938, Average Loss: 5.124, avg. samples / sec: 983.18
Iteration:   4380, Loss function: 5.091, Average Loss: 5.120, avg. samples / sec: 934.20
Iteration:   4400, Loss function: 4.818, Average Loss: 5.115, avg. samples / sec: 981.88
Iteration:   4420, Loss function: 4.876, Average Loss: 5.110, avg. samples / sec: 928.05
Iteration:   4440, Loss function: 4.981, Average Loss: 5.105, avg. samples / sec: 960.85
Iteration:   4460, Loss function: 4.883, Average Loss: 5.101, avg. samples / sec: 968.82
Iteration:   4480, Loss function: 4.932, Average Loss: 5.098, avg. samples / sec: 953.03
Iteration:   4500, Loss function: 4.878, Average Loss: 5.094, avg. samples / sec: 967.17
Iteration:   4520, Loss function: 4.665, Average Loss: 5.090, avg. samples / sec: 974.40
Iteration:   4540, Loss function: 5.020, Average Loss: 5.084, avg. samples / sec: 980.14
Iteration:   4560, Loss function: 4.658, Average Loss: 5.080, avg. samples / sec: 904.71
Iteration:   4580, Loss function: 4.661, Average Loss: 5.077, avg. samples / sec: 973.29
Iteration:   4600, Loss function: 4.922, Average Loss: 5.074, avg. samples / sec: 963.79
Iteration:   4620, Loss function: 4.767, Average Loss: 5.069, avg. samples / sec: 969.31
Iteration:   4640, Loss function: 4.798, Average Loss: 5.065, avg. samples / sec: 983.80
Iteration:   4660, Loss function: 4.720, Average Loss: 5.062, avg. samples / sec: 979.32
Iteration:   4680, Loss function: 5.090, Average Loss: 5.058, avg. samples / sec: 972.31
Iteration:   4700, Loss function: 4.727, Average Loss: 5.054, avg. samples / sec: 984.97
Iteration:   4720, Loss function: 4.803, Average Loss: 5.049, avg. samples / sec: 948.61
Iteration:   4740, Loss function: 4.758, Average Loss: 5.045, avg. samples / sec: 976.37
Iteration:   4760, Loss function: 4.675, Average Loss: 5.042, avg. samples / sec: 973.85
Iteration:   4780, Loss function: 5.068, Average Loss: 5.039, avg. samples / sec: 984.55
Iteration:   4800, Loss function: 4.787, Average Loss: 5.035, avg. samples / sec: 971.59
Iteration:   4820, Loss function: 4.805, Average Loss: 5.032, avg. samples / sec: 976.34
Iteration:   4840, Loss function: 5.172, Average Loss: 5.029, avg. samples / sec: 989.01
Iteration:   4860, Loss function: 4.659, Average Loss: 5.025, avg. samples / sec: 977.28
Iteration:   4880, Loss function: 5.061, Average Loss: 5.021, avg. samples / sec: 986.15
Iteration:   4900, Loss function: 4.683, Average Loss: 5.018, avg. samples / sec: 912.40
Iteration:   4920, Loss function: 4.760, Average Loss: 5.014, avg. samples / sec: 977.88
Iteration:   4940, Loss function: 4.969, Average Loss: 5.010, avg. samples / sec: 941.16
Iteration:   4960, Loss function: 4.651, Average Loss: 5.007, avg. samples / sec: 982.87
Iteration:   4980, Loss function: 4.422, Average Loss: 5.001, avg. samples / sec: 966.18
Iteration:   5000, Loss function: 4.815, Average Loss: 4.997, avg. samples / sec: 966.32
Iteration:   5020, Loss function: 5.151, Average Loss: 4.994, avg. samples / sec: 963.58
Iteration:   5040, Loss function: 4.861, Average Loss: 4.990, avg. samples / sec: 911.31
Iteration:   5060, Loss function: 4.621, Average Loss: 4.987, avg. samples / sec: 917.58
Iteration:   5080, Loss function: 4.432, Average Loss: 4.983, avg. samples / sec: 984.47
Iteration:   5100, Loss function: 4.771, Average Loss: 4.979, avg. samples / sec: 923.84
Iteration:   5120, Loss function: 4.683, Average Loss: 4.976, avg. samples / sec: 936.76
Iteration:   5140, Loss function: 4.900, Average Loss: 4.973, avg. samples / sec: 990.33
:::MLLOG {"namespace": "", "time_ms": 1639762156926, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.81 s
:::MLLOG {"namespace": "", "time_ms": 1639762189830, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762189898, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762189898, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.76s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.861, Average Loss: 4.968, avg. samples / sec: 64.55
DONE (t=2.78s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10958
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21779
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10184
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19386
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20467
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10958 AP goal: 0.10000
Iteration:   5180, Loss function: 4.899, Average Loss: 4.963, avg. samples / sec: 1010.85
:::MLLOG {"namespace": "", "time_ms": 1639762194149, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194150, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10957672620234912, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194150, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762194343, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762195
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:29:55 PM'
START TIMING RUN WAS 2021-12-17 05:18:27 PM
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:27 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:29:55 PM'
ENDING TIMING RUN AT 2021-12-17 05:29:55 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ result=688
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,688,nvidia,2021-12-17 05:18:27 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,688,nvidia,2021-12-17 05:18:27 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
