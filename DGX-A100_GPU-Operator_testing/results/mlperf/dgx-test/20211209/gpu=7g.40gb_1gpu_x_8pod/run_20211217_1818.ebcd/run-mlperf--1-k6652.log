8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026'
Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761507
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:27 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:27 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-18-09 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ set +x
Fri Dec 17 17:18:27 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-k6652 to the sync file ...
run-mlperf--1-k6652 Found 7 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
     2	run-mlperf--1-zcmvv
     3	run-mlperf--1-kcdh9
     4	run-mlperf--1-5dr8m
     5	run-mlperf--1-2997d
     6	run-mlperf--1-9qhrl
     7	run-mlperf--1-k6652
Fri Dec 17 17:18:32 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514091, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514464, "event_type": "POINT_IN_TIME", "key": "seed", "value": 263888552, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 263888552
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761516730, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516730, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540960, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540960, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761543140, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543141, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543482, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543483, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543484, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.610, Average Loss: 0.023, avg. samples / sec: 4.31
Iteration:     20, Loss function: 21.078, Average Loss: 0.454, avg. samples / sec: 790.83
Iteration:     40, Loss function: 20.760, Average Loss: 0.856, avg. samples / sec: 854.81
Iteration:     60, Loss function: 20.150, Average Loss: 1.246, avg. samples / sec: 861.65
Iteration:     80, Loss function: 19.667, Average Loss: 1.617, avg. samples / sec: 932.46
Iteration:    100, Loss function: 14.585, Average Loss: 1.931, avg. samples / sec: 902.56
Iteration:    120, Loss function: 10.374, Average Loss: 2.125, avg. samples / sec: 665.60
Iteration:    140, Loss function: 9.480, Average Loss: 2.275, avg. samples / sec: 940.87
Iteration:    160, Loss function: 8.785, Average Loss: 2.411, avg. samples / sec: 907.38
Iteration:    180, Loss function: 8.850, Average Loss: 2.539, avg. samples / sec: 955.70
Iteration:    200, Loss function: 8.589, Average Loss: 2.663, avg. samples / sec: 911.14
Iteration:    220, Loss function: 8.314, Average Loss: 2.783, avg. samples / sec: 878.94
Iteration:    240, Loss function: 8.641, Average Loss: 2.900, avg. samples / sec: 890.05
Iteration:    260, Loss function: 8.993, Average Loss: 3.019, avg. samples / sec: 891.16
Iteration:    280, Loss function: 8.618, Average Loss: 3.134, avg. samples / sec: 857.70
Iteration:    300, Loss function: 8.388, Average Loss: 3.239, avg. samples / sec: 937.81
Iteration:    320, Loss function: 8.346, Average Loss: 3.340, avg. samples / sec: 913.01
Iteration:    340, Loss function: 8.165, Average Loss: 3.437, avg. samples / sec: 914.44
Iteration:    360, Loss function: 8.056, Average Loss: 3.529, avg. samples / sec: 932.06
Iteration:    380, Loss function: 8.121, Average Loss: 3.620, avg. samples / sec: 898.07
Iteration:    400, Loss function: 7.863, Average Loss: 3.705, avg. samples / sec: 927.16
Iteration:    420, Loss function: 7.599, Average Loss: 3.789, avg. samples / sec: 951.30
Iteration:    440, Loss function: 7.899, Average Loss: 3.870, avg. samples / sec: 947.55
Iteration:    460, Loss function: 7.835, Average Loss: 3.947, avg. samples / sec: 923.18
Iteration:    480, Loss function: 7.433, Average Loss: 4.020, avg. samples / sec: 954.79
Iteration:    500, Loss function: 7.645, Average Loss: 4.091, avg. samples / sec: 939.18
Iteration:    520, Loss function: 7.557, Average Loss: 4.158, avg. samples / sec: 911.67
Iteration:    540, Loss function: 7.482, Average Loss: 4.226, avg. samples / sec: 919.67
Iteration:    560, Loss function: 7.330, Average Loss: 4.290, avg. samples / sec: 962.85
Iteration:    580, Loss function: 7.134, Average Loss: 4.351, avg. samples / sec: 932.74
Iteration:    600, Loss function: 7.332, Average Loss: 4.411, avg. samples / sec: 901.69
Iteration:    620, Loss function: 6.924, Average Loss: 4.467, avg. samples / sec: 797.17
Iteration:    640, Loss function: 6.818, Average Loss: 4.522, avg. samples / sec: 974.08
Iteration:    660, Loss function: 7.060, Average Loss: 4.575, avg. samples / sec: 942.28
Iteration:    680, Loss function: 7.204, Average Loss: 4.625, avg. samples / sec: 933.13
Iteration:    700, Loss function: 6.868, Average Loss: 4.673, avg. samples / sec: 960.55
Iteration:    720, Loss function: 6.924, Average Loss: 4.722, avg. samples / sec: 888.16
Iteration:    740, Loss function: 6.743, Average Loss: 4.767, avg. samples / sec: 945.37
Iteration:    760, Loss function: 7.036, Average Loss: 4.811, avg. samples / sec: 930.50
Iteration:    780, Loss function: 6.758, Average Loss: 4.853, avg. samples / sec: 935.23
Iteration:    800, Loss function: 7.109, Average Loss: 4.893, avg. samples / sec: 990.64
Iteration:    820, Loss function: 6.726, Average Loss: 4.931, avg. samples / sec: 932.87
Iteration:    840, Loss function: 6.613, Average Loss: 4.967, avg. samples / sec: 975.58
Iteration:    860, Loss function: 6.768, Average Loss: 5.003, avg. samples / sec: 921.96
Iteration:    880, Loss function: 6.643, Average Loss: 5.036, avg. samples / sec: 958.24
Iteration:    900, Loss function: 6.801, Average Loss: 5.067, avg. samples / sec: 973.52
Iteration:    920, Loss function: 6.660, Average Loss: 5.096, avg. samples / sec: 982.42
Iteration:    940, Loss function: 6.551, Average Loss: 5.125, avg. samples / sec: 956.29
Iteration:    960, Loss function: 6.335, Average Loss: 5.153, avg. samples / sec: 914.29
Iteration:    980, Loss function: 6.487, Average Loss: 5.180, avg. samples / sec: 976.92
Iteration:   1000, Loss function: 6.488, Average Loss: 5.205, avg. samples / sec: 979.45
Iteration:   1020, Loss function: 6.409, Average Loss: 5.229, avg. samples / sec: 984.95
:::MLLOG {"namespace": "", "time_ms": 1639761671370, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761671371, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.488, Average Loss: 5.253, avg. samples / sec: 968.81
Iteration:   1060, Loss function: 6.225, Average Loss: 5.276, avg. samples / sec: 905.81
Iteration:   1080, Loss function: 6.526, Average Loss: 5.297, avg. samples / sec: 969.21
Iteration:   1100, Loss function: 6.158, Average Loss: 5.317, avg. samples / sec: 996.51
Iteration:   1120, Loss function: 6.200, Average Loss: 5.337, avg. samples / sec: 990.83
Iteration:   1140, Loss function: 6.299, Average Loss: 5.356, avg. samples / sec: 967.85
Iteration:   1160, Loss function: 6.150, Average Loss: 5.374, avg. samples / sec: 956.67
Iteration:   1180, Loss function: 6.131, Average Loss: 5.391, avg. samples / sec: 926.32
Iteration:   1200, Loss function: 6.231, Average Loss: 5.407, avg. samples / sec: 980.35
Iteration:   1220, Loss function: 6.136, Average Loss: 5.423, avg. samples / sec: 973.64
Iteration:   1240, Loss function: 6.003, Average Loss: 5.435, avg. samples / sec: 990.50
Iteration:   1260, Loss function: 6.099, Average Loss: 5.448, avg. samples / sec: 924.36
Iteration:   1280, Loss function: 5.893, Average Loss: 5.460, avg. samples / sec: 951.95
Iteration:   1300, Loss function: 6.124, Average Loss: 5.473, avg. samples / sec: 966.03
Iteration:   1320, Loss function: 6.110, Average Loss: 5.485, avg. samples / sec: 977.75
Iteration:   1340, Loss function: 5.854, Average Loss: 5.495, avg. samples / sec: 928.79
Iteration:   1360, Loss function: 5.977, Average Loss: 5.505, avg. samples / sec: 882.33
Iteration:   1380, Loss function: 6.237, Average Loss: 5.515, avg. samples / sec: 964.24
Iteration:   1400, Loss function: 6.128, Average Loss: 5.524, avg. samples / sec: 951.68
Iteration:   1420, Loss function: 5.950, Average Loss: 5.531, avg. samples / sec: 918.38
Iteration:   1440, Loss function: 6.339, Average Loss: 5.540, avg. samples / sec: 973.17
Iteration:   1460, Loss function: 6.058, Average Loss: 5.549, avg. samples / sec: 980.81
Iteration:   1480, Loss function: 5.934, Average Loss: 5.557, avg. samples / sec: 987.13
Iteration:   1500, Loss function: 6.239, Average Loss: 5.566, avg. samples / sec: 986.23
Iteration:   1520, Loss function: 6.151, Average Loss: 5.572, avg. samples / sec: 938.19
Iteration:   1540, Loss function: 5.923, Average Loss: 5.577, avg. samples / sec: 959.16
Iteration:   1560, Loss function: 5.656, Average Loss: 5.582, avg. samples / sec: 964.10
Iteration:   1580, Loss function: 5.767, Average Loss: 5.588, avg. samples / sec: 976.20
Iteration:   1600, Loss function: 6.122, Average Loss: 5.594, avg. samples / sec: 997.55
Iteration:   1620, Loss function: 5.752, Average Loss: 5.600, avg. samples / sec: 932.79
Iteration:   1640, Loss function: 5.979, Average Loss: 5.604, avg. samples / sec: 929.22
Iteration:   1660, Loss function: 5.924, Average Loss: 5.609, avg. samples / sec: 958.44
Iteration:   1680, Loss function: 5.702, Average Loss: 5.612, avg. samples / sec: 926.35
Iteration:   1700, Loss function: 5.601, Average Loss: 5.616, avg. samples / sec: 897.42
Iteration:   1720, Loss function: 5.821, Average Loss: 5.619, avg. samples / sec: 944.20
Iteration:   1740, Loss function: 5.861, Average Loss: 5.622, avg. samples / sec: 965.82
Iteration:   1760, Loss function: 5.433, Average Loss: 5.624, avg. samples / sec: 980.31
Iteration:   1780, Loss function: 5.546, Average Loss: 5.625, avg. samples / sec: 960.19
Iteration:   1800, Loss function: 5.435, Average Loss: 5.627, avg. samples / sec: 899.80
Iteration:   1820, Loss function: 6.019, Average Loss: 5.628, avg. samples / sec: 972.64
Iteration:   1840, Loss function: 6.031, Average Loss: 5.629, avg. samples / sec: 975.71
Iteration:   1860, Loss function: 5.581, Average Loss: 5.629, avg. samples / sec: 957.17
Iteration:   1880, Loss function: 5.779, Average Loss: 5.630, avg. samples / sec: 974.76
Iteration:   1900, Loss function: 5.888, Average Loss: 5.632, avg. samples / sec: 987.73
Iteration:   1920, Loss function: 5.795, Average Loss: 5.633, avg. samples / sec: 986.86
Iteration:   1940, Loss function: 5.911, Average Loss: 5.632, avg. samples / sec: 961.76
Iteration:   1960, Loss function: 5.556, Average Loss: 5.632, avg. samples / sec: 992.35
Iteration:   1980, Loss function: 5.558, Average Loss: 5.631, avg. samples / sec: 974.14
Iteration:   2000, Loss function: 5.599, Average Loss: 5.630, avg. samples / sec: 872.59
Iteration:   2020, Loss function: 5.566, Average Loss: 5.629, avg. samples / sec: 937.27
Iteration:   2040, Loss function: 5.615, Average Loss: 5.628, avg. samples / sec: 971.57
:::MLLOG {"namespace": "", "time_ms": 1639761794014, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794016, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.550, Average Loss: 5.626, avg. samples / sec: 967.77
Iteration:   2080, Loss function: 5.197, Average Loss: 5.624, avg. samples / sec: 983.47
Iteration:   2100, Loss function: 5.581, Average Loss: 5.622, avg. samples / sec: 924.53
Iteration:   2120, Loss function: 5.293, Average Loss: 5.619, avg. samples / sec: 949.00
Iteration:   2140, Loss function: 5.441, Average Loss: 5.616, avg. samples / sec: 975.82
Iteration:   2160, Loss function: 5.517, Average Loss: 5.614, avg. samples / sec: 983.81
Iteration:   2180, Loss function: 5.275, Average Loss: 5.612, avg. samples / sec: 988.08
Iteration:   2200, Loss function: 5.551, Average Loss: 5.609, avg. samples / sec: 981.66
Iteration:   2220, Loss function: 5.564, Average Loss: 5.607, avg. samples / sec: 992.59
Iteration:   2240, Loss function: 5.503, Average Loss: 5.605, avg. samples / sec: 919.26
Iteration:   2260, Loss function: 5.431, Average Loss: 5.602, avg. samples / sec: 949.55
Iteration:   2280, Loss function: 5.199, Average Loss: 5.599, avg. samples / sec: 879.92
Iteration:   2300, Loss function: 5.100, Average Loss: 5.595, avg. samples / sec: 957.54
Iteration:   2320, Loss function: 5.387, Average Loss: 5.592, avg. samples / sec: 937.12
Iteration:   2340, Loss function: 5.433, Average Loss: 5.589, avg. samples / sec: 934.73
Iteration:   2360, Loss function: 5.497, Average Loss: 5.587, avg. samples / sec: 950.31
Iteration:   2380, Loss function: 5.256, Average Loss: 5.584, avg. samples / sec: 936.95
Iteration:   2400, Loss function: 5.526, Average Loss: 5.580, avg. samples / sec: 924.72
Iteration:   2420, Loss function: 5.436, Average Loss: 5.577, avg. samples / sec: 918.94
Iteration:   2440, Loss function: 5.452, Average Loss: 5.574, avg. samples / sec: 941.77
Iteration:   2460, Loss function: 5.241, Average Loss: 5.570, avg. samples / sec: 886.14
Iteration:   2480, Loss function: 5.298, Average Loss: 5.566, avg. samples / sec: 910.15
Iteration:   2500, Loss function: 5.508, Average Loss: 5.562, avg. samples / sec: 966.50
Iteration:   2520, Loss function: 5.249, Average Loss: 5.555, avg. samples / sec: 971.43
Iteration:   2540, Loss function: 5.413, Average Loss: 5.552, avg. samples / sec: 923.77
Iteration:   2560, Loss function: 5.382, Average Loss: 5.549, avg. samples / sec: 931.47
Iteration:   2580, Loss function: 5.313, Average Loss: 5.546, avg. samples / sec: 985.45
Iteration:   2600, Loss function: 5.261, Average Loss: 5.542, avg. samples / sec: 969.81
Iteration:   2620, Loss function: 5.609, Average Loss: 5.537, avg. samples / sec: 913.59
Iteration:   2640, Loss function: 5.292, Average Loss: 5.535, avg. samples / sec: 980.55
Iteration:   2660, Loss function: 5.217, Average Loss: 5.531, avg. samples / sec: 926.74
Iteration:   2680, Loss function: 5.195, Average Loss: 5.527, avg. samples / sec: 940.23
Iteration:   2700, Loss function: 5.191, Average Loss: 5.523, avg. samples / sec: 973.15
Iteration:   2720, Loss function: 5.284, Average Loss: 5.519, avg. samples / sec: 925.19
Iteration:   2740, Loss function: 5.029, Average Loss: 5.514, avg. samples / sec: 983.63
Iteration:   2760, Loss function: 4.994, Average Loss: 5.509, avg. samples / sec: 983.37
Iteration:   2780, Loss function: 5.444, Average Loss: 5.505, avg. samples / sec: 881.18
Iteration:   2800, Loss function: 5.284, Average Loss: 5.501, avg. samples / sec: 950.42
Iteration:   2820, Loss function: 5.513, Average Loss: 5.497, avg. samples / sec: 943.77
Iteration:   2840, Loss function: 5.187, Average Loss: 5.493, avg. samples / sec: 955.42
Iteration:   2860, Loss function: 5.082, Average Loss: 5.488, avg. samples / sec: 975.12
Iteration:   2880, Loss function: 5.125, Average Loss: 5.484, avg. samples / sec: 980.58
Iteration:   2900, Loss function: 5.063, Average Loss: 5.479, avg. samples / sec: 944.81
Iteration:   2920, Loss function: 5.000, Average Loss: 5.473, avg. samples / sec: 986.67
Iteration:   2940, Loss function: 5.005, Average Loss: 5.469, avg. samples / sec: 848.95
Iteration:   2960, Loss function: 5.318, Average Loss: 5.464, avg. samples / sec: 962.72
Iteration:   2980, Loss function: 5.262, Average Loss: 5.461, avg. samples / sec: 982.24
Iteration:   3000, Loss function: 5.199, Average Loss: 5.456, avg. samples / sec: 984.32
Iteration:   3020, Loss function: 5.427, Average Loss: 5.450, avg. samples / sec: 947.99
Iteration:   3040, Loss function: 5.311, Average Loss: 5.445, avg. samples / sec: 930.86
Iteration:   3060, Loss function: 5.020, Average Loss: 5.440, avg. samples / sec: 951.98
Iteration:   3080, Loss function: 5.016, Average Loss: 5.435, avg. samples / sec: 887.29
:::MLLOG {"namespace": "", "time_ms": 1639761917917, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.314, Average Loss: 5.431, avg. samples / sec: 925.06
Iteration:   3120, Loss function: 4.983, Average Loss: 5.424, avg. samples / sec: 981.10
Iteration:   3140, Loss function: 5.065, Average Loss: 5.419, avg. samples / sec: 938.02
Iteration:   3160, Loss function: 5.496, Average Loss: 5.413, avg. samples / sec: 985.77
Iteration:   3180, Loss function: 5.164, Average Loss: 5.409, avg. samples / sec: 990.80
Iteration:   3200, Loss function: 5.324, Average Loss: 5.404, avg. samples / sec: 939.75
Iteration:   3220, Loss function: 5.264, Average Loss: 5.399, avg. samples / sec: 860.37
Iteration:   3240, Loss function: 5.226, Average Loss: 5.394, avg. samples / sec: 933.67
Iteration:   3260, Loss function: 5.050, Average Loss: 5.388, avg. samples / sec: 945.69
Iteration:   3280, Loss function: 4.686, Average Loss: 5.382, avg. samples / sec: 980.66
Iteration:   3300, Loss function: 4.819, Average Loss: 5.376, avg. samples / sec: 976.70
Iteration:   3320, Loss function: 4.787, Average Loss: 5.371, avg. samples / sec: 929.08
Iteration:   3340, Loss function: 5.140, Average Loss: 5.367, avg. samples / sec: 993.07
Iteration:   3360, Loss function: 5.138, Average Loss: 5.360, avg. samples / sec: 954.47
Iteration:   3380, Loss function: 5.366, Average Loss: 5.354, avg. samples / sec: 960.74
Iteration:   3400, Loss function: 4.850, Average Loss: 5.348, avg. samples / sec: 930.35
Iteration:   3420, Loss function: 5.093, Average Loss: 5.343, avg. samples / sec: 891.96
Iteration:   3440, Loss function: 4.887, Average Loss: 5.338, avg. samples / sec: 794.59
Iteration:   3460, Loss function: 5.318, Average Loss: 5.334, avg. samples / sec: 923.58
Iteration:   3480, Loss function: 5.118, Average Loss: 5.329, avg. samples / sec: 968.63
Iteration:   3500, Loss function: 5.166, Average Loss: 5.325, avg. samples / sec: 977.47
Iteration:   3520, Loss function: 5.093, Average Loss: 5.322, avg. samples / sec: 987.76
Iteration:   3540, Loss function: 4.892, Average Loss: 5.317, avg. samples / sec: 938.06
Iteration:   3560, Loss function: 4.921, Average Loss: 5.314, avg. samples / sec: 982.21
Iteration:   3580, Loss function: 5.054, Average Loss: 5.308, avg. samples / sec: 960.28
Iteration:   3600, Loss function: 5.096, Average Loss: 5.302, avg. samples / sec: 930.24
Iteration:   3620, Loss function: 4.730, Average Loss: 5.297, avg. samples / sec: 952.68
Iteration:   3640, Loss function: 4.993, Average Loss: 5.292, avg. samples / sec: 960.68
Iteration:   3660, Loss function: 4.956, Average Loss: 5.287, avg. samples / sec: 980.22
Iteration:   3680, Loss function: 5.336, Average Loss: 5.281, avg. samples / sec: 966.39
Iteration:   3700, Loss function: 4.978, Average Loss: 5.276, avg. samples / sec: 933.38
Iteration:   3720, Loss function: 4.866, Average Loss: 5.270, avg. samples / sec: 979.58
Iteration:   3740, Loss function: 5.262, Average Loss: 5.266, avg. samples / sec: 973.01
Iteration:   3760, Loss function: 4.956, Average Loss: 5.262, avg. samples / sec: 984.45
Iteration:   3780, Loss function: 5.057, Average Loss: 5.258, avg. samples / sec: 960.36
Iteration:   3800, Loss function: 5.152, Average Loss: 5.255, avg. samples / sec: 974.99
Iteration:   3820, Loss function: 5.410, Average Loss: 5.251, avg. samples / sec: 956.03
Iteration:   3840, Loss function: 4.915, Average Loss: 5.246, avg. samples / sec: 978.37
Iteration:   3860, Loss function: 4.958, Average Loss: 5.241, avg. samples / sec: 990.97
Iteration:   3880, Loss function: 5.024, Average Loss: 5.236, avg. samples / sec: 933.01
Iteration:   3900, Loss function: 5.076, Average Loss: 5.232, avg. samples / sec: 939.85
Iteration:   3920, Loss function: 5.071, Average Loss: 5.226, avg. samples / sec: 988.95
Iteration:   3940, Loss function: 4.975, Average Loss: 5.221, avg. samples / sec: 898.26
Iteration:   3960, Loss function: 4.963, Average Loss: 5.216, avg. samples / sec: 959.42
Iteration:   3980, Loss function: 4.820, Average Loss: 5.212, avg. samples / sec: 980.80
Iteration:   4000, Loss function: 5.273, Average Loss: 5.208, avg. samples / sec: 985.67
Iteration:   4020, Loss function: 5.065, Average Loss: 5.202, avg. samples / sec: 997.75
Iteration:   4040, Loss function: 5.045, Average Loss: 5.199, avg. samples / sec: 944.31
Iteration:   4060, Loss function: 5.135, Average Loss: 5.195, avg. samples / sec: 955.20
Iteration:   4080, Loss function: 5.227, Average Loss: 5.191, avg. samples / sec: 956.70
Iteration:   4100, Loss function: 5.168, Average Loss: 5.188, avg. samples / sec: 988.77
:::MLLOG {"namespace": "", "time_ms": 1639762040904, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762040906, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.066, Average Loss: 5.185, avg. samples / sec: 967.99
Iteration:   4140, Loss function: 4.964, Average Loss: 5.179, avg. samples / sec: 927.03
Iteration:   4160, Loss function: 4.839, Average Loss: 5.171, avg. samples / sec: 930.90
Iteration:   4180, Loss function: 4.884, Average Loss: 5.165, avg. samples / sec: 982.38
Iteration:   4200, Loss function: 5.061, Average Loss: 5.161, avg. samples / sec: 968.30
Iteration:   4220, Loss function: 4.814, Average Loss: 5.156, avg. samples / sec: 899.86
Iteration:   4240, Loss function: 4.983, Average Loss: 5.151, avg. samples / sec: 950.47
Iteration:   4260, Loss function: 5.058, Average Loss: 5.146, avg. samples / sec: 911.68
Iteration:   4280, Loss function: 4.902, Average Loss: 5.139, avg. samples / sec: 991.79
Iteration:   4300, Loss function: 4.922, Average Loss: 5.133, avg. samples / sec: 938.45
Iteration:   4320, Loss function: 4.807, Average Loss: 5.129, avg. samples / sec: 924.31
Iteration:   4340, Loss function: 4.631, Average Loss: 5.124, avg. samples / sec: 987.45
Iteration:   4360, Loss function: 4.816, Average Loss: 5.119, avg. samples / sec: 972.27
Iteration:   4380, Loss function: 4.910, Average Loss: 5.115, avg. samples / sec: 886.51
Iteration:   4400, Loss function: 5.010, Average Loss: 5.110, avg. samples / sec: 923.41
Iteration:   4420, Loss function: 4.921, Average Loss: 5.105, avg. samples / sec: 972.69
Iteration:   4440, Loss function: 4.885, Average Loss: 5.100, avg. samples / sec: 964.52
Iteration:   4460, Loss function: 5.002, Average Loss: 5.096, avg. samples / sec: 962.27
Iteration:   4480, Loss function: 5.107, Average Loss: 5.093, avg. samples / sec: 958.07
Iteration:   4500, Loss function: 4.816, Average Loss: 5.090, avg. samples / sec: 965.29
Iteration:   4520, Loss function: 4.861, Average Loss: 5.086, avg. samples / sec: 962.91
Iteration:   4540, Loss function: 5.134, Average Loss: 5.082, avg. samples / sec: 894.59
Iteration:   4560, Loss function: 4.772, Average Loss: 5.077, avg. samples / sec: 997.54
Iteration:   4580, Loss function: 4.692, Average Loss: 5.074, avg. samples / sec: 983.02
Iteration:   4600, Loss function: 4.760, Average Loss: 5.070, avg. samples / sec: 902.68
Iteration:   4620, Loss function: 4.885, Average Loss: 5.065, avg. samples / sec: 965.75
Iteration:   4640, Loss function: 4.743, Average Loss: 5.060, avg. samples / sec: 925.05
Iteration:   4660, Loss function: 4.780, Average Loss: 5.056, avg. samples / sec: 975.33
Iteration:   4680, Loss function: 5.332, Average Loss: 5.051, avg. samples / sec: 925.27
Iteration:   4700, Loss function: 4.521, Average Loss: 5.048, avg. samples / sec: 920.83
Iteration:   4720, Loss function: 4.833, Average Loss: 5.043, avg. samples / sec: 988.88
Iteration:   4740, Loss function: 4.818, Average Loss: 5.039, avg. samples / sec: 983.03
Iteration:   4760, Loss function: 4.544, Average Loss: 5.036, avg. samples / sec: 961.02
Iteration:   4780, Loss function: 4.943, Average Loss: 5.031, avg. samples / sec: 962.14
Iteration:   4800, Loss function: 5.096, Average Loss: 5.028, avg. samples / sec: 976.44
Iteration:   4820, Loss function: 4.854, Average Loss: 5.025, avg. samples / sec: 981.82
Iteration:   4840, Loss function: 5.060, Average Loss: 5.022, avg. samples / sec: 933.09
Iteration:   4860, Loss function: 4.677, Average Loss: 5.018, avg. samples / sec: 958.47
Iteration:   4880, Loss function: 5.157, Average Loss: 5.014, avg. samples / sec: 927.63
Iteration:   4900, Loss function: 4.578, Average Loss: 5.009, avg. samples / sec: 949.98
Iteration:   4920, Loss function: 4.788, Average Loss: 5.006, avg. samples / sec: 983.20
Iteration:   4940, Loss function: 4.858, Average Loss: 5.001, avg. samples / sec: 942.84
Iteration:   4960, Loss function: 4.567, Average Loss: 4.999, avg. samples / sec: 996.02
Iteration:   4980, Loss function: 4.800, Average Loss: 4.995, avg. samples / sec: 971.98
Iteration:   5000, Loss function: 4.899, Average Loss: 4.991, avg. samples / sec: 981.32
Iteration:   5020, Loss function: 5.099, Average Loss: 4.988, avg. samples / sec: 908.00
Iteration:   5040, Loss function: 4.792, Average Loss: 4.985, avg. samples / sec: 981.50
Iteration:   5060, Loss function: 4.784, Average Loss: 4.981, avg. samples / sec: 949.02
Iteration:   5080, Loss function: 4.607, Average Loss: 4.978, avg. samples / sec: 971.56
Iteration:   5100, Loss function: 4.819, Average Loss: 4.975, avg. samples / sec: 994.60
Iteration:   5120, Loss function: 4.680, Average Loss: 4.972, avg. samples / sec: 991.58
Iteration:   5140, Loss function: 4.773, Average Loss: 4.969, avg. samples / sec: 998.57
:::MLLOG {"namespace": "", "time_ms": 1639762163733, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 29.87 s
:::MLLOG {"namespace": "", "time_ms": 1639762193666, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762193715, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762193716, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.71s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.831, Average Loss: 4.964, avg. samples / sec: 70.59
Iteration:   5180, Loss function: 4.668, Average Loss: 4.959, avg. samples / sec: 993.63
DONE (t=3.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10679
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21706
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19091
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21191
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21191
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10679 AP goal: 0.10000
Iteration:   5200, Loss function: 4.668, Average Loss: 4.954, avg. samples / sec: 983.71
:::MLLOG {"namespace": "", "time_ms": 1639762200315, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200316, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10678552996916903, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200316, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200569, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:30:02 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:30:02 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761514091, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761514464, "event_type": "POINT_IN_TIME", "key": "seed", "value": 263888552, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 263888552
:::MLLOG {"namespace": "", "time_ms": 1639761516730, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761516730, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761516734, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761516735, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761540960, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761540960, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761543140, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761543141, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761543482, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761543483, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761543484, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.610, Average Loss: 0.023, avg. samples / sec: 4.31
Iteration:     20, Loss function: 21.078, Average Loss: 0.454, avg. samples / sec: 790.83
Iteration:     40, Loss function: 20.760, Average Loss: 0.856, avg. samples / sec: 854.81
Iteration:     60, Loss function: 20.150, Average Loss: 1.246, avg. samples / sec: 861.65
Iteration:     80, Loss function: 19.667, Average Loss: 1.617, avg. samples / sec: 932.46
Iteration:    100, Loss function: 14.585, Average Loss: 1.931, avg. samples / sec: 902.56
Iteration:    120, Loss function: 10.374, Average Loss: 2.125, avg. samples / sec: 665.60
Iteration:    140, Loss function: 9.480, Average Loss: 2.275, avg. samples / sec: 940.87
Iteration:    160, Loss function: 8.785, Average Loss: 2.411, avg. samples / sec: 907.38
Iteration:    180, Loss function: 8.850, Average Loss: 2.539, avg. samples / sec: 955.70
Iteration:    200, Loss function: 8.589, Average Loss: 2.663, avg. samples / sec: 911.14
Iteration:    220, Loss function: 8.314, Average Loss: 2.783, avg. samples / sec: 878.94
Iteration:    240, Loss function: 8.641, Average Loss: 2.900, avg. samples / sec: 890.05
Iteration:    260, Loss function: 8.993, Average Loss: 3.019, avg. samples / sec: 891.16
Iteration:    280, Loss function: 8.618, Average Loss: 3.134, avg. samples / sec: 857.70
Iteration:    300, Loss function: 8.388, Average Loss: 3.239, avg. samples / sec: 937.81
Iteration:    320, Loss function: 8.346, Average Loss: 3.340, avg. samples / sec: 913.01
Iteration:    340, Loss function: 8.165, Average Loss: 3.437, avg. samples / sec: 914.44
Iteration:    360, Loss function: 8.056, Average Loss: 3.529, avg. samples / sec: 932.06
Iteration:    380, Loss function: 8.121, Average Loss: 3.620, avg. samples / sec: 898.07
Iteration:    400, Loss function: 7.863, Average Loss: 3.705, avg. samples / sec: 927.16
Iteration:    420, Loss function: 7.599, Average Loss: 3.789, avg. samples / sec: 951.30
Iteration:    440, Loss function: 7.899, Average Loss: 3.870, avg. samples / sec: 947.55
Iteration:    460, Loss function: 7.835, Average Loss: 3.947, avg. samples / sec: 923.18
Iteration:    480, Loss function: 7.433, Average Loss: 4.020, avg. samples / sec: 954.79
Iteration:    500, Loss function: 7.645, Average Loss: 4.091, avg. samples / sec: 939.18
Iteration:    520, Loss function: 7.557, Average Loss: 4.158, avg. samples / sec: 911.67
Iteration:    540, Loss function: 7.482, Average Loss: 4.226, avg. samples / sec: 919.67
Iteration:    560, Loss function: 7.330, Average Loss: 4.290, avg. samples / sec: 962.85
Iteration:    580, Loss function: 7.134, Average Loss: 4.351, avg. samples / sec: 932.74
Iteration:    600, Loss function: 7.332, Average Loss: 4.411, avg. samples / sec: 901.69
Iteration:    620, Loss function: 6.924, Average Loss: 4.467, avg. samples / sec: 797.17
Iteration:    640, Loss function: 6.818, Average Loss: 4.522, avg. samples / sec: 974.08
Iteration:    660, Loss function: 7.060, Average Loss: 4.575, avg. samples / sec: 942.28
Iteration:    680, Loss function: 7.204, Average Loss: 4.625, avg. samples / sec: 933.13
Iteration:    700, Loss function: 6.868, Average Loss: 4.673, avg. samples / sec: 960.55
Iteration:    720, Loss function: 6.924, Average Loss: 4.722, avg. samples / sec: 888.16
Iteration:    740, Loss function: 6.743, Average Loss: 4.767, avg. samples / sec: 945.37
Iteration:    760, Loss function: 7.036, Average Loss: 4.811, avg. samples / sec: 930.50
Iteration:    780, Loss function: 6.758, Average Loss: 4.853, avg. samples / sec: 935.23
Iteration:    800, Loss function: 7.109, Average Loss: 4.893, avg. samples / sec: 990.64
Iteration:    820, Loss function: 6.726, Average Loss: 4.931, avg. samples / sec: 932.87
Iteration:    840, Loss function: 6.613, Average Loss: 4.967, avg. samples / sec: 975.58
Iteration:    860, Loss function: 6.768, Average Loss: 5.003, avg. samples / sec: 921.96
Iteration:    880, Loss function: 6.643, Average Loss: 5.036, avg. samples / sec: 958.24
Iteration:    900, Loss function: 6.801, Average Loss: 5.067, avg. samples / sec: 973.52
Iteration:    920, Loss function: 6.660, Average Loss: 5.096, avg. samples / sec: 982.42
Iteration:    940, Loss function: 6.551, Average Loss: 5.125, avg. samples / sec: 956.29
Iteration:    960, Loss function: 6.335, Average Loss: 5.153, avg. samples / sec: 914.29
Iteration:    980, Loss function: 6.487, Average Loss: 5.180, avg. samples / sec: 976.92
Iteration:   1000, Loss function: 6.488, Average Loss: 5.205, avg. samples / sec: 979.45
Iteration:   1020, Loss function: 6.409, Average Loss: 5.229, avg. samples / sec: 984.95
:::MLLOG {"namespace": "", "time_ms": 1639761671370, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761671371, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.488, Average Loss: 5.253, avg. samples / sec: 968.81
Iteration:   1060, Loss function: 6.225, Average Loss: 5.276, avg. samples / sec: 905.81
Iteration:   1080, Loss function: 6.526, Average Loss: 5.297, avg. samples / sec: 969.21
Iteration:   1100, Loss function: 6.158, Average Loss: 5.317, avg. samples / sec: 996.51
Iteration:   1120, Loss function: 6.200, Average Loss: 5.337, avg. samples / sec: 990.83
Iteration:   1140, Loss function: 6.299, Average Loss: 5.356, avg. samples / sec: 967.85
Iteration:   1160, Loss function: 6.150, Average Loss: 5.374, avg. samples / sec: 956.67
Iteration:   1180, Loss function: 6.131, Average Loss: 5.391, avg. samples / sec: 926.32
Iteration:   1200, Loss function: 6.231, Average Loss: 5.407, avg. samples / sec: 980.35
Iteration:   1220, Loss function: 6.136, Average Loss: 5.423, avg. samples / sec: 973.64
Iteration:   1240, Loss function: 6.003, Average Loss: 5.435, avg. samples / sec: 990.50
Iteration:   1260, Loss function: 6.099, Average Loss: 5.448, avg. samples / sec: 924.36
Iteration:   1280, Loss function: 5.893, Average Loss: 5.460, avg. samples / sec: 951.95
Iteration:   1300, Loss function: 6.124, Average Loss: 5.473, avg. samples / sec: 966.03
Iteration:   1320, Loss function: 6.110, Average Loss: 5.485, avg. samples / sec: 977.75
Iteration:   1340, Loss function: 5.854, Average Loss: 5.495, avg. samples / sec: 928.79
Iteration:   1360, Loss function: 5.977, Average Loss: 5.505, avg. samples / sec: 882.33
Iteration:   1380, Loss function: 6.237, Average Loss: 5.515, avg. samples / sec: 964.24
Iteration:   1400, Loss function: 6.128, Average Loss: 5.524, avg. samples / sec: 951.68
Iteration:   1420, Loss function: 5.950, Average Loss: 5.531, avg. samples / sec: 918.38
Iteration:   1440, Loss function: 6.339, Average Loss: 5.540, avg. samples / sec: 973.17
Iteration:   1460, Loss function: 6.058, Average Loss: 5.549, avg. samples / sec: 980.81
Iteration:   1480, Loss function: 5.934, Average Loss: 5.557, avg. samples / sec: 987.13
Iteration:   1500, Loss function: 6.239, Average Loss: 5.566, avg. samples / sec: 986.23
Iteration:   1520, Loss function: 6.151, Average Loss: 5.572, avg. samples / sec: 938.19
Iteration:   1540, Loss function: 5.923, Average Loss: 5.577, avg. samples / sec: 959.16
Iteration:   1560, Loss function: 5.656, Average Loss: 5.582, avg. samples / sec: 964.10
Iteration:   1580, Loss function: 5.767, Average Loss: 5.588, avg. samples / sec: 976.20
Iteration:   1600, Loss function: 6.122, Average Loss: 5.594, avg. samples / sec: 997.55
Iteration:   1620, Loss function: 5.752, Average Loss: 5.600, avg. samples / sec: 932.79
Iteration:   1640, Loss function: 5.979, Average Loss: 5.604, avg. samples / sec: 929.22
Iteration:   1660, Loss function: 5.924, Average Loss: 5.609, avg. samples / sec: 958.44
Iteration:   1680, Loss function: 5.702, Average Loss: 5.612, avg. samples / sec: 926.35
Iteration:   1700, Loss function: 5.601, Average Loss: 5.616, avg. samples / sec: 897.42
Iteration:   1720, Loss function: 5.821, Average Loss: 5.619, avg. samples / sec: 944.20
Iteration:   1740, Loss function: 5.861, Average Loss: 5.622, avg. samples / sec: 965.82
Iteration:   1760, Loss function: 5.433, Average Loss: 5.624, avg. samples / sec: 980.31
Iteration:   1780, Loss function: 5.546, Average Loss: 5.625, avg. samples / sec: 960.19
Iteration:   1800, Loss function: 5.435, Average Loss: 5.627, avg. samples / sec: 899.80
Iteration:   1820, Loss function: 6.019, Average Loss: 5.628, avg. samples / sec: 972.64
Iteration:   1840, Loss function: 6.031, Average Loss: 5.629, avg. samples / sec: 975.71
Iteration:   1860, Loss function: 5.581, Average Loss: 5.629, avg. samples / sec: 957.17
Iteration:   1880, Loss function: 5.779, Average Loss: 5.630, avg. samples / sec: 974.76
Iteration:   1900, Loss function: 5.888, Average Loss: 5.632, avg. samples / sec: 987.73
Iteration:   1920, Loss function: 5.795, Average Loss: 5.633, avg. samples / sec: 986.86
Iteration:   1940, Loss function: 5.911, Average Loss: 5.632, avg. samples / sec: 961.76
Iteration:   1960, Loss function: 5.556, Average Loss: 5.632, avg. samples / sec: 992.35
Iteration:   1980, Loss function: 5.558, Average Loss: 5.631, avg. samples / sec: 974.14
Iteration:   2000, Loss function: 5.599, Average Loss: 5.630, avg. samples / sec: 872.59
Iteration:   2020, Loss function: 5.566, Average Loss: 5.629, avg. samples / sec: 937.27
Iteration:   2040, Loss function: 5.615, Average Loss: 5.628, avg. samples / sec: 971.57
:::MLLOG {"namespace": "", "time_ms": 1639761794014, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761794016, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.550, Average Loss: 5.626, avg. samples / sec: 967.77
Iteration:   2080, Loss function: 5.197, Average Loss: 5.624, avg. samples / sec: 983.47
Iteration:   2100, Loss function: 5.581, Average Loss: 5.622, avg. samples / sec: 924.53
Iteration:   2120, Loss function: 5.293, Average Loss: 5.619, avg. samples / sec: 949.00
Iteration:   2140, Loss function: 5.441, Average Loss: 5.616, avg. samples / sec: 975.82
Iteration:   2160, Loss function: 5.517, Average Loss: 5.614, avg. samples / sec: 983.81
Iteration:   2180, Loss function: 5.275, Average Loss: 5.612, avg. samples / sec: 988.08
Iteration:   2200, Loss function: 5.551, Average Loss: 5.609, avg. samples / sec: 981.66
Iteration:   2220, Loss function: 5.564, Average Loss: 5.607, avg. samples / sec: 992.59
Iteration:   2240, Loss function: 5.503, Average Loss: 5.605, avg. samples / sec: 919.26
Iteration:   2260, Loss function: 5.431, Average Loss: 5.602, avg. samples / sec: 949.55
Iteration:   2280, Loss function: 5.199, Average Loss: 5.599, avg. samples / sec: 879.92
Iteration:   2300, Loss function: 5.100, Average Loss: 5.595, avg. samples / sec: 957.54
Iteration:   2320, Loss function: 5.387, Average Loss: 5.592, avg. samples / sec: 937.12
Iteration:   2340, Loss function: 5.433, Average Loss: 5.589, avg. samples / sec: 934.73
Iteration:   2360, Loss function: 5.497, Average Loss: 5.587, avg. samples / sec: 950.31
Iteration:   2380, Loss function: 5.256, Average Loss: 5.584, avg. samples / sec: 936.95
Iteration:   2400, Loss function: 5.526, Average Loss: 5.580, avg. samples / sec: 924.72
Iteration:   2420, Loss function: 5.436, Average Loss: 5.577, avg. samples / sec: 918.94
Iteration:   2440, Loss function: 5.452, Average Loss: 5.574, avg. samples / sec: 941.77
Iteration:   2460, Loss function: 5.241, Average Loss: 5.570, avg. samples / sec: 886.14
Iteration:   2480, Loss function: 5.298, Average Loss: 5.566, avg. samples / sec: 910.15
Iteration:   2500, Loss function: 5.508, Average Loss: 5.562, avg. samples / sec: 966.50
Iteration:   2520, Loss function: 5.249, Average Loss: 5.555, avg. samples / sec: 971.43
Iteration:   2540, Loss function: 5.413, Average Loss: 5.552, avg. samples / sec: 923.77
Iteration:   2560, Loss function: 5.382, Average Loss: 5.549, avg. samples / sec: 931.47
Iteration:   2580, Loss function: 5.313, Average Loss: 5.546, avg. samples / sec: 985.45
Iteration:   2600, Loss function: 5.261, Average Loss: 5.542, avg. samples / sec: 969.81
Iteration:   2620, Loss function: 5.609, Average Loss: 5.537, avg. samples / sec: 913.59
Iteration:   2640, Loss function: 5.292, Average Loss: 5.535, avg. samples / sec: 980.55
Iteration:   2660, Loss function: 5.217, Average Loss: 5.531, avg. samples / sec: 926.74
Iteration:   2680, Loss function: 5.195, Average Loss: 5.527, avg. samples / sec: 940.23
Iteration:   2700, Loss function: 5.191, Average Loss: 5.523, avg. samples / sec: 973.15
Iteration:   2720, Loss function: 5.284, Average Loss: 5.519, avg. samples / sec: 925.19
Iteration:   2740, Loss function: 5.029, Average Loss: 5.514, avg. samples / sec: 983.63
Iteration:   2760, Loss function: 4.994, Average Loss: 5.509, avg. samples / sec: 983.37
Iteration:   2780, Loss function: 5.444, Average Loss: 5.505, avg. samples / sec: 881.18
Iteration:   2800, Loss function: 5.284, Average Loss: 5.501, avg. samples / sec: 950.42
Iteration:   2820, Loss function: 5.513, Average Loss: 5.497, avg. samples / sec: 943.77
Iteration:   2840, Loss function: 5.187, Average Loss: 5.493, avg. samples / sec: 955.42
Iteration:   2860, Loss function: 5.082, Average Loss: 5.488, avg. samples / sec: 975.12
Iteration:   2880, Loss function: 5.125, Average Loss: 5.484, avg. samples / sec: 980.58
Iteration:   2900, Loss function: 5.063, Average Loss: 5.479, avg. samples / sec: 944.81
Iteration:   2920, Loss function: 5.000, Average Loss: 5.473, avg. samples / sec: 986.67
Iteration:   2940, Loss function: 5.005, Average Loss: 5.469, avg. samples / sec: 848.95
Iteration:   2960, Loss function: 5.318, Average Loss: 5.464, avg. samples / sec: 962.72
Iteration:   2980, Loss function: 5.262, Average Loss: 5.461, avg. samples / sec: 982.24
Iteration:   3000, Loss function: 5.199, Average Loss: 5.456, avg. samples / sec: 984.32
Iteration:   3020, Loss function: 5.427, Average Loss: 5.450, avg. samples / sec: 947.99
Iteration:   3040, Loss function: 5.311, Average Loss: 5.445, avg. samples / sec: 930.86
Iteration:   3060, Loss function: 5.020, Average Loss: 5.440, avg. samples / sec: 951.98
Iteration:   3080, Loss function: 5.016, Average Loss: 5.435, avg. samples / sec: 887.29
:::MLLOG {"namespace": "", "time_ms": 1639761917917, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.314, Average Loss: 5.431, avg. samples / sec: 925.06
Iteration:   3120, Loss function: 4.983, Average Loss: 5.424, avg. samples / sec: 981.10
Iteration:   3140, Loss function: 5.065, Average Loss: 5.419, avg. samples / sec: 938.02
Iteration:   3160, Loss function: 5.496, Average Loss: 5.413, avg. samples / sec: 985.77
Iteration:   3180, Loss function: 5.164, Average Loss: 5.409, avg. samples / sec: 990.80
Iteration:   3200, Loss function: 5.324, Average Loss: 5.404, avg. samples / sec: 939.75
Iteration:   3220, Loss function: 5.264, Average Loss: 5.399, avg. samples / sec: 860.37
Iteration:   3240, Loss function: 5.226, Average Loss: 5.394, avg. samples / sec: 933.67
Iteration:   3260, Loss function: 5.050, Average Loss: 5.388, avg. samples / sec: 945.69
Iteration:   3280, Loss function: 4.686, Average Loss: 5.382, avg. samples / sec: 980.66
Iteration:   3300, Loss function: 4.819, Average Loss: 5.376, avg. samples / sec: 976.70
Iteration:   3320, Loss function: 4.787, Average Loss: 5.371, avg. samples / sec: 929.08
Iteration:   3340, Loss function: 5.140, Average Loss: 5.367, avg. samples / sec: 993.07
Iteration:   3360, Loss function: 5.138, Average Loss: 5.360, avg. samples / sec: 954.47
Iteration:   3380, Loss function: 5.366, Average Loss: 5.354, avg. samples / sec: 960.74
Iteration:   3400, Loss function: 4.850, Average Loss: 5.348, avg. samples / sec: 930.35
Iteration:   3420, Loss function: 5.093, Average Loss: 5.343, avg. samples / sec: 891.96
Iteration:   3440, Loss function: 4.887, Average Loss: 5.338, avg. samples / sec: 794.59
Iteration:   3460, Loss function: 5.318, Average Loss: 5.334, avg. samples / sec: 923.58
Iteration:   3480, Loss function: 5.118, Average Loss: 5.329, avg. samples / sec: 968.63
Iteration:   3500, Loss function: 5.166, Average Loss: 5.325, avg. samples / sec: 977.47
Iteration:   3520, Loss function: 5.093, Average Loss: 5.322, avg. samples / sec: 987.76
Iteration:   3540, Loss function: 4.892, Average Loss: 5.317, avg. samples / sec: 938.06
Iteration:   3560, Loss function: 4.921, Average Loss: 5.314, avg. samples / sec: 982.21
Iteration:   3580, Loss function: 5.054, Average Loss: 5.308, avg. samples / sec: 960.28
Iteration:   3600, Loss function: 5.096, Average Loss: 5.302, avg. samples / sec: 930.24
Iteration:   3620, Loss function: 4.730, Average Loss: 5.297, avg. samples / sec: 952.68
Iteration:   3640, Loss function: 4.993, Average Loss: 5.292, avg. samples / sec: 960.68
Iteration:   3660, Loss function: 4.956, Average Loss: 5.287, avg. samples / sec: 980.22
Iteration:   3680, Loss function: 5.336, Average Loss: 5.281, avg. samples / sec: 966.39
Iteration:   3700, Loss function: 4.978, Average Loss: 5.276, avg. samples / sec: 933.38
Iteration:   3720, Loss function: 4.866, Average Loss: 5.270, avg. samples / sec: 979.58
Iteration:   3740, Loss function: 5.262, Average Loss: 5.266, avg. samples / sec: 973.01
Iteration:   3760, Loss function: 4.956, Average Loss: 5.262, avg. samples / sec: 984.45
Iteration:   3780, Loss function: 5.057, Average Loss: 5.258, avg. samples / sec: 960.36
Iteration:   3800, Loss function: 5.152, Average Loss: 5.255, avg. samples / sec: 974.99
Iteration:   3820, Loss function: 5.410, Average Loss: 5.251, avg. samples / sec: 956.03
Iteration:   3840, Loss function: 4.915, Average Loss: 5.246, avg. samples / sec: 978.37
Iteration:   3860, Loss function: 4.958, Average Loss: 5.241, avg. samples / sec: 990.97
Iteration:   3880, Loss function: 5.024, Average Loss: 5.236, avg. samples / sec: 933.01
Iteration:   3900, Loss function: 5.076, Average Loss: 5.232, avg. samples / sec: 939.85
Iteration:   3920, Loss function: 5.071, Average Loss: 5.226, avg. samples / sec: 988.95
Iteration:   3940, Loss function: 4.975, Average Loss: 5.221, avg. samples / sec: 898.26
Iteration:   3960, Loss function: 4.963, Average Loss: 5.216, avg. samples / sec: 959.42
Iteration:   3980, Loss function: 4.820, Average Loss: 5.212, avg. samples / sec: 980.80
Iteration:   4000, Loss function: 5.273, Average Loss: 5.208, avg. samples / sec: 985.67
Iteration:   4020, Loss function: 5.065, Average Loss: 5.202, avg. samples / sec: 997.75
Iteration:   4040, Loss function: 5.045, Average Loss: 5.199, avg. samples / sec: 944.31
Iteration:   4060, Loss function: 5.135, Average Loss: 5.195, avg. samples / sec: 955.20
Iteration:   4080, Loss function: 5.227, Average Loss: 5.191, avg. samples / sec: 956.70
Iteration:   4100, Loss function: 5.168, Average Loss: 5.188, avg. samples / sec: 988.77
:::MLLOG {"namespace": "", "time_ms": 1639762040904, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762040906, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.066, Average Loss: 5.185, avg. samples / sec: 967.99
Iteration:   4140, Loss function: 4.964, Average Loss: 5.179, avg. samples / sec: 927.03
Iteration:   4160, Loss function: 4.839, Average Loss: 5.171, avg. samples / sec: 930.90
Iteration:   4180, Loss function: 4.884, Average Loss: 5.165, avg. samples / sec: 982.38
Iteration:   4200, Loss function: 5.061, Average Loss: 5.161, avg. samples / sec: 968.30
Iteration:   4220, Loss function: 4.814, Average Loss: 5.156, avg. samples / sec: 899.86
Iteration:   4240, Loss function: 4.983, Average Loss: 5.151, avg. samples / sec: 950.47
Iteration:   4260, Loss function: 5.058, Average Loss: 5.146, avg. samples / sec: 911.68
Iteration:   4280, Loss function: 4.902, Average Loss: 5.139, avg. samples / sec: 991.79
Iteration:   4300, Loss function: 4.922, Average Loss: 5.133, avg. samples / sec: 938.45
Iteration:   4320, Loss function: 4.807, Average Loss: 5.129, avg. samples / sec: 924.31
Iteration:   4340, Loss function: 4.631, Average Loss: 5.124, avg. samples / sec: 987.45
Iteration:   4360, Loss function: 4.816, Average Loss: 5.119, avg. samples / sec: 972.27
Iteration:   4380, Loss function: 4.910, Average Loss: 5.115, avg. samples / sec: 886.51
Iteration:   4400, Loss function: 5.010, Average Loss: 5.110, avg. samples / sec: 923.41
Iteration:   4420, Loss function: 4.921, Average Loss: 5.105, avg. samples / sec: 972.69
Iteration:   4440, Loss function: 4.885, Average Loss: 5.100, avg. samples / sec: 964.52
Iteration:   4460, Loss function: 5.002, Average Loss: 5.096, avg. samples / sec: 962.27
Iteration:   4480, Loss function: 5.107, Average Loss: 5.093, avg. samples / sec: 958.07
Iteration:   4500, Loss function: 4.816, Average Loss: 5.090, avg. samples / sec: 965.29
Iteration:   4520, Loss function: 4.861, Average Loss: 5.086, avg. samples / sec: 962.91
Iteration:   4540, Loss function: 5.134, Average Loss: 5.082, avg. samples / sec: 894.59
Iteration:   4560, Loss function: 4.772, Average Loss: 5.077, avg. samples / sec: 997.54
Iteration:   4580, Loss function: 4.692, Average Loss: 5.074, avg. samples / sec: 983.02
Iteration:   4600, Loss function: 4.760, Average Loss: 5.070, avg. samples / sec: 902.68
Iteration:   4620, Loss function: 4.885, Average Loss: 5.065, avg. samples / sec: 965.75
Iteration:   4640, Loss function: 4.743, Average Loss: 5.060, avg. samples / sec: 925.05
Iteration:   4660, Loss function: 4.780, Average Loss: 5.056, avg. samples / sec: 975.33
Iteration:   4680, Loss function: 5.332, Average Loss: 5.051, avg. samples / sec: 925.27
Iteration:   4700, Loss function: 4.521, Average Loss: 5.048, avg. samples / sec: 920.83
Iteration:   4720, Loss function: 4.833, Average Loss: 5.043, avg. samples / sec: 988.88
Iteration:   4740, Loss function: 4.818, Average Loss: 5.039, avg. samples / sec: 983.03
Iteration:   4760, Loss function: 4.544, Average Loss: 5.036, avg. samples / sec: 961.02
Iteration:   4780, Loss function: 4.943, Average Loss: 5.031, avg. samples / sec: 962.14
Iteration:   4800, Loss function: 5.096, Average Loss: 5.028, avg. samples / sec: 976.44
Iteration:   4820, Loss function: 4.854, Average Loss: 5.025, avg. samples / sec: 981.82
Iteration:   4840, Loss function: 5.060, Average Loss: 5.022, avg. samples / sec: 933.09
Iteration:   4860, Loss function: 4.677, Average Loss: 5.018, avg. samples / sec: 958.47
Iteration:   4880, Loss function: 5.157, Average Loss: 5.014, avg. samples / sec: 927.63
Iteration:   4900, Loss function: 4.578, Average Loss: 5.009, avg. samples / sec: 949.98
Iteration:   4920, Loss function: 4.788, Average Loss: 5.006, avg. samples / sec: 983.20
Iteration:   4940, Loss function: 4.858, Average Loss: 5.001, avg. samples / sec: 942.84
Iteration:   4960, Loss function: 4.567, Average Loss: 4.999, avg. samples / sec: 996.02
Iteration:   4980, Loss function: 4.800, Average Loss: 4.995, avg. samples / sec: 971.98
Iteration:   5000, Loss function: 4.899, Average Loss: 4.991, avg. samples / sec: 981.32
Iteration:   5020, Loss function: 5.099, Average Loss: 4.988, avg. samples / sec: 908.00
Iteration:   5040, Loss function: 4.792, Average Loss: 4.985, avg. samples / sec: 981.50
Iteration:   5060, Loss function: 4.784, Average Loss: 4.981, avg. samples / sec: 949.02
Iteration:   5080, Loss function: 4.607, Average Loss: 4.978, avg. samples / sec: 971.56
Iteration:   5100, Loss function: 4.819, Average Loss: 4.975, avg. samples / sec: 994.60
Iteration:   5120, Loss function: 4.680, Average Loss: 4.972, avg. samples / sec: 991.58
Iteration:   5140, Loss function: 4.773, Average Loss: 4.969, avg. samples / sec: 998.57
:::MLLOG {"namespace": "", "time_ms": 1639762163733, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 29.87 s
:::MLLOG {"namespace": "", "time_ms": 1639762193666, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762193715, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762193716, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.71s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.831, Average Loss: 4.964, avg. samples / sec: 70.59
Iteration:   5180, Loss function: 4.668, Average Loss: 4.959, avg. samples / sec: 993.63
DONE (t=3.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10679
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21706
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09622
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19091
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13556
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21191
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21191
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10679 AP goal: 0.10000
Iteration:   5200, Loss function: 4.668, Average Loss: 4.954, avg. samples / sec: 983.71
:::MLLOG {"namespace": "", "time_ms": 1639762200315, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200316, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10678552996916903, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200316, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762200569, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762202
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:30:02 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:27 PM'
START TIMING RUN WAS 2021-12-17 05:18:27 PM
ENDING TIMING RUN AT 2021-12-17 05:30:02 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:30:02 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ result=695
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,695,nvidia,2021-12-17 05:18:27 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,695,nvidia,2021-12-17 05:18:27 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
