8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8'
Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639761505
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 05:18:25 PM'
STARTING TIMING RUN AT 2021-12-17 05:18:25 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 05:18:25 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-04-05 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\8\-\1\8\-\0\9 ]]
+ rm -f /data/coco2017/sync/2021-12-17_18-04-05
+ set +x
Fri Dec 17 17:18:25 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-47b9p to the sync file ...
run-mlperf--1-47b9p Found 1 Pods, waiting to have 8 ...
     1	run-mlperf--1-47b9p
Fri Dec 17 17:18:30 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761512535, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761512657, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4125848492, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4125848492
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761538404, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761538405, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639761539625, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761539626, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761539892, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761539893, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761539894, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.777, Average Loss: 0.023, avg. samples / sec: 4.50
Iteration:     20, Loss function: 21.031, Average Loss: 0.455, avg. samples / sec: 903.10
Iteration:     40, Loss function: 20.813, Average Loss: 0.857, avg. samples / sec: 936.55
Iteration:     60, Loss function: 20.308, Average Loss: 1.247, avg. samples / sec: 908.36
Iteration:     80, Loss function: 19.419, Average Loss: 1.616, avg. samples / sec: 886.62
Iteration:    100, Loss function: 13.299, Average Loss: 1.914, avg. samples / sec: 929.22
Iteration:    120, Loss function: 10.317, Average Loss: 2.101, avg. samples / sec: 885.36
Iteration:    140, Loss function: 9.478, Average Loss: 2.252, avg. samples / sec: 935.02
Iteration:    160, Loss function: 9.296, Average Loss: 2.391, avg. samples / sec: 657.88
Iteration:    180, Loss function: 8.901, Average Loss: 2.521, avg. samples / sec: 928.85
Iteration:    200, Loss function: 8.608, Average Loss: 2.647, avg. samples / sec: 915.66
Iteration:    220, Loss function: 8.507, Average Loss: 2.770, avg. samples / sec: 889.55
Iteration:    240, Loss function: 8.631, Average Loss: 2.891, avg. samples / sec: 959.33
Iteration:    260, Loss function: 8.869, Average Loss: 3.007, avg. samples / sec: 957.71
Iteration:    280, Loss function: 8.619, Average Loss: 3.118, avg. samples / sec: 922.23
Iteration:    300, Loss function: 8.410, Average Loss: 3.222, avg. samples / sec: 884.56
Iteration:    320, Loss function: 8.399, Average Loss: 3.322, avg. samples / sec: 870.08
Iteration:    340, Loss function: 8.320, Average Loss: 3.421, avg. samples / sec: 968.51
Iteration:    360, Loss function: 8.021, Average Loss: 3.515, avg. samples / sec: 967.79
Iteration:    380, Loss function: 7.979, Average Loss: 3.607, avg. samples / sec: 913.18
Iteration:    400, Loss function: 8.014, Average Loss: 3.694, avg. samples / sec: 910.61
Iteration:    420, Loss function: 7.551, Average Loss: 3.776, avg. samples / sec: 979.76
Iteration:    440, Loss function: 7.820, Average Loss: 3.856, avg. samples / sec: 982.36
Iteration:    460, Loss function: 7.754, Average Loss: 3.933, avg. samples / sec: 970.73
Iteration:    480, Loss function: 7.320, Average Loss: 4.007, avg. samples / sec: 975.18
Iteration:    500, Loss function: 7.449, Average Loss: 4.078, avg. samples / sec: 962.50
Iteration:    520, Loss function: 7.421, Average Loss: 4.145, avg. samples / sec: 916.29
Iteration:    540, Loss function: 7.570, Average Loss: 4.211, avg. samples / sec: 962.70
Iteration:    560, Loss function: 7.090, Average Loss: 4.273, avg. samples / sec: 975.27
Iteration:    580, Loss function: 7.204, Average Loss: 4.334, avg. samples / sec: 886.15
Iteration:    600, Loss function: 7.260, Average Loss: 4.393, avg. samples / sec: 910.38
Iteration:    620, Loss function: 7.140, Average Loss: 4.451, avg. samples / sec: 983.49
Iteration:    640, Loss function: 6.956, Average Loss: 4.506, avg. samples / sec: 979.27
Iteration:    660, Loss function: 7.156, Average Loss: 4.559, avg. samples / sec: 679.69
Iteration:    680, Loss function: 7.164, Average Loss: 4.610, avg. samples / sec: 1000.74
Iteration:    700, Loss function: 6.855, Average Loss: 4.657, avg. samples / sec: 893.29
Iteration:    720, Loss function: 6.941, Average Loss: 4.707, avg. samples / sec: 939.11
Iteration:    740, Loss function: 6.893, Average Loss: 4.752, avg. samples / sec: 997.02
Iteration:    760, Loss function: 7.236, Average Loss: 4.796, avg. samples / sec: 946.79
Iteration:    780, Loss function: 6.818, Average Loss: 4.838, avg. samples / sec: 945.57
Iteration:    800, Loss function: 7.083, Average Loss: 4.878, avg. samples / sec: 996.87
Iteration:    820, Loss function: 6.698, Average Loss: 4.915, avg. samples / sec: 985.64
Iteration:    840, Loss function: 6.646, Average Loss: 4.951, avg. samples / sec: 935.75
Iteration:    860, Loss function: 6.861, Average Loss: 4.986, avg. samples / sec: 946.66
Iteration:    880, Loss function: 6.665, Average Loss: 5.019, avg. samples / sec: 890.01
Iteration:    900, Loss function: 6.898, Average Loss: 5.051, avg. samples / sec: 933.08
Iteration:    920, Loss function: 6.464, Average Loss: 5.079, avg. samples / sec: 963.04
Iteration:    940, Loss function: 6.809, Average Loss: 5.108, avg. samples / sec: 950.41
Iteration:    960, Loss function: 6.437, Average Loss: 5.137, avg. samples / sec: 970.11
Iteration:    980, Loss function: 6.419, Average Loss: 5.165, avg. samples / sec: 913.84
Iteration:   1000, Loss function: 6.603, Average Loss: 5.190, avg. samples / sec: 988.10
Iteration:   1020, Loss function: 6.317, Average Loss: 5.214, avg. samples / sec: 942.15
:::MLLOG {"namespace": "", "time_ms": 1639761666714, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761666727, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.371, Average Loss: 5.237, avg. samples / sec: 917.14
Iteration:   1060, Loss function: 6.316, Average Loss: 5.261, avg. samples / sec: 971.36
Iteration:   1080, Loss function: 6.289, Average Loss: 5.282, avg. samples / sec: 993.35
Iteration:   1100, Loss function: 6.093, Average Loss: 5.302, avg. samples / sec: 917.59
Iteration:   1120, Loss function: 6.211, Average Loss: 5.322, avg. samples / sec: 973.77
Iteration:   1140, Loss function: 6.481, Average Loss: 5.341, avg. samples / sec: 860.84
Iteration:   1160, Loss function: 6.223, Average Loss: 5.358, avg. samples / sec: 829.51
Iteration:   1180, Loss function: 6.531, Average Loss: 5.376, avg. samples / sec: 907.34
Iteration:   1200, Loss function: 6.277, Average Loss: 5.392, avg. samples / sec: 924.60
Iteration:   1220, Loss function: 6.116, Average Loss: 5.408, avg. samples / sec: 904.52
Iteration:   1240, Loss function: 5.928, Average Loss: 5.421, avg. samples / sec: 897.88
Iteration:   1260, Loss function: 6.205, Average Loss: 5.434, avg. samples / sec: 941.70
Iteration:   1280, Loss function: 6.111, Average Loss: 5.448, avg. samples / sec: 924.04
Iteration:   1300, Loss function: 6.169, Average Loss: 5.462, avg. samples / sec: 1001.26
Iteration:   1320, Loss function: 5.935, Average Loss: 5.475, avg. samples / sec: 986.94
Iteration:   1340, Loss function: 5.721, Average Loss: 5.485, avg. samples / sec: 978.98
Iteration:   1360, Loss function: 5.911, Average Loss: 5.495, avg. samples / sec: 889.61
Iteration:   1380, Loss function: 6.125, Average Loss: 5.506, avg. samples / sec: 875.25
Iteration:   1400, Loss function: 6.162, Average Loss: 5.514, avg. samples / sec: 901.36
Iteration:   1420, Loss function: 6.022, Average Loss: 5.522, avg. samples / sec: 935.72
Iteration:   1440, Loss function: 6.248, Average Loss: 5.530, avg. samples / sec: 986.45
Iteration:   1460, Loss function: 6.159, Average Loss: 5.539, avg. samples / sec: 981.32
Iteration:   1480, Loss function: 5.998, Average Loss: 5.547, avg. samples / sec: 936.53
Iteration:   1500, Loss function: 5.967, Average Loss: 5.554, avg. samples / sec: 944.85
Iteration:   1520, Loss function: 6.003, Average Loss: 5.560, avg. samples / sec: 941.97
Iteration:   1540, Loss function: 6.076, Average Loss: 5.565, avg. samples / sec: 971.28
Iteration:   1560, Loss function: 5.590, Average Loss: 5.570, avg. samples / sec: 968.97
Iteration:   1580, Loss function: 5.574, Average Loss: 5.574, avg. samples / sec: 870.49
Iteration:   1600, Loss function: 6.011, Average Loss: 5.580, avg. samples / sec: 886.97
Iteration:   1620, Loss function: 5.847, Average Loss: 5.585, avg. samples / sec: 981.75
Iteration:   1640, Loss function: 5.907, Average Loss: 5.589, avg. samples / sec: 891.74
Iteration:   1660, Loss function: 5.843, Average Loss: 5.593, avg. samples / sec: 948.08
Iteration:   1680, Loss function: 5.767, Average Loss: 5.596, avg. samples / sec: 866.36
Iteration:   1700, Loss function: 5.285, Average Loss: 5.600, avg. samples / sec: 986.06
Iteration:   1720, Loss function: 5.751, Average Loss: 5.603, avg. samples / sec: 998.08
Iteration:   1740, Loss function: 5.782, Average Loss: 5.604, avg. samples / sec: 951.69
Iteration:   1760, Loss function: 5.472, Average Loss: 5.606, avg. samples / sec: 953.29
Iteration:   1780, Loss function: 5.754, Average Loss: 5.608, avg. samples / sec: 968.54
Iteration:   1800, Loss function: 5.586, Average Loss: 5.610, avg. samples / sec: 975.70
Iteration:   1820, Loss function: 5.891, Average Loss: 5.611, avg. samples / sec: 930.48
Iteration:   1840, Loss function: 6.071, Average Loss: 5.613, avg. samples / sec: 971.97
Iteration:   1860, Loss function: 5.547, Average Loss: 5.613, avg. samples / sec: 951.72
Iteration:   1880, Loss function: 6.105, Average Loss: 5.615, avg. samples / sec: 976.33
Iteration:   1900, Loss function: 5.730, Average Loss: 5.615, avg. samples / sec: 942.36
Iteration:   1920, Loss function: 5.576, Average Loss: 5.615, avg. samples / sec: 941.23
Iteration:   1940, Loss function: 5.734, Average Loss: 5.615, avg. samples / sec: 954.39
Iteration:   1960, Loss function: 5.484, Average Loss: 5.614, avg. samples / sec: 992.17
Iteration:   1980, Loss function: 5.663, Average Loss: 5.614, avg. samples / sec: 944.24
Iteration:   2000, Loss function: 5.632, Average Loss: 5.614, avg. samples / sec: 911.54
Iteration:   2020, Loss function: 5.554, Average Loss: 5.613, avg. samples / sec: 963.93
Iteration:   2040, Loss function: 5.444, Average Loss: 5.614, avg. samples / sec: 967.72
:::MLLOG {"namespace": "", "time_ms": 1639761791517, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761791519, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.462, Average Loss: 5.611, avg. samples / sec: 995.79
Iteration:   2080, Loss function: 4.988, Average Loss: 5.609, avg. samples / sec: 938.77
Iteration:   2100, Loss function: 5.436, Average Loss: 5.606, avg. samples / sec: 922.01
Iteration:   2120, Loss function: 5.328, Average Loss: 5.604, avg. samples / sec: 875.20
Iteration:   2140, Loss function: 5.292, Average Loss: 5.601, avg. samples / sec: 868.56
Iteration:   2160, Loss function: 5.206, Average Loss: 5.599, avg. samples / sec: 945.79
Iteration:   2180, Loss function: 5.340, Average Loss: 5.597, avg. samples / sec: 983.29
Iteration:   2200, Loss function: 5.700, Average Loss: 5.593, avg. samples / sec: 905.75
Iteration:   2220, Loss function: 5.604, Average Loss: 5.591, avg. samples / sec: 924.43
Iteration:   2240, Loss function: 5.486, Average Loss: 5.589, avg. samples / sec: 960.18
Iteration:   2260, Loss function: 5.323, Average Loss: 5.586, avg. samples / sec: 844.68
Iteration:   2280, Loss function: 5.447, Average Loss: 5.583, avg. samples / sec: 957.85
Iteration:   2300, Loss function: 5.064, Average Loss: 5.581, avg. samples / sec: 917.47
Iteration:   2320, Loss function: 5.249, Average Loss: 5.578, avg. samples / sec: 923.30
Iteration:   2340, Loss function: 5.717, Average Loss: 5.576, avg. samples / sec: 960.32
Iteration:   2360, Loss function: 5.306, Average Loss: 5.572, avg. samples / sec: 918.99
Iteration:   2380, Loss function: 5.394, Average Loss: 5.568, avg. samples / sec: 915.14
Iteration:   2400, Loss function: 5.514, Average Loss: 5.565, avg. samples / sec: 943.47
Iteration:   2420, Loss function: 5.608, Average Loss: 5.561, avg. samples / sec: 983.34
Iteration:   2440, Loss function: 5.464, Average Loss: 5.558, avg. samples / sec: 968.84
Iteration:   2460, Loss function: 5.187, Average Loss: 5.554, avg. samples / sec: 944.35
Iteration:   2480, Loss function: 5.243, Average Loss: 5.551, avg. samples / sec: 981.88
Iteration:   2500, Loss function: 5.544, Average Loss: 5.547, avg. samples / sec: 905.02
Iteration:   2520, Loss function: 5.371, Average Loss: 5.542, avg. samples / sec: 828.54
Iteration:   2540, Loss function: 5.332, Average Loss: 5.539, avg. samples / sec: 946.71
Iteration:   2560, Loss function: 5.347, Average Loss: 5.535, avg. samples / sec: 983.04
Iteration:   2580, Loss function: 5.327, Average Loss: 5.532, avg. samples / sec: 915.75
Iteration:   2600, Loss function: 5.410, Average Loss: 5.529, avg. samples / sec: 903.89
Iteration:   2620, Loss function: 5.631, Average Loss: 5.524, avg. samples / sec: 990.98
Iteration:   2640, Loss function: 5.216, Average Loss: 5.521, avg. samples / sec: 996.58
Iteration:   2660, Loss function: 5.064, Average Loss: 5.517, avg. samples / sec: 965.69
Iteration:   2680, Loss function: 5.168, Average Loss: 5.513, avg. samples / sec: 911.85
Iteration:   2700, Loss function: 5.100, Average Loss: 5.507, avg. samples / sec: 968.36
Iteration:   2720, Loss function: 5.347, Average Loss: 5.503, avg. samples / sec: 961.26
Iteration:   2740, Loss function: 5.070, Average Loss: 5.499, avg. samples / sec: 949.39
Iteration:   2760, Loss function: 4.970, Average Loss: 5.493, avg. samples / sec: 983.66
Iteration:   2780, Loss function: 5.473, Average Loss: 5.490, avg. samples / sec: 931.96
Iteration:   2800, Loss function: 5.221, Average Loss: 5.486, avg. samples / sec: 915.44
Iteration:   2820, Loss function: 5.512, Average Loss: 5.481, avg. samples / sec: 968.53
Iteration:   2840, Loss function: 5.139, Average Loss: 5.477, avg. samples / sec: 991.08
Iteration:   2860, Loss function: 5.089, Average Loss: 5.472, avg. samples / sec: 905.75
Iteration:   2880, Loss function: 5.464, Average Loss: 5.468, avg. samples / sec: 943.14
Iteration:   2900, Loss function: 5.112, Average Loss: 5.464, avg. samples / sec: 889.35
Iteration:   2920, Loss function: 5.002, Average Loss: 5.460, avg. samples / sec: 895.50
Iteration:   2940, Loss function: 4.994, Average Loss: 5.455, avg. samples / sec: 969.96
Iteration:   2960, Loss function: 5.115, Average Loss: 5.451, avg. samples / sec: 885.69
Iteration:   2980, Loss function: 5.226, Average Loss: 5.448, avg. samples / sec: 934.06
Iteration:   3000, Loss function: 5.479, Average Loss: 5.443, avg. samples / sec: 904.91
Iteration:   3020, Loss function: 5.208, Average Loss: 5.438, avg. samples / sec: 950.21
Iteration:   3040, Loss function: 5.119, Average Loss: 5.432, avg. samples / sec: 954.14
Iteration:   3060, Loss function: 4.928, Average Loss: 5.426, avg. samples / sec: 915.75
Iteration:   3080, Loss function: 4.846, Average Loss: 5.421, avg. samples / sec: 919.19
:::MLLOG {"namespace": "", "time_ms": 1639761917076, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917079, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.227, Average Loss: 5.417, avg. samples / sec: 957.69
Iteration:   3120, Loss function: 4.885, Average Loss: 5.411, avg. samples / sec: 922.22
Iteration:   3140, Loss function: 5.096, Average Loss: 5.406, avg. samples / sec: 927.39
Iteration:   3160, Loss function: 5.494, Average Loss: 5.401, avg. samples / sec: 984.44
Iteration:   3180, Loss function: 5.024, Average Loss: 5.396, avg. samples / sec: 963.17
Iteration:   3200, Loss function: 5.165, Average Loss: 5.390, avg. samples / sec: 970.29
Iteration:   3220, Loss function: 5.072, Average Loss: 5.385, avg. samples / sec: 969.97
Iteration:   3240, Loss function: 5.170, Average Loss: 5.380, avg. samples / sec: 975.55
Iteration:   3260, Loss function: 4.963, Average Loss: 5.374, avg. samples / sec: 971.47
Iteration:   3280, Loss function: 4.913, Average Loss: 5.368, avg. samples / sec: 979.35
Iteration:   3300, Loss function: 4.748, Average Loss: 5.362, avg. samples / sec: 941.52
Iteration:   3320, Loss function: 5.147, Average Loss: 5.358, avg. samples / sec: 882.08
Iteration:   3340, Loss function: 5.216, Average Loss: 5.353, avg. samples / sec: 943.87
Iteration:   3360, Loss function: 5.124, Average Loss: 5.347, avg. samples / sec: 984.28
Iteration:   3380, Loss function: 5.236, Average Loss: 5.341, avg. samples / sec: 924.58
Iteration:   3400, Loss function: 4.771, Average Loss: 5.336, avg. samples / sec: 890.03
Iteration:   3420, Loss function: 5.241, Average Loss: 5.331, avg. samples / sec: 991.41
Iteration:   3440, Loss function: 4.568, Average Loss: 5.326, avg. samples / sec: 972.37
Iteration:   3460, Loss function: 5.225, Average Loss: 5.321, avg. samples / sec: 924.96
Iteration:   3480, Loss function: 5.205, Average Loss: 5.316, avg. samples / sec: 929.34
Iteration:   3500, Loss function: 5.133, Average Loss: 5.312, avg. samples / sec: 955.04
Iteration:   3520, Loss function: 5.175, Average Loss: 5.310, avg. samples / sec: 949.69
Iteration:   3540, Loss function: 4.893, Average Loss: 5.305, avg. samples / sec: 890.00
Iteration:   3560, Loss function: 4.922, Average Loss: 5.302, avg. samples / sec: 970.61
Iteration:   3580, Loss function: 4.995, Average Loss: 5.298, avg. samples / sec: 984.08
Iteration:   3600, Loss function: 5.144, Average Loss: 5.291, avg. samples / sec: 972.85
Iteration:   3620, Loss function: 4.810, Average Loss: 5.286, avg. samples / sec: 954.31
Iteration:   3640, Loss function: 4.733, Average Loss: 5.281, avg. samples / sec: 919.42
Iteration:   3660, Loss function: 5.191, Average Loss: 5.276, avg. samples / sec: 960.90
Iteration:   3680, Loss function: 5.153, Average Loss: 5.270, avg. samples / sec: 900.09
Iteration:   3700, Loss function: 4.958, Average Loss: 5.265, avg. samples / sec: 963.39
Iteration:   3720, Loss function: 4.898, Average Loss: 5.259, avg. samples / sec: 892.72
Iteration:   3740, Loss function: 5.195, Average Loss: 5.255, avg. samples / sec: 966.58
Iteration:   3760, Loss function: 5.096, Average Loss: 5.251, avg. samples / sec: 976.70
Iteration:   3780, Loss function: 4.871, Average Loss: 5.247, avg. samples / sec: 869.96
Iteration:   3800, Loss function: 5.350, Average Loss: 5.244, avg. samples / sec: 959.00
Iteration:   3820, Loss function: 4.984, Average Loss: 5.239, avg. samples / sec: 927.15
Iteration:   3840, Loss function: 4.804, Average Loss: 5.234, avg. samples / sec: 933.59
Iteration:   3860, Loss function: 5.021, Average Loss: 5.229, avg. samples / sec: 986.41
Iteration:   3880, Loss function: 5.069, Average Loss: 5.224, avg. samples / sec: 935.03
Iteration:   3900, Loss function: 5.160, Average Loss: 5.219, avg. samples / sec: 869.45
Iteration:   3920, Loss function: 5.094, Average Loss: 5.214, avg. samples / sec: 897.29
Iteration:   3940, Loss function: 5.074, Average Loss: 5.209, avg. samples / sec: 956.50
Iteration:   3960, Loss function: 4.940, Average Loss: 5.205, avg. samples / sec: 952.33
Iteration:   3980, Loss function: 4.897, Average Loss: 5.200, avg. samples / sec: 892.84
Iteration:   4000, Loss function: 4.936, Average Loss: 5.196, avg. samples / sec: 887.22
Iteration:   4020, Loss function: 4.919, Average Loss: 5.191, avg. samples / sec: 902.28
Iteration:   4040, Loss function: 5.050, Average Loss: 5.187, avg. samples / sec: 943.34
Iteration:   4060, Loss function: 5.158, Average Loss: 5.183, avg. samples / sec: 974.09
Iteration:   4080, Loss function: 5.030, Average Loss: 5.178, avg. samples / sec: 976.76
Iteration:   4100, Loss function: 5.065, Average Loss: 5.174, avg. samples / sec: 983.91
:::MLLOG {"namespace": "", "time_ms": 1639762041618, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762041620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.053, Average Loss: 5.171, avg. samples / sec: 966.66
Iteration:   4140, Loss function: 5.027, Average Loss: 5.165, avg. samples / sec: 992.56
Iteration:   4160, Loss function: 5.121, Average Loss: 5.159, avg. samples / sec: 913.84
Iteration:   4180, Loss function: 4.954, Average Loss: 5.154, avg. samples / sec: 951.36
Iteration:   4200, Loss function: 4.942, Average Loss: 5.149, avg. samples / sec: 999.15
Iteration:   4220, Loss function: 4.948, Average Loss: 5.145, avg. samples / sec: 972.90
Iteration:   4240, Loss function: 4.870, Average Loss: 5.140, avg. samples / sec: 941.11
Iteration:   4260, Loss function: 5.165, Average Loss: 5.135, avg. samples / sec: 929.97
Iteration:   4280, Loss function: 5.055, Average Loss: 5.129, avg. samples / sec: 987.63
Iteration:   4300, Loss function: 4.795, Average Loss: 5.123, avg. samples / sec: 970.09
Iteration:   4320, Loss function: 4.871, Average Loss: 5.118, avg. samples / sec: 922.54
Iteration:   4340, Loss function: 4.616, Average Loss: 5.113, avg. samples / sec: 887.51
Iteration:   4360, Loss function: 5.040, Average Loss: 5.110, avg. samples / sec: 904.78
Iteration:   4380, Loss function: 4.949, Average Loss: 5.106, avg. samples / sec: 965.49
Iteration:   4400, Loss function: 5.151, Average Loss: 5.101, avg. samples / sec: 984.23
Iteration:   4420, Loss function: 5.018, Average Loss: 5.096, avg. samples / sec: 956.70
Iteration:   4440, Loss function: 4.839, Average Loss: 5.092, avg. samples / sec: 889.86
Iteration:   4460, Loss function: 4.977, Average Loss: 5.088, avg. samples / sec: 897.60
Iteration:   4480, Loss function: 5.002, Average Loss: 5.085, avg. samples / sec: 905.45
Iteration:   4500, Loss function: 4.947, Average Loss: 5.082, avg. samples / sec: 979.69
Iteration:   4520, Loss function: 4.864, Average Loss: 5.079, avg. samples / sec: 969.89
Iteration:   4540, Loss function: 5.030, Average Loss: 5.075, avg. samples / sec: 956.06
Iteration:   4560, Loss function: 4.868, Average Loss: 5.071, avg. samples / sec: 984.57
Iteration:   4580, Loss function: 4.757, Average Loss: 5.070, avg. samples / sec: 971.21
Iteration:   4600, Loss function: 4.700, Average Loss: 5.065, avg. samples / sec: 967.37
Iteration:   4620, Loss function: 4.684, Average Loss: 5.061, avg. samples / sec: 922.94
Iteration:   4640, Loss function: 4.820, Average Loss: 5.056, avg. samples / sec: 927.16
Iteration:   4660, Loss function: 4.700, Average Loss: 5.051, avg. samples / sec: 959.27
Iteration:   4680, Loss function: 5.273, Average Loss: 5.047, avg. samples / sec: 984.54
Iteration:   4700, Loss function: 4.736, Average Loss: 5.044, avg. samples / sec: 981.79
Iteration:   4720, Loss function: 4.733, Average Loss: 5.040, avg. samples / sec: 880.55
Iteration:   4740, Loss function: 4.858, Average Loss: 5.035, avg. samples / sec: 948.08
Iteration:   4760, Loss function: 4.682, Average Loss: 5.032, avg. samples / sec: 943.80
Iteration:   4780, Loss function: 5.112, Average Loss: 5.028, avg. samples / sec: 911.54
Iteration:   4800, Loss function: 4.914, Average Loss: 5.026, avg. samples / sec: 948.13
Iteration:   4820, Loss function: 4.905, Average Loss: 5.023, avg. samples / sec: 959.33
Iteration:   4840, Loss function: 5.094, Average Loss: 5.020, avg. samples / sec: 975.71
Iteration:   4860, Loss function: 4.747, Average Loss: 5.017, avg. samples / sec: 980.96
Iteration:   4880, Loss function: 5.193, Average Loss: 5.013, avg. samples / sec: 938.21
Iteration:   4900, Loss function: 4.521, Average Loss: 5.008, avg. samples / sec: 877.53
Iteration:   4920, Loss function: 4.924, Average Loss: 5.006, avg. samples / sec: 950.19
Iteration:   4940, Loss function: 4.884, Average Loss: 5.003, avg. samples / sec: 940.59
Iteration:   4960, Loss function: 4.823, Average Loss: 5.000, avg. samples / sec: 956.25
Iteration:   4980, Loss function: 4.806, Average Loss: 4.996, avg. samples / sec: 946.03
Iteration:   5000, Loss function: 4.910, Average Loss: 4.993, avg. samples / sec: 931.26
Iteration:   5020, Loss function: 5.096, Average Loss: 4.990, avg. samples / sec: 946.90
Iteration:   5040, Loss function: 4.722, Average Loss: 4.986, avg. samples / sec: 925.13
Iteration:   5060, Loss function: 4.781, Average Loss: 4.984, avg. samples / sec: 994.39
Iteration:   5080, Loss function: 4.578, Average Loss: 4.981, avg. samples / sec: 986.46
Iteration:   5100, Loss function: 4.665, Average Loss: 4.978, avg. samples / sec: 984.80
Iteration:   5120, Loss function: 4.628, Average Loss: 4.975, avg. samples / sec: 994.85
Iteration:   5140, Loss function: 4.671, Average Loss: 4.970, avg. samples / sec: 992.73
:::MLLOG {"namespace": "", "time_ms": 1639762165100, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.93 s
:::MLLOG {"namespace": "", "time_ms": 1639762196114, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762196189, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762196190, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.953, Average Loss: 4.966, avg. samples / sec: 68.09
Iteration:   5180, Loss function: 4.800, Average Loss: 4.962, avg. samples / sec: 969.73
DONE (t=4.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10683
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21764
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09395
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13632
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20295
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10683 AP goal: 0.10000
Iteration:   5200, Loss function: 4.518, Average Loss: 4.957, avg. samples / sec: 1004.76
:::MLLOG {"namespace": "", "time_ms": 1639762202862, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202864, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10683460882273489, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202864, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762203010, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:30:04 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:30:04 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639761512535, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639761512657, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4125848492, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4125848492
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639761514231, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639761514235, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639761538404, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639761538405, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639761539625, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639761539626, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639761539892, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639761539893, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639761539894, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.777, Average Loss: 0.023, avg. samples / sec: 4.50
Iteration:     20, Loss function: 21.031, Average Loss: 0.455, avg. samples / sec: 903.10
Iteration:     40, Loss function: 20.813, Average Loss: 0.857, avg. samples / sec: 936.55
Iteration:     60, Loss function: 20.308, Average Loss: 1.247, avg. samples / sec: 908.36
Iteration:     80, Loss function: 19.419, Average Loss: 1.616, avg. samples / sec: 886.62
Iteration:    100, Loss function: 13.299, Average Loss: 1.914, avg. samples / sec: 929.22
Iteration:    120, Loss function: 10.317, Average Loss: 2.101, avg. samples / sec: 885.36
Iteration:    140, Loss function: 9.478, Average Loss: 2.252, avg. samples / sec: 935.02
Iteration:    160, Loss function: 9.296, Average Loss: 2.391, avg. samples / sec: 657.88
Iteration:    180, Loss function: 8.901, Average Loss: 2.521, avg. samples / sec: 928.85
Iteration:    200, Loss function: 8.608, Average Loss: 2.647, avg. samples / sec: 915.66
Iteration:    220, Loss function: 8.507, Average Loss: 2.770, avg. samples / sec: 889.55
Iteration:    240, Loss function: 8.631, Average Loss: 2.891, avg. samples / sec: 959.33
Iteration:    260, Loss function: 8.869, Average Loss: 3.007, avg. samples / sec: 957.71
Iteration:    280, Loss function: 8.619, Average Loss: 3.118, avg. samples / sec: 922.23
Iteration:    300, Loss function: 8.410, Average Loss: 3.222, avg. samples / sec: 884.56
Iteration:    320, Loss function: 8.399, Average Loss: 3.322, avg. samples / sec: 870.08
Iteration:    340, Loss function: 8.320, Average Loss: 3.421, avg. samples / sec: 968.51
Iteration:    360, Loss function: 8.021, Average Loss: 3.515, avg. samples / sec: 967.79
Iteration:    380, Loss function: 7.979, Average Loss: 3.607, avg. samples / sec: 913.18
Iteration:    400, Loss function: 8.014, Average Loss: 3.694, avg. samples / sec: 910.61
Iteration:    420, Loss function: 7.551, Average Loss: 3.776, avg. samples / sec: 979.76
Iteration:    440, Loss function: 7.820, Average Loss: 3.856, avg. samples / sec: 982.36
Iteration:    460, Loss function: 7.754, Average Loss: 3.933, avg. samples / sec: 970.73
Iteration:    480, Loss function: 7.320, Average Loss: 4.007, avg. samples / sec: 975.18
Iteration:    500, Loss function: 7.449, Average Loss: 4.078, avg. samples / sec: 962.50
Iteration:    520, Loss function: 7.421, Average Loss: 4.145, avg. samples / sec: 916.29
Iteration:    540, Loss function: 7.570, Average Loss: 4.211, avg. samples / sec: 962.70
Iteration:    560, Loss function: 7.090, Average Loss: 4.273, avg. samples / sec: 975.27
Iteration:    580, Loss function: 7.204, Average Loss: 4.334, avg. samples / sec: 886.15
Iteration:    600, Loss function: 7.260, Average Loss: 4.393, avg. samples / sec: 910.38
Iteration:    620, Loss function: 7.140, Average Loss: 4.451, avg. samples / sec: 983.49
Iteration:    640, Loss function: 6.956, Average Loss: 4.506, avg. samples / sec: 979.27
Iteration:    660, Loss function: 7.156, Average Loss: 4.559, avg. samples / sec: 679.69
Iteration:    680, Loss function: 7.164, Average Loss: 4.610, avg. samples / sec: 1000.74
Iteration:    700, Loss function: 6.855, Average Loss: 4.657, avg. samples / sec: 893.29
Iteration:    720, Loss function: 6.941, Average Loss: 4.707, avg. samples / sec: 939.11
Iteration:    740, Loss function: 6.893, Average Loss: 4.752, avg. samples / sec: 997.02
Iteration:    760, Loss function: 7.236, Average Loss: 4.796, avg. samples / sec: 946.79
Iteration:    780, Loss function: 6.818, Average Loss: 4.838, avg. samples / sec: 945.57
Iteration:    800, Loss function: 7.083, Average Loss: 4.878, avg. samples / sec: 996.87
Iteration:    820, Loss function: 6.698, Average Loss: 4.915, avg. samples / sec: 985.64
Iteration:    840, Loss function: 6.646, Average Loss: 4.951, avg. samples / sec: 935.75
Iteration:    860, Loss function: 6.861, Average Loss: 4.986, avg. samples / sec: 946.66
Iteration:    880, Loss function: 6.665, Average Loss: 5.019, avg. samples / sec: 890.01
Iteration:    900, Loss function: 6.898, Average Loss: 5.051, avg. samples / sec: 933.08
Iteration:    920, Loss function: 6.464, Average Loss: 5.079, avg. samples / sec: 963.04
Iteration:    940, Loss function: 6.809, Average Loss: 5.108, avg. samples / sec: 950.41
Iteration:    960, Loss function: 6.437, Average Loss: 5.137, avg. samples / sec: 970.11
Iteration:    980, Loss function: 6.419, Average Loss: 5.165, avg. samples / sec: 913.84
Iteration:   1000, Loss function: 6.603, Average Loss: 5.190, avg. samples / sec: 988.10
Iteration:   1020, Loss function: 6.317, Average Loss: 5.214, avg. samples / sec: 942.15
:::MLLOG {"namespace": "", "time_ms": 1639761666714, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639761666727, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.371, Average Loss: 5.237, avg. samples / sec: 917.14
Iteration:   1060, Loss function: 6.316, Average Loss: 5.261, avg. samples / sec: 971.36
Iteration:   1080, Loss function: 6.289, Average Loss: 5.282, avg. samples / sec: 993.35
Iteration:   1100, Loss function: 6.093, Average Loss: 5.302, avg. samples / sec: 917.59
Iteration:   1120, Loss function: 6.211, Average Loss: 5.322, avg. samples / sec: 973.77
Iteration:   1140, Loss function: 6.481, Average Loss: 5.341, avg. samples / sec: 860.84
Iteration:   1160, Loss function: 6.223, Average Loss: 5.358, avg. samples / sec: 829.51
Iteration:   1180, Loss function: 6.531, Average Loss: 5.376, avg. samples / sec: 907.34
Iteration:   1200, Loss function: 6.277, Average Loss: 5.392, avg. samples / sec: 924.60
Iteration:   1220, Loss function: 6.116, Average Loss: 5.408, avg. samples / sec: 904.52
Iteration:   1240, Loss function: 5.928, Average Loss: 5.421, avg. samples / sec: 897.88
Iteration:   1260, Loss function: 6.205, Average Loss: 5.434, avg. samples / sec: 941.70
Iteration:   1280, Loss function: 6.111, Average Loss: 5.448, avg. samples / sec: 924.04
Iteration:   1300, Loss function: 6.169, Average Loss: 5.462, avg. samples / sec: 1001.26
Iteration:   1320, Loss function: 5.935, Average Loss: 5.475, avg. samples / sec: 986.94
Iteration:   1340, Loss function: 5.721, Average Loss: 5.485, avg. samples / sec: 978.98
Iteration:   1360, Loss function: 5.911, Average Loss: 5.495, avg. samples / sec: 889.61
Iteration:   1380, Loss function: 6.125, Average Loss: 5.506, avg. samples / sec: 875.25
Iteration:   1400, Loss function: 6.162, Average Loss: 5.514, avg. samples / sec: 901.36
Iteration:   1420, Loss function: 6.022, Average Loss: 5.522, avg. samples / sec: 935.72
Iteration:   1440, Loss function: 6.248, Average Loss: 5.530, avg. samples / sec: 986.45
Iteration:   1460, Loss function: 6.159, Average Loss: 5.539, avg. samples / sec: 981.32
Iteration:   1480, Loss function: 5.998, Average Loss: 5.547, avg. samples / sec: 936.53
Iteration:   1500, Loss function: 5.967, Average Loss: 5.554, avg. samples / sec: 944.85
Iteration:   1520, Loss function: 6.003, Average Loss: 5.560, avg. samples / sec: 941.97
Iteration:   1540, Loss function: 6.076, Average Loss: 5.565, avg. samples / sec: 971.28
Iteration:   1560, Loss function: 5.590, Average Loss: 5.570, avg. samples / sec: 968.97
Iteration:   1580, Loss function: 5.574, Average Loss: 5.574, avg. samples / sec: 870.49
Iteration:   1600, Loss function: 6.011, Average Loss: 5.580, avg. samples / sec: 886.97
Iteration:   1620, Loss function: 5.847, Average Loss: 5.585, avg. samples / sec: 981.75
Iteration:   1640, Loss function: 5.907, Average Loss: 5.589, avg. samples / sec: 891.74
Iteration:   1660, Loss function: 5.843, Average Loss: 5.593, avg. samples / sec: 948.08
Iteration:   1680, Loss function: 5.767, Average Loss: 5.596, avg. samples / sec: 866.36
Iteration:   1700, Loss function: 5.285, Average Loss: 5.600, avg. samples / sec: 986.06
Iteration:   1720, Loss function: 5.751, Average Loss: 5.603, avg. samples / sec: 998.08
Iteration:   1740, Loss function: 5.782, Average Loss: 5.604, avg. samples / sec: 951.69
Iteration:   1760, Loss function: 5.472, Average Loss: 5.606, avg. samples / sec: 953.29
Iteration:   1780, Loss function: 5.754, Average Loss: 5.608, avg. samples / sec: 968.54
Iteration:   1800, Loss function: 5.586, Average Loss: 5.610, avg. samples / sec: 975.70
Iteration:   1820, Loss function: 5.891, Average Loss: 5.611, avg. samples / sec: 930.48
Iteration:   1840, Loss function: 6.071, Average Loss: 5.613, avg. samples / sec: 971.97
Iteration:   1860, Loss function: 5.547, Average Loss: 5.613, avg. samples / sec: 951.72
Iteration:   1880, Loss function: 6.105, Average Loss: 5.615, avg. samples / sec: 976.33
Iteration:   1900, Loss function: 5.730, Average Loss: 5.615, avg. samples / sec: 942.36
Iteration:   1920, Loss function: 5.576, Average Loss: 5.615, avg. samples / sec: 941.23
Iteration:   1940, Loss function: 5.734, Average Loss: 5.615, avg. samples / sec: 954.39
Iteration:   1960, Loss function: 5.484, Average Loss: 5.614, avg. samples / sec: 992.17
Iteration:   1980, Loss function: 5.663, Average Loss: 5.614, avg. samples / sec: 944.24
Iteration:   2000, Loss function: 5.632, Average Loss: 5.614, avg. samples / sec: 911.54
Iteration:   2020, Loss function: 5.554, Average Loss: 5.613, avg. samples / sec: 963.93
Iteration:   2040, Loss function: 5.444, Average Loss: 5.614, avg. samples / sec: 967.72
:::MLLOG {"namespace": "", "time_ms": 1639761791517, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639761791519, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.462, Average Loss: 5.611, avg. samples / sec: 995.79
Iteration:   2080, Loss function: 4.988, Average Loss: 5.609, avg. samples / sec: 938.77
Iteration:   2100, Loss function: 5.436, Average Loss: 5.606, avg. samples / sec: 922.01
Iteration:   2120, Loss function: 5.328, Average Loss: 5.604, avg. samples / sec: 875.20
Iteration:   2140, Loss function: 5.292, Average Loss: 5.601, avg. samples / sec: 868.56
Iteration:   2160, Loss function: 5.206, Average Loss: 5.599, avg. samples / sec: 945.79
Iteration:   2180, Loss function: 5.340, Average Loss: 5.597, avg. samples / sec: 983.29
Iteration:   2200, Loss function: 5.700, Average Loss: 5.593, avg. samples / sec: 905.75
Iteration:   2220, Loss function: 5.604, Average Loss: 5.591, avg. samples / sec: 924.43
Iteration:   2240, Loss function: 5.486, Average Loss: 5.589, avg. samples / sec: 960.18
Iteration:   2260, Loss function: 5.323, Average Loss: 5.586, avg. samples / sec: 844.68
Iteration:   2280, Loss function: 5.447, Average Loss: 5.583, avg. samples / sec: 957.85
Iteration:   2300, Loss function: 5.064, Average Loss: 5.581, avg. samples / sec: 917.47
Iteration:   2320, Loss function: 5.249, Average Loss: 5.578, avg. samples / sec: 923.30
Iteration:   2340, Loss function: 5.717, Average Loss: 5.576, avg. samples / sec: 960.32
Iteration:   2360, Loss function: 5.306, Average Loss: 5.572, avg. samples / sec: 918.99
Iteration:   2380, Loss function: 5.394, Average Loss: 5.568, avg. samples / sec: 915.14
Iteration:   2400, Loss function: 5.514, Average Loss: 5.565, avg. samples / sec: 943.47
Iteration:   2420, Loss function: 5.608, Average Loss: 5.561, avg. samples / sec: 983.34
Iteration:   2440, Loss function: 5.464, Average Loss: 5.558, avg. samples / sec: 968.84
Iteration:   2460, Loss function: 5.187, Average Loss: 5.554, avg. samples / sec: 944.35
Iteration:   2480, Loss function: 5.243, Average Loss: 5.551, avg. samples / sec: 981.88
Iteration:   2500, Loss function: 5.544, Average Loss: 5.547, avg. samples / sec: 905.02
Iteration:   2520, Loss function: 5.371, Average Loss: 5.542, avg. samples / sec: 828.54
Iteration:   2540, Loss function: 5.332, Average Loss: 5.539, avg. samples / sec: 946.71
Iteration:   2560, Loss function: 5.347, Average Loss: 5.535, avg. samples / sec: 983.04
Iteration:   2580, Loss function: 5.327, Average Loss: 5.532, avg. samples / sec: 915.75
Iteration:   2600, Loss function: 5.410, Average Loss: 5.529, avg. samples / sec: 903.89
Iteration:   2620, Loss function: 5.631, Average Loss: 5.524, avg. samples / sec: 990.98
Iteration:   2640, Loss function: 5.216, Average Loss: 5.521, avg. samples / sec: 996.58
Iteration:   2660, Loss function: 5.064, Average Loss: 5.517, avg. samples / sec: 965.69
Iteration:   2680, Loss function: 5.168, Average Loss: 5.513, avg. samples / sec: 911.85
Iteration:   2700, Loss function: 5.100, Average Loss: 5.507, avg. samples / sec: 968.36
Iteration:   2720, Loss function: 5.347, Average Loss: 5.503, avg. samples / sec: 961.26
Iteration:   2740, Loss function: 5.070, Average Loss: 5.499, avg. samples / sec: 949.39
Iteration:   2760, Loss function: 4.970, Average Loss: 5.493, avg. samples / sec: 983.66
Iteration:   2780, Loss function: 5.473, Average Loss: 5.490, avg. samples / sec: 931.96
Iteration:   2800, Loss function: 5.221, Average Loss: 5.486, avg. samples / sec: 915.44
Iteration:   2820, Loss function: 5.512, Average Loss: 5.481, avg. samples / sec: 968.53
Iteration:   2840, Loss function: 5.139, Average Loss: 5.477, avg. samples / sec: 991.08
Iteration:   2860, Loss function: 5.089, Average Loss: 5.472, avg. samples / sec: 905.75
Iteration:   2880, Loss function: 5.464, Average Loss: 5.468, avg. samples / sec: 943.14
Iteration:   2900, Loss function: 5.112, Average Loss: 5.464, avg. samples / sec: 889.35
Iteration:   2920, Loss function: 5.002, Average Loss: 5.460, avg. samples / sec: 895.50
Iteration:   2940, Loss function: 4.994, Average Loss: 5.455, avg. samples / sec: 969.96
Iteration:   2960, Loss function: 5.115, Average Loss: 5.451, avg. samples / sec: 885.69
Iteration:   2980, Loss function: 5.226, Average Loss: 5.448, avg. samples / sec: 934.06
Iteration:   3000, Loss function: 5.479, Average Loss: 5.443, avg. samples / sec: 904.91
Iteration:   3020, Loss function: 5.208, Average Loss: 5.438, avg. samples / sec: 950.21
Iteration:   3040, Loss function: 5.119, Average Loss: 5.432, avg. samples / sec: 954.14
Iteration:   3060, Loss function: 4.928, Average Loss: 5.426, avg. samples / sec: 915.75
Iteration:   3080, Loss function: 4.846, Average Loss: 5.421, avg. samples / sec: 919.19
:::MLLOG {"namespace": "", "time_ms": 1639761917076, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639761917079, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.227, Average Loss: 5.417, avg. samples / sec: 957.69
Iteration:   3120, Loss function: 4.885, Average Loss: 5.411, avg. samples / sec: 922.22
Iteration:   3140, Loss function: 5.096, Average Loss: 5.406, avg. samples / sec: 927.39
Iteration:   3160, Loss function: 5.494, Average Loss: 5.401, avg. samples / sec: 984.44
Iteration:   3180, Loss function: 5.024, Average Loss: 5.396, avg. samples / sec: 963.17
Iteration:   3200, Loss function: 5.165, Average Loss: 5.390, avg. samples / sec: 970.29
Iteration:   3220, Loss function: 5.072, Average Loss: 5.385, avg. samples / sec: 969.97
Iteration:   3240, Loss function: 5.170, Average Loss: 5.380, avg. samples / sec: 975.55
Iteration:   3260, Loss function: 4.963, Average Loss: 5.374, avg. samples / sec: 971.47
Iteration:   3280, Loss function: 4.913, Average Loss: 5.368, avg. samples / sec: 979.35
Iteration:   3300, Loss function: 4.748, Average Loss: 5.362, avg. samples / sec: 941.52
Iteration:   3320, Loss function: 5.147, Average Loss: 5.358, avg. samples / sec: 882.08
Iteration:   3340, Loss function: 5.216, Average Loss: 5.353, avg. samples / sec: 943.87
Iteration:   3360, Loss function: 5.124, Average Loss: 5.347, avg. samples / sec: 984.28
Iteration:   3380, Loss function: 5.236, Average Loss: 5.341, avg. samples / sec: 924.58
Iteration:   3400, Loss function: 4.771, Average Loss: 5.336, avg. samples / sec: 890.03
Iteration:   3420, Loss function: 5.241, Average Loss: 5.331, avg. samples / sec: 991.41
Iteration:   3440, Loss function: 4.568, Average Loss: 5.326, avg. samples / sec: 972.37
Iteration:   3460, Loss function: 5.225, Average Loss: 5.321, avg. samples / sec: 924.96
Iteration:   3480, Loss function: 5.205, Average Loss: 5.316, avg. samples / sec: 929.34
Iteration:   3500, Loss function: 5.133, Average Loss: 5.312, avg. samples / sec: 955.04
Iteration:   3520, Loss function: 5.175, Average Loss: 5.310, avg. samples / sec: 949.69
Iteration:   3540, Loss function: 4.893, Average Loss: 5.305, avg. samples / sec: 890.00
Iteration:   3560, Loss function: 4.922, Average Loss: 5.302, avg. samples / sec: 970.61
Iteration:   3580, Loss function: 4.995, Average Loss: 5.298, avg. samples / sec: 984.08
Iteration:   3600, Loss function: 5.144, Average Loss: 5.291, avg. samples / sec: 972.85
Iteration:   3620, Loss function: 4.810, Average Loss: 5.286, avg. samples / sec: 954.31
Iteration:   3640, Loss function: 4.733, Average Loss: 5.281, avg. samples / sec: 919.42
Iteration:   3660, Loss function: 5.191, Average Loss: 5.276, avg. samples / sec: 960.90
Iteration:   3680, Loss function: 5.153, Average Loss: 5.270, avg. samples / sec: 900.09
Iteration:   3700, Loss function: 4.958, Average Loss: 5.265, avg. samples / sec: 963.39
Iteration:   3720, Loss function: 4.898, Average Loss: 5.259, avg. samples / sec: 892.72
Iteration:   3740, Loss function: 5.195, Average Loss: 5.255, avg. samples / sec: 966.58
Iteration:   3760, Loss function: 5.096, Average Loss: 5.251, avg. samples / sec: 976.70
Iteration:   3780, Loss function: 4.871, Average Loss: 5.247, avg. samples / sec: 869.96
Iteration:   3800, Loss function: 5.350, Average Loss: 5.244, avg. samples / sec: 959.00
Iteration:   3820, Loss function: 4.984, Average Loss: 5.239, avg. samples / sec: 927.15
Iteration:   3840, Loss function: 4.804, Average Loss: 5.234, avg. samples / sec: 933.59
Iteration:   3860, Loss function: 5.021, Average Loss: 5.229, avg. samples / sec: 986.41
Iteration:   3880, Loss function: 5.069, Average Loss: 5.224, avg. samples / sec: 935.03
Iteration:   3900, Loss function: 5.160, Average Loss: 5.219, avg. samples / sec: 869.45
Iteration:   3920, Loss function: 5.094, Average Loss: 5.214, avg. samples / sec: 897.29
Iteration:   3940, Loss function: 5.074, Average Loss: 5.209, avg. samples / sec: 956.50
Iteration:   3960, Loss function: 4.940, Average Loss: 5.205, avg. samples / sec: 952.33
Iteration:   3980, Loss function: 4.897, Average Loss: 5.200, avg. samples / sec: 892.84
Iteration:   4000, Loss function: 4.936, Average Loss: 5.196, avg. samples / sec: 887.22
Iteration:   4020, Loss function: 4.919, Average Loss: 5.191, avg. samples / sec: 902.28
Iteration:   4040, Loss function: 5.050, Average Loss: 5.187, avg. samples / sec: 943.34
Iteration:   4060, Loss function: 5.158, Average Loss: 5.183, avg. samples / sec: 974.09
Iteration:   4080, Loss function: 5.030, Average Loss: 5.178, avg. samples / sec: 976.76
Iteration:   4100, Loss function: 5.065, Average Loss: 5.174, avg. samples / sec: 983.91
:::MLLOG {"namespace": "", "time_ms": 1639762041618, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639762041620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.053, Average Loss: 5.171, avg. samples / sec: 966.66
Iteration:   4140, Loss function: 5.027, Average Loss: 5.165, avg. samples / sec: 992.56
Iteration:   4160, Loss function: 5.121, Average Loss: 5.159, avg. samples / sec: 913.84
Iteration:   4180, Loss function: 4.954, Average Loss: 5.154, avg. samples / sec: 951.36
Iteration:   4200, Loss function: 4.942, Average Loss: 5.149, avg. samples / sec: 999.15
Iteration:   4220, Loss function: 4.948, Average Loss: 5.145, avg. samples / sec: 972.90
Iteration:   4240, Loss function: 4.870, Average Loss: 5.140, avg. samples / sec: 941.11
Iteration:   4260, Loss function: 5.165, Average Loss: 5.135, avg. samples / sec: 929.97
Iteration:   4280, Loss function: 5.055, Average Loss: 5.129, avg. samples / sec: 987.63
Iteration:   4300, Loss function: 4.795, Average Loss: 5.123, avg. samples / sec: 970.09
Iteration:   4320, Loss function: 4.871, Average Loss: 5.118, avg. samples / sec: 922.54
Iteration:   4340, Loss function: 4.616, Average Loss: 5.113, avg. samples / sec: 887.51
Iteration:   4360, Loss function: 5.040, Average Loss: 5.110, avg. samples / sec: 904.78
Iteration:   4380, Loss function: 4.949, Average Loss: 5.106, avg. samples / sec: 965.49
Iteration:   4400, Loss function: 5.151, Average Loss: 5.101, avg. samples / sec: 984.23
Iteration:   4420, Loss function: 5.018, Average Loss: 5.096, avg. samples / sec: 956.70
Iteration:   4440, Loss function: 4.839, Average Loss: 5.092, avg. samples / sec: 889.86
Iteration:   4460, Loss function: 4.977, Average Loss: 5.088, avg. samples / sec: 897.60
Iteration:   4480, Loss function: 5.002, Average Loss: 5.085, avg. samples / sec: 905.45
Iteration:   4500, Loss function: 4.947, Average Loss: 5.082, avg. samples / sec: 979.69
Iteration:   4520, Loss function: 4.864, Average Loss: 5.079, avg. samples / sec: 969.89
Iteration:   4540, Loss function: 5.030, Average Loss: 5.075, avg. samples / sec: 956.06
Iteration:   4560, Loss function: 4.868, Average Loss: 5.071, avg. samples / sec: 984.57
Iteration:   4580, Loss function: 4.757, Average Loss: 5.070, avg. samples / sec: 971.21
Iteration:   4600, Loss function: 4.700, Average Loss: 5.065, avg. samples / sec: 967.37
Iteration:   4620, Loss function: 4.684, Average Loss: 5.061, avg. samples / sec: 922.94
Iteration:   4640, Loss function: 4.820, Average Loss: 5.056, avg. samples / sec: 927.16
Iteration:   4660, Loss function: 4.700, Average Loss: 5.051, avg. samples / sec: 959.27
Iteration:   4680, Loss function: 5.273, Average Loss: 5.047, avg. samples / sec: 984.54
Iteration:   4700, Loss function: 4.736, Average Loss: 5.044, avg. samples / sec: 981.79
Iteration:   4720, Loss function: 4.733, Average Loss: 5.040, avg. samples / sec: 880.55
Iteration:   4740, Loss function: 4.858, Average Loss: 5.035, avg. samples / sec: 948.08
Iteration:   4760, Loss function: 4.682, Average Loss: 5.032, avg. samples / sec: 943.80
Iteration:   4780, Loss function: 5.112, Average Loss: 5.028, avg. samples / sec: 911.54
Iteration:   4800, Loss function: 4.914, Average Loss: 5.026, avg. samples / sec: 948.13
Iteration:   4820, Loss function: 4.905, Average Loss: 5.023, avg. samples / sec: 959.33
Iteration:   4840, Loss function: 5.094, Average Loss: 5.020, avg. samples / sec: 975.71
Iteration:   4860, Loss function: 4.747, Average Loss: 5.017, avg. samples / sec: 980.96
Iteration:   4880, Loss function: 5.193, Average Loss: 5.013, avg. samples / sec: 938.21
Iteration:   4900, Loss function: 4.521, Average Loss: 5.008, avg. samples / sec: 877.53
Iteration:   4920, Loss function: 4.924, Average Loss: 5.006, avg. samples / sec: 950.19
Iteration:   4940, Loss function: 4.884, Average Loss: 5.003, avg. samples / sec: 940.59
Iteration:   4960, Loss function: 4.823, Average Loss: 5.000, avg. samples / sec: 956.25
Iteration:   4980, Loss function: 4.806, Average Loss: 4.996, avg. samples / sec: 946.03
Iteration:   5000, Loss function: 4.910, Average Loss: 4.993, avg. samples / sec: 931.26
Iteration:   5020, Loss function: 5.096, Average Loss: 4.990, avg. samples / sec: 946.90
Iteration:   5040, Loss function: 4.722, Average Loss: 4.986, avg. samples / sec: 925.13
Iteration:   5060, Loss function: 4.781, Average Loss: 4.984, avg. samples / sec: 994.39
Iteration:   5080, Loss function: 4.578, Average Loss: 4.981, avg. samples / sec: 986.46
Iteration:   5100, Loss function: 4.665, Average Loss: 4.978, avg. samples / sec: 984.80
Iteration:   5120, Loss function: 4.628, Average Loss: 4.975, avg. samples / sec: 994.85
Iteration:   5140, Loss function: 4.671, Average Loss: 4.970, avg. samples / sec: 992.73
:::MLLOG {"namespace": "", "time_ms": 1639762165100, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.93 s
:::MLLOG {"namespace": "", "time_ms": 1639762196114, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639762196189, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762196190, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.953, Average Loss: 4.966, avg. samples / sec: 68.09
Iteration:   5180, Loss function: 4.800, Average Loss: 4.962, avg. samples / sec: 969.73
DONE (t=4.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10683
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21764
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09395
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13632
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20295
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21636
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10683 AP goal: 0.10000
Iteration:   5200, Loss function: 4.518, Average Loss: 4.957, avg. samples / sec: 1004.76
:::MLLOG {"namespace": "", "time_ms": 1639762202862, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202864, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10683460882273489, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762202864, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639762203010, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639762204
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:30:04 PM'
START TIMING RUN WAS 2021-12-17 05:18:25 PM
+ echo 'START TIMING RUN WAS 2021-12-17 05:18:25 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:30:04 PM'
ENDING TIMING RUN AT 2021-12-17 05:30:04 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ result=699
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-17 05:18:25 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-17 05:18:25 PM'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
