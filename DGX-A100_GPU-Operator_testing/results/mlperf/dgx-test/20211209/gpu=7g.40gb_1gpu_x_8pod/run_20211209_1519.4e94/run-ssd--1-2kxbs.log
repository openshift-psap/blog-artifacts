+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-2kxbs.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-2kxbs.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-2kxbs.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-62f7dc39-4870-51c0-9b21-86def482903a
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-62f7dc39-4870-51c0-9b21-86def482903a'
Found 1 MIG instances: MIG-62f7dc39-4870-51c0-9b21-86def482903a
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068289
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-2kxbs to the sync file ...
run-ssd--1-2kxbs Found 3 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
     3	run-ssd--1-2kxbs
Thu Dec  9 16:44:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296013, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296195, "event_type": "POINT_IN_TIME", "key": "seed", "value": 546675971, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 546675971
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068298156, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298156, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323258, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323258, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068325126, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325127, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325616, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325617, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325619, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.243, Average Loss: 0.022, avg. samples / sec: 4.20
Iteration:     20, Loss function: 21.054, Average Loss: 0.451, avg. samples / sec: 811.29
Iteration:     40, Loss function: 20.690, Average Loss: 0.852, avg. samples / sec: 829.96
Iteration:     60, Loss function: 20.399, Average Loss: 1.242, avg. samples / sec: 903.42
Iteration:     80, Loss function: 19.894, Average Loss: 1.614, avg. samples / sec: 884.43
Iteration:    100, Loss function: 14.329, Average Loss: 1.928, avg. samples / sec: 882.19
Iteration:    120, Loss function: 10.964, Average Loss: 2.124, avg. samples / sec: 888.72
Iteration:    140, Loss function: 9.776, Average Loss: 2.286, avg. samples / sec: 898.35
Iteration:    160, Loss function: 9.384, Average Loss: 2.429, avg. samples / sec: 907.84
Iteration:    180, Loss function: 9.005, Average Loss: 2.560, avg. samples / sec: 953.68
Iteration:    200, Loss function: 8.879, Average Loss: 2.686, avg. samples / sec: 933.12
Iteration:    220, Loss function: 8.573, Average Loss: 2.808, avg. samples / sec: 965.84
Iteration:    240, Loss function: 8.835, Average Loss: 2.926, avg. samples / sec: 954.19
Iteration:    260, Loss function: 8.678, Average Loss: 3.039, avg. samples / sec: 880.72
Iteration:    280, Loss function: 8.675, Average Loss: 3.151, avg. samples / sec: 947.49
Iteration:    300, Loss function: 8.113, Average Loss: 3.255, avg. samples / sec: 968.46
Iteration:    320, Loss function: 8.377, Average Loss: 3.355, avg. samples / sec: 947.89
Iteration:    340, Loss function: 8.396, Average Loss: 3.454, avg. samples / sec: 891.77
Iteration:    360, Loss function: 8.125, Average Loss: 3.548, avg. samples / sec: 922.27
Iteration:    380, Loss function: 7.994, Average Loss: 3.640, avg. samples / sec: 939.42
Iteration:    400, Loss function: 8.021, Average Loss: 3.725, avg. samples / sec: 950.47
Iteration:    420, Loss function: 7.710, Average Loss: 3.806, avg. samples / sec: 946.70
Iteration:    440, Loss function: 7.776, Average Loss: 3.884, avg. samples / sec: 945.73
Iteration:    460, Loss function: 7.879, Average Loss: 3.961, avg. samples / sec: 896.53
Iteration:    480, Loss function: 7.384, Average Loss: 4.035, avg. samples / sec: 960.15
Iteration:    500, Loss function: 7.424, Average Loss: 4.105, avg. samples / sec: 963.46
Iteration:    520, Loss function: 7.411, Average Loss: 4.174, avg. samples / sec: 984.47
Iteration:    540, Loss function: 7.418, Average Loss: 4.239, avg. samples / sec: 977.25
Iteration:    560, Loss function: 7.084, Average Loss: 4.302, avg. samples / sec: 937.17
Iteration:    580, Loss function: 7.147, Average Loss: 4.364, avg. samples / sec: 983.54
Iteration:    600, Loss function: 7.196, Average Loss: 4.422, avg. samples / sec: 928.85
Iteration:    620, Loss function: 6.991, Average Loss: 4.478, avg. samples / sec: 901.54
Iteration:    640, Loss function: 6.806, Average Loss: 4.533, avg. samples / sec: 922.05
Iteration:    660, Loss function: 7.115, Average Loss: 4.585, avg. samples / sec: 950.86
Iteration:    680, Loss function: 7.243, Average Loss: 4.636, avg. samples / sec: 934.54
Iteration:    700, Loss function: 6.811, Average Loss: 4.684, avg. samples / sec: 974.59
Iteration:    720, Loss function: 6.939, Average Loss: 4.733, avg. samples / sec: 925.06
Iteration:    740, Loss function: 6.779, Average Loss: 4.778, avg. samples / sec: 939.24
Iteration:    760, Loss function: 7.095, Average Loss: 4.822, avg. samples / sec: 948.45
Iteration:    780, Loss function: 6.789, Average Loss: 4.863, avg. samples / sec: 909.15
Iteration:    800, Loss function: 7.276, Average Loss: 4.904, avg. samples / sec: 964.96
Iteration:    820, Loss function: 6.885, Average Loss: 4.942, avg. samples / sec: 948.73
Iteration:    840, Loss function: 6.559, Average Loss: 4.978, avg. samples / sec: 962.77
Iteration:    860, Loss function: 6.605, Average Loss: 5.012, avg. samples / sec: 993.05
Iteration:    880, Loss function: 6.694, Average Loss: 5.045, avg. samples / sec: 960.30
Iteration:    900, Loss function: 6.765, Average Loss: 5.076, avg. samples / sec: 921.93
Iteration:    920, Loss function: 6.671, Average Loss: 5.105, avg. samples / sec: 876.40
Iteration:    940, Loss function: 6.796, Average Loss: 5.135, avg. samples / sec: 949.53
Iteration:    960, Loss function: 6.439, Average Loss: 5.164, avg. samples / sec: 973.39
Iteration:    980, Loss function: 6.459, Average Loss: 5.191, avg. samples / sec: 957.72
Iteration:   1000, Loss function: 6.675, Average Loss: 5.217, avg. samples / sec: 975.46
Iteration:   1020, Loss function: 6.276, Average Loss: 5.240, avg. samples / sec: 966.55
:::MLLOG {"namespace": "", "time_ms": 1639068451357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451359, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.603, Average Loss: 5.263, avg. samples / sec: 972.47
Iteration:   1060, Loss function: 6.312, Average Loss: 5.286, avg. samples / sec: 933.22
Iteration:   1080, Loss function: 6.241, Average Loss: 5.307, avg. samples / sec: 970.94
Iteration:   1100, Loss function: 6.326, Average Loss: 5.328, avg. samples / sec: 935.68
Iteration:   1120, Loss function: 6.134, Average Loss: 5.346, avg. samples / sec: 943.58
Iteration:   1140, Loss function: 6.298, Average Loss: 5.365, avg. samples / sec: 932.62
Iteration:   1160, Loss function: 6.145, Average Loss: 5.383, avg. samples / sec: 958.31
Iteration:   1180, Loss function: 6.261, Average Loss: 5.399, avg. samples / sec: 988.74
Iteration:   1200, Loss function: 6.227, Average Loss: 5.415, avg. samples / sec: 948.10
Iteration:   1220, Loss function: 6.168, Average Loss: 5.430, avg. samples / sec: 921.36
Iteration:   1240, Loss function: 6.325, Average Loss: 5.443, avg. samples / sec: 996.98
Iteration:   1260, Loss function: 5.921, Average Loss: 5.456, avg. samples / sec: 937.39
Iteration:   1280, Loss function: 5.917, Average Loss: 5.468, avg. samples / sec: 917.65
Iteration:   1300, Loss function: 6.178, Average Loss: 5.480, avg. samples / sec: 966.01
Iteration:   1320, Loss function: 6.201, Average Loss: 5.492, avg. samples / sec: 976.50
Iteration:   1340, Loss function: 5.861, Average Loss: 5.501, avg. samples / sec: 941.91
Iteration:   1360, Loss function: 5.893, Average Loss: 5.512, avg. samples / sec: 948.90
Iteration:   1380, Loss function: 6.216, Average Loss: 5.521, avg. samples / sec: 951.25
Iteration:   1400, Loss function: 6.006, Average Loss: 5.530, avg. samples / sec: 948.55
Iteration:   1420, Loss function: 5.921, Average Loss: 5.538, avg. samples / sec: 899.41
Iteration:   1440, Loss function: 6.077, Average Loss: 5.546, avg. samples / sec: 876.65
Iteration:   1460, Loss function: 6.026, Average Loss: 5.553, avg. samples / sec: 882.80
Iteration:   1480, Loss function: 6.006, Average Loss: 5.561, avg. samples / sec: 928.65
Iteration:   1500, Loss function: 6.064, Average Loss: 5.569, avg. samples / sec: 955.87
Iteration:   1520, Loss function: 5.804, Average Loss: 5.574, avg. samples / sec: 969.23
Iteration:   1540, Loss function: 5.967, Average Loss: 5.578, avg. samples / sec: 963.79
Iteration:   1560, Loss function: 5.642, Average Loss: 5.583, avg. samples / sec: 915.13
Iteration:   1580, Loss function: 5.458, Average Loss: 5.588, avg. samples / sec: 964.65
Iteration:   1600, Loss function: 6.221, Average Loss: 5.594, avg. samples / sec: 973.80
Iteration:   1620, Loss function: 5.626, Average Loss: 5.599, avg. samples / sec: 952.97
Iteration:   1640, Loss function: 5.937, Average Loss: 5.601, avg. samples / sec: 991.92
Iteration:   1660, Loss function: 5.994, Average Loss: 5.607, avg. samples / sec: 967.14
Iteration:   1680, Loss function: 5.622, Average Loss: 5.611, avg. samples / sec: 973.96
Iteration:   1700, Loss function: 5.422, Average Loss: 5.614, avg. samples / sec: 982.62
Iteration:   1720, Loss function: 5.620, Average Loss: 5.617, avg. samples / sec: 984.63
Iteration:   1740, Loss function: 5.845, Average Loss: 5.620, avg. samples / sec: 964.63
Iteration:   1760, Loss function: 5.540, Average Loss: 5.621, avg. samples / sec: 939.53
Iteration:   1780, Loss function: 5.524, Average Loss: 5.622, avg. samples / sec: 952.88
Iteration:   1800, Loss function: 5.575, Average Loss: 5.624, avg. samples / sec: 971.12
Iteration:   1820, Loss function: 5.863, Average Loss: 5.625, avg. samples / sec: 957.48
Iteration:   1840, Loss function: 5.691, Average Loss: 5.627, avg. samples / sec: 956.42
Iteration:   1860, Loss function: 5.680, Average Loss: 5.626, avg. samples / sec: 971.98
Iteration:   1880, Loss function: 5.738, Average Loss: 5.628, avg. samples / sec: 993.61
Iteration:   1900, Loss function: 5.667, Average Loss: 5.629, avg. samples / sec: 982.65
Iteration:   1920, Loss function: 5.606, Average Loss: 5.630, avg. samples / sec: 970.00
Iteration:   1940, Loss function: 5.661, Average Loss: 5.629, avg. samples / sec: 973.53
Iteration:   1960, Loss function: 5.570, Average Loss: 5.628, avg. samples / sec: 940.37
Iteration:   1980, Loss function: 5.740, Average Loss: 5.627, avg. samples / sec: 969.30
Iteration:   2000, Loss function: 5.702, Average Loss: 5.627, avg. samples / sec: 974.33
Iteration:   2020, Loss function: 5.701, Average Loss: 5.626, avg. samples / sec: 975.82
Iteration:   2040, Loss function: 5.689, Average Loss: 5.626, avg. samples / sec: 980.98
:::MLLOG {"namespace": "", "time_ms": 1639068574209, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.537, Average Loss: 5.624, avg. samples / sec: 966.04
Iteration:   2080, Loss function: 5.150, Average Loss: 5.622, avg. samples / sec: 939.90
Iteration:   2100, Loss function: 5.620, Average Loss: 5.620, avg. samples / sec: 920.39
Iteration:   2120, Loss function: 5.344, Average Loss: 5.617, avg. samples / sec: 858.51
Iteration:   2140, Loss function: 5.437, Average Loss: 5.613, avg. samples / sec: 927.81
Iteration:   2160, Loss function: 5.384, Average Loss: 5.610, avg. samples / sec: 981.99
Iteration:   2180, Loss function: 5.403, Average Loss: 5.608, avg. samples / sec: 951.92
Iteration:   2200, Loss function: 5.449, Average Loss: 5.605, avg. samples / sec: 985.53
Iteration:   2220, Loss function: 5.618, Average Loss: 5.602, avg. samples / sec: 936.16
Iteration:   2240, Loss function: 5.351, Average Loss: 5.599, avg. samples / sec: 942.19
Iteration:   2260, Loss function: 5.322, Average Loss: 5.596, avg. samples / sec: 932.55
Iteration:   2280, Loss function: 5.295, Average Loss: 5.594, avg. samples / sec: 988.36
Iteration:   2300, Loss function: 5.177, Average Loss: 5.592, avg. samples / sec: 957.50
Iteration:   2320, Loss function: 5.214, Average Loss: 5.590, avg. samples / sec: 988.50
Iteration:   2340, Loss function: 5.565, Average Loss: 5.586, avg. samples / sec: 955.34
Iteration:   2360, Loss function: 5.305, Average Loss: 5.582, avg. samples / sec: 970.00
Iteration:   2380, Loss function: 5.465, Average Loss: 5.578, avg. samples / sec: 978.57
Iteration:   2400, Loss function: 5.579, Average Loss: 5.573, avg. samples / sec: 966.02
Iteration:   2420, Loss function: 5.504, Average Loss: 5.569, avg. samples / sec: 992.22
Iteration:   2440, Loss function: 5.462, Average Loss: 5.566, avg. samples / sec: 929.26
Iteration:   2460, Loss function: 5.202, Average Loss: 5.563, avg. samples / sec: 954.26
Iteration:   2480, Loss function: 5.259, Average Loss: 5.559, avg. samples / sec: 938.74
Iteration:   2500, Loss function: 5.399, Average Loss: 5.555, avg. samples / sec: 970.01
Iteration:   2520, Loss function: 5.301, Average Loss: 5.550, avg. samples / sec: 969.30
Iteration:   2540, Loss function: 5.321, Average Loss: 5.548, avg. samples / sec: 963.80
Iteration:   2560, Loss function: 5.381, Average Loss: 5.544, avg. samples / sec: 971.43
Iteration:   2580, Loss function: 5.353, Average Loss: 5.541, avg. samples / sec: 964.19
Iteration:   2600, Loss function: 5.354, Average Loss: 5.537, avg. samples / sec: 947.87
Iteration:   2620, Loss function: 5.347, Average Loss: 5.532, avg. samples / sec: 940.57
Iteration:   2640, Loss function: 5.189, Average Loss: 5.529, avg. samples / sec: 916.39
Iteration:   2660, Loss function: 5.262, Average Loss: 5.526, avg. samples / sec: 976.07
Iteration:   2680, Loss function: 5.084, Average Loss: 5.523, avg. samples / sec: 954.67
Iteration:   2700, Loss function: 5.081, Average Loss: 5.517, avg. samples / sec: 985.94
Iteration:   2720, Loss function: 5.374, Average Loss: 5.514, avg. samples / sec: 979.20
Iteration:   2740, Loss function: 5.040, Average Loss: 5.509, avg. samples / sec: 980.43
Iteration:   2760, Loss function: 5.024, Average Loss: 5.505, avg. samples / sec: 943.09
Iteration:   2780, Loss function: 5.345, Average Loss: 5.501, avg. samples / sec: 933.30
Iteration:   2800, Loss function: 5.327, Average Loss: 5.497, avg. samples / sec: 986.12
Iteration:   2820, Loss function: 5.216, Average Loss: 5.492, avg. samples / sec: 977.60
Iteration:   2840, Loss function: 5.046, Average Loss: 5.488, avg. samples / sec: 986.74
Iteration:   2860, Loss function: 5.089, Average Loss: 5.483, avg. samples / sec: 955.70
Iteration:   2880, Loss function: 5.190, Average Loss: 5.478, avg. samples / sec: 988.31
Iteration:   2900, Loss function: 4.918, Average Loss: 5.473, avg. samples / sec: 940.20
Iteration:   2920, Loss function: 5.191, Average Loss: 5.467, avg. samples / sec: 949.73
Iteration:   2940, Loss function: 5.073, Average Loss: 5.463, avg. samples / sec: 927.14
Iteration:   2960, Loss function: 5.261, Average Loss: 5.459, avg. samples / sec: 941.44
Iteration:   2980, Loss function: 5.098, Average Loss: 5.454, avg. samples / sec: 934.80
Iteration:   3000, Loss function: 5.305, Average Loss: 5.448, avg. samples / sec: 947.92
Iteration:   3020, Loss function: 5.174, Average Loss: 5.442, avg. samples / sec: 977.85
Iteration:   3040, Loss function: 5.158, Average Loss: 5.437, avg. samples / sec: 988.01
Iteration:   3060, Loss function: 5.050, Average Loss: 5.431, avg. samples / sec: 974.39
Iteration:   3080, Loss function: 4.872, Average Loss: 5.427, avg. samples / sec: 985.68
:::MLLOG {"namespace": "", "time_ms": 1639068696659, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068696660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.187, Average Loss: 5.422, avg. samples / sec: 930.87
Iteration:   3120, Loss function: 4.909, Average Loss: 5.414, avg. samples / sec: 937.99
Iteration:   3140, Loss function: 5.096, Average Loss: 5.409, avg. samples / sec: 879.26
Iteration:   3160, Loss function: 5.458, Average Loss: 5.404, avg. samples / sec: 896.00
Iteration:   3180, Loss function: 5.027, Average Loss: 5.399, avg. samples / sec: 902.00
Iteration:   3200, Loss function: 5.201, Average Loss: 5.394, avg. samples / sec: 927.79
Iteration:   3220, Loss function: 5.200, Average Loss: 5.389, avg. samples / sec: 939.77
Iteration:   3240, Loss function: 5.245, Average Loss: 5.383, avg. samples / sec: 909.77
Iteration:   3260, Loss function: 5.054, Average Loss: 5.378, avg. samples / sec: 905.18
Iteration:   3280, Loss function: 4.728, Average Loss: 5.371, avg. samples / sec: 907.58
Iteration:   3300, Loss function: 4.788, Average Loss: 5.365, avg. samples / sec: 941.91
Iteration:   3320, Loss function: 5.040, Average Loss: 5.360, avg. samples / sec: 908.36
Iteration:   3340, Loss function: 5.273, Average Loss: 5.355, avg. samples / sec: 916.06
Iteration:   3360, Loss function: 5.151, Average Loss: 5.348, avg. samples / sec: 971.58
Iteration:   3380, Loss function: 5.282, Average Loss: 5.343, avg. samples / sec: 976.49
Iteration:   3400, Loss function: 4.794, Average Loss: 5.338, avg. samples / sec: 985.31
Iteration:   3420, Loss function: 5.228, Average Loss: 5.333, avg. samples / sec: 983.73
Iteration:   3440, Loss function: 4.768, Average Loss: 5.328, avg. samples / sec: 906.37
Iteration:   3460, Loss function: 5.112, Average Loss: 5.324, avg. samples / sec: 870.17
Iteration:   3480, Loss function: 5.218, Average Loss: 5.320, avg. samples / sec: 967.08
Iteration:   3500, Loss function: 5.200, Average Loss: 5.316, avg. samples / sec: 863.74
Iteration:   3520, Loss function: 5.026, Average Loss: 5.313, avg. samples / sec: 880.43
Iteration:   3540, Loss function: 5.017, Average Loss: 5.308, avg. samples / sec: 914.07
Iteration:   3560, Loss function: 4.879, Average Loss: 5.305, avg. samples / sec: 956.59
Iteration:   3580, Loss function: 5.172, Average Loss: 5.300, avg. samples / sec: 857.67
Iteration:   3600, Loss function: 5.153, Average Loss: 5.293, avg. samples / sec: 848.31
Iteration:   3620, Loss function: 4.737, Average Loss: 5.288, avg. samples / sec: 903.17
Iteration:   3640, Loss function: 4.707, Average Loss: 5.283, avg. samples / sec: 945.59
Iteration:   3660, Loss function: 5.012, Average Loss: 5.278, avg. samples / sec: 856.47
Iteration:   3680, Loss function: 5.128, Average Loss: 5.273, avg. samples / sec: 899.35
Iteration:   3700, Loss function: 5.053, Average Loss: 5.268, avg. samples / sec: 935.20
Iteration:   3720, Loss function: 4.903, Average Loss: 5.262, avg. samples / sec: 969.09
Iteration:   3740, Loss function: 5.125, Average Loss: 5.257, avg. samples / sec: 956.72
Iteration:   3760, Loss function: 4.918, Average Loss: 5.253, avg. samples / sec: 977.16
Iteration:   3780, Loss function: 5.061, Average Loss: 5.247, avg. samples / sec: 953.82
Iteration:   3800, Loss function: 4.946, Average Loss: 5.243, avg. samples / sec: 980.88
Iteration:   3820, Loss function: 5.092, Average Loss: 5.239, avg. samples / sec: 971.58
Iteration:   3840, Loss function: 4.900, Average Loss: 5.234, avg. samples / sec: 940.95
Iteration:   3860, Loss function: 5.005, Average Loss: 5.229, avg. samples / sec: 941.77
Iteration:   3880, Loss function: 5.327, Average Loss: 5.224, avg. samples / sec: 923.45
Iteration:   3900, Loss function: 5.007, Average Loss: 5.220, avg. samples / sec: 922.72
Iteration:   3920, Loss function: 5.015, Average Loss: 5.215, avg. samples / sec: 968.03
Iteration:   3940, Loss function: 5.009, Average Loss: 5.210, avg. samples / sec: 982.07
Iteration:   3960, Loss function: 4.962, Average Loss: 5.207, avg. samples / sec: 958.12
Iteration:   3980, Loss function: 4.669, Average Loss: 5.201, avg. samples / sec: 965.44
Iteration:   4000, Loss function: 5.207, Average Loss: 5.197, avg. samples / sec: 965.29
Iteration:   4020, Loss function: 5.084, Average Loss: 5.192, avg. samples / sec: 895.91
Iteration:   4040, Loss function: 5.149, Average Loss: 5.189, avg. samples / sec: 916.35
Iteration:   4060, Loss function: 5.095, Average Loss: 5.185, avg. samples / sec: 988.53
Iteration:   4080, Loss function: 5.123, Average Loss: 5.180, avg. samples / sec: 953.20
Iteration:   4100, Loss function: 5.031, Average Loss: 5.178, avg. samples / sec: 967.65
:::MLLOG {"namespace": "", "time_ms": 1639068822713, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068822717, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.074, Average Loss: 5.174, avg. samples / sec: 960.69
Iteration:   4140, Loss function: 5.037, Average Loss: 5.169, avg. samples / sec: 920.24
Iteration:   4160, Loss function: 5.162, Average Loss: 5.162, avg. samples / sec: 891.27
Iteration:   4180, Loss function: 5.010, Average Loss: 5.156, avg. samples / sec: 973.84
Iteration:   4200, Loss function: 4.741, Average Loss: 5.152, avg. samples / sec: 988.51
Iteration:   4220, Loss function: 4.870, Average Loss: 5.147, avg. samples / sec: 956.03
Iteration:   4240, Loss function: 4.845, Average Loss: 5.142, avg. samples / sec: 873.62
Iteration:   4260, Loss function: 5.144, Average Loss: 5.137, avg. samples / sec: 896.06
Iteration:   4280, Loss function: 4.865, Average Loss: 5.131, avg. samples / sec: 902.01
Iteration:   4300, Loss function: 4.653, Average Loss: 5.125, avg. samples / sec: 936.40
Iteration:   4320, Loss function: 4.835, Average Loss: 5.121, avg. samples / sec: 878.24
Iteration:   4340, Loss function: 4.759, Average Loss: 5.115, avg. samples / sec: 971.07
Iteration:   4360, Loss function: 4.916, Average Loss: 5.110, avg. samples / sec: 965.70
Iteration:   4380, Loss function: 5.054, Average Loss: 5.106, avg. samples / sec: 988.94
Iteration:   4400, Loss function: 4.888, Average Loss: 5.101, avg. samples / sec: 975.04
Iteration:   4420, Loss function: 4.739, Average Loss: 5.096, avg. samples / sec: 967.07
Iteration:   4440, Loss function: 4.727, Average Loss: 5.090, avg. samples / sec: 971.34
Iteration:   4460, Loss function: 5.149, Average Loss: 5.087, avg. samples / sec: 940.22
Iteration:   4480, Loss function: 5.010, Average Loss: 5.082, avg. samples / sec: 953.25
Iteration:   4500, Loss function: 4.857, Average Loss: 5.079, avg. samples / sec: 953.03
Iteration:   4520, Loss function: 4.595, Average Loss: 5.075, avg. samples / sec: 982.72
Iteration:   4540, Loss function: 4.818, Average Loss: 5.071, avg. samples / sec: 985.75
Iteration:   4560, Loss function: 4.997, Average Loss: 5.067, avg. samples / sec: 949.86
Iteration:   4580, Loss function: 4.734, Average Loss: 5.065, avg. samples / sec: 975.11
Iteration:   4600, Loss function: 4.792, Average Loss: 5.062, avg. samples / sec: 934.15
Iteration:   4620, Loss function: 4.841, Average Loss: 5.058, avg. samples / sec: 944.71
Iteration:   4640, Loss function: 4.528, Average Loss: 5.054, avg. samples / sec: 978.07
Iteration:   4660, Loss function: 4.880, Average Loss: 5.051, avg. samples / sec: 981.23
Iteration:   4680, Loss function: 5.404, Average Loss: 5.047, avg. samples / sec: 991.86
Iteration:   4700, Loss function: 4.759, Average Loss: 5.043, avg. samples / sec: 901.84
Iteration:   4720, Loss function: 4.698, Average Loss: 5.038, avg. samples / sec: 985.09
Iteration:   4740, Loss function: 4.828, Average Loss: 5.034, avg. samples / sec: 967.48
Iteration:   4760, Loss function: 4.631, Average Loss: 5.031, avg. samples / sec: 971.70
Iteration:   4780, Loss function: 5.096, Average Loss: 5.027, avg. samples / sec: 961.22
Iteration:   4800, Loss function: 4.969, Average Loss: 5.024, avg. samples / sec: 976.35
Iteration:   4820, Loss function: 4.871, Average Loss: 5.021, avg. samples / sec: 978.19
Iteration:   4840, Loss function: 4.967, Average Loss: 5.018, avg. samples / sec: 928.70
Iteration:   4860, Loss function: 4.769, Average Loss: 5.013, avg. samples / sec: 930.32
Iteration:   4880, Loss function: 5.208, Average Loss: 5.008, avg. samples / sec: 951.09
Iteration:   4900, Loss function: 4.627, Average Loss: 5.004, avg. samples / sec: 947.71
Iteration:   4920, Loss function: 4.880, Average Loss: 5.001, avg. samples / sec: 973.46
Iteration:   4940, Loss function: 4.701, Average Loss: 4.997, avg. samples / sec: 899.23
Iteration:   4960, Loss function: 4.502, Average Loss: 4.993, avg. samples / sec: 967.32
Iteration:   4980, Loss function: 4.480, Average Loss: 4.989, avg. samples / sec: 923.14
Iteration:   5000, Loss function: 4.802, Average Loss: 4.986, avg. samples / sec: 986.21
Iteration:   5020, Loss function: 4.943, Average Loss: 4.983, avg. samples / sec: 963.76
Iteration:   5040, Loss function: 4.834, Average Loss: 4.981, avg. samples / sec: 974.93
Iteration:   5060, Loss function: 4.896, Average Loss: 4.977, avg. samples / sec: 978.92
Iteration:   5080, Loss function: 4.499, Average Loss: 4.973, avg. samples / sec: 979.70
Iteration:   5100, Loss function: 4.718, Average Loss: 4.971, avg. samples / sec: 963.81
Iteration:   5120, Loss function: 4.500, Average Loss: 4.968, avg. samples / sec: 968.68
Iteration:   5140, Loss function: 4.931, Average Loss: 4.964, avg. samples / sec: 981.79
:::MLLOG {"namespace": "", "time_ms": 1639068945738, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.63 s
:::MLLOG {"namespace": "", "time_ms": 1639068974423, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068974463, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068974472, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.59s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.983, Average Loss: 4.960, avg. samples / sec: 73.54
Iteration:   5180, Loss function: 4.542, Average Loss: 4.955, avg. samples / sec: 972.30
DONE (t=4.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10649
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21968
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09174
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19059
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13744
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19877
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10649 AP goal: 0.10000
Iteration:   5200, Loss function: 4.608, Average Loss: 4.951, avg. samples / sec: 838.50
:::MLLOG {"namespace": "", "time_ms": 1639068981460, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981460, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10648787752474656, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981461, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981711, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:23 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:23 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296013, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296195, "event_type": "POINT_IN_TIME", "key": "seed", "value": 546675971, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 546675971
:::MLLOG {"namespace": "", "time_ms": 1639068298156, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298156, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298160, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323258, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323258, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068325126, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325127, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325616, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325617, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325619, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.243, Average Loss: 0.022, avg. samples / sec: 4.20
Iteration:     20, Loss function: 21.054, Average Loss: 0.451, avg. samples / sec: 811.29
Iteration:     40, Loss function: 20.690, Average Loss: 0.852, avg. samples / sec: 829.96
Iteration:     60, Loss function: 20.399, Average Loss: 1.242, avg. samples / sec: 903.42
Iteration:     80, Loss function: 19.894, Average Loss: 1.614, avg. samples / sec: 884.43
Iteration:    100, Loss function: 14.329, Average Loss: 1.928, avg. samples / sec: 882.19
Iteration:    120, Loss function: 10.964, Average Loss: 2.124, avg. samples / sec: 888.72
Iteration:    140, Loss function: 9.776, Average Loss: 2.286, avg. samples / sec: 898.35
Iteration:    160, Loss function: 9.384, Average Loss: 2.429, avg. samples / sec: 907.84
Iteration:    180, Loss function: 9.005, Average Loss: 2.560, avg. samples / sec: 953.68
Iteration:    200, Loss function: 8.879, Average Loss: 2.686, avg. samples / sec: 933.12
Iteration:    220, Loss function: 8.573, Average Loss: 2.808, avg. samples / sec: 965.84
Iteration:    240, Loss function: 8.835, Average Loss: 2.926, avg. samples / sec: 954.19
Iteration:    260, Loss function: 8.678, Average Loss: 3.039, avg. samples / sec: 880.72
Iteration:    280, Loss function: 8.675, Average Loss: 3.151, avg. samples / sec: 947.49
Iteration:    300, Loss function: 8.113, Average Loss: 3.255, avg. samples / sec: 968.46
Iteration:    320, Loss function: 8.377, Average Loss: 3.355, avg. samples / sec: 947.89
Iteration:    340, Loss function: 8.396, Average Loss: 3.454, avg. samples / sec: 891.77
Iteration:    360, Loss function: 8.125, Average Loss: 3.548, avg. samples / sec: 922.27
Iteration:    380, Loss function: 7.994, Average Loss: 3.640, avg. samples / sec: 939.42
Iteration:    400, Loss function: 8.021, Average Loss: 3.725, avg. samples / sec: 950.47
Iteration:    420, Loss function: 7.710, Average Loss: 3.806, avg. samples / sec: 946.70
Iteration:    440, Loss function: 7.776, Average Loss: 3.884, avg. samples / sec: 945.73
Iteration:    460, Loss function: 7.879, Average Loss: 3.961, avg. samples / sec: 896.53
Iteration:    480, Loss function: 7.384, Average Loss: 4.035, avg. samples / sec: 960.15
Iteration:    500, Loss function: 7.424, Average Loss: 4.105, avg. samples / sec: 963.46
Iteration:    520, Loss function: 7.411, Average Loss: 4.174, avg. samples / sec: 984.47
Iteration:    540, Loss function: 7.418, Average Loss: 4.239, avg. samples / sec: 977.25
Iteration:    560, Loss function: 7.084, Average Loss: 4.302, avg. samples / sec: 937.17
Iteration:    580, Loss function: 7.147, Average Loss: 4.364, avg. samples / sec: 983.54
Iteration:    600, Loss function: 7.196, Average Loss: 4.422, avg. samples / sec: 928.85
Iteration:    620, Loss function: 6.991, Average Loss: 4.478, avg. samples / sec: 901.54
Iteration:    640, Loss function: 6.806, Average Loss: 4.533, avg. samples / sec: 922.05
Iteration:    660, Loss function: 7.115, Average Loss: 4.585, avg. samples / sec: 950.86
Iteration:    680, Loss function: 7.243, Average Loss: 4.636, avg. samples / sec: 934.54
Iteration:    700, Loss function: 6.811, Average Loss: 4.684, avg. samples / sec: 974.59
Iteration:    720, Loss function: 6.939, Average Loss: 4.733, avg. samples / sec: 925.06
Iteration:    740, Loss function: 6.779, Average Loss: 4.778, avg. samples / sec: 939.24
Iteration:    760, Loss function: 7.095, Average Loss: 4.822, avg. samples / sec: 948.45
Iteration:    780, Loss function: 6.789, Average Loss: 4.863, avg. samples / sec: 909.15
Iteration:    800, Loss function: 7.276, Average Loss: 4.904, avg. samples / sec: 964.96
Iteration:    820, Loss function: 6.885, Average Loss: 4.942, avg. samples / sec: 948.73
Iteration:    840, Loss function: 6.559, Average Loss: 4.978, avg. samples / sec: 962.77
Iteration:    860, Loss function: 6.605, Average Loss: 5.012, avg. samples / sec: 993.05
Iteration:    880, Loss function: 6.694, Average Loss: 5.045, avg. samples / sec: 960.30
Iteration:    900, Loss function: 6.765, Average Loss: 5.076, avg. samples / sec: 921.93
Iteration:    920, Loss function: 6.671, Average Loss: 5.105, avg. samples / sec: 876.40
Iteration:    940, Loss function: 6.796, Average Loss: 5.135, avg. samples / sec: 949.53
Iteration:    960, Loss function: 6.439, Average Loss: 5.164, avg. samples / sec: 973.39
Iteration:    980, Loss function: 6.459, Average Loss: 5.191, avg. samples / sec: 957.72
Iteration:   1000, Loss function: 6.675, Average Loss: 5.217, avg. samples / sec: 975.46
Iteration:   1020, Loss function: 6.276, Average Loss: 5.240, avg. samples / sec: 966.55
:::MLLOG {"namespace": "", "time_ms": 1639068451357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451359, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.603, Average Loss: 5.263, avg. samples / sec: 972.47
Iteration:   1060, Loss function: 6.312, Average Loss: 5.286, avg. samples / sec: 933.22
Iteration:   1080, Loss function: 6.241, Average Loss: 5.307, avg. samples / sec: 970.94
Iteration:   1100, Loss function: 6.326, Average Loss: 5.328, avg. samples / sec: 935.68
Iteration:   1120, Loss function: 6.134, Average Loss: 5.346, avg. samples / sec: 943.58
Iteration:   1140, Loss function: 6.298, Average Loss: 5.365, avg. samples / sec: 932.62
Iteration:   1160, Loss function: 6.145, Average Loss: 5.383, avg. samples / sec: 958.31
Iteration:   1180, Loss function: 6.261, Average Loss: 5.399, avg. samples / sec: 988.74
Iteration:   1200, Loss function: 6.227, Average Loss: 5.415, avg. samples / sec: 948.10
Iteration:   1220, Loss function: 6.168, Average Loss: 5.430, avg. samples / sec: 921.36
Iteration:   1240, Loss function: 6.325, Average Loss: 5.443, avg. samples / sec: 996.98
Iteration:   1260, Loss function: 5.921, Average Loss: 5.456, avg. samples / sec: 937.39
Iteration:   1280, Loss function: 5.917, Average Loss: 5.468, avg. samples / sec: 917.65
Iteration:   1300, Loss function: 6.178, Average Loss: 5.480, avg. samples / sec: 966.01
Iteration:   1320, Loss function: 6.201, Average Loss: 5.492, avg. samples / sec: 976.50
Iteration:   1340, Loss function: 5.861, Average Loss: 5.501, avg. samples / sec: 941.91
Iteration:   1360, Loss function: 5.893, Average Loss: 5.512, avg. samples / sec: 948.90
Iteration:   1380, Loss function: 6.216, Average Loss: 5.521, avg. samples / sec: 951.25
Iteration:   1400, Loss function: 6.006, Average Loss: 5.530, avg. samples / sec: 948.55
Iteration:   1420, Loss function: 5.921, Average Loss: 5.538, avg. samples / sec: 899.41
Iteration:   1440, Loss function: 6.077, Average Loss: 5.546, avg. samples / sec: 876.65
Iteration:   1460, Loss function: 6.026, Average Loss: 5.553, avg. samples / sec: 882.80
Iteration:   1480, Loss function: 6.006, Average Loss: 5.561, avg. samples / sec: 928.65
Iteration:   1500, Loss function: 6.064, Average Loss: 5.569, avg. samples / sec: 955.87
Iteration:   1520, Loss function: 5.804, Average Loss: 5.574, avg. samples / sec: 969.23
Iteration:   1540, Loss function: 5.967, Average Loss: 5.578, avg. samples / sec: 963.79
Iteration:   1560, Loss function: 5.642, Average Loss: 5.583, avg. samples / sec: 915.13
Iteration:   1580, Loss function: 5.458, Average Loss: 5.588, avg. samples / sec: 964.65
Iteration:   1600, Loss function: 6.221, Average Loss: 5.594, avg. samples / sec: 973.80
Iteration:   1620, Loss function: 5.626, Average Loss: 5.599, avg. samples / sec: 952.97
Iteration:   1640, Loss function: 5.937, Average Loss: 5.601, avg. samples / sec: 991.92
Iteration:   1660, Loss function: 5.994, Average Loss: 5.607, avg. samples / sec: 967.14
Iteration:   1680, Loss function: 5.622, Average Loss: 5.611, avg. samples / sec: 973.96
Iteration:   1700, Loss function: 5.422, Average Loss: 5.614, avg. samples / sec: 982.62
Iteration:   1720, Loss function: 5.620, Average Loss: 5.617, avg. samples / sec: 984.63
Iteration:   1740, Loss function: 5.845, Average Loss: 5.620, avg. samples / sec: 964.63
Iteration:   1760, Loss function: 5.540, Average Loss: 5.621, avg. samples / sec: 939.53
Iteration:   1780, Loss function: 5.524, Average Loss: 5.622, avg. samples / sec: 952.88
Iteration:   1800, Loss function: 5.575, Average Loss: 5.624, avg. samples / sec: 971.12
Iteration:   1820, Loss function: 5.863, Average Loss: 5.625, avg. samples / sec: 957.48
Iteration:   1840, Loss function: 5.691, Average Loss: 5.627, avg. samples / sec: 956.42
Iteration:   1860, Loss function: 5.680, Average Loss: 5.626, avg. samples / sec: 971.98
Iteration:   1880, Loss function: 5.738, Average Loss: 5.628, avg. samples / sec: 993.61
Iteration:   1900, Loss function: 5.667, Average Loss: 5.629, avg. samples / sec: 982.65
Iteration:   1920, Loss function: 5.606, Average Loss: 5.630, avg. samples / sec: 970.00
Iteration:   1940, Loss function: 5.661, Average Loss: 5.629, avg. samples / sec: 973.53
Iteration:   1960, Loss function: 5.570, Average Loss: 5.628, avg. samples / sec: 940.37
Iteration:   1980, Loss function: 5.740, Average Loss: 5.627, avg. samples / sec: 969.30
Iteration:   2000, Loss function: 5.702, Average Loss: 5.627, avg. samples / sec: 974.33
Iteration:   2020, Loss function: 5.701, Average Loss: 5.626, avg. samples / sec: 975.82
Iteration:   2040, Loss function: 5.689, Average Loss: 5.626, avg. samples / sec: 980.98
:::MLLOG {"namespace": "", "time_ms": 1639068574209, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.537, Average Loss: 5.624, avg. samples / sec: 966.04
Iteration:   2080, Loss function: 5.150, Average Loss: 5.622, avg. samples / sec: 939.90
Iteration:   2100, Loss function: 5.620, Average Loss: 5.620, avg. samples / sec: 920.39
Iteration:   2120, Loss function: 5.344, Average Loss: 5.617, avg. samples / sec: 858.51
Iteration:   2140, Loss function: 5.437, Average Loss: 5.613, avg. samples / sec: 927.81
Iteration:   2160, Loss function: 5.384, Average Loss: 5.610, avg. samples / sec: 981.99
Iteration:   2180, Loss function: 5.403, Average Loss: 5.608, avg. samples / sec: 951.92
Iteration:   2200, Loss function: 5.449, Average Loss: 5.605, avg. samples / sec: 985.53
Iteration:   2220, Loss function: 5.618, Average Loss: 5.602, avg. samples / sec: 936.16
Iteration:   2240, Loss function: 5.351, Average Loss: 5.599, avg. samples / sec: 942.19
Iteration:   2260, Loss function: 5.322, Average Loss: 5.596, avg. samples / sec: 932.55
Iteration:   2280, Loss function: 5.295, Average Loss: 5.594, avg. samples / sec: 988.36
Iteration:   2300, Loss function: 5.177, Average Loss: 5.592, avg. samples / sec: 957.50
Iteration:   2320, Loss function: 5.214, Average Loss: 5.590, avg. samples / sec: 988.50
Iteration:   2340, Loss function: 5.565, Average Loss: 5.586, avg. samples / sec: 955.34
Iteration:   2360, Loss function: 5.305, Average Loss: 5.582, avg. samples / sec: 970.00
Iteration:   2380, Loss function: 5.465, Average Loss: 5.578, avg. samples / sec: 978.57
Iteration:   2400, Loss function: 5.579, Average Loss: 5.573, avg. samples / sec: 966.02
Iteration:   2420, Loss function: 5.504, Average Loss: 5.569, avg. samples / sec: 992.22
Iteration:   2440, Loss function: 5.462, Average Loss: 5.566, avg. samples / sec: 929.26
Iteration:   2460, Loss function: 5.202, Average Loss: 5.563, avg. samples / sec: 954.26
Iteration:   2480, Loss function: 5.259, Average Loss: 5.559, avg. samples / sec: 938.74
Iteration:   2500, Loss function: 5.399, Average Loss: 5.555, avg. samples / sec: 970.01
Iteration:   2520, Loss function: 5.301, Average Loss: 5.550, avg. samples / sec: 969.30
Iteration:   2540, Loss function: 5.321, Average Loss: 5.548, avg. samples / sec: 963.80
Iteration:   2560, Loss function: 5.381, Average Loss: 5.544, avg. samples / sec: 971.43
Iteration:   2580, Loss function: 5.353, Average Loss: 5.541, avg. samples / sec: 964.19
Iteration:   2600, Loss function: 5.354, Average Loss: 5.537, avg. samples / sec: 947.87
Iteration:   2620, Loss function: 5.347, Average Loss: 5.532, avg. samples / sec: 940.57
Iteration:   2640, Loss function: 5.189, Average Loss: 5.529, avg. samples / sec: 916.39
Iteration:   2660, Loss function: 5.262, Average Loss: 5.526, avg. samples / sec: 976.07
Iteration:   2680, Loss function: 5.084, Average Loss: 5.523, avg. samples / sec: 954.67
Iteration:   2700, Loss function: 5.081, Average Loss: 5.517, avg. samples / sec: 985.94
Iteration:   2720, Loss function: 5.374, Average Loss: 5.514, avg. samples / sec: 979.20
Iteration:   2740, Loss function: 5.040, Average Loss: 5.509, avg. samples / sec: 980.43
Iteration:   2760, Loss function: 5.024, Average Loss: 5.505, avg. samples / sec: 943.09
Iteration:   2780, Loss function: 5.345, Average Loss: 5.501, avg. samples / sec: 933.30
Iteration:   2800, Loss function: 5.327, Average Loss: 5.497, avg. samples / sec: 986.12
Iteration:   2820, Loss function: 5.216, Average Loss: 5.492, avg. samples / sec: 977.60
Iteration:   2840, Loss function: 5.046, Average Loss: 5.488, avg. samples / sec: 986.74
Iteration:   2860, Loss function: 5.089, Average Loss: 5.483, avg. samples / sec: 955.70
Iteration:   2880, Loss function: 5.190, Average Loss: 5.478, avg. samples / sec: 988.31
Iteration:   2900, Loss function: 4.918, Average Loss: 5.473, avg. samples / sec: 940.20
Iteration:   2920, Loss function: 5.191, Average Loss: 5.467, avg. samples / sec: 949.73
Iteration:   2940, Loss function: 5.073, Average Loss: 5.463, avg. samples / sec: 927.14
Iteration:   2960, Loss function: 5.261, Average Loss: 5.459, avg. samples / sec: 941.44
Iteration:   2980, Loss function: 5.098, Average Loss: 5.454, avg. samples / sec: 934.80
Iteration:   3000, Loss function: 5.305, Average Loss: 5.448, avg. samples / sec: 947.92
Iteration:   3020, Loss function: 5.174, Average Loss: 5.442, avg. samples / sec: 977.85
Iteration:   3040, Loss function: 5.158, Average Loss: 5.437, avg. samples / sec: 988.01
Iteration:   3060, Loss function: 5.050, Average Loss: 5.431, avg. samples / sec: 974.39
Iteration:   3080, Loss function: 4.872, Average Loss: 5.427, avg. samples / sec: 985.68
:::MLLOG {"namespace": "", "time_ms": 1639068696659, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068696660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.187, Average Loss: 5.422, avg. samples / sec: 930.87
Iteration:   3120, Loss function: 4.909, Average Loss: 5.414, avg. samples / sec: 937.99
Iteration:   3140, Loss function: 5.096, Average Loss: 5.409, avg. samples / sec: 879.26
Iteration:   3160, Loss function: 5.458, Average Loss: 5.404, avg. samples / sec: 896.00
Iteration:   3180, Loss function: 5.027, Average Loss: 5.399, avg. samples / sec: 902.00
Iteration:   3200, Loss function: 5.201, Average Loss: 5.394, avg. samples / sec: 927.79
Iteration:   3220, Loss function: 5.200, Average Loss: 5.389, avg. samples / sec: 939.77
Iteration:   3240, Loss function: 5.245, Average Loss: 5.383, avg. samples / sec: 909.77
Iteration:   3260, Loss function: 5.054, Average Loss: 5.378, avg. samples / sec: 905.18
Iteration:   3280, Loss function: 4.728, Average Loss: 5.371, avg. samples / sec: 907.58
Iteration:   3300, Loss function: 4.788, Average Loss: 5.365, avg. samples / sec: 941.91
Iteration:   3320, Loss function: 5.040, Average Loss: 5.360, avg. samples / sec: 908.36
Iteration:   3340, Loss function: 5.273, Average Loss: 5.355, avg. samples / sec: 916.06
Iteration:   3360, Loss function: 5.151, Average Loss: 5.348, avg. samples / sec: 971.58
Iteration:   3380, Loss function: 5.282, Average Loss: 5.343, avg. samples / sec: 976.49
Iteration:   3400, Loss function: 4.794, Average Loss: 5.338, avg. samples / sec: 985.31
Iteration:   3420, Loss function: 5.228, Average Loss: 5.333, avg. samples / sec: 983.73
Iteration:   3440, Loss function: 4.768, Average Loss: 5.328, avg. samples / sec: 906.37
Iteration:   3460, Loss function: 5.112, Average Loss: 5.324, avg. samples / sec: 870.17
Iteration:   3480, Loss function: 5.218, Average Loss: 5.320, avg. samples / sec: 967.08
Iteration:   3500, Loss function: 5.200, Average Loss: 5.316, avg. samples / sec: 863.74
Iteration:   3520, Loss function: 5.026, Average Loss: 5.313, avg. samples / sec: 880.43
Iteration:   3540, Loss function: 5.017, Average Loss: 5.308, avg. samples / sec: 914.07
Iteration:   3560, Loss function: 4.879, Average Loss: 5.305, avg. samples / sec: 956.59
Iteration:   3580, Loss function: 5.172, Average Loss: 5.300, avg. samples / sec: 857.67
Iteration:   3600, Loss function: 5.153, Average Loss: 5.293, avg. samples / sec: 848.31
Iteration:   3620, Loss function: 4.737, Average Loss: 5.288, avg. samples / sec: 903.17
Iteration:   3640, Loss function: 4.707, Average Loss: 5.283, avg. samples / sec: 945.59
Iteration:   3660, Loss function: 5.012, Average Loss: 5.278, avg. samples / sec: 856.47
Iteration:   3680, Loss function: 5.128, Average Loss: 5.273, avg. samples / sec: 899.35
Iteration:   3700, Loss function: 5.053, Average Loss: 5.268, avg. samples / sec: 935.20
Iteration:   3720, Loss function: 4.903, Average Loss: 5.262, avg. samples / sec: 969.09
Iteration:   3740, Loss function: 5.125, Average Loss: 5.257, avg. samples / sec: 956.72
Iteration:   3760, Loss function: 4.918, Average Loss: 5.253, avg. samples / sec: 977.16
Iteration:   3780, Loss function: 5.061, Average Loss: 5.247, avg. samples / sec: 953.82
Iteration:   3800, Loss function: 4.946, Average Loss: 5.243, avg. samples / sec: 980.88
Iteration:   3820, Loss function: 5.092, Average Loss: 5.239, avg. samples / sec: 971.58
Iteration:   3840, Loss function: 4.900, Average Loss: 5.234, avg. samples / sec: 940.95
Iteration:   3860, Loss function: 5.005, Average Loss: 5.229, avg. samples / sec: 941.77
Iteration:   3880, Loss function: 5.327, Average Loss: 5.224, avg. samples / sec: 923.45
Iteration:   3900, Loss function: 5.007, Average Loss: 5.220, avg. samples / sec: 922.72
Iteration:   3920, Loss function: 5.015, Average Loss: 5.215, avg. samples / sec: 968.03
Iteration:   3940, Loss function: 5.009, Average Loss: 5.210, avg. samples / sec: 982.07
Iteration:   3960, Loss function: 4.962, Average Loss: 5.207, avg. samples / sec: 958.12
Iteration:   3980, Loss function: 4.669, Average Loss: 5.201, avg. samples / sec: 965.44
Iteration:   4000, Loss function: 5.207, Average Loss: 5.197, avg. samples / sec: 965.29
Iteration:   4020, Loss function: 5.084, Average Loss: 5.192, avg. samples / sec: 895.91
Iteration:   4040, Loss function: 5.149, Average Loss: 5.189, avg. samples / sec: 916.35
Iteration:   4060, Loss function: 5.095, Average Loss: 5.185, avg. samples / sec: 988.53
Iteration:   4080, Loss function: 5.123, Average Loss: 5.180, avg. samples / sec: 953.20
Iteration:   4100, Loss function: 5.031, Average Loss: 5.178, avg. samples / sec: 967.65
:::MLLOG {"namespace": "", "time_ms": 1639068822713, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068822717, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.074, Average Loss: 5.174, avg. samples / sec: 960.69
Iteration:   4140, Loss function: 5.037, Average Loss: 5.169, avg. samples / sec: 920.24
Iteration:   4160, Loss function: 5.162, Average Loss: 5.162, avg. samples / sec: 891.27
Iteration:   4180, Loss function: 5.010, Average Loss: 5.156, avg. samples / sec: 973.84
Iteration:   4200, Loss function: 4.741, Average Loss: 5.152, avg. samples / sec: 988.51
Iteration:   4220, Loss function: 4.870, Average Loss: 5.147, avg. samples / sec: 956.03
Iteration:   4240, Loss function: 4.845, Average Loss: 5.142, avg. samples / sec: 873.62
Iteration:   4260, Loss function: 5.144, Average Loss: 5.137, avg. samples / sec: 896.06
Iteration:   4280, Loss function: 4.865, Average Loss: 5.131, avg. samples / sec: 902.01
Iteration:   4300, Loss function: 4.653, Average Loss: 5.125, avg. samples / sec: 936.40
Iteration:   4320, Loss function: 4.835, Average Loss: 5.121, avg. samples / sec: 878.24
Iteration:   4340, Loss function: 4.759, Average Loss: 5.115, avg. samples / sec: 971.07
Iteration:   4360, Loss function: 4.916, Average Loss: 5.110, avg. samples / sec: 965.70
Iteration:   4380, Loss function: 5.054, Average Loss: 5.106, avg. samples / sec: 988.94
Iteration:   4400, Loss function: 4.888, Average Loss: 5.101, avg. samples / sec: 975.04
Iteration:   4420, Loss function: 4.739, Average Loss: 5.096, avg. samples / sec: 967.07
Iteration:   4440, Loss function: 4.727, Average Loss: 5.090, avg. samples / sec: 971.34
Iteration:   4460, Loss function: 5.149, Average Loss: 5.087, avg. samples / sec: 940.22
Iteration:   4480, Loss function: 5.010, Average Loss: 5.082, avg. samples / sec: 953.25
Iteration:   4500, Loss function: 4.857, Average Loss: 5.079, avg. samples / sec: 953.03
Iteration:   4520, Loss function: 4.595, Average Loss: 5.075, avg. samples / sec: 982.72
Iteration:   4540, Loss function: 4.818, Average Loss: 5.071, avg. samples / sec: 985.75
Iteration:   4560, Loss function: 4.997, Average Loss: 5.067, avg. samples / sec: 949.86
Iteration:   4580, Loss function: 4.734, Average Loss: 5.065, avg. samples / sec: 975.11
Iteration:   4600, Loss function: 4.792, Average Loss: 5.062, avg. samples / sec: 934.15
Iteration:   4620, Loss function: 4.841, Average Loss: 5.058, avg. samples / sec: 944.71
Iteration:   4640, Loss function: 4.528, Average Loss: 5.054, avg. samples / sec: 978.07
Iteration:   4660, Loss function: 4.880, Average Loss: 5.051, avg. samples / sec: 981.23
Iteration:   4680, Loss function: 5.404, Average Loss: 5.047, avg. samples / sec: 991.86
Iteration:   4700, Loss function: 4.759, Average Loss: 5.043, avg. samples / sec: 901.84
Iteration:   4720, Loss function: 4.698, Average Loss: 5.038, avg. samples / sec: 985.09
Iteration:   4740, Loss function: 4.828, Average Loss: 5.034, avg. samples / sec: 967.48
Iteration:   4760, Loss function: 4.631, Average Loss: 5.031, avg. samples / sec: 971.70
Iteration:   4780, Loss function: 5.096, Average Loss: 5.027, avg. samples / sec: 961.22
Iteration:   4800, Loss function: 4.969, Average Loss: 5.024, avg. samples / sec: 976.35
Iteration:   4820, Loss function: 4.871, Average Loss: 5.021, avg. samples / sec: 978.19
Iteration:   4840, Loss function: 4.967, Average Loss: 5.018, avg. samples / sec: 928.70
Iteration:   4860, Loss function: 4.769, Average Loss: 5.013, avg. samples / sec: 930.32
Iteration:   4880, Loss function: 5.208, Average Loss: 5.008, avg. samples / sec: 951.09
Iteration:   4900, Loss function: 4.627, Average Loss: 5.004, avg. samples / sec: 947.71
Iteration:   4920, Loss function: 4.880, Average Loss: 5.001, avg. samples / sec: 973.46
Iteration:   4940, Loss function: 4.701, Average Loss: 4.997, avg. samples / sec: 899.23
Iteration:   4960, Loss function: 4.502, Average Loss: 4.993, avg. samples / sec: 967.32
Iteration:   4980, Loss function: 4.480, Average Loss: 4.989, avg. samples / sec: 923.14
Iteration:   5000, Loss function: 4.802, Average Loss: 4.986, avg. samples / sec: 986.21
Iteration:   5020, Loss function: 4.943, Average Loss: 4.983, avg. samples / sec: 963.76
Iteration:   5040, Loss function: 4.834, Average Loss: 4.981, avg. samples / sec: 974.93
Iteration:   5060, Loss function: 4.896, Average Loss: 4.977, avg. samples / sec: 978.92
Iteration:   5080, Loss function: 4.499, Average Loss: 4.973, avg. samples / sec: 979.70
Iteration:   5100, Loss function: 4.718, Average Loss: 4.971, avg. samples / sec: 963.81
Iteration:   5120, Loss function: 4.500, Average Loss: 4.968, avg. samples / sec: 968.68
Iteration:   5140, Loss function: 4.931, Average Loss: 4.964, avg. samples / sec: 981.79
:::MLLOG {"namespace": "", "time_ms": 1639068945738, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.63 s
:::MLLOG {"namespace": "", "time_ms": 1639068974423, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068974463, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068974472, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.59s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.983, Average Loss: 4.960, avg. samples / sec: 73.54
Iteration:   5180, Loss function: 4.542, Average Loss: 4.955, avg. samples / sec: 972.30
DONE (t=4.42s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10649
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21968
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09174
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19059
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13744
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19877
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21059
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10649 AP goal: 0.10000
Iteration:   5200, Loss function: 4.608, Average Loss: 4.951, avg. samples / sec: 838.50
:::MLLOG {"namespace": "", "time_ms": 1639068981460, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981460, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10648787752474656, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981461, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981711, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068983
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:23 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:49 PM'
START TIMING RUN WAS 2021-12-09 04:44:49 PM
ENDING TIMING RUN AT 2021-12-09 04:56:23 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:23 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
+ result=694
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:49 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:49 PM'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
