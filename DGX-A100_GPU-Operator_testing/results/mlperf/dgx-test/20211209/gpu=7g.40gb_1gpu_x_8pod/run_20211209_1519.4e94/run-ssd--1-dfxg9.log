+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-dfxg9.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-dfxg9.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-dfxg9.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169'
Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068289
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-dfxg9 to the sync file ...
run-ssd--1-dfxg9 Found 5 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
     3	run-ssd--1-2kxbs
     4	run-ssd--1-gqlkg
     5	run-ssd--1-dfxg9
Thu Dec  9 16:44:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296899, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068297027, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3094694349, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3094694349
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068298916, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298916, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298922, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323940, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323940, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068325827, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325828, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326198, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326199, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326200, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.885, Average Loss: 0.023, avg. samples / sec: 4.24
Iteration:     20, Loss function: 21.203, Average Loss: 0.459, avg. samples / sec: 763.78
Iteration:     40, Loss function: 20.815, Average Loss: 0.861, avg. samples / sec: 832.39
Iteration:     60, Loss function: 20.500, Average Loss: 1.251, avg. samples / sec: 868.34
Iteration:     80, Loss function: 19.795, Average Loss: 1.624, avg. samples / sec: 825.88
Iteration:    100, Loss function: 15.448, Average Loss: 1.949, avg. samples / sec: 908.37
Iteration:    120, Loss function: 12.037, Average Loss: 2.159, avg. samples / sec: 920.31
Iteration:    140, Loss function: 9.671, Average Loss: 2.320, avg. samples / sec: 908.05
Iteration:    160, Loss function: 9.250, Average Loss: 2.463, avg. samples / sec: 923.77
Iteration:    180, Loss function: 8.981, Average Loss: 2.596, avg. samples / sec: 957.02
Iteration:    200, Loss function: 8.596, Average Loss: 2.722, avg. samples / sec: 902.51
Iteration:    220, Loss function: 8.633, Average Loss: 2.843, avg. samples / sec: 955.79
Iteration:    240, Loss function: 8.637, Average Loss: 2.959, avg. samples / sec: 962.18
Iteration:    260, Loss function: 8.849, Average Loss: 3.071, avg. samples / sec: 968.89
Iteration:    280, Loss function: 8.913, Average Loss: 3.185, avg. samples / sec: 870.84
Iteration:    300, Loss function: 8.416, Average Loss: 3.292, avg. samples / sec: 944.27
Iteration:    320, Loss function: 8.301, Average Loss: 3.393, avg. samples / sec: 938.38
Iteration:    340, Loss function: 8.378, Average Loss: 3.491, avg. samples / sec: 930.40
Iteration:    360, Loss function: 8.119, Average Loss: 3.583, avg. samples / sec: 967.03
Iteration:    380, Loss function: 7.963, Average Loss: 3.673, avg. samples / sec: 978.37
Iteration:    400, Loss function: 7.989, Average Loss: 3.758, avg. samples / sec: 961.27
Iteration:    420, Loss function: 7.764, Average Loss: 3.840, avg. samples / sec: 938.93
Iteration:    440, Loss function: 7.972, Average Loss: 3.921, avg. samples / sec: 937.30
Iteration:    460, Loss function: 7.809, Average Loss: 3.997, avg. samples / sec: 901.59
Iteration:    480, Loss function: 7.545, Average Loss: 4.072, avg. samples / sec: 937.64
Iteration:    500, Loss function: 7.605, Average Loss: 4.142, avg. samples / sec: 954.88
Iteration:    520, Loss function: 7.347, Average Loss: 4.209, avg. samples / sec: 899.03
Iteration:    540, Loss function: 7.534, Average Loss: 4.274, avg. samples / sec: 906.54
Iteration:    560, Loss function: 7.301, Average Loss: 4.336, avg. samples / sec: 946.99
Iteration:    580, Loss function: 7.264, Average Loss: 4.399, avg. samples / sec: 972.60
Iteration:    600, Loss function: 7.130, Average Loss: 4.457, avg. samples / sec: 898.71
Iteration:    620, Loss function: 7.069, Average Loss: 4.512, avg. samples / sec: 942.11
Iteration:    640, Loss function: 6.901, Average Loss: 4.566, avg. samples / sec: 967.92
Iteration:    660, Loss function: 7.081, Average Loss: 4.619, avg. samples / sec: 983.38
Iteration:    680, Loss function: 7.282, Average Loss: 4.671, avg. samples / sec: 930.72
Iteration:    700, Loss function: 6.866, Average Loss: 4.719, avg. samples / sec: 983.91
Iteration:    720, Loss function: 7.005, Average Loss: 4.768, avg. samples / sec: 901.33
Iteration:    740, Loss function: 6.886, Average Loss: 4.813, avg. samples / sec: 900.49
Iteration:    760, Loss function: 7.068, Average Loss: 4.857, avg. samples / sec: 981.97
Iteration:    780, Loss function: 6.835, Average Loss: 4.898, avg. samples / sec: 986.29
Iteration:    800, Loss function: 7.092, Average Loss: 4.938, avg. samples / sec: 954.86
Iteration:    820, Loss function: 6.885, Average Loss: 4.975, avg. samples / sec: 977.86
Iteration:    840, Loss function: 6.666, Average Loss: 5.012, avg. samples / sec: 946.22
Iteration:    860, Loss function: 6.765, Average Loss: 5.046, avg. samples / sec: 883.57
Iteration:    880, Loss function: 6.776, Average Loss: 5.078, avg. samples / sec: 990.74
Iteration:    900, Loss function: 6.659, Average Loss: 5.109, avg. samples / sec: 979.26
Iteration:    920, Loss function: 6.698, Average Loss: 5.138, avg. samples / sec: 951.82
Iteration:    940, Loss function: 6.680, Average Loss: 5.168, avg. samples / sec: 950.95
Iteration:    960, Loss function: 6.395, Average Loss: 5.196, avg. samples / sec: 934.90
Iteration:    980, Loss function: 6.396, Average Loss: 5.224, avg. samples / sec: 878.23
Iteration:   1000, Loss function: 6.482, Average Loss: 5.248, avg. samples / sec: 855.28
Iteration:   1020, Loss function: 6.216, Average Loss: 5.272, avg. samples / sec: 899.98
:::MLLOG {"namespace": "", "time_ms": 1639068452862, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068452863, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.386, Average Loss: 5.295, avg. samples / sec: 948.46
Iteration:   1060, Loss function: 6.379, Average Loss: 5.318, avg. samples / sec: 977.29
Iteration:   1080, Loss function: 6.371, Average Loss: 5.339, avg. samples / sec: 951.16
Iteration:   1100, Loss function: 6.247, Average Loss: 5.359, avg. samples / sec: 947.81
Iteration:   1120, Loss function: 6.115, Average Loss: 5.379, avg. samples / sec: 956.10
Iteration:   1140, Loss function: 6.416, Average Loss: 5.398, avg. samples / sec: 955.57
Iteration:   1160, Loss function: 6.178, Average Loss: 5.415, avg. samples / sec: 910.45
Iteration:   1180, Loss function: 6.272, Average Loss: 5.432, avg. samples / sec: 944.17
Iteration:   1200, Loss function: 6.223, Average Loss: 5.448, avg. samples / sec: 986.47
Iteration:   1220, Loss function: 6.173, Average Loss: 5.462, avg. samples / sec: 975.03
Iteration:   1240, Loss function: 5.995, Average Loss: 5.474, avg. samples / sec: 959.36
Iteration:   1260, Loss function: 6.016, Average Loss: 5.485, avg. samples / sec: 927.04
Iteration:   1280, Loss function: 5.962, Average Loss: 5.497, avg. samples / sec: 840.84
Iteration:   1300, Loss function: 6.230, Average Loss: 5.511, avg. samples / sec: 916.67
Iteration:   1320, Loss function: 6.109, Average Loss: 5.523, avg. samples / sec: 887.40
Iteration:   1340, Loss function: 5.668, Average Loss: 5.533, avg. samples / sec: 892.14
Iteration:   1360, Loss function: 5.999, Average Loss: 5.544, avg. samples / sec: 890.23
Iteration:   1380, Loss function: 6.094, Average Loss: 5.554, avg. samples / sec: 958.86
Iteration:   1400, Loss function: 6.081, Average Loss: 5.561, avg. samples / sec: 927.75
Iteration:   1420, Loss function: 5.767, Average Loss: 5.569, avg. samples / sec: 984.15
Iteration:   1440, Loss function: 6.379, Average Loss: 5.577, avg. samples / sec: 994.12
Iteration:   1460, Loss function: 6.016, Average Loss: 5.585, avg. samples / sec: 978.17
Iteration:   1480, Loss function: 5.968, Average Loss: 5.593, avg. samples / sec: 992.16
Iteration:   1500, Loss function: 5.990, Average Loss: 5.601, avg. samples / sec: 977.14
Iteration:   1520, Loss function: 5.967, Average Loss: 5.607, avg. samples / sec: 899.13
Iteration:   1540, Loss function: 5.978, Average Loss: 5.611, avg. samples / sec: 963.71
Iteration:   1560, Loss function: 5.803, Average Loss: 5.615, avg. samples / sec: 993.09
Iteration:   1580, Loss function: 5.601, Average Loss: 5.621, avg. samples / sec: 977.74
Iteration:   1600, Loss function: 6.124, Average Loss: 5.625, avg. samples / sec: 966.98
Iteration:   1620, Loss function: 5.672, Average Loss: 5.630, avg. samples / sec: 909.46
Iteration:   1640, Loss function: 5.996, Average Loss: 5.633, avg. samples / sec: 915.17
Iteration:   1660, Loss function: 5.870, Average Loss: 5.638, avg. samples / sec: 984.42
Iteration:   1680, Loss function: 5.730, Average Loss: 5.640, avg. samples / sec: 981.43
Iteration:   1700, Loss function: 5.418, Average Loss: 5.644, avg. samples / sec: 985.08
Iteration:   1720, Loss function: 5.662, Average Loss: 5.645, avg. samples / sec: 968.38
Iteration:   1740, Loss function: 5.915, Average Loss: 5.647, avg. samples / sec: 980.63
Iteration:   1760, Loss function: 5.472, Average Loss: 5.648, avg. samples / sec: 929.05
Iteration:   1780, Loss function: 5.703, Average Loss: 5.649, avg. samples / sec: 970.83
Iteration:   1800, Loss function: 5.603, Average Loss: 5.651, avg. samples / sec: 982.52
Iteration:   1820, Loss function: 5.849, Average Loss: 5.652, avg. samples / sec: 992.21
Iteration:   1840, Loss function: 6.001, Average Loss: 5.653, avg. samples / sec: 976.03
Iteration:   1860, Loss function: 5.623, Average Loss: 5.654, avg. samples / sec: 923.74
Iteration:   1880, Loss function: 5.913, Average Loss: 5.655, avg. samples / sec: 986.93
Iteration:   1900, Loss function: 5.786, Average Loss: 5.656, avg. samples / sec: 975.18
Iteration:   1920, Loss function: 5.633, Average Loss: 5.655, avg. samples / sec: 972.26
Iteration:   1940, Loss function: 5.773, Average Loss: 5.655, avg. samples / sec: 993.29
Iteration:   1960, Loss function: 5.543, Average Loss: 5.654, avg. samples / sec: 986.60
Iteration:   1980, Loss function: 5.710, Average Loss: 5.653, avg. samples / sec: 968.11
Iteration:   2000, Loss function: 5.516, Average Loss: 5.651, avg. samples / sec: 987.80
Iteration:   2020, Loss function: 5.655, Average Loss: 5.650, avg. samples / sec: 984.69
Iteration:   2040, Loss function: 5.727, Average Loss: 5.649, avg. samples / sec: 984.66
:::MLLOG {"namespace": "", "time_ms": 1639068575500, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068575502, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.679, Average Loss: 5.648, avg. samples / sec: 970.83
Iteration:   2080, Loss function: 5.259, Average Loss: 5.646, avg. samples / sec: 921.41
Iteration:   2100, Loss function: 5.798, Average Loss: 5.645, avg. samples / sec: 955.94
Iteration:   2120, Loss function: 5.253, Average Loss: 5.641, avg. samples / sec: 982.49
Iteration:   2140, Loss function: 5.350, Average Loss: 5.638, avg. samples / sec: 942.40
Iteration:   2160, Loss function: 5.428, Average Loss: 5.635, avg. samples / sec: 918.14
Iteration:   2180, Loss function: 5.216, Average Loss: 5.632, avg. samples / sec: 987.94
Iteration:   2200, Loss function: 5.652, Average Loss: 5.629, avg. samples / sec: 963.73
Iteration:   2220, Loss function: 5.582, Average Loss: 5.626, avg. samples / sec: 991.77
Iteration:   2240, Loss function: 5.377, Average Loss: 5.623, avg. samples / sec: 946.23
Iteration:   2260, Loss function: 5.350, Average Loss: 5.620, avg. samples / sec: 896.21
Iteration:   2280, Loss function: 5.346, Average Loss: 5.617, avg. samples / sec: 956.61
Iteration:   2300, Loss function: 5.128, Average Loss: 5.614, avg. samples / sec: 968.14
Iteration:   2320, Loss function: 5.316, Average Loss: 5.611, avg. samples / sec: 936.56
Iteration:   2340, Loss function: 5.483, Average Loss: 5.608, avg. samples / sec: 927.98
Iteration:   2360, Loss function: 5.385, Average Loss: 5.604, avg. samples / sec: 891.05
Iteration:   2380, Loss function: 5.543, Average Loss: 5.601, avg. samples / sec: 952.57
Iteration:   2400, Loss function: 5.594, Average Loss: 5.597, avg. samples / sec: 886.04
Iteration:   2420, Loss function: 5.367, Average Loss: 5.593, avg. samples / sec: 933.62
Iteration:   2440, Loss function: 5.529, Average Loss: 5.590, avg. samples / sec: 956.08
Iteration:   2460, Loss function: 5.176, Average Loss: 5.586, avg. samples / sec: 985.81
Iteration:   2480, Loss function: 5.323, Average Loss: 5.582, avg. samples / sec: 870.21
Iteration:   2500, Loss function: 5.311, Average Loss: 5.578, avg. samples / sec: 938.33
Iteration:   2520, Loss function: 5.328, Average Loss: 5.573, avg. samples / sec: 811.67
Iteration:   2540, Loss function: 5.496, Average Loss: 5.570, avg. samples / sec: 907.76
Iteration:   2560, Loss function: 5.276, Average Loss: 5.567, avg. samples / sec: 877.13
Iteration:   2580, Loss function: 5.224, Average Loss: 5.563, avg. samples / sec: 931.75
Iteration:   2600, Loss function: 5.631, Average Loss: 5.561, avg. samples / sec: 845.01
Iteration:   2620, Loss function: 5.573, Average Loss: 5.556, avg. samples / sec: 982.96
Iteration:   2640, Loss function: 5.224, Average Loss: 5.553, avg. samples / sec: 892.38
Iteration:   2660, Loss function: 5.288, Average Loss: 5.550, avg. samples / sec: 960.18
Iteration:   2680, Loss function: 5.127, Average Loss: 5.545, avg. samples / sec: 924.58
Iteration:   2700, Loss function: 5.157, Average Loss: 5.540, avg. samples / sec: 901.03
Iteration:   2720, Loss function: 5.282, Average Loss: 5.536, avg. samples / sec: 936.97
Iteration:   2740, Loss function: 5.202, Average Loss: 5.531, avg. samples / sec: 972.69
Iteration:   2760, Loss function: 5.099, Average Loss: 5.525, avg. samples / sec: 969.87
Iteration:   2780, Loss function: 5.511, Average Loss: 5.522, avg. samples / sec: 974.32
Iteration:   2800, Loss function: 5.285, Average Loss: 5.518, avg. samples / sec: 976.32
Iteration:   2820, Loss function: 5.380, Average Loss: 5.514, avg. samples / sec: 977.83
Iteration:   2840, Loss function: 5.159, Average Loss: 5.509, avg. samples / sec: 907.11
Iteration:   2860, Loss function: 5.231, Average Loss: 5.505, avg. samples / sec: 970.18
Iteration:   2880, Loss function: 5.302, Average Loss: 5.500, avg. samples / sec: 982.85
Iteration:   2900, Loss function: 4.985, Average Loss: 5.495, avg. samples / sec: 972.87
Iteration:   2920, Loss function: 5.307, Average Loss: 5.490, avg. samples / sec: 950.83
Iteration:   2940, Loss function: 5.049, Average Loss: 5.486, avg. samples / sec: 989.27
Iteration:   2960, Loss function: 5.459, Average Loss: 5.482, avg. samples / sec: 975.60
Iteration:   2980, Loss function: 5.202, Average Loss: 5.478, avg. samples / sec: 985.01
Iteration:   3000, Loss function: 5.381, Average Loss: 5.473, avg. samples / sec: 921.45
Iteration:   3020, Loss function: 5.449, Average Loss: 5.468, avg. samples / sec: 889.47
Iteration:   3040, Loss function: 5.293, Average Loss: 5.463, avg. samples / sec: 968.57
Iteration:   3060, Loss function: 4.884, Average Loss: 5.457, avg. samples / sec: 991.98
Iteration:   3080, Loss function: 4.818, Average Loss: 5.451, avg. samples / sec: 992.04
:::MLLOG {"namespace": "", "time_ms": 1639068700116, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700117, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.072, Average Loss: 5.445, avg. samples / sec: 988.60
Iteration:   3120, Loss function: 5.013, Average Loss: 5.439, avg. samples / sec: 980.36
Iteration:   3140, Loss function: 5.221, Average Loss: 5.434, avg. samples / sec: 973.89
Iteration:   3160, Loss function: 5.677, Average Loss: 5.429, avg. samples / sec: 954.94
Iteration:   3180, Loss function: 4.953, Average Loss: 5.424, avg. samples / sec: 913.46
Iteration:   3200, Loss function: 5.286, Average Loss: 5.419, avg. samples / sec: 987.10
Iteration:   3220, Loss function: 5.050, Average Loss: 5.413, avg. samples / sec: 938.01
Iteration:   3240, Loss function: 5.086, Average Loss: 5.408, avg. samples / sec: 978.94
Iteration:   3260, Loss function: 5.093, Average Loss: 5.404, avg. samples / sec: 992.56
Iteration:   3280, Loss function: 4.886, Average Loss: 5.397, avg. samples / sec: 913.93
Iteration:   3300, Loss function: 4.944, Average Loss: 5.391, avg. samples / sec: 922.17
Iteration:   3320, Loss function: 4.999, Average Loss: 5.386, avg. samples / sec: 963.67
Iteration:   3340, Loss function: 5.144, Average Loss: 5.382, avg. samples / sec: 968.81
Iteration:   3360, Loss function: 5.114, Average Loss: 5.375, avg. samples / sec: 953.15
Iteration:   3380, Loss function: 5.395, Average Loss: 5.368, avg. samples / sec: 901.25
Iteration:   3400, Loss function: 4.850, Average Loss: 5.362, avg. samples / sec: 868.23
Iteration:   3420, Loss function: 5.323, Average Loss: 5.358, avg. samples / sec: 925.95
Iteration:   3440, Loss function: 4.928, Average Loss: 5.353, avg. samples / sec: 944.66
Iteration:   3460, Loss function: 5.407, Average Loss: 5.348, avg. samples / sec: 965.85
Iteration:   3480, Loss function: 5.220, Average Loss: 5.343, avg. samples / sec: 979.19
Iteration:   3500, Loss function: 5.252, Average Loss: 5.339, avg. samples / sec: 984.27
Iteration:   3520, Loss function: 5.001, Average Loss: 5.336, avg. samples / sec: 949.20
Iteration:   3540, Loss function: 5.043, Average Loss: 5.331, avg. samples / sec: 1000.34
Iteration:   3560, Loss function: 5.012, Average Loss: 5.328, avg. samples / sec: 965.27
Iteration:   3580, Loss function: 4.925, Average Loss: 5.323, avg. samples / sec: 967.58
Iteration:   3600, Loss function: 5.203, Average Loss: 5.317, avg. samples / sec: 978.75
Iteration:   3620, Loss function: 4.759, Average Loss: 5.312, avg. samples / sec: 956.64
Iteration:   3640, Loss function: 4.866, Average Loss: 5.308, avg. samples / sec: 936.89
Iteration:   3660, Loss function: 5.124, Average Loss: 5.302, avg. samples / sec: 997.96
Iteration:   3680, Loss function: 4.960, Average Loss: 5.297, avg. samples / sec: 993.30
Iteration:   3700, Loss function: 5.017, Average Loss: 5.292, avg. samples / sec: 904.89
Iteration:   3720, Loss function: 4.860, Average Loss: 5.286, avg. samples / sec: 916.39
Iteration:   3740, Loss function: 5.251, Average Loss: 5.281, avg. samples / sec: 958.87
Iteration:   3760, Loss function: 4.852, Average Loss: 5.276, avg. samples / sec: 957.97
Iteration:   3780, Loss function: 5.090, Average Loss: 5.270, avg. samples / sec: 982.88
Iteration:   3800, Loss function: 5.077, Average Loss: 5.267, avg. samples / sec: 963.66
Iteration:   3820, Loss function: 5.177, Average Loss: 5.262, avg. samples / sec: 929.99
Iteration:   3840, Loss function: 4.772, Average Loss: 5.257, avg. samples / sec: 888.31
Iteration:   3860, Loss function: 5.081, Average Loss: 5.252, avg. samples / sec: 937.85
Iteration:   3880, Loss function: 5.053, Average Loss: 5.247, avg. samples / sec: 997.73
Iteration:   3900, Loss function: 5.325, Average Loss: 5.242, avg. samples / sec: 994.78
Iteration:   3920, Loss function: 5.082, Average Loss: 5.236, avg. samples / sec: 976.58
Iteration:   3940, Loss function: 5.098, Average Loss: 5.230, avg. samples / sec: 995.03
Iteration:   3960, Loss function: 4.841, Average Loss: 5.226, avg. samples / sec: 950.61
Iteration:   3980, Loss function: 5.023, Average Loss: 5.221, avg. samples / sec: 983.75
Iteration:   4000, Loss function: 5.182, Average Loss: 5.217, avg. samples / sec: 956.68
Iteration:   4020, Loss function: 4.870, Average Loss: 5.213, avg. samples / sec: 907.98
Iteration:   4040, Loss function: 5.048, Average Loss: 5.209, avg. samples / sec: 917.39
Iteration:   4060, Loss function: 5.070, Average Loss: 5.205, avg. samples / sec: 974.32
Iteration:   4080, Loss function: 5.137, Average Loss: 5.200, avg. samples / sec: 905.77
Iteration:   4100, Loss function: 5.227, Average Loss: 5.197, avg. samples / sec: 942.37
:::MLLOG {"namespace": "", "time_ms": 1639068823262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068823263, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.079, Average Loss: 5.194, avg. samples / sec: 926.75
Iteration:   4140, Loss function: 4.964, Average Loss: 5.188, avg. samples / sec: 986.24
Iteration:   4160, Loss function: 4.891, Average Loss: 5.182, avg. samples / sec: 990.91
Iteration:   4180, Loss function: 4.785, Average Loss: 5.176, avg. samples / sec: 976.68
Iteration:   4200, Loss function: 4.867, Average Loss: 5.171, avg. samples / sec: 993.30
Iteration:   4220, Loss function: 4.919, Average Loss: 5.166, avg. samples / sec: 989.13
Iteration:   4240, Loss function: 4.946, Average Loss: 5.162, avg. samples / sec: 994.98
Iteration:   4260, Loss function: 4.989, Average Loss: 5.157, avg. samples / sec: 946.81
Iteration:   4280, Loss function: 4.949, Average Loss: 5.152, avg. samples / sec: 983.85
Iteration:   4300, Loss function: 4.868, Average Loss: 5.146, avg. samples / sec: 869.19
Iteration:   4320, Loss function: 4.643, Average Loss: 5.141, avg. samples / sec: 936.95
Iteration:   4340, Loss function: 4.734, Average Loss: 5.136, avg. samples / sec: 945.74
Iteration:   4360, Loss function: 4.994, Average Loss: 5.131, avg. samples / sec: 878.39
Iteration:   4380, Loss function: 4.991, Average Loss: 5.127, avg. samples / sec: 950.91
Iteration:   4400, Loss function: 4.915, Average Loss: 5.122, avg. samples / sec: 982.84
Iteration:   4420, Loss function: 4.794, Average Loss: 5.118, avg. samples / sec: 964.46
Iteration:   4440, Loss function: 4.888, Average Loss: 5.113, avg. samples / sec: 903.98
Iteration:   4460, Loss function: 5.048, Average Loss: 5.109, avg. samples / sec: 928.99
Iteration:   4480, Loss function: 5.014, Average Loss: 5.105, avg. samples / sec: 875.01
Iteration:   4500, Loss function: 4.844, Average Loss: 5.102, avg. samples / sec: 964.39
Iteration:   4520, Loss function: 4.789, Average Loss: 5.098, avg. samples / sec: 898.38
Iteration:   4540, Loss function: 4.967, Average Loss: 5.093, avg. samples / sec: 908.86
Iteration:   4560, Loss function: 4.727, Average Loss: 5.090, avg. samples / sec: 982.22
Iteration:   4580, Loss function: 4.878, Average Loss: 5.088, avg. samples / sec: 949.11
Iteration:   4600, Loss function: 4.784, Average Loss: 5.084, avg. samples / sec: 961.07
Iteration:   4620, Loss function: 4.811, Average Loss: 5.080, avg. samples / sec: 962.84
Iteration:   4640, Loss function: 4.838, Average Loss: 5.074, avg. samples / sec: 993.15
Iteration:   4660, Loss function: 4.864, Average Loss: 5.070, avg. samples / sec: 899.86
Iteration:   4680, Loss function: 5.328, Average Loss: 5.065, avg. samples / sec: 931.88
Iteration:   4700, Loss function: 4.678, Average Loss: 5.061, avg. samples / sec: 924.44
Iteration:   4720, Loss function: 4.773, Average Loss: 5.056, avg. samples / sec: 919.27
Iteration:   4740, Loss function: 4.822, Average Loss: 5.053, avg. samples / sec: 967.65
Iteration:   4760, Loss function: 4.800, Average Loss: 5.050, avg. samples / sec: 945.96
Iteration:   4780, Loss function: 4.949, Average Loss: 5.046, avg. samples / sec: 951.36
Iteration:   4800, Loss function: 4.906, Average Loss: 5.042, avg. samples / sec: 945.32
Iteration:   4820, Loss function: 4.762, Average Loss: 5.039, avg. samples / sec: 953.66
Iteration:   4840, Loss function: 5.134, Average Loss: 5.036, avg. samples / sec: 987.94
Iteration:   4860, Loss function: 4.709, Average Loss: 5.032, avg. samples / sec: 996.45
Iteration:   4880, Loss function: 5.021, Average Loss: 5.028, avg. samples / sec: 993.54
Iteration:   4900, Loss function: 4.483, Average Loss: 5.024, avg. samples / sec: 997.03
Iteration:   4920, Loss function: 4.643, Average Loss: 5.020, avg. samples / sec: 937.74
Iteration:   4940, Loss function: 4.698, Average Loss: 5.016, avg. samples / sec: 924.39
Iteration:   4960, Loss function: 4.712, Average Loss: 5.012, avg. samples / sec: 1000.00
Iteration:   4980, Loss function: 4.408, Average Loss: 5.009, avg. samples / sec: 976.02
Iteration:   5000, Loss function: 4.961, Average Loss: 5.006, avg. samples / sec: 976.02
Iteration:   5020, Loss function: 5.085, Average Loss: 5.004, avg. samples / sec: 944.34
Iteration:   5040, Loss function: 4.855, Average Loss: 5.002, avg. samples / sec: 875.79
Iteration:   5060, Loss function: 4.821, Average Loss: 5.000, avg. samples / sec: 986.70
Iteration:   5080, Loss function: 4.385, Average Loss: 4.996, avg. samples / sec: 983.34
Iteration:   5100, Loss function: 4.726, Average Loss: 4.994, avg. samples / sec: 974.19
Iteration:   5120, Loss function: 4.615, Average Loss: 4.992, avg. samples / sec: 964.89
Iteration:   5140, Loss function: 4.676, Average Loss: 4.987, avg. samples / sec: 993.06
:::MLLOG {"namespace": "", "time_ms": 1639068946361, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.21 s
:::MLLOG {"namespace": "", "time_ms": 1639068976672, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068976783, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068976784, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.717, Average Loss: 4.981, avg. samples / sec: 69.24
Iteration:   5180, Loss function: 4.721, Average Loss: 4.976, avg. samples / sec: 885.46
DONE (t=5.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10998
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22130
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10032
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19863
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14011
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10998 AP goal: 0.10000
Iteration:   5200, Loss function: 4.622, Average Loss: 4.973, avg. samples / sec: 995.35
:::MLLOG {"namespace": "", "time_ms": 1639068983795, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983796, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1099796823962714, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983796, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068984010, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:25 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:25 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296899, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068297027, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3094694349, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3094694349
:::MLLOG {"namespace": "", "time_ms": 1639068298916, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298916, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298921, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298922, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323940, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323940, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068325827, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325828, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326198, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326199, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326200, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.885, Average Loss: 0.023, avg. samples / sec: 4.24
Iteration:     20, Loss function: 21.203, Average Loss: 0.459, avg. samples / sec: 763.78
Iteration:     40, Loss function: 20.815, Average Loss: 0.861, avg. samples / sec: 832.39
Iteration:     60, Loss function: 20.500, Average Loss: 1.251, avg. samples / sec: 868.34
Iteration:     80, Loss function: 19.795, Average Loss: 1.624, avg. samples / sec: 825.88
Iteration:    100, Loss function: 15.448, Average Loss: 1.949, avg. samples / sec: 908.37
Iteration:    120, Loss function: 12.037, Average Loss: 2.159, avg. samples / sec: 920.31
Iteration:    140, Loss function: 9.671, Average Loss: 2.320, avg. samples / sec: 908.05
Iteration:    160, Loss function: 9.250, Average Loss: 2.463, avg. samples / sec: 923.77
Iteration:    180, Loss function: 8.981, Average Loss: 2.596, avg. samples / sec: 957.02
Iteration:    200, Loss function: 8.596, Average Loss: 2.722, avg. samples / sec: 902.51
Iteration:    220, Loss function: 8.633, Average Loss: 2.843, avg. samples / sec: 955.79
Iteration:    240, Loss function: 8.637, Average Loss: 2.959, avg. samples / sec: 962.18
Iteration:    260, Loss function: 8.849, Average Loss: 3.071, avg. samples / sec: 968.89
Iteration:    280, Loss function: 8.913, Average Loss: 3.185, avg. samples / sec: 870.84
Iteration:    300, Loss function: 8.416, Average Loss: 3.292, avg. samples / sec: 944.27
Iteration:    320, Loss function: 8.301, Average Loss: 3.393, avg. samples / sec: 938.38
Iteration:    340, Loss function: 8.378, Average Loss: 3.491, avg. samples / sec: 930.40
Iteration:    360, Loss function: 8.119, Average Loss: 3.583, avg. samples / sec: 967.03
Iteration:    380, Loss function: 7.963, Average Loss: 3.673, avg. samples / sec: 978.37
Iteration:    400, Loss function: 7.989, Average Loss: 3.758, avg. samples / sec: 961.27
Iteration:    420, Loss function: 7.764, Average Loss: 3.840, avg. samples / sec: 938.93
Iteration:    440, Loss function: 7.972, Average Loss: 3.921, avg. samples / sec: 937.30
Iteration:    460, Loss function: 7.809, Average Loss: 3.997, avg. samples / sec: 901.59
Iteration:    480, Loss function: 7.545, Average Loss: 4.072, avg. samples / sec: 937.64
Iteration:    500, Loss function: 7.605, Average Loss: 4.142, avg. samples / sec: 954.88
Iteration:    520, Loss function: 7.347, Average Loss: 4.209, avg. samples / sec: 899.03
Iteration:    540, Loss function: 7.534, Average Loss: 4.274, avg. samples / sec: 906.54
Iteration:    560, Loss function: 7.301, Average Loss: 4.336, avg. samples / sec: 946.99
Iteration:    580, Loss function: 7.264, Average Loss: 4.399, avg. samples / sec: 972.60
Iteration:    600, Loss function: 7.130, Average Loss: 4.457, avg. samples / sec: 898.71
Iteration:    620, Loss function: 7.069, Average Loss: 4.512, avg. samples / sec: 942.11
Iteration:    640, Loss function: 6.901, Average Loss: 4.566, avg. samples / sec: 967.92
Iteration:    660, Loss function: 7.081, Average Loss: 4.619, avg. samples / sec: 983.38
Iteration:    680, Loss function: 7.282, Average Loss: 4.671, avg. samples / sec: 930.72
Iteration:    700, Loss function: 6.866, Average Loss: 4.719, avg. samples / sec: 983.91
Iteration:    720, Loss function: 7.005, Average Loss: 4.768, avg. samples / sec: 901.33
Iteration:    740, Loss function: 6.886, Average Loss: 4.813, avg. samples / sec: 900.49
Iteration:    760, Loss function: 7.068, Average Loss: 4.857, avg. samples / sec: 981.97
Iteration:    780, Loss function: 6.835, Average Loss: 4.898, avg. samples / sec: 986.29
Iteration:    800, Loss function: 7.092, Average Loss: 4.938, avg. samples / sec: 954.86
Iteration:    820, Loss function: 6.885, Average Loss: 4.975, avg. samples / sec: 977.86
Iteration:    840, Loss function: 6.666, Average Loss: 5.012, avg. samples / sec: 946.22
Iteration:    860, Loss function: 6.765, Average Loss: 5.046, avg. samples / sec: 883.57
Iteration:    880, Loss function: 6.776, Average Loss: 5.078, avg. samples / sec: 990.74
Iteration:    900, Loss function: 6.659, Average Loss: 5.109, avg. samples / sec: 979.26
Iteration:    920, Loss function: 6.698, Average Loss: 5.138, avg. samples / sec: 951.82
Iteration:    940, Loss function: 6.680, Average Loss: 5.168, avg. samples / sec: 950.95
Iteration:    960, Loss function: 6.395, Average Loss: 5.196, avg. samples / sec: 934.90
Iteration:    980, Loss function: 6.396, Average Loss: 5.224, avg. samples / sec: 878.23
Iteration:   1000, Loss function: 6.482, Average Loss: 5.248, avg. samples / sec: 855.28
Iteration:   1020, Loss function: 6.216, Average Loss: 5.272, avg. samples / sec: 899.98
:::MLLOG {"namespace": "", "time_ms": 1639068452862, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068452863, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.386, Average Loss: 5.295, avg. samples / sec: 948.46
Iteration:   1060, Loss function: 6.379, Average Loss: 5.318, avg. samples / sec: 977.29
Iteration:   1080, Loss function: 6.371, Average Loss: 5.339, avg. samples / sec: 951.16
Iteration:   1100, Loss function: 6.247, Average Loss: 5.359, avg. samples / sec: 947.81
Iteration:   1120, Loss function: 6.115, Average Loss: 5.379, avg. samples / sec: 956.10
Iteration:   1140, Loss function: 6.416, Average Loss: 5.398, avg. samples / sec: 955.57
Iteration:   1160, Loss function: 6.178, Average Loss: 5.415, avg. samples / sec: 910.45
Iteration:   1180, Loss function: 6.272, Average Loss: 5.432, avg. samples / sec: 944.17
Iteration:   1200, Loss function: 6.223, Average Loss: 5.448, avg. samples / sec: 986.47
Iteration:   1220, Loss function: 6.173, Average Loss: 5.462, avg. samples / sec: 975.03
Iteration:   1240, Loss function: 5.995, Average Loss: 5.474, avg. samples / sec: 959.36
Iteration:   1260, Loss function: 6.016, Average Loss: 5.485, avg. samples / sec: 927.04
Iteration:   1280, Loss function: 5.962, Average Loss: 5.497, avg. samples / sec: 840.84
Iteration:   1300, Loss function: 6.230, Average Loss: 5.511, avg. samples / sec: 916.67
Iteration:   1320, Loss function: 6.109, Average Loss: 5.523, avg. samples / sec: 887.40
Iteration:   1340, Loss function: 5.668, Average Loss: 5.533, avg. samples / sec: 892.14
Iteration:   1360, Loss function: 5.999, Average Loss: 5.544, avg. samples / sec: 890.23
Iteration:   1380, Loss function: 6.094, Average Loss: 5.554, avg. samples / sec: 958.86
Iteration:   1400, Loss function: 6.081, Average Loss: 5.561, avg. samples / sec: 927.75
Iteration:   1420, Loss function: 5.767, Average Loss: 5.569, avg. samples / sec: 984.15
Iteration:   1440, Loss function: 6.379, Average Loss: 5.577, avg. samples / sec: 994.12
Iteration:   1460, Loss function: 6.016, Average Loss: 5.585, avg. samples / sec: 978.17
Iteration:   1480, Loss function: 5.968, Average Loss: 5.593, avg. samples / sec: 992.16
Iteration:   1500, Loss function: 5.990, Average Loss: 5.601, avg. samples / sec: 977.14
Iteration:   1520, Loss function: 5.967, Average Loss: 5.607, avg. samples / sec: 899.13
Iteration:   1540, Loss function: 5.978, Average Loss: 5.611, avg. samples / sec: 963.71
Iteration:   1560, Loss function: 5.803, Average Loss: 5.615, avg. samples / sec: 993.09
Iteration:   1580, Loss function: 5.601, Average Loss: 5.621, avg. samples / sec: 977.74
Iteration:   1600, Loss function: 6.124, Average Loss: 5.625, avg. samples / sec: 966.98
Iteration:   1620, Loss function: 5.672, Average Loss: 5.630, avg. samples / sec: 909.46
Iteration:   1640, Loss function: 5.996, Average Loss: 5.633, avg. samples / sec: 915.17
Iteration:   1660, Loss function: 5.870, Average Loss: 5.638, avg. samples / sec: 984.42
Iteration:   1680, Loss function: 5.730, Average Loss: 5.640, avg. samples / sec: 981.43
Iteration:   1700, Loss function: 5.418, Average Loss: 5.644, avg. samples / sec: 985.08
Iteration:   1720, Loss function: 5.662, Average Loss: 5.645, avg. samples / sec: 968.38
Iteration:   1740, Loss function: 5.915, Average Loss: 5.647, avg. samples / sec: 980.63
Iteration:   1760, Loss function: 5.472, Average Loss: 5.648, avg. samples / sec: 929.05
Iteration:   1780, Loss function: 5.703, Average Loss: 5.649, avg. samples / sec: 970.83
Iteration:   1800, Loss function: 5.603, Average Loss: 5.651, avg. samples / sec: 982.52
Iteration:   1820, Loss function: 5.849, Average Loss: 5.652, avg. samples / sec: 992.21
Iteration:   1840, Loss function: 6.001, Average Loss: 5.653, avg. samples / sec: 976.03
Iteration:   1860, Loss function: 5.623, Average Loss: 5.654, avg. samples / sec: 923.74
Iteration:   1880, Loss function: 5.913, Average Loss: 5.655, avg. samples / sec: 986.93
Iteration:   1900, Loss function: 5.786, Average Loss: 5.656, avg. samples / sec: 975.18
Iteration:   1920, Loss function: 5.633, Average Loss: 5.655, avg. samples / sec: 972.26
Iteration:   1940, Loss function: 5.773, Average Loss: 5.655, avg. samples / sec: 993.29
Iteration:   1960, Loss function: 5.543, Average Loss: 5.654, avg. samples / sec: 986.60
Iteration:   1980, Loss function: 5.710, Average Loss: 5.653, avg. samples / sec: 968.11
Iteration:   2000, Loss function: 5.516, Average Loss: 5.651, avg. samples / sec: 987.80
Iteration:   2020, Loss function: 5.655, Average Loss: 5.650, avg. samples / sec: 984.69
Iteration:   2040, Loss function: 5.727, Average Loss: 5.649, avg. samples / sec: 984.66
:::MLLOG {"namespace": "", "time_ms": 1639068575500, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068575502, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.679, Average Loss: 5.648, avg. samples / sec: 970.83
Iteration:   2080, Loss function: 5.259, Average Loss: 5.646, avg. samples / sec: 921.41
Iteration:   2100, Loss function: 5.798, Average Loss: 5.645, avg. samples / sec: 955.94
Iteration:   2120, Loss function: 5.253, Average Loss: 5.641, avg. samples / sec: 982.49
Iteration:   2140, Loss function: 5.350, Average Loss: 5.638, avg. samples / sec: 942.40
Iteration:   2160, Loss function: 5.428, Average Loss: 5.635, avg. samples / sec: 918.14
Iteration:   2180, Loss function: 5.216, Average Loss: 5.632, avg. samples / sec: 987.94
Iteration:   2200, Loss function: 5.652, Average Loss: 5.629, avg. samples / sec: 963.73
Iteration:   2220, Loss function: 5.582, Average Loss: 5.626, avg. samples / sec: 991.77
Iteration:   2240, Loss function: 5.377, Average Loss: 5.623, avg. samples / sec: 946.23
Iteration:   2260, Loss function: 5.350, Average Loss: 5.620, avg. samples / sec: 896.21
Iteration:   2280, Loss function: 5.346, Average Loss: 5.617, avg. samples / sec: 956.61
Iteration:   2300, Loss function: 5.128, Average Loss: 5.614, avg. samples / sec: 968.14
Iteration:   2320, Loss function: 5.316, Average Loss: 5.611, avg. samples / sec: 936.56
Iteration:   2340, Loss function: 5.483, Average Loss: 5.608, avg. samples / sec: 927.98
Iteration:   2360, Loss function: 5.385, Average Loss: 5.604, avg. samples / sec: 891.05
Iteration:   2380, Loss function: 5.543, Average Loss: 5.601, avg. samples / sec: 952.57
Iteration:   2400, Loss function: 5.594, Average Loss: 5.597, avg. samples / sec: 886.04
Iteration:   2420, Loss function: 5.367, Average Loss: 5.593, avg. samples / sec: 933.62
Iteration:   2440, Loss function: 5.529, Average Loss: 5.590, avg. samples / sec: 956.08
Iteration:   2460, Loss function: 5.176, Average Loss: 5.586, avg. samples / sec: 985.81
Iteration:   2480, Loss function: 5.323, Average Loss: 5.582, avg. samples / sec: 870.21
Iteration:   2500, Loss function: 5.311, Average Loss: 5.578, avg. samples / sec: 938.33
Iteration:   2520, Loss function: 5.328, Average Loss: 5.573, avg. samples / sec: 811.67
Iteration:   2540, Loss function: 5.496, Average Loss: 5.570, avg. samples / sec: 907.76
Iteration:   2560, Loss function: 5.276, Average Loss: 5.567, avg. samples / sec: 877.13
Iteration:   2580, Loss function: 5.224, Average Loss: 5.563, avg. samples / sec: 931.75
Iteration:   2600, Loss function: 5.631, Average Loss: 5.561, avg. samples / sec: 845.01
Iteration:   2620, Loss function: 5.573, Average Loss: 5.556, avg. samples / sec: 982.96
Iteration:   2640, Loss function: 5.224, Average Loss: 5.553, avg. samples / sec: 892.38
Iteration:   2660, Loss function: 5.288, Average Loss: 5.550, avg. samples / sec: 960.18
Iteration:   2680, Loss function: 5.127, Average Loss: 5.545, avg. samples / sec: 924.58
Iteration:   2700, Loss function: 5.157, Average Loss: 5.540, avg. samples / sec: 901.03
Iteration:   2720, Loss function: 5.282, Average Loss: 5.536, avg. samples / sec: 936.97
Iteration:   2740, Loss function: 5.202, Average Loss: 5.531, avg. samples / sec: 972.69
Iteration:   2760, Loss function: 5.099, Average Loss: 5.525, avg. samples / sec: 969.87
Iteration:   2780, Loss function: 5.511, Average Loss: 5.522, avg. samples / sec: 974.32
Iteration:   2800, Loss function: 5.285, Average Loss: 5.518, avg. samples / sec: 976.32
Iteration:   2820, Loss function: 5.380, Average Loss: 5.514, avg. samples / sec: 977.83
Iteration:   2840, Loss function: 5.159, Average Loss: 5.509, avg. samples / sec: 907.11
Iteration:   2860, Loss function: 5.231, Average Loss: 5.505, avg. samples / sec: 970.18
Iteration:   2880, Loss function: 5.302, Average Loss: 5.500, avg. samples / sec: 982.85
Iteration:   2900, Loss function: 4.985, Average Loss: 5.495, avg. samples / sec: 972.87
Iteration:   2920, Loss function: 5.307, Average Loss: 5.490, avg. samples / sec: 950.83
Iteration:   2940, Loss function: 5.049, Average Loss: 5.486, avg. samples / sec: 989.27
Iteration:   2960, Loss function: 5.459, Average Loss: 5.482, avg. samples / sec: 975.60
Iteration:   2980, Loss function: 5.202, Average Loss: 5.478, avg. samples / sec: 985.01
Iteration:   3000, Loss function: 5.381, Average Loss: 5.473, avg. samples / sec: 921.45
Iteration:   3020, Loss function: 5.449, Average Loss: 5.468, avg. samples / sec: 889.47
Iteration:   3040, Loss function: 5.293, Average Loss: 5.463, avg. samples / sec: 968.57
Iteration:   3060, Loss function: 4.884, Average Loss: 5.457, avg. samples / sec: 991.98
Iteration:   3080, Loss function: 4.818, Average Loss: 5.451, avg. samples / sec: 992.04
:::MLLOG {"namespace": "", "time_ms": 1639068700116, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700117, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.072, Average Loss: 5.445, avg. samples / sec: 988.60
Iteration:   3120, Loss function: 5.013, Average Loss: 5.439, avg. samples / sec: 980.36
Iteration:   3140, Loss function: 5.221, Average Loss: 5.434, avg. samples / sec: 973.89
Iteration:   3160, Loss function: 5.677, Average Loss: 5.429, avg. samples / sec: 954.94
Iteration:   3180, Loss function: 4.953, Average Loss: 5.424, avg. samples / sec: 913.46
Iteration:   3200, Loss function: 5.286, Average Loss: 5.419, avg. samples / sec: 987.10
Iteration:   3220, Loss function: 5.050, Average Loss: 5.413, avg. samples / sec: 938.01
Iteration:   3240, Loss function: 5.086, Average Loss: 5.408, avg. samples / sec: 978.94
Iteration:   3260, Loss function: 5.093, Average Loss: 5.404, avg. samples / sec: 992.56
Iteration:   3280, Loss function: 4.886, Average Loss: 5.397, avg. samples / sec: 913.93
Iteration:   3300, Loss function: 4.944, Average Loss: 5.391, avg. samples / sec: 922.17
Iteration:   3320, Loss function: 4.999, Average Loss: 5.386, avg. samples / sec: 963.67
Iteration:   3340, Loss function: 5.144, Average Loss: 5.382, avg. samples / sec: 968.81
Iteration:   3360, Loss function: 5.114, Average Loss: 5.375, avg. samples / sec: 953.15
Iteration:   3380, Loss function: 5.395, Average Loss: 5.368, avg. samples / sec: 901.25
Iteration:   3400, Loss function: 4.850, Average Loss: 5.362, avg. samples / sec: 868.23
Iteration:   3420, Loss function: 5.323, Average Loss: 5.358, avg. samples / sec: 925.95
Iteration:   3440, Loss function: 4.928, Average Loss: 5.353, avg. samples / sec: 944.66
Iteration:   3460, Loss function: 5.407, Average Loss: 5.348, avg. samples / sec: 965.85
Iteration:   3480, Loss function: 5.220, Average Loss: 5.343, avg. samples / sec: 979.19
Iteration:   3500, Loss function: 5.252, Average Loss: 5.339, avg. samples / sec: 984.27
Iteration:   3520, Loss function: 5.001, Average Loss: 5.336, avg. samples / sec: 949.20
Iteration:   3540, Loss function: 5.043, Average Loss: 5.331, avg. samples / sec: 1000.34
Iteration:   3560, Loss function: 5.012, Average Loss: 5.328, avg. samples / sec: 965.27
Iteration:   3580, Loss function: 4.925, Average Loss: 5.323, avg. samples / sec: 967.58
Iteration:   3600, Loss function: 5.203, Average Loss: 5.317, avg. samples / sec: 978.75
Iteration:   3620, Loss function: 4.759, Average Loss: 5.312, avg. samples / sec: 956.64
Iteration:   3640, Loss function: 4.866, Average Loss: 5.308, avg. samples / sec: 936.89
Iteration:   3660, Loss function: 5.124, Average Loss: 5.302, avg. samples / sec: 997.96
Iteration:   3680, Loss function: 4.960, Average Loss: 5.297, avg. samples / sec: 993.30
Iteration:   3700, Loss function: 5.017, Average Loss: 5.292, avg. samples / sec: 904.89
Iteration:   3720, Loss function: 4.860, Average Loss: 5.286, avg. samples / sec: 916.39
Iteration:   3740, Loss function: 5.251, Average Loss: 5.281, avg. samples / sec: 958.87
Iteration:   3760, Loss function: 4.852, Average Loss: 5.276, avg. samples / sec: 957.97
Iteration:   3780, Loss function: 5.090, Average Loss: 5.270, avg. samples / sec: 982.88
Iteration:   3800, Loss function: 5.077, Average Loss: 5.267, avg. samples / sec: 963.66
Iteration:   3820, Loss function: 5.177, Average Loss: 5.262, avg. samples / sec: 929.99
Iteration:   3840, Loss function: 4.772, Average Loss: 5.257, avg. samples / sec: 888.31
Iteration:   3860, Loss function: 5.081, Average Loss: 5.252, avg. samples / sec: 937.85
Iteration:   3880, Loss function: 5.053, Average Loss: 5.247, avg. samples / sec: 997.73
Iteration:   3900, Loss function: 5.325, Average Loss: 5.242, avg. samples / sec: 994.78
Iteration:   3920, Loss function: 5.082, Average Loss: 5.236, avg. samples / sec: 976.58
Iteration:   3940, Loss function: 5.098, Average Loss: 5.230, avg. samples / sec: 995.03
Iteration:   3960, Loss function: 4.841, Average Loss: 5.226, avg. samples / sec: 950.61
Iteration:   3980, Loss function: 5.023, Average Loss: 5.221, avg. samples / sec: 983.75
Iteration:   4000, Loss function: 5.182, Average Loss: 5.217, avg. samples / sec: 956.68
Iteration:   4020, Loss function: 4.870, Average Loss: 5.213, avg. samples / sec: 907.98
Iteration:   4040, Loss function: 5.048, Average Loss: 5.209, avg. samples / sec: 917.39
Iteration:   4060, Loss function: 5.070, Average Loss: 5.205, avg. samples / sec: 974.32
Iteration:   4080, Loss function: 5.137, Average Loss: 5.200, avg. samples / sec: 905.77
Iteration:   4100, Loss function: 5.227, Average Loss: 5.197, avg. samples / sec: 942.37
:::MLLOG {"namespace": "", "time_ms": 1639068823262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068823263, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.079, Average Loss: 5.194, avg. samples / sec: 926.75
Iteration:   4140, Loss function: 4.964, Average Loss: 5.188, avg. samples / sec: 986.24
Iteration:   4160, Loss function: 4.891, Average Loss: 5.182, avg. samples / sec: 990.91
Iteration:   4180, Loss function: 4.785, Average Loss: 5.176, avg. samples / sec: 976.68
Iteration:   4200, Loss function: 4.867, Average Loss: 5.171, avg. samples / sec: 993.30
Iteration:   4220, Loss function: 4.919, Average Loss: 5.166, avg. samples / sec: 989.13
Iteration:   4240, Loss function: 4.946, Average Loss: 5.162, avg. samples / sec: 994.98
Iteration:   4260, Loss function: 4.989, Average Loss: 5.157, avg. samples / sec: 946.81
Iteration:   4280, Loss function: 4.949, Average Loss: 5.152, avg. samples / sec: 983.85
Iteration:   4300, Loss function: 4.868, Average Loss: 5.146, avg. samples / sec: 869.19
Iteration:   4320, Loss function: 4.643, Average Loss: 5.141, avg. samples / sec: 936.95
Iteration:   4340, Loss function: 4.734, Average Loss: 5.136, avg. samples / sec: 945.74
Iteration:   4360, Loss function: 4.994, Average Loss: 5.131, avg. samples / sec: 878.39
Iteration:   4380, Loss function: 4.991, Average Loss: 5.127, avg. samples / sec: 950.91
Iteration:   4400, Loss function: 4.915, Average Loss: 5.122, avg. samples / sec: 982.84
Iteration:   4420, Loss function: 4.794, Average Loss: 5.118, avg. samples / sec: 964.46
Iteration:   4440, Loss function: 4.888, Average Loss: 5.113, avg. samples / sec: 903.98
Iteration:   4460, Loss function: 5.048, Average Loss: 5.109, avg. samples / sec: 928.99
Iteration:   4480, Loss function: 5.014, Average Loss: 5.105, avg. samples / sec: 875.01
Iteration:   4500, Loss function: 4.844, Average Loss: 5.102, avg. samples / sec: 964.39
Iteration:   4520, Loss function: 4.789, Average Loss: 5.098, avg. samples / sec: 898.38
Iteration:   4540, Loss function: 4.967, Average Loss: 5.093, avg. samples / sec: 908.86
Iteration:   4560, Loss function: 4.727, Average Loss: 5.090, avg. samples / sec: 982.22
Iteration:   4580, Loss function: 4.878, Average Loss: 5.088, avg. samples / sec: 949.11
Iteration:   4600, Loss function: 4.784, Average Loss: 5.084, avg. samples / sec: 961.07
Iteration:   4620, Loss function: 4.811, Average Loss: 5.080, avg. samples / sec: 962.84
Iteration:   4640, Loss function: 4.838, Average Loss: 5.074, avg. samples / sec: 993.15
Iteration:   4660, Loss function: 4.864, Average Loss: 5.070, avg. samples / sec: 899.86
Iteration:   4680, Loss function: 5.328, Average Loss: 5.065, avg. samples / sec: 931.88
Iteration:   4700, Loss function: 4.678, Average Loss: 5.061, avg. samples / sec: 924.44
Iteration:   4720, Loss function: 4.773, Average Loss: 5.056, avg. samples / sec: 919.27
Iteration:   4740, Loss function: 4.822, Average Loss: 5.053, avg. samples / sec: 967.65
Iteration:   4760, Loss function: 4.800, Average Loss: 5.050, avg. samples / sec: 945.96
Iteration:   4780, Loss function: 4.949, Average Loss: 5.046, avg. samples / sec: 951.36
Iteration:   4800, Loss function: 4.906, Average Loss: 5.042, avg. samples / sec: 945.32
Iteration:   4820, Loss function: 4.762, Average Loss: 5.039, avg. samples / sec: 953.66
Iteration:   4840, Loss function: 5.134, Average Loss: 5.036, avg. samples / sec: 987.94
Iteration:   4860, Loss function: 4.709, Average Loss: 5.032, avg. samples / sec: 996.45
Iteration:   4880, Loss function: 5.021, Average Loss: 5.028, avg. samples / sec: 993.54
Iteration:   4900, Loss function: 4.483, Average Loss: 5.024, avg. samples / sec: 997.03
Iteration:   4920, Loss function: 4.643, Average Loss: 5.020, avg. samples / sec: 937.74
Iteration:   4940, Loss function: 4.698, Average Loss: 5.016, avg. samples / sec: 924.39
Iteration:   4960, Loss function: 4.712, Average Loss: 5.012, avg. samples / sec: 1000.00
Iteration:   4980, Loss function: 4.408, Average Loss: 5.009, avg. samples / sec: 976.02
Iteration:   5000, Loss function: 4.961, Average Loss: 5.006, avg. samples / sec: 976.02
Iteration:   5020, Loss function: 5.085, Average Loss: 5.004, avg. samples / sec: 944.34
Iteration:   5040, Loss function: 4.855, Average Loss: 5.002, avg. samples / sec: 875.79
Iteration:   5060, Loss function: 4.821, Average Loss: 5.000, avg. samples / sec: 986.70
Iteration:   5080, Loss function: 4.385, Average Loss: 4.996, avg. samples / sec: 983.34
Iteration:   5100, Loss function: 4.726, Average Loss: 4.994, avg. samples / sec: 974.19
Iteration:   5120, Loss function: 4.615, Average Loss: 4.992, avg. samples / sec: 964.89
Iteration:   5140, Loss function: 4.676, Average Loss: 4.987, avg. samples / sec: 993.06
:::MLLOG {"namespace": "", "time_ms": 1639068946361, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.21 s
:::MLLOG {"namespace": "", "time_ms": 1639068976672, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068976783, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068976784, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.717, Average Loss: 4.981, avg. samples / sec: 69.24
Iteration:   5180, Loss function: 4.721, Average Loss: 4.976, avg. samples / sec: 885.46
DONE (t=5.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10998
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22130
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10032
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19863
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14011
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20964
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10998 AP goal: 0.10000
Iteration:   5200, Loss function: 4.622, Average Loss: 4.973, avg. samples / sec: 995.35
:::MLLOG {"namespace": "", "time_ms": 1639068983795, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983796, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1099796823962714, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983796, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068984010, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068985
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:25 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:49 PM'
START TIMING RUN WAS 2021-12-09 04:44:49 PM
ENDING TIMING RUN AT 2021-12-09 04:56:25 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:25 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ result=696
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 04:44:49 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 04:44:49 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
