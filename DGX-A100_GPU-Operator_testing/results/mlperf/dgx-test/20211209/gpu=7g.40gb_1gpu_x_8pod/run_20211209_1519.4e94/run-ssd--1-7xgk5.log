+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-7xgk5.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-7xgk5.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-7xgk5.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60'
Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068288
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:48 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:48 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:48 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:48 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-7xgk5 to the sync file ...
run-ssd--1-7xgk5 Found 2 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
Thu Dec  9 16:44:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068295871, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296037, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2192447378, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2192447378
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068298028, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298028, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323221, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323221, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068324964, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324965, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.26s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325409, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325409, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325411, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.795, Average Loss: 0.023, avg. samples / sec: 4.21
Iteration:     20, Loss function: 21.053, Average Loss: 0.456, avg. samples / sec: 820.32
Iteration:     40, Loss function: 20.723, Average Loss: 0.857, avg. samples / sec: 847.02
Iteration:     60, Loss function: 20.293, Average Loss: 1.247, avg. samples / sec: 896.96
Iteration:     80, Loss function: 20.222, Average Loss: 1.622, avg. samples / sec: 856.47
Iteration:    100, Loss function: 16.822, Average Loss: 1.964, avg. samples / sec: 869.93
Iteration:    120, Loss function: 12.571, Average Loss: 2.191, avg. samples / sec: 885.82
Iteration:    140, Loss function: 9.842, Average Loss: 2.357, avg. samples / sec: 914.82
Iteration:    160, Loss function: 9.137, Average Loss: 2.499, avg. samples / sec: 930.34
Iteration:    180, Loss function: 9.187, Average Loss: 2.630, avg. samples / sec: 925.75
Iteration:    200, Loss function: 8.587, Average Loss: 2.756, avg. samples / sec: 889.27
Iteration:    220, Loss function: 8.561, Average Loss: 2.876, avg. samples / sec: 895.03
Iteration:    240, Loss function: 8.563, Average Loss: 2.990, avg. samples / sec: 930.55
Iteration:    260, Loss function: 9.075, Average Loss: 3.106, avg. samples / sec: 970.23
Iteration:    280, Loss function: 8.802, Average Loss: 3.219, avg. samples / sec: 934.40
Iteration:    300, Loss function: 8.303, Average Loss: 3.323, avg. samples / sec: 901.73
Iteration:    320, Loss function: 8.320, Average Loss: 3.422, avg. samples / sec: 894.92
Iteration:    340, Loss function: 8.287, Average Loss: 3.519, avg. samples / sec: 952.42
Iteration:    360, Loss function: 7.930, Average Loss: 3.610, avg. samples / sec: 975.81
Iteration:    380, Loss function: 7.981, Average Loss: 3.699, avg. samples / sec: 861.90
Iteration:    400, Loss function: 7.998, Average Loss: 3.785, avg. samples / sec: 929.42
Iteration:    420, Loss function: 7.621, Average Loss: 3.866, avg. samples / sec: 908.29
Iteration:    440, Loss function: 7.859, Average Loss: 3.944, avg. samples / sec: 951.40
Iteration:    460, Loss function: 7.818, Average Loss: 4.020, avg. samples / sec: 846.96
Iteration:    480, Loss function: 7.567, Average Loss: 4.095, avg. samples / sec: 977.69
Iteration:    500, Loss function: 7.408, Average Loss: 4.165, avg. samples / sec: 989.03
Iteration:    520, Loss function: 7.634, Average Loss: 4.232, avg. samples / sec: 935.84
Iteration:    540, Loss function: 7.564, Average Loss: 4.297, avg. samples / sec: 912.44
Iteration:    560, Loss function: 7.283, Average Loss: 4.359, avg. samples / sec: 944.78
Iteration:    580, Loss function: 7.287, Average Loss: 4.419, avg. samples / sec: 969.12
Iteration:    600, Loss function: 7.258, Average Loss: 4.478, avg. samples / sec: 968.93
Iteration:    620, Loss function: 7.121, Average Loss: 4.534, avg. samples / sec: 975.60
Iteration:    640, Loss function: 6.823, Average Loss: 4.588, avg. samples / sec: 923.35
Iteration:    660, Loss function: 7.170, Average Loss: 4.640, avg. samples / sec: 945.94
Iteration:    680, Loss function: 7.350, Average Loss: 4.691, avg. samples / sec: 975.27
Iteration:    700, Loss function: 6.763, Average Loss: 4.738, avg. samples / sec: 956.02
Iteration:    720, Loss function: 6.915, Average Loss: 4.786, avg. samples / sec: 996.47
Iteration:    740, Loss function: 6.945, Average Loss: 4.830, avg. samples / sec: 927.74
Iteration:    760, Loss function: 6.923, Average Loss: 4.872, avg. samples / sec: 907.68
Iteration:    780, Loss function: 6.755, Average Loss: 4.914, avg. samples / sec: 982.01
Iteration:    800, Loss function: 6.984, Average Loss: 4.953, avg. samples / sec: 903.30
Iteration:    820, Loss function: 6.863, Average Loss: 4.989, avg. samples / sec: 919.05
Iteration:    840, Loss function: 6.681, Average Loss: 5.026, avg. samples / sec: 940.19
Iteration:    860, Loss function: 6.716, Average Loss: 5.059, avg. samples / sec: 985.99
Iteration:    880, Loss function: 6.730, Average Loss: 5.092, avg. samples / sec: 944.21
Iteration:    900, Loss function: 6.983, Average Loss: 5.122, avg. samples / sec: 968.50
Iteration:    920, Loss function: 6.698, Average Loss: 5.151, avg. samples / sec: 973.24
Iteration:    940, Loss function: 6.757, Average Loss: 5.181, avg. samples / sec: 923.81
Iteration:    960, Loss function: 6.374, Average Loss: 5.209, avg. samples / sec: 985.14
Iteration:    980, Loss function: 6.554, Average Loss: 5.236, avg. samples / sec: 959.43
Iteration:   1000, Loss function: 6.548, Average Loss: 5.260, avg. samples / sec: 980.64
Iteration:   1020, Loss function: 6.305, Average Loss: 5.283, avg. samples / sec: 987.24
:::MLLOG {"namespace": "", "time_ms": 1639068451483, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451485, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.514, Average Loss: 5.306, avg. samples / sec: 966.93
Iteration:   1060, Loss function: 6.184, Average Loss: 5.327, avg. samples / sec: 855.02
Iteration:   1080, Loss function: 6.353, Average Loss: 5.348, avg. samples / sec: 948.49
Iteration:   1100, Loss function: 6.248, Average Loss: 5.367, avg. samples / sec: 985.20
Iteration:   1120, Loss function: 6.213, Average Loss: 5.386, avg. samples / sec: 940.14
Iteration:   1140, Loss function: 6.322, Average Loss: 5.405, avg. samples / sec: 939.35
Iteration:   1160, Loss function: 6.103, Average Loss: 5.421, avg. samples / sec: 902.95
Iteration:   1180, Loss function: 6.210, Average Loss: 5.437, avg. samples / sec: 940.99
Iteration:   1200, Loss function: 6.336, Average Loss: 5.453, avg. samples / sec: 923.75
Iteration:   1220, Loss function: 6.317, Average Loss: 5.467, avg. samples / sec: 955.36
Iteration:   1240, Loss function: 6.077, Average Loss: 5.479, avg. samples / sec: 958.62
Iteration:   1260, Loss function: 5.998, Average Loss: 5.491, avg. samples / sec: 934.47
Iteration:   1280, Loss function: 5.932, Average Loss: 5.503, avg. samples / sec: 980.30
Iteration:   1300, Loss function: 6.124, Average Loss: 5.516, avg. samples / sec: 971.43
Iteration:   1320, Loss function: 6.174, Average Loss: 5.528, avg. samples / sec: 989.96
Iteration:   1340, Loss function: 5.938, Average Loss: 5.537, avg. samples / sec: 986.17
Iteration:   1360, Loss function: 6.038, Average Loss: 5.549, avg. samples / sec: 969.40
Iteration:   1380, Loss function: 6.254, Average Loss: 5.558, avg. samples / sec: 953.77
Iteration:   1400, Loss function: 6.217, Average Loss: 5.566, avg. samples / sec: 957.17
Iteration:   1420, Loss function: 5.850, Average Loss: 5.574, avg. samples / sec: 901.16
Iteration:   1440, Loss function: 6.349, Average Loss: 5.582, avg. samples / sec: 968.08
Iteration:   1460, Loss function: 6.393, Average Loss: 5.589, avg. samples / sec: 981.84
Iteration:   1480, Loss function: 5.920, Average Loss: 5.597, avg. samples / sec: 968.22
Iteration:   1500, Loss function: 6.003, Average Loss: 5.605, avg. samples / sec: 931.34
Iteration:   1520, Loss function: 6.084, Average Loss: 5.611, avg. samples / sec: 964.64
Iteration:   1540, Loss function: 5.973, Average Loss: 5.615, avg. samples / sec: 973.39
Iteration:   1560, Loss function: 5.759, Average Loss: 5.619, avg. samples / sec: 972.07
Iteration:   1580, Loss function: 5.713, Average Loss: 5.624, avg. samples / sec: 933.60
Iteration:   1600, Loss function: 6.046, Average Loss: 5.629, avg. samples / sec: 982.77
Iteration:   1620, Loss function: 5.899, Average Loss: 5.634, avg. samples / sec: 974.10
Iteration:   1640, Loss function: 5.876, Average Loss: 5.637, avg. samples / sec: 898.23
Iteration:   1660, Loss function: 5.785, Average Loss: 5.642, avg. samples / sec: 935.04
Iteration:   1680, Loss function: 5.688, Average Loss: 5.644, avg. samples / sec: 926.31
Iteration:   1700, Loss function: 5.480, Average Loss: 5.647, avg. samples / sec: 986.92
Iteration:   1720, Loss function: 5.694, Average Loss: 5.649, avg. samples / sec: 884.14
Iteration:   1740, Loss function: 5.771, Average Loss: 5.652, avg. samples / sec: 968.80
Iteration:   1760, Loss function: 5.488, Average Loss: 5.653, avg. samples / sec: 953.65
Iteration:   1780, Loss function: 5.777, Average Loss: 5.654, avg. samples / sec: 962.28
Iteration:   1800, Loss function: 5.566, Average Loss: 5.655, avg. samples / sec: 952.94
Iteration:   1820, Loss function: 6.092, Average Loss: 5.657, avg. samples / sec: 945.23
Iteration:   1840, Loss function: 5.859, Average Loss: 5.658, avg. samples / sec: 958.95
Iteration:   1860, Loss function: 5.591, Average Loss: 5.657, avg. samples / sec: 973.29
Iteration:   1880, Loss function: 5.806, Average Loss: 5.658, avg. samples / sec: 988.66
Iteration:   1900, Loss function: 5.790, Average Loss: 5.659, avg. samples / sec: 978.18
Iteration:   1920, Loss function: 5.798, Average Loss: 5.658, avg. samples / sec: 976.14
Iteration:   1940, Loss function: 5.937, Average Loss: 5.657, avg. samples / sec: 933.31
Iteration:   1960, Loss function: 5.544, Average Loss: 5.657, avg. samples / sec: 950.26
Iteration:   1980, Loss function: 5.709, Average Loss: 5.657, avg. samples / sec: 950.82
Iteration:   2000, Loss function: 5.754, Average Loss: 5.656, avg. samples / sec: 971.64
Iteration:   2020, Loss function: 5.732, Average Loss: 5.655, avg. samples / sec: 916.70
Iteration:   2040, Loss function: 5.767, Average Loss: 5.654, avg. samples / sec: 908.80
:::MLLOG {"namespace": "", "time_ms": 1639068574799, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574801, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.541, Average Loss: 5.652, avg. samples / sec: 979.96
Iteration:   2080, Loss function: 5.236, Average Loss: 5.649, avg. samples / sec: 975.72
Iteration:   2100, Loss function: 5.496, Average Loss: 5.647, avg. samples / sec: 977.49
Iteration:   2120, Loss function: 5.190, Average Loss: 5.644, avg. samples / sec: 983.88
Iteration:   2140, Loss function: 5.474, Average Loss: 5.641, avg. samples / sec: 971.21
Iteration:   2160, Loss function: 5.322, Average Loss: 5.639, avg. samples / sec: 960.00
Iteration:   2180, Loss function: 5.371, Average Loss: 5.636, avg. samples / sec: 915.97
Iteration:   2200, Loss function: 5.316, Average Loss: 5.633, avg. samples / sec: 910.92
Iteration:   2220, Loss function: 5.489, Average Loss: 5.630, avg. samples / sec: 980.32
Iteration:   2240, Loss function: 5.657, Average Loss: 5.627, avg. samples / sec: 980.14
Iteration:   2260, Loss function: 5.343, Average Loss: 5.624, avg. samples / sec: 987.28
Iteration:   2280, Loss function: 5.348, Average Loss: 5.622, avg. samples / sec: 981.60
Iteration:   2300, Loss function: 5.124, Average Loss: 5.618, avg. samples / sec: 965.47
Iteration:   2320, Loss function: 5.293, Average Loss: 5.615, avg. samples / sec: 982.57
Iteration:   2340, Loss function: 5.475, Average Loss: 5.612, avg. samples / sec: 968.19
Iteration:   2360, Loss function: 5.359, Average Loss: 5.608, avg. samples / sec: 995.20
Iteration:   2380, Loss function: 5.327, Average Loss: 5.604, avg. samples / sec: 974.79
Iteration:   2400, Loss function: 5.805, Average Loss: 5.600, avg. samples / sec: 973.26
Iteration:   2420, Loss function: 5.529, Average Loss: 5.596, avg. samples / sec: 917.50
Iteration:   2440, Loss function: 5.447, Average Loss: 5.593, avg. samples / sec: 890.36
Iteration:   2460, Loss function: 5.307, Average Loss: 5.589, avg. samples / sec: 961.55
Iteration:   2480, Loss function: 5.169, Average Loss: 5.585, avg. samples / sec: 955.25
Iteration:   2500, Loss function: 5.340, Average Loss: 5.581, avg. samples / sec: 948.41
Iteration:   2520, Loss function: 5.311, Average Loss: 5.575, avg. samples / sec: 901.28
Iteration:   2540, Loss function: 5.667, Average Loss: 5.571, avg. samples / sec: 969.49
Iteration:   2560, Loss function: 5.321, Average Loss: 5.568, avg. samples / sec: 972.58
Iteration:   2580, Loss function: 5.287, Average Loss: 5.564, avg. samples / sec: 984.63
Iteration:   2600, Loss function: 5.450, Average Loss: 5.562, avg. samples / sec: 981.37
Iteration:   2620, Loss function: 5.630, Average Loss: 5.557, avg. samples / sec: 995.47
Iteration:   2640, Loss function: 5.204, Average Loss: 5.554, avg. samples / sec: 962.70
Iteration:   2660, Loss function: 5.248, Average Loss: 5.550, avg. samples / sec: 967.82
Iteration:   2680, Loss function: 5.094, Average Loss: 5.547, avg. samples / sec: 980.06
Iteration:   2700, Loss function: 5.152, Average Loss: 5.542, avg. samples / sec: 955.81
Iteration:   2720, Loss function: 5.317, Average Loss: 5.538, avg. samples / sec: 837.80
Iteration:   2740, Loss function: 5.043, Average Loss: 5.533, avg. samples / sec: 866.96
Iteration:   2760, Loss function: 4.939, Average Loss: 5.529, avg. samples / sec: 937.01
Iteration:   2780, Loss function: 5.428, Average Loss: 5.525, avg. samples / sec: 892.63
Iteration:   2800, Loss function: 5.262, Average Loss: 5.520, avg. samples / sec: 869.60
Iteration:   2820, Loss function: 5.511, Average Loss: 5.516, avg. samples / sec: 920.29
Iteration:   2840, Loss function: 5.215, Average Loss: 5.511, avg. samples / sec: 957.19
Iteration:   2860, Loss function: 5.101, Average Loss: 5.505, avg. samples / sec: 964.86
Iteration:   2880, Loss function: 5.414, Average Loss: 5.501, avg. samples / sec: 981.59
Iteration:   2900, Loss function: 4.975, Average Loss: 5.495, avg. samples / sec: 973.37
Iteration:   2920, Loss function: 5.114, Average Loss: 5.489, avg. samples / sec: 970.67
Iteration:   2940, Loss function: 4.835, Average Loss: 5.484, avg. samples / sec: 956.68
Iteration:   2960, Loss function: 5.413, Average Loss: 5.481, avg. samples / sec: 987.51
Iteration:   2980, Loss function: 5.190, Average Loss: 5.477, avg. samples / sec: 917.64
Iteration:   3000, Loss function: 5.365, Average Loss: 5.472, avg. samples / sec: 920.14
Iteration:   3020, Loss function: 5.272, Average Loss: 5.466, avg. samples / sec: 970.67
Iteration:   3040, Loss function: 5.238, Average Loss: 5.461, avg. samples / sec: 958.41
Iteration:   3060, Loss function: 5.126, Average Loss: 5.456, avg. samples / sec: 897.36
Iteration:   3080, Loss function: 4.963, Average Loss: 5.450, avg. samples / sec: 836.77
:::MLLOG {"namespace": "", "time_ms": 1639068698425, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068698426, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.386, Average Loss: 5.446, avg. samples / sec: 923.90
Iteration:   3120, Loss function: 4.927, Average Loss: 5.439, avg. samples / sec: 940.66
Iteration:   3140, Loss function: 5.219, Average Loss: 5.435, avg. samples / sec: 989.68
Iteration:   3160, Loss function: 5.494, Average Loss: 5.430, avg. samples / sec: 976.95
Iteration:   3180, Loss function: 5.004, Average Loss: 5.425, avg. samples / sec: 994.62
Iteration:   3200, Loss function: 5.418, Average Loss: 5.420, avg. samples / sec: 912.07
Iteration:   3220, Loss function: 5.131, Average Loss: 5.415, avg. samples / sec: 937.03
Iteration:   3240, Loss function: 5.106, Average Loss: 5.409, avg. samples / sec: 988.50
Iteration:   3260, Loss function: 4.952, Average Loss: 5.403, avg. samples / sec: 990.32
Iteration:   3280, Loss function: 4.868, Average Loss: 5.397, avg. samples / sec: 904.70
Iteration:   3300, Loss function: 5.004, Average Loss: 5.392, avg. samples / sec: 976.97
Iteration:   3320, Loss function: 5.141, Average Loss: 5.388, avg. samples / sec: 938.67
Iteration:   3340, Loss function: 5.119, Average Loss: 5.385, avg. samples / sec: 963.63
Iteration:   3360, Loss function: 5.062, Average Loss: 5.377, avg. samples / sec: 981.75
Iteration:   3380, Loss function: 5.082, Average Loss: 5.372, avg. samples / sec: 971.82
Iteration:   3400, Loss function: 4.731, Average Loss: 5.366, avg. samples / sec: 962.13
Iteration:   3420, Loss function: 5.082, Average Loss: 5.361, avg. samples / sec: 962.03
Iteration:   3440, Loss function: 4.846, Average Loss: 5.356, avg. samples / sec: 984.86
Iteration:   3460, Loss function: 5.320, Average Loss: 5.352, avg. samples / sec: 962.53
Iteration:   3480, Loss function: 5.080, Average Loss: 5.347, avg. samples / sec: 959.41
Iteration:   3500, Loss function: 5.345, Average Loss: 5.343, avg. samples / sec: 983.49
Iteration:   3520, Loss function: 5.133, Average Loss: 5.340, avg. samples / sec: 973.51
Iteration:   3540, Loss function: 5.188, Average Loss: 5.335, avg. samples / sec: 948.66
Iteration:   3560, Loss function: 5.201, Average Loss: 5.333, avg. samples / sec: 945.57
Iteration:   3580, Loss function: 5.086, Average Loss: 5.328, avg. samples / sec: 883.07
Iteration:   3600, Loss function: 5.248, Average Loss: 5.321, avg. samples / sec: 935.85
Iteration:   3620, Loss function: 4.690, Average Loss: 5.316, avg. samples / sec: 972.15
Iteration:   3640, Loss function: 4.839, Average Loss: 5.311, avg. samples / sec: 979.78
Iteration:   3660, Loss function: 5.056, Average Loss: 5.305, avg. samples / sec: 917.33
Iteration:   3680, Loss function: 5.116, Average Loss: 5.300, avg. samples / sec: 950.27
Iteration:   3700, Loss function: 5.107, Average Loss: 5.295, avg. samples / sec: 945.66
Iteration:   3720, Loss function: 4.873, Average Loss: 5.289, avg. samples / sec: 929.07
Iteration:   3740, Loss function: 5.061, Average Loss: 5.285, avg. samples / sec: 908.38
Iteration:   3760, Loss function: 5.097, Average Loss: 5.281, avg. samples / sec: 986.08
Iteration:   3780, Loss function: 4.953, Average Loss: 5.276, avg. samples / sec: 936.39
Iteration:   3800, Loss function: 5.053, Average Loss: 5.272, avg. samples / sec: 934.96
Iteration:   3820, Loss function: 5.213, Average Loss: 5.267, avg. samples / sec: 979.90
Iteration:   3840, Loss function: 4.782, Average Loss: 5.262, avg. samples / sec: 952.11
Iteration:   3860, Loss function: 4.999, Average Loss: 5.256, avg. samples / sec: 908.49
Iteration:   3880, Loss function: 4.917, Average Loss: 5.251, avg. samples / sec: 928.23
Iteration:   3900, Loss function: 5.011, Average Loss: 5.247, avg. samples / sec: 938.15
Iteration:   3920, Loss function: 5.251, Average Loss: 5.241, avg. samples / sec: 940.00
Iteration:   3940, Loss function: 4.971, Average Loss: 5.235, avg. samples / sec: 979.34
Iteration:   3960, Loss function: 4.903, Average Loss: 5.231, avg. samples / sec: 953.38
Iteration:   3980, Loss function: 4.892, Average Loss: 5.226, avg. samples / sec: 966.36
Iteration:   4000, Loss function: 5.197, Average Loss: 5.223, avg. samples / sec: 986.67
Iteration:   4020, Loss function: 4.954, Average Loss: 5.219, avg. samples / sec: 992.66
Iteration:   4040, Loss function: 5.058, Average Loss: 5.215, avg. samples / sec: 967.07
Iteration:   4060, Loss function: 5.087, Average Loss: 5.212, avg. samples / sec: 903.69
Iteration:   4080, Loss function: 5.130, Average Loss: 5.207, avg. samples / sec: 882.52
Iteration:   4100, Loss function: 5.339, Average Loss: 5.204, avg. samples / sec: 902.16
:::MLLOG {"namespace": "", "time_ms": 1639068821883, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821886, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.014, Average Loss: 5.200, avg. samples / sec: 942.84
Iteration:   4140, Loss function: 5.096, Average Loss: 5.196, avg. samples / sec: 980.31
Iteration:   4160, Loss function: 4.959, Average Loss: 5.189, avg. samples / sec: 890.00
Iteration:   4180, Loss function: 4.895, Average Loss: 5.183, avg. samples / sec: 915.51
Iteration:   4200, Loss function: 4.951, Average Loss: 5.178, avg. samples / sec: 948.10
Iteration:   4220, Loss function: 4.709, Average Loss: 5.173, avg. samples / sec: 928.72
Iteration:   4240, Loss function: 4.833, Average Loss: 5.168, avg. samples / sec: 956.78
Iteration:   4260, Loss function: 5.151, Average Loss: 5.164, avg. samples / sec: 994.25
Iteration:   4280, Loss function: 4.782, Average Loss: 5.158, avg. samples / sec: 994.39
Iteration:   4300, Loss function: 4.717, Average Loss: 5.152, avg. samples / sec: 981.87
Iteration:   4320, Loss function: 4.827, Average Loss: 5.148, avg. samples / sec: 955.20
Iteration:   4340, Loss function: 4.857, Average Loss: 5.144, avg. samples / sec: 927.81
Iteration:   4360, Loss function: 4.998, Average Loss: 5.139, avg. samples / sec: 870.09
Iteration:   4380, Loss function: 5.275, Average Loss: 5.135, avg. samples / sec: 872.70
Iteration:   4400, Loss function: 4.923, Average Loss: 5.132, avg. samples / sec: 841.05
Iteration:   4420, Loss function: 4.842, Average Loss: 5.127, avg. samples / sec: 916.33
Iteration:   4440, Loss function: 4.689, Average Loss: 5.121, avg. samples / sec: 877.76
Iteration:   4460, Loss function: 5.124, Average Loss: 5.116, avg. samples / sec: 956.98
Iteration:   4480, Loss function: 5.038, Average Loss: 5.113, avg. samples / sec: 962.56
Iteration:   4500, Loss function: 4.978, Average Loss: 5.110, avg. samples / sec: 980.49
Iteration:   4520, Loss function: 4.735, Average Loss: 5.107, avg. samples / sec: 979.61
Iteration:   4540, Loss function: 5.092, Average Loss: 5.102, avg. samples / sec: 949.59
Iteration:   4560, Loss function: 4.631, Average Loss: 5.098, avg. samples / sec: 960.21
Iteration:   4580, Loss function: 4.666, Average Loss: 5.095, avg. samples / sec: 941.31
Iteration:   4600, Loss function: 4.811, Average Loss: 5.091, avg. samples / sec: 954.74
Iteration:   4620, Loss function: 4.806, Average Loss: 5.087, avg. samples / sec: 966.93
Iteration:   4640, Loss function: 4.640, Average Loss: 5.082, avg. samples / sec: 864.16
Iteration:   4660, Loss function: 4.815, Average Loss: 5.078, avg. samples / sec: 897.14
Iteration:   4680, Loss function: 5.111, Average Loss: 5.074, avg. samples / sec: 897.63
Iteration:   4700, Loss function: 4.718, Average Loss: 5.070, avg. samples / sec: 898.25
Iteration:   4720, Loss function: 4.777, Average Loss: 5.065, avg. samples / sec: 989.10
Iteration:   4740, Loss function: 4.771, Average Loss: 5.060, avg. samples / sec: 977.73
Iteration:   4760, Loss function: 4.809, Average Loss: 5.057, avg. samples / sec: 959.64
Iteration:   4780, Loss function: 4.872, Average Loss: 5.052, avg. samples / sec: 944.58
Iteration:   4800, Loss function: 4.888, Average Loss: 5.049, avg. samples / sec: 939.44
Iteration:   4820, Loss function: 4.915, Average Loss: 5.045, avg. samples / sec: 963.73
Iteration:   4840, Loss function: 5.154, Average Loss: 5.042, avg. samples / sec: 891.43
Iteration:   4860, Loss function: 4.528, Average Loss: 5.038, avg. samples / sec: 958.97
Iteration:   4880, Loss function: 5.287, Average Loss: 5.035, avg. samples / sec: 948.23
Iteration:   4900, Loss function: 4.629, Average Loss: 5.031, avg. samples / sec: 887.12
Iteration:   4920, Loss function: 4.808, Average Loss: 5.027, avg. samples / sec: 957.00
Iteration:   4940, Loss function: 4.574, Average Loss: 5.023, avg. samples / sec: 924.50
Iteration:   4960, Loss function: 4.663, Average Loss: 5.019, avg. samples / sec: 967.96
Iteration:   4980, Loss function: 4.459, Average Loss: 5.015, avg. samples / sec: 958.23
Iteration:   5000, Loss function: 4.957, Average Loss: 5.012, avg. samples / sec: 961.39
Iteration:   5020, Loss function: 5.131, Average Loss: 5.009, avg. samples / sec: 946.17
Iteration:   5040, Loss function: 4.722, Average Loss: 5.005, avg. samples / sec: 928.09
Iteration:   5060, Loss function: 4.921, Average Loss: 5.002, avg. samples / sec: 981.06
Iteration:   5080, Loss function: 4.509, Average Loss: 4.997, avg. samples / sec: 919.41
Iteration:   5100, Loss function: 4.735, Average Loss: 4.994, avg. samples / sec: 911.24
Iteration:   5120, Loss function: 4.661, Average Loss: 4.992, avg. samples / sec: 985.20
Iteration:   5140, Loss function: 4.874, Average Loss: 4.988, avg. samples / sec: 992.61
:::MLLOG {"namespace": "", "time_ms": 1639068946818, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.55 s
:::MLLOG {"namespace": "", "time_ms": 1639068979481, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068979485, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068979485, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.909, Average Loss: 4.984, avg. samples / sec: 64.11
Iteration:   5180, Loss function: 4.836, Average Loss: 4.979, avg. samples / sec: 999.98
DONE (t=3.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10750
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21977
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09525
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19785
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21006
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10750 AP goal: 0.10000
Iteration:   5200, Loss function: 4.609, Average Loss: 4.975, avg. samples / sec: 1015.18
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10749979591036177, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986692, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:27 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:27 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068295871, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296037, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2192447378, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2192447378
:::MLLOG {"namespace": "", "time_ms": 1639068298028, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298028, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323221, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323221, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068324964, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324965, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.26s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325409, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325409, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325411, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.795, Average Loss: 0.023, avg. samples / sec: 4.21
Iteration:     20, Loss function: 21.053, Average Loss: 0.456, avg. samples / sec: 820.32
Iteration:     40, Loss function: 20.723, Average Loss: 0.857, avg. samples / sec: 847.02
Iteration:     60, Loss function: 20.293, Average Loss: 1.247, avg. samples / sec: 896.96
Iteration:     80, Loss function: 20.222, Average Loss: 1.622, avg. samples / sec: 856.47
Iteration:    100, Loss function: 16.822, Average Loss: 1.964, avg. samples / sec: 869.93
Iteration:    120, Loss function: 12.571, Average Loss: 2.191, avg. samples / sec: 885.82
Iteration:    140, Loss function: 9.842, Average Loss: 2.357, avg. samples / sec: 914.82
Iteration:    160, Loss function: 9.137, Average Loss: 2.499, avg. samples / sec: 930.34
Iteration:    180, Loss function: 9.187, Average Loss: 2.630, avg. samples / sec: 925.75
Iteration:    200, Loss function: 8.587, Average Loss: 2.756, avg. samples / sec: 889.27
Iteration:    220, Loss function: 8.561, Average Loss: 2.876, avg. samples / sec: 895.03
Iteration:    240, Loss function: 8.563, Average Loss: 2.990, avg. samples / sec: 930.55
Iteration:    260, Loss function: 9.075, Average Loss: 3.106, avg. samples / sec: 970.23
Iteration:    280, Loss function: 8.802, Average Loss: 3.219, avg. samples / sec: 934.40
Iteration:    300, Loss function: 8.303, Average Loss: 3.323, avg. samples / sec: 901.73
Iteration:    320, Loss function: 8.320, Average Loss: 3.422, avg. samples / sec: 894.92
Iteration:    340, Loss function: 8.287, Average Loss: 3.519, avg. samples / sec: 952.42
Iteration:    360, Loss function: 7.930, Average Loss: 3.610, avg. samples / sec: 975.81
Iteration:    380, Loss function: 7.981, Average Loss: 3.699, avg. samples / sec: 861.90
Iteration:    400, Loss function: 7.998, Average Loss: 3.785, avg. samples / sec: 929.42
Iteration:    420, Loss function: 7.621, Average Loss: 3.866, avg. samples / sec: 908.29
Iteration:    440, Loss function: 7.859, Average Loss: 3.944, avg. samples / sec: 951.40
Iteration:    460, Loss function: 7.818, Average Loss: 4.020, avg. samples / sec: 846.96
Iteration:    480, Loss function: 7.567, Average Loss: 4.095, avg. samples / sec: 977.69
Iteration:    500, Loss function: 7.408, Average Loss: 4.165, avg. samples / sec: 989.03
Iteration:    520, Loss function: 7.634, Average Loss: 4.232, avg. samples / sec: 935.84
Iteration:    540, Loss function: 7.564, Average Loss: 4.297, avg. samples / sec: 912.44
Iteration:    560, Loss function: 7.283, Average Loss: 4.359, avg. samples / sec: 944.78
Iteration:    580, Loss function: 7.287, Average Loss: 4.419, avg. samples / sec: 969.12
Iteration:    600, Loss function: 7.258, Average Loss: 4.478, avg. samples / sec: 968.93
Iteration:    620, Loss function: 7.121, Average Loss: 4.534, avg. samples / sec: 975.60
Iteration:    640, Loss function: 6.823, Average Loss: 4.588, avg. samples / sec: 923.35
Iteration:    660, Loss function: 7.170, Average Loss: 4.640, avg. samples / sec: 945.94
Iteration:    680, Loss function: 7.350, Average Loss: 4.691, avg. samples / sec: 975.27
Iteration:    700, Loss function: 6.763, Average Loss: 4.738, avg. samples / sec: 956.02
Iteration:    720, Loss function: 6.915, Average Loss: 4.786, avg. samples / sec: 996.47
Iteration:    740, Loss function: 6.945, Average Loss: 4.830, avg. samples / sec: 927.74
Iteration:    760, Loss function: 6.923, Average Loss: 4.872, avg. samples / sec: 907.68
Iteration:    780, Loss function: 6.755, Average Loss: 4.914, avg. samples / sec: 982.01
Iteration:    800, Loss function: 6.984, Average Loss: 4.953, avg. samples / sec: 903.30
Iteration:    820, Loss function: 6.863, Average Loss: 4.989, avg. samples / sec: 919.05
Iteration:    840, Loss function: 6.681, Average Loss: 5.026, avg. samples / sec: 940.19
Iteration:    860, Loss function: 6.716, Average Loss: 5.059, avg. samples / sec: 985.99
Iteration:    880, Loss function: 6.730, Average Loss: 5.092, avg. samples / sec: 944.21
Iteration:    900, Loss function: 6.983, Average Loss: 5.122, avg. samples / sec: 968.50
Iteration:    920, Loss function: 6.698, Average Loss: 5.151, avg. samples / sec: 973.24
Iteration:    940, Loss function: 6.757, Average Loss: 5.181, avg. samples / sec: 923.81
Iteration:    960, Loss function: 6.374, Average Loss: 5.209, avg. samples / sec: 985.14
Iteration:    980, Loss function: 6.554, Average Loss: 5.236, avg. samples / sec: 959.43
Iteration:   1000, Loss function: 6.548, Average Loss: 5.260, avg. samples / sec: 980.64
Iteration:   1020, Loss function: 6.305, Average Loss: 5.283, avg. samples / sec: 987.24
:::MLLOG {"namespace": "", "time_ms": 1639068451483, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451485, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.514, Average Loss: 5.306, avg. samples / sec: 966.93
Iteration:   1060, Loss function: 6.184, Average Loss: 5.327, avg. samples / sec: 855.02
Iteration:   1080, Loss function: 6.353, Average Loss: 5.348, avg. samples / sec: 948.49
Iteration:   1100, Loss function: 6.248, Average Loss: 5.367, avg. samples / sec: 985.20
Iteration:   1120, Loss function: 6.213, Average Loss: 5.386, avg. samples / sec: 940.14
Iteration:   1140, Loss function: 6.322, Average Loss: 5.405, avg. samples / sec: 939.35
Iteration:   1160, Loss function: 6.103, Average Loss: 5.421, avg. samples / sec: 902.95
Iteration:   1180, Loss function: 6.210, Average Loss: 5.437, avg. samples / sec: 940.99
Iteration:   1200, Loss function: 6.336, Average Loss: 5.453, avg. samples / sec: 923.75
Iteration:   1220, Loss function: 6.317, Average Loss: 5.467, avg. samples / sec: 955.36
Iteration:   1240, Loss function: 6.077, Average Loss: 5.479, avg. samples / sec: 958.62
Iteration:   1260, Loss function: 5.998, Average Loss: 5.491, avg. samples / sec: 934.47
Iteration:   1280, Loss function: 5.932, Average Loss: 5.503, avg. samples / sec: 980.30
Iteration:   1300, Loss function: 6.124, Average Loss: 5.516, avg. samples / sec: 971.43
Iteration:   1320, Loss function: 6.174, Average Loss: 5.528, avg. samples / sec: 989.96
Iteration:   1340, Loss function: 5.938, Average Loss: 5.537, avg. samples / sec: 986.17
Iteration:   1360, Loss function: 6.038, Average Loss: 5.549, avg. samples / sec: 969.40
Iteration:   1380, Loss function: 6.254, Average Loss: 5.558, avg. samples / sec: 953.77
Iteration:   1400, Loss function: 6.217, Average Loss: 5.566, avg. samples / sec: 957.17
Iteration:   1420, Loss function: 5.850, Average Loss: 5.574, avg. samples / sec: 901.16
Iteration:   1440, Loss function: 6.349, Average Loss: 5.582, avg. samples / sec: 968.08
Iteration:   1460, Loss function: 6.393, Average Loss: 5.589, avg. samples / sec: 981.84
Iteration:   1480, Loss function: 5.920, Average Loss: 5.597, avg. samples / sec: 968.22
Iteration:   1500, Loss function: 6.003, Average Loss: 5.605, avg. samples / sec: 931.34
Iteration:   1520, Loss function: 6.084, Average Loss: 5.611, avg. samples / sec: 964.64
Iteration:   1540, Loss function: 5.973, Average Loss: 5.615, avg. samples / sec: 973.39
Iteration:   1560, Loss function: 5.759, Average Loss: 5.619, avg. samples / sec: 972.07
Iteration:   1580, Loss function: 5.713, Average Loss: 5.624, avg. samples / sec: 933.60
Iteration:   1600, Loss function: 6.046, Average Loss: 5.629, avg. samples / sec: 982.77
Iteration:   1620, Loss function: 5.899, Average Loss: 5.634, avg. samples / sec: 974.10
Iteration:   1640, Loss function: 5.876, Average Loss: 5.637, avg. samples / sec: 898.23
Iteration:   1660, Loss function: 5.785, Average Loss: 5.642, avg. samples / sec: 935.04
Iteration:   1680, Loss function: 5.688, Average Loss: 5.644, avg. samples / sec: 926.31
Iteration:   1700, Loss function: 5.480, Average Loss: 5.647, avg. samples / sec: 986.92
Iteration:   1720, Loss function: 5.694, Average Loss: 5.649, avg. samples / sec: 884.14
Iteration:   1740, Loss function: 5.771, Average Loss: 5.652, avg. samples / sec: 968.80
Iteration:   1760, Loss function: 5.488, Average Loss: 5.653, avg. samples / sec: 953.65
Iteration:   1780, Loss function: 5.777, Average Loss: 5.654, avg. samples / sec: 962.28
Iteration:   1800, Loss function: 5.566, Average Loss: 5.655, avg. samples / sec: 952.94
Iteration:   1820, Loss function: 6.092, Average Loss: 5.657, avg. samples / sec: 945.23
Iteration:   1840, Loss function: 5.859, Average Loss: 5.658, avg. samples / sec: 958.95
Iteration:   1860, Loss function: 5.591, Average Loss: 5.657, avg. samples / sec: 973.29
Iteration:   1880, Loss function: 5.806, Average Loss: 5.658, avg. samples / sec: 988.66
Iteration:   1900, Loss function: 5.790, Average Loss: 5.659, avg. samples / sec: 978.18
Iteration:   1920, Loss function: 5.798, Average Loss: 5.658, avg. samples / sec: 976.14
Iteration:   1940, Loss function: 5.937, Average Loss: 5.657, avg. samples / sec: 933.31
Iteration:   1960, Loss function: 5.544, Average Loss: 5.657, avg. samples / sec: 950.26
Iteration:   1980, Loss function: 5.709, Average Loss: 5.657, avg. samples / sec: 950.82
Iteration:   2000, Loss function: 5.754, Average Loss: 5.656, avg. samples / sec: 971.64
Iteration:   2020, Loss function: 5.732, Average Loss: 5.655, avg. samples / sec: 916.70
Iteration:   2040, Loss function: 5.767, Average Loss: 5.654, avg. samples / sec: 908.80
:::MLLOG {"namespace": "", "time_ms": 1639068574799, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574801, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.541, Average Loss: 5.652, avg. samples / sec: 979.96
Iteration:   2080, Loss function: 5.236, Average Loss: 5.649, avg. samples / sec: 975.72
Iteration:   2100, Loss function: 5.496, Average Loss: 5.647, avg. samples / sec: 977.49
Iteration:   2120, Loss function: 5.190, Average Loss: 5.644, avg. samples / sec: 983.88
Iteration:   2140, Loss function: 5.474, Average Loss: 5.641, avg. samples / sec: 971.21
Iteration:   2160, Loss function: 5.322, Average Loss: 5.639, avg. samples / sec: 960.00
Iteration:   2180, Loss function: 5.371, Average Loss: 5.636, avg. samples / sec: 915.97
Iteration:   2200, Loss function: 5.316, Average Loss: 5.633, avg. samples / sec: 910.92
Iteration:   2220, Loss function: 5.489, Average Loss: 5.630, avg. samples / sec: 980.32
Iteration:   2240, Loss function: 5.657, Average Loss: 5.627, avg. samples / sec: 980.14
Iteration:   2260, Loss function: 5.343, Average Loss: 5.624, avg. samples / sec: 987.28
Iteration:   2280, Loss function: 5.348, Average Loss: 5.622, avg. samples / sec: 981.60
Iteration:   2300, Loss function: 5.124, Average Loss: 5.618, avg. samples / sec: 965.47
Iteration:   2320, Loss function: 5.293, Average Loss: 5.615, avg. samples / sec: 982.57
Iteration:   2340, Loss function: 5.475, Average Loss: 5.612, avg. samples / sec: 968.19
Iteration:   2360, Loss function: 5.359, Average Loss: 5.608, avg. samples / sec: 995.20
Iteration:   2380, Loss function: 5.327, Average Loss: 5.604, avg. samples / sec: 974.79
Iteration:   2400, Loss function: 5.805, Average Loss: 5.600, avg. samples / sec: 973.26
Iteration:   2420, Loss function: 5.529, Average Loss: 5.596, avg. samples / sec: 917.50
Iteration:   2440, Loss function: 5.447, Average Loss: 5.593, avg. samples / sec: 890.36
Iteration:   2460, Loss function: 5.307, Average Loss: 5.589, avg. samples / sec: 961.55
Iteration:   2480, Loss function: 5.169, Average Loss: 5.585, avg. samples / sec: 955.25
Iteration:   2500, Loss function: 5.340, Average Loss: 5.581, avg. samples / sec: 948.41
Iteration:   2520, Loss function: 5.311, Average Loss: 5.575, avg. samples / sec: 901.28
Iteration:   2540, Loss function: 5.667, Average Loss: 5.571, avg. samples / sec: 969.49
Iteration:   2560, Loss function: 5.321, Average Loss: 5.568, avg. samples / sec: 972.58
Iteration:   2580, Loss function: 5.287, Average Loss: 5.564, avg. samples / sec: 984.63
Iteration:   2600, Loss function: 5.450, Average Loss: 5.562, avg. samples / sec: 981.37
Iteration:   2620, Loss function: 5.630, Average Loss: 5.557, avg. samples / sec: 995.47
Iteration:   2640, Loss function: 5.204, Average Loss: 5.554, avg. samples / sec: 962.70
Iteration:   2660, Loss function: 5.248, Average Loss: 5.550, avg. samples / sec: 967.82
Iteration:   2680, Loss function: 5.094, Average Loss: 5.547, avg. samples / sec: 980.06
Iteration:   2700, Loss function: 5.152, Average Loss: 5.542, avg. samples / sec: 955.81
Iteration:   2720, Loss function: 5.317, Average Loss: 5.538, avg. samples / sec: 837.80
Iteration:   2740, Loss function: 5.043, Average Loss: 5.533, avg. samples / sec: 866.96
Iteration:   2760, Loss function: 4.939, Average Loss: 5.529, avg. samples / sec: 937.01
Iteration:   2780, Loss function: 5.428, Average Loss: 5.525, avg. samples / sec: 892.63
Iteration:   2800, Loss function: 5.262, Average Loss: 5.520, avg. samples / sec: 869.60
Iteration:   2820, Loss function: 5.511, Average Loss: 5.516, avg. samples / sec: 920.29
Iteration:   2840, Loss function: 5.215, Average Loss: 5.511, avg. samples / sec: 957.19
Iteration:   2860, Loss function: 5.101, Average Loss: 5.505, avg. samples / sec: 964.86
Iteration:   2880, Loss function: 5.414, Average Loss: 5.501, avg. samples / sec: 981.59
Iteration:   2900, Loss function: 4.975, Average Loss: 5.495, avg. samples / sec: 973.37
Iteration:   2920, Loss function: 5.114, Average Loss: 5.489, avg. samples / sec: 970.67
Iteration:   2940, Loss function: 4.835, Average Loss: 5.484, avg. samples / sec: 956.68
Iteration:   2960, Loss function: 5.413, Average Loss: 5.481, avg. samples / sec: 987.51
Iteration:   2980, Loss function: 5.190, Average Loss: 5.477, avg. samples / sec: 917.64
Iteration:   3000, Loss function: 5.365, Average Loss: 5.472, avg. samples / sec: 920.14
Iteration:   3020, Loss function: 5.272, Average Loss: 5.466, avg. samples / sec: 970.67
Iteration:   3040, Loss function: 5.238, Average Loss: 5.461, avg. samples / sec: 958.41
Iteration:   3060, Loss function: 5.126, Average Loss: 5.456, avg. samples / sec: 897.36
Iteration:   3080, Loss function: 4.963, Average Loss: 5.450, avg. samples / sec: 836.77
:::MLLOG {"namespace": "", "time_ms": 1639068698425, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068698426, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.386, Average Loss: 5.446, avg. samples / sec: 923.90
Iteration:   3120, Loss function: 4.927, Average Loss: 5.439, avg. samples / sec: 940.66
Iteration:   3140, Loss function: 5.219, Average Loss: 5.435, avg. samples / sec: 989.68
Iteration:   3160, Loss function: 5.494, Average Loss: 5.430, avg. samples / sec: 976.95
Iteration:   3180, Loss function: 5.004, Average Loss: 5.425, avg. samples / sec: 994.62
Iteration:   3200, Loss function: 5.418, Average Loss: 5.420, avg. samples / sec: 912.07
Iteration:   3220, Loss function: 5.131, Average Loss: 5.415, avg. samples / sec: 937.03
Iteration:   3240, Loss function: 5.106, Average Loss: 5.409, avg. samples / sec: 988.50
Iteration:   3260, Loss function: 4.952, Average Loss: 5.403, avg. samples / sec: 990.32
Iteration:   3280, Loss function: 4.868, Average Loss: 5.397, avg. samples / sec: 904.70
Iteration:   3300, Loss function: 5.004, Average Loss: 5.392, avg. samples / sec: 976.97
Iteration:   3320, Loss function: 5.141, Average Loss: 5.388, avg. samples / sec: 938.67
Iteration:   3340, Loss function: 5.119, Average Loss: 5.385, avg. samples / sec: 963.63
Iteration:   3360, Loss function: 5.062, Average Loss: 5.377, avg. samples / sec: 981.75
Iteration:   3380, Loss function: 5.082, Average Loss: 5.372, avg. samples / sec: 971.82
Iteration:   3400, Loss function: 4.731, Average Loss: 5.366, avg. samples / sec: 962.13
Iteration:   3420, Loss function: 5.082, Average Loss: 5.361, avg. samples / sec: 962.03
Iteration:   3440, Loss function: 4.846, Average Loss: 5.356, avg. samples / sec: 984.86
Iteration:   3460, Loss function: 5.320, Average Loss: 5.352, avg. samples / sec: 962.53
Iteration:   3480, Loss function: 5.080, Average Loss: 5.347, avg. samples / sec: 959.41
Iteration:   3500, Loss function: 5.345, Average Loss: 5.343, avg. samples / sec: 983.49
Iteration:   3520, Loss function: 5.133, Average Loss: 5.340, avg. samples / sec: 973.51
Iteration:   3540, Loss function: 5.188, Average Loss: 5.335, avg. samples / sec: 948.66
Iteration:   3560, Loss function: 5.201, Average Loss: 5.333, avg. samples / sec: 945.57
Iteration:   3580, Loss function: 5.086, Average Loss: 5.328, avg. samples / sec: 883.07
Iteration:   3600, Loss function: 5.248, Average Loss: 5.321, avg. samples / sec: 935.85
Iteration:   3620, Loss function: 4.690, Average Loss: 5.316, avg. samples / sec: 972.15
Iteration:   3640, Loss function: 4.839, Average Loss: 5.311, avg. samples / sec: 979.78
Iteration:   3660, Loss function: 5.056, Average Loss: 5.305, avg. samples / sec: 917.33
Iteration:   3680, Loss function: 5.116, Average Loss: 5.300, avg. samples / sec: 950.27
Iteration:   3700, Loss function: 5.107, Average Loss: 5.295, avg. samples / sec: 945.66
Iteration:   3720, Loss function: 4.873, Average Loss: 5.289, avg. samples / sec: 929.07
Iteration:   3740, Loss function: 5.061, Average Loss: 5.285, avg. samples / sec: 908.38
Iteration:   3760, Loss function: 5.097, Average Loss: 5.281, avg. samples / sec: 986.08
Iteration:   3780, Loss function: 4.953, Average Loss: 5.276, avg. samples / sec: 936.39
Iteration:   3800, Loss function: 5.053, Average Loss: 5.272, avg. samples / sec: 934.96
Iteration:   3820, Loss function: 5.213, Average Loss: 5.267, avg. samples / sec: 979.90
Iteration:   3840, Loss function: 4.782, Average Loss: 5.262, avg. samples / sec: 952.11
Iteration:   3860, Loss function: 4.999, Average Loss: 5.256, avg. samples / sec: 908.49
Iteration:   3880, Loss function: 4.917, Average Loss: 5.251, avg. samples / sec: 928.23
Iteration:   3900, Loss function: 5.011, Average Loss: 5.247, avg. samples / sec: 938.15
Iteration:   3920, Loss function: 5.251, Average Loss: 5.241, avg. samples / sec: 940.00
Iteration:   3940, Loss function: 4.971, Average Loss: 5.235, avg. samples / sec: 979.34
Iteration:   3960, Loss function: 4.903, Average Loss: 5.231, avg. samples / sec: 953.38
Iteration:   3980, Loss function: 4.892, Average Loss: 5.226, avg. samples / sec: 966.36
Iteration:   4000, Loss function: 5.197, Average Loss: 5.223, avg. samples / sec: 986.67
Iteration:   4020, Loss function: 4.954, Average Loss: 5.219, avg. samples / sec: 992.66
Iteration:   4040, Loss function: 5.058, Average Loss: 5.215, avg. samples / sec: 967.07
Iteration:   4060, Loss function: 5.087, Average Loss: 5.212, avg. samples / sec: 903.69
Iteration:   4080, Loss function: 5.130, Average Loss: 5.207, avg. samples / sec: 882.52
Iteration:   4100, Loss function: 5.339, Average Loss: 5.204, avg. samples / sec: 902.16
:::MLLOG {"namespace": "", "time_ms": 1639068821883, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821886, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.014, Average Loss: 5.200, avg. samples / sec: 942.84
Iteration:   4140, Loss function: 5.096, Average Loss: 5.196, avg. samples / sec: 980.31
Iteration:   4160, Loss function: 4.959, Average Loss: 5.189, avg. samples / sec: 890.00
Iteration:   4180, Loss function: 4.895, Average Loss: 5.183, avg. samples / sec: 915.51
Iteration:   4200, Loss function: 4.951, Average Loss: 5.178, avg. samples / sec: 948.10
Iteration:   4220, Loss function: 4.709, Average Loss: 5.173, avg. samples / sec: 928.72
Iteration:   4240, Loss function: 4.833, Average Loss: 5.168, avg. samples / sec: 956.78
Iteration:   4260, Loss function: 5.151, Average Loss: 5.164, avg. samples / sec: 994.25
Iteration:   4280, Loss function: 4.782, Average Loss: 5.158, avg. samples / sec: 994.39
Iteration:   4300, Loss function: 4.717, Average Loss: 5.152, avg. samples / sec: 981.87
Iteration:   4320, Loss function: 4.827, Average Loss: 5.148, avg. samples / sec: 955.20
Iteration:   4340, Loss function: 4.857, Average Loss: 5.144, avg. samples / sec: 927.81
Iteration:   4360, Loss function: 4.998, Average Loss: 5.139, avg. samples / sec: 870.09
Iteration:   4380, Loss function: 5.275, Average Loss: 5.135, avg. samples / sec: 872.70
Iteration:   4400, Loss function: 4.923, Average Loss: 5.132, avg. samples / sec: 841.05
Iteration:   4420, Loss function: 4.842, Average Loss: 5.127, avg. samples / sec: 916.33
Iteration:   4440, Loss function: 4.689, Average Loss: 5.121, avg. samples / sec: 877.76
Iteration:   4460, Loss function: 5.124, Average Loss: 5.116, avg. samples / sec: 956.98
Iteration:   4480, Loss function: 5.038, Average Loss: 5.113, avg. samples / sec: 962.56
Iteration:   4500, Loss function: 4.978, Average Loss: 5.110, avg. samples / sec: 980.49
Iteration:   4520, Loss function: 4.735, Average Loss: 5.107, avg. samples / sec: 979.61
Iteration:   4540, Loss function: 5.092, Average Loss: 5.102, avg. samples / sec: 949.59
Iteration:   4560, Loss function: 4.631, Average Loss: 5.098, avg. samples / sec: 960.21
Iteration:   4580, Loss function: 4.666, Average Loss: 5.095, avg. samples / sec: 941.31
Iteration:   4600, Loss function: 4.811, Average Loss: 5.091, avg. samples / sec: 954.74
Iteration:   4620, Loss function: 4.806, Average Loss: 5.087, avg. samples / sec: 966.93
Iteration:   4640, Loss function: 4.640, Average Loss: 5.082, avg. samples / sec: 864.16
Iteration:   4660, Loss function: 4.815, Average Loss: 5.078, avg. samples / sec: 897.14
Iteration:   4680, Loss function: 5.111, Average Loss: 5.074, avg. samples / sec: 897.63
Iteration:   4700, Loss function: 4.718, Average Loss: 5.070, avg. samples / sec: 898.25
Iteration:   4720, Loss function: 4.777, Average Loss: 5.065, avg. samples / sec: 989.10
Iteration:   4740, Loss function: 4.771, Average Loss: 5.060, avg. samples / sec: 977.73
Iteration:   4760, Loss function: 4.809, Average Loss: 5.057, avg. samples / sec: 959.64
Iteration:   4780, Loss function: 4.872, Average Loss: 5.052, avg. samples / sec: 944.58
Iteration:   4800, Loss function: 4.888, Average Loss: 5.049, avg. samples / sec: 939.44
Iteration:   4820, Loss function: 4.915, Average Loss: 5.045, avg. samples / sec: 963.73
Iteration:   4840, Loss function: 5.154, Average Loss: 5.042, avg. samples / sec: 891.43
Iteration:   4860, Loss function: 4.528, Average Loss: 5.038, avg. samples / sec: 958.97
Iteration:   4880, Loss function: 5.287, Average Loss: 5.035, avg. samples / sec: 948.23
Iteration:   4900, Loss function: 4.629, Average Loss: 5.031, avg. samples / sec: 887.12
Iteration:   4920, Loss function: 4.808, Average Loss: 5.027, avg. samples / sec: 957.00
Iteration:   4940, Loss function: 4.574, Average Loss: 5.023, avg. samples / sec: 924.50
Iteration:   4960, Loss function: 4.663, Average Loss: 5.019, avg. samples / sec: 967.96
Iteration:   4980, Loss function: 4.459, Average Loss: 5.015, avg. samples / sec: 958.23
Iteration:   5000, Loss function: 4.957, Average Loss: 5.012, avg. samples / sec: 961.39
Iteration:   5020, Loss function: 5.131, Average Loss: 5.009, avg. samples / sec: 946.17
Iteration:   5040, Loss function: 4.722, Average Loss: 5.005, avg. samples / sec: 928.09
Iteration:   5060, Loss function: 4.921, Average Loss: 5.002, avg. samples / sec: 981.06
Iteration:   5080, Loss function: 4.509, Average Loss: 4.997, avg. samples / sec: 919.41
Iteration:   5100, Loss function: 4.735, Average Loss: 4.994, avg. samples / sec: 911.24
Iteration:   5120, Loss function: 4.661, Average Loss: 4.992, avg. samples / sec: 985.20
Iteration:   5140, Loss function: 4.874, Average Loss: 4.988, avg. samples / sec: 992.61
:::MLLOG {"namespace": "", "time_ms": 1639068946818, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.55 s
:::MLLOG {"namespace": "", "time_ms": 1639068979481, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068979485, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068979485, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.909, Average Loss: 4.984, avg. samples / sec: 64.11
Iteration:   5180, Loss function: 4.836, Average Loss: 4.979, avg. samples / sec: 999.98
DONE (t=3.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10750
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21977
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09525
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19785
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21006
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22280
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10750 AP goal: 0.10000
Iteration:   5200, Loss function: 4.609, Average Loss: 4.975, avg. samples / sec: 1015.18
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10749979591036177, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986559, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068986692, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068987
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:27 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:48 PM'
START TIMING RUN WAS 2021-12-09 04:44:48 PM
ENDING TIMING RUN AT 2021-12-09 04:56:27 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:27 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ result=699
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-09 04:44:48 PM'
RESULT,SINGLE_STAGE_DETECTOR,,699,nvidia,2021-12-09 04:44:48 PM
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
