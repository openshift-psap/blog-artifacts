+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-sdvh5.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-sdvh5.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-sdvh5.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ MIG_MODE=1
Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068290
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:50 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:50 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:50 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:50 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-sdvh5 to the sync file ...
run-ssd--1-sdvh5 Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
     3	run-ssd--1-2kxbs
     4	run-ssd--1-gqlkg
     5	run-ssd--1-dfxg9
     6	run-ssd--1-sdvh5
Thu Dec  9 16:44:55 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068297163, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068297311, "event_type": "POINT_IN_TIME", "key": "seed", "value": 483947632, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 483947632
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068299140, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068299140, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323949, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323949, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068325703, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325705, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326116, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326117, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326119, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.795, Average Loss: 0.023, avg. samples / sec: 4.28
Iteration:     20, Loss function: 21.168, Average Loss: 0.456, avg. samples / sec: 807.09
Iteration:     40, Loss function: 20.745, Average Loss: 0.858, avg. samples / sec: 822.50
Iteration:     60, Loss function: 20.454, Average Loss: 1.248, avg. samples / sec: 884.95
Iteration:     80, Loss function: 20.395, Average Loss: 1.624, avg. samples / sec: 846.65
Iteration:    100, Loss function: 18.014, Average Loss: 1.974, avg. samples / sec: 876.90
Iteration:    120, Loss function: 11.219, Average Loss: 2.215, avg. samples / sec: 920.00
Iteration:    140, Loss function: 9.912, Average Loss: 2.384, avg. samples / sec: 878.64
Iteration:    160, Loss function: 9.365, Average Loss: 2.529, avg. samples / sec: 944.53
Iteration:    180, Loss function: 9.280, Average Loss: 2.661, avg. samples / sec: 922.30
Iteration:    200, Loss function: 8.895, Average Loss: 2.785, avg. samples / sec: 958.05
Iteration:    220, Loss function: 8.625, Average Loss: 2.904, avg. samples / sec: 900.51
Iteration:    240, Loss function: 8.587, Average Loss: 3.019, avg. samples / sec: 966.05
Iteration:    260, Loss function: 8.855, Average Loss: 3.132, avg. samples / sec: 945.37
Iteration:    280, Loss function: 8.804, Average Loss: 3.243, avg. samples / sec: 904.12
Iteration:    300, Loss function: 8.373, Average Loss: 3.347, avg. samples / sec: 958.05
Iteration:    320, Loss function: 8.444, Average Loss: 3.447, avg. samples / sec: 946.01
Iteration:    340, Loss function: 8.297, Average Loss: 3.544, avg. samples / sec: 945.71
Iteration:    360, Loss function: 8.098, Average Loss: 3.636, avg. samples / sec: 872.63
Iteration:    380, Loss function: 7.959, Average Loss: 3.725, avg. samples / sec: 914.06
Iteration:    400, Loss function: 7.915, Average Loss: 3.808, avg. samples / sec: 844.02
Iteration:    420, Loss function: 7.634, Average Loss: 3.889, avg. samples / sec: 920.29
Iteration:    440, Loss function: 7.777, Average Loss: 3.966, avg. samples / sec: 784.21
Iteration:    460, Loss function: 8.136, Average Loss: 4.043, avg. samples / sec: 965.91
Iteration:    480, Loss function: 7.439, Average Loss: 4.119, avg. samples / sec: 905.85
Iteration:    500, Loss function: 7.715, Average Loss: 4.189, avg. samples / sec: 941.96
Iteration:    520, Loss function: 7.454, Average Loss: 4.256, avg. samples / sec: 987.58
Iteration:    540, Loss function: 7.359, Average Loss: 4.320, avg. samples / sec: 932.04
Iteration:    560, Loss function: 7.235, Average Loss: 4.381, avg. samples / sec: 942.41
Iteration:    580, Loss function: 7.079, Average Loss: 4.440, avg. samples / sec: 940.42
Iteration:    600, Loss function: 7.165, Average Loss: 4.498, avg. samples / sec: 969.61
Iteration:    620, Loss function: 7.138, Average Loss: 4.552, avg. samples / sec: 940.92
Iteration:    640, Loss function: 6.861, Average Loss: 4.606, avg. samples / sec: 906.40
Iteration:    660, Loss function: 7.004, Average Loss: 4.658, avg. samples / sec: 950.37
Iteration:    680, Loss function: 7.305, Average Loss: 4.708, avg. samples / sec: 986.04
Iteration:    700, Loss function: 6.700, Average Loss: 4.754, avg. samples / sec: 963.91
Iteration:    720, Loss function: 6.912, Average Loss: 4.801, avg. samples / sec: 970.15
Iteration:    740, Loss function: 6.971, Average Loss: 4.844, avg. samples / sec: 976.86
Iteration:    760, Loss function: 7.080, Average Loss: 4.887, avg. samples / sec: 923.98
Iteration:    780, Loss function: 6.845, Average Loss: 4.929, avg. samples / sec: 901.23
Iteration:    800, Loss function: 7.116, Average Loss: 4.968, avg. samples / sec: 979.91
Iteration:    820, Loss function: 6.803, Average Loss: 5.006, avg. samples / sec: 970.70
Iteration:    840, Loss function: 6.980, Average Loss: 5.041, avg. samples / sec: 949.11
Iteration:    860, Loss function: 7.022, Average Loss: 5.075, avg. samples / sec: 972.30
Iteration:    880, Loss function: 6.778, Average Loss: 5.108, avg. samples / sec: 935.95
Iteration:    900, Loss function: 7.015, Average Loss: 5.138, avg. samples / sec: 947.17
Iteration:    920, Loss function: 6.557, Average Loss: 5.167, avg. samples / sec: 954.09
Iteration:    940, Loss function: 6.705, Average Loss: 5.195, avg. samples / sec: 934.39
Iteration:    960, Loss function: 6.425, Average Loss: 5.223, avg. samples / sec: 891.68
Iteration:    980, Loss function: 6.620, Average Loss: 5.249, avg. samples / sec: 971.72
Iteration:   1000, Loss function: 6.647, Average Loss: 5.275, avg. samples / sec: 927.18
Iteration:   1020, Loss function: 6.558, Average Loss: 5.298, avg. samples / sec: 959.23
:::MLLOG {"namespace": "", "time_ms": 1639068452952, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068452954, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.500, Average Loss: 5.323, avg. samples / sec: 989.09
Iteration:   1060, Loss function: 6.235, Average Loss: 5.345, avg. samples / sec: 910.75
Iteration:   1080, Loss function: 6.361, Average Loss: 5.366, avg. samples / sec: 885.75
Iteration:   1100, Loss function: 6.260, Average Loss: 5.385, avg. samples / sec: 833.75
Iteration:   1120, Loss function: 6.235, Average Loss: 5.405, avg. samples / sec: 960.55
Iteration:   1140, Loss function: 6.538, Average Loss: 5.424, avg. samples / sec: 965.65
Iteration:   1160, Loss function: 6.237, Average Loss: 5.440, avg. samples / sec: 965.30
Iteration:   1180, Loss function: 6.308, Average Loss: 5.456, avg. samples / sec: 976.33
Iteration:   1200, Loss function: 6.432, Average Loss: 5.472, avg. samples / sec: 966.36
Iteration:   1220, Loss function: 6.256, Average Loss: 5.487, avg. samples / sec: 979.92
Iteration:   1240, Loss function: 6.125, Average Loss: 5.499, avg. samples / sec: 980.21
Iteration:   1260, Loss function: 5.989, Average Loss: 5.510, avg. samples / sec: 972.95
Iteration:   1280, Loss function: 6.009, Average Loss: 5.523, avg. samples / sec: 970.50
Iteration:   1300, Loss function: 6.199, Average Loss: 5.535, avg. samples / sec: 979.17
Iteration:   1320, Loss function: 6.240, Average Loss: 5.547, avg. samples / sec: 942.34
Iteration:   1340, Loss function: 5.965, Average Loss: 5.556, avg. samples / sec: 988.59
Iteration:   1360, Loss function: 5.990, Average Loss: 5.566, avg. samples / sec: 928.58
Iteration:   1380, Loss function: 6.281, Average Loss: 5.575, avg. samples / sec: 963.23
Iteration:   1400, Loss function: 6.076, Average Loss: 5.583, avg. samples / sec: 980.32
Iteration:   1420, Loss function: 5.779, Average Loss: 5.590, avg. samples / sec: 962.25
Iteration:   1440, Loss function: 6.404, Average Loss: 5.598, avg. samples / sec: 964.95
Iteration:   1460, Loss function: 6.086, Average Loss: 5.605, avg. samples / sec: 908.48
Iteration:   1480, Loss function: 5.902, Average Loss: 5.613, avg. samples / sec: 986.41
Iteration:   1500, Loss function: 5.974, Average Loss: 5.620, avg. samples / sec: 972.10
Iteration:   1520, Loss function: 6.007, Average Loss: 5.625, avg. samples / sec: 917.72
Iteration:   1540, Loss function: 6.018, Average Loss: 5.628, avg. samples / sec: 949.88
Iteration:   1560, Loss function: 5.803, Average Loss: 5.632, avg. samples / sec: 941.82
Iteration:   1580, Loss function: 5.525, Average Loss: 5.637, avg. samples / sec: 979.35
Iteration:   1600, Loss function: 6.132, Average Loss: 5.642, avg. samples / sec: 927.49
Iteration:   1620, Loss function: 5.619, Average Loss: 5.646, avg. samples / sec: 989.99
Iteration:   1640, Loss function: 5.852, Average Loss: 5.649, avg. samples / sec: 927.39
Iteration:   1660, Loss function: 5.960, Average Loss: 5.654, avg. samples / sec: 952.95
Iteration:   1680, Loss function: 5.690, Average Loss: 5.656, avg. samples / sec: 971.74
Iteration:   1700, Loss function: 5.337, Average Loss: 5.659, avg. samples / sec: 951.68
Iteration:   1720, Loss function: 5.809, Average Loss: 5.661, avg. samples / sec: 978.80
Iteration:   1740, Loss function: 6.051, Average Loss: 5.663, avg. samples / sec: 982.90
Iteration:   1760, Loss function: 5.472, Average Loss: 5.665, avg. samples / sec: 975.09
Iteration:   1780, Loss function: 5.751, Average Loss: 5.666, avg. samples / sec: 956.92
Iteration:   1800, Loss function: 5.589, Average Loss: 5.668, avg. samples / sec: 982.95
Iteration:   1820, Loss function: 6.132, Average Loss: 5.670, avg. samples / sec: 911.21
Iteration:   1840, Loss function: 5.956, Average Loss: 5.670, avg. samples / sec: 911.60
Iteration:   1860, Loss function: 5.704, Average Loss: 5.669, avg. samples / sec: 913.93
Iteration:   1880, Loss function: 5.910, Average Loss: 5.671, avg. samples / sec: 878.00
Iteration:   1900, Loss function: 6.007, Average Loss: 5.673, avg. samples / sec: 924.74
Iteration:   1920, Loss function: 5.597, Average Loss: 5.672, avg. samples / sec: 933.54
Iteration:   1940, Loss function: 5.960, Average Loss: 5.673, avg. samples / sec: 922.63
Iteration:   1960, Loss function: 5.580, Average Loss: 5.672, avg. samples / sec: 854.07
Iteration:   1980, Loss function: 5.760, Average Loss: 5.671, avg. samples / sec: 965.20
Iteration:   2000, Loss function: 5.491, Average Loss: 5.671, avg. samples / sec: 969.61
Iteration:   2020, Loss function: 5.701, Average Loss: 5.668, avg. samples / sec: 977.03
Iteration:   2040, Loss function: 5.765, Average Loss: 5.668, avg. samples / sec: 958.75
:::MLLOG {"namespace": "", "time_ms": 1639068576676, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068576678, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.511, Average Loss: 5.666, avg. samples / sec: 957.56
Iteration:   2080, Loss function: 5.290, Average Loss: 5.663, avg. samples / sec: 973.92
Iteration:   2100, Loss function: 5.667, Average Loss: 5.660, avg. samples / sec: 972.88
Iteration:   2120, Loss function: 5.341, Average Loss: 5.657, avg. samples / sec: 924.49
Iteration:   2140, Loss function: 5.467, Average Loss: 5.653, avg. samples / sec: 971.83
Iteration:   2160, Loss function: 5.374, Average Loss: 5.650, avg. samples / sec: 990.04
Iteration:   2180, Loss function: 5.284, Average Loss: 5.648, avg. samples / sec: 868.21
Iteration:   2200, Loss function: 5.418, Average Loss: 5.644, avg. samples / sec: 924.90
Iteration:   2220, Loss function: 5.689, Average Loss: 5.642, avg. samples / sec: 910.53
Iteration:   2240, Loss function: 5.331, Average Loss: 5.639, avg. samples / sec: 906.25
Iteration:   2260, Loss function: 5.499, Average Loss: 5.635, avg. samples / sec: 968.55
Iteration:   2280, Loss function: 5.313, Average Loss: 5.632, avg. samples / sec: 919.55
Iteration:   2300, Loss function: 5.267, Average Loss: 5.629, avg. samples / sec: 949.78
Iteration:   2320, Loss function: 5.310, Average Loss: 5.627, avg. samples / sec: 965.85
Iteration:   2340, Loss function: 5.508, Average Loss: 5.623, avg. samples / sec: 974.83
Iteration:   2360, Loss function: 5.278, Average Loss: 5.619, avg. samples / sec: 994.49
Iteration:   2380, Loss function: 5.573, Average Loss: 5.615, avg. samples / sec: 982.01
Iteration:   2400, Loss function: 5.644, Average Loss: 5.612, avg. samples / sec: 973.15
Iteration:   2420, Loss function: 5.368, Average Loss: 5.608, avg. samples / sec: 960.35
Iteration:   2440, Loss function: 5.463, Average Loss: 5.604, avg. samples / sec: 934.94
Iteration:   2460, Loss function: 5.237, Average Loss: 5.600, avg. samples / sec: 983.46
Iteration:   2480, Loss function: 5.414, Average Loss: 5.596, avg. samples / sec: 981.96
Iteration:   2500, Loss function: 5.436, Average Loss: 5.591, avg. samples / sec: 990.50
Iteration:   2520, Loss function: 5.458, Average Loss: 5.586, avg. samples / sec: 978.05
Iteration:   2540, Loss function: 5.248, Average Loss: 5.582, avg. samples / sec: 939.19
Iteration:   2560, Loss function: 5.360, Average Loss: 5.579, avg. samples / sec: 909.80
Iteration:   2580, Loss function: 5.276, Average Loss: 5.575, avg. samples / sec: 962.31
Iteration:   2600, Loss function: 5.388, Average Loss: 5.571, avg. samples / sec: 975.82
Iteration:   2620, Loss function: 5.415, Average Loss: 5.567, avg. samples / sec: 949.15
Iteration:   2640, Loss function: 5.186, Average Loss: 5.564, avg. samples / sec: 971.37
Iteration:   2660, Loss function: 5.112, Average Loss: 5.559, avg. samples / sec: 968.60
Iteration:   2680, Loss function: 5.102, Average Loss: 5.555, avg. samples / sec: 967.80
Iteration:   2700, Loss function: 5.174, Average Loss: 5.550, avg. samples / sec: 977.85
Iteration:   2720, Loss function: 5.200, Average Loss: 5.545, avg. samples / sec: 972.73
Iteration:   2740, Loss function: 5.245, Average Loss: 5.541, avg. samples / sec: 960.77
Iteration:   2760, Loss function: 5.095, Average Loss: 5.536, avg. samples / sec: 927.90
Iteration:   2780, Loss function: 5.496, Average Loss: 5.531, avg. samples / sec: 966.23
Iteration:   2800, Loss function: 5.343, Average Loss: 5.526, avg. samples / sec: 858.86
Iteration:   2820, Loss function: 5.558, Average Loss: 5.522, avg. samples / sec: 942.61
Iteration:   2840, Loss function: 5.081, Average Loss: 5.517, avg. samples / sec: 802.79
Iteration:   2860, Loss function: 5.177, Average Loss: 5.512, avg. samples / sec: 881.65
Iteration:   2880, Loss function: 5.174, Average Loss: 5.507, avg. samples / sec: 946.41
Iteration:   2900, Loss function: 4.985, Average Loss: 5.501, avg. samples / sec: 913.02
Iteration:   2920, Loss function: 5.186, Average Loss: 5.495, avg. samples / sec: 942.63
Iteration:   2940, Loss function: 5.076, Average Loss: 5.491, avg. samples / sec: 957.54
Iteration:   2960, Loss function: 5.320, Average Loss: 5.487, avg. samples / sec: 966.28
Iteration:   2980, Loss function: 5.234, Average Loss: 5.484, avg. samples / sec: 986.79
Iteration:   3000, Loss function: 5.376, Average Loss: 5.479, avg. samples / sec: 984.04
Iteration:   3020, Loss function: 5.295, Average Loss: 5.473, avg. samples / sec: 964.15
Iteration:   3040, Loss function: 5.281, Average Loss: 5.469, avg. samples / sec: 970.25
Iteration:   3060, Loss function: 5.019, Average Loss: 5.463, avg. samples / sec: 984.77
Iteration:   3080, Loss function: 4.918, Average Loss: 5.458, avg. samples / sec: 946.44
:::MLLOG {"namespace": "", "time_ms": 1639068700200, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700202, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.223, Average Loss: 5.452, avg. samples / sec: 948.82
Iteration:   3120, Loss function: 4.915, Average Loss: 5.446, avg. samples / sec: 974.16
Iteration:   3140, Loss function: 5.024, Average Loss: 5.441, avg. samples / sec: 913.06
Iteration:   3160, Loss function: 5.559, Average Loss: 5.436, avg. samples / sec: 930.37
Iteration:   3180, Loss function: 5.164, Average Loss: 5.430, avg. samples / sec: 937.89
Iteration:   3200, Loss function: 5.358, Average Loss: 5.425, avg. samples / sec: 964.84
Iteration:   3220, Loss function: 5.190, Average Loss: 5.419, avg. samples / sec: 991.64
Iteration:   3240, Loss function: 5.256, Average Loss: 5.414, avg. samples / sec: 937.03
Iteration:   3260, Loss function: 5.099, Average Loss: 5.408, avg. samples / sec: 936.38
Iteration:   3280, Loss function: 4.801, Average Loss: 5.402, avg. samples / sec: 965.24
Iteration:   3300, Loss function: 4.911, Average Loss: 5.395, avg. samples / sec: 909.93
Iteration:   3320, Loss function: 5.000, Average Loss: 5.390, avg. samples / sec: 978.31
Iteration:   3340, Loss function: 5.088, Average Loss: 5.385, avg. samples / sec: 898.01
Iteration:   3360, Loss function: 5.219, Average Loss: 5.378, avg. samples / sec: 866.50
Iteration:   3380, Loss function: 5.266, Average Loss: 5.371, avg. samples / sec: 849.82
Iteration:   3400, Loss function: 4.828, Average Loss: 5.366, avg. samples / sec: 891.42
Iteration:   3420, Loss function: 5.101, Average Loss: 5.362, avg. samples / sec: 958.87
Iteration:   3440, Loss function: 4.879, Average Loss: 5.356, avg. samples / sec: 980.35
Iteration:   3460, Loss function: 5.151, Average Loss: 5.352, avg. samples / sec: 959.89
Iteration:   3480, Loss function: 5.372, Average Loss: 5.347, avg. samples / sec: 901.91
Iteration:   3500, Loss function: 5.138, Average Loss: 5.342, avg. samples / sec: 973.63
Iteration:   3520, Loss function: 5.034, Average Loss: 5.340, avg. samples / sec: 912.15
Iteration:   3540, Loss function: 4.978, Average Loss: 5.336, avg. samples / sec: 914.37
Iteration:   3560, Loss function: 5.013, Average Loss: 5.332, avg. samples / sec: 948.48
Iteration:   3580, Loss function: 4.933, Average Loss: 5.328, avg. samples / sec: 976.31
Iteration:   3600, Loss function: 5.243, Average Loss: 5.322, avg. samples / sec: 955.79
Iteration:   3620, Loss function: 4.891, Average Loss: 5.317, avg. samples / sec: 956.88
Iteration:   3640, Loss function: 4.882, Average Loss: 5.312, avg. samples / sec: 989.83
Iteration:   3660, Loss function: 5.035, Average Loss: 5.308, avg. samples / sec: 934.73
Iteration:   3680, Loss function: 5.108, Average Loss: 5.302, avg. samples / sec: 940.91
Iteration:   3700, Loss function: 4.875, Average Loss: 5.296, avg. samples / sec: 981.03
Iteration:   3720, Loss function: 5.131, Average Loss: 5.291, avg. samples / sec: 971.92
Iteration:   3740, Loss function: 5.176, Average Loss: 5.286, avg. samples / sec: 970.31
Iteration:   3760, Loss function: 5.238, Average Loss: 5.283, avg. samples / sec: 946.57
Iteration:   3780, Loss function: 4.915, Average Loss: 5.278, avg. samples / sec: 887.76
Iteration:   3800, Loss function: 4.933, Average Loss: 5.274, avg. samples / sec: 968.89
Iteration:   3820, Loss function: 5.024, Average Loss: 5.269, avg. samples / sec: 977.25
Iteration:   3840, Loss function: 4.727, Average Loss: 5.264, avg. samples / sec: 981.37
Iteration:   3860, Loss function: 5.117, Average Loss: 5.259, avg. samples / sec: 895.17
Iteration:   3880, Loss function: 5.116, Average Loss: 5.254, avg. samples / sec: 900.67
Iteration:   3900, Loss function: 5.166, Average Loss: 5.250, avg. samples / sec: 959.71
Iteration:   3920, Loss function: 5.083, Average Loss: 5.244, avg. samples / sec: 973.77
Iteration:   3940, Loss function: 5.122, Average Loss: 5.239, avg. samples / sec: 926.45
Iteration:   3960, Loss function: 4.850, Average Loss: 5.236, avg. samples / sec: 928.20
Iteration:   3980, Loss function: 4.939, Average Loss: 5.231, avg. samples / sec: 893.65
Iteration:   4000, Loss function: 5.021, Average Loss: 5.227, avg. samples / sec: 944.79
Iteration:   4020, Loss function: 5.056, Average Loss: 5.222, avg. samples / sec: 982.71
Iteration:   4040, Loss function: 5.047, Average Loss: 5.218, avg. samples / sec: 955.94
Iteration:   4060, Loss function: 5.089, Average Loss: 5.213, avg. samples / sec: 958.41
Iteration:   4080, Loss function: 4.924, Average Loss: 5.209, avg. samples / sec: 995.81
Iteration:   4100, Loss function: 4.980, Average Loss: 5.205, avg. samples / sec: 980.55
:::MLLOG {"namespace": "", "time_ms": 1639068824433, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068824435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.069, Average Loss: 5.201, avg. samples / sec: 984.65
Iteration:   4140, Loss function: 5.045, Average Loss: 5.195, avg. samples / sec: 978.89
Iteration:   4160, Loss function: 4.940, Average Loss: 5.189, avg. samples / sec: 987.93
Iteration:   4180, Loss function: 4.962, Average Loss: 5.183, avg. samples / sec: 968.89
Iteration:   4200, Loss function: 4.745, Average Loss: 5.178, avg. samples / sec: 988.90
Iteration:   4220, Loss function: 4.755, Average Loss: 5.173, avg. samples / sec: 989.88
Iteration:   4240, Loss function: 4.873, Average Loss: 5.168, avg. samples / sec: 928.99
Iteration:   4260, Loss function: 5.001, Average Loss: 5.163, avg. samples / sec: 963.29
Iteration:   4280, Loss function: 5.008, Average Loss: 5.157, avg. samples / sec: 976.53
Iteration:   4300, Loss function: 4.837, Average Loss: 5.150, avg. samples / sec: 984.09
Iteration:   4320, Loss function: 4.805, Average Loss: 5.145, avg. samples / sec: 994.13
Iteration:   4340, Loss function: 4.834, Average Loss: 5.139, avg. samples / sec: 939.40
Iteration:   4360, Loss function: 4.786, Average Loss: 5.135, avg. samples / sec: 976.69
Iteration:   4380, Loss function: 4.849, Average Loss: 5.130, avg. samples / sec: 977.61
Iteration:   4400, Loss function: 4.882, Average Loss: 5.125, avg. samples / sec: 953.04
Iteration:   4420, Loss function: 4.712, Average Loss: 5.120, avg. samples / sec: 948.51
Iteration:   4440, Loss function: 4.798, Average Loss: 5.114, avg. samples / sec: 930.83
Iteration:   4460, Loss function: 5.355, Average Loss: 5.110, avg. samples / sec: 926.42
Iteration:   4480, Loss function: 4.954, Average Loss: 5.107, avg. samples / sec: 975.12
Iteration:   4500, Loss function: 4.851, Average Loss: 5.104, avg. samples / sec: 966.98
Iteration:   4520, Loss function: 4.710, Average Loss: 5.100, avg. samples / sec: 943.81
Iteration:   4540, Loss function: 5.043, Average Loss: 5.095, avg. samples / sec: 937.59
Iteration:   4560, Loss function: 4.761, Average Loss: 5.091, avg. samples / sec: 966.22
Iteration:   4580, Loss function: 4.776, Average Loss: 5.089, avg. samples / sec: 958.22
Iteration:   4600, Loss function: 4.958, Average Loss: 5.085, avg. samples / sec: 935.42
Iteration:   4620, Loss function: 4.757, Average Loss: 5.080, avg. samples / sec: 926.12
Iteration:   4640, Loss function: 4.630, Average Loss: 5.075, avg. samples / sec: 981.75
Iteration:   4660, Loss function: 4.879, Average Loss: 5.071, avg. samples / sec: 954.39
Iteration:   4680, Loss function: 5.143, Average Loss: 5.066, avg. samples / sec: 966.71
Iteration:   4700, Loss function: 4.623, Average Loss: 5.062, avg. samples / sec: 981.51
Iteration:   4720, Loss function: 4.671, Average Loss: 5.058, avg. samples / sec: 974.16
Iteration:   4740, Loss function: 4.636, Average Loss: 5.054, avg. samples / sec: 976.58
Iteration:   4760, Loss function: 4.576, Average Loss: 5.050, avg. samples / sec: 967.87
Iteration:   4780, Loss function: 4.791, Average Loss: 5.046, avg. samples / sec: 961.71
Iteration:   4800, Loss function: 4.873, Average Loss: 5.043, avg. samples / sec: 986.45
Iteration:   4820, Loss function: 4.681, Average Loss: 5.039, avg. samples / sec: 975.79
Iteration:   4840, Loss function: 5.068, Average Loss: 5.036, avg. samples / sec: 946.14
Iteration:   4860, Loss function: 4.676, Average Loss: 5.031, avg. samples / sec: 935.40
Iteration:   4880, Loss function: 5.054, Average Loss: 5.028, avg. samples / sec: 957.29
Iteration:   4900, Loss function: 4.501, Average Loss: 5.023, avg. samples / sec: 907.54
Iteration:   4920, Loss function: 4.557, Average Loss: 5.019, avg. samples / sec: 964.16
Iteration:   4940, Loss function: 4.877, Average Loss: 5.015, avg. samples / sec: 935.76
Iteration:   4960, Loss function: 4.640, Average Loss: 5.011, avg. samples / sec: 866.68
Iteration:   4980, Loss function: 4.841, Average Loss: 5.008, avg. samples / sec: 938.29
Iteration:   5000, Loss function: 5.049, Average Loss: 5.004, avg. samples / sec: 991.68
Iteration:   5020, Loss function: 5.054, Average Loss: 5.001, avg. samples / sec: 966.52
Iteration:   5040, Loss function: 4.782, Average Loss: 4.998, avg. samples / sec: 937.41
Iteration:   5060, Loss function: 4.709, Average Loss: 4.995, avg. samples / sec: 959.41
Iteration:   5080, Loss function: 4.393, Average Loss: 4.991, avg. samples / sec: 930.44
Iteration:   5100, Loss function: 4.862, Average Loss: 4.989, avg. samples / sec: 850.81
Iteration:   5120, Loss function: 4.646, Average Loss: 4.986, avg. samples / sec: 930.39
Iteration:   5140, Loss function: 4.834, Average Loss: 4.982, avg. samples / sec: 972.79
:::MLLOG {"namespace": "", "time_ms": 1639068947261, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 27.82 s
:::MLLOG {"namespace": "", "time_ms": 1639068975138, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068975140, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068975140, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.794, Average Loss: 4.977, avg. samples / sec: 75.31
Iteration:   5180, Loss function: 4.864, Average Loss: 4.973, avg. samples / sec: 932.68
DONE (t=4.90s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10419
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21197
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09141
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19132
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13618
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19980
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10419 AP goal: 0.10000
Iteration:   5200, Loss function: 4.641, Average Loss: 4.970, avg. samples / sec: 878.43
:::MLLOG {"namespace": "", "time_ms": 1639068982233, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982234, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10419140531253264, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982234, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982477, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:24 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:24 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068297163, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068297311, "event_type": "POINT_IN_TIME", "key": "seed", "value": 483947632, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 483947632
:::MLLOG {"namespace": "", "time_ms": 1639068299140, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068299140, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068299145, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323949, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323949, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068325703, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068325705, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326116, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326117, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326119, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.795, Average Loss: 0.023, avg. samples / sec: 4.28
Iteration:     20, Loss function: 21.168, Average Loss: 0.456, avg. samples / sec: 807.09
Iteration:     40, Loss function: 20.745, Average Loss: 0.858, avg. samples / sec: 822.50
Iteration:     60, Loss function: 20.454, Average Loss: 1.248, avg. samples / sec: 884.95
Iteration:     80, Loss function: 20.395, Average Loss: 1.624, avg. samples / sec: 846.65
Iteration:    100, Loss function: 18.014, Average Loss: 1.974, avg. samples / sec: 876.90
Iteration:    120, Loss function: 11.219, Average Loss: 2.215, avg. samples / sec: 920.00
Iteration:    140, Loss function: 9.912, Average Loss: 2.384, avg. samples / sec: 878.64
Iteration:    160, Loss function: 9.365, Average Loss: 2.529, avg. samples / sec: 944.53
Iteration:    180, Loss function: 9.280, Average Loss: 2.661, avg. samples / sec: 922.30
Iteration:    200, Loss function: 8.895, Average Loss: 2.785, avg. samples / sec: 958.05
Iteration:    220, Loss function: 8.625, Average Loss: 2.904, avg. samples / sec: 900.51
Iteration:    240, Loss function: 8.587, Average Loss: 3.019, avg. samples / sec: 966.05
Iteration:    260, Loss function: 8.855, Average Loss: 3.132, avg. samples / sec: 945.37
Iteration:    280, Loss function: 8.804, Average Loss: 3.243, avg. samples / sec: 904.12
Iteration:    300, Loss function: 8.373, Average Loss: 3.347, avg. samples / sec: 958.05
Iteration:    320, Loss function: 8.444, Average Loss: 3.447, avg. samples / sec: 946.01
Iteration:    340, Loss function: 8.297, Average Loss: 3.544, avg. samples / sec: 945.71
Iteration:    360, Loss function: 8.098, Average Loss: 3.636, avg. samples / sec: 872.63
Iteration:    380, Loss function: 7.959, Average Loss: 3.725, avg. samples / sec: 914.06
Iteration:    400, Loss function: 7.915, Average Loss: 3.808, avg. samples / sec: 844.02
Iteration:    420, Loss function: 7.634, Average Loss: 3.889, avg. samples / sec: 920.29
Iteration:    440, Loss function: 7.777, Average Loss: 3.966, avg. samples / sec: 784.21
Iteration:    460, Loss function: 8.136, Average Loss: 4.043, avg. samples / sec: 965.91
Iteration:    480, Loss function: 7.439, Average Loss: 4.119, avg. samples / sec: 905.85
Iteration:    500, Loss function: 7.715, Average Loss: 4.189, avg. samples / sec: 941.96
Iteration:    520, Loss function: 7.454, Average Loss: 4.256, avg. samples / sec: 987.58
Iteration:    540, Loss function: 7.359, Average Loss: 4.320, avg. samples / sec: 932.04
Iteration:    560, Loss function: 7.235, Average Loss: 4.381, avg. samples / sec: 942.41
Iteration:    580, Loss function: 7.079, Average Loss: 4.440, avg. samples / sec: 940.42
Iteration:    600, Loss function: 7.165, Average Loss: 4.498, avg. samples / sec: 969.61
Iteration:    620, Loss function: 7.138, Average Loss: 4.552, avg. samples / sec: 940.92
Iteration:    640, Loss function: 6.861, Average Loss: 4.606, avg. samples / sec: 906.40
Iteration:    660, Loss function: 7.004, Average Loss: 4.658, avg. samples / sec: 950.37
Iteration:    680, Loss function: 7.305, Average Loss: 4.708, avg. samples / sec: 986.04
Iteration:    700, Loss function: 6.700, Average Loss: 4.754, avg. samples / sec: 963.91
Iteration:    720, Loss function: 6.912, Average Loss: 4.801, avg. samples / sec: 970.15
Iteration:    740, Loss function: 6.971, Average Loss: 4.844, avg. samples / sec: 976.86
Iteration:    760, Loss function: 7.080, Average Loss: 4.887, avg. samples / sec: 923.98
Iteration:    780, Loss function: 6.845, Average Loss: 4.929, avg. samples / sec: 901.23
Iteration:    800, Loss function: 7.116, Average Loss: 4.968, avg. samples / sec: 979.91
Iteration:    820, Loss function: 6.803, Average Loss: 5.006, avg. samples / sec: 970.70
Iteration:    840, Loss function: 6.980, Average Loss: 5.041, avg. samples / sec: 949.11
Iteration:    860, Loss function: 7.022, Average Loss: 5.075, avg. samples / sec: 972.30
Iteration:    880, Loss function: 6.778, Average Loss: 5.108, avg. samples / sec: 935.95
Iteration:    900, Loss function: 7.015, Average Loss: 5.138, avg. samples / sec: 947.17
Iteration:    920, Loss function: 6.557, Average Loss: 5.167, avg. samples / sec: 954.09
Iteration:    940, Loss function: 6.705, Average Loss: 5.195, avg. samples / sec: 934.39
Iteration:    960, Loss function: 6.425, Average Loss: 5.223, avg. samples / sec: 891.68
Iteration:    980, Loss function: 6.620, Average Loss: 5.249, avg. samples / sec: 971.72
Iteration:   1000, Loss function: 6.647, Average Loss: 5.275, avg. samples / sec: 927.18
Iteration:   1020, Loss function: 6.558, Average Loss: 5.298, avg. samples / sec: 959.23
:::MLLOG {"namespace": "", "time_ms": 1639068452952, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068452954, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.500, Average Loss: 5.323, avg. samples / sec: 989.09
Iteration:   1060, Loss function: 6.235, Average Loss: 5.345, avg. samples / sec: 910.75
Iteration:   1080, Loss function: 6.361, Average Loss: 5.366, avg. samples / sec: 885.75
Iteration:   1100, Loss function: 6.260, Average Loss: 5.385, avg. samples / sec: 833.75
Iteration:   1120, Loss function: 6.235, Average Loss: 5.405, avg. samples / sec: 960.55
Iteration:   1140, Loss function: 6.538, Average Loss: 5.424, avg. samples / sec: 965.65
Iteration:   1160, Loss function: 6.237, Average Loss: 5.440, avg. samples / sec: 965.30
Iteration:   1180, Loss function: 6.308, Average Loss: 5.456, avg. samples / sec: 976.33
Iteration:   1200, Loss function: 6.432, Average Loss: 5.472, avg. samples / sec: 966.36
Iteration:   1220, Loss function: 6.256, Average Loss: 5.487, avg. samples / sec: 979.92
Iteration:   1240, Loss function: 6.125, Average Loss: 5.499, avg. samples / sec: 980.21
Iteration:   1260, Loss function: 5.989, Average Loss: 5.510, avg. samples / sec: 972.95
Iteration:   1280, Loss function: 6.009, Average Loss: 5.523, avg. samples / sec: 970.50
Iteration:   1300, Loss function: 6.199, Average Loss: 5.535, avg. samples / sec: 979.17
Iteration:   1320, Loss function: 6.240, Average Loss: 5.547, avg. samples / sec: 942.34
Iteration:   1340, Loss function: 5.965, Average Loss: 5.556, avg. samples / sec: 988.59
Iteration:   1360, Loss function: 5.990, Average Loss: 5.566, avg. samples / sec: 928.58
Iteration:   1380, Loss function: 6.281, Average Loss: 5.575, avg. samples / sec: 963.23
Iteration:   1400, Loss function: 6.076, Average Loss: 5.583, avg. samples / sec: 980.32
Iteration:   1420, Loss function: 5.779, Average Loss: 5.590, avg. samples / sec: 962.25
Iteration:   1440, Loss function: 6.404, Average Loss: 5.598, avg. samples / sec: 964.95
Iteration:   1460, Loss function: 6.086, Average Loss: 5.605, avg. samples / sec: 908.48
Iteration:   1480, Loss function: 5.902, Average Loss: 5.613, avg. samples / sec: 986.41
Iteration:   1500, Loss function: 5.974, Average Loss: 5.620, avg. samples / sec: 972.10
Iteration:   1520, Loss function: 6.007, Average Loss: 5.625, avg. samples / sec: 917.72
Iteration:   1540, Loss function: 6.018, Average Loss: 5.628, avg. samples / sec: 949.88
Iteration:   1560, Loss function: 5.803, Average Loss: 5.632, avg. samples / sec: 941.82
Iteration:   1580, Loss function: 5.525, Average Loss: 5.637, avg. samples / sec: 979.35
Iteration:   1600, Loss function: 6.132, Average Loss: 5.642, avg. samples / sec: 927.49
Iteration:   1620, Loss function: 5.619, Average Loss: 5.646, avg. samples / sec: 989.99
Iteration:   1640, Loss function: 5.852, Average Loss: 5.649, avg. samples / sec: 927.39
Iteration:   1660, Loss function: 5.960, Average Loss: 5.654, avg. samples / sec: 952.95
Iteration:   1680, Loss function: 5.690, Average Loss: 5.656, avg. samples / sec: 971.74
Iteration:   1700, Loss function: 5.337, Average Loss: 5.659, avg. samples / sec: 951.68
Iteration:   1720, Loss function: 5.809, Average Loss: 5.661, avg. samples / sec: 978.80
Iteration:   1740, Loss function: 6.051, Average Loss: 5.663, avg. samples / sec: 982.90
Iteration:   1760, Loss function: 5.472, Average Loss: 5.665, avg. samples / sec: 975.09
Iteration:   1780, Loss function: 5.751, Average Loss: 5.666, avg. samples / sec: 956.92
Iteration:   1800, Loss function: 5.589, Average Loss: 5.668, avg. samples / sec: 982.95
Iteration:   1820, Loss function: 6.132, Average Loss: 5.670, avg. samples / sec: 911.21
Iteration:   1840, Loss function: 5.956, Average Loss: 5.670, avg. samples / sec: 911.60
Iteration:   1860, Loss function: 5.704, Average Loss: 5.669, avg. samples / sec: 913.93
Iteration:   1880, Loss function: 5.910, Average Loss: 5.671, avg. samples / sec: 878.00
Iteration:   1900, Loss function: 6.007, Average Loss: 5.673, avg. samples / sec: 924.74
Iteration:   1920, Loss function: 5.597, Average Loss: 5.672, avg. samples / sec: 933.54
Iteration:   1940, Loss function: 5.960, Average Loss: 5.673, avg. samples / sec: 922.63
Iteration:   1960, Loss function: 5.580, Average Loss: 5.672, avg. samples / sec: 854.07
Iteration:   1980, Loss function: 5.760, Average Loss: 5.671, avg. samples / sec: 965.20
Iteration:   2000, Loss function: 5.491, Average Loss: 5.671, avg. samples / sec: 969.61
Iteration:   2020, Loss function: 5.701, Average Loss: 5.668, avg. samples / sec: 977.03
Iteration:   2040, Loss function: 5.765, Average Loss: 5.668, avg. samples / sec: 958.75
:::MLLOG {"namespace": "", "time_ms": 1639068576676, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068576678, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.511, Average Loss: 5.666, avg. samples / sec: 957.56
Iteration:   2080, Loss function: 5.290, Average Loss: 5.663, avg. samples / sec: 973.92
Iteration:   2100, Loss function: 5.667, Average Loss: 5.660, avg. samples / sec: 972.88
Iteration:   2120, Loss function: 5.341, Average Loss: 5.657, avg. samples / sec: 924.49
Iteration:   2140, Loss function: 5.467, Average Loss: 5.653, avg. samples / sec: 971.83
Iteration:   2160, Loss function: 5.374, Average Loss: 5.650, avg. samples / sec: 990.04
Iteration:   2180, Loss function: 5.284, Average Loss: 5.648, avg. samples / sec: 868.21
Iteration:   2200, Loss function: 5.418, Average Loss: 5.644, avg. samples / sec: 924.90
Iteration:   2220, Loss function: 5.689, Average Loss: 5.642, avg. samples / sec: 910.53
Iteration:   2240, Loss function: 5.331, Average Loss: 5.639, avg. samples / sec: 906.25
Iteration:   2260, Loss function: 5.499, Average Loss: 5.635, avg. samples / sec: 968.55
Iteration:   2280, Loss function: 5.313, Average Loss: 5.632, avg. samples / sec: 919.55
Iteration:   2300, Loss function: 5.267, Average Loss: 5.629, avg. samples / sec: 949.78
Iteration:   2320, Loss function: 5.310, Average Loss: 5.627, avg. samples / sec: 965.85
Iteration:   2340, Loss function: 5.508, Average Loss: 5.623, avg. samples / sec: 974.83
Iteration:   2360, Loss function: 5.278, Average Loss: 5.619, avg. samples / sec: 994.49
Iteration:   2380, Loss function: 5.573, Average Loss: 5.615, avg. samples / sec: 982.01
Iteration:   2400, Loss function: 5.644, Average Loss: 5.612, avg. samples / sec: 973.15
Iteration:   2420, Loss function: 5.368, Average Loss: 5.608, avg. samples / sec: 960.35
Iteration:   2440, Loss function: 5.463, Average Loss: 5.604, avg. samples / sec: 934.94
Iteration:   2460, Loss function: 5.237, Average Loss: 5.600, avg. samples / sec: 983.46
Iteration:   2480, Loss function: 5.414, Average Loss: 5.596, avg. samples / sec: 981.96
Iteration:   2500, Loss function: 5.436, Average Loss: 5.591, avg. samples / sec: 990.50
Iteration:   2520, Loss function: 5.458, Average Loss: 5.586, avg. samples / sec: 978.05
Iteration:   2540, Loss function: 5.248, Average Loss: 5.582, avg. samples / sec: 939.19
Iteration:   2560, Loss function: 5.360, Average Loss: 5.579, avg. samples / sec: 909.80
Iteration:   2580, Loss function: 5.276, Average Loss: 5.575, avg. samples / sec: 962.31
Iteration:   2600, Loss function: 5.388, Average Loss: 5.571, avg. samples / sec: 975.82
Iteration:   2620, Loss function: 5.415, Average Loss: 5.567, avg. samples / sec: 949.15
Iteration:   2640, Loss function: 5.186, Average Loss: 5.564, avg. samples / sec: 971.37
Iteration:   2660, Loss function: 5.112, Average Loss: 5.559, avg. samples / sec: 968.60
Iteration:   2680, Loss function: 5.102, Average Loss: 5.555, avg. samples / sec: 967.80
Iteration:   2700, Loss function: 5.174, Average Loss: 5.550, avg. samples / sec: 977.85
Iteration:   2720, Loss function: 5.200, Average Loss: 5.545, avg. samples / sec: 972.73
Iteration:   2740, Loss function: 5.245, Average Loss: 5.541, avg. samples / sec: 960.77
Iteration:   2760, Loss function: 5.095, Average Loss: 5.536, avg. samples / sec: 927.90
Iteration:   2780, Loss function: 5.496, Average Loss: 5.531, avg. samples / sec: 966.23
Iteration:   2800, Loss function: 5.343, Average Loss: 5.526, avg. samples / sec: 858.86
Iteration:   2820, Loss function: 5.558, Average Loss: 5.522, avg. samples / sec: 942.61
Iteration:   2840, Loss function: 5.081, Average Loss: 5.517, avg. samples / sec: 802.79
Iteration:   2860, Loss function: 5.177, Average Loss: 5.512, avg. samples / sec: 881.65
Iteration:   2880, Loss function: 5.174, Average Loss: 5.507, avg. samples / sec: 946.41
Iteration:   2900, Loss function: 4.985, Average Loss: 5.501, avg. samples / sec: 913.02
Iteration:   2920, Loss function: 5.186, Average Loss: 5.495, avg. samples / sec: 942.63
Iteration:   2940, Loss function: 5.076, Average Loss: 5.491, avg. samples / sec: 957.54
Iteration:   2960, Loss function: 5.320, Average Loss: 5.487, avg. samples / sec: 966.28
Iteration:   2980, Loss function: 5.234, Average Loss: 5.484, avg. samples / sec: 986.79
Iteration:   3000, Loss function: 5.376, Average Loss: 5.479, avg. samples / sec: 984.04
Iteration:   3020, Loss function: 5.295, Average Loss: 5.473, avg. samples / sec: 964.15
Iteration:   3040, Loss function: 5.281, Average Loss: 5.469, avg. samples / sec: 970.25
Iteration:   3060, Loss function: 5.019, Average Loss: 5.463, avg. samples / sec: 984.77
Iteration:   3080, Loss function: 4.918, Average Loss: 5.458, avg. samples / sec: 946.44
:::MLLOG {"namespace": "", "time_ms": 1639068700200, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700202, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.223, Average Loss: 5.452, avg. samples / sec: 948.82
Iteration:   3120, Loss function: 4.915, Average Loss: 5.446, avg. samples / sec: 974.16
Iteration:   3140, Loss function: 5.024, Average Loss: 5.441, avg. samples / sec: 913.06
Iteration:   3160, Loss function: 5.559, Average Loss: 5.436, avg. samples / sec: 930.37
Iteration:   3180, Loss function: 5.164, Average Loss: 5.430, avg. samples / sec: 937.89
Iteration:   3200, Loss function: 5.358, Average Loss: 5.425, avg. samples / sec: 964.84
Iteration:   3220, Loss function: 5.190, Average Loss: 5.419, avg. samples / sec: 991.64
Iteration:   3240, Loss function: 5.256, Average Loss: 5.414, avg. samples / sec: 937.03
Iteration:   3260, Loss function: 5.099, Average Loss: 5.408, avg. samples / sec: 936.38
Iteration:   3280, Loss function: 4.801, Average Loss: 5.402, avg. samples / sec: 965.24
Iteration:   3300, Loss function: 4.911, Average Loss: 5.395, avg. samples / sec: 909.93
Iteration:   3320, Loss function: 5.000, Average Loss: 5.390, avg. samples / sec: 978.31
Iteration:   3340, Loss function: 5.088, Average Loss: 5.385, avg. samples / sec: 898.01
Iteration:   3360, Loss function: 5.219, Average Loss: 5.378, avg. samples / sec: 866.50
Iteration:   3380, Loss function: 5.266, Average Loss: 5.371, avg. samples / sec: 849.82
Iteration:   3400, Loss function: 4.828, Average Loss: 5.366, avg. samples / sec: 891.42
Iteration:   3420, Loss function: 5.101, Average Loss: 5.362, avg. samples / sec: 958.87
Iteration:   3440, Loss function: 4.879, Average Loss: 5.356, avg. samples / sec: 980.35
Iteration:   3460, Loss function: 5.151, Average Loss: 5.352, avg. samples / sec: 959.89
Iteration:   3480, Loss function: 5.372, Average Loss: 5.347, avg. samples / sec: 901.91
Iteration:   3500, Loss function: 5.138, Average Loss: 5.342, avg. samples / sec: 973.63
Iteration:   3520, Loss function: 5.034, Average Loss: 5.340, avg. samples / sec: 912.15
Iteration:   3540, Loss function: 4.978, Average Loss: 5.336, avg. samples / sec: 914.37
Iteration:   3560, Loss function: 5.013, Average Loss: 5.332, avg. samples / sec: 948.48
Iteration:   3580, Loss function: 4.933, Average Loss: 5.328, avg. samples / sec: 976.31
Iteration:   3600, Loss function: 5.243, Average Loss: 5.322, avg. samples / sec: 955.79
Iteration:   3620, Loss function: 4.891, Average Loss: 5.317, avg. samples / sec: 956.88
Iteration:   3640, Loss function: 4.882, Average Loss: 5.312, avg. samples / sec: 989.83
Iteration:   3660, Loss function: 5.035, Average Loss: 5.308, avg. samples / sec: 934.73
Iteration:   3680, Loss function: 5.108, Average Loss: 5.302, avg. samples / sec: 940.91
Iteration:   3700, Loss function: 4.875, Average Loss: 5.296, avg. samples / sec: 981.03
Iteration:   3720, Loss function: 5.131, Average Loss: 5.291, avg. samples / sec: 971.92
Iteration:   3740, Loss function: 5.176, Average Loss: 5.286, avg. samples / sec: 970.31
Iteration:   3760, Loss function: 5.238, Average Loss: 5.283, avg. samples / sec: 946.57
Iteration:   3780, Loss function: 4.915, Average Loss: 5.278, avg. samples / sec: 887.76
Iteration:   3800, Loss function: 4.933, Average Loss: 5.274, avg. samples / sec: 968.89
Iteration:   3820, Loss function: 5.024, Average Loss: 5.269, avg. samples / sec: 977.25
Iteration:   3840, Loss function: 4.727, Average Loss: 5.264, avg. samples / sec: 981.37
Iteration:   3860, Loss function: 5.117, Average Loss: 5.259, avg. samples / sec: 895.17
Iteration:   3880, Loss function: 5.116, Average Loss: 5.254, avg. samples / sec: 900.67
Iteration:   3900, Loss function: 5.166, Average Loss: 5.250, avg. samples / sec: 959.71
Iteration:   3920, Loss function: 5.083, Average Loss: 5.244, avg. samples / sec: 973.77
Iteration:   3940, Loss function: 5.122, Average Loss: 5.239, avg. samples / sec: 926.45
Iteration:   3960, Loss function: 4.850, Average Loss: 5.236, avg. samples / sec: 928.20
Iteration:   3980, Loss function: 4.939, Average Loss: 5.231, avg. samples / sec: 893.65
Iteration:   4000, Loss function: 5.021, Average Loss: 5.227, avg. samples / sec: 944.79
Iteration:   4020, Loss function: 5.056, Average Loss: 5.222, avg. samples / sec: 982.71
Iteration:   4040, Loss function: 5.047, Average Loss: 5.218, avg. samples / sec: 955.94
Iteration:   4060, Loss function: 5.089, Average Loss: 5.213, avg. samples / sec: 958.41
Iteration:   4080, Loss function: 4.924, Average Loss: 5.209, avg. samples / sec: 995.81
Iteration:   4100, Loss function: 4.980, Average Loss: 5.205, avg. samples / sec: 980.55
:::MLLOG {"namespace": "", "time_ms": 1639068824433, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068824435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.069, Average Loss: 5.201, avg. samples / sec: 984.65
Iteration:   4140, Loss function: 5.045, Average Loss: 5.195, avg. samples / sec: 978.89
Iteration:   4160, Loss function: 4.940, Average Loss: 5.189, avg. samples / sec: 987.93
Iteration:   4180, Loss function: 4.962, Average Loss: 5.183, avg. samples / sec: 968.89
Iteration:   4200, Loss function: 4.745, Average Loss: 5.178, avg. samples / sec: 988.90
Iteration:   4220, Loss function: 4.755, Average Loss: 5.173, avg. samples / sec: 989.88
Iteration:   4240, Loss function: 4.873, Average Loss: 5.168, avg. samples / sec: 928.99
Iteration:   4260, Loss function: 5.001, Average Loss: 5.163, avg. samples / sec: 963.29
Iteration:   4280, Loss function: 5.008, Average Loss: 5.157, avg. samples / sec: 976.53
Iteration:   4300, Loss function: 4.837, Average Loss: 5.150, avg. samples / sec: 984.09
Iteration:   4320, Loss function: 4.805, Average Loss: 5.145, avg. samples / sec: 994.13
Iteration:   4340, Loss function: 4.834, Average Loss: 5.139, avg. samples / sec: 939.40
Iteration:   4360, Loss function: 4.786, Average Loss: 5.135, avg. samples / sec: 976.69
Iteration:   4380, Loss function: 4.849, Average Loss: 5.130, avg. samples / sec: 977.61
Iteration:   4400, Loss function: 4.882, Average Loss: 5.125, avg. samples / sec: 953.04
Iteration:   4420, Loss function: 4.712, Average Loss: 5.120, avg. samples / sec: 948.51
Iteration:   4440, Loss function: 4.798, Average Loss: 5.114, avg. samples / sec: 930.83
Iteration:   4460, Loss function: 5.355, Average Loss: 5.110, avg. samples / sec: 926.42
Iteration:   4480, Loss function: 4.954, Average Loss: 5.107, avg. samples / sec: 975.12
Iteration:   4500, Loss function: 4.851, Average Loss: 5.104, avg. samples / sec: 966.98
Iteration:   4520, Loss function: 4.710, Average Loss: 5.100, avg. samples / sec: 943.81
Iteration:   4540, Loss function: 5.043, Average Loss: 5.095, avg. samples / sec: 937.59
Iteration:   4560, Loss function: 4.761, Average Loss: 5.091, avg. samples / sec: 966.22
Iteration:   4580, Loss function: 4.776, Average Loss: 5.089, avg. samples / sec: 958.22
Iteration:   4600, Loss function: 4.958, Average Loss: 5.085, avg. samples / sec: 935.42
Iteration:   4620, Loss function: 4.757, Average Loss: 5.080, avg. samples / sec: 926.12
Iteration:   4640, Loss function: 4.630, Average Loss: 5.075, avg. samples / sec: 981.75
Iteration:   4660, Loss function: 4.879, Average Loss: 5.071, avg. samples / sec: 954.39
Iteration:   4680, Loss function: 5.143, Average Loss: 5.066, avg. samples / sec: 966.71
Iteration:   4700, Loss function: 4.623, Average Loss: 5.062, avg. samples / sec: 981.51
Iteration:   4720, Loss function: 4.671, Average Loss: 5.058, avg. samples / sec: 974.16
Iteration:   4740, Loss function: 4.636, Average Loss: 5.054, avg. samples / sec: 976.58
Iteration:   4760, Loss function: 4.576, Average Loss: 5.050, avg. samples / sec: 967.87
Iteration:   4780, Loss function: 4.791, Average Loss: 5.046, avg. samples / sec: 961.71
Iteration:   4800, Loss function: 4.873, Average Loss: 5.043, avg. samples / sec: 986.45
Iteration:   4820, Loss function: 4.681, Average Loss: 5.039, avg. samples / sec: 975.79
Iteration:   4840, Loss function: 5.068, Average Loss: 5.036, avg. samples / sec: 946.14
Iteration:   4860, Loss function: 4.676, Average Loss: 5.031, avg. samples / sec: 935.40
Iteration:   4880, Loss function: 5.054, Average Loss: 5.028, avg. samples / sec: 957.29
Iteration:   4900, Loss function: 4.501, Average Loss: 5.023, avg. samples / sec: 907.54
Iteration:   4920, Loss function: 4.557, Average Loss: 5.019, avg. samples / sec: 964.16
Iteration:   4940, Loss function: 4.877, Average Loss: 5.015, avg. samples / sec: 935.76
Iteration:   4960, Loss function: 4.640, Average Loss: 5.011, avg. samples / sec: 866.68
Iteration:   4980, Loss function: 4.841, Average Loss: 5.008, avg. samples / sec: 938.29
Iteration:   5000, Loss function: 5.049, Average Loss: 5.004, avg. samples / sec: 991.68
Iteration:   5020, Loss function: 5.054, Average Loss: 5.001, avg. samples / sec: 966.52
Iteration:   5040, Loss function: 4.782, Average Loss: 4.998, avg. samples / sec: 937.41
Iteration:   5060, Loss function: 4.709, Average Loss: 4.995, avg. samples / sec: 959.41
Iteration:   5080, Loss function: 4.393, Average Loss: 4.991, avg. samples / sec: 930.44
Iteration:   5100, Loss function: 4.862, Average Loss: 4.989, avg. samples / sec: 850.81
Iteration:   5120, Loss function: 4.646, Average Loss: 4.986, avg. samples / sec: 930.39
Iteration:   5140, Loss function: 4.834, Average Loss: 4.982, avg. samples / sec: 972.79
:::MLLOG {"namespace": "", "time_ms": 1639068947261, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 27.82 s
:::MLLOG {"namespace": "", "time_ms": 1639068975138, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068975140, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068975140, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.794, Average Loss: 4.977, avg. samples / sec: 75.31
Iteration:   5180, Loss function: 4.864, Average Loss: 4.973, avg. samples / sec: 932.68
DONE (t=4.90s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10419
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21197
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09141
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19132
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13618
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19980
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21095
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10419 AP goal: 0.10000
Iteration:   5200, Loss function: 4.641, Average Loss: 4.970, avg. samples / sec: 878.43
:::MLLOG {"namespace": "", "time_ms": 1639068982233, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982234, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10419140531253264, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982234, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068982477, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068984
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:24 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:50 PM'
START TIMING RUN WAS 2021-12-09 04:44:50 PM
ENDING TIMING RUN AT 2021-12-09 04:56:24 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:24 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ result=694
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:50 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:50 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
