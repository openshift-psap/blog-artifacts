+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-gqlkg.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-gqlkg.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-gqlkg.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ echo 'Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068289
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:49 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-gqlkg to the sync file ...
run-ssd--1-gqlkg Found 4 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
     3	run-ssd--1-2kxbs
     4	run-ssd--1-gqlkg
Thu Dec  9 16:44:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296238, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296402, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2014181993, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2014181993
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068298239, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298240, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298244, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298244, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323253, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323254, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068324848, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324850, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325301, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325301, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325303, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.039, Average Loss: 0.023, avg. samples / sec: 4.26
Iteration:     20, Loss function: 21.087, Average Loss: 0.461, avg. samples / sec: 817.59
Iteration:     40, Loss function: 20.805, Average Loss: 0.862, avg. samples / sec: 846.67
Iteration:     60, Loss function: 20.409, Average Loss: 1.252, avg. samples / sec: 861.69
Iteration:     80, Loss function: 20.009, Average Loss: 1.626, avg. samples / sec: 908.38
Iteration:    100, Loss function: 16.109, Average Loss: 1.959, avg. samples / sec: 900.23
Iteration:    120, Loss function: 11.524, Average Loss: 2.177, avg. samples / sec: 860.77
Iteration:    140, Loss function: 9.740, Average Loss: 2.338, avg. samples / sec: 906.75
Iteration:    160, Loss function: 9.343, Average Loss: 2.479, avg. samples / sec: 939.94
Iteration:    180, Loss function: 9.016, Average Loss: 2.609, avg. samples / sec: 931.25
Iteration:    200, Loss function: 8.699, Average Loss: 2.733, avg. samples / sec: 931.59
Iteration:    220, Loss function: 8.644, Average Loss: 2.854, avg. samples / sec: 962.63
Iteration:    240, Loss function: 8.433, Average Loss: 2.970, avg. samples / sec: 955.06
Iteration:    260, Loss function: 8.724, Average Loss: 3.082, avg. samples / sec: 956.25
Iteration:    280, Loss function: 8.465, Average Loss: 3.192, avg. samples / sec: 956.42
Iteration:    300, Loss function: 8.438, Average Loss: 3.296, avg. samples / sec: 966.37
Iteration:    320, Loss function: 8.710, Average Loss: 3.399, avg. samples / sec: 970.91
Iteration:    340, Loss function: 8.589, Average Loss: 3.501, avg. samples / sec: 966.98
Iteration:    360, Loss function: 8.188, Average Loss: 3.596, avg. samples / sec: 956.22
Iteration:    380, Loss function: 7.968, Average Loss: 3.686, avg. samples / sec: 900.49
Iteration:    400, Loss function: 8.031, Average Loss: 3.770, avg. samples / sec: 927.93
Iteration:    420, Loss function: 7.658, Average Loss: 3.852, avg. samples / sec: 908.07
Iteration:    440, Loss function: 7.836, Average Loss: 3.932, avg. samples / sec: 934.47
Iteration:    460, Loss function: 7.788, Average Loss: 4.008, avg. samples / sec: 924.53
Iteration:    480, Loss function: 7.540, Average Loss: 4.082, avg. samples / sec: 973.03
Iteration:    500, Loss function: 7.771, Average Loss: 4.152, avg. samples / sec: 950.66
Iteration:    520, Loss function: 7.497, Average Loss: 4.220, avg. samples / sec: 934.09
Iteration:    540, Loss function: 7.471, Average Loss: 4.286, avg. samples / sec: 963.41
Iteration:    560, Loss function: 7.235, Average Loss: 4.348, avg. samples / sec: 947.82
Iteration:    580, Loss function: 7.233, Average Loss: 4.410, avg. samples / sec: 901.19
Iteration:    600, Loss function: 7.518, Average Loss: 4.467, avg. samples / sec: 980.59
Iteration:    620, Loss function: 6.952, Average Loss: 4.522, avg. samples / sec: 975.19
Iteration:    640, Loss function: 7.008, Average Loss: 4.576, avg. samples / sec: 916.97
Iteration:    660, Loss function: 7.032, Average Loss: 4.628, avg. samples / sec: 948.25
Iteration:    680, Loss function: 7.239, Average Loss: 4.678, avg. samples / sec: 957.85
Iteration:    700, Loss function: 6.888, Average Loss: 4.726, avg. samples / sec: 965.27
Iteration:    720, Loss function: 6.889, Average Loss: 4.774, avg. samples / sec: 943.52
Iteration:    740, Loss function: 6.840, Average Loss: 4.818, avg. samples / sec: 946.35
Iteration:    760, Loss function: 7.047, Average Loss: 4.862, avg. samples / sec: 931.76
Iteration:    780, Loss function: 6.880, Average Loss: 4.905, avg. samples / sec: 927.73
Iteration:    800, Loss function: 7.218, Average Loss: 4.944, avg. samples / sec: 948.58
Iteration:    820, Loss function: 6.805, Average Loss: 4.981, avg. samples / sec: 947.15
Iteration:    840, Loss function: 6.590, Average Loss: 5.016, avg. samples / sec: 933.65
Iteration:    860, Loss function: 6.918, Average Loss: 5.051, avg. samples / sec: 980.30
Iteration:    880, Loss function: 6.756, Average Loss: 5.084, avg. samples / sec: 943.26
Iteration:    900, Loss function: 6.777, Average Loss: 5.115, avg. samples / sec: 884.80
Iteration:    920, Loss function: 6.597, Average Loss: 5.145, avg. samples / sec: 951.28
Iteration:    940, Loss function: 6.798, Average Loss: 5.174, avg. samples / sec: 969.83
Iteration:    960, Loss function: 6.478, Average Loss: 5.202, avg. samples / sec: 983.23
Iteration:    980, Loss function: 6.497, Average Loss: 5.229, avg. samples / sec: 920.72
Iteration:   1000, Loss function: 6.601, Average Loss: 5.255, avg. samples / sec: 966.28
Iteration:   1020, Loss function: 6.441, Average Loss: 5.278, avg. samples / sec: 958.27
:::MLLOG {"namespace": "", "time_ms": 1639068450750, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068450752, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.259, Average Loss: 5.300, avg. samples / sec: 978.51
Iteration:   1060, Loss function: 6.496, Average Loss: 5.323, avg. samples / sec: 928.35
Iteration:   1080, Loss function: 6.422, Average Loss: 5.344, avg. samples / sec: 982.54
Iteration:   1100, Loss function: 6.109, Average Loss: 5.363, avg. samples / sec: 963.38
Iteration:   1120, Loss function: 6.030, Average Loss: 5.383, avg. samples / sec: 940.54
Iteration:   1140, Loss function: 6.281, Average Loss: 5.401, avg. samples / sec: 981.36
Iteration:   1160, Loss function: 5.951, Average Loss: 5.418, avg. samples / sec: 989.34
Iteration:   1180, Loss function: 6.299, Average Loss: 5.434, avg. samples / sec: 942.78
Iteration:   1200, Loss function: 6.234, Average Loss: 5.450, avg. samples / sec: 931.33
Iteration:   1220, Loss function: 6.317, Average Loss: 5.466, avg. samples / sec: 976.33
Iteration:   1240, Loss function: 6.207, Average Loss: 5.479, avg. samples / sec: 950.23
Iteration:   1260, Loss function: 5.911, Average Loss: 5.491, avg. samples / sec: 969.53
Iteration:   1280, Loss function: 5.932, Average Loss: 5.503, avg. samples / sec: 954.49
Iteration:   1300, Loss function: 6.182, Average Loss: 5.515, avg. samples / sec: 931.19
Iteration:   1320, Loss function: 6.133, Average Loss: 5.528, avg. samples / sec: 960.59
Iteration:   1340, Loss function: 5.872, Average Loss: 5.537, avg. samples / sec: 945.56
Iteration:   1360, Loss function: 6.008, Average Loss: 5.547, avg. samples / sec: 965.68
Iteration:   1380, Loss function: 6.222, Average Loss: 5.556, avg. samples / sec: 978.34
Iteration:   1400, Loss function: 5.977, Average Loss: 5.565, avg. samples / sec: 951.74
Iteration:   1420, Loss function: 5.955, Average Loss: 5.573, avg. samples / sec: 973.26
Iteration:   1440, Loss function: 6.349, Average Loss: 5.581, avg. samples / sec: 975.50
Iteration:   1460, Loss function: 6.171, Average Loss: 5.589, avg. samples / sec: 955.23
Iteration:   1480, Loss function: 6.088, Average Loss: 5.598, avg. samples / sec: 910.11
Iteration:   1500, Loss function: 6.069, Average Loss: 5.606, avg. samples / sec: 947.28
Iteration:   1520, Loss function: 5.983, Average Loss: 5.612, avg. samples / sec: 965.37
Iteration:   1540, Loss function: 6.055, Average Loss: 5.616, avg. samples / sec: 992.00
Iteration:   1560, Loss function: 5.727, Average Loss: 5.620, avg. samples / sec: 986.96
Iteration:   1580, Loss function: 5.679, Average Loss: 5.625, avg. samples / sec: 985.68
Iteration:   1600, Loss function: 6.191, Average Loss: 5.630, avg. samples / sec: 991.74
Iteration:   1620, Loss function: 5.690, Average Loss: 5.635, avg. samples / sec: 973.73
Iteration:   1640, Loss function: 5.817, Average Loss: 5.639, avg. samples / sec: 957.73
Iteration:   1660, Loss function: 6.140, Average Loss: 5.643, avg. samples / sec: 940.13
Iteration:   1680, Loss function: 5.765, Average Loss: 5.646, avg. samples / sec: 988.14
Iteration:   1700, Loss function: 5.392, Average Loss: 5.648, avg. samples / sec: 952.20
Iteration:   1720, Loss function: 5.794, Average Loss: 5.650, avg. samples / sec: 924.69
Iteration:   1740, Loss function: 5.949, Average Loss: 5.653, avg. samples / sec: 877.92
Iteration:   1760, Loss function: 5.503, Average Loss: 5.654, avg. samples / sec: 987.94
Iteration:   1780, Loss function: 5.710, Average Loss: 5.656, avg. samples / sec: 952.71
Iteration:   1800, Loss function: 5.708, Average Loss: 5.658, avg. samples / sec: 977.80
Iteration:   1820, Loss function: 5.912, Average Loss: 5.659, avg. samples / sec: 921.41
Iteration:   1840, Loss function: 5.907, Average Loss: 5.660, avg. samples / sec: 955.74
Iteration:   1860, Loss function: 5.562, Average Loss: 5.659, avg. samples / sec: 865.53
Iteration:   1880, Loss function: 5.946, Average Loss: 5.660, avg. samples / sec: 919.96
Iteration:   1900, Loss function: 5.842, Average Loss: 5.661, avg. samples / sec: 985.31
Iteration:   1920, Loss function: 5.708, Average Loss: 5.661, avg. samples / sec: 925.02
Iteration:   1940, Loss function: 5.938, Average Loss: 5.660, avg. samples / sec: 888.42
Iteration:   1960, Loss function: 5.662, Average Loss: 5.660, avg. samples / sec: 926.82
Iteration:   1980, Loss function: 5.675, Average Loss: 5.659, avg. samples / sec: 906.03
Iteration:   2000, Loss function: 5.605, Average Loss: 5.658, avg. samples / sec: 939.82
Iteration:   2020, Loss function: 5.607, Average Loss: 5.657, avg. samples / sec: 869.67
Iteration:   2040, Loss function: 5.670, Average Loss: 5.656, avg. samples / sec: 990.70
:::MLLOG {"namespace": "", "time_ms": 1639068574144, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574146, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.555, Average Loss: 5.654, avg. samples / sec: 978.51
Iteration:   2080, Loss function: 5.182, Average Loss: 5.651, avg. samples / sec: 914.61
Iteration:   2100, Loss function: 5.430, Average Loss: 5.649, avg. samples / sec: 885.14
Iteration:   2120, Loss function: 5.239, Average Loss: 5.645, avg. samples / sec: 899.34
Iteration:   2140, Loss function: 5.363, Average Loss: 5.642, avg. samples / sec: 941.09
Iteration:   2160, Loss function: 5.483, Average Loss: 5.640, avg. samples / sec: 952.83
Iteration:   2180, Loss function: 5.318, Average Loss: 5.637, avg. samples / sec: 969.34
Iteration:   2200, Loss function: 5.444, Average Loss: 5.632, avg. samples / sec: 950.77
Iteration:   2220, Loss function: 5.597, Average Loss: 5.632, avg. samples / sec: 939.42
Iteration:   2240, Loss function: 5.576, Average Loss: 5.629, avg. samples / sec: 996.70
Iteration:   2260, Loss function: 5.272, Average Loss: 5.625, avg. samples / sec: 979.33
Iteration:   2280, Loss function: 5.411, Average Loss: 5.623, avg. samples / sec: 911.23
Iteration:   2300, Loss function: 5.110, Average Loss: 5.619, avg. samples / sec: 932.12
Iteration:   2320, Loss function: 5.305, Average Loss: 5.617, avg. samples / sec: 920.35
Iteration:   2340, Loss function: 5.341, Average Loss: 5.613, avg. samples / sec: 901.48
Iteration:   2360, Loss function: 5.380, Average Loss: 5.609, avg. samples / sec: 937.10
Iteration:   2380, Loss function: 5.376, Average Loss: 5.605, avg. samples / sec: 943.24
Iteration:   2400, Loss function: 5.623, Average Loss: 5.602, avg. samples / sec: 961.62
Iteration:   2420, Loss function: 5.490, Average Loss: 5.598, avg. samples / sec: 988.57
Iteration:   2440, Loss function: 5.658, Average Loss: 5.594, avg. samples / sec: 944.05
Iteration:   2460, Loss function: 5.213, Average Loss: 5.591, avg. samples / sec: 951.87
Iteration:   2480, Loss function: 5.364, Average Loss: 5.588, avg. samples / sec: 984.89
Iteration:   2500, Loss function: 5.355, Average Loss: 5.583, avg. samples / sec: 967.05
Iteration:   2520, Loss function: 5.458, Average Loss: 5.579, avg. samples / sec: 975.06
Iteration:   2540, Loss function: 5.438, Average Loss: 5.575, avg. samples / sec: 940.52
Iteration:   2560, Loss function: 5.251, Average Loss: 5.571, avg. samples / sec: 951.98
Iteration:   2580, Loss function: 5.322, Average Loss: 5.568, avg. samples / sec: 976.93
Iteration:   2600, Loss function: 5.537, Average Loss: 5.566, avg. samples / sec: 932.85
Iteration:   2620, Loss function: 5.668, Average Loss: 5.561, avg. samples / sec: 976.73
Iteration:   2640, Loss function: 5.275, Average Loss: 5.558, avg. samples / sec: 990.03
Iteration:   2660, Loss function: 5.224, Average Loss: 5.554, avg. samples / sec: 980.16
Iteration:   2680, Loss function: 5.117, Average Loss: 5.550, avg. samples / sec: 970.42
Iteration:   2700, Loss function: 5.233, Average Loss: 5.545, avg. samples / sec: 976.62
Iteration:   2720, Loss function: 5.293, Average Loss: 5.541, avg. samples / sec: 929.43
Iteration:   2740, Loss function: 5.138, Average Loss: 5.536, avg. samples / sec: 964.41
Iteration:   2760, Loss function: 4.966, Average Loss: 5.530, avg. samples / sec: 985.94
Iteration:   2780, Loss function: 5.427, Average Loss: 5.526, avg. samples / sec: 979.67
Iteration:   2800, Loss function: 5.255, Average Loss: 5.521, avg. samples / sec: 952.52
Iteration:   2820, Loss function: 5.381, Average Loss: 5.516, avg. samples / sec: 963.64
Iteration:   2840, Loss function: 5.169, Average Loss: 5.512, avg. samples / sec: 950.84
Iteration:   2860, Loss function: 5.045, Average Loss: 5.507, avg. samples / sec: 976.20
Iteration:   2880, Loss function: 5.333, Average Loss: 5.501, avg. samples / sec: 879.12
Iteration:   2900, Loss function: 5.183, Average Loss: 5.497, avg. samples / sec: 920.50
Iteration:   2920, Loss function: 5.091, Average Loss: 5.491, avg. samples / sec: 966.55
Iteration:   2940, Loss function: 5.076, Average Loss: 5.486, avg. samples / sec: 954.27
Iteration:   2960, Loss function: 5.258, Average Loss: 5.482, avg. samples / sec: 939.61
Iteration:   2980, Loss function: 5.290, Average Loss: 5.479, avg. samples / sec: 926.64
Iteration:   3000, Loss function: 5.311, Average Loss: 5.473, avg. samples / sec: 928.74
Iteration:   3020, Loss function: 5.359, Average Loss: 5.467, avg. samples / sec: 947.88
Iteration:   3040, Loss function: 5.392, Average Loss: 5.462, avg. samples / sec: 926.54
Iteration:   3060, Loss function: 4.937, Average Loss: 5.457, avg. samples / sec: 840.29
Iteration:   3080, Loss function: 4.911, Average Loss: 5.452, avg. samples / sec: 961.18
:::MLLOG {"namespace": "", "time_ms": 1639068697988, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068697989, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.176, Average Loss: 5.446, avg. samples / sec: 892.49
Iteration:   3120, Loss function: 4.847, Average Loss: 5.440, avg. samples / sec: 922.20
Iteration:   3140, Loss function: 5.068, Average Loss: 5.435, avg. samples / sec: 960.84
Iteration:   3160, Loss function: 5.436, Average Loss: 5.428, avg. samples / sec: 972.74
Iteration:   3180, Loss function: 5.006, Average Loss: 5.423, avg. samples / sec: 983.23
Iteration:   3200, Loss function: 5.256, Average Loss: 5.418, avg. samples / sec: 953.57
Iteration:   3220, Loss function: 5.034, Average Loss: 5.412, avg. samples / sec: 872.43
Iteration:   3240, Loss function: 5.348, Average Loss: 5.407, avg. samples / sec: 894.71
Iteration:   3260, Loss function: 5.211, Average Loss: 5.401, avg. samples / sec: 976.47
Iteration:   3280, Loss function: 4.805, Average Loss: 5.395, avg. samples / sec: 983.47
Iteration:   3300, Loss function: 4.901, Average Loss: 5.390, avg. samples / sec: 942.26
Iteration:   3320, Loss function: 4.909, Average Loss: 5.385, avg. samples / sec: 977.55
Iteration:   3340, Loss function: 5.206, Average Loss: 5.381, avg. samples / sec: 898.63
Iteration:   3360, Loss function: 5.124, Average Loss: 5.375, avg. samples / sec: 974.90
Iteration:   3380, Loss function: 5.191, Average Loss: 5.368, avg. samples / sec: 981.92
Iteration:   3400, Loss function: 4.942, Average Loss: 5.363, avg. samples / sec: 991.66
Iteration:   3420, Loss function: 5.211, Average Loss: 5.357, avg. samples / sec: 986.94
Iteration:   3440, Loss function: 4.917, Average Loss: 5.353, avg. samples / sec: 914.42
Iteration:   3460, Loss function: 5.237, Average Loss: 5.347, avg. samples / sec: 975.89
Iteration:   3480, Loss function: 5.100, Average Loss: 5.343, avg. samples / sec: 986.07
Iteration:   3500, Loss function: 5.207, Average Loss: 5.339, avg. samples / sec: 927.37
Iteration:   3520, Loss function: 5.027, Average Loss: 5.335, avg. samples / sec: 960.43
Iteration:   3540, Loss function: 4.974, Average Loss: 5.330, avg. samples / sec: 950.29
Iteration:   3560, Loss function: 4.833, Average Loss: 5.326, avg. samples / sec: 903.72
Iteration:   3580, Loss function: 4.960, Average Loss: 5.321, avg. samples / sec: 960.70
Iteration:   3600, Loss function: 5.284, Average Loss: 5.315, avg. samples / sec: 969.53
Iteration:   3620, Loss function: 4.865, Average Loss: 5.310, avg. samples / sec: 919.63
Iteration:   3640, Loss function: 4.614, Average Loss: 5.305, avg. samples / sec: 955.14
Iteration:   3660, Loss function: 4.961, Average Loss: 5.299, avg. samples / sec: 945.18
Iteration:   3680, Loss function: 5.109, Average Loss: 5.293, avg. samples / sec: 983.47
Iteration:   3700, Loss function: 4.851, Average Loss: 5.288, avg. samples / sec: 963.40
Iteration:   3720, Loss function: 5.006, Average Loss: 5.282, avg. samples / sec: 994.64
Iteration:   3740, Loss function: 5.044, Average Loss: 5.278, avg. samples / sec: 928.49
Iteration:   3760, Loss function: 5.084, Average Loss: 5.274, avg. samples / sec: 890.62
Iteration:   3780, Loss function: 5.136, Average Loss: 5.269, avg. samples / sec: 975.58
Iteration:   3800, Loss function: 5.154, Average Loss: 5.265, avg. samples / sec: 988.00
Iteration:   3820, Loss function: 5.239, Average Loss: 5.261, avg. samples / sec: 968.28
Iteration:   3840, Loss function: 4.792, Average Loss: 5.256, avg. samples / sec: 971.68
Iteration:   3860, Loss function: 5.025, Average Loss: 5.251, avg. samples / sec: 989.92
Iteration:   3880, Loss function: 4.890, Average Loss: 5.246, avg. samples / sec: 950.90
Iteration:   3900, Loss function: 5.170, Average Loss: 5.241, avg. samples / sec: 969.23
Iteration:   3920, Loss function: 5.217, Average Loss: 5.236, avg. samples / sec: 974.46
Iteration:   3940, Loss function: 5.014, Average Loss: 5.230, avg. samples / sec: 940.64
Iteration:   3960, Loss function: 4.969, Average Loss: 5.226, avg. samples / sec: 962.98
Iteration:   3980, Loss function: 4.612, Average Loss: 5.220, avg. samples / sec: 902.31
Iteration:   4000, Loss function: 5.176, Average Loss: 5.217, avg. samples / sec: 966.21
Iteration:   4020, Loss function: 5.123, Average Loss: 5.213, avg. samples / sec: 938.13
Iteration:   4040, Loss function: 5.146, Average Loss: 5.209, avg. samples / sec: 976.13
Iteration:   4060, Loss function: 5.059, Average Loss: 5.205, avg. samples / sec: 980.62
Iteration:   4080, Loss function: 4.985, Average Loss: 5.201, avg. samples / sec: 981.84
Iteration:   4100, Loss function: 5.131, Average Loss: 5.198, avg. samples / sec: 950.07
:::MLLOG {"namespace": "", "time_ms": 1639068821093, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821095, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.969, Average Loss: 5.195, avg. samples / sec: 822.90
Iteration:   4140, Loss function: 4.852, Average Loss: 5.189, avg. samples / sec: 855.34
Iteration:   4160, Loss function: 4.892, Average Loss: 5.183, avg. samples / sec: 946.70
Iteration:   4180, Loss function: 4.995, Average Loss: 5.176, avg. samples / sec: 918.00
Iteration:   4200, Loss function: 4.731, Average Loss: 5.171, avg. samples / sec: 824.75
Iteration:   4220, Loss function: 4.773, Average Loss: 5.166, avg. samples / sec: 917.95
Iteration:   4240, Loss function: 5.012, Average Loss: 5.161, avg. samples / sec: 909.66
Iteration:   4260, Loss function: 5.036, Average Loss: 5.156, avg. samples / sec: 978.84
Iteration:   4280, Loss function: 4.997, Average Loss: 5.150, avg. samples / sec: 914.37
Iteration:   4300, Loss function: 4.725, Average Loss: 5.144, avg. samples / sec: 972.68
Iteration:   4320, Loss function: 4.646, Average Loss: 5.138, avg. samples / sec: 967.53
Iteration:   4340, Loss function: 4.789, Average Loss: 5.133, avg. samples / sec: 960.50
Iteration:   4360, Loss function: 4.948, Average Loss: 5.128, avg. samples / sec: 970.99
Iteration:   4380, Loss function: 5.065, Average Loss: 5.124, avg. samples / sec: 974.80
Iteration:   4400, Loss function: 4.747, Average Loss: 5.119, avg. samples / sec: 989.09
Iteration:   4420, Loss function: 4.866, Average Loss: 5.114, avg. samples / sec: 964.17
Iteration:   4440, Loss function: 4.770, Average Loss: 5.109, avg. samples / sec: 964.59
Iteration:   4460, Loss function: 5.080, Average Loss: 5.106, avg. samples / sec: 985.71
Iteration:   4480, Loss function: 4.953, Average Loss: 5.103, avg. samples / sec: 939.11
Iteration:   4500, Loss function: 4.990, Average Loss: 5.100, avg. samples / sec: 958.81
Iteration:   4520, Loss function: 4.906, Average Loss: 5.095, avg. samples / sec: 976.69
Iteration:   4540, Loss function: 4.848, Average Loss: 5.089, avg. samples / sec: 951.07
Iteration:   4560, Loss function: 4.945, Average Loss: 5.086, avg. samples / sec: 979.28
Iteration:   4580, Loss function: 4.644, Average Loss: 5.083, avg. samples / sec: 974.35
Iteration:   4600, Loss function: 4.985, Average Loss: 5.080, avg. samples / sec: 946.09
Iteration:   4620, Loss function: 5.016, Average Loss: 5.076, avg. samples / sec: 982.58
Iteration:   4640, Loss function: 4.897, Average Loss: 5.072, avg. samples / sec: 991.63
Iteration:   4660, Loss function: 4.820, Average Loss: 5.067, avg. samples / sec: 959.98
Iteration:   4680, Loss function: 5.380, Average Loss: 5.063, avg. samples / sec: 980.68
Iteration:   4700, Loss function: 4.647, Average Loss: 5.060, avg. samples / sec: 990.78
Iteration:   4720, Loss function: 4.673, Average Loss: 5.055, avg. samples / sec: 979.53
Iteration:   4740, Loss function: 4.702, Average Loss: 5.051, avg. samples / sec: 939.31
Iteration:   4760, Loss function: 4.465, Average Loss: 5.047, avg. samples / sec: 977.02
Iteration:   4780, Loss function: 5.096, Average Loss: 5.043, avg. samples / sec: 953.36
Iteration:   4800, Loss function: 5.029, Average Loss: 5.040, avg. samples / sec: 961.51
Iteration:   4820, Loss function: 4.817, Average Loss: 5.036, avg. samples / sec: 969.86
Iteration:   4840, Loss function: 5.187, Average Loss: 5.033, avg. samples / sec: 966.07
Iteration:   4860, Loss function: 4.751, Average Loss: 5.029, avg. samples / sec: 962.68
Iteration:   4880, Loss function: 5.265, Average Loss: 5.026, avg. samples / sec: 994.52
Iteration:   4900, Loss function: 4.624, Average Loss: 5.022, avg. samples / sec: 926.87
Iteration:   4920, Loss function: 4.863, Average Loss: 5.019, avg. samples / sec: 971.06
Iteration:   4940, Loss function: 4.641, Average Loss: 5.015, avg. samples / sec: 924.57
Iteration:   4960, Loss function: 4.874, Average Loss: 5.011, avg. samples / sec: 974.33
Iteration:   4980, Loss function: 4.651, Average Loss: 5.007, avg. samples / sec: 980.31
Iteration:   5000, Loss function: 4.880, Average Loss: 5.004, avg. samples / sec: 949.89
Iteration:   5020, Loss function: 5.136, Average Loss: 5.001, avg. samples / sec: 976.58
Iteration:   5040, Loss function: 4.861, Average Loss: 4.997, avg. samples / sec: 961.06
Iteration:   5060, Loss function: 4.833, Average Loss: 4.994, avg. samples / sec: 975.47
Iteration:   5080, Loss function: 4.608, Average Loss: 4.990, avg. samples / sec: 983.40
Iteration:   5100, Loss function: 4.642, Average Loss: 4.987, avg. samples / sec: 969.41
Iteration:   5120, Loss function: 4.642, Average Loss: 4.985, avg. samples / sec: 982.70
Iteration:   5140, Loss function: 4.731, Average Loss: 4.981, avg. samples / sec: 966.32
:::MLLOG {"namespace": "", "time_ms": 1639068943886, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.46 s
:::MLLOG {"namespace": "", "time_ms": 1639068976416, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068976500, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068976509, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.15s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.856, Average Loss: 4.976, avg. samples / sec: 64.89
Iteration:   5180, Loss function: 4.885, Average Loss: 4.971, avg. samples / sec: 867.73
DONE (t=5.16s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10864
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09634
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19326
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10864 AP goal: 0.10000
Iteration:   5200, Loss function: 4.652, Average Loss: 4.967, avg. samples / sec: 992.03
:::MLLOG {"namespace": "", "time_ms": 1639068983596, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983597, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10863635272335252, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983597, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983801, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:25 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:25 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068296238, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068296402, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2014181993, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2014181993
:::MLLOG {"namespace": "", "time_ms": 1639068298239, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068298240, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068298243, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068298244, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068298244, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068323253, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068323254, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068324848, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324850, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068325301, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068325301, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068325303, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.039, Average Loss: 0.023, avg. samples / sec: 4.26
Iteration:     20, Loss function: 21.087, Average Loss: 0.461, avg. samples / sec: 817.59
Iteration:     40, Loss function: 20.805, Average Loss: 0.862, avg. samples / sec: 846.67
Iteration:     60, Loss function: 20.409, Average Loss: 1.252, avg. samples / sec: 861.69
Iteration:     80, Loss function: 20.009, Average Loss: 1.626, avg. samples / sec: 908.38
Iteration:    100, Loss function: 16.109, Average Loss: 1.959, avg. samples / sec: 900.23
Iteration:    120, Loss function: 11.524, Average Loss: 2.177, avg. samples / sec: 860.77
Iteration:    140, Loss function: 9.740, Average Loss: 2.338, avg. samples / sec: 906.75
Iteration:    160, Loss function: 9.343, Average Loss: 2.479, avg. samples / sec: 939.94
Iteration:    180, Loss function: 9.016, Average Loss: 2.609, avg. samples / sec: 931.25
Iteration:    200, Loss function: 8.699, Average Loss: 2.733, avg. samples / sec: 931.59
Iteration:    220, Loss function: 8.644, Average Loss: 2.854, avg. samples / sec: 962.63
Iteration:    240, Loss function: 8.433, Average Loss: 2.970, avg. samples / sec: 955.06
Iteration:    260, Loss function: 8.724, Average Loss: 3.082, avg. samples / sec: 956.25
Iteration:    280, Loss function: 8.465, Average Loss: 3.192, avg. samples / sec: 956.42
Iteration:    300, Loss function: 8.438, Average Loss: 3.296, avg. samples / sec: 966.37
Iteration:    320, Loss function: 8.710, Average Loss: 3.399, avg. samples / sec: 970.91
Iteration:    340, Loss function: 8.589, Average Loss: 3.501, avg. samples / sec: 966.98
Iteration:    360, Loss function: 8.188, Average Loss: 3.596, avg. samples / sec: 956.22
Iteration:    380, Loss function: 7.968, Average Loss: 3.686, avg. samples / sec: 900.49
Iteration:    400, Loss function: 8.031, Average Loss: 3.770, avg. samples / sec: 927.93
Iteration:    420, Loss function: 7.658, Average Loss: 3.852, avg. samples / sec: 908.07
Iteration:    440, Loss function: 7.836, Average Loss: 3.932, avg. samples / sec: 934.47
Iteration:    460, Loss function: 7.788, Average Loss: 4.008, avg. samples / sec: 924.53
Iteration:    480, Loss function: 7.540, Average Loss: 4.082, avg. samples / sec: 973.03
Iteration:    500, Loss function: 7.771, Average Loss: 4.152, avg. samples / sec: 950.66
Iteration:    520, Loss function: 7.497, Average Loss: 4.220, avg. samples / sec: 934.09
Iteration:    540, Loss function: 7.471, Average Loss: 4.286, avg. samples / sec: 963.41
Iteration:    560, Loss function: 7.235, Average Loss: 4.348, avg. samples / sec: 947.82
Iteration:    580, Loss function: 7.233, Average Loss: 4.410, avg. samples / sec: 901.19
Iteration:    600, Loss function: 7.518, Average Loss: 4.467, avg. samples / sec: 980.59
Iteration:    620, Loss function: 6.952, Average Loss: 4.522, avg. samples / sec: 975.19
Iteration:    640, Loss function: 7.008, Average Loss: 4.576, avg. samples / sec: 916.97
Iteration:    660, Loss function: 7.032, Average Loss: 4.628, avg. samples / sec: 948.25
Iteration:    680, Loss function: 7.239, Average Loss: 4.678, avg. samples / sec: 957.85
Iteration:    700, Loss function: 6.888, Average Loss: 4.726, avg. samples / sec: 965.27
Iteration:    720, Loss function: 6.889, Average Loss: 4.774, avg. samples / sec: 943.52
Iteration:    740, Loss function: 6.840, Average Loss: 4.818, avg. samples / sec: 946.35
Iteration:    760, Loss function: 7.047, Average Loss: 4.862, avg. samples / sec: 931.76
Iteration:    780, Loss function: 6.880, Average Loss: 4.905, avg. samples / sec: 927.73
Iteration:    800, Loss function: 7.218, Average Loss: 4.944, avg. samples / sec: 948.58
Iteration:    820, Loss function: 6.805, Average Loss: 4.981, avg. samples / sec: 947.15
Iteration:    840, Loss function: 6.590, Average Loss: 5.016, avg. samples / sec: 933.65
Iteration:    860, Loss function: 6.918, Average Loss: 5.051, avg. samples / sec: 980.30
Iteration:    880, Loss function: 6.756, Average Loss: 5.084, avg. samples / sec: 943.26
Iteration:    900, Loss function: 6.777, Average Loss: 5.115, avg. samples / sec: 884.80
Iteration:    920, Loss function: 6.597, Average Loss: 5.145, avg. samples / sec: 951.28
Iteration:    940, Loss function: 6.798, Average Loss: 5.174, avg. samples / sec: 969.83
Iteration:    960, Loss function: 6.478, Average Loss: 5.202, avg. samples / sec: 983.23
Iteration:    980, Loss function: 6.497, Average Loss: 5.229, avg. samples / sec: 920.72
Iteration:   1000, Loss function: 6.601, Average Loss: 5.255, avg. samples / sec: 966.28
Iteration:   1020, Loss function: 6.441, Average Loss: 5.278, avg. samples / sec: 958.27
:::MLLOG {"namespace": "", "time_ms": 1639068450750, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068450752, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.259, Average Loss: 5.300, avg. samples / sec: 978.51
Iteration:   1060, Loss function: 6.496, Average Loss: 5.323, avg. samples / sec: 928.35
Iteration:   1080, Loss function: 6.422, Average Loss: 5.344, avg. samples / sec: 982.54
Iteration:   1100, Loss function: 6.109, Average Loss: 5.363, avg. samples / sec: 963.38
Iteration:   1120, Loss function: 6.030, Average Loss: 5.383, avg. samples / sec: 940.54
Iteration:   1140, Loss function: 6.281, Average Loss: 5.401, avg. samples / sec: 981.36
Iteration:   1160, Loss function: 5.951, Average Loss: 5.418, avg. samples / sec: 989.34
Iteration:   1180, Loss function: 6.299, Average Loss: 5.434, avg. samples / sec: 942.78
Iteration:   1200, Loss function: 6.234, Average Loss: 5.450, avg. samples / sec: 931.33
Iteration:   1220, Loss function: 6.317, Average Loss: 5.466, avg. samples / sec: 976.33
Iteration:   1240, Loss function: 6.207, Average Loss: 5.479, avg. samples / sec: 950.23
Iteration:   1260, Loss function: 5.911, Average Loss: 5.491, avg. samples / sec: 969.53
Iteration:   1280, Loss function: 5.932, Average Loss: 5.503, avg. samples / sec: 954.49
Iteration:   1300, Loss function: 6.182, Average Loss: 5.515, avg. samples / sec: 931.19
Iteration:   1320, Loss function: 6.133, Average Loss: 5.528, avg. samples / sec: 960.59
Iteration:   1340, Loss function: 5.872, Average Loss: 5.537, avg. samples / sec: 945.56
Iteration:   1360, Loss function: 6.008, Average Loss: 5.547, avg. samples / sec: 965.68
Iteration:   1380, Loss function: 6.222, Average Loss: 5.556, avg. samples / sec: 978.34
Iteration:   1400, Loss function: 5.977, Average Loss: 5.565, avg. samples / sec: 951.74
Iteration:   1420, Loss function: 5.955, Average Loss: 5.573, avg. samples / sec: 973.26
Iteration:   1440, Loss function: 6.349, Average Loss: 5.581, avg. samples / sec: 975.50
Iteration:   1460, Loss function: 6.171, Average Loss: 5.589, avg. samples / sec: 955.23
Iteration:   1480, Loss function: 6.088, Average Loss: 5.598, avg. samples / sec: 910.11
Iteration:   1500, Loss function: 6.069, Average Loss: 5.606, avg. samples / sec: 947.28
Iteration:   1520, Loss function: 5.983, Average Loss: 5.612, avg. samples / sec: 965.37
Iteration:   1540, Loss function: 6.055, Average Loss: 5.616, avg. samples / sec: 992.00
Iteration:   1560, Loss function: 5.727, Average Loss: 5.620, avg. samples / sec: 986.96
Iteration:   1580, Loss function: 5.679, Average Loss: 5.625, avg. samples / sec: 985.68
Iteration:   1600, Loss function: 6.191, Average Loss: 5.630, avg. samples / sec: 991.74
Iteration:   1620, Loss function: 5.690, Average Loss: 5.635, avg. samples / sec: 973.73
Iteration:   1640, Loss function: 5.817, Average Loss: 5.639, avg. samples / sec: 957.73
Iteration:   1660, Loss function: 6.140, Average Loss: 5.643, avg. samples / sec: 940.13
Iteration:   1680, Loss function: 5.765, Average Loss: 5.646, avg. samples / sec: 988.14
Iteration:   1700, Loss function: 5.392, Average Loss: 5.648, avg. samples / sec: 952.20
Iteration:   1720, Loss function: 5.794, Average Loss: 5.650, avg. samples / sec: 924.69
Iteration:   1740, Loss function: 5.949, Average Loss: 5.653, avg. samples / sec: 877.92
Iteration:   1760, Loss function: 5.503, Average Loss: 5.654, avg. samples / sec: 987.94
Iteration:   1780, Loss function: 5.710, Average Loss: 5.656, avg. samples / sec: 952.71
Iteration:   1800, Loss function: 5.708, Average Loss: 5.658, avg. samples / sec: 977.80
Iteration:   1820, Loss function: 5.912, Average Loss: 5.659, avg. samples / sec: 921.41
Iteration:   1840, Loss function: 5.907, Average Loss: 5.660, avg. samples / sec: 955.74
Iteration:   1860, Loss function: 5.562, Average Loss: 5.659, avg. samples / sec: 865.53
Iteration:   1880, Loss function: 5.946, Average Loss: 5.660, avg. samples / sec: 919.96
Iteration:   1900, Loss function: 5.842, Average Loss: 5.661, avg. samples / sec: 985.31
Iteration:   1920, Loss function: 5.708, Average Loss: 5.661, avg. samples / sec: 925.02
Iteration:   1940, Loss function: 5.938, Average Loss: 5.660, avg. samples / sec: 888.42
Iteration:   1960, Loss function: 5.662, Average Loss: 5.660, avg. samples / sec: 926.82
Iteration:   1980, Loss function: 5.675, Average Loss: 5.659, avg. samples / sec: 906.03
Iteration:   2000, Loss function: 5.605, Average Loss: 5.658, avg. samples / sec: 939.82
Iteration:   2020, Loss function: 5.607, Average Loss: 5.657, avg. samples / sec: 869.67
Iteration:   2040, Loss function: 5.670, Average Loss: 5.656, avg. samples / sec: 990.70
:::MLLOG {"namespace": "", "time_ms": 1639068574144, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068574146, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.555, Average Loss: 5.654, avg. samples / sec: 978.51
Iteration:   2080, Loss function: 5.182, Average Loss: 5.651, avg. samples / sec: 914.61
Iteration:   2100, Loss function: 5.430, Average Loss: 5.649, avg. samples / sec: 885.14
Iteration:   2120, Loss function: 5.239, Average Loss: 5.645, avg. samples / sec: 899.34
Iteration:   2140, Loss function: 5.363, Average Loss: 5.642, avg. samples / sec: 941.09
Iteration:   2160, Loss function: 5.483, Average Loss: 5.640, avg. samples / sec: 952.83
Iteration:   2180, Loss function: 5.318, Average Loss: 5.637, avg. samples / sec: 969.34
Iteration:   2200, Loss function: 5.444, Average Loss: 5.632, avg. samples / sec: 950.77
Iteration:   2220, Loss function: 5.597, Average Loss: 5.632, avg. samples / sec: 939.42
Iteration:   2240, Loss function: 5.576, Average Loss: 5.629, avg. samples / sec: 996.70
Iteration:   2260, Loss function: 5.272, Average Loss: 5.625, avg. samples / sec: 979.33
Iteration:   2280, Loss function: 5.411, Average Loss: 5.623, avg. samples / sec: 911.23
Iteration:   2300, Loss function: 5.110, Average Loss: 5.619, avg. samples / sec: 932.12
Iteration:   2320, Loss function: 5.305, Average Loss: 5.617, avg. samples / sec: 920.35
Iteration:   2340, Loss function: 5.341, Average Loss: 5.613, avg. samples / sec: 901.48
Iteration:   2360, Loss function: 5.380, Average Loss: 5.609, avg. samples / sec: 937.10
Iteration:   2380, Loss function: 5.376, Average Loss: 5.605, avg. samples / sec: 943.24
Iteration:   2400, Loss function: 5.623, Average Loss: 5.602, avg. samples / sec: 961.62
Iteration:   2420, Loss function: 5.490, Average Loss: 5.598, avg. samples / sec: 988.57
Iteration:   2440, Loss function: 5.658, Average Loss: 5.594, avg. samples / sec: 944.05
Iteration:   2460, Loss function: 5.213, Average Loss: 5.591, avg. samples / sec: 951.87
Iteration:   2480, Loss function: 5.364, Average Loss: 5.588, avg. samples / sec: 984.89
Iteration:   2500, Loss function: 5.355, Average Loss: 5.583, avg. samples / sec: 967.05
Iteration:   2520, Loss function: 5.458, Average Loss: 5.579, avg. samples / sec: 975.06
Iteration:   2540, Loss function: 5.438, Average Loss: 5.575, avg. samples / sec: 940.52
Iteration:   2560, Loss function: 5.251, Average Loss: 5.571, avg. samples / sec: 951.98
Iteration:   2580, Loss function: 5.322, Average Loss: 5.568, avg. samples / sec: 976.93
Iteration:   2600, Loss function: 5.537, Average Loss: 5.566, avg. samples / sec: 932.85
Iteration:   2620, Loss function: 5.668, Average Loss: 5.561, avg. samples / sec: 976.73
Iteration:   2640, Loss function: 5.275, Average Loss: 5.558, avg. samples / sec: 990.03
Iteration:   2660, Loss function: 5.224, Average Loss: 5.554, avg. samples / sec: 980.16
Iteration:   2680, Loss function: 5.117, Average Loss: 5.550, avg. samples / sec: 970.42
Iteration:   2700, Loss function: 5.233, Average Loss: 5.545, avg. samples / sec: 976.62
Iteration:   2720, Loss function: 5.293, Average Loss: 5.541, avg. samples / sec: 929.43
Iteration:   2740, Loss function: 5.138, Average Loss: 5.536, avg. samples / sec: 964.41
Iteration:   2760, Loss function: 4.966, Average Loss: 5.530, avg. samples / sec: 985.94
Iteration:   2780, Loss function: 5.427, Average Loss: 5.526, avg. samples / sec: 979.67
Iteration:   2800, Loss function: 5.255, Average Loss: 5.521, avg. samples / sec: 952.52
Iteration:   2820, Loss function: 5.381, Average Loss: 5.516, avg. samples / sec: 963.64
Iteration:   2840, Loss function: 5.169, Average Loss: 5.512, avg. samples / sec: 950.84
Iteration:   2860, Loss function: 5.045, Average Loss: 5.507, avg. samples / sec: 976.20
Iteration:   2880, Loss function: 5.333, Average Loss: 5.501, avg. samples / sec: 879.12
Iteration:   2900, Loss function: 5.183, Average Loss: 5.497, avg. samples / sec: 920.50
Iteration:   2920, Loss function: 5.091, Average Loss: 5.491, avg. samples / sec: 966.55
Iteration:   2940, Loss function: 5.076, Average Loss: 5.486, avg. samples / sec: 954.27
Iteration:   2960, Loss function: 5.258, Average Loss: 5.482, avg. samples / sec: 939.61
Iteration:   2980, Loss function: 5.290, Average Loss: 5.479, avg. samples / sec: 926.64
Iteration:   3000, Loss function: 5.311, Average Loss: 5.473, avg. samples / sec: 928.74
Iteration:   3020, Loss function: 5.359, Average Loss: 5.467, avg. samples / sec: 947.88
Iteration:   3040, Loss function: 5.392, Average Loss: 5.462, avg. samples / sec: 926.54
Iteration:   3060, Loss function: 4.937, Average Loss: 5.457, avg. samples / sec: 840.29
Iteration:   3080, Loss function: 4.911, Average Loss: 5.452, avg. samples / sec: 961.18
:::MLLOG {"namespace": "", "time_ms": 1639068697988, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068697989, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.176, Average Loss: 5.446, avg. samples / sec: 892.49
Iteration:   3120, Loss function: 4.847, Average Loss: 5.440, avg. samples / sec: 922.20
Iteration:   3140, Loss function: 5.068, Average Loss: 5.435, avg. samples / sec: 960.84
Iteration:   3160, Loss function: 5.436, Average Loss: 5.428, avg. samples / sec: 972.74
Iteration:   3180, Loss function: 5.006, Average Loss: 5.423, avg. samples / sec: 983.23
Iteration:   3200, Loss function: 5.256, Average Loss: 5.418, avg. samples / sec: 953.57
Iteration:   3220, Loss function: 5.034, Average Loss: 5.412, avg. samples / sec: 872.43
Iteration:   3240, Loss function: 5.348, Average Loss: 5.407, avg. samples / sec: 894.71
Iteration:   3260, Loss function: 5.211, Average Loss: 5.401, avg. samples / sec: 976.47
Iteration:   3280, Loss function: 4.805, Average Loss: 5.395, avg. samples / sec: 983.47
Iteration:   3300, Loss function: 4.901, Average Loss: 5.390, avg. samples / sec: 942.26
Iteration:   3320, Loss function: 4.909, Average Loss: 5.385, avg. samples / sec: 977.55
Iteration:   3340, Loss function: 5.206, Average Loss: 5.381, avg. samples / sec: 898.63
Iteration:   3360, Loss function: 5.124, Average Loss: 5.375, avg. samples / sec: 974.90
Iteration:   3380, Loss function: 5.191, Average Loss: 5.368, avg. samples / sec: 981.92
Iteration:   3400, Loss function: 4.942, Average Loss: 5.363, avg. samples / sec: 991.66
Iteration:   3420, Loss function: 5.211, Average Loss: 5.357, avg. samples / sec: 986.94
Iteration:   3440, Loss function: 4.917, Average Loss: 5.353, avg. samples / sec: 914.42
Iteration:   3460, Loss function: 5.237, Average Loss: 5.347, avg. samples / sec: 975.89
Iteration:   3480, Loss function: 5.100, Average Loss: 5.343, avg. samples / sec: 986.07
Iteration:   3500, Loss function: 5.207, Average Loss: 5.339, avg. samples / sec: 927.37
Iteration:   3520, Loss function: 5.027, Average Loss: 5.335, avg. samples / sec: 960.43
Iteration:   3540, Loss function: 4.974, Average Loss: 5.330, avg. samples / sec: 950.29
Iteration:   3560, Loss function: 4.833, Average Loss: 5.326, avg. samples / sec: 903.72
Iteration:   3580, Loss function: 4.960, Average Loss: 5.321, avg. samples / sec: 960.70
Iteration:   3600, Loss function: 5.284, Average Loss: 5.315, avg. samples / sec: 969.53
Iteration:   3620, Loss function: 4.865, Average Loss: 5.310, avg. samples / sec: 919.63
Iteration:   3640, Loss function: 4.614, Average Loss: 5.305, avg. samples / sec: 955.14
Iteration:   3660, Loss function: 4.961, Average Loss: 5.299, avg. samples / sec: 945.18
Iteration:   3680, Loss function: 5.109, Average Loss: 5.293, avg. samples / sec: 983.47
Iteration:   3700, Loss function: 4.851, Average Loss: 5.288, avg. samples / sec: 963.40
Iteration:   3720, Loss function: 5.006, Average Loss: 5.282, avg. samples / sec: 994.64
Iteration:   3740, Loss function: 5.044, Average Loss: 5.278, avg. samples / sec: 928.49
Iteration:   3760, Loss function: 5.084, Average Loss: 5.274, avg. samples / sec: 890.62
Iteration:   3780, Loss function: 5.136, Average Loss: 5.269, avg. samples / sec: 975.58
Iteration:   3800, Loss function: 5.154, Average Loss: 5.265, avg. samples / sec: 988.00
Iteration:   3820, Loss function: 5.239, Average Loss: 5.261, avg. samples / sec: 968.28
Iteration:   3840, Loss function: 4.792, Average Loss: 5.256, avg. samples / sec: 971.68
Iteration:   3860, Loss function: 5.025, Average Loss: 5.251, avg. samples / sec: 989.92
Iteration:   3880, Loss function: 4.890, Average Loss: 5.246, avg. samples / sec: 950.90
Iteration:   3900, Loss function: 5.170, Average Loss: 5.241, avg. samples / sec: 969.23
Iteration:   3920, Loss function: 5.217, Average Loss: 5.236, avg. samples / sec: 974.46
Iteration:   3940, Loss function: 5.014, Average Loss: 5.230, avg. samples / sec: 940.64
Iteration:   3960, Loss function: 4.969, Average Loss: 5.226, avg. samples / sec: 962.98
Iteration:   3980, Loss function: 4.612, Average Loss: 5.220, avg. samples / sec: 902.31
Iteration:   4000, Loss function: 5.176, Average Loss: 5.217, avg. samples / sec: 966.21
Iteration:   4020, Loss function: 5.123, Average Loss: 5.213, avg. samples / sec: 938.13
Iteration:   4040, Loss function: 5.146, Average Loss: 5.209, avg. samples / sec: 976.13
Iteration:   4060, Loss function: 5.059, Average Loss: 5.205, avg. samples / sec: 980.62
Iteration:   4080, Loss function: 4.985, Average Loss: 5.201, avg. samples / sec: 981.84
Iteration:   4100, Loss function: 5.131, Average Loss: 5.198, avg. samples / sec: 950.07
:::MLLOG {"namespace": "", "time_ms": 1639068821093, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821095, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.969, Average Loss: 5.195, avg. samples / sec: 822.90
Iteration:   4140, Loss function: 4.852, Average Loss: 5.189, avg. samples / sec: 855.34
Iteration:   4160, Loss function: 4.892, Average Loss: 5.183, avg. samples / sec: 946.70
Iteration:   4180, Loss function: 4.995, Average Loss: 5.176, avg. samples / sec: 918.00
Iteration:   4200, Loss function: 4.731, Average Loss: 5.171, avg. samples / sec: 824.75
Iteration:   4220, Loss function: 4.773, Average Loss: 5.166, avg. samples / sec: 917.95
Iteration:   4240, Loss function: 5.012, Average Loss: 5.161, avg. samples / sec: 909.66
Iteration:   4260, Loss function: 5.036, Average Loss: 5.156, avg. samples / sec: 978.84
Iteration:   4280, Loss function: 4.997, Average Loss: 5.150, avg. samples / sec: 914.37
Iteration:   4300, Loss function: 4.725, Average Loss: 5.144, avg. samples / sec: 972.68
Iteration:   4320, Loss function: 4.646, Average Loss: 5.138, avg. samples / sec: 967.53
Iteration:   4340, Loss function: 4.789, Average Loss: 5.133, avg. samples / sec: 960.50
Iteration:   4360, Loss function: 4.948, Average Loss: 5.128, avg. samples / sec: 970.99
Iteration:   4380, Loss function: 5.065, Average Loss: 5.124, avg. samples / sec: 974.80
Iteration:   4400, Loss function: 4.747, Average Loss: 5.119, avg. samples / sec: 989.09
Iteration:   4420, Loss function: 4.866, Average Loss: 5.114, avg. samples / sec: 964.17
Iteration:   4440, Loss function: 4.770, Average Loss: 5.109, avg. samples / sec: 964.59
Iteration:   4460, Loss function: 5.080, Average Loss: 5.106, avg. samples / sec: 985.71
Iteration:   4480, Loss function: 4.953, Average Loss: 5.103, avg. samples / sec: 939.11
Iteration:   4500, Loss function: 4.990, Average Loss: 5.100, avg. samples / sec: 958.81
Iteration:   4520, Loss function: 4.906, Average Loss: 5.095, avg. samples / sec: 976.69
Iteration:   4540, Loss function: 4.848, Average Loss: 5.089, avg. samples / sec: 951.07
Iteration:   4560, Loss function: 4.945, Average Loss: 5.086, avg. samples / sec: 979.28
Iteration:   4580, Loss function: 4.644, Average Loss: 5.083, avg. samples / sec: 974.35
Iteration:   4600, Loss function: 4.985, Average Loss: 5.080, avg. samples / sec: 946.09
Iteration:   4620, Loss function: 5.016, Average Loss: 5.076, avg. samples / sec: 982.58
Iteration:   4640, Loss function: 4.897, Average Loss: 5.072, avg. samples / sec: 991.63
Iteration:   4660, Loss function: 4.820, Average Loss: 5.067, avg. samples / sec: 959.98
Iteration:   4680, Loss function: 5.380, Average Loss: 5.063, avg. samples / sec: 980.68
Iteration:   4700, Loss function: 4.647, Average Loss: 5.060, avg. samples / sec: 990.78
Iteration:   4720, Loss function: 4.673, Average Loss: 5.055, avg. samples / sec: 979.53
Iteration:   4740, Loss function: 4.702, Average Loss: 5.051, avg. samples / sec: 939.31
Iteration:   4760, Loss function: 4.465, Average Loss: 5.047, avg. samples / sec: 977.02
Iteration:   4780, Loss function: 5.096, Average Loss: 5.043, avg. samples / sec: 953.36
Iteration:   4800, Loss function: 5.029, Average Loss: 5.040, avg. samples / sec: 961.51
Iteration:   4820, Loss function: 4.817, Average Loss: 5.036, avg. samples / sec: 969.86
Iteration:   4840, Loss function: 5.187, Average Loss: 5.033, avg. samples / sec: 966.07
Iteration:   4860, Loss function: 4.751, Average Loss: 5.029, avg. samples / sec: 962.68
Iteration:   4880, Loss function: 5.265, Average Loss: 5.026, avg. samples / sec: 994.52
Iteration:   4900, Loss function: 4.624, Average Loss: 5.022, avg. samples / sec: 926.87
Iteration:   4920, Loss function: 4.863, Average Loss: 5.019, avg. samples / sec: 971.06
Iteration:   4940, Loss function: 4.641, Average Loss: 5.015, avg. samples / sec: 924.57
Iteration:   4960, Loss function: 4.874, Average Loss: 5.011, avg. samples / sec: 974.33
Iteration:   4980, Loss function: 4.651, Average Loss: 5.007, avg. samples / sec: 980.31
Iteration:   5000, Loss function: 4.880, Average Loss: 5.004, avg. samples / sec: 949.89
Iteration:   5020, Loss function: 5.136, Average Loss: 5.001, avg. samples / sec: 976.58
Iteration:   5040, Loss function: 4.861, Average Loss: 4.997, avg. samples / sec: 961.06
Iteration:   5060, Loss function: 4.833, Average Loss: 4.994, avg. samples / sec: 975.47
Iteration:   5080, Loss function: 4.608, Average Loss: 4.990, avg. samples / sec: 983.40
Iteration:   5100, Loss function: 4.642, Average Loss: 4.987, avg. samples / sec: 969.41
Iteration:   5120, Loss function: 4.642, Average Loss: 4.985, avg. samples / sec: 982.70
Iteration:   5140, Loss function: 4.731, Average Loss: 4.981, avg. samples / sec: 966.32
:::MLLOG {"namespace": "", "time_ms": 1639068943886, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.46 s
:::MLLOG {"namespace": "", "time_ms": 1639068976416, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068976500, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068976509, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.15s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.856, Average Loss: 4.976, avg. samples / sec: 64.89
Iteration:   5180, Loss function: 4.885, Average Loss: 4.971, avg. samples / sec: 867.73
DONE (t=5.16s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10864
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09634
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19326
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21668
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10864 AP goal: 0.10000
Iteration:   5200, Loss function: 4.652, Average Loss: 4.967, avg. samples / sec: 992.03
:::MLLOG {"namespace": "", "time_ms": 1639068983596, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983597, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10863635272335252, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983597, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068983801, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068985
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:25 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:49 PM'
START TIMING RUN WAS 2021-12-09 04:44:49 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:25 PM'
ENDING TIMING RUN AT 2021-12-09 04:56:25 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ result=696
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 04:44:49 PM'
RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 04:44:49 PM
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
