+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-n68fx.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-n68fx.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-n68fx.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8'
Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068290
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:50 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:50 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:50 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:50 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-n68fx to the sync file ...
run-ssd--1-n68fx Found 7 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
     2	run-ssd--1-7xgk5
     3	run-ssd--1-2kxbs
     4	run-ssd--1-gqlkg
     5	run-ssd--1-dfxg9
     6	run-ssd--1-sdvh5
     7	run-ssd--1-n68fx
Thu Dec  9 16:44:55 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068297986, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068298121, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1209208729, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1209208729
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068300034, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068300035, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068300040, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068300040, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068324615, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068324615, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068326298, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068326299, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326680, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326681, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326682, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.221, Average Loss: 0.023, avg. samples / sec: 4.32
Iteration:     20, Loss function: 21.075, Average Loss: 0.461, avg. samples / sec: 771.13
Iteration:     40, Loss function: 20.707, Average Loss: 0.863, avg. samples / sec: 865.97
Iteration:     60, Loss function: 20.466, Average Loss: 1.253, avg. samples / sec: 850.52
Iteration:     80, Loss function: 20.237, Average Loss: 1.628, avg. samples / sec: 876.45
Iteration:    100, Loss function: 17.492, Average Loss: 1.974, avg. samples / sec: 893.20
Iteration:    120, Loss function: 12.494, Average Loss: 2.208, avg. samples / sec: 943.26
Iteration:    140, Loss function: 10.094, Average Loss: 2.376, avg. samples / sec: 869.85
Iteration:    160, Loss function: 9.228, Average Loss: 2.518, avg. samples / sec: 843.28
Iteration:    180, Loss function: 9.139, Average Loss: 2.649, avg. samples / sec: 961.85
Iteration:    200, Loss function: 8.785, Average Loss: 2.774, avg. samples / sec: 916.51
Iteration:    220, Loss function: 8.587, Average Loss: 2.893, avg. samples / sec: 886.17
Iteration:    240, Loss function: 8.546, Average Loss: 3.008, avg. samples / sec: 880.70
Iteration:    260, Loss function: 8.615, Average Loss: 3.119, avg. samples / sec: 949.12
Iteration:    280, Loss function: 8.472, Average Loss: 3.227, avg. samples / sec: 912.88
Iteration:    300, Loss function: 8.351, Average Loss: 3.329, avg. samples / sec: 961.88
Iteration:    320, Loss function: 8.496, Average Loss: 3.432, avg. samples / sec: 954.67
Iteration:    340, Loss function: 8.358, Average Loss: 3.530, avg. samples / sec: 967.01
Iteration:    360, Loss function: 8.029, Average Loss: 3.622, avg. samples / sec: 976.13
Iteration:    380, Loss function: 7.908, Average Loss: 3.711, avg. samples / sec: 962.47
Iteration:    400, Loss function: 8.021, Average Loss: 3.795, avg. samples / sec: 962.62
Iteration:    420, Loss function: 7.652, Average Loss: 3.876, avg. samples / sec: 940.09
Iteration:    440, Loss function: 7.857, Average Loss: 3.954, avg. samples / sec: 684.76
Iteration:    460, Loss function: 7.852, Average Loss: 4.029, avg. samples / sec: 973.27
Iteration:    480, Loss function: 7.443, Average Loss: 4.102, avg. samples / sec: 955.26
Iteration:    500, Loss function: 7.686, Average Loss: 4.172, avg. samples / sec: 966.73
Iteration:    520, Loss function: 7.578, Average Loss: 4.239, avg. samples / sec: 876.14
Iteration:    540, Loss function: 7.539, Average Loss: 4.306, avg. samples / sec: 983.87
Iteration:    560, Loss function: 7.218, Average Loss: 4.368, avg. samples / sec: 941.91
Iteration:    580, Loss function: 7.205, Average Loss: 4.428, avg. samples / sec: 948.81
Iteration:    600, Loss function: 7.362, Average Loss: 4.485, avg. samples / sec: 956.19
Iteration:    620, Loss function: 7.011, Average Loss: 4.540, avg. samples / sec: 965.21
Iteration:    640, Loss function: 6.839, Average Loss: 4.593, avg. samples / sec: 982.49
Iteration:    660, Loss function: 7.232, Average Loss: 4.645, avg. samples / sec: 969.59
Iteration:    680, Loss function: 7.265, Average Loss: 4.695, avg. samples / sec: 887.00
Iteration:    700, Loss function: 6.876, Average Loss: 4.742, avg. samples / sec: 927.52
Iteration:    720, Loss function: 6.751, Average Loss: 4.790, avg. samples / sec: 1000.89
Iteration:    740, Loss function: 6.893, Average Loss: 4.834, avg. samples / sec: 982.48
Iteration:    760, Loss function: 7.063, Average Loss: 4.876, avg. samples / sec: 966.26
Iteration:    780, Loss function: 6.767, Average Loss: 4.917, avg. samples / sec: 886.47
Iteration:    800, Loss function: 7.086, Average Loss: 4.956, avg. samples / sec: 952.16
Iteration:    820, Loss function: 6.768, Average Loss: 4.992, avg. samples / sec: 983.87
Iteration:    840, Loss function: 6.536, Average Loss: 5.028, avg. samples / sec: 898.38
Iteration:    860, Loss function: 6.847, Average Loss: 5.061, avg. samples / sec: 922.05
Iteration:    880, Loss function: 6.756, Average Loss: 5.094, avg. samples / sec: 993.93
Iteration:    900, Loss function: 6.818, Average Loss: 5.124, avg. samples / sec: 974.56
Iteration:    920, Loss function: 6.642, Average Loss: 5.152, avg. samples / sec: 969.16
Iteration:    940, Loss function: 6.781, Average Loss: 5.182, avg. samples / sec: 956.26
Iteration:    960, Loss function: 6.459, Average Loss: 5.209, avg. samples / sec: 873.14
Iteration:    980, Loss function: 6.438, Average Loss: 5.235, avg. samples / sec: 937.60
Iteration:   1000, Loss function: 6.529, Average Loss: 5.260, avg. samples / sec: 982.11
Iteration:   1020, Loss function: 6.372, Average Loss: 5.284, avg. samples / sec: 928.45
:::MLLOG {"namespace": "", "time_ms": 1639068453503, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068453504, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.552, Average Loss: 5.307, avg. samples / sec: 969.17
Iteration:   1060, Loss function: 6.372, Average Loss: 5.329, avg. samples / sec: 926.17
Iteration:   1080, Loss function: 6.448, Average Loss: 5.351, avg. samples / sec: 953.66
Iteration:   1100, Loss function: 6.155, Average Loss: 5.370, avg. samples / sec: 992.43
Iteration:   1120, Loss function: 6.025, Average Loss: 5.388, avg. samples / sec: 944.12
Iteration:   1140, Loss function: 6.405, Average Loss: 5.405, avg. samples / sec: 904.82
Iteration:   1160, Loss function: 6.195, Average Loss: 5.421, avg. samples / sec: 973.22
Iteration:   1180, Loss function: 6.184, Average Loss: 5.436, avg. samples / sec: 979.19
Iteration:   1200, Loss function: 6.108, Average Loss: 5.452, avg. samples / sec: 980.22
Iteration:   1220, Loss function: 6.331, Average Loss: 5.467, avg. samples / sec: 923.08
Iteration:   1240, Loss function: 6.204, Average Loss: 5.479, avg. samples / sec: 982.14
Iteration:   1260, Loss function: 6.034, Average Loss: 5.492, avg. samples / sec: 994.83
Iteration:   1280, Loss function: 5.899, Average Loss: 5.503, avg. samples / sec: 989.27
Iteration:   1300, Loss function: 6.058, Average Loss: 5.514, avg. samples / sec: 861.83
Iteration:   1320, Loss function: 6.399, Average Loss: 5.526, avg. samples / sec: 965.31
Iteration:   1340, Loss function: 5.849, Average Loss: 5.536, avg. samples / sec: 944.84
Iteration:   1360, Loss function: 5.974, Average Loss: 5.546, avg. samples / sec: 889.19
Iteration:   1380, Loss function: 6.047, Average Loss: 5.556, avg. samples / sec: 919.01
Iteration:   1400, Loss function: 6.045, Average Loss: 5.564, avg. samples / sec: 972.51
Iteration:   1420, Loss function: 5.988, Average Loss: 5.571, avg. samples / sec: 991.05
Iteration:   1440, Loss function: 6.146, Average Loss: 5.579, avg. samples / sec: 964.86
Iteration:   1460, Loss function: 6.186, Average Loss: 5.586, avg. samples / sec: 903.64
Iteration:   1480, Loss function: 5.854, Average Loss: 5.594, avg. samples / sec: 827.32
Iteration:   1500, Loss function: 6.045, Average Loss: 5.601, avg. samples / sec: 933.00
Iteration:   1520, Loss function: 5.857, Average Loss: 5.607, avg. samples / sec: 964.94
Iteration:   1540, Loss function: 5.933, Average Loss: 5.611, avg. samples / sec: 909.96
Iteration:   1560, Loss function: 5.406, Average Loss: 5.614, avg. samples / sec: 944.81
Iteration:   1580, Loss function: 5.620, Average Loss: 5.618, avg. samples / sec: 945.19
Iteration:   1600, Loss function: 6.263, Average Loss: 5.624, avg. samples / sec: 969.56
Iteration:   1620, Loss function: 5.760, Average Loss: 5.628, avg. samples / sec: 995.15
Iteration:   1640, Loss function: 5.952, Average Loss: 5.631, avg. samples / sec: 930.96
Iteration:   1660, Loss function: 5.867, Average Loss: 5.635, avg. samples / sec: 880.78
Iteration:   1680, Loss function: 5.608, Average Loss: 5.638, avg. samples / sec: 925.66
Iteration:   1700, Loss function: 5.272, Average Loss: 5.641, avg. samples / sec: 957.48
Iteration:   1720, Loss function: 5.820, Average Loss: 5.643, avg. samples / sec: 897.20
Iteration:   1740, Loss function: 5.836, Average Loss: 5.646, avg. samples / sec: 936.02
Iteration:   1760, Loss function: 5.482, Average Loss: 5.646, avg. samples / sec: 917.78
Iteration:   1780, Loss function: 5.668, Average Loss: 5.647, avg. samples / sec: 913.50
Iteration:   1800, Loss function: 5.579, Average Loss: 5.649, avg. samples / sec: 1000.48
Iteration:   1820, Loss function: 5.767, Average Loss: 5.651, avg. samples / sec: 948.12
Iteration:   1840, Loss function: 5.907, Average Loss: 5.651, avg. samples / sec: 935.01
Iteration:   1860, Loss function: 5.583, Average Loss: 5.650, avg. samples / sec: 923.97
Iteration:   1880, Loss function: 5.843, Average Loss: 5.652, avg. samples / sec: 906.25
Iteration:   1900, Loss function: 5.870, Average Loss: 5.652, avg. samples / sec: 958.22
Iteration:   1920, Loss function: 5.871, Average Loss: 5.652, avg. samples / sec: 971.14
Iteration:   1940, Loss function: 5.870, Average Loss: 5.652, avg. samples / sec: 996.13
Iteration:   1960, Loss function: 5.533, Average Loss: 5.650, avg. samples / sec: 990.51
Iteration:   1980, Loss function: 5.654, Average Loss: 5.649, avg. samples / sec: 991.75
Iteration:   2000, Loss function: 5.547, Average Loss: 5.648, avg. samples / sec: 967.81
Iteration:   2020, Loss function: 5.581, Average Loss: 5.647, avg. samples / sec: 963.22
Iteration:   2040, Loss function: 5.671, Average Loss: 5.646, avg. samples / sec: 956.51
:::MLLOG {"namespace": "", "time_ms": 1639068577628, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068577630, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.659, Average Loss: 5.644, avg. samples / sec: 953.20
Iteration:   2080, Loss function: 5.156, Average Loss: 5.642, avg. samples / sec: 979.46
Iteration:   2100, Loss function: 5.578, Average Loss: 5.640, avg. samples / sec: 983.81
Iteration:   2120, Loss function: 5.276, Average Loss: 5.637, avg. samples / sec: 970.93
Iteration:   2140, Loss function: 5.497, Average Loss: 5.634, avg. samples / sec: 967.50
Iteration:   2160, Loss function: 5.375, Average Loss: 5.631, avg. samples / sec: 944.38
Iteration:   2180, Loss function: 5.359, Average Loss: 5.629, avg. samples / sec: 917.62
Iteration:   2200, Loss function: 5.543, Average Loss: 5.625, avg. samples / sec: 945.56
Iteration:   2220, Loss function: 5.476, Average Loss: 5.622, avg. samples / sec: 927.91
Iteration:   2240, Loss function: 5.381, Average Loss: 5.619, avg. samples / sec: 963.45
Iteration:   2260, Loss function: 5.338, Average Loss: 5.616, avg. samples / sec: 897.67
Iteration:   2280, Loss function: 5.289, Average Loss: 5.613, avg. samples / sec: 942.63
Iteration:   2300, Loss function: 5.085, Average Loss: 5.609, avg. samples / sec: 958.33
Iteration:   2320, Loss function: 5.343, Average Loss: 5.606, avg. samples / sec: 961.81
Iteration:   2340, Loss function: 5.477, Average Loss: 5.603, avg. samples / sec: 974.43
Iteration:   2360, Loss function: 5.290, Average Loss: 5.600, avg. samples / sec: 947.61
Iteration:   2380, Loss function: 5.409, Average Loss: 5.596, avg. samples / sec: 953.26
Iteration:   2400, Loss function: 5.429, Average Loss: 5.593, avg. samples / sec: 949.45
Iteration:   2420, Loss function: 5.520, Average Loss: 5.589, avg. samples / sec: 974.45
Iteration:   2440, Loss function: 5.492, Average Loss: 5.586, avg. samples / sec: 940.66
Iteration:   2460, Loss function: 5.275, Average Loss: 5.582, avg. samples / sec: 974.74
Iteration:   2480, Loss function: 5.415, Average Loss: 5.579, avg. samples / sec: 924.50
Iteration:   2500, Loss function: 5.358, Average Loss: 5.573, avg. samples / sec: 985.70
Iteration:   2520, Loss function: 5.512, Average Loss: 5.567, avg. samples / sec: 990.36
Iteration:   2540, Loss function: 5.326, Average Loss: 5.563, avg. samples / sec: 982.23
Iteration:   2560, Loss function: 5.388, Average Loss: 5.560, avg. samples / sec: 989.64
Iteration:   2580, Loss function: 5.295, Average Loss: 5.556, avg. samples / sec: 983.42
Iteration:   2600, Loss function: 5.338, Average Loss: 5.552, avg. samples / sec: 983.00
Iteration:   2620, Loss function: 5.486, Average Loss: 5.547, avg. samples / sec: 895.97
Iteration:   2640, Loss function: 5.091, Average Loss: 5.544, avg. samples / sec: 926.45
Iteration:   2660, Loss function: 5.227, Average Loss: 5.541, avg. samples / sec: 929.96
Iteration:   2680, Loss function: 5.040, Average Loss: 5.537, avg. samples / sec: 941.87
Iteration:   2700, Loss function: 5.275, Average Loss: 5.533, avg. samples / sec: 996.57
Iteration:   2720, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 978.74
Iteration:   2740, Loss function: 4.970, Average Loss: 5.524, avg. samples / sec: 975.95
Iteration:   2760, Loss function: 4.908, Average Loss: 5.519, avg. samples / sec: 984.90
Iteration:   2780, Loss function: 5.572, Average Loss: 5.514, avg. samples / sec: 991.70
Iteration:   2800, Loss function: 5.349, Average Loss: 5.510, avg. samples / sec: 985.84
Iteration:   2820, Loss function: 5.270, Average Loss: 5.505, avg. samples / sec: 989.55
Iteration:   2840, Loss function: 5.154, Average Loss: 5.501, avg. samples / sec: 963.70
Iteration:   2860, Loss function: 5.196, Average Loss: 5.495, avg. samples / sec: 969.51
Iteration:   2880, Loss function: 5.291, Average Loss: 5.491, avg. samples / sec: 974.07
Iteration:   2900, Loss function: 5.255, Average Loss: 5.487, avg. samples / sec: 938.84
Iteration:   2920, Loss function: 5.285, Average Loss: 5.482, avg. samples / sec: 979.19
Iteration:   2940, Loss function: 4.967, Average Loss: 5.477, avg. samples / sec: 953.28
Iteration:   2960, Loss function: 5.549, Average Loss: 5.472, avg. samples / sec: 958.22
Iteration:   2980, Loss function: 5.368, Average Loss: 5.468, avg. samples / sec: 984.15
Iteration:   3000, Loss function: 5.195, Average Loss: 5.463, avg. samples / sec: 960.00
Iteration:   3020, Loss function: 5.181, Average Loss: 5.456, avg. samples / sec: 985.23
Iteration:   3040, Loss function: 5.293, Average Loss: 5.451, avg. samples / sec: 939.28
Iteration:   3060, Loss function: 5.045, Average Loss: 5.445, avg. samples / sec: 852.86
Iteration:   3080, Loss function: 4.956, Average Loss: 5.439, avg. samples / sec: 937.17
:::MLLOG {"namespace": "", "time_ms": 1639068699965, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068699968, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.084, Average Loss: 5.433, avg. samples / sec: 983.12
Iteration:   3120, Loss function: 4.975, Average Loss: 5.426, avg. samples / sec: 999.18
Iteration:   3140, Loss function: 5.095, Average Loss: 5.422, avg. samples / sec: 974.92
Iteration:   3160, Loss function: 5.511, Average Loss: 5.417, avg. samples / sec: 964.89
Iteration:   3180, Loss function: 4.899, Average Loss: 5.412, avg. samples / sec: 958.94
Iteration:   3200, Loss function: 5.211, Average Loss: 5.407, avg. samples / sec: 970.12
Iteration:   3220, Loss function: 5.296, Average Loss: 5.402, avg. samples / sec: 993.55
Iteration:   3240, Loss function: 5.125, Average Loss: 5.395, avg. samples / sec: 989.25
Iteration:   3260, Loss function: 5.019, Average Loss: 5.389, avg. samples / sec: 972.25
Iteration:   3280, Loss function: 4.604, Average Loss: 5.383, avg. samples / sec: 978.68
Iteration:   3300, Loss function: 4.786, Average Loss: 5.377, avg. samples / sec: 968.04
Iteration:   3320, Loss function: 4.871, Average Loss: 5.372, avg. samples / sec: 974.95
Iteration:   3340, Loss function: 5.133, Average Loss: 5.368, avg. samples / sec: 939.91
Iteration:   3360, Loss function: 5.213, Average Loss: 5.362, avg. samples / sec: 967.90
Iteration:   3380, Loss function: 5.120, Average Loss: 5.355, avg. samples / sec: 959.04
Iteration:   3400, Loss function: 4.964, Average Loss: 5.350, avg. samples / sec: 963.27
Iteration:   3420, Loss function: 4.939, Average Loss: 5.345, avg. samples / sec: 987.45
Iteration:   3440, Loss function: 4.875, Average Loss: 5.340, avg. samples / sec: 992.59
Iteration:   3460, Loss function: 5.096, Average Loss: 5.335, avg. samples / sec: 949.50
Iteration:   3480, Loss function: 5.213, Average Loss: 5.330, avg. samples / sec: 972.59
Iteration:   3500, Loss function: 5.127, Average Loss: 5.325, avg. samples / sec: 985.54
Iteration:   3520, Loss function: 5.003, Average Loss: 5.321, avg. samples / sec: 891.17
Iteration:   3540, Loss function: 4.900, Average Loss: 5.316, avg. samples / sec: 970.25
Iteration:   3560, Loss function: 4.848, Average Loss: 5.312, avg. samples / sec: 943.85
Iteration:   3580, Loss function: 4.945, Average Loss: 5.308, avg. samples / sec: 966.24
Iteration:   3600, Loss function: 5.115, Average Loss: 5.303, avg. samples / sec: 974.82
Iteration:   3620, Loss function: 4.959, Average Loss: 5.298, avg. samples / sec: 929.54
Iteration:   3640, Loss function: 4.735, Average Loss: 5.292, avg. samples / sec: 996.29
Iteration:   3660, Loss function: 4.952, Average Loss: 5.287, avg. samples / sec: 978.33
Iteration:   3680, Loss function: 5.047, Average Loss: 5.282, avg. samples / sec: 996.43
Iteration:   3700, Loss function: 4.946, Average Loss: 5.277, avg. samples / sec: 968.43
Iteration:   3720, Loss function: 4.993, Average Loss: 5.271, avg. samples / sec: 910.51
Iteration:   3740, Loss function: 5.261, Average Loss: 5.266, avg. samples / sec: 969.16
Iteration:   3760, Loss function: 5.311, Average Loss: 5.263, avg. samples / sec: 917.40
Iteration:   3780, Loss function: 5.022, Average Loss: 5.258, avg. samples / sec: 983.94
Iteration:   3800, Loss function: 5.178, Average Loss: 5.255, avg. samples / sec: 992.99
Iteration:   3820, Loss function: 5.047, Average Loss: 5.250, avg. samples / sec: 959.15
Iteration:   3840, Loss function: 4.990, Average Loss: 5.246, avg. samples / sec: 955.00
Iteration:   3860, Loss function: 4.959, Average Loss: 5.241, avg. samples / sec: 987.77
Iteration:   3880, Loss function: 4.962, Average Loss: 5.235, avg. samples / sec: 946.94
Iteration:   3900, Loss function: 5.255, Average Loss: 5.231, avg. samples / sec: 949.02
Iteration:   3920, Loss function: 5.073, Average Loss: 5.224, avg. samples / sec: 929.67
Iteration:   3940, Loss function: 4.876, Average Loss: 5.218, avg. samples / sec: 841.66
Iteration:   3960, Loss function: 5.009, Average Loss: 5.215, avg. samples / sec: 954.35
Iteration:   3980, Loss function: 4.846, Average Loss: 5.210, avg. samples / sec: 915.37
Iteration:   4000, Loss function: 5.050, Average Loss: 5.206, avg. samples / sec: 989.51
Iteration:   4020, Loss function: 5.107, Average Loss: 5.202, avg. samples / sec: 956.28
Iteration:   4040, Loss function: 4.903, Average Loss: 5.199, avg. samples / sec: 929.68
Iteration:   4060, Loss function: 5.116, Average Loss: 5.195, avg. samples / sec: 972.63
Iteration:   4080, Loss function: 5.159, Average Loss: 5.190, avg. samples / sec: 970.27
Iteration:   4100, Loss function: 5.087, Average Loss: 5.187, avg. samples / sec: 981.51
:::MLLOG {"namespace": "", "time_ms": 1639068821997, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821999, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.081, Average Loss: 5.184, avg. samples / sec: 976.55
Iteration:   4140, Loss function: 4.858, Average Loss: 5.179, avg. samples / sec: 983.45
Iteration:   4160, Loss function: 5.083, Average Loss: 5.172, avg. samples / sec: 971.84
Iteration:   4180, Loss function: 4.965, Average Loss: 5.167, avg. samples / sec: 955.91
Iteration:   4200, Loss function: 4.673, Average Loss: 5.162, avg. samples / sec: 981.60
Iteration:   4220, Loss function: 4.895, Average Loss: 5.157, avg. samples / sec: 944.75
Iteration:   4240, Loss function: 4.951, Average Loss: 5.152, avg. samples / sec: 951.20
Iteration:   4260, Loss function: 5.011, Average Loss: 5.148, avg. samples / sec: 980.56
Iteration:   4280, Loss function: 5.110, Average Loss: 5.142, avg. samples / sec: 975.05
Iteration:   4300, Loss function: 4.819, Average Loss: 5.137, avg. samples / sec: 932.77
Iteration:   4320, Loss function: 4.728, Average Loss: 5.131, avg. samples / sec: 982.07
Iteration:   4340, Loss function: 4.596, Average Loss: 5.125, avg. samples / sec: 935.45
Iteration:   4360, Loss function: 4.955, Average Loss: 5.121, avg. samples / sec: 943.74
Iteration:   4380, Loss function: 5.132, Average Loss: 5.116, avg. samples / sec: 980.85
Iteration:   4400, Loss function: 4.856, Average Loss: 5.112, avg. samples / sec: 957.04
Iteration:   4420, Loss function: 4.965, Average Loss: 5.107, avg. samples / sec: 981.98
Iteration:   4440, Loss function: 4.740, Average Loss: 5.102, avg. samples / sec: 982.80
Iteration:   4460, Loss function: 5.159, Average Loss: 5.097, avg. samples / sec: 983.99
Iteration:   4480, Loss function: 5.235, Average Loss: 5.095, avg. samples / sec: 964.67
Iteration:   4500, Loss function: 4.869, Average Loss: 5.093, avg. samples / sec: 958.03
Iteration:   4520, Loss function: 4.841, Average Loss: 5.089, avg. samples / sec: 978.43
Iteration:   4540, Loss function: 4.991, Average Loss: 5.085, avg. samples / sec: 971.84
Iteration:   4560, Loss function: 4.873, Average Loss: 5.080, avg. samples / sec: 945.55
Iteration:   4580, Loss function: 4.633, Average Loss: 5.077, avg. samples / sec: 991.69
Iteration:   4600, Loss function: 4.814, Average Loss: 5.074, avg. samples / sec: 965.54
Iteration:   4620, Loss function: 4.793, Average Loss: 5.070, avg. samples / sec: 956.07
Iteration:   4640, Loss function: 4.724, Average Loss: 5.065, avg. samples / sec: 996.49
Iteration:   4660, Loss function: 4.775, Average Loss: 5.062, avg. samples / sec: 976.72
Iteration:   4680, Loss function: 5.216, Average Loss: 5.058, avg. samples / sec: 985.42
Iteration:   4700, Loss function: 4.656, Average Loss: 5.054, avg. samples / sec: 946.29
Iteration:   4720, Loss function: 4.689, Average Loss: 5.049, avg. samples / sec: 976.15
Iteration:   4740, Loss function: 4.719, Average Loss: 5.044, avg. samples / sec: 894.69
Iteration:   4760, Loss function: 4.649, Average Loss: 5.041, avg. samples / sec: 916.66
Iteration:   4780, Loss function: 5.071, Average Loss: 5.037, avg. samples / sec: 975.37
Iteration:   4800, Loss function: 5.017, Average Loss: 5.035, avg. samples / sec: 930.88
Iteration:   4820, Loss function: 4.920, Average Loss: 5.031, avg. samples / sec: 948.71
Iteration:   4840, Loss function: 5.086, Average Loss: 5.029, avg. samples / sec: 908.13
Iteration:   4860, Loss function: 4.720, Average Loss: 5.023, avg. samples / sec: 983.82
Iteration:   4880, Loss function: 5.121, Average Loss: 5.020, avg. samples / sec: 955.80
Iteration:   4900, Loss function: 4.631, Average Loss: 5.015, avg. samples / sec: 982.49
Iteration:   4920, Loss function: 4.695, Average Loss: 5.012, avg. samples / sec: 965.16
Iteration:   4940, Loss function: 4.710, Average Loss: 5.007, avg. samples / sec: 907.31
Iteration:   4960, Loss function: 4.784, Average Loss: 5.003, avg. samples / sec: 947.22
Iteration:   4980, Loss function: 4.533, Average Loss: 4.999, avg. samples / sec: 877.36
Iteration:   5000, Loss function: 5.046, Average Loss: 4.997, avg. samples / sec: 920.92
Iteration:   5020, Loss function: 5.201, Average Loss: 4.994, avg. samples / sec: 907.72
Iteration:   5040, Loss function: 4.825, Average Loss: 4.990, avg. samples / sec: 947.54
Iteration:   5060, Loss function: 4.842, Average Loss: 4.987, avg. samples / sec: 885.89
Iteration:   5080, Loss function: 4.445, Average Loss: 4.983, avg. samples / sec: 887.96
Iteration:   5100, Loss function: 4.763, Average Loss: 4.981, avg. samples / sec: 958.41
Iteration:   5120, Loss function: 4.412, Average Loss: 4.977, avg. samples / sec: 978.78
Iteration:   5140, Loss function: 4.884, Average Loss: 4.973, avg. samples / sec: 971.99
:::MLLOG {"namespace": "", "time_ms": 1639068945005, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 29.84 s
:::MLLOG {"namespace": "", "time_ms": 1639068974898, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068974952, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068974952, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.890, Average Loss: 4.969, avg. samples / sec: 70.61
Iteration:   5180, Loss function: 4.874, Average Loss: 4.964, avg. samples / sec: 982.40
DONE (t=4.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10795
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09643
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13950
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20429
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10795 AP goal: 0.10000
Iteration:   5200, Loss function: 4.648, Average Loss: 4.960, avg. samples / sec: 921.52
:::MLLOG {"namespace": "", "time_ms": 1639068981705, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981706, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10794822711980591, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981706, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981976, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:24 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:24 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068297986, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068298121, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1209208729, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1209208729
:::MLLOG {"namespace": "", "time_ms": 1639068300034, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068300035, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068300039, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068300040, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068300040, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068324615, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068324615, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068326298, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068326299, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068326680, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068326681, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068326682, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.221, Average Loss: 0.023, avg. samples / sec: 4.32
Iteration:     20, Loss function: 21.075, Average Loss: 0.461, avg. samples / sec: 771.13
Iteration:     40, Loss function: 20.707, Average Loss: 0.863, avg. samples / sec: 865.97
Iteration:     60, Loss function: 20.466, Average Loss: 1.253, avg. samples / sec: 850.52
Iteration:     80, Loss function: 20.237, Average Loss: 1.628, avg. samples / sec: 876.45
Iteration:    100, Loss function: 17.492, Average Loss: 1.974, avg. samples / sec: 893.20
Iteration:    120, Loss function: 12.494, Average Loss: 2.208, avg. samples / sec: 943.26
Iteration:    140, Loss function: 10.094, Average Loss: 2.376, avg. samples / sec: 869.85
Iteration:    160, Loss function: 9.228, Average Loss: 2.518, avg. samples / sec: 843.28
Iteration:    180, Loss function: 9.139, Average Loss: 2.649, avg. samples / sec: 961.85
Iteration:    200, Loss function: 8.785, Average Loss: 2.774, avg. samples / sec: 916.51
Iteration:    220, Loss function: 8.587, Average Loss: 2.893, avg. samples / sec: 886.17
Iteration:    240, Loss function: 8.546, Average Loss: 3.008, avg. samples / sec: 880.70
Iteration:    260, Loss function: 8.615, Average Loss: 3.119, avg. samples / sec: 949.12
Iteration:    280, Loss function: 8.472, Average Loss: 3.227, avg. samples / sec: 912.88
Iteration:    300, Loss function: 8.351, Average Loss: 3.329, avg. samples / sec: 961.88
Iteration:    320, Loss function: 8.496, Average Loss: 3.432, avg. samples / sec: 954.67
Iteration:    340, Loss function: 8.358, Average Loss: 3.530, avg. samples / sec: 967.01
Iteration:    360, Loss function: 8.029, Average Loss: 3.622, avg. samples / sec: 976.13
Iteration:    380, Loss function: 7.908, Average Loss: 3.711, avg. samples / sec: 962.47
Iteration:    400, Loss function: 8.021, Average Loss: 3.795, avg. samples / sec: 962.62
Iteration:    420, Loss function: 7.652, Average Loss: 3.876, avg. samples / sec: 940.09
Iteration:    440, Loss function: 7.857, Average Loss: 3.954, avg. samples / sec: 684.76
Iteration:    460, Loss function: 7.852, Average Loss: 4.029, avg. samples / sec: 973.27
Iteration:    480, Loss function: 7.443, Average Loss: 4.102, avg. samples / sec: 955.26
Iteration:    500, Loss function: 7.686, Average Loss: 4.172, avg. samples / sec: 966.73
Iteration:    520, Loss function: 7.578, Average Loss: 4.239, avg. samples / sec: 876.14
Iteration:    540, Loss function: 7.539, Average Loss: 4.306, avg. samples / sec: 983.87
Iteration:    560, Loss function: 7.218, Average Loss: 4.368, avg. samples / sec: 941.91
Iteration:    580, Loss function: 7.205, Average Loss: 4.428, avg. samples / sec: 948.81
Iteration:    600, Loss function: 7.362, Average Loss: 4.485, avg. samples / sec: 956.19
Iteration:    620, Loss function: 7.011, Average Loss: 4.540, avg. samples / sec: 965.21
Iteration:    640, Loss function: 6.839, Average Loss: 4.593, avg. samples / sec: 982.49
Iteration:    660, Loss function: 7.232, Average Loss: 4.645, avg. samples / sec: 969.59
Iteration:    680, Loss function: 7.265, Average Loss: 4.695, avg. samples / sec: 887.00
Iteration:    700, Loss function: 6.876, Average Loss: 4.742, avg. samples / sec: 927.52
Iteration:    720, Loss function: 6.751, Average Loss: 4.790, avg. samples / sec: 1000.89
Iteration:    740, Loss function: 6.893, Average Loss: 4.834, avg. samples / sec: 982.48
Iteration:    760, Loss function: 7.063, Average Loss: 4.876, avg. samples / sec: 966.26
Iteration:    780, Loss function: 6.767, Average Loss: 4.917, avg. samples / sec: 886.47
Iteration:    800, Loss function: 7.086, Average Loss: 4.956, avg. samples / sec: 952.16
Iteration:    820, Loss function: 6.768, Average Loss: 4.992, avg. samples / sec: 983.87
Iteration:    840, Loss function: 6.536, Average Loss: 5.028, avg. samples / sec: 898.38
Iteration:    860, Loss function: 6.847, Average Loss: 5.061, avg. samples / sec: 922.05
Iteration:    880, Loss function: 6.756, Average Loss: 5.094, avg. samples / sec: 993.93
Iteration:    900, Loss function: 6.818, Average Loss: 5.124, avg. samples / sec: 974.56
Iteration:    920, Loss function: 6.642, Average Loss: 5.152, avg. samples / sec: 969.16
Iteration:    940, Loss function: 6.781, Average Loss: 5.182, avg. samples / sec: 956.26
Iteration:    960, Loss function: 6.459, Average Loss: 5.209, avg. samples / sec: 873.14
Iteration:    980, Loss function: 6.438, Average Loss: 5.235, avg. samples / sec: 937.60
Iteration:   1000, Loss function: 6.529, Average Loss: 5.260, avg. samples / sec: 982.11
Iteration:   1020, Loss function: 6.372, Average Loss: 5.284, avg. samples / sec: 928.45
:::MLLOG {"namespace": "", "time_ms": 1639068453503, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068453504, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.552, Average Loss: 5.307, avg. samples / sec: 969.17
Iteration:   1060, Loss function: 6.372, Average Loss: 5.329, avg. samples / sec: 926.17
Iteration:   1080, Loss function: 6.448, Average Loss: 5.351, avg. samples / sec: 953.66
Iteration:   1100, Loss function: 6.155, Average Loss: 5.370, avg. samples / sec: 992.43
Iteration:   1120, Loss function: 6.025, Average Loss: 5.388, avg. samples / sec: 944.12
Iteration:   1140, Loss function: 6.405, Average Loss: 5.405, avg. samples / sec: 904.82
Iteration:   1160, Loss function: 6.195, Average Loss: 5.421, avg. samples / sec: 973.22
Iteration:   1180, Loss function: 6.184, Average Loss: 5.436, avg. samples / sec: 979.19
Iteration:   1200, Loss function: 6.108, Average Loss: 5.452, avg. samples / sec: 980.22
Iteration:   1220, Loss function: 6.331, Average Loss: 5.467, avg. samples / sec: 923.08
Iteration:   1240, Loss function: 6.204, Average Loss: 5.479, avg. samples / sec: 982.14
Iteration:   1260, Loss function: 6.034, Average Loss: 5.492, avg. samples / sec: 994.83
Iteration:   1280, Loss function: 5.899, Average Loss: 5.503, avg. samples / sec: 989.27
Iteration:   1300, Loss function: 6.058, Average Loss: 5.514, avg. samples / sec: 861.83
Iteration:   1320, Loss function: 6.399, Average Loss: 5.526, avg. samples / sec: 965.31
Iteration:   1340, Loss function: 5.849, Average Loss: 5.536, avg. samples / sec: 944.84
Iteration:   1360, Loss function: 5.974, Average Loss: 5.546, avg. samples / sec: 889.19
Iteration:   1380, Loss function: 6.047, Average Loss: 5.556, avg. samples / sec: 919.01
Iteration:   1400, Loss function: 6.045, Average Loss: 5.564, avg. samples / sec: 972.51
Iteration:   1420, Loss function: 5.988, Average Loss: 5.571, avg. samples / sec: 991.05
Iteration:   1440, Loss function: 6.146, Average Loss: 5.579, avg. samples / sec: 964.86
Iteration:   1460, Loss function: 6.186, Average Loss: 5.586, avg. samples / sec: 903.64
Iteration:   1480, Loss function: 5.854, Average Loss: 5.594, avg. samples / sec: 827.32
Iteration:   1500, Loss function: 6.045, Average Loss: 5.601, avg. samples / sec: 933.00
Iteration:   1520, Loss function: 5.857, Average Loss: 5.607, avg. samples / sec: 964.94
Iteration:   1540, Loss function: 5.933, Average Loss: 5.611, avg. samples / sec: 909.96
Iteration:   1560, Loss function: 5.406, Average Loss: 5.614, avg. samples / sec: 944.81
Iteration:   1580, Loss function: 5.620, Average Loss: 5.618, avg. samples / sec: 945.19
Iteration:   1600, Loss function: 6.263, Average Loss: 5.624, avg. samples / sec: 969.56
Iteration:   1620, Loss function: 5.760, Average Loss: 5.628, avg. samples / sec: 995.15
Iteration:   1640, Loss function: 5.952, Average Loss: 5.631, avg. samples / sec: 930.96
Iteration:   1660, Loss function: 5.867, Average Loss: 5.635, avg. samples / sec: 880.78
Iteration:   1680, Loss function: 5.608, Average Loss: 5.638, avg. samples / sec: 925.66
Iteration:   1700, Loss function: 5.272, Average Loss: 5.641, avg. samples / sec: 957.48
Iteration:   1720, Loss function: 5.820, Average Loss: 5.643, avg. samples / sec: 897.20
Iteration:   1740, Loss function: 5.836, Average Loss: 5.646, avg. samples / sec: 936.02
Iteration:   1760, Loss function: 5.482, Average Loss: 5.646, avg. samples / sec: 917.78
Iteration:   1780, Loss function: 5.668, Average Loss: 5.647, avg. samples / sec: 913.50
Iteration:   1800, Loss function: 5.579, Average Loss: 5.649, avg. samples / sec: 1000.48
Iteration:   1820, Loss function: 5.767, Average Loss: 5.651, avg. samples / sec: 948.12
Iteration:   1840, Loss function: 5.907, Average Loss: 5.651, avg. samples / sec: 935.01
Iteration:   1860, Loss function: 5.583, Average Loss: 5.650, avg. samples / sec: 923.97
Iteration:   1880, Loss function: 5.843, Average Loss: 5.652, avg. samples / sec: 906.25
Iteration:   1900, Loss function: 5.870, Average Loss: 5.652, avg. samples / sec: 958.22
Iteration:   1920, Loss function: 5.871, Average Loss: 5.652, avg. samples / sec: 971.14
Iteration:   1940, Loss function: 5.870, Average Loss: 5.652, avg. samples / sec: 996.13
Iteration:   1960, Loss function: 5.533, Average Loss: 5.650, avg. samples / sec: 990.51
Iteration:   1980, Loss function: 5.654, Average Loss: 5.649, avg. samples / sec: 991.75
Iteration:   2000, Loss function: 5.547, Average Loss: 5.648, avg. samples / sec: 967.81
Iteration:   2020, Loss function: 5.581, Average Loss: 5.647, avg. samples / sec: 963.22
Iteration:   2040, Loss function: 5.671, Average Loss: 5.646, avg. samples / sec: 956.51
:::MLLOG {"namespace": "", "time_ms": 1639068577628, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068577630, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.659, Average Loss: 5.644, avg. samples / sec: 953.20
Iteration:   2080, Loss function: 5.156, Average Loss: 5.642, avg. samples / sec: 979.46
Iteration:   2100, Loss function: 5.578, Average Loss: 5.640, avg. samples / sec: 983.81
Iteration:   2120, Loss function: 5.276, Average Loss: 5.637, avg. samples / sec: 970.93
Iteration:   2140, Loss function: 5.497, Average Loss: 5.634, avg. samples / sec: 967.50
Iteration:   2160, Loss function: 5.375, Average Loss: 5.631, avg. samples / sec: 944.38
Iteration:   2180, Loss function: 5.359, Average Loss: 5.629, avg. samples / sec: 917.62
Iteration:   2200, Loss function: 5.543, Average Loss: 5.625, avg. samples / sec: 945.56
Iteration:   2220, Loss function: 5.476, Average Loss: 5.622, avg. samples / sec: 927.91
Iteration:   2240, Loss function: 5.381, Average Loss: 5.619, avg. samples / sec: 963.45
Iteration:   2260, Loss function: 5.338, Average Loss: 5.616, avg. samples / sec: 897.67
Iteration:   2280, Loss function: 5.289, Average Loss: 5.613, avg. samples / sec: 942.63
Iteration:   2300, Loss function: 5.085, Average Loss: 5.609, avg. samples / sec: 958.33
Iteration:   2320, Loss function: 5.343, Average Loss: 5.606, avg. samples / sec: 961.81
Iteration:   2340, Loss function: 5.477, Average Loss: 5.603, avg. samples / sec: 974.43
Iteration:   2360, Loss function: 5.290, Average Loss: 5.600, avg. samples / sec: 947.61
Iteration:   2380, Loss function: 5.409, Average Loss: 5.596, avg. samples / sec: 953.26
Iteration:   2400, Loss function: 5.429, Average Loss: 5.593, avg. samples / sec: 949.45
Iteration:   2420, Loss function: 5.520, Average Loss: 5.589, avg. samples / sec: 974.45
Iteration:   2440, Loss function: 5.492, Average Loss: 5.586, avg. samples / sec: 940.66
Iteration:   2460, Loss function: 5.275, Average Loss: 5.582, avg. samples / sec: 974.74
Iteration:   2480, Loss function: 5.415, Average Loss: 5.579, avg. samples / sec: 924.50
Iteration:   2500, Loss function: 5.358, Average Loss: 5.573, avg. samples / sec: 985.70
Iteration:   2520, Loss function: 5.512, Average Loss: 5.567, avg. samples / sec: 990.36
Iteration:   2540, Loss function: 5.326, Average Loss: 5.563, avg. samples / sec: 982.23
Iteration:   2560, Loss function: 5.388, Average Loss: 5.560, avg. samples / sec: 989.64
Iteration:   2580, Loss function: 5.295, Average Loss: 5.556, avg. samples / sec: 983.42
Iteration:   2600, Loss function: 5.338, Average Loss: 5.552, avg. samples / sec: 983.00
Iteration:   2620, Loss function: 5.486, Average Loss: 5.547, avg. samples / sec: 895.97
Iteration:   2640, Loss function: 5.091, Average Loss: 5.544, avg. samples / sec: 926.45
Iteration:   2660, Loss function: 5.227, Average Loss: 5.541, avg. samples / sec: 929.96
Iteration:   2680, Loss function: 5.040, Average Loss: 5.537, avg. samples / sec: 941.87
Iteration:   2700, Loss function: 5.275, Average Loss: 5.533, avg. samples / sec: 996.57
Iteration:   2720, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 978.74
Iteration:   2740, Loss function: 4.970, Average Loss: 5.524, avg. samples / sec: 975.95
Iteration:   2760, Loss function: 4.908, Average Loss: 5.519, avg. samples / sec: 984.90
Iteration:   2780, Loss function: 5.572, Average Loss: 5.514, avg. samples / sec: 991.70
Iteration:   2800, Loss function: 5.349, Average Loss: 5.510, avg. samples / sec: 985.84
Iteration:   2820, Loss function: 5.270, Average Loss: 5.505, avg. samples / sec: 989.55
Iteration:   2840, Loss function: 5.154, Average Loss: 5.501, avg. samples / sec: 963.70
Iteration:   2860, Loss function: 5.196, Average Loss: 5.495, avg. samples / sec: 969.51
Iteration:   2880, Loss function: 5.291, Average Loss: 5.491, avg. samples / sec: 974.07
Iteration:   2900, Loss function: 5.255, Average Loss: 5.487, avg. samples / sec: 938.84
Iteration:   2920, Loss function: 5.285, Average Loss: 5.482, avg. samples / sec: 979.19
Iteration:   2940, Loss function: 4.967, Average Loss: 5.477, avg. samples / sec: 953.28
Iteration:   2960, Loss function: 5.549, Average Loss: 5.472, avg. samples / sec: 958.22
Iteration:   2980, Loss function: 5.368, Average Loss: 5.468, avg. samples / sec: 984.15
Iteration:   3000, Loss function: 5.195, Average Loss: 5.463, avg. samples / sec: 960.00
Iteration:   3020, Loss function: 5.181, Average Loss: 5.456, avg. samples / sec: 985.23
Iteration:   3040, Loss function: 5.293, Average Loss: 5.451, avg. samples / sec: 939.28
Iteration:   3060, Loss function: 5.045, Average Loss: 5.445, avg. samples / sec: 852.86
Iteration:   3080, Loss function: 4.956, Average Loss: 5.439, avg. samples / sec: 937.17
:::MLLOG {"namespace": "", "time_ms": 1639068699965, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068699968, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.084, Average Loss: 5.433, avg. samples / sec: 983.12
Iteration:   3120, Loss function: 4.975, Average Loss: 5.426, avg. samples / sec: 999.18
Iteration:   3140, Loss function: 5.095, Average Loss: 5.422, avg. samples / sec: 974.92
Iteration:   3160, Loss function: 5.511, Average Loss: 5.417, avg. samples / sec: 964.89
Iteration:   3180, Loss function: 4.899, Average Loss: 5.412, avg. samples / sec: 958.94
Iteration:   3200, Loss function: 5.211, Average Loss: 5.407, avg. samples / sec: 970.12
Iteration:   3220, Loss function: 5.296, Average Loss: 5.402, avg. samples / sec: 993.55
Iteration:   3240, Loss function: 5.125, Average Loss: 5.395, avg. samples / sec: 989.25
Iteration:   3260, Loss function: 5.019, Average Loss: 5.389, avg. samples / sec: 972.25
Iteration:   3280, Loss function: 4.604, Average Loss: 5.383, avg. samples / sec: 978.68
Iteration:   3300, Loss function: 4.786, Average Loss: 5.377, avg. samples / sec: 968.04
Iteration:   3320, Loss function: 4.871, Average Loss: 5.372, avg. samples / sec: 974.95
Iteration:   3340, Loss function: 5.133, Average Loss: 5.368, avg. samples / sec: 939.91
Iteration:   3360, Loss function: 5.213, Average Loss: 5.362, avg. samples / sec: 967.90
Iteration:   3380, Loss function: 5.120, Average Loss: 5.355, avg. samples / sec: 959.04
Iteration:   3400, Loss function: 4.964, Average Loss: 5.350, avg. samples / sec: 963.27
Iteration:   3420, Loss function: 4.939, Average Loss: 5.345, avg. samples / sec: 987.45
Iteration:   3440, Loss function: 4.875, Average Loss: 5.340, avg. samples / sec: 992.59
Iteration:   3460, Loss function: 5.096, Average Loss: 5.335, avg. samples / sec: 949.50
Iteration:   3480, Loss function: 5.213, Average Loss: 5.330, avg. samples / sec: 972.59
Iteration:   3500, Loss function: 5.127, Average Loss: 5.325, avg. samples / sec: 985.54
Iteration:   3520, Loss function: 5.003, Average Loss: 5.321, avg. samples / sec: 891.17
Iteration:   3540, Loss function: 4.900, Average Loss: 5.316, avg. samples / sec: 970.25
Iteration:   3560, Loss function: 4.848, Average Loss: 5.312, avg. samples / sec: 943.85
Iteration:   3580, Loss function: 4.945, Average Loss: 5.308, avg. samples / sec: 966.24
Iteration:   3600, Loss function: 5.115, Average Loss: 5.303, avg. samples / sec: 974.82
Iteration:   3620, Loss function: 4.959, Average Loss: 5.298, avg. samples / sec: 929.54
Iteration:   3640, Loss function: 4.735, Average Loss: 5.292, avg. samples / sec: 996.29
Iteration:   3660, Loss function: 4.952, Average Loss: 5.287, avg. samples / sec: 978.33
Iteration:   3680, Loss function: 5.047, Average Loss: 5.282, avg. samples / sec: 996.43
Iteration:   3700, Loss function: 4.946, Average Loss: 5.277, avg. samples / sec: 968.43
Iteration:   3720, Loss function: 4.993, Average Loss: 5.271, avg. samples / sec: 910.51
Iteration:   3740, Loss function: 5.261, Average Loss: 5.266, avg. samples / sec: 969.16
Iteration:   3760, Loss function: 5.311, Average Loss: 5.263, avg. samples / sec: 917.40
Iteration:   3780, Loss function: 5.022, Average Loss: 5.258, avg. samples / sec: 983.94
Iteration:   3800, Loss function: 5.178, Average Loss: 5.255, avg. samples / sec: 992.99
Iteration:   3820, Loss function: 5.047, Average Loss: 5.250, avg. samples / sec: 959.15
Iteration:   3840, Loss function: 4.990, Average Loss: 5.246, avg. samples / sec: 955.00
Iteration:   3860, Loss function: 4.959, Average Loss: 5.241, avg. samples / sec: 987.77
Iteration:   3880, Loss function: 4.962, Average Loss: 5.235, avg. samples / sec: 946.94
Iteration:   3900, Loss function: 5.255, Average Loss: 5.231, avg. samples / sec: 949.02
Iteration:   3920, Loss function: 5.073, Average Loss: 5.224, avg. samples / sec: 929.67
Iteration:   3940, Loss function: 4.876, Average Loss: 5.218, avg. samples / sec: 841.66
Iteration:   3960, Loss function: 5.009, Average Loss: 5.215, avg. samples / sec: 954.35
Iteration:   3980, Loss function: 4.846, Average Loss: 5.210, avg. samples / sec: 915.37
Iteration:   4000, Loss function: 5.050, Average Loss: 5.206, avg. samples / sec: 989.51
Iteration:   4020, Loss function: 5.107, Average Loss: 5.202, avg. samples / sec: 956.28
Iteration:   4040, Loss function: 4.903, Average Loss: 5.199, avg. samples / sec: 929.68
Iteration:   4060, Loss function: 5.116, Average Loss: 5.195, avg. samples / sec: 972.63
Iteration:   4080, Loss function: 5.159, Average Loss: 5.190, avg. samples / sec: 970.27
Iteration:   4100, Loss function: 5.087, Average Loss: 5.187, avg. samples / sec: 981.51
:::MLLOG {"namespace": "", "time_ms": 1639068821997, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068821999, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.081, Average Loss: 5.184, avg. samples / sec: 976.55
Iteration:   4140, Loss function: 4.858, Average Loss: 5.179, avg. samples / sec: 983.45
Iteration:   4160, Loss function: 5.083, Average Loss: 5.172, avg. samples / sec: 971.84
Iteration:   4180, Loss function: 4.965, Average Loss: 5.167, avg. samples / sec: 955.91
Iteration:   4200, Loss function: 4.673, Average Loss: 5.162, avg. samples / sec: 981.60
Iteration:   4220, Loss function: 4.895, Average Loss: 5.157, avg. samples / sec: 944.75
Iteration:   4240, Loss function: 4.951, Average Loss: 5.152, avg. samples / sec: 951.20
Iteration:   4260, Loss function: 5.011, Average Loss: 5.148, avg. samples / sec: 980.56
Iteration:   4280, Loss function: 5.110, Average Loss: 5.142, avg. samples / sec: 975.05
Iteration:   4300, Loss function: 4.819, Average Loss: 5.137, avg. samples / sec: 932.77
Iteration:   4320, Loss function: 4.728, Average Loss: 5.131, avg. samples / sec: 982.07
Iteration:   4340, Loss function: 4.596, Average Loss: 5.125, avg. samples / sec: 935.45
Iteration:   4360, Loss function: 4.955, Average Loss: 5.121, avg. samples / sec: 943.74
Iteration:   4380, Loss function: 5.132, Average Loss: 5.116, avg. samples / sec: 980.85
Iteration:   4400, Loss function: 4.856, Average Loss: 5.112, avg. samples / sec: 957.04
Iteration:   4420, Loss function: 4.965, Average Loss: 5.107, avg. samples / sec: 981.98
Iteration:   4440, Loss function: 4.740, Average Loss: 5.102, avg. samples / sec: 982.80
Iteration:   4460, Loss function: 5.159, Average Loss: 5.097, avg. samples / sec: 983.99
Iteration:   4480, Loss function: 5.235, Average Loss: 5.095, avg. samples / sec: 964.67
Iteration:   4500, Loss function: 4.869, Average Loss: 5.093, avg. samples / sec: 958.03
Iteration:   4520, Loss function: 4.841, Average Loss: 5.089, avg. samples / sec: 978.43
Iteration:   4540, Loss function: 4.991, Average Loss: 5.085, avg. samples / sec: 971.84
Iteration:   4560, Loss function: 4.873, Average Loss: 5.080, avg. samples / sec: 945.55
Iteration:   4580, Loss function: 4.633, Average Loss: 5.077, avg. samples / sec: 991.69
Iteration:   4600, Loss function: 4.814, Average Loss: 5.074, avg. samples / sec: 965.54
Iteration:   4620, Loss function: 4.793, Average Loss: 5.070, avg. samples / sec: 956.07
Iteration:   4640, Loss function: 4.724, Average Loss: 5.065, avg. samples / sec: 996.49
Iteration:   4660, Loss function: 4.775, Average Loss: 5.062, avg. samples / sec: 976.72
Iteration:   4680, Loss function: 5.216, Average Loss: 5.058, avg. samples / sec: 985.42
Iteration:   4700, Loss function: 4.656, Average Loss: 5.054, avg. samples / sec: 946.29
Iteration:   4720, Loss function: 4.689, Average Loss: 5.049, avg. samples / sec: 976.15
Iteration:   4740, Loss function: 4.719, Average Loss: 5.044, avg. samples / sec: 894.69
Iteration:   4760, Loss function: 4.649, Average Loss: 5.041, avg. samples / sec: 916.66
Iteration:   4780, Loss function: 5.071, Average Loss: 5.037, avg. samples / sec: 975.37
Iteration:   4800, Loss function: 5.017, Average Loss: 5.035, avg. samples / sec: 930.88
Iteration:   4820, Loss function: 4.920, Average Loss: 5.031, avg. samples / sec: 948.71
Iteration:   4840, Loss function: 5.086, Average Loss: 5.029, avg. samples / sec: 908.13
Iteration:   4860, Loss function: 4.720, Average Loss: 5.023, avg. samples / sec: 983.82
Iteration:   4880, Loss function: 5.121, Average Loss: 5.020, avg. samples / sec: 955.80
Iteration:   4900, Loss function: 4.631, Average Loss: 5.015, avg. samples / sec: 982.49
Iteration:   4920, Loss function: 4.695, Average Loss: 5.012, avg. samples / sec: 965.16
Iteration:   4940, Loss function: 4.710, Average Loss: 5.007, avg. samples / sec: 907.31
Iteration:   4960, Loss function: 4.784, Average Loss: 5.003, avg. samples / sec: 947.22
Iteration:   4980, Loss function: 4.533, Average Loss: 4.999, avg. samples / sec: 877.36
Iteration:   5000, Loss function: 5.046, Average Loss: 4.997, avg. samples / sec: 920.92
Iteration:   5020, Loss function: 5.201, Average Loss: 4.994, avg. samples / sec: 907.72
Iteration:   5040, Loss function: 4.825, Average Loss: 4.990, avg. samples / sec: 947.54
Iteration:   5060, Loss function: 4.842, Average Loss: 4.987, avg. samples / sec: 885.89
Iteration:   5080, Loss function: 4.445, Average Loss: 4.983, avg. samples / sec: 887.96
Iteration:   5100, Loss function: 4.763, Average Loss: 4.981, avg. samples / sec: 958.41
Iteration:   5120, Loss function: 4.412, Average Loss: 4.977, avg. samples / sec: 978.78
Iteration:   5140, Loss function: 4.884, Average Loss: 4.973, avg. samples / sec: 971.99
:::MLLOG {"namespace": "", "time_ms": 1639068945005, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 29.84 s
:::MLLOG {"namespace": "", "time_ms": 1639068974898, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068974952, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068974952, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.890, Average Loss: 4.969, avg. samples / sec: 70.61
Iteration:   5180, Loss function: 4.874, Average Loss: 4.964, avg. samples / sec: 982.40
DONE (t=4.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10795
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09643
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13950
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20429
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21678
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10795 AP goal: 0.10000
Iteration:   5200, Loss function: 4.648, Average Loss: 4.960, avg. samples / sec: 921.52
:::MLLOG {"namespace": "", "time_ms": 1639068981705, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981706, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10794822711980591, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981706, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981976, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068984
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:24 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:50 PM'
START TIMING RUN WAS 2021-12-09 04:44:50 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:24 PM'
ENDING TIMING RUN AT 2021-12-09 04:56:24 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ result=694
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:50 PM
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 04:44:50 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
