+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-9lmq9.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-9lmq9.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-9lmq9.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ MIG_MODE=1
Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068288
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:48 PM'
STARTING TIMING RUN AT 2021-12-09 04:44:48 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:48 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ rm -f /data/coco2017/sync/2021-12-09_10-59-20
+ set +x
Thu Dec  9 16:44:48 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-9lmq9 to the sync file ...
run-ssd--1-9lmq9 Found 1 Pods, waiting to have 8 ...
     1	run-ssd--1-9lmq9
Thu Dec  9 16:44:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068295769, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068295893, "event_type": "POINT_IN_TIME", "key": "seed", "value": 782477045, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 782477045
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068297817, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068297817, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068322848, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068322848, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068324321, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324323, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068324719, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068324720, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068324721, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.136, Average Loss: 0.023, avg. samples / sec: 4.29
Iteration:     20, Loss function: 21.271, Average Loss: 0.460, avg. samples / sec: 849.01
Iteration:     40, Loss function: 20.791, Average Loss: 0.863, avg. samples / sec: 873.92
Iteration:     60, Loss function: 20.313, Average Loss: 1.252, avg. samples / sec: 915.19
Iteration:     80, Loss function: 19.982, Average Loss: 1.625, avg. samples / sec: 867.64
Iteration:    100, Loss function: 15.045, Average Loss: 1.946, avg. samples / sec: 903.56
Iteration:    120, Loss function: 11.943, Average Loss: 2.150, avg. samples / sec: 924.43
Iteration:    140, Loss function: 9.865, Average Loss: 2.319, avg. samples / sec: 931.14
Iteration:    160, Loss function: 9.458, Average Loss: 2.465, avg. samples / sec: 892.20
Iteration:    180, Loss function: 9.113, Average Loss: 2.599, avg. samples / sec: 866.99
Iteration:    200, Loss function: 8.753, Average Loss: 2.726, avg. samples / sec: 929.61
Iteration:    220, Loss function: 8.609, Average Loss: 2.848, avg. samples / sec: 871.01
Iteration:    240, Loss function: 8.835, Average Loss: 2.965, avg. samples / sec: 916.93
Iteration:    260, Loss function: 8.765, Average Loss: 3.080, avg. samples / sec: 956.80
Iteration:    280, Loss function: 8.446, Average Loss: 3.190, avg. samples / sec: 856.10
Iteration:    300, Loss function: 8.334, Average Loss: 3.294, avg. samples / sec: 941.80
Iteration:    320, Loss function: 8.688, Average Loss: 3.396, avg. samples / sec: 927.53
Iteration:    340, Loss function: 8.308, Average Loss: 3.497, avg. samples / sec: 949.45
Iteration:    360, Loss function: 8.256, Average Loss: 3.590, avg. samples / sec: 957.92
Iteration:    380, Loss function: 7.928, Average Loss: 3.681, avg. samples / sec: 927.53
Iteration:    400, Loss function: 8.049, Average Loss: 3.766, avg. samples / sec: 964.81
Iteration:    420, Loss function: 7.609, Average Loss: 3.847, avg. samples / sec: 953.99
Iteration:    440, Loss function: 7.904, Average Loss: 3.925, avg. samples / sec: 953.99
Iteration:    460, Loss function: 7.785, Average Loss: 4.003, avg. samples / sec: 709.08
Iteration:    480, Loss function: 7.552, Average Loss: 4.077, avg. samples / sec: 941.94
Iteration:    500, Loss function: 7.641, Average Loss: 4.147, avg. samples / sec: 906.27
Iteration:    520, Loss function: 7.565, Average Loss: 4.215, avg. samples / sec: 991.55
Iteration:    540, Loss function: 7.762, Average Loss: 4.280, avg. samples / sec: 958.59
Iteration:    560, Loss function: 7.355, Average Loss: 4.343, avg. samples / sec: 967.45
Iteration:    580, Loss function: 7.223, Average Loss: 4.404, avg. samples / sec: 974.79
Iteration:    600, Loss function: 7.319, Average Loss: 4.463, avg. samples / sec: 880.61
Iteration:    620, Loss function: 6.981, Average Loss: 4.519, avg. samples / sec: 935.65
Iteration:    640, Loss function: 6.947, Average Loss: 4.573, avg. samples / sec: 983.17
Iteration:    660, Loss function: 7.211, Average Loss: 4.626, avg. samples / sec: 972.52
Iteration:    680, Loss function: 7.124, Average Loss: 4.677, avg. samples / sec: 929.49
Iteration:    700, Loss function: 6.759, Average Loss: 4.724, avg. samples / sec: 927.34
Iteration:    720, Loss function: 6.935, Average Loss: 4.772, avg. samples / sec: 961.98
Iteration:    740, Loss function: 7.011, Average Loss: 4.817, avg. samples / sec: 938.61
Iteration:    760, Loss function: 7.165, Average Loss: 4.860, avg. samples / sec: 929.60
Iteration:    780, Loss function: 6.787, Average Loss: 4.902, avg. samples / sec: 966.07
Iteration:    800, Loss function: 7.184, Average Loss: 4.941, avg. samples / sec: 963.17
Iteration:    820, Loss function: 6.781, Average Loss: 4.979, avg. samples / sec: 907.67
Iteration:    840, Loss function: 6.827, Average Loss: 5.016, avg. samples / sec: 963.72
Iteration:    860, Loss function: 6.788, Average Loss: 5.050, avg. samples / sec: 925.45
Iteration:    880, Loss function: 6.792, Average Loss: 5.083, avg. samples / sec: 897.95
Iteration:    900, Loss function: 6.848, Average Loss: 5.115, avg. samples / sec: 922.92
Iteration:    920, Loss function: 6.589, Average Loss: 5.145, avg. samples / sec: 986.04
Iteration:    940, Loss function: 6.924, Average Loss: 5.175, avg. samples / sec: 987.00
Iteration:    960, Loss function: 6.315, Average Loss: 5.202, avg. samples / sec: 957.64
Iteration:    980, Loss function: 6.545, Average Loss: 5.228, avg. samples / sec: 979.83
Iteration:   1000, Loss function: 6.643, Average Loss: 5.253, avg. samples / sec: 980.49
Iteration:   1020, Loss function: 6.424, Average Loss: 5.276, avg. samples / sec: 848.40
:::MLLOG {"namespace": "", "time_ms": 1639068451554, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451567, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.524, Average Loss: 5.299, avg. samples / sec: 907.30
Iteration:   1060, Loss function: 6.405, Average Loss: 5.322, avg. samples / sec: 962.62
Iteration:   1080, Loss function: 6.335, Average Loss: 5.343, avg. samples / sec: 988.64
Iteration:   1100, Loss function: 6.324, Average Loss: 5.363, avg. samples / sec: 963.98
Iteration:   1120, Loss function: 6.200, Average Loss: 5.382, avg. samples / sec: 990.61
Iteration:   1140, Loss function: 6.448, Average Loss: 5.400, avg. samples / sec: 973.79
Iteration:   1160, Loss function: 6.141, Average Loss: 5.417, avg. samples / sec: 948.01
Iteration:   1180, Loss function: 6.370, Average Loss: 5.433, avg. samples / sec: 949.80
Iteration:   1200, Loss function: 6.137, Average Loss: 5.449, avg. samples / sec: 970.76
Iteration:   1220, Loss function: 6.133, Average Loss: 5.463, avg. samples / sec: 953.39
Iteration:   1240, Loss function: 6.018, Average Loss: 5.475, avg. samples / sec: 926.48
Iteration:   1260, Loss function: 6.051, Average Loss: 5.487, avg. samples / sec: 870.49
Iteration:   1280, Loss function: 6.094, Average Loss: 5.498, avg. samples / sec: 920.63
Iteration:   1300, Loss function: 6.232, Average Loss: 5.511, avg. samples / sec: 899.91
Iteration:   1320, Loss function: 6.049, Average Loss: 5.522, avg. samples / sec: 967.39
Iteration:   1340, Loss function: 5.994, Average Loss: 5.531, avg. samples / sec: 969.03
Iteration:   1360, Loss function: 5.907, Average Loss: 5.541, avg. samples / sec: 988.83
Iteration:   1380, Loss function: 6.126, Average Loss: 5.551, avg. samples / sec: 960.92
Iteration:   1400, Loss function: 5.973, Average Loss: 5.559, avg. samples / sec: 907.99
Iteration:   1420, Loss function: 5.884, Average Loss: 5.567, avg. samples / sec: 981.94
Iteration:   1440, Loss function: 6.266, Average Loss: 5.576, avg. samples / sec: 924.17
Iteration:   1460, Loss function: 6.244, Average Loss: 5.583, avg. samples / sec: 961.99
Iteration:   1480, Loss function: 6.028, Average Loss: 5.592, avg. samples / sec: 993.07
Iteration:   1500, Loss function: 6.095, Average Loss: 5.601, avg. samples / sec: 870.09
Iteration:   1520, Loss function: 6.130, Average Loss: 5.606, avg. samples / sec: 917.16
Iteration:   1540, Loss function: 6.151, Average Loss: 5.611, avg. samples / sec: 893.16
Iteration:   1560, Loss function: 5.701, Average Loss: 5.616, avg. samples / sec: 883.73
Iteration:   1580, Loss function: 5.669, Average Loss: 5.621, avg. samples / sec: 905.26
Iteration:   1600, Loss function: 6.060, Average Loss: 5.626, avg. samples / sec: 939.93
Iteration:   1620, Loss function: 5.613, Average Loss: 5.631, avg. samples / sec: 919.06
Iteration:   1640, Loss function: 6.206, Average Loss: 5.634, avg. samples / sec: 975.45
Iteration:   1660, Loss function: 5.961, Average Loss: 5.639, avg. samples / sec: 944.28
Iteration:   1680, Loss function: 5.828, Average Loss: 5.643, avg. samples / sec: 987.82
Iteration:   1700, Loss function: 5.334, Average Loss: 5.646, avg. samples / sec: 917.53
Iteration:   1720, Loss function: 5.556, Average Loss: 5.647, avg. samples / sec: 949.27
Iteration:   1740, Loss function: 6.052, Average Loss: 5.649, avg. samples / sec: 933.81
Iteration:   1760, Loss function: 5.473, Average Loss: 5.650, avg. samples / sec: 990.38
Iteration:   1780, Loss function: 5.832, Average Loss: 5.651, avg. samples / sec: 923.58
Iteration:   1800, Loss function: 5.672, Average Loss: 5.652, avg. samples / sec: 984.19
Iteration:   1820, Loss function: 5.992, Average Loss: 5.653, avg. samples / sec: 935.50
Iteration:   1840, Loss function: 5.836, Average Loss: 5.653, avg. samples / sec: 982.17
Iteration:   1860, Loss function: 5.651, Average Loss: 5.653, avg. samples / sec: 971.32
Iteration:   1880, Loss function: 5.904, Average Loss: 5.655, avg. samples / sec: 948.72
Iteration:   1900, Loss function: 5.789, Average Loss: 5.656, avg. samples / sec: 977.88
Iteration:   1920, Loss function: 5.792, Average Loss: 5.656, avg. samples / sec: 979.90
Iteration:   1940, Loss function: 5.744, Average Loss: 5.656, avg. samples / sec: 969.17
Iteration:   1960, Loss function: 5.639, Average Loss: 5.655, avg. samples / sec: 955.92
Iteration:   1980, Loss function: 5.740, Average Loss: 5.653, avg. samples / sec: 946.01
Iteration:   2000, Loss function: 5.903, Average Loss: 5.654, avg. samples / sec: 984.19
Iteration:   2020, Loss function: 5.641, Average Loss: 5.653, avg. samples / sec: 917.19
Iteration:   2040, Loss function: 5.867, Average Loss: 5.653, avg. samples / sec: 872.02
:::MLLOG {"namespace": "", "time_ms": 1639068575749, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068575750, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.446, Average Loss: 5.651, avg. samples / sec: 916.99
Iteration:   2080, Loss function: 5.142, Average Loss: 5.649, avg. samples / sec: 953.74
Iteration:   2100, Loss function: 5.489, Average Loss: 5.647, avg. samples / sec: 989.98
Iteration:   2120, Loss function: 5.201, Average Loss: 5.644, avg. samples / sec: 976.37
Iteration:   2140, Loss function: 5.439, Average Loss: 5.640, avg. samples / sec: 892.44
Iteration:   2160, Loss function: 5.486, Average Loss: 5.637, avg. samples / sec: 983.58
Iteration:   2180, Loss function: 5.432, Average Loss: 5.636, avg. samples / sec: 983.38
Iteration:   2200, Loss function: 5.622, Average Loss: 5.631, avg. samples / sec: 986.97
Iteration:   2220, Loss function: 5.610, Average Loss: 5.629, avg. samples / sec: 951.03
Iteration:   2240, Loss function: 5.569, Average Loss: 5.626, avg. samples / sec: 950.14
Iteration:   2260, Loss function: 5.250, Average Loss: 5.622, avg. samples / sec: 979.12
Iteration:   2280, Loss function: 5.237, Average Loss: 5.619, avg. samples / sec: 947.32
Iteration:   2300, Loss function: 5.019, Average Loss: 5.616, avg. samples / sec: 971.26
Iteration:   2320, Loss function: 5.405, Average Loss: 5.613, avg. samples / sec: 974.78
Iteration:   2340, Loss function: 5.588, Average Loss: 5.610, avg. samples / sec: 950.25
Iteration:   2360, Loss function: 5.413, Average Loss: 5.605, avg. samples / sec: 967.20
Iteration:   2380, Loss function: 5.448, Average Loss: 5.601, avg. samples / sec: 951.52
Iteration:   2400, Loss function: 5.539, Average Loss: 5.597, avg. samples / sec: 916.43
Iteration:   2420, Loss function: 5.531, Average Loss: 5.593, avg. samples / sec: 920.75
Iteration:   2440, Loss function: 5.523, Average Loss: 5.590, avg. samples / sec: 948.24
Iteration:   2460, Loss function: 5.177, Average Loss: 5.586, avg. samples / sec: 895.39
Iteration:   2480, Loss function: 5.359, Average Loss: 5.583, avg. samples / sec: 912.45
Iteration:   2500, Loss function: 5.412, Average Loss: 5.579, avg. samples / sec: 825.59
Iteration:   2520, Loss function: 5.304, Average Loss: 5.574, avg. samples / sec: 966.53
Iteration:   2540, Loss function: 5.537, Average Loss: 5.571, avg. samples / sec: 956.16
Iteration:   2560, Loss function: 5.302, Average Loss: 5.567, avg. samples / sec: 950.54
Iteration:   2580, Loss function: 5.281, Average Loss: 5.563, avg. samples / sec: 905.01
Iteration:   2600, Loss function: 5.467, Average Loss: 5.560, avg. samples / sec: 872.41
Iteration:   2620, Loss function: 5.354, Average Loss: 5.554, avg. samples / sec: 987.89
Iteration:   2640, Loss function: 5.179, Average Loss: 5.551, avg. samples / sec: 916.34
Iteration:   2660, Loss function: 5.199, Average Loss: 5.547, avg. samples / sec: 990.71
Iteration:   2680, Loss function: 5.171, Average Loss: 5.542, avg. samples / sec: 889.42
Iteration:   2700, Loss function: 5.064, Average Loss: 5.537, avg. samples / sec: 917.24
Iteration:   2720, Loss function: 5.165, Average Loss: 5.533, avg. samples / sec: 961.65
Iteration:   2740, Loss function: 5.040, Average Loss: 5.528, avg. samples / sec: 982.81
Iteration:   2760, Loss function: 5.013, Average Loss: 5.523, avg. samples / sec: 966.09
Iteration:   2780, Loss function: 5.495, Average Loss: 5.520, avg. samples / sec: 953.76
Iteration:   2800, Loss function: 5.450, Average Loss: 5.516, avg. samples / sec: 866.91
Iteration:   2820, Loss function: 5.386, Average Loss: 5.511, avg. samples / sec: 876.60
Iteration:   2840, Loss function: 5.216, Average Loss: 5.506, avg. samples / sec: 989.47
Iteration:   2860, Loss function: 5.106, Average Loss: 5.502, avg. samples / sec: 982.14
Iteration:   2880, Loss function: 5.122, Average Loss: 5.497, avg. samples / sec: 980.38
Iteration:   2900, Loss function: 5.220, Average Loss: 5.493, avg. samples / sec: 988.99
Iteration:   2920, Loss function: 5.356, Average Loss: 5.488, avg. samples / sec: 932.78
Iteration:   2940, Loss function: 5.096, Average Loss: 5.484, avg. samples / sec: 870.37
Iteration:   2960, Loss function: 5.404, Average Loss: 5.480, avg. samples / sec: 893.74
Iteration:   2980, Loss function: 5.190, Average Loss: 5.476, avg. samples / sec: 896.13
Iteration:   3000, Loss function: 5.252, Average Loss: 5.471, avg. samples / sec: 925.68
Iteration:   3020, Loss function: 5.219, Average Loss: 5.464, avg. samples / sec: 970.45
Iteration:   3040, Loss function: 5.147, Average Loss: 5.458, avg. samples / sec: 980.62
Iteration:   3060, Loss function: 5.035, Average Loss: 5.452, avg. samples / sec: 981.62
Iteration:   3080, Loss function: 4.770, Average Loss: 5.446, avg. samples / sec: 964.72
:::MLLOG {"namespace": "", "time_ms": 1639068700114, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700116, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.201, Average Loss: 5.441, avg. samples / sec: 948.76
Iteration:   3120, Loss function: 5.071, Average Loss: 5.435, avg. samples / sec: 956.96
Iteration:   3140, Loss function: 4.984, Average Loss: 5.430, avg. samples / sec: 968.70
Iteration:   3160, Loss function: 5.489, Average Loss: 5.425, avg. samples / sec: 924.04
Iteration:   3180, Loss function: 4.973, Average Loss: 5.420, avg. samples / sec: 979.28
Iteration:   3200, Loss function: 5.284, Average Loss: 5.415, avg. samples / sec: 994.89
Iteration:   3220, Loss function: 5.007, Average Loss: 5.409, avg. samples / sec: 973.28
Iteration:   3240, Loss function: 5.240, Average Loss: 5.404, avg. samples / sec: 978.98
Iteration:   3260, Loss function: 5.057, Average Loss: 5.399, avg. samples / sec: 904.94
Iteration:   3280, Loss function: 4.910, Average Loss: 5.393, avg. samples / sec: 922.35
Iteration:   3300, Loss function: 4.775, Average Loss: 5.388, avg. samples / sec: 960.51
Iteration:   3320, Loss function: 4.991, Average Loss: 5.382, avg. samples / sec: 986.84
Iteration:   3340, Loss function: 5.113, Average Loss: 5.378, avg. samples / sec: 976.54
Iteration:   3360, Loss function: 5.107, Average Loss: 5.370, avg. samples / sec: 985.69
Iteration:   3380, Loss function: 5.298, Average Loss: 5.362, avg. samples / sec: 937.32
Iteration:   3400, Loss function: 4.776, Average Loss: 5.357, avg. samples / sec: 979.85
Iteration:   3420, Loss function: 5.217, Average Loss: 5.352, avg. samples / sec: 969.55
Iteration:   3440, Loss function: 4.854, Average Loss: 5.348, avg. samples / sec: 932.97
Iteration:   3460, Loss function: 5.159, Average Loss: 5.343, avg. samples / sec: 933.41
Iteration:   3480, Loss function: 5.310, Average Loss: 5.338, avg. samples / sec: 977.58
Iteration:   3500, Loss function: 5.128, Average Loss: 5.333, avg. samples / sec: 978.60
Iteration:   3520, Loss function: 4.835, Average Loss: 5.329, avg. samples / sec: 996.22
Iteration:   3540, Loss function: 4.861, Average Loss: 5.323, avg. samples / sec: 968.88
Iteration:   3560, Loss function: 4.949, Average Loss: 5.320, avg. samples / sec: 983.06
Iteration:   3580, Loss function: 4.992, Average Loss: 5.316, avg. samples / sec: 987.25
Iteration:   3600, Loss function: 5.193, Average Loss: 5.310, avg. samples / sec: 984.63
Iteration:   3620, Loss function: 4.969, Average Loss: 5.304, avg. samples / sec: 961.59
Iteration:   3640, Loss function: 4.784, Average Loss: 5.299, avg. samples / sec: 971.51
Iteration:   3660, Loss function: 5.295, Average Loss: 5.294, avg. samples / sec: 945.12
Iteration:   3680, Loss function: 5.108, Average Loss: 5.289, avg. samples / sec: 985.35
Iteration:   3700, Loss function: 5.141, Average Loss: 5.285, avg. samples / sec: 988.59
Iteration:   3720, Loss function: 4.890, Average Loss: 5.279, avg. samples / sec: 979.12
Iteration:   3740, Loss function: 5.324, Average Loss: 5.275, avg. samples / sec: 974.07
Iteration:   3760, Loss function: 4.965, Average Loss: 5.271, avg. samples / sec: 913.74
Iteration:   3780, Loss function: 4.928, Average Loss: 5.266, avg. samples / sec: 972.30
Iteration:   3800, Loss function: 5.125, Average Loss: 5.262, avg. samples / sec: 857.03
Iteration:   3820, Loss function: 5.154, Average Loss: 5.257, avg. samples / sec: 957.12
Iteration:   3840, Loss function: 4.605, Average Loss: 5.252, avg. samples / sec: 942.51
Iteration:   3860, Loss function: 4.891, Average Loss: 5.247, avg. samples / sec: 953.88
Iteration:   3880, Loss function: 5.051, Average Loss: 5.241, avg. samples / sec: 974.02
Iteration:   3900, Loss function: 5.074, Average Loss: 5.236, avg. samples / sec: 934.41
Iteration:   3920, Loss function: 5.344, Average Loss: 5.230, avg. samples / sec: 979.69
Iteration:   3940, Loss function: 5.072, Average Loss: 5.224, avg. samples / sec: 992.16
Iteration:   3960, Loss function: 4.984, Average Loss: 5.220, avg. samples / sec: 968.24
Iteration:   3980, Loss function: 4.945, Average Loss: 5.216, avg. samples / sec: 966.74
Iteration:   4000, Loss function: 5.098, Average Loss: 5.212, avg. samples / sec: 942.56
Iteration:   4020, Loss function: 4.864, Average Loss: 5.207, avg. samples / sec: 924.86
Iteration:   4040, Loss function: 5.181, Average Loss: 5.203, avg. samples / sec: 942.10
Iteration:   4060, Loss function: 5.301, Average Loss: 5.200, avg. samples / sec: 973.30
Iteration:   4080, Loss function: 4.950, Average Loss: 5.195, avg. samples / sec: 937.93
Iteration:   4100, Loss function: 5.073, Average Loss: 5.192, avg. samples / sec: 934.75
:::MLLOG {"namespace": "", "time_ms": 1639068822452, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068822454, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.187, avg. samples / sec: 948.53
Iteration:   4140, Loss function: 5.034, Average Loss: 5.182, avg. samples / sec: 961.38
Iteration:   4160, Loss function: 5.041, Average Loss: 5.176, avg. samples / sec: 974.23
Iteration:   4180, Loss function: 4.983, Average Loss: 5.170, avg. samples / sec: 944.52
Iteration:   4200, Loss function: 4.651, Average Loss: 5.166, avg. samples / sec: 945.06
Iteration:   4220, Loss function: 4.784, Average Loss: 5.160, avg. samples / sec: 934.01
Iteration:   4240, Loss function: 4.986, Average Loss: 5.155, avg. samples / sec: 964.95
Iteration:   4260, Loss function: 5.021, Average Loss: 5.151, avg. samples / sec: 968.77
Iteration:   4280, Loss function: 4.961, Average Loss: 5.146, avg. samples / sec: 923.88
Iteration:   4300, Loss function: 4.903, Average Loss: 5.140, avg. samples / sec: 931.33
Iteration:   4320, Loss function: 4.754, Average Loss: 5.136, avg. samples / sec: 911.09
Iteration:   4340, Loss function: 4.718, Average Loss: 5.130, avg. samples / sec: 965.02
Iteration:   4360, Loss function: 5.056, Average Loss: 5.125, avg. samples / sec: 927.11
Iteration:   4380, Loss function: 5.185, Average Loss: 5.122, avg. samples / sec: 934.06
Iteration:   4400, Loss function: 4.773, Average Loss: 5.117, avg. samples / sec: 931.81
Iteration:   4420, Loss function: 4.806, Average Loss: 5.112, avg. samples / sec: 931.12
Iteration:   4440, Loss function: 5.034, Average Loss: 5.106, avg. samples / sec: 937.28
Iteration:   4460, Loss function: 5.081, Average Loss: 5.103, avg. samples / sec: 941.56
Iteration:   4480, Loss function: 4.861, Average Loss: 5.099, avg. samples / sec: 977.56
Iteration:   4500, Loss function: 4.900, Average Loss: 5.095, avg. samples / sec: 922.24
Iteration:   4520, Loss function: 4.759, Average Loss: 5.091, avg. samples / sec: 921.44
Iteration:   4540, Loss function: 5.030, Average Loss: 5.087, avg. samples / sec: 947.06
Iteration:   4560, Loss function: 4.750, Average Loss: 5.083, avg. samples / sec: 887.62
Iteration:   4580, Loss function: 4.857, Average Loss: 5.081, avg. samples / sec: 970.70
Iteration:   4600, Loss function: 4.801, Average Loss: 5.076, avg. samples / sec: 937.38
Iteration:   4620, Loss function: 4.836, Average Loss: 5.072, avg. samples / sec: 877.34
Iteration:   4640, Loss function: 4.665, Average Loss: 5.068, avg. samples / sec: 884.01
Iteration:   4660, Loss function: 4.713, Average Loss: 5.065, avg. samples / sec: 957.15
Iteration:   4680, Loss function: 5.131, Average Loss: 5.060, avg. samples / sec: 905.20
Iteration:   4700, Loss function: 4.716, Average Loss: 5.056, avg. samples / sec: 942.17
Iteration:   4720, Loss function: 4.862, Average Loss: 5.052, avg. samples / sec: 924.24
Iteration:   4740, Loss function: 4.765, Average Loss: 5.048, avg. samples / sec: 922.46
Iteration:   4760, Loss function: 4.710, Average Loss: 5.045, avg. samples / sec: 923.48
Iteration:   4780, Loss function: 5.101, Average Loss: 5.041, avg. samples / sec: 982.49
Iteration:   4800, Loss function: 4.986, Average Loss: 5.038, avg. samples / sec: 910.57
Iteration:   4820, Loss function: 4.688, Average Loss: 5.034, avg. samples / sec: 969.71
Iteration:   4840, Loss function: 5.085, Average Loss: 5.030, avg. samples / sec: 973.98
Iteration:   4860, Loss function: 4.604, Average Loss: 5.025, avg. samples / sec: 894.17
Iteration:   4880, Loss function: 5.142, Average Loss: 5.021, avg. samples / sec: 921.86
Iteration:   4900, Loss function: 4.654, Average Loss: 5.017, avg. samples / sec: 947.15
Iteration:   4920, Loss function: 4.824, Average Loss: 5.015, avg. samples / sec: 911.37
Iteration:   4940, Loss function: 4.787, Average Loss: 5.011, avg. samples / sec: 934.89
Iteration:   4960, Loss function: 4.712, Average Loss: 5.008, avg. samples / sec: 989.55
Iteration:   4980, Loss function: 4.561, Average Loss: 5.004, avg. samples / sec: 963.06
Iteration:   5000, Loss function: 4.875, Average Loss: 5.000, avg. samples / sec: 937.40
Iteration:   5020, Loss function: 4.981, Average Loss: 4.997, avg. samples / sec: 919.03
Iteration:   5040, Loss function: 4.808, Average Loss: 4.994, avg. samples / sec: 974.48
Iteration:   5060, Loss function: 4.778, Average Loss: 4.991, avg. samples / sec: 915.55
Iteration:   5080, Loss function: 4.722, Average Loss: 4.988, avg. samples / sec: 1002.57
Iteration:   5100, Loss function: 4.761, Average Loss: 4.985, avg. samples / sec: 940.98
Iteration:   5120, Loss function: 4.478, Average Loss: 4.982, avg. samples / sec: 956.91
Iteration:   5140, Loss function: 4.857, Average Loss: 4.978, avg. samples / sec: 995.49
:::MLLOG {"namespace": "", "time_ms": 1639068947284, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.10 s
:::MLLOG {"namespace": "", "time_ms": 1639068978474, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068978490, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068978490, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.01s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.940, Average Loss: 4.973, avg. samples / sec: 66.90
Iteration:   5180, Loss function: 4.746, Average Loss: 4.968, avg. samples / sec: 984.37
DONE (t=4.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10541
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21574
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09202
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19098
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20140
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21360
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21360
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10541 AP goal: 0.10000
Iteration:   5200, Loss function: 4.628, Average Loss: 4.964, avg. samples / sec: 1013.81
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10541430071336164, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985715, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:26 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:26 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068295769, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068295893, "event_type": "POINT_IN_TIME", "key": "seed", "value": 782477045, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 782477045
:::MLLOG {"namespace": "", "time_ms": 1639068297817, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068297817, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068297821, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068322848, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068322848, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068324321, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068324323, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068324719, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068324720, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068324721, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.136, Average Loss: 0.023, avg. samples / sec: 4.29
Iteration:     20, Loss function: 21.271, Average Loss: 0.460, avg. samples / sec: 849.01
Iteration:     40, Loss function: 20.791, Average Loss: 0.863, avg. samples / sec: 873.92
Iteration:     60, Loss function: 20.313, Average Loss: 1.252, avg. samples / sec: 915.19
Iteration:     80, Loss function: 19.982, Average Loss: 1.625, avg. samples / sec: 867.64
Iteration:    100, Loss function: 15.045, Average Loss: 1.946, avg. samples / sec: 903.56
Iteration:    120, Loss function: 11.943, Average Loss: 2.150, avg. samples / sec: 924.43
Iteration:    140, Loss function: 9.865, Average Loss: 2.319, avg. samples / sec: 931.14
Iteration:    160, Loss function: 9.458, Average Loss: 2.465, avg. samples / sec: 892.20
Iteration:    180, Loss function: 9.113, Average Loss: 2.599, avg. samples / sec: 866.99
Iteration:    200, Loss function: 8.753, Average Loss: 2.726, avg. samples / sec: 929.61
Iteration:    220, Loss function: 8.609, Average Loss: 2.848, avg. samples / sec: 871.01
Iteration:    240, Loss function: 8.835, Average Loss: 2.965, avg. samples / sec: 916.93
Iteration:    260, Loss function: 8.765, Average Loss: 3.080, avg. samples / sec: 956.80
Iteration:    280, Loss function: 8.446, Average Loss: 3.190, avg. samples / sec: 856.10
Iteration:    300, Loss function: 8.334, Average Loss: 3.294, avg. samples / sec: 941.80
Iteration:    320, Loss function: 8.688, Average Loss: 3.396, avg. samples / sec: 927.53
Iteration:    340, Loss function: 8.308, Average Loss: 3.497, avg. samples / sec: 949.45
Iteration:    360, Loss function: 8.256, Average Loss: 3.590, avg. samples / sec: 957.92
Iteration:    380, Loss function: 7.928, Average Loss: 3.681, avg. samples / sec: 927.53
Iteration:    400, Loss function: 8.049, Average Loss: 3.766, avg. samples / sec: 964.81
Iteration:    420, Loss function: 7.609, Average Loss: 3.847, avg. samples / sec: 953.99
Iteration:    440, Loss function: 7.904, Average Loss: 3.925, avg. samples / sec: 953.99
Iteration:    460, Loss function: 7.785, Average Loss: 4.003, avg. samples / sec: 709.08
Iteration:    480, Loss function: 7.552, Average Loss: 4.077, avg. samples / sec: 941.94
Iteration:    500, Loss function: 7.641, Average Loss: 4.147, avg. samples / sec: 906.27
Iteration:    520, Loss function: 7.565, Average Loss: 4.215, avg. samples / sec: 991.55
Iteration:    540, Loss function: 7.762, Average Loss: 4.280, avg. samples / sec: 958.59
Iteration:    560, Loss function: 7.355, Average Loss: 4.343, avg. samples / sec: 967.45
Iteration:    580, Loss function: 7.223, Average Loss: 4.404, avg. samples / sec: 974.79
Iteration:    600, Loss function: 7.319, Average Loss: 4.463, avg. samples / sec: 880.61
Iteration:    620, Loss function: 6.981, Average Loss: 4.519, avg. samples / sec: 935.65
Iteration:    640, Loss function: 6.947, Average Loss: 4.573, avg. samples / sec: 983.17
Iteration:    660, Loss function: 7.211, Average Loss: 4.626, avg. samples / sec: 972.52
Iteration:    680, Loss function: 7.124, Average Loss: 4.677, avg. samples / sec: 929.49
Iteration:    700, Loss function: 6.759, Average Loss: 4.724, avg. samples / sec: 927.34
Iteration:    720, Loss function: 6.935, Average Loss: 4.772, avg. samples / sec: 961.98
Iteration:    740, Loss function: 7.011, Average Loss: 4.817, avg. samples / sec: 938.61
Iteration:    760, Loss function: 7.165, Average Loss: 4.860, avg. samples / sec: 929.60
Iteration:    780, Loss function: 6.787, Average Loss: 4.902, avg. samples / sec: 966.07
Iteration:    800, Loss function: 7.184, Average Loss: 4.941, avg. samples / sec: 963.17
Iteration:    820, Loss function: 6.781, Average Loss: 4.979, avg. samples / sec: 907.67
Iteration:    840, Loss function: 6.827, Average Loss: 5.016, avg. samples / sec: 963.72
Iteration:    860, Loss function: 6.788, Average Loss: 5.050, avg. samples / sec: 925.45
Iteration:    880, Loss function: 6.792, Average Loss: 5.083, avg. samples / sec: 897.95
Iteration:    900, Loss function: 6.848, Average Loss: 5.115, avg. samples / sec: 922.92
Iteration:    920, Loss function: 6.589, Average Loss: 5.145, avg. samples / sec: 986.04
Iteration:    940, Loss function: 6.924, Average Loss: 5.175, avg. samples / sec: 987.00
Iteration:    960, Loss function: 6.315, Average Loss: 5.202, avg. samples / sec: 957.64
Iteration:    980, Loss function: 6.545, Average Loss: 5.228, avg. samples / sec: 979.83
Iteration:   1000, Loss function: 6.643, Average Loss: 5.253, avg. samples / sec: 980.49
Iteration:   1020, Loss function: 6.424, Average Loss: 5.276, avg. samples / sec: 848.40
:::MLLOG {"namespace": "", "time_ms": 1639068451554, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068451567, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.524, Average Loss: 5.299, avg. samples / sec: 907.30
Iteration:   1060, Loss function: 6.405, Average Loss: 5.322, avg. samples / sec: 962.62
Iteration:   1080, Loss function: 6.335, Average Loss: 5.343, avg. samples / sec: 988.64
Iteration:   1100, Loss function: 6.324, Average Loss: 5.363, avg. samples / sec: 963.98
Iteration:   1120, Loss function: 6.200, Average Loss: 5.382, avg. samples / sec: 990.61
Iteration:   1140, Loss function: 6.448, Average Loss: 5.400, avg. samples / sec: 973.79
Iteration:   1160, Loss function: 6.141, Average Loss: 5.417, avg. samples / sec: 948.01
Iteration:   1180, Loss function: 6.370, Average Loss: 5.433, avg. samples / sec: 949.80
Iteration:   1200, Loss function: 6.137, Average Loss: 5.449, avg. samples / sec: 970.76
Iteration:   1220, Loss function: 6.133, Average Loss: 5.463, avg. samples / sec: 953.39
Iteration:   1240, Loss function: 6.018, Average Loss: 5.475, avg. samples / sec: 926.48
Iteration:   1260, Loss function: 6.051, Average Loss: 5.487, avg. samples / sec: 870.49
Iteration:   1280, Loss function: 6.094, Average Loss: 5.498, avg. samples / sec: 920.63
Iteration:   1300, Loss function: 6.232, Average Loss: 5.511, avg. samples / sec: 899.91
Iteration:   1320, Loss function: 6.049, Average Loss: 5.522, avg. samples / sec: 967.39
Iteration:   1340, Loss function: 5.994, Average Loss: 5.531, avg. samples / sec: 969.03
Iteration:   1360, Loss function: 5.907, Average Loss: 5.541, avg. samples / sec: 988.83
Iteration:   1380, Loss function: 6.126, Average Loss: 5.551, avg. samples / sec: 960.92
Iteration:   1400, Loss function: 5.973, Average Loss: 5.559, avg. samples / sec: 907.99
Iteration:   1420, Loss function: 5.884, Average Loss: 5.567, avg. samples / sec: 981.94
Iteration:   1440, Loss function: 6.266, Average Loss: 5.576, avg. samples / sec: 924.17
Iteration:   1460, Loss function: 6.244, Average Loss: 5.583, avg. samples / sec: 961.99
Iteration:   1480, Loss function: 6.028, Average Loss: 5.592, avg. samples / sec: 993.07
Iteration:   1500, Loss function: 6.095, Average Loss: 5.601, avg. samples / sec: 870.09
Iteration:   1520, Loss function: 6.130, Average Loss: 5.606, avg. samples / sec: 917.16
Iteration:   1540, Loss function: 6.151, Average Loss: 5.611, avg. samples / sec: 893.16
Iteration:   1560, Loss function: 5.701, Average Loss: 5.616, avg. samples / sec: 883.73
Iteration:   1580, Loss function: 5.669, Average Loss: 5.621, avg. samples / sec: 905.26
Iteration:   1600, Loss function: 6.060, Average Loss: 5.626, avg. samples / sec: 939.93
Iteration:   1620, Loss function: 5.613, Average Loss: 5.631, avg. samples / sec: 919.06
Iteration:   1640, Loss function: 6.206, Average Loss: 5.634, avg. samples / sec: 975.45
Iteration:   1660, Loss function: 5.961, Average Loss: 5.639, avg. samples / sec: 944.28
Iteration:   1680, Loss function: 5.828, Average Loss: 5.643, avg. samples / sec: 987.82
Iteration:   1700, Loss function: 5.334, Average Loss: 5.646, avg. samples / sec: 917.53
Iteration:   1720, Loss function: 5.556, Average Loss: 5.647, avg. samples / sec: 949.27
Iteration:   1740, Loss function: 6.052, Average Loss: 5.649, avg. samples / sec: 933.81
Iteration:   1760, Loss function: 5.473, Average Loss: 5.650, avg. samples / sec: 990.38
Iteration:   1780, Loss function: 5.832, Average Loss: 5.651, avg. samples / sec: 923.58
Iteration:   1800, Loss function: 5.672, Average Loss: 5.652, avg. samples / sec: 984.19
Iteration:   1820, Loss function: 5.992, Average Loss: 5.653, avg. samples / sec: 935.50
Iteration:   1840, Loss function: 5.836, Average Loss: 5.653, avg. samples / sec: 982.17
Iteration:   1860, Loss function: 5.651, Average Loss: 5.653, avg. samples / sec: 971.32
Iteration:   1880, Loss function: 5.904, Average Loss: 5.655, avg. samples / sec: 948.72
Iteration:   1900, Loss function: 5.789, Average Loss: 5.656, avg. samples / sec: 977.88
Iteration:   1920, Loss function: 5.792, Average Loss: 5.656, avg. samples / sec: 979.90
Iteration:   1940, Loss function: 5.744, Average Loss: 5.656, avg. samples / sec: 969.17
Iteration:   1960, Loss function: 5.639, Average Loss: 5.655, avg. samples / sec: 955.92
Iteration:   1980, Loss function: 5.740, Average Loss: 5.653, avg. samples / sec: 946.01
Iteration:   2000, Loss function: 5.903, Average Loss: 5.654, avg. samples / sec: 984.19
Iteration:   2020, Loss function: 5.641, Average Loss: 5.653, avg. samples / sec: 917.19
Iteration:   2040, Loss function: 5.867, Average Loss: 5.653, avg. samples / sec: 872.02
:::MLLOG {"namespace": "", "time_ms": 1639068575749, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068575750, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.446, Average Loss: 5.651, avg. samples / sec: 916.99
Iteration:   2080, Loss function: 5.142, Average Loss: 5.649, avg. samples / sec: 953.74
Iteration:   2100, Loss function: 5.489, Average Loss: 5.647, avg. samples / sec: 989.98
Iteration:   2120, Loss function: 5.201, Average Loss: 5.644, avg. samples / sec: 976.37
Iteration:   2140, Loss function: 5.439, Average Loss: 5.640, avg. samples / sec: 892.44
Iteration:   2160, Loss function: 5.486, Average Loss: 5.637, avg. samples / sec: 983.58
Iteration:   2180, Loss function: 5.432, Average Loss: 5.636, avg. samples / sec: 983.38
Iteration:   2200, Loss function: 5.622, Average Loss: 5.631, avg. samples / sec: 986.97
Iteration:   2220, Loss function: 5.610, Average Loss: 5.629, avg. samples / sec: 951.03
Iteration:   2240, Loss function: 5.569, Average Loss: 5.626, avg. samples / sec: 950.14
Iteration:   2260, Loss function: 5.250, Average Loss: 5.622, avg. samples / sec: 979.12
Iteration:   2280, Loss function: 5.237, Average Loss: 5.619, avg. samples / sec: 947.32
Iteration:   2300, Loss function: 5.019, Average Loss: 5.616, avg. samples / sec: 971.26
Iteration:   2320, Loss function: 5.405, Average Loss: 5.613, avg. samples / sec: 974.78
Iteration:   2340, Loss function: 5.588, Average Loss: 5.610, avg. samples / sec: 950.25
Iteration:   2360, Loss function: 5.413, Average Loss: 5.605, avg. samples / sec: 967.20
Iteration:   2380, Loss function: 5.448, Average Loss: 5.601, avg. samples / sec: 951.52
Iteration:   2400, Loss function: 5.539, Average Loss: 5.597, avg. samples / sec: 916.43
Iteration:   2420, Loss function: 5.531, Average Loss: 5.593, avg. samples / sec: 920.75
Iteration:   2440, Loss function: 5.523, Average Loss: 5.590, avg. samples / sec: 948.24
Iteration:   2460, Loss function: 5.177, Average Loss: 5.586, avg. samples / sec: 895.39
Iteration:   2480, Loss function: 5.359, Average Loss: 5.583, avg. samples / sec: 912.45
Iteration:   2500, Loss function: 5.412, Average Loss: 5.579, avg. samples / sec: 825.59
Iteration:   2520, Loss function: 5.304, Average Loss: 5.574, avg. samples / sec: 966.53
Iteration:   2540, Loss function: 5.537, Average Loss: 5.571, avg. samples / sec: 956.16
Iteration:   2560, Loss function: 5.302, Average Loss: 5.567, avg. samples / sec: 950.54
Iteration:   2580, Loss function: 5.281, Average Loss: 5.563, avg. samples / sec: 905.01
Iteration:   2600, Loss function: 5.467, Average Loss: 5.560, avg. samples / sec: 872.41
Iteration:   2620, Loss function: 5.354, Average Loss: 5.554, avg. samples / sec: 987.89
Iteration:   2640, Loss function: 5.179, Average Loss: 5.551, avg. samples / sec: 916.34
Iteration:   2660, Loss function: 5.199, Average Loss: 5.547, avg. samples / sec: 990.71
Iteration:   2680, Loss function: 5.171, Average Loss: 5.542, avg. samples / sec: 889.42
Iteration:   2700, Loss function: 5.064, Average Loss: 5.537, avg. samples / sec: 917.24
Iteration:   2720, Loss function: 5.165, Average Loss: 5.533, avg. samples / sec: 961.65
Iteration:   2740, Loss function: 5.040, Average Loss: 5.528, avg. samples / sec: 982.81
Iteration:   2760, Loss function: 5.013, Average Loss: 5.523, avg. samples / sec: 966.09
Iteration:   2780, Loss function: 5.495, Average Loss: 5.520, avg. samples / sec: 953.76
Iteration:   2800, Loss function: 5.450, Average Loss: 5.516, avg. samples / sec: 866.91
Iteration:   2820, Loss function: 5.386, Average Loss: 5.511, avg. samples / sec: 876.60
Iteration:   2840, Loss function: 5.216, Average Loss: 5.506, avg. samples / sec: 989.47
Iteration:   2860, Loss function: 5.106, Average Loss: 5.502, avg. samples / sec: 982.14
Iteration:   2880, Loss function: 5.122, Average Loss: 5.497, avg. samples / sec: 980.38
Iteration:   2900, Loss function: 5.220, Average Loss: 5.493, avg. samples / sec: 988.99
Iteration:   2920, Loss function: 5.356, Average Loss: 5.488, avg. samples / sec: 932.78
Iteration:   2940, Loss function: 5.096, Average Loss: 5.484, avg. samples / sec: 870.37
Iteration:   2960, Loss function: 5.404, Average Loss: 5.480, avg. samples / sec: 893.74
Iteration:   2980, Loss function: 5.190, Average Loss: 5.476, avg. samples / sec: 896.13
Iteration:   3000, Loss function: 5.252, Average Loss: 5.471, avg. samples / sec: 925.68
Iteration:   3020, Loss function: 5.219, Average Loss: 5.464, avg. samples / sec: 970.45
Iteration:   3040, Loss function: 5.147, Average Loss: 5.458, avg. samples / sec: 980.62
Iteration:   3060, Loss function: 5.035, Average Loss: 5.452, avg. samples / sec: 981.62
Iteration:   3080, Loss function: 4.770, Average Loss: 5.446, avg. samples / sec: 964.72
:::MLLOG {"namespace": "", "time_ms": 1639068700114, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068700116, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.201, Average Loss: 5.441, avg. samples / sec: 948.76
Iteration:   3120, Loss function: 5.071, Average Loss: 5.435, avg. samples / sec: 956.96
Iteration:   3140, Loss function: 4.984, Average Loss: 5.430, avg. samples / sec: 968.70
Iteration:   3160, Loss function: 5.489, Average Loss: 5.425, avg. samples / sec: 924.04
Iteration:   3180, Loss function: 4.973, Average Loss: 5.420, avg. samples / sec: 979.28
Iteration:   3200, Loss function: 5.284, Average Loss: 5.415, avg. samples / sec: 994.89
Iteration:   3220, Loss function: 5.007, Average Loss: 5.409, avg. samples / sec: 973.28
Iteration:   3240, Loss function: 5.240, Average Loss: 5.404, avg. samples / sec: 978.98
Iteration:   3260, Loss function: 5.057, Average Loss: 5.399, avg. samples / sec: 904.94
Iteration:   3280, Loss function: 4.910, Average Loss: 5.393, avg. samples / sec: 922.35
Iteration:   3300, Loss function: 4.775, Average Loss: 5.388, avg. samples / sec: 960.51
Iteration:   3320, Loss function: 4.991, Average Loss: 5.382, avg. samples / sec: 986.84
Iteration:   3340, Loss function: 5.113, Average Loss: 5.378, avg. samples / sec: 976.54
Iteration:   3360, Loss function: 5.107, Average Loss: 5.370, avg. samples / sec: 985.69
Iteration:   3380, Loss function: 5.298, Average Loss: 5.362, avg. samples / sec: 937.32
Iteration:   3400, Loss function: 4.776, Average Loss: 5.357, avg. samples / sec: 979.85
Iteration:   3420, Loss function: 5.217, Average Loss: 5.352, avg. samples / sec: 969.55
Iteration:   3440, Loss function: 4.854, Average Loss: 5.348, avg. samples / sec: 932.97
Iteration:   3460, Loss function: 5.159, Average Loss: 5.343, avg. samples / sec: 933.41
Iteration:   3480, Loss function: 5.310, Average Loss: 5.338, avg. samples / sec: 977.58
Iteration:   3500, Loss function: 5.128, Average Loss: 5.333, avg. samples / sec: 978.60
Iteration:   3520, Loss function: 4.835, Average Loss: 5.329, avg. samples / sec: 996.22
Iteration:   3540, Loss function: 4.861, Average Loss: 5.323, avg. samples / sec: 968.88
Iteration:   3560, Loss function: 4.949, Average Loss: 5.320, avg. samples / sec: 983.06
Iteration:   3580, Loss function: 4.992, Average Loss: 5.316, avg. samples / sec: 987.25
Iteration:   3600, Loss function: 5.193, Average Loss: 5.310, avg. samples / sec: 984.63
Iteration:   3620, Loss function: 4.969, Average Loss: 5.304, avg. samples / sec: 961.59
Iteration:   3640, Loss function: 4.784, Average Loss: 5.299, avg. samples / sec: 971.51
Iteration:   3660, Loss function: 5.295, Average Loss: 5.294, avg. samples / sec: 945.12
Iteration:   3680, Loss function: 5.108, Average Loss: 5.289, avg. samples / sec: 985.35
Iteration:   3700, Loss function: 5.141, Average Loss: 5.285, avg. samples / sec: 988.59
Iteration:   3720, Loss function: 4.890, Average Loss: 5.279, avg. samples / sec: 979.12
Iteration:   3740, Loss function: 5.324, Average Loss: 5.275, avg. samples / sec: 974.07
Iteration:   3760, Loss function: 4.965, Average Loss: 5.271, avg. samples / sec: 913.74
Iteration:   3780, Loss function: 4.928, Average Loss: 5.266, avg. samples / sec: 972.30
Iteration:   3800, Loss function: 5.125, Average Loss: 5.262, avg. samples / sec: 857.03
Iteration:   3820, Loss function: 5.154, Average Loss: 5.257, avg. samples / sec: 957.12
Iteration:   3840, Loss function: 4.605, Average Loss: 5.252, avg. samples / sec: 942.51
Iteration:   3860, Loss function: 4.891, Average Loss: 5.247, avg. samples / sec: 953.88
Iteration:   3880, Loss function: 5.051, Average Loss: 5.241, avg. samples / sec: 974.02
Iteration:   3900, Loss function: 5.074, Average Loss: 5.236, avg. samples / sec: 934.41
Iteration:   3920, Loss function: 5.344, Average Loss: 5.230, avg. samples / sec: 979.69
Iteration:   3940, Loss function: 5.072, Average Loss: 5.224, avg. samples / sec: 992.16
Iteration:   3960, Loss function: 4.984, Average Loss: 5.220, avg. samples / sec: 968.24
Iteration:   3980, Loss function: 4.945, Average Loss: 5.216, avg. samples / sec: 966.74
Iteration:   4000, Loss function: 5.098, Average Loss: 5.212, avg. samples / sec: 942.56
Iteration:   4020, Loss function: 4.864, Average Loss: 5.207, avg. samples / sec: 924.86
Iteration:   4040, Loss function: 5.181, Average Loss: 5.203, avg. samples / sec: 942.10
Iteration:   4060, Loss function: 5.301, Average Loss: 5.200, avg. samples / sec: 973.30
Iteration:   4080, Loss function: 4.950, Average Loss: 5.195, avg. samples / sec: 937.93
Iteration:   4100, Loss function: 5.073, Average Loss: 5.192, avg. samples / sec: 934.75
:::MLLOG {"namespace": "", "time_ms": 1639068822452, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068822454, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.187, avg. samples / sec: 948.53
Iteration:   4140, Loss function: 5.034, Average Loss: 5.182, avg. samples / sec: 961.38
Iteration:   4160, Loss function: 5.041, Average Loss: 5.176, avg. samples / sec: 974.23
Iteration:   4180, Loss function: 4.983, Average Loss: 5.170, avg. samples / sec: 944.52
Iteration:   4200, Loss function: 4.651, Average Loss: 5.166, avg. samples / sec: 945.06
Iteration:   4220, Loss function: 4.784, Average Loss: 5.160, avg. samples / sec: 934.01
Iteration:   4240, Loss function: 4.986, Average Loss: 5.155, avg. samples / sec: 964.95
Iteration:   4260, Loss function: 5.021, Average Loss: 5.151, avg. samples / sec: 968.77
Iteration:   4280, Loss function: 4.961, Average Loss: 5.146, avg. samples / sec: 923.88
Iteration:   4300, Loss function: 4.903, Average Loss: 5.140, avg. samples / sec: 931.33
Iteration:   4320, Loss function: 4.754, Average Loss: 5.136, avg. samples / sec: 911.09
Iteration:   4340, Loss function: 4.718, Average Loss: 5.130, avg. samples / sec: 965.02
Iteration:   4360, Loss function: 5.056, Average Loss: 5.125, avg. samples / sec: 927.11
Iteration:   4380, Loss function: 5.185, Average Loss: 5.122, avg. samples / sec: 934.06
Iteration:   4400, Loss function: 4.773, Average Loss: 5.117, avg. samples / sec: 931.81
Iteration:   4420, Loss function: 4.806, Average Loss: 5.112, avg. samples / sec: 931.12
Iteration:   4440, Loss function: 5.034, Average Loss: 5.106, avg. samples / sec: 937.28
Iteration:   4460, Loss function: 5.081, Average Loss: 5.103, avg. samples / sec: 941.56
Iteration:   4480, Loss function: 4.861, Average Loss: 5.099, avg. samples / sec: 977.56
Iteration:   4500, Loss function: 4.900, Average Loss: 5.095, avg. samples / sec: 922.24
Iteration:   4520, Loss function: 4.759, Average Loss: 5.091, avg. samples / sec: 921.44
Iteration:   4540, Loss function: 5.030, Average Loss: 5.087, avg. samples / sec: 947.06
Iteration:   4560, Loss function: 4.750, Average Loss: 5.083, avg. samples / sec: 887.62
Iteration:   4580, Loss function: 4.857, Average Loss: 5.081, avg. samples / sec: 970.70
Iteration:   4600, Loss function: 4.801, Average Loss: 5.076, avg. samples / sec: 937.38
Iteration:   4620, Loss function: 4.836, Average Loss: 5.072, avg. samples / sec: 877.34
Iteration:   4640, Loss function: 4.665, Average Loss: 5.068, avg. samples / sec: 884.01
Iteration:   4660, Loss function: 4.713, Average Loss: 5.065, avg. samples / sec: 957.15
Iteration:   4680, Loss function: 5.131, Average Loss: 5.060, avg. samples / sec: 905.20
Iteration:   4700, Loss function: 4.716, Average Loss: 5.056, avg. samples / sec: 942.17
Iteration:   4720, Loss function: 4.862, Average Loss: 5.052, avg. samples / sec: 924.24
Iteration:   4740, Loss function: 4.765, Average Loss: 5.048, avg. samples / sec: 922.46
Iteration:   4760, Loss function: 4.710, Average Loss: 5.045, avg. samples / sec: 923.48
Iteration:   4780, Loss function: 5.101, Average Loss: 5.041, avg. samples / sec: 982.49
Iteration:   4800, Loss function: 4.986, Average Loss: 5.038, avg. samples / sec: 910.57
Iteration:   4820, Loss function: 4.688, Average Loss: 5.034, avg. samples / sec: 969.71
Iteration:   4840, Loss function: 5.085, Average Loss: 5.030, avg. samples / sec: 973.98
Iteration:   4860, Loss function: 4.604, Average Loss: 5.025, avg. samples / sec: 894.17
Iteration:   4880, Loss function: 5.142, Average Loss: 5.021, avg. samples / sec: 921.86
Iteration:   4900, Loss function: 4.654, Average Loss: 5.017, avg. samples / sec: 947.15
Iteration:   4920, Loss function: 4.824, Average Loss: 5.015, avg. samples / sec: 911.37
Iteration:   4940, Loss function: 4.787, Average Loss: 5.011, avg. samples / sec: 934.89
Iteration:   4960, Loss function: 4.712, Average Loss: 5.008, avg. samples / sec: 989.55
Iteration:   4980, Loss function: 4.561, Average Loss: 5.004, avg. samples / sec: 963.06
Iteration:   5000, Loss function: 4.875, Average Loss: 5.000, avg. samples / sec: 937.40
Iteration:   5020, Loss function: 4.981, Average Loss: 4.997, avg. samples / sec: 919.03
Iteration:   5040, Loss function: 4.808, Average Loss: 4.994, avg. samples / sec: 974.48
Iteration:   5060, Loss function: 4.778, Average Loss: 4.991, avg. samples / sec: 915.55
Iteration:   5080, Loss function: 4.722, Average Loss: 4.988, avg. samples / sec: 1002.57
Iteration:   5100, Loss function: 4.761, Average Loss: 4.985, avg. samples / sec: 940.98
Iteration:   5120, Loss function: 4.478, Average Loss: 4.982, avg. samples / sec: 956.91
Iteration:   5140, Loss function: 4.857, Average Loss: 4.978, avg. samples / sec: 995.49
:::MLLOG {"namespace": "", "time_ms": 1639068947284, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.10 s
:::MLLOG {"namespace": "", "time_ms": 1639068978474, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068978490, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068978490, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.01s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.940, Average Loss: 4.973, avg. samples / sec: 66.90
Iteration:   5180, Loss function: 4.746, Average Loss: 4.968, avg. samples / sec: 984.37
DONE (t=4.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10541
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21574
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09202
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19098
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20140
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21360
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21360
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10541 AP goal: 0.10000
Iteration:   5200, Loss function: 4.628, Average Loss: 4.964, avg. samples / sec: 1013.81
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10541430071336164, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985578, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068985715, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068986
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:26 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:48 PM'
START TIMING RUN WAS 2021-12-09 04:44:48 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:26 PM'
ENDING TIMING RUN AT 2021-12-09 04:56:26 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ result=698
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,698,nvidia,2021-12-09 04:44:48 PM'
RESULT,SINGLE_STAGE_DETECTOR,,698,nvidia,2021-12-09 04:44:48 PM
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
