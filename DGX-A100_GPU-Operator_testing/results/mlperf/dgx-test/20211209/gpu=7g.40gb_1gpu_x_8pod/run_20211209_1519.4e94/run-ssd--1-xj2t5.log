+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-xj2t5.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-xj2t5.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-xj2t5.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e'
Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639068291
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 04:44:51 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 04:44:51 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 04:44:51 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_11-43-43 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\1\-\4\3\-\4\3 ]]
+ set +x
Thu Dec  9 16:44:51 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-xj2t5 to the sync file ...
Thu Dec  9 16:44:51 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068293053, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068293168, "event_type": "POINT_IN_TIME", "key": "seed", "value": 164823640, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 164823640
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639068294696, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068294696, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068318887, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068318888, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639068321288, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068321289, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068321520, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068321521, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068321522, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.131, Average Loss: 0.023, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.244, Average Loss: 0.459, avg. samples / sec: 910.96
Iteration:     40, Loss function: 20.775, Average Loss: 0.862, avg. samples / sec: 934.47
Iteration:     60, Loss function: 20.409, Average Loss: 1.252, avg. samples / sec: 962.69
Iteration:     80, Loss function: 19.779, Average Loss: 1.624, avg. samples / sec: 930.20
Iteration:    100, Loss function: 15.102, Average Loss: 1.944, avg. samples / sec: 920.32
Iteration:    120, Loss function: 10.978, Average Loss: 2.146, avg. samples / sec: 948.80
Iteration:    140, Loss function: 9.741, Average Loss: 2.307, avg. samples / sec: 930.26
Iteration:    160, Loss function: 9.203, Average Loss: 2.447, avg. samples / sec: 894.47
Iteration:    180, Loss function: 8.849, Average Loss: 2.576, avg. samples / sec: 965.13
Iteration:    200, Loss function: 8.665, Average Loss: 2.702, avg. samples / sec: 960.48
Iteration:    220, Loss function: 8.544, Average Loss: 2.822, avg. samples / sec: 963.83
Iteration:    240, Loss function: 8.554, Average Loss: 2.938, avg. samples / sec: 882.29
Iteration:    260, Loss function: 8.753, Average Loss: 3.054, avg. samples / sec: 962.70
Iteration:    280, Loss function: 8.618, Average Loss: 3.165, avg. samples / sec: 911.89
Iteration:    300, Loss function: 8.313, Average Loss: 3.269, avg. samples / sec: 943.17
Iteration:    320, Loss function: 8.450, Average Loss: 3.370, avg. samples / sec: 941.50
Iteration:    340, Loss function: 8.608, Average Loss: 3.470, avg. samples / sec: 946.80
Iteration:    360, Loss function: 8.088, Average Loss: 3.566, avg. samples / sec: 912.03
Iteration:    380, Loss function: 8.064, Average Loss: 3.657, avg. samples / sec: 911.52
Iteration:    400, Loss function: 7.924, Average Loss: 3.741, avg. samples / sec: 935.40
Iteration:    420, Loss function: 7.822, Average Loss: 3.824, avg. samples / sec: 980.95
Iteration:    440, Loss function: 7.816, Average Loss: 3.904, avg. samples / sec: 911.22
Iteration:    460, Loss function: 7.783, Average Loss: 3.982, avg. samples / sec: 967.45
Iteration:    480, Loss function: 7.588, Average Loss: 4.055, avg. samples / sec: 944.42
Iteration:    500, Loss function: 7.719, Average Loss: 4.127, avg. samples / sec: 707.80
Iteration:    520, Loss function: 7.633, Average Loss: 4.198, avg. samples / sec: 972.91
Iteration:    540, Loss function: 7.567, Average Loss: 4.263, avg. samples / sec: 931.60
Iteration:    560, Loss function: 7.352, Average Loss: 4.327, avg. samples / sec: 837.42
Iteration:    580, Loss function: 7.077, Average Loss: 4.389, avg. samples / sec: 953.39
Iteration:    600, Loss function: 7.455, Average Loss: 4.449, avg. samples / sec: 907.00
Iteration:    620, Loss function: 7.111, Average Loss: 4.505, avg. samples / sec: 957.05
Iteration:    640, Loss function: 6.861, Average Loss: 4.559, avg. samples / sec: 960.92
Iteration:    660, Loss function: 7.153, Average Loss: 4.612, avg. samples / sec: 990.43
Iteration:    680, Loss function: 7.259, Average Loss: 4.664, avg. samples / sec: 944.80
Iteration:    700, Loss function: 6.906, Average Loss: 4.712, avg. samples / sec: 882.14
Iteration:    720, Loss function: 7.021, Average Loss: 4.761, avg. samples / sec: 940.95
Iteration:    740, Loss function: 6.955, Average Loss: 4.807, avg. samples / sec: 963.80
Iteration:    760, Loss function: 7.026, Average Loss: 4.851, avg. samples / sec: 975.09
Iteration:    780, Loss function: 6.888, Average Loss: 4.893, avg. samples / sec: 962.77
Iteration:    800, Loss function: 7.094, Average Loss: 4.932, avg. samples / sec: 905.45
Iteration:    820, Loss function: 6.971, Average Loss: 4.970, avg. samples / sec: 975.52
Iteration:    840, Loss function: 6.649, Average Loss: 5.006, avg. samples / sec: 919.76
Iteration:    860, Loss function: 6.675, Average Loss: 5.041, avg. samples / sec: 957.77
Iteration:    880, Loss function: 6.789, Average Loss: 5.074, avg. samples / sec: 884.02
Iteration:    900, Loss function: 6.980, Average Loss: 5.106, avg. samples / sec: 982.04
Iteration:    920, Loss function: 6.622, Average Loss: 5.134, avg. samples / sec: 985.33
Iteration:    940, Loss function: 6.909, Average Loss: 5.164, avg. samples / sec: 965.25
Iteration:    960, Loss function: 6.405, Average Loss: 5.193, avg. samples / sec: 919.36
Iteration:    980, Loss function: 6.546, Average Loss: 5.220, avg. samples / sec: 948.31
Iteration:   1000, Loss function: 6.697, Average Loss: 5.246, avg. samples / sec: 918.24
Iteration:   1020, Loss function: 6.478, Average Loss: 5.272, avg. samples / sec: 992.93
:::MLLOG {"namespace": "", "time_ms": 1639068447147, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068447150, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.449, Average Loss: 5.296, avg. samples / sec: 995.92
Iteration:   1060, Loss function: 6.315, Average Loss: 5.320, avg. samples / sec: 974.03
Iteration:   1080, Loss function: 6.294, Average Loss: 5.342, avg. samples / sec: 1000.19
Iteration:   1100, Loss function: 6.141, Average Loss: 5.361, avg. samples / sec: 939.96
Iteration:   1120, Loss function: 6.280, Average Loss: 5.381, avg. samples / sec: 973.59
Iteration:   1140, Loss function: 6.502, Average Loss: 5.399, avg. samples / sec: 919.75
Iteration:   1160, Loss function: 6.320, Average Loss: 5.417, avg. samples / sec: 959.61
Iteration:   1180, Loss function: 6.240, Average Loss: 5.434, avg. samples / sec: 921.78
Iteration:   1200, Loss function: 6.384, Average Loss: 5.450, avg. samples / sec: 952.97
Iteration:   1220, Loss function: 6.238, Average Loss: 5.464, avg. samples / sec: 929.58
Iteration:   1240, Loss function: 6.071, Average Loss: 5.477, avg. samples / sec: 932.95
Iteration:   1260, Loss function: 6.143, Average Loss: 5.489, avg. samples / sec: 960.07
Iteration:   1280, Loss function: 5.907, Average Loss: 5.501, avg. samples / sec: 884.92
Iteration:   1300, Loss function: 6.033, Average Loss: 5.514, avg. samples / sec: 1002.68
Iteration:   1320, Loss function: 6.084, Average Loss: 5.526, avg. samples / sec: 978.18
Iteration:   1340, Loss function: 5.827, Average Loss: 5.535, avg. samples / sec: 966.22
Iteration:   1360, Loss function: 6.070, Average Loss: 5.546, avg. samples / sec: 957.48
Iteration:   1380, Loss function: 6.035, Average Loss: 5.556, avg. samples / sec: 972.62
Iteration:   1400, Loss function: 6.170, Average Loss: 5.564, avg. samples / sec: 949.11
Iteration:   1420, Loss function: 5.935, Average Loss: 5.572, avg. samples / sec: 997.11
Iteration:   1440, Loss function: 6.253, Average Loss: 5.579, avg. samples / sec: 985.74
Iteration:   1460, Loss function: 6.068, Average Loss: 5.587, avg. samples / sec: 956.17
Iteration:   1480, Loss function: 5.976, Average Loss: 5.595, avg. samples / sec: 954.41
Iteration:   1500, Loss function: 5.931, Average Loss: 5.602, avg. samples / sec: 974.04
Iteration:   1520, Loss function: 6.034, Average Loss: 5.608, avg. samples / sec: 985.32
Iteration:   1540, Loss function: 5.985, Average Loss: 5.612, avg. samples / sec: 981.05
Iteration:   1560, Loss function: 5.671, Average Loss: 5.616, avg. samples / sec: 917.05
Iteration:   1580, Loss function: 5.614, Average Loss: 5.621, avg. samples / sec: 976.96
Iteration:   1600, Loss function: 6.187, Average Loss: 5.628, avg. samples / sec: 995.04
Iteration:   1620, Loss function: 5.943, Average Loss: 5.634, avg. samples / sec: 943.39
Iteration:   1640, Loss function: 5.716, Average Loss: 5.636, avg. samples / sec: 866.50
Iteration:   1660, Loss function: 5.911, Average Loss: 5.641, avg. samples / sec: 894.12
Iteration:   1680, Loss function: 5.669, Average Loss: 5.642, avg. samples / sec: 926.79
Iteration:   1700, Loss function: 5.474, Average Loss: 5.646, avg. samples / sec: 995.22
Iteration:   1720, Loss function: 5.655, Average Loss: 5.646, avg. samples / sec: 938.53
Iteration:   1740, Loss function: 5.967, Average Loss: 5.649, avg. samples / sec: 984.37
Iteration:   1760, Loss function: 5.405, Average Loss: 5.651, avg. samples / sec: 959.98
Iteration:   1780, Loss function: 5.798, Average Loss: 5.652, avg. samples / sec: 889.63
Iteration:   1800, Loss function: 5.833, Average Loss: 5.655, avg. samples / sec: 950.38
Iteration:   1820, Loss function: 6.003, Average Loss: 5.656, avg. samples / sec: 985.25
Iteration:   1840, Loss function: 5.936, Average Loss: 5.657, avg. samples / sec: 960.19
Iteration:   1860, Loss function: 5.584, Average Loss: 5.656, avg. samples / sec: 917.43
Iteration:   1880, Loss function: 5.976, Average Loss: 5.658, avg. samples / sec: 941.83
Iteration:   1900, Loss function: 5.899, Average Loss: 5.659, avg. samples / sec: 966.13
Iteration:   1920, Loss function: 5.719, Average Loss: 5.657, avg. samples / sec: 996.22
Iteration:   1940, Loss function: 5.881, Average Loss: 5.657, avg. samples / sec: 979.14
Iteration:   1960, Loss function: 5.604, Average Loss: 5.655, avg. samples / sec: 890.55
Iteration:   1980, Loss function: 5.734, Average Loss: 5.655, avg. samples / sec: 963.30
Iteration:   2000, Loss function: 5.605, Average Loss: 5.653, avg. samples / sec: 933.41
Iteration:   2020, Loss function: 5.656, Average Loss: 5.652, avg. samples / sec: 968.50
Iteration:   2040, Loss function: 5.701, Average Loss: 5.652, avg. samples / sec: 821.56
:::MLLOG {"namespace": "", "time_ms": 1639068570591, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068570592, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.562, Average Loss: 5.650, avg. samples / sec: 941.02
Iteration:   2080, Loss function: 5.158, Average Loss: 5.648, avg. samples / sec: 885.89
Iteration:   2100, Loss function: 5.619, Average Loss: 5.645, avg. samples / sec: 914.58
Iteration:   2120, Loss function: 5.189, Average Loss: 5.641, avg. samples / sec: 956.32
Iteration:   2140, Loss function: 5.290, Average Loss: 5.638, avg. samples / sec: 952.76
Iteration:   2160, Loss function: 5.249, Average Loss: 5.635, avg. samples / sec: 991.50
Iteration:   2180, Loss function: 5.329, Average Loss: 5.633, avg. samples / sec: 923.01
Iteration:   2200, Loss function: 5.449, Average Loss: 5.629, avg. samples / sec: 870.85
Iteration:   2220, Loss function: 5.805, Average Loss: 5.627, avg. samples / sec: 964.41
Iteration:   2240, Loss function: 5.579, Average Loss: 5.624, avg. samples / sec: 958.55
Iteration:   2260, Loss function: 5.336, Average Loss: 5.621, avg. samples / sec: 962.27
Iteration:   2280, Loss function: 5.204, Average Loss: 5.618, avg. samples / sec: 971.18
Iteration:   2300, Loss function: 5.174, Average Loss: 5.615, avg. samples / sec: 994.10
Iteration:   2320, Loss function: 5.337, Average Loss: 5.613, avg. samples / sec: 972.40
Iteration:   2340, Loss function: 5.501, Average Loss: 5.609, avg. samples / sec: 978.27
Iteration:   2360, Loss function: 5.397, Average Loss: 5.605, avg. samples / sec: 985.39
Iteration:   2380, Loss function: 5.406, Average Loss: 5.601, avg. samples / sec: 966.55
Iteration:   2400, Loss function: 5.563, Average Loss: 5.597, avg. samples / sec: 868.12
Iteration:   2420, Loss function: 5.388, Average Loss: 5.593, avg. samples / sec: 960.30
Iteration:   2440, Loss function: 5.556, Average Loss: 5.589, avg. samples / sec: 965.53
Iteration:   2460, Loss function: 5.241, Average Loss: 5.585, avg. samples / sec: 975.88
Iteration:   2480, Loss function: 5.497, Average Loss: 5.581, avg. samples / sec: 971.17
Iteration:   2500, Loss function: 5.545, Average Loss: 5.577, avg. samples / sec: 916.08
Iteration:   2520, Loss function: 5.322, Average Loss: 5.571, avg. samples / sec: 935.59
Iteration:   2540, Loss function: 5.318, Average Loss: 5.568, avg. samples / sec: 978.14
Iteration:   2560, Loss function: 5.194, Average Loss: 5.564, avg. samples / sec: 842.80
Iteration:   2580, Loss function: 5.403, Average Loss: 5.560, avg. samples / sec: 913.63
Iteration:   2600, Loss function: 5.344, Average Loss: 5.557, avg. samples / sec: 959.37
Iteration:   2620, Loss function: 5.409, Average Loss: 5.552, avg. samples / sec: 978.02
Iteration:   2640, Loss function: 5.145, Average Loss: 5.549, avg. samples / sec: 972.02
Iteration:   2660, Loss function: 5.280, Average Loss: 5.545, avg. samples / sec: 979.79
Iteration:   2680, Loss function: 5.126, Average Loss: 5.542, avg. samples / sec: 994.56
Iteration:   2700, Loss function: 5.309, Average Loss: 5.537, avg. samples / sec: 873.67
Iteration:   2720, Loss function: 5.279, Average Loss: 5.533, avg. samples / sec: 948.45
Iteration:   2740, Loss function: 5.096, Average Loss: 5.529, avg. samples / sec: 981.26
Iteration:   2760, Loss function: 5.019, Average Loss: 5.525, avg. samples / sec: 979.12
Iteration:   2780, Loss function: 5.501, Average Loss: 5.521, avg. samples / sec: 980.38
Iteration:   2800, Loss function: 5.242, Average Loss: 5.516, avg. samples / sec: 935.73
Iteration:   2820, Loss function: 5.329, Average Loss: 5.511, avg. samples / sec: 883.93
Iteration:   2840, Loss function: 5.324, Average Loss: 5.507, avg. samples / sec: 975.12
Iteration:   2860, Loss function: 5.088, Average Loss: 5.502, avg. samples / sec: 979.98
Iteration:   2880, Loss function: 5.391, Average Loss: 5.498, avg. samples / sec: 988.48
Iteration:   2900, Loss function: 5.116, Average Loss: 5.494, avg. samples / sec: 981.39
Iteration:   2920, Loss function: 5.125, Average Loss: 5.488, avg. samples / sec: 978.23
Iteration:   2940, Loss function: 5.127, Average Loss: 5.483, avg. samples / sec: 859.29
Iteration:   2960, Loss function: 5.262, Average Loss: 5.479, avg. samples / sec: 916.92
Iteration:   2980, Loss function: 5.165, Average Loss: 5.475, avg. samples / sec: 985.95
Iteration:   3000, Loss function: 5.407, Average Loss: 5.470, avg. samples / sec: 979.60
Iteration:   3020, Loss function: 5.172, Average Loss: 5.464, avg. samples / sec: 1000.22
Iteration:   3040, Loss function: 5.296, Average Loss: 5.458, avg. samples / sec: 914.80
Iteration:   3060, Loss function: 5.167, Average Loss: 5.452, avg. samples / sec: 894.99
Iteration:   3080, Loss function: 4.901, Average Loss: 5.447, avg. samples / sec: 980.91
:::MLLOG {"namespace": "", "time_ms": 1639068694140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068694145, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.195, Average Loss: 5.442, avg. samples / sec: 996.73
Iteration:   3120, Loss function: 5.078, Average Loss: 5.436, avg. samples / sec: 965.80
Iteration:   3140, Loss function: 5.095, Average Loss: 5.432, avg. samples / sec: 981.56
Iteration:   3160, Loss function: 5.524, Average Loss: 5.426, avg. samples / sec: 965.89
Iteration:   3180, Loss function: 4.923, Average Loss: 5.420, avg. samples / sec: 942.09
Iteration:   3200, Loss function: 5.088, Average Loss: 5.415, avg. samples / sec: 927.89
Iteration:   3220, Loss function: 5.226, Average Loss: 5.410, avg. samples / sec: 971.01
Iteration:   3240, Loss function: 5.133, Average Loss: 5.404, avg. samples / sec: 972.23
Iteration:   3260, Loss function: 4.977, Average Loss: 5.398, avg. samples / sec: 983.35
Iteration:   3280, Loss function: 4.721, Average Loss: 5.391, avg. samples / sec: 890.28
Iteration:   3300, Loss function: 4.794, Average Loss: 5.385, avg. samples / sec: 937.58
Iteration:   3320, Loss function: 5.014, Average Loss: 5.380, avg. samples / sec: 982.19
Iteration:   3340, Loss function: 5.108, Average Loss: 5.375, avg. samples / sec: 965.48
Iteration:   3360, Loss function: 5.159, Average Loss: 5.368, avg. samples / sec: 983.98
Iteration:   3380, Loss function: 5.086, Average Loss: 5.361, avg. samples / sec: 938.52
Iteration:   3400, Loss function: 4.853, Average Loss: 5.356, avg. samples / sec: 903.00
Iteration:   3420, Loss function: 5.217, Average Loss: 5.352, avg. samples / sec: 968.06
Iteration:   3440, Loss function: 4.854, Average Loss: 5.348, avg. samples / sec: 977.12
Iteration:   3460, Loss function: 5.231, Average Loss: 5.343, avg. samples / sec: 986.66
Iteration:   3480, Loss function: 5.307, Average Loss: 5.339, avg. samples / sec: 986.86
Iteration:   3500, Loss function: 5.284, Average Loss: 5.334, avg. samples / sec: 978.29
Iteration:   3520, Loss function: 5.011, Average Loss: 5.330, avg. samples / sec: 981.04
Iteration:   3540, Loss function: 4.908, Average Loss: 5.325, avg. samples / sec: 978.24
Iteration:   3560, Loss function: 4.791, Average Loss: 5.321, avg. samples / sec: 972.35
Iteration:   3580, Loss function: 4.968, Average Loss: 5.316, avg. samples / sec: 972.36
Iteration:   3600, Loss function: 5.188, Average Loss: 5.310, avg. samples / sec: 995.94
Iteration:   3620, Loss function: 4.899, Average Loss: 5.305, avg. samples / sec: 996.28
Iteration:   3640, Loss function: 4.790, Average Loss: 5.299, avg. samples / sec: 969.54
Iteration:   3660, Loss function: 5.111, Average Loss: 5.293, avg. samples / sec: 970.17
Iteration:   3680, Loss function: 5.149, Average Loss: 5.288, avg. samples / sec: 989.54
Iteration:   3700, Loss function: 5.041, Average Loss: 5.283, avg. samples / sec: 917.20
Iteration:   3720, Loss function: 4.904, Average Loss: 5.277, avg. samples / sec: 841.32
Iteration:   3740, Loss function: 5.200, Average Loss: 5.273, avg. samples / sec: 945.82
Iteration:   3760, Loss function: 5.076, Average Loss: 5.269, avg. samples / sec: 937.46
Iteration:   3780, Loss function: 4.996, Average Loss: 5.264, avg. samples / sec: 922.07
Iteration:   3800, Loss function: 5.090, Average Loss: 5.261, avg. samples / sec: 881.76
Iteration:   3820, Loss function: 5.174, Average Loss: 5.255, avg. samples / sec: 851.41
Iteration:   3840, Loss function: 4.929, Average Loss: 5.250, avg. samples / sec: 908.14
Iteration:   3860, Loss function: 4.839, Average Loss: 5.245, avg. samples / sec: 875.31
Iteration:   3880, Loss function: 5.134, Average Loss: 5.239, avg. samples / sec: 918.73
Iteration:   3900, Loss function: 5.111, Average Loss: 5.234, avg. samples / sec: 973.98
Iteration:   3920, Loss function: 5.023, Average Loss: 5.229, avg. samples / sec: 909.00
Iteration:   3940, Loss function: 5.060, Average Loss: 5.223, avg. samples / sec: 984.20
Iteration:   3960, Loss function: 4.860, Average Loss: 5.219, avg. samples / sec: 974.76
Iteration:   3980, Loss function: 4.972, Average Loss: 5.215, avg. samples / sec: 906.31
Iteration:   4000, Loss function: 5.332, Average Loss: 5.212, avg. samples / sec: 948.92
Iteration:   4020, Loss function: 5.134, Average Loss: 5.207, avg. samples / sec: 974.68
Iteration:   4040, Loss function: 4.973, Average Loss: 5.202, avg. samples / sec: 926.53
Iteration:   4060, Loss function: 5.190, Average Loss: 5.198, avg. samples / sec: 936.12
Iteration:   4080, Loss function: 5.101, Average Loss: 5.193, avg. samples / sec: 986.22
Iteration:   4100, Loss function: 5.022, Average Loss: 5.190, avg. samples / sec: 972.10
:::MLLOG {"namespace": "", "time_ms": 1639068817626, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068817628, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.186, avg. samples / sec: 971.53
Iteration:   4140, Loss function: 4.945, Average Loss: 5.180, avg. samples / sec: 965.16
Iteration:   4160, Loss function: 5.054, Average Loss: 5.173, avg. samples / sec: 971.21
Iteration:   4180, Loss function: 4.943, Average Loss: 5.167, avg. samples / sec: 950.09
Iteration:   4200, Loss function: 4.965, Average Loss: 5.163, avg. samples / sec: 907.14
Iteration:   4220, Loss function: 4.800, Average Loss: 5.157, avg. samples / sec: 970.62
Iteration:   4240, Loss function: 5.038, Average Loss: 5.152, avg. samples / sec: 956.62
Iteration:   4260, Loss function: 4.918, Average Loss: 5.147, avg. samples / sec: 870.70
Iteration:   4280, Loss function: 4.942, Average Loss: 5.141, avg. samples / sec: 949.39
Iteration:   4300, Loss function: 4.725, Average Loss: 5.135, avg. samples / sec: 902.50
Iteration:   4320, Loss function: 4.831, Average Loss: 5.130, avg. samples / sec: 960.47
Iteration:   4340, Loss function: 4.772, Average Loss: 5.124, avg. samples / sec: 962.91
Iteration:   4360, Loss function: 5.003, Average Loss: 5.120, avg. samples / sec: 987.97
Iteration:   4380, Loss function: 5.003, Average Loss: 5.115, avg. samples / sec: 995.04
Iteration:   4400, Loss function: 4.880, Average Loss: 5.110, avg. samples / sec: 992.43
Iteration:   4420, Loss function: 4.821, Average Loss: 5.104, avg. samples / sec: 975.60
Iteration:   4440, Loss function: 4.969, Average Loss: 5.100, avg. samples / sec: 923.51
Iteration:   4460, Loss function: 4.994, Average Loss: 5.096, avg. samples / sec: 985.30
Iteration:   4480, Loss function: 5.100, Average Loss: 5.093, avg. samples / sec: 970.73
Iteration:   4500, Loss function: 4.882, Average Loss: 5.089, avg. samples / sec: 972.07
Iteration:   4520, Loss function: 4.861, Average Loss: 5.085, avg. samples / sec: 969.39
Iteration:   4540, Loss function: 5.046, Average Loss: 5.081, avg. samples / sec: 952.56
Iteration:   4560, Loss function: 4.746, Average Loss: 5.077, avg. samples / sec: 919.49
Iteration:   4580, Loss function: 4.686, Average Loss: 5.074, avg. samples / sec: 948.12
Iteration:   4600, Loss function: 4.882, Average Loss: 5.071, avg. samples / sec: 958.22
Iteration:   4620, Loss function: 4.759, Average Loss: 5.066, avg. samples / sec: 892.88
Iteration:   4640, Loss function: 4.692, Average Loss: 5.063, avg. samples / sec: 888.76
Iteration:   4660, Loss function: 4.803, Average Loss: 5.058, avg. samples / sec: 963.39
Iteration:   4680, Loss function: 5.302, Average Loss: 5.054, avg. samples / sec: 980.41
Iteration:   4700, Loss function: 4.813, Average Loss: 5.051, avg. samples / sec: 970.64
Iteration:   4720, Loss function: 4.694, Average Loss: 5.046, avg. samples / sec: 972.53
Iteration:   4740, Loss function: 4.896, Average Loss: 5.042, avg. samples / sec: 980.76
Iteration:   4760, Loss function: 4.832, Average Loss: 5.039, avg. samples / sec: 979.01
Iteration:   4780, Loss function: 4.904, Average Loss: 5.035, avg. samples / sec: 963.49
Iteration:   4800, Loss function: 5.028, Average Loss: 5.031, avg. samples / sec: 954.72
Iteration:   4820, Loss function: 4.662, Average Loss: 5.027, avg. samples / sec: 934.07
Iteration:   4840, Loss function: 5.119, Average Loss: 5.023, avg. samples / sec: 935.96
Iteration:   4860, Loss function: 4.654, Average Loss: 5.019, avg. samples / sec: 918.86
Iteration:   4880, Loss function: 5.003, Average Loss: 5.014, avg. samples / sec: 980.21
Iteration:   4900, Loss function: 4.580, Average Loss: 5.011, avg. samples / sec: 950.85
Iteration:   4920, Loss function: 4.662, Average Loss: 5.008, avg. samples / sec: 930.17
Iteration:   4940, Loss function: 4.776, Average Loss: 5.004, avg. samples / sec: 909.12
Iteration:   4960, Loss function: 4.759, Average Loss: 5.000, avg. samples / sec: 985.90
Iteration:   4980, Loss function: 4.472, Average Loss: 4.996, avg. samples / sec: 946.94
Iteration:   5000, Loss function: 4.948, Average Loss: 4.993, avg. samples / sec: 919.40
Iteration:   5020, Loss function: 5.169, Average Loss: 4.991, avg. samples / sec: 946.35
Iteration:   5040, Loss function: 4.793, Average Loss: 4.988, avg. samples / sec: 939.48
Iteration:   5060, Loss function: 4.617, Average Loss: 4.984, avg. samples / sec: 914.68
Iteration:   5080, Loss function: 4.522, Average Loss: 4.981, avg. samples / sec: 946.54
Iteration:   5100, Loss function: 4.900, Average Loss: 4.978, avg. samples / sec: 986.92
Iteration:   5120, Loss function: 4.589, Average Loss: 4.975, avg. samples / sec: 921.81
Iteration:   5140, Loss function: 4.814, Average Loss: 4.971, avg. samples / sec: 875.41
:::MLLOG {"namespace": "", "time_ms": 1639068941371, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.52 s
:::MLLOG {"namespace": "", "time_ms": 1639068973941, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068973993, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068973993, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.61s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.150, Average Loss: 4.966, avg. samples / sec: 65.35
Iteration:   5180, Loss function: 4.663, Average Loss: 4.962, avg. samples / sec: 980.25
DONE (t=4.09s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10850
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21882
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09785
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19226
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13883
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20235
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21406
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21406
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10850 AP goal: 0.10000
Iteration:   5200, Loss function: 4.630, Average Loss: 4.957, avg. samples / sec: 880.59
:::MLLOG {"namespace": "", "time_ms": 1639068980837, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068980838, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10850344193269294, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068980839, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981064, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:56:23 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:56:23 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639068293053, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639068293168, "event_type": "POINT_IN_TIME", "key": "seed", "value": 164823640, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 164823640
:::MLLOG {"namespace": "", "time_ms": 1639068294696, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639068294696, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639068294700, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639068318887, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639068318888, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639068321288, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639068321289, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639068321520, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639068321521, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068321522, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.131, Average Loss: 0.023, avg. samples / sec: 4.30
Iteration:     20, Loss function: 21.244, Average Loss: 0.459, avg. samples / sec: 910.96
Iteration:     40, Loss function: 20.775, Average Loss: 0.862, avg. samples / sec: 934.47
Iteration:     60, Loss function: 20.409, Average Loss: 1.252, avg. samples / sec: 962.69
Iteration:     80, Loss function: 19.779, Average Loss: 1.624, avg. samples / sec: 930.20
Iteration:    100, Loss function: 15.102, Average Loss: 1.944, avg. samples / sec: 920.32
Iteration:    120, Loss function: 10.978, Average Loss: 2.146, avg. samples / sec: 948.80
Iteration:    140, Loss function: 9.741, Average Loss: 2.307, avg. samples / sec: 930.26
Iteration:    160, Loss function: 9.203, Average Loss: 2.447, avg. samples / sec: 894.47
Iteration:    180, Loss function: 8.849, Average Loss: 2.576, avg. samples / sec: 965.13
Iteration:    200, Loss function: 8.665, Average Loss: 2.702, avg. samples / sec: 960.48
Iteration:    220, Loss function: 8.544, Average Loss: 2.822, avg. samples / sec: 963.83
Iteration:    240, Loss function: 8.554, Average Loss: 2.938, avg. samples / sec: 882.29
Iteration:    260, Loss function: 8.753, Average Loss: 3.054, avg. samples / sec: 962.70
Iteration:    280, Loss function: 8.618, Average Loss: 3.165, avg. samples / sec: 911.89
Iteration:    300, Loss function: 8.313, Average Loss: 3.269, avg. samples / sec: 943.17
Iteration:    320, Loss function: 8.450, Average Loss: 3.370, avg. samples / sec: 941.50
Iteration:    340, Loss function: 8.608, Average Loss: 3.470, avg. samples / sec: 946.80
Iteration:    360, Loss function: 8.088, Average Loss: 3.566, avg. samples / sec: 912.03
Iteration:    380, Loss function: 8.064, Average Loss: 3.657, avg. samples / sec: 911.52
Iteration:    400, Loss function: 7.924, Average Loss: 3.741, avg. samples / sec: 935.40
Iteration:    420, Loss function: 7.822, Average Loss: 3.824, avg. samples / sec: 980.95
Iteration:    440, Loss function: 7.816, Average Loss: 3.904, avg. samples / sec: 911.22
Iteration:    460, Loss function: 7.783, Average Loss: 3.982, avg. samples / sec: 967.45
Iteration:    480, Loss function: 7.588, Average Loss: 4.055, avg. samples / sec: 944.42
Iteration:    500, Loss function: 7.719, Average Loss: 4.127, avg. samples / sec: 707.80
Iteration:    520, Loss function: 7.633, Average Loss: 4.198, avg. samples / sec: 972.91
Iteration:    540, Loss function: 7.567, Average Loss: 4.263, avg. samples / sec: 931.60
Iteration:    560, Loss function: 7.352, Average Loss: 4.327, avg. samples / sec: 837.42
Iteration:    580, Loss function: 7.077, Average Loss: 4.389, avg. samples / sec: 953.39
Iteration:    600, Loss function: 7.455, Average Loss: 4.449, avg. samples / sec: 907.00
Iteration:    620, Loss function: 7.111, Average Loss: 4.505, avg. samples / sec: 957.05
Iteration:    640, Loss function: 6.861, Average Loss: 4.559, avg. samples / sec: 960.92
Iteration:    660, Loss function: 7.153, Average Loss: 4.612, avg. samples / sec: 990.43
Iteration:    680, Loss function: 7.259, Average Loss: 4.664, avg. samples / sec: 944.80
Iteration:    700, Loss function: 6.906, Average Loss: 4.712, avg. samples / sec: 882.14
Iteration:    720, Loss function: 7.021, Average Loss: 4.761, avg. samples / sec: 940.95
Iteration:    740, Loss function: 6.955, Average Loss: 4.807, avg. samples / sec: 963.80
Iteration:    760, Loss function: 7.026, Average Loss: 4.851, avg. samples / sec: 975.09
Iteration:    780, Loss function: 6.888, Average Loss: 4.893, avg. samples / sec: 962.77
Iteration:    800, Loss function: 7.094, Average Loss: 4.932, avg. samples / sec: 905.45
Iteration:    820, Loss function: 6.971, Average Loss: 4.970, avg. samples / sec: 975.52
Iteration:    840, Loss function: 6.649, Average Loss: 5.006, avg. samples / sec: 919.76
Iteration:    860, Loss function: 6.675, Average Loss: 5.041, avg. samples / sec: 957.77
Iteration:    880, Loss function: 6.789, Average Loss: 5.074, avg. samples / sec: 884.02
Iteration:    900, Loss function: 6.980, Average Loss: 5.106, avg. samples / sec: 982.04
Iteration:    920, Loss function: 6.622, Average Loss: 5.134, avg. samples / sec: 985.33
Iteration:    940, Loss function: 6.909, Average Loss: 5.164, avg. samples / sec: 965.25
Iteration:    960, Loss function: 6.405, Average Loss: 5.193, avg. samples / sec: 919.36
Iteration:    980, Loss function: 6.546, Average Loss: 5.220, avg. samples / sec: 948.31
Iteration:   1000, Loss function: 6.697, Average Loss: 5.246, avg. samples / sec: 918.24
Iteration:   1020, Loss function: 6.478, Average Loss: 5.272, avg. samples / sec: 992.93
:::MLLOG {"namespace": "", "time_ms": 1639068447147, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068447150, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.449, Average Loss: 5.296, avg. samples / sec: 995.92
Iteration:   1060, Loss function: 6.315, Average Loss: 5.320, avg. samples / sec: 974.03
Iteration:   1080, Loss function: 6.294, Average Loss: 5.342, avg. samples / sec: 1000.19
Iteration:   1100, Loss function: 6.141, Average Loss: 5.361, avg. samples / sec: 939.96
Iteration:   1120, Loss function: 6.280, Average Loss: 5.381, avg. samples / sec: 973.59
Iteration:   1140, Loss function: 6.502, Average Loss: 5.399, avg. samples / sec: 919.75
Iteration:   1160, Loss function: 6.320, Average Loss: 5.417, avg. samples / sec: 959.61
Iteration:   1180, Loss function: 6.240, Average Loss: 5.434, avg. samples / sec: 921.78
Iteration:   1200, Loss function: 6.384, Average Loss: 5.450, avg. samples / sec: 952.97
Iteration:   1220, Loss function: 6.238, Average Loss: 5.464, avg. samples / sec: 929.58
Iteration:   1240, Loss function: 6.071, Average Loss: 5.477, avg. samples / sec: 932.95
Iteration:   1260, Loss function: 6.143, Average Loss: 5.489, avg. samples / sec: 960.07
Iteration:   1280, Loss function: 5.907, Average Loss: 5.501, avg. samples / sec: 884.92
Iteration:   1300, Loss function: 6.033, Average Loss: 5.514, avg. samples / sec: 1002.68
Iteration:   1320, Loss function: 6.084, Average Loss: 5.526, avg. samples / sec: 978.18
Iteration:   1340, Loss function: 5.827, Average Loss: 5.535, avg. samples / sec: 966.22
Iteration:   1360, Loss function: 6.070, Average Loss: 5.546, avg. samples / sec: 957.48
Iteration:   1380, Loss function: 6.035, Average Loss: 5.556, avg. samples / sec: 972.62
Iteration:   1400, Loss function: 6.170, Average Loss: 5.564, avg. samples / sec: 949.11
Iteration:   1420, Loss function: 5.935, Average Loss: 5.572, avg. samples / sec: 997.11
Iteration:   1440, Loss function: 6.253, Average Loss: 5.579, avg. samples / sec: 985.74
Iteration:   1460, Loss function: 6.068, Average Loss: 5.587, avg. samples / sec: 956.17
Iteration:   1480, Loss function: 5.976, Average Loss: 5.595, avg. samples / sec: 954.41
Iteration:   1500, Loss function: 5.931, Average Loss: 5.602, avg. samples / sec: 974.04
Iteration:   1520, Loss function: 6.034, Average Loss: 5.608, avg. samples / sec: 985.32
Iteration:   1540, Loss function: 5.985, Average Loss: 5.612, avg. samples / sec: 981.05
Iteration:   1560, Loss function: 5.671, Average Loss: 5.616, avg. samples / sec: 917.05
Iteration:   1580, Loss function: 5.614, Average Loss: 5.621, avg. samples / sec: 976.96
Iteration:   1600, Loss function: 6.187, Average Loss: 5.628, avg. samples / sec: 995.04
Iteration:   1620, Loss function: 5.943, Average Loss: 5.634, avg. samples / sec: 943.39
Iteration:   1640, Loss function: 5.716, Average Loss: 5.636, avg. samples / sec: 866.50
Iteration:   1660, Loss function: 5.911, Average Loss: 5.641, avg. samples / sec: 894.12
Iteration:   1680, Loss function: 5.669, Average Loss: 5.642, avg. samples / sec: 926.79
Iteration:   1700, Loss function: 5.474, Average Loss: 5.646, avg. samples / sec: 995.22
Iteration:   1720, Loss function: 5.655, Average Loss: 5.646, avg. samples / sec: 938.53
Iteration:   1740, Loss function: 5.967, Average Loss: 5.649, avg. samples / sec: 984.37
Iteration:   1760, Loss function: 5.405, Average Loss: 5.651, avg. samples / sec: 959.98
Iteration:   1780, Loss function: 5.798, Average Loss: 5.652, avg. samples / sec: 889.63
Iteration:   1800, Loss function: 5.833, Average Loss: 5.655, avg. samples / sec: 950.38
Iteration:   1820, Loss function: 6.003, Average Loss: 5.656, avg. samples / sec: 985.25
Iteration:   1840, Loss function: 5.936, Average Loss: 5.657, avg. samples / sec: 960.19
Iteration:   1860, Loss function: 5.584, Average Loss: 5.656, avg. samples / sec: 917.43
Iteration:   1880, Loss function: 5.976, Average Loss: 5.658, avg. samples / sec: 941.83
Iteration:   1900, Loss function: 5.899, Average Loss: 5.659, avg. samples / sec: 966.13
Iteration:   1920, Loss function: 5.719, Average Loss: 5.657, avg. samples / sec: 996.22
Iteration:   1940, Loss function: 5.881, Average Loss: 5.657, avg. samples / sec: 979.14
Iteration:   1960, Loss function: 5.604, Average Loss: 5.655, avg. samples / sec: 890.55
Iteration:   1980, Loss function: 5.734, Average Loss: 5.655, avg. samples / sec: 963.30
Iteration:   2000, Loss function: 5.605, Average Loss: 5.653, avg. samples / sec: 933.41
Iteration:   2020, Loss function: 5.656, Average Loss: 5.652, avg. samples / sec: 968.50
Iteration:   2040, Loss function: 5.701, Average Loss: 5.652, avg. samples / sec: 821.56
:::MLLOG {"namespace": "", "time_ms": 1639068570591, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639068570592, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.562, Average Loss: 5.650, avg. samples / sec: 941.02
Iteration:   2080, Loss function: 5.158, Average Loss: 5.648, avg. samples / sec: 885.89
Iteration:   2100, Loss function: 5.619, Average Loss: 5.645, avg. samples / sec: 914.58
Iteration:   2120, Loss function: 5.189, Average Loss: 5.641, avg. samples / sec: 956.32
Iteration:   2140, Loss function: 5.290, Average Loss: 5.638, avg. samples / sec: 952.76
Iteration:   2160, Loss function: 5.249, Average Loss: 5.635, avg. samples / sec: 991.50
Iteration:   2180, Loss function: 5.329, Average Loss: 5.633, avg. samples / sec: 923.01
Iteration:   2200, Loss function: 5.449, Average Loss: 5.629, avg. samples / sec: 870.85
Iteration:   2220, Loss function: 5.805, Average Loss: 5.627, avg. samples / sec: 964.41
Iteration:   2240, Loss function: 5.579, Average Loss: 5.624, avg. samples / sec: 958.55
Iteration:   2260, Loss function: 5.336, Average Loss: 5.621, avg. samples / sec: 962.27
Iteration:   2280, Loss function: 5.204, Average Loss: 5.618, avg. samples / sec: 971.18
Iteration:   2300, Loss function: 5.174, Average Loss: 5.615, avg. samples / sec: 994.10
Iteration:   2320, Loss function: 5.337, Average Loss: 5.613, avg. samples / sec: 972.40
Iteration:   2340, Loss function: 5.501, Average Loss: 5.609, avg. samples / sec: 978.27
Iteration:   2360, Loss function: 5.397, Average Loss: 5.605, avg. samples / sec: 985.39
Iteration:   2380, Loss function: 5.406, Average Loss: 5.601, avg. samples / sec: 966.55
Iteration:   2400, Loss function: 5.563, Average Loss: 5.597, avg. samples / sec: 868.12
Iteration:   2420, Loss function: 5.388, Average Loss: 5.593, avg. samples / sec: 960.30
Iteration:   2440, Loss function: 5.556, Average Loss: 5.589, avg. samples / sec: 965.53
Iteration:   2460, Loss function: 5.241, Average Loss: 5.585, avg. samples / sec: 975.88
Iteration:   2480, Loss function: 5.497, Average Loss: 5.581, avg. samples / sec: 971.17
Iteration:   2500, Loss function: 5.545, Average Loss: 5.577, avg. samples / sec: 916.08
Iteration:   2520, Loss function: 5.322, Average Loss: 5.571, avg. samples / sec: 935.59
Iteration:   2540, Loss function: 5.318, Average Loss: 5.568, avg. samples / sec: 978.14
Iteration:   2560, Loss function: 5.194, Average Loss: 5.564, avg. samples / sec: 842.80
Iteration:   2580, Loss function: 5.403, Average Loss: 5.560, avg. samples / sec: 913.63
Iteration:   2600, Loss function: 5.344, Average Loss: 5.557, avg. samples / sec: 959.37
Iteration:   2620, Loss function: 5.409, Average Loss: 5.552, avg. samples / sec: 978.02
Iteration:   2640, Loss function: 5.145, Average Loss: 5.549, avg. samples / sec: 972.02
Iteration:   2660, Loss function: 5.280, Average Loss: 5.545, avg. samples / sec: 979.79
Iteration:   2680, Loss function: 5.126, Average Loss: 5.542, avg. samples / sec: 994.56
Iteration:   2700, Loss function: 5.309, Average Loss: 5.537, avg. samples / sec: 873.67
Iteration:   2720, Loss function: 5.279, Average Loss: 5.533, avg. samples / sec: 948.45
Iteration:   2740, Loss function: 5.096, Average Loss: 5.529, avg. samples / sec: 981.26
Iteration:   2760, Loss function: 5.019, Average Loss: 5.525, avg. samples / sec: 979.12
Iteration:   2780, Loss function: 5.501, Average Loss: 5.521, avg. samples / sec: 980.38
Iteration:   2800, Loss function: 5.242, Average Loss: 5.516, avg. samples / sec: 935.73
Iteration:   2820, Loss function: 5.329, Average Loss: 5.511, avg. samples / sec: 883.93
Iteration:   2840, Loss function: 5.324, Average Loss: 5.507, avg. samples / sec: 975.12
Iteration:   2860, Loss function: 5.088, Average Loss: 5.502, avg. samples / sec: 979.98
Iteration:   2880, Loss function: 5.391, Average Loss: 5.498, avg. samples / sec: 988.48
Iteration:   2900, Loss function: 5.116, Average Loss: 5.494, avg. samples / sec: 981.39
Iteration:   2920, Loss function: 5.125, Average Loss: 5.488, avg. samples / sec: 978.23
Iteration:   2940, Loss function: 5.127, Average Loss: 5.483, avg. samples / sec: 859.29
Iteration:   2960, Loss function: 5.262, Average Loss: 5.479, avg. samples / sec: 916.92
Iteration:   2980, Loss function: 5.165, Average Loss: 5.475, avg. samples / sec: 985.95
Iteration:   3000, Loss function: 5.407, Average Loss: 5.470, avg. samples / sec: 979.60
Iteration:   3020, Loss function: 5.172, Average Loss: 5.464, avg. samples / sec: 1000.22
Iteration:   3040, Loss function: 5.296, Average Loss: 5.458, avg. samples / sec: 914.80
Iteration:   3060, Loss function: 5.167, Average Loss: 5.452, avg. samples / sec: 894.99
Iteration:   3080, Loss function: 4.901, Average Loss: 5.447, avg. samples / sec: 980.91
:::MLLOG {"namespace": "", "time_ms": 1639068694140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639068694145, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.195, Average Loss: 5.442, avg. samples / sec: 996.73
Iteration:   3120, Loss function: 5.078, Average Loss: 5.436, avg. samples / sec: 965.80
Iteration:   3140, Loss function: 5.095, Average Loss: 5.432, avg. samples / sec: 981.56
Iteration:   3160, Loss function: 5.524, Average Loss: 5.426, avg. samples / sec: 965.89
Iteration:   3180, Loss function: 4.923, Average Loss: 5.420, avg. samples / sec: 942.09
Iteration:   3200, Loss function: 5.088, Average Loss: 5.415, avg. samples / sec: 927.89
Iteration:   3220, Loss function: 5.226, Average Loss: 5.410, avg. samples / sec: 971.01
Iteration:   3240, Loss function: 5.133, Average Loss: 5.404, avg. samples / sec: 972.23
Iteration:   3260, Loss function: 4.977, Average Loss: 5.398, avg. samples / sec: 983.35
Iteration:   3280, Loss function: 4.721, Average Loss: 5.391, avg. samples / sec: 890.28
Iteration:   3300, Loss function: 4.794, Average Loss: 5.385, avg. samples / sec: 937.58
Iteration:   3320, Loss function: 5.014, Average Loss: 5.380, avg. samples / sec: 982.19
Iteration:   3340, Loss function: 5.108, Average Loss: 5.375, avg. samples / sec: 965.48
Iteration:   3360, Loss function: 5.159, Average Loss: 5.368, avg. samples / sec: 983.98
Iteration:   3380, Loss function: 5.086, Average Loss: 5.361, avg. samples / sec: 938.52
Iteration:   3400, Loss function: 4.853, Average Loss: 5.356, avg. samples / sec: 903.00
Iteration:   3420, Loss function: 5.217, Average Loss: 5.352, avg. samples / sec: 968.06
Iteration:   3440, Loss function: 4.854, Average Loss: 5.348, avg. samples / sec: 977.12
Iteration:   3460, Loss function: 5.231, Average Loss: 5.343, avg. samples / sec: 986.66
Iteration:   3480, Loss function: 5.307, Average Loss: 5.339, avg. samples / sec: 986.86
Iteration:   3500, Loss function: 5.284, Average Loss: 5.334, avg. samples / sec: 978.29
Iteration:   3520, Loss function: 5.011, Average Loss: 5.330, avg. samples / sec: 981.04
Iteration:   3540, Loss function: 4.908, Average Loss: 5.325, avg. samples / sec: 978.24
Iteration:   3560, Loss function: 4.791, Average Loss: 5.321, avg. samples / sec: 972.35
Iteration:   3580, Loss function: 4.968, Average Loss: 5.316, avg. samples / sec: 972.36
Iteration:   3600, Loss function: 5.188, Average Loss: 5.310, avg. samples / sec: 995.94
Iteration:   3620, Loss function: 4.899, Average Loss: 5.305, avg. samples / sec: 996.28
Iteration:   3640, Loss function: 4.790, Average Loss: 5.299, avg. samples / sec: 969.54
Iteration:   3660, Loss function: 5.111, Average Loss: 5.293, avg. samples / sec: 970.17
Iteration:   3680, Loss function: 5.149, Average Loss: 5.288, avg. samples / sec: 989.54
Iteration:   3700, Loss function: 5.041, Average Loss: 5.283, avg. samples / sec: 917.20
Iteration:   3720, Loss function: 4.904, Average Loss: 5.277, avg. samples / sec: 841.32
Iteration:   3740, Loss function: 5.200, Average Loss: 5.273, avg. samples / sec: 945.82
Iteration:   3760, Loss function: 5.076, Average Loss: 5.269, avg. samples / sec: 937.46
Iteration:   3780, Loss function: 4.996, Average Loss: 5.264, avg. samples / sec: 922.07
Iteration:   3800, Loss function: 5.090, Average Loss: 5.261, avg. samples / sec: 881.76
Iteration:   3820, Loss function: 5.174, Average Loss: 5.255, avg. samples / sec: 851.41
Iteration:   3840, Loss function: 4.929, Average Loss: 5.250, avg. samples / sec: 908.14
Iteration:   3860, Loss function: 4.839, Average Loss: 5.245, avg. samples / sec: 875.31
Iteration:   3880, Loss function: 5.134, Average Loss: 5.239, avg. samples / sec: 918.73
Iteration:   3900, Loss function: 5.111, Average Loss: 5.234, avg. samples / sec: 973.98
Iteration:   3920, Loss function: 5.023, Average Loss: 5.229, avg. samples / sec: 909.00
Iteration:   3940, Loss function: 5.060, Average Loss: 5.223, avg. samples / sec: 984.20
Iteration:   3960, Loss function: 4.860, Average Loss: 5.219, avg. samples / sec: 974.76
Iteration:   3980, Loss function: 4.972, Average Loss: 5.215, avg. samples / sec: 906.31
Iteration:   4000, Loss function: 5.332, Average Loss: 5.212, avg. samples / sec: 948.92
Iteration:   4020, Loss function: 5.134, Average Loss: 5.207, avg. samples / sec: 974.68
Iteration:   4040, Loss function: 4.973, Average Loss: 5.202, avg. samples / sec: 926.53
Iteration:   4060, Loss function: 5.190, Average Loss: 5.198, avg. samples / sec: 936.12
Iteration:   4080, Loss function: 5.101, Average Loss: 5.193, avg. samples / sec: 986.22
Iteration:   4100, Loss function: 5.022, Average Loss: 5.190, avg. samples / sec: 972.10
:::MLLOG {"namespace": "", "time_ms": 1639068817626, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639068817628, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.186, avg. samples / sec: 971.53
Iteration:   4140, Loss function: 4.945, Average Loss: 5.180, avg. samples / sec: 965.16
Iteration:   4160, Loss function: 5.054, Average Loss: 5.173, avg. samples / sec: 971.21
Iteration:   4180, Loss function: 4.943, Average Loss: 5.167, avg. samples / sec: 950.09
Iteration:   4200, Loss function: 4.965, Average Loss: 5.163, avg. samples / sec: 907.14
Iteration:   4220, Loss function: 4.800, Average Loss: 5.157, avg. samples / sec: 970.62
Iteration:   4240, Loss function: 5.038, Average Loss: 5.152, avg. samples / sec: 956.62
Iteration:   4260, Loss function: 4.918, Average Loss: 5.147, avg. samples / sec: 870.70
Iteration:   4280, Loss function: 4.942, Average Loss: 5.141, avg. samples / sec: 949.39
Iteration:   4300, Loss function: 4.725, Average Loss: 5.135, avg. samples / sec: 902.50
Iteration:   4320, Loss function: 4.831, Average Loss: 5.130, avg. samples / sec: 960.47
Iteration:   4340, Loss function: 4.772, Average Loss: 5.124, avg. samples / sec: 962.91
Iteration:   4360, Loss function: 5.003, Average Loss: 5.120, avg. samples / sec: 987.97
Iteration:   4380, Loss function: 5.003, Average Loss: 5.115, avg. samples / sec: 995.04
Iteration:   4400, Loss function: 4.880, Average Loss: 5.110, avg. samples / sec: 992.43
Iteration:   4420, Loss function: 4.821, Average Loss: 5.104, avg. samples / sec: 975.60
Iteration:   4440, Loss function: 4.969, Average Loss: 5.100, avg. samples / sec: 923.51
Iteration:   4460, Loss function: 4.994, Average Loss: 5.096, avg. samples / sec: 985.30
Iteration:   4480, Loss function: 5.100, Average Loss: 5.093, avg. samples / sec: 970.73
Iteration:   4500, Loss function: 4.882, Average Loss: 5.089, avg. samples / sec: 972.07
Iteration:   4520, Loss function: 4.861, Average Loss: 5.085, avg. samples / sec: 969.39
Iteration:   4540, Loss function: 5.046, Average Loss: 5.081, avg. samples / sec: 952.56
Iteration:   4560, Loss function: 4.746, Average Loss: 5.077, avg. samples / sec: 919.49
Iteration:   4580, Loss function: 4.686, Average Loss: 5.074, avg. samples / sec: 948.12
Iteration:   4600, Loss function: 4.882, Average Loss: 5.071, avg. samples / sec: 958.22
Iteration:   4620, Loss function: 4.759, Average Loss: 5.066, avg. samples / sec: 892.88
Iteration:   4640, Loss function: 4.692, Average Loss: 5.063, avg. samples / sec: 888.76
Iteration:   4660, Loss function: 4.803, Average Loss: 5.058, avg. samples / sec: 963.39
Iteration:   4680, Loss function: 5.302, Average Loss: 5.054, avg. samples / sec: 980.41
Iteration:   4700, Loss function: 4.813, Average Loss: 5.051, avg. samples / sec: 970.64
Iteration:   4720, Loss function: 4.694, Average Loss: 5.046, avg. samples / sec: 972.53
Iteration:   4740, Loss function: 4.896, Average Loss: 5.042, avg. samples / sec: 980.76
Iteration:   4760, Loss function: 4.832, Average Loss: 5.039, avg. samples / sec: 979.01
Iteration:   4780, Loss function: 4.904, Average Loss: 5.035, avg. samples / sec: 963.49
Iteration:   4800, Loss function: 5.028, Average Loss: 5.031, avg. samples / sec: 954.72
Iteration:   4820, Loss function: 4.662, Average Loss: 5.027, avg. samples / sec: 934.07
Iteration:   4840, Loss function: 5.119, Average Loss: 5.023, avg. samples / sec: 935.96
Iteration:   4860, Loss function: 4.654, Average Loss: 5.019, avg. samples / sec: 918.86
Iteration:   4880, Loss function: 5.003, Average Loss: 5.014, avg. samples / sec: 980.21
Iteration:   4900, Loss function: 4.580, Average Loss: 5.011, avg. samples / sec: 950.85
Iteration:   4920, Loss function: 4.662, Average Loss: 5.008, avg. samples / sec: 930.17
Iteration:   4940, Loss function: 4.776, Average Loss: 5.004, avg. samples / sec: 909.12
Iteration:   4960, Loss function: 4.759, Average Loss: 5.000, avg. samples / sec: 985.90
Iteration:   4980, Loss function: 4.472, Average Loss: 4.996, avg. samples / sec: 946.94
Iteration:   5000, Loss function: 4.948, Average Loss: 4.993, avg. samples / sec: 919.40
Iteration:   5020, Loss function: 5.169, Average Loss: 4.991, avg. samples / sec: 946.35
Iteration:   5040, Loss function: 4.793, Average Loss: 4.988, avg. samples / sec: 939.48
Iteration:   5060, Loss function: 4.617, Average Loss: 4.984, avg. samples / sec: 914.68
Iteration:   5080, Loss function: 4.522, Average Loss: 4.981, avg. samples / sec: 946.54
Iteration:   5100, Loss function: 4.900, Average Loss: 4.978, avg. samples / sec: 986.92
Iteration:   5120, Loss function: 4.589, Average Loss: 4.975, avg. samples / sec: 921.81
Iteration:   5140, Loss function: 4.814, Average Loss: 4.971, avg. samples / sec: 875.41
:::MLLOG {"namespace": "", "time_ms": 1639068941371, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.52 s
:::MLLOG {"namespace": "", "time_ms": 1639068973941, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639068973993, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068973993, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.61s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.150, Average Loss: 4.966, avg. samples / sec: 65.35
Iteration:   5180, Loss function: 4.663, Average Loss: 4.962, avg. samples / sec: 980.25
DONE (t=4.09s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10850
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21882
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09785
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19226
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13883
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20235
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21406
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21406
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10850 AP goal: 0.10000
Iteration:   5200, Loss function: 4.630, Average Loss: 4.957, avg. samples / sec: 880.59
:::MLLOG {"namespace": "", "time_ms": 1639068980837, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068980838, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10850344193269294, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068980839, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639068981064, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639068983
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:56:23 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 04:44:51 PM'
START TIMING RUN WAS 2021-12-09 04:44:51 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:56:23 PM'
ENDING TIMING RUN AT 2021-12-09 04:56:23 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ result=692
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,692,nvidia,2021-12-09 04:44:51 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,692,nvidia,2021-12-09 04:44:51 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
