+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-5r9lr.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-5r9lr.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-5r9lr.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8'
Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073770
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:10 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:10 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 06:16:10 PM GPU: 1 x 7g.40gb x 8 Pods
running benchmark
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-15-55 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ set +x
Thu Dec  9 18:16:10 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-5r9lr to the sync file ...
run-ssd--1-5r9lr Found 2 Pods, waiting to have 8 ...
     1	run-ssd--1-crckk
     2	run-ssd--1-5r9lr
Thu Dec  9 18:16:15 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073777053, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073777183, "event_type": "POINT_IN_TIME", "key": "seed", "value": 503960980, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 503960980
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073778919, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073778919, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073802982, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073802983, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073804369, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073804370, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073804761, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073804762, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073804763, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.661, Average Loss: 0.023, avg. samples / sec: 4.46
Iteration:     20, Loss function: 21.095, Average Loss: 0.455, avg. samples / sec: 860.56
Iteration:     40, Loss function: 20.681, Average Loss: 0.856, avg. samples / sec: 883.97
Iteration:     60, Loss function: 20.312, Average Loss: 1.245, avg. samples / sec: 894.09
Iteration:     80, Loss function: 19.414, Average Loss: 1.614, avg. samples / sec: 900.65
Iteration:    100, Loss function: 13.571, Average Loss: 1.915, avg. samples / sec: 914.84
Iteration:    120, Loss function: 10.201, Average Loss: 2.109, avg. samples / sec: 733.91
Iteration:    140, Loss function: 9.475, Average Loss: 2.261, avg. samples / sec: 923.78
Iteration:    160, Loss function: 9.051, Average Loss: 2.400, avg. samples / sec: 886.90
Iteration:    180, Loss function: 8.903, Average Loss: 2.530, avg. samples / sec: 913.41
Iteration:    200, Loss function: 8.640, Average Loss: 2.655, avg. samples / sec: 975.63
Iteration:    220, Loss function: 8.556, Average Loss: 2.779, avg. samples / sec: 950.11
Iteration:    240, Loss function: 8.706, Average Loss: 2.897, avg. samples / sec: 945.05
Iteration:    260, Loss function: 8.738, Average Loss: 3.010, avg. samples / sec: 990.90
Iteration:    280, Loss function: 8.568, Average Loss: 3.120, avg. samples / sec: 965.85
Iteration:    300, Loss function: 8.370, Average Loss: 3.224, avg. samples / sec: 984.27
Iteration:    320, Loss function: 8.368, Average Loss: 3.326, avg. samples / sec: 980.59
Iteration:    340, Loss function: 8.495, Average Loss: 3.427, avg. samples / sec: 881.43
Iteration:    360, Loss function: 8.053, Average Loss: 3.523, avg. samples / sec: 887.53
Iteration:    380, Loss function: 7.750, Average Loss: 3.613, avg. samples / sec: 888.34
Iteration:    400, Loss function: 7.942, Average Loss: 3.697, avg. samples / sec: 940.80
Iteration:    420, Loss function: 7.771, Average Loss: 3.780, avg. samples / sec: 889.95
Iteration:    440, Loss function: 8.034, Average Loss: 3.860, avg. samples / sec: 834.56
Iteration:    460, Loss function: 7.825, Average Loss: 3.938, avg. samples / sec: 905.88
Iteration:    480, Loss function: 7.448, Average Loss: 4.011, avg. samples / sec: 901.55
Iteration:    500, Loss function: 7.388, Average Loss: 4.082, avg. samples / sec: 996.60
Iteration:    520, Loss function: 7.482, Average Loss: 4.150, avg. samples / sec: 954.64
Iteration:    540, Loss function: 7.544, Average Loss: 4.217, avg. samples / sec: 949.32
Iteration:    560, Loss function: 7.287, Average Loss: 4.280, avg. samples / sec: 979.33
Iteration:    580, Loss function: 7.221, Average Loss: 4.342, avg. samples / sec: 973.64
Iteration:    600, Loss function: 7.255, Average Loss: 4.402, avg. samples / sec: 984.49
Iteration:    620, Loss function: 6.795, Average Loss: 4.458, avg. samples / sec: 802.53
Iteration:    640, Loss function: 6.958, Average Loss: 4.512, avg. samples / sec: 943.79
Iteration:    660, Loss function: 7.318, Average Loss: 4.565, avg. samples / sec: 901.90
Iteration:    680, Loss function: 7.062, Average Loss: 4.618, avg. samples / sec: 970.82
Iteration:    700, Loss function: 6.868, Average Loss: 4.666, avg. samples / sec: 956.00
Iteration:    720, Loss function: 7.063, Average Loss: 4.716, avg. samples / sec: 954.70
Iteration:    740, Loss function: 6.963, Average Loss: 4.760, avg. samples / sec: 954.70
Iteration:    760, Loss function: 7.029, Average Loss: 4.804, avg. samples / sec: 967.73
Iteration:    780, Loss function: 6.661, Average Loss: 4.846, avg. samples / sec: 975.05
Iteration:    800, Loss function: 7.232, Average Loss: 4.886, avg. samples / sec: 973.82
Iteration:    820, Loss function: 7.029, Average Loss: 4.924, avg. samples / sec: 939.34
Iteration:    840, Loss function: 6.811, Average Loss: 4.962, avg. samples / sec: 985.41
Iteration:    860, Loss function: 6.690, Average Loss: 4.997, avg. samples / sec: 871.75
Iteration:    880, Loss function: 6.872, Average Loss: 5.031, avg. samples / sec: 846.46
Iteration:    900, Loss function: 6.758, Average Loss: 5.063, avg. samples / sec: 924.16
Iteration:    920, Loss function: 6.810, Average Loss: 5.094, avg. samples / sec: 981.19
Iteration:    940, Loss function: 6.710, Average Loss: 5.123, avg. samples / sec: 989.21
Iteration:    960, Loss function: 6.442, Average Loss: 5.152, avg. samples / sec: 972.77
Iteration:    980, Loss function: 6.516, Average Loss: 5.179, avg. samples / sec: 972.84
Iteration:   1000, Loss function: 6.588, Average Loss: 5.204, avg. samples / sec: 868.46
Iteration:   1020, Loss function: 6.293, Average Loss: 5.229, avg. samples / sec: 975.32
:::MLLOG {"namespace": "", "time_ms": 1639073931383, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073931385, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.528, Average Loss: 5.253, avg. samples / sec: 992.54
Iteration:   1060, Loss function: 6.371, Average Loss: 5.277, avg. samples / sec: 1001.83
Iteration:   1080, Loss function: 6.367, Average Loss: 5.299, avg. samples / sec: 917.44
Iteration:   1100, Loss function: 6.057, Average Loss: 5.318, avg. samples / sec: 924.73
Iteration:   1120, Loss function: 6.324, Average Loss: 5.338, avg. samples / sec: 978.23
Iteration:   1140, Loss function: 6.428, Average Loss: 5.357, avg. samples / sec: 987.59
Iteration:   1160, Loss function: 6.028, Average Loss: 5.375, avg. samples / sec: 977.22
Iteration:   1180, Loss function: 6.369, Average Loss: 5.392, avg. samples / sec: 978.40
Iteration:   1200, Loss function: 6.356, Average Loss: 5.408, avg. samples / sec: 920.00
Iteration:   1220, Loss function: 6.096, Average Loss: 5.423, avg. samples / sec: 878.04
Iteration:   1240, Loss function: 6.039, Average Loss: 5.437, avg. samples / sec: 978.18
Iteration:   1260, Loss function: 5.952, Average Loss: 5.450, avg. samples / sec: 981.76
Iteration:   1280, Loss function: 5.962, Average Loss: 5.464, avg. samples / sec: 982.64
Iteration:   1300, Loss function: 5.996, Average Loss: 5.477, avg. samples / sec: 993.62
Iteration:   1320, Loss function: 6.125, Average Loss: 5.490, avg. samples / sec: 957.74
Iteration:   1340, Loss function: 6.026, Average Loss: 5.502, avg. samples / sec: 981.41
Iteration:   1360, Loss function: 6.054, Average Loss: 5.513, avg. samples / sec: 939.94
Iteration:   1380, Loss function: 6.347, Average Loss: 5.523, avg. samples / sec: 975.68
Iteration:   1400, Loss function: 6.146, Average Loss: 5.532, avg. samples / sec: 983.07
Iteration:   1420, Loss function: 5.907, Average Loss: 5.540, avg. samples / sec: 980.20
Iteration:   1440, Loss function: 6.300, Average Loss: 5.548, avg. samples / sec: 947.27
Iteration:   1460, Loss function: 6.155, Average Loss: 5.557, avg. samples / sec: 882.25
Iteration:   1480, Loss function: 5.814, Average Loss: 5.565, avg. samples / sec: 922.66
Iteration:   1500, Loss function: 6.124, Average Loss: 5.572, avg. samples / sec: 925.86
Iteration:   1520, Loss function: 5.979, Average Loss: 5.578, avg. samples / sec: 962.94
Iteration:   1540, Loss function: 5.937, Average Loss: 5.583, avg. samples / sec: 890.91
Iteration:   1560, Loss function: 5.769, Average Loss: 5.588, avg. samples / sec: 975.43
Iteration:   1580, Loss function: 5.597, Average Loss: 5.594, avg. samples / sec: 989.09
Iteration:   1600, Loss function: 5.913, Average Loss: 5.599, avg. samples / sec: 943.37
Iteration:   1620, Loss function: 5.731, Average Loss: 5.604, avg. samples / sec: 981.33
Iteration:   1640, Loss function: 6.009, Average Loss: 5.608, avg. samples / sec: 950.27
Iteration:   1660, Loss function: 6.085, Average Loss: 5.614, avg. samples / sec: 977.44
Iteration:   1680, Loss function: 5.741, Average Loss: 5.617, avg. samples / sec: 958.67
Iteration:   1700, Loss function: 5.199, Average Loss: 5.621, avg. samples / sec: 971.13
Iteration:   1720, Loss function: 5.600, Average Loss: 5.624, avg. samples / sec: 967.56
Iteration:   1740, Loss function: 5.998, Average Loss: 5.627, avg. samples / sec: 960.59
Iteration:   1760, Loss function: 5.503, Average Loss: 5.629, avg. samples / sec: 964.40
Iteration:   1780, Loss function: 5.652, Average Loss: 5.630, avg. samples / sec: 915.07
Iteration:   1800, Loss function: 5.645, Average Loss: 5.631, avg. samples / sec: 966.69
Iteration:   1820, Loss function: 5.950, Average Loss: 5.633, avg. samples / sec: 992.01
Iteration:   1840, Loss function: 5.961, Average Loss: 5.635, avg. samples / sec: 989.16
Iteration:   1860, Loss function: 5.528, Average Loss: 5.634, avg. samples / sec: 981.45
Iteration:   1880, Loss function: 5.731, Average Loss: 5.635, avg. samples / sec: 935.35
Iteration:   1900, Loss function: 5.831, Average Loss: 5.636, avg. samples / sec: 970.55
Iteration:   1920, Loss function: 5.744, Average Loss: 5.636, avg. samples / sec: 937.95
Iteration:   1940, Loss function: 5.675, Average Loss: 5.637, avg. samples / sec: 934.80
Iteration:   1960, Loss function: 5.531, Average Loss: 5.636, avg. samples / sec: 930.63
Iteration:   1980, Loss function: 5.914, Average Loss: 5.636, avg. samples / sec: 965.46
Iteration:   2000, Loss function: 5.669, Average Loss: 5.636, avg. samples / sec: 827.88
Iteration:   2020, Loss function: 5.760, Average Loss: 5.634, avg. samples / sec: 912.46
Iteration:   2040, Loss function: 5.728, Average Loss: 5.634, avg. samples / sec: 942.52
:::MLLOG {"namespace": "", "time_ms": 1639074054560, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074054562, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.656, Average Loss: 5.632, avg. samples / sec: 922.66
Iteration:   2080, Loss function: 5.073, Average Loss: 5.631, avg. samples / sec: 938.55
Iteration:   2100, Loss function: 5.458, Average Loss: 5.629, avg. samples / sec: 966.85
Iteration:   2120, Loss function: 5.443, Average Loss: 5.627, avg. samples / sec: 987.86
Iteration:   2140, Loss function: 5.268, Average Loss: 5.624, avg. samples / sec: 946.74
Iteration:   2160, Loss function: 5.347, Average Loss: 5.622, avg. samples / sec: 937.13
Iteration:   2180, Loss function: 5.477, Average Loss: 5.619, avg. samples / sec: 910.34
Iteration:   2200, Loss function: 5.524, Average Loss: 5.616, avg. samples / sec: 922.16
Iteration:   2220, Loss function: 5.614, Average Loss: 5.614, avg. samples / sec: 934.92
Iteration:   2240, Loss function: 5.497, Average Loss: 5.611, avg. samples / sec: 927.60
Iteration:   2260, Loss function: 5.108, Average Loss: 5.608, avg. samples / sec: 927.27
Iteration:   2280, Loss function: 5.152, Average Loss: 5.604, avg. samples / sec: 975.23
Iteration:   2300, Loss function: 5.222, Average Loss: 5.601, avg. samples / sec: 956.82
Iteration:   2320, Loss function: 5.173, Average Loss: 5.599, avg. samples / sec: 964.87
Iteration:   2340, Loss function: 5.548, Average Loss: 5.595, avg. samples / sec: 903.35
Iteration:   2360, Loss function: 5.223, Average Loss: 5.592, avg. samples / sec: 941.75
Iteration:   2380, Loss function: 5.308, Average Loss: 5.588, avg. samples / sec: 976.22
Iteration:   2400, Loss function: 5.515, Average Loss: 5.584, avg. samples / sec: 975.01
Iteration:   2420, Loss function: 5.333, Average Loss: 5.580, avg. samples / sec: 986.00
Iteration:   2440, Loss function: 5.548, Average Loss: 5.577, avg. samples / sec: 964.89
Iteration:   2460, Loss function: 5.023, Average Loss: 5.573, avg. samples / sec: 931.80
Iteration:   2480, Loss function: 5.347, Average Loss: 5.569, avg. samples / sec: 897.28
Iteration:   2500, Loss function: 5.412, Average Loss: 5.567, avg. samples / sec: 974.31
Iteration:   2520, Loss function: 5.274, Average Loss: 5.562, avg. samples / sec: 910.24
Iteration:   2540, Loss function: 5.367, Average Loss: 5.558, avg. samples / sec: 941.61
Iteration:   2560, Loss function: 5.174, Average Loss: 5.554, avg. samples / sec: 904.64
Iteration:   2580, Loss function: 5.254, Average Loss: 5.551, avg. samples / sec: 970.92
Iteration:   2600, Loss function: 5.526, Average Loss: 5.549, avg. samples / sec: 990.91
Iteration:   2620, Loss function: 5.452, Average Loss: 5.543, avg. samples / sec: 959.38
Iteration:   2640, Loss function: 5.182, Average Loss: 5.541, avg. samples / sec: 962.25
Iteration:   2660, Loss function: 5.111, Average Loss: 5.538, avg. samples / sec: 948.08
Iteration:   2680, Loss function: 5.160, Average Loss: 5.535, avg. samples / sec: 985.39
Iteration:   2700, Loss function: 5.141, Average Loss: 5.530, avg. samples / sec: 980.89
Iteration:   2720, Loss function: 5.349, Average Loss: 5.526, avg. samples / sec: 964.53
Iteration:   2740, Loss function: 4.998, Average Loss: 5.521, avg. samples / sec: 901.73
Iteration:   2760, Loss function: 5.041, Average Loss: 5.516, avg. samples / sec: 954.01
Iteration:   2780, Loss function: 5.414, Average Loss: 5.513, avg. samples / sec: 979.99
Iteration:   2800, Loss function: 5.077, Average Loss: 5.507, avg. samples / sec: 923.31
Iteration:   2820, Loss function: 5.312, Average Loss: 5.502, avg. samples / sec: 939.37
Iteration:   2840, Loss function: 5.125, Average Loss: 5.498, avg. samples / sec: 986.34
Iteration:   2860, Loss function: 4.995, Average Loss: 5.492, avg. samples / sec: 955.18
Iteration:   2880, Loss function: 5.426, Average Loss: 5.487, avg. samples / sec: 896.49
Iteration:   2900, Loss function: 5.186, Average Loss: 5.482, avg. samples / sec: 999.58
Iteration:   2920, Loss function: 5.310, Average Loss: 5.477, avg. samples / sec: 995.43
Iteration:   2940, Loss function: 4.991, Average Loss: 5.474, avg. samples / sec: 988.92
Iteration:   2960, Loss function: 5.463, Average Loss: 5.470, avg. samples / sec: 980.48
Iteration:   2980, Loss function: 5.150, Average Loss: 5.467, avg. samples / sec: 940.33
Iteration:   3000, Loss function: 5.221, Average Loss: 5.461, avg. samples / sec: 994.00
Iteration:   3020, Loss function: 5.239, Average Loss: 5.456, avg. samples / sec: 930.65
Iteration:   3040, Loss function: 5.106, Average Loss: 5.451, avg. samples / sec: 966.12
Iteration:   3060, Loss function: 5.138, Average Loss: 5.445, avg. samples / sec: 945.06
Iteration:   3080, Loss function: 5.041, Average Loss: 5.440, avg. samples / sec: 957.37
:::MLLOG {"namespace": "", "time_ms": 1639074177687, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074177689, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.270, Average Loss: 5.435, avg. samples / sec: 979.51
Iteration:   3120, Loss function: 5.025, Average Loss: 5.429, avg. samples / sec: 948.99
Iteration:   3140, Loss function: 5.133, Average Loss: 5.424, avg. samples / sec: 959.32
Iteration:   3160, Loss function: 5.527, Average Loss: 5.418, avg. samples / sec: 839.97
Iteration:   3180, Loss function: 5.123, Average Loss: 5.414, avg. samples / sec: 843.66
Iteration:   3200, Loss function: 5.250, Average Loss: 5.408, avg. samples / sec: 920.81
Iteration:   3220, Loss function: 5.173, Average Loss: 5.403, avg. samples / sec: 924.92
Iteration:   3240, Loss function: 5.249, Average Loss: 5.398, avg. samples / sec: 932.82
Iteration:   3260, Loss function: 5.000, Average Loss: 5.393, avg. samples / sec: 945.38
Iteration:   3280, Loss function: 4.944, Average Loss: 5.386, avg. samples / sec: 945.88
Iteration:   3300, Loss function: 4.779, Average Loss: 5.381, avg. samples / sec: 922.19
Iteration:   3320, Loss function: 5.033, Average Loss: 5.377, avg. samples / sec: 981.85
Iteration:   3340, Loss function: 5.039, Average Loss: 5.373, avg. samples / sec: 959.71
Iteration:   3360, Loss function: 5.129, Average Loss: 5.367, avg. samples / sec: 938.50
Iteration:   3380, Loss function: 5.295, Average Loss: 5.360, avg. samples / sec: 945.00
Iteration:   3400, Loss function: 4.910, Average Loss: 5.356, avg. samples / sec: 985.45
Iteration:   3420, Loss function: 5.293, Average Loss: 5.352, avg. samples / sec: 978.50
Iteration:   3440, Loss function: 4.945, Average Loss: 5.347, avg. samples / sec: 973.80
Iteration:   3460, Loss function: 5.060, Average Loss: 5.342, avg. samples / sec: 951.69
Iteration:   3480, Loss function: 5.158, Average Loss: 5.337, avg. samples / sec: 963.80
Iteration:   3500, Loss function: 5.249, Average Loss: 5.333, avg. samples / sec: 963.58
Iteration:   3520, Loss function: 4.893, Average Loss: 5.329, avg. samples / sec: 974.80
Iteration:   3540, Loss function: 4.890, Average Loss: 5.324, avg. samples / sec: 989.07
Iteration:   3560, Loss function: 5.066, Average Loss: 5.321, avg. samples / sec: 968.28
Iteration:   3580, Loss function: 5.053, Average Loss: 5.316, avg. samples / sec: 895.18
Iteration:   3600, Loss function: 5.164, Average Loss: 5.310, avg. samples / sec: 932.13
Iteration:   3620, Loss function: 4.864, Average Loss: 5.305, avg. samples / sec: 944.52
Iteration:   3640, Loss function: 4.655, Average Loss: 5.300, avg. samples / sec: 988.61
Iteration:   3660, Loss function: 5.100, Average Loss: 5.295, avg. samples / sec: 987.28
Iteration:   3680, Loss function: 5.112, Average Loss: 5.290, avg. samples / sec: 987.27
Iteration:   3700, Loss function: 4.988, Average Loss: 5.284, avg. samples / sec: 960.27
Iteration:   3720, Loss function: 4.971, Average Loss: 5.278, avg. samples / sec: 967.78
Iteration:   3740, Loss function: 5.124, Average Loss: 5.274, avg. samples / sec: 985.06
Iteration:   3760, Loss function: 5.002, Average Loss: 5.270, avg. samples / sec: 975.26
Iteration:   3780, Loss function: 5.074, Average Loss: 5.264, avg. samples / sec: 987.92
Iteration:   3800, Loss function: 4.991, Average Loss: 5.262, avg. samples / sec: 971.27
Iteration:   3820, Loss function: 5.089, Average Loss: 5.257, avg. samples / sec: 978.44
Iteration:   3840, Loss function: 4.667, Average Loss: 5.253, avg. samples / sec: 963.84
Iteration:   3860, Loss function: 4.890, Average Loss: 5.248, avg. samples / sec: 974.59
Iteration:   3880, Loss function: 4.797, Average Loss: 5.241, avg. samples / sec: 964.23
Iteration:   3900, Loss function: 5.013, Average Loss: 5.235, avg. samples / sec: 919.83
Iteration:   3920, Loss function: 5.130, Average Loss: 5.229, avg. samples / sec: 974.52
Iteration:   3940, Loss function: 4.918, Average Loss: 5.224, avg. samples / sec: 978.40
Iteration:   3960, Loss function: 4.920, Average Loss: 5.219, avg. samples / sec: 973.08
Iteration:   3980, Loss function: 4.856, Average Loss: 5.214, avg. samples / sec: 940.02
Iteration:   4000, Loss function: 5.200, Average Loss: 5.211, avg. samples / sec: 949.10
Iteration:   4020, Loss function: 5.093, Average Loss: 5.206, avg. samples / sec: 989.45
Iteration:   4040, Loss function: 5.004, Average Loss: 5.203, avg. samples / sec: 995.19
Iteration:   4060, Loss function: 5.003, Average Loss: 5.198, avg. samples / sec: 959.20
Iteration:   4080, Loss function: 5.106, Average Loss: 5.194, avg. samples / sec: 856.58
Iteration:   4100, Loss function: 5.048, Average Loss: 5.190, avg. samples / sec: 925.47
:::MLLOG {"namespace": "", "time_ms": 1639074300810, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074300811, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.041, Average Loss: 5.186, avg. samples / sec: 933.59
Iteration:   4140, Loss function: 4.909, Average Loss: 5.181, avg. samples / sec: 957.29
Iteration:   4160, Loss function: 4.864, Average Loss: 5.175, avg. samples / sec: 941.58
Iteration:   4180, Loss function: 4.805, Average Loss: 5.170, avg. samples / sec: 988.38
Iteration:   4200, Loss function: 4.851, Average Loss: 5.165, avg. samples / sec: 990.91
Iteration:   4220, Loss function: 4.909, Average Loss: 5.161, avg. samples / sec: 976.98
Iteration:   4240, Loss function: 4.943, Average Loss: 5.155, avg. samples / sec: 954.87
Iteration:   4260, Loss function: 5.055, Average Loss: 5.151, avg. samples / sec: 973.81
Iteration:   4280, Loss function: 4.938, Average Loss: 5.145, avg. samples / sec: 971.86
Iteration:   4300, Loss function: 4.844, Average Loss: 5.138, avg. samples / sec: 894.62
Iteration:   4320, Loss function: 4.821, Average Loss: 5.133, avg. samples / sec: 952.42
Iteration:   4340, Loss function: 4.824, Average Loss: 5.127, avg. samples / sec: 957.47
Iteration:   4360, Loss function: 4.898, Average Loss: 5.123, avg. samples / sec: 961.69
Iteration:   4380, Loss function: 5.070, Average Loss: 5.118, avg. samples / sec: 1001.70
Iteration:   4400, Loss function: 5.044, Average Loss: 5.114, avg. samples / sec: 990.33
Iteration:   4420, Loss function: 4.795, Average Loss: 5.108, avg. samples / sec: 974.66
Iteration:   4440, Loss function: 4.903, Average Loss: 5.105, avg. samples / sec: 966.27
Iteration:   4460, Loss function: 5.078, Average Loss: 5.101, avg. samples / sec: 962.02
Iteration:   4480, Loss function: 5.064, Average Loss: 5.097, avg. samples / sec: 944.21
Iteration:   4500, Loss function: 4.854, Average Loss: 5.094, avg. samples / sec: 980.84
Iteration:   4520, Loss function: 4.677, Average Loss: 5.089, avg. samples / sec: 888.65
Iteration:   4540, Loss function: 5.041, Average Loss: 5.085, avg. samples / sec: 980.44
Iteration:   4560, Loss function: 4.794, Average Loss: 5.081, avg. samples / sec: 981.27
Iteration:   4580, Loss function: 4.917, Average Loss: 5.079, avg. samples / sec: 981.82
Iteration:   4600, Loss function: 4.685, Average Loss: 5.075, avg. samples / sec: 993.97
Iteration:   4620, Loss function: 4.876, Average Loss: 5.071, avg. samples / sec: 972.49
Iteration:   4640, Loss function: 4.835, Average Loss: 5.066, avg. samples / sec: 951.25
Iteration:   4660, Loss function: 4.843, Average Loss: 5.062, avg. samples / sec: 981.65
Iteration:   4680, Loss function: 5.178, Average Loss: 5.058, avg. samples / sec: 960.89
Iteration:   4700, Loss function: 4.745, Average Loss: 5.054, avg. samples / sec: 930.13
Iteration:   4720, Loss function: 4.892, Average Loss: 5.050, avg. samples / sec: 1005.31
Iteration:   4740, Loss function: 4.900, Average Loss: 5.047, avg. samples / sec: 978.15
Iteration:   4760, Loss function: 4.831, Average Loss: 5.044, avg. samples / sec: 976.27
Iteration:   4780, Loss function: 5.030, Average Loss: 5.040, avg. samples / sec: 978.88
Iteration:   4800, Loss function: 4.897, Average Loss: 5.036, avg. samples / sec: 951.56
Iteration:   4820, Loss function: 4.711, Average Loss: 5.033, avg. samples / sec: 959.22
Iteration:   4840, Loss function: 5.134, Average Loss: 5.029, avg. samples / sec: 928.82
Iteration:   4860, Loss function: 4.770, Average Loss: 5.025, avg. samples / sec: 866.04
Iteration:   4880, Loss function: 5.278, Average Loss: 5.022, avg. samples / sec: 895.83
Iteration:   4900, Loss function: 4.469, Average Loss: 5.019, avg. samples / sec: 926.44
Iteration:   4920, Loss function: 4.719, Average Loss: 5.015, avg. samples / sec: 980.44
Iteration:   4940, Loss function: 4.721, Average Loss: 5.011, avg. samples / sec: 929.23
Iteration:   4960, Loss function: 4.749, Average Loss: 5.007, avg. samples / sec: 889.21
Iteration:   4980, Loss function: 4.506, Average Loss: 5.002, avg. samples / sec: 857.13
Iteration:   5000, Loss function: 4.971, Average Loss: 4.999, avg. samples / sec: 968.98
Iteration:   5020, Loss function: 5.031, Average Loss: 4.996, avg. samples / sec: 981.34
Iteration:   5040, Loss function: 5.013, Average Loss: 4.992, avg. samples / sec: 971.13
Iteration:   5060, Loss function: 4.747, Average Loss: 4.990, avg. samples / sec: 965.07
Iteration:   5080, Loss function: 4.423, Average Loss: 4.986, avg. samples / sec: 980.29
Iteration:   5100, Loss function: 4.682, Average Loss: 4.984, avg. samples / sec: 987.30
Iteration:   5120, Loss function: 4.618, Average Loss: 4.981, avg. samples / sec: 998.66
Iteration:   5140, Loss function: 4.953, Average Loss: 4.978, avg. samples / sec: 944.45
:::MLLOG {"namespace": "", "time_ms": 1639074423436, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.99 s
:::MLLOG {"namespace": "", "time_ms": 1639074455477, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074455525, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074455526, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.859, Average Loss: 4.973, avg. samples / sec: 66.27
Iteration:   5180, Loss function: 4.831, Average Loss: 4.968, avg. samples / sec: 993.73
DONE (t=4.05s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10700
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22064
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09318
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19211
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20445
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10700 AP goal: 0.10000
Iteration:   5200, Loss function: 4.786, Average Loss: 4.964, avg. samples / sec: 997.33
:::MLLOG {"namespace": "", "time_ms": 1639074462068, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462069, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10700172642425615, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462069, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462228, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:43 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:43 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073777053, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073777183, "event_type": "POINT_IN_TIME", "key": "seed", "value": 503960980, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 503960980
:::MLLOG {"namespace": "", "time_ms": 1639073778919, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073778919, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073778923, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073778924, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073802982, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073802983, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073804369, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073804370, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073804761, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073804762, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073804763, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.661, Average Loss: 0.023, avg. samples / sec: 4.46
Iteration:     20, Loss function: 21.095, Average Loss: 0.455, avg. samples / sec: 860.56
Iteration:     40, Loss function: 20.681, Average Loss: 0.856, avg. samples / sec: 883.97
Iteration:     60, Loss function: 20.312, Average Loss: 1.245, avg. samples / sec: 894.09
Iteration:     80, Loss function: 19.414, Average Loss: 1.614, avg. samples / sec: 900.65
Iteration:    100, Loss function: 13.571, Average Loss: 1.915, avg. samples / sec: 914.84
Iteration:    120, Loss function: 10.201, Average Loss: 2.109, avg. samples / sec: 733.91
Iteration:    140, Loss function: 9.475, Average Loss: 2.261, avg. samples / sec: 923.78
Iteration:    160, Loss function: 9.051, Average Loss: 2.400, avg. samples / sec: 886.90
Iteration:    180, Loss function: 8.903, Average Loss: 2.530, avg. samples / sec: 913.41
Iteration:    200, Loss function: 8.640, Average Loss: 2.655, avg. samples / sec: 975.63
Iteration:    220, Loss function: 8.556, Average Loss: 2.779, avg. samples / sec: 950.11
Iteration:    240, Loss function: 8.706, Average Loss: 2.897, avg. samples / sec: 945.05
Iteration:    260, Loss function: 8.738, Average Loss: 3.010, avg. samples / sec: 990.90
Iteration:    280, Loss function: 8.568, Average Loss: 3.120, avg. samples / sec: 965.85
Iteration:    300, Loss function: 8.370, Average Loss: 3.224, avg. samples / sec: 984.27
Iteration:    320, Loss function: 8.368, Average Loss: 3.326, avg. samples / sec: 980.59
Iteration:    340, Loss function: 8.495, Average Loss: 3.427, avg. samples / sec: 881.43
Iteration:    360, Loss function: 8.053, Average Loss: 3.523, avg. samples / sec: 887.53
Iteration:    380, Loss function: 7.750, Average Loss: 3.613, avg. samples / sec: 888.34
Iteration:    400, Loss function: 7.942, Average Loss: 3.697, avg. samples / sec: 940.80
Iteration:    420, Loss function: 7.771, Average Loss: 3.780, avg. samples / sec: 889.95
Iteration:    440, Loss function: 8.034, Average Loss: 3.860, avg. samples / sec: 834.56
Iteration:    460, Loss function: 7.825, Average Loss: 3.938, avg. samples / sec: 905.88
Iteration:    480, Loss function: 7.448, Average Loss: 4.011, avg. samples / sec: 901.55
Iteration:    500, Loss function: 7.388, Average Loss: 4.082, avg. samples / sec: 996.60
Iteration:    520, Loss function: 7.482, Average Loss: 4.150, avg. samples / sec: 954.64
Iteration:    540, Loss function: 7.544, Average Loss: 4.217, avg. samples / sec: 949.32
Iteration:    560, Loss function: 7.287, Average Loss: 4.280, avg. samples / sec: 979.33
Iteration:    580, Loss function: 7.221, Average Loss: 4.342, avg. samples / sec: 973.64
Iteration:    600, Loss function: 7.255, Average Loss: 4.402, avg. samples / sec: 984.49
Iteration:    620, Loss function: 6.795, Average Loss: 4.458, avg. samples / sec: 802.53
Iteration:    640, Loss function: 6.958, Average Loss: 4.512, avg. samples / sec: 943.79
Iteration:    660, Loss function: 7.318, Average Loss: 4.565, avg. samples / sec: 901.90
Iteration:    680, Loss function: 7.062, Average Loss: 4.618, avg. samples / sec: 970.82
Iteration:    700, Loss function: 6.868, Average Loss: 4.666, avg. samples / sec: 956.00
Iteration:    720, Loss function: 7.063, Average Loss: 4.716, avg. samples / sec: 954.70
Iteration:    740, Loss function: 6.963, Average Loss: 4.760, avg. samples / sec: 954.70
Iteration:    760, Loss function: 7.029, Average Loss: 4.804, avg. samples / sec: 967.73
Iteration:    780, Loss function: 6.661, Average Loss: 4.846, avg. samples / sec: 975.05
Iteration:    800, Loss function: 7.232, Average Loss: 4.886, avg. samples / sec: 973.82
Iteration:    820, Loss function: 7.029, Average Loss: 4.924, avg. samples / sec: 939.34
Iteration:    840, Loss function: 6.811, Average Loss: 4.962, avg. samples / sec: 985.41
Iteration:    860, Loss function: 6.690, Average Loss: 4.997, avg. samples / sec: 871.75
Iteration:    880, Loss function: 6.872, Average Loss: 5.031, avg. samples / sec: 846.46
Iteration:    900, Loss function: 6.758, Average Loss: 5.063, avg. samples / sec: 924.16
Iteration:    920, Loss function: 6.810, Average Loss: 5.094, avg. samples / sec: 981.19
Iteration:    940, Loss function: 6.710, Average Loss: 5.123, avg. samples / sec: 989.21
Iteration:    960, Loss function: 6.442, Average Loss: 5.152, avg. samples / sec: 972.77
Iteration:    980, Loss function: 6.516, Average Loss: 5.179, avg. samples / sec: 972.84
Iteration:   1000, Loss function: 6.588, Average Loss: 5.204, avg. samples / sec: 868.46
Iteration:   1020, Loss function: 6.293, Average Loss: 5.229, avg. samples / sec: 975.32
:::MLLOG {"namespace": "", "time_ms": 1639073931383, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073931385, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.528, Average Loss: 5.253, avg. samples / sec: 992.54
Iteration:   1060, Loss function: 6.371, Average Loss: 5.277, avg. samples / sec: 1001.83
Iteration:   1080, Loss function: 6.367, Average Loss: 5.299, avg. samples / sec: 917.44
Iteration:   1100, Loss function: 6.057, Average Loss: 5.318, avg. samples / sec: 924.73
Iteration:   1120, Loss function: 6.324, Average Loss: 5.338, avg. samples / sec: 978.23
Iteration:   1140, Loss function: 6.428, Average Loss: 5.357, avg. samples / sec: 987.59
Iteration:   1160, Loss function: 6.028, Average Loss: 5.375, avg. samples / sec: 977.22
Iteration:   1180, Loss function: 6.369, Average Loss: 5.392, avg. samples / sec: 978.40
Iteration:   1200, Loss function: 6.356, Average Loss: 5.408, avg. samples / sec: 920.00
Iteration:   1220, Loss function: 6.096, Average Loss: 5.423, avg. samples / sec: 878.04
Iteration:   1240, Loss function: 6.039, Average Loss: 5.437, avg. samples / sec: 978.18
Iteration:   1260, Loss function: 5.952, Average Loss: 5.450, avg. samples / sec: 981.76
Iteration:   1280, Loss function: 5.962, Average Loss: 5.464, avg. samples / sec: 982.64
Iteration:   1300, Loss function: 5.996, Average Loss: 5.477, avg. samples / sec: 993.62
Iteration:   1320, Loss function: 6.125, Average Loss: 5.490, avg. samples / sec: 957.74
Iteration:   1340, Loss function: 6.026, Average Loss: 5.502, avg. samples / sec: 981.41
Iteration:   1360, Loss function: 6.054, Average Loss: 5.513, avg. samples / sec: 939.94
Iteration:   1380, Loss function: 6.347, Average Loss: 5.523, avg. samples / sec: 975.68
Iteration:   1400, Loss function: 6.146, Average Loss: 5.532, avg. samples / sec: 983.07
Iteration:   1420, Loss function: 5.907, Average Loss: 5.540, avg. samples / sec: 980.20
Iteration:   1440, Loss function: 6.300, Average Loss: 5.548, avg. samples / sec: 947.27
Iteration:   1460, Loss function: 6.155, Average Loss: 5.557, avg. samples / sec: 882.25
Iteration:   1480, Loss function: 5.814, Average Loss: 5.565, avg. samples / sec: 922.66
Iteration:   1500, Loss function: 6.124, Average Loss: 5.572, avg. samples / sec: 925.86
Iteration:   1520, Loss function: 5.979, Average Loss: 5.578, avg. samples / sec: 962.94
Iteration:   1540, Loss function: 5.937, Average Loss: 5.583, avg. samples / sec: 890.91
Iteration:   1560, Loss function: 5.769, Average Loss: 5.588, avg. samples / sec: 975.43
Iteration:   1580, Loss function: 5.597, Average Loss: 5.594, avg. samples / sec: 989.09
Iteration:   1600, Loss function: 5.913, Average Loss: 5.599, avg. samples / sec: 943.37
Iteration:   1620, Loss function: 5.731, Average Loss: 5.604, avg. samples / sec: 981.33
Iteration:   1640, Loss function: 6.009, Average Loss: 5.608, avg. samples / sec: 950.27
Iteration:   1660, Loss function: 6.085, Average Loss: 5.614, avg. samples / sec: 977.44
Iteration:   1680, Loss function: 5.741, Average Loss: 5.617, avg. samples / sec: 958.67
Iteration:   1700, Loss function: 5.199, Average Loss: 5.621, avg. samples / sec: 971.13
Iteration:   1720, Loss function: 5.600, Average Loss: 5.624, avg. samples / sec: 967.56
Iteration:   1740, Loss function: 5.998, Average Loss: 5.627, avg. samples / sec: 960.59
Iteration:   1760, Loss function: 5.503, Average Loss: 5.629, avg. samples / sec: 964.40
Iteration:   1780, Loss function: 5.652, Average Loss: 5.630, avg. samples / sec: 915.07
Iteration:   1800, Loss function: 5.645, Average Loss: 5.631, avg. samples / sec: 966.69
Iteration:   1820, Loss function: 5.950, Average Loss: 5.633, avg. samples / sec: 992.01
Iteration:   1840, Loss function: 5.961, Average Loss: 5.635, avg. samples / sec: 989.16
Iteration:   1860, Loss function: 5.528, Average Loss: 5.634, avg. samples / sec: 981.45
Iteration:   1880, Loss function: 5.731, Average Loss: 5.635, avg. samples / sec: 935.35
Iteration:   1900, Loss function: 5.831, Average Loss: 5.636, avg. samples / sec: 970.55
Iteration:   1920, Loss function: 5.744, Average Loss: 5.636, avg. samples / sec: 937.95
Iteration:   1940, Loss function: 5.675, Average Loss: 5.637, avg. samples / sec: 934.80
Iteration:   1960, Loss function: 5.531, Average Loss: 5.636, avg. samples / sec: 930.63
Iteration:   1980, Loss function: 5.914, Average Loss: 5.636, avg. samples / sec: 965.46
Iteration:   2000, Loss function: 5.669, Average Loss: 5.636, avg. samples / sec: 827.88
Iteration:   2020, Loss function: 5.760, Average Loss: 5.634, avg. samples / sec: 912.46
Iteration:   2040, Loss function: 5.728, Average Loss: 5.634, avg. samples / sec: 942.52
:::MLLOG {"namespace": "", "time_ms": 1639074054560, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074054562, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.656, Average Loss: 5.632, avg. samples / sec: 922.66
Iteration:   2080, Loss function: 5.073, Average Loss: 5.631, avg. samples / sec: 938.55
Iteration:   2100, Loss function: 5.458, Average Loss: 5.629, avg. samples / sec: 966.85
Iteration:   2120, Loss function: 5.443, Average Loss: 5.627, avg. samples / sec: 987.86
Iteration:   2140, Loss function: 5.268, Average Loss: 5.624, avg. samples / sec: 946.74
Iteration:   2160, Loss function: 5.347, Average Loss: 5.622, avg. samples / sec: 937.13
Iteration:   2180, Loss function: 5.477, Average Loss: 5.619, avg. samples / sec: 910.34
Iteration:   2200, Loss function: 5.524, Average Loss: 5.616, avg. samples / sec: 922.16
Iteration:   2220, Loss function: 5.614, Average Loss: 5.614, avg. samples / sec: 934.92
Iteration:   2240, Loss function: 5.497, Average Loss: 5.611, avg. samples / sec: 927.60
Iteration:   2260, Loss function: 5.108, Average Loss: 5.608, avg. samples / sec: 927.27
Iteration:   2280, Loss function: 5.152, Average Loss: 5.604, avg. samples / sec: 975.23
Iteration:   2300, Loss function: 5.222, Average Loss: 5.601, avg. samples / sec: 956.82
Iteration:   2320, Loss function: 5.173, Average Loss: 5.599, avg. samples / sec: 964.87
Iteration:   2340, Loss function: 5.548, Average Loss: 5.595, avg. samples / sec: 903.35
Iteration:   2360, Loss function: 5.223, Average Loss: 5.592, avg. samples / sec: 941.75
Iteration:   2380, Loss function: 5.308, Average Loss: 5.588, avg. samples / sec: 976.22
Iteration:   2400, Loss function: 5.515, Average Loss: 5.584, avg. samples / sec: 975.01
Iteration:   2420, Loss function: 5.333, Average Loss: 5.580, avg. samples / sec: 986.00
Iteration:   2440, Loss function: 5.548, Average Loss: 5.577, avg. samples / sec: 964.89
Iteration:   2460, Loss function: 5.023, Average Loss: 5.573, avg. samples / sec: 931.80
Iteration:   2480, Loss function: 5.347, Average Loss: 5.569, avg. samples / sec: 897.28
Iteration:   2500, Loss function: 5.412, Average Loss: 5.567, avg. samples / sec: 974.31
Iteration:   2520, Loss function: 5.274, Average Loss: 5.562, avg. samples / sec: 910.24
Iteration:   2540, Loss function: 5.367, Average Loss: 5.558, avg. samples / sec: 941.61
Iteration:   2560, Loss function: 5.174, Average Loss: 5.554, avg. samples / sec: 904.64
Iteration:   2580, Loss function: 5.254, Average Loss: 5.551, avg. samples / sec: 970.92
Iteration:   2600, Loss function: 5.526, Average Loss: 5.549, avg. samples / sec: 990.91
Iteration:   2620, Loss function: 5.452, Average Loss: 5.543, avg. samples / sec: 959.38
Iteration:   2640, Loss function: 5.182, Average Loss: 5.541, avg. samples / sec: 962.25
Iteration:   2660, Loss function: 5.111, Average Loss: 5.538, avg. samples / sec: 948.08
Iteration:   2680, Loss function: 5.160, Average Loss: 5.535, avg. samples / sec: 985.39
Iteration:   2700, Loss function: 5.141, Average Loss: 5.530, avg. samples / sec: 980.89
Iteration:   2720, Loss function: 5.349, Average Loss: 5.526, avg. samples / sec: 964.53
Iteration:   2740, Loss function: 4.998, Average Loss: 5.521, avg. samples / sec: 901.73
Iteration:   2760, Loss function: 5.041, Average Loss: 5.516, avg. samples / sec: 954.01
Iteration:   2780, Loss function: 5.414, Average Loss: 5.513, avg. samples / sec: 979.99
Iteration:   2800, Loss function: 5.077, Average Loss: 5.507, avg. samples / sec: 923.31
Iteration:   2820, Loss function: 5.312, Average Loss: 5.502, avg. samples / sec: 939.37
Iteration:   2840, Loss function: 5.125, Average Loss: 5.498, avg. samples / sec: 986.34
Iteration:   2860, Loss function: 4.995, Average Loss: 5.492, avg. samples / sec: 955.18
Iteration:   2880, Loss function: 5.426, Average Loss: 5.487, avg. samples / sec: 896.49
Iteration:   2900, Loss function: 5.186, Average Loss: 5.482, avg. samples / sec: 999.58
Iteration:   2920, Loss function: 5.310, Average Loss: 5.477, avg. samples / sec: 995.43
Iteration:   2940, Loss function: 4.991, Average Loss: 5.474, avg. samples / sec: 988.92
Iteration:   2960, Loss function: 5.463, Average Loss: 5.470, avg. samples / sec: 980.48
Iteration:   2980, Loss function: 5.150, Average Loss: 5.467, avg. samples / sec: 940.33
Iteration:   3000, Loss function: 5.221, Average Loss: 5.461, avg. samples / sec: 994.00
Iteration:   3020, Loss function: 5.239, Average Loss: 5.456, avg. samples / sec: 930.65
Iteration:   3040, Loss function: 5.106, Average Loss: 5.451, avg. samples / sec: 966.12
Iteration:   3060, Loss function: 5.138, Average Loss: 5.445, avg. samples / sec: 945.06
Iteration:   3080, Loss function: 5.041, Average Loss: 5.440, avg. samples / sec: 957.37
:::MLLOG {"namespace": "", "time_ms": 1639074177687, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074177689, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.270, Average Loss: 5.435, avg. samples / sec: 979.51
Iteration:   3120, Loss function: 5.025, Average Loss: 5.429, avg. samples / sec: 948.99
Iteration:   3140, Loss function: 5.133, Average Loss: 5.424, avg. samples / sec: 959.32
Iteration:   3160, Loss function: 5.527, Average Loss: 5.418, avg. samples / sec: 839.97
Iteration:   3180, Loss function: 5.123, Average Loss: 5.414, avg. samples / sec: 843.66
Iteration:   3200, Loss function: 5.250, Average Loss: 5.408, avg. samples / sec: 920.81
Iteration:   3220, Loss function: 5.173, Average Loss: 5.403, avg. samples / sec: 924.92
Iteration:   3240, Loss function: 5.249, Average Loss: 5.398, avg. samples / sec: 932.82
Iteration:   3260, Loss function: 5.000, Average Loss: 5.393, avg. samples / sec: 945.38
Iteration:   3280, Loss function: 4.944, Average Loss: 5.386, avg. samples / sec: 945.88
Iteration:   3300, Loss function: 4.779, Average Loss: 5.381, avg. samples / sec: 922.19
Iteration:   3320, Loss function: 5.033, Average Loss: 5.377, avg. samples / sec: 981.85
Iteration:   3340, Loss function: 5.039, Average Loss: 5.373, avg. samples / sec: 959.71
Iteration:   3360, Loss function: 5.129, Average Loss: 5.367, avg. samples / sec: 938.50
Iteration:   3380, Loss function: 5.295, Average Loss: 5.360, avg. samples / sec: 945.00
Iteration:   3400, Loss function: 4.910, Average Loss: 5.356, avg. samples / sec: 985.45
Iteration:   3420, Loss function: 5.293, Average Loss: 5.352, avg. samples / sec: 978.50
Iteration:   3440, Loss function: 4.945, Average Loss: 5.347, avg. samples / sec: 973.80
Iteration:   3460, Loss function: 5.060, Average Loss: 5.342, avg. samples / sec: 951.69
Iteration:   3480, Loss function: 5.158, Average Loss: 5.337, avg. samples / sec: 963.80
Iteration:   3500, Loss function: 5.249, Average Loss: 5.333, avg. samples / sec: 963.58
Iteration:   3520, Loss function: 4.893, Average Loss: 5.329, avg. samples / sec: 974.80
Iteration:   3540, Loss function: 4.890, Average Loss: 5.324, avg. samples / sec: 989.07
Iteration:   3560, Loss function: 5.066, Average Loss: 5.321, avg. samples / sec: 968.28
Iteration:   3580, Loss function: 5.053, Average Loss: 5.316, avg. samples / sec: 895.18
Iteration:   3600, Loss function: 5.164, Average Loss: 5.310, avg. samples / sec: 932.13
Iteration:   3620, Loss function: 4.864, Average Loss: 5.305, avg. samples / sec: 944.52
Iteration:   3640, Loss function: 4.655, Average Loss: 5.300, avg. samples / sec: 988.61
Iteration:   3660, Loss function: 5.100, Average Loss: 5.295, avg. samples / sec: 987.28
Iteration:   3680, Loss function: 5.112, Average Loss: 5.290, avg. samples / sec: 987.27
Iteration:   3700, Loss function: 4.988, Average Loss: 5.284, avg. samples / sec: 960.27
Iteration:   3720, Loss function: 4.971, Average Loss: 5.278, avg. samples / sec: 967.78
Iteration:   3740, Loss function: 5.124, Average Loss: 5.274, avg. samples / sec: 985.06
Iteration:   3760, Loss function: 5.002, Average Loss: 5.270, avg. samples / sec: 975.26
Iteration:   3780, Loss function: 5.074, Average Loss: 5.264, avg. samples / sec: 987.92
Iteration:   3800, Loss function: 4.991, Average Loss: 5.262, avg. samples / sec: 971.27
Iteration:   3820, Loss function: 5.089, Average Loss: 5.257, avg. samples / sec: 978.44
Iteration:   3840, Loss function: 4.667, Average Loss: 5.253, avg. samples / sec: 963.84
Iteration:   3860, Loss function: 4.890, Average Loss: 5.248, avg. samples / sec: 974.59
Iteration:   3880, Loss function: 4.797, Average Loss: 5.241, avg. samples / sec: 964.23
Iteration:   3900, Loss function: 5.013, Average Loss: 5.235, avg. samples / sec: 919.83
Iteration:   3920, Loss function: 5.130, Average Loss: 5.229, avg. samples / sec: 974.52
Iteration:   3940, Loss function: 4.918, Average Loss: 5.224, avg. samples / sec: 978.40
Iteration:   3960, Loss function: 4.920, Average Loss: 5.219, avg. samples / sec: 973.08
Iteration:   3980, Loss function: 4.856, Average Loss: 5.214, avg. samples / sec: 940.02
Iteration:   4000, Loss function: 5.200, Average Loss: 5.211, avg. samples / sec: 949.10
Iteration:   4020, Loss function: 5.093, Average Loss: 5.206, avg. samples / sec: 989.45
Iteration:   4040, Loss function: 5.004, Average Loss: 5.203, avg. samples / sec: 995.19
Iteration:   4060, Loss function: 5.003, Average Loss: 5.198, avg. samples / sec: 959.20
Iteration:   4080, Loss function: 5.106, Average Loss: 5.194, avg. samples / sec: 856.58
Iteration:   4100, Loss function: 5.048, Average Loss: 5.190, avg. samples / sec: 925.47
:::MLLOG {"namespace": "", "time_ms": 1639074300810, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074300811, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.041, Average Loss: 5.186, avg. samples / sec: 933.59
Iteration:   4140, Loss function: 4.909, Average Loss: 5.181, avg. samples / sec: 957.29
Iteration:   4160, Loss function: 4.864, Average Loss: 5.175, avg. samples / sec: 941.58
Iteration:   4180, Loss function: 4.805, Average Loss: 5.170, avg. samples / sec: 988.38
Iteration:   4200, Loss function: 4.851, Average Loss: 5.165, avg. samples / sec: 990.91
Iteration:   4220, Loss function: 4.909, Average Loss: 5.161, avg. samples / sec: 976.98
Iteration:   4240, Loss function: 4.943, Average Loss: 5.155, avg. samples / sec: 954.87
Iteration:   4260, Loss function: 5.055, Average Loss: 5.151, avg. samples / sec: 973.81
Iteration:   4280, Loss function: 4.938, Average Loss: 5.145, avg. samples / sec: 971.86
Iteration:   4300, Loss function: 4.844, Average Loss: 5.138, avg. samples / sec: 894.62
Iteration:   4320, Loss function: 4.821, Average Loss: 5.133, avg. samples / sec: 952.42
Iteration:   4340, Loss function: 4.824, Average Loss: 5.127, avg. samples / sec: 957.47
Iteration:   4360, Loss function: 4.898, Average Loss: 5.123, avg. samples / sec: 961.69
Iteration:   4380, Loss function: 5.070, Average Loss: 5.118, avg. samples / sec: 1001.70
Iteration:   4400, Loss function: 5.044, Average Loss: 5.114, avg. samples / sec: 990.33
Iteration:   4420, Loss function: 4.795, Average Loss: 5.108, avg. samples / sec: 974.66
Iteration:   4440, Loss function: 4.903, Average Loss: 5.105, avg. samples / sec: 966.27
Iteration:   4460, Loss function: 5.078, Average Loss: 5.101, avg. samples / sec: 962.02
Iteration:   4480, Loss function: 5.064, Average Loss: 5.097, avg. samples / sec: 944.21
Iteration:   4500, Loss function: 4.854, Average Loss: 5.094, avg. samples / sec: 980.84
Iteration:   4520, Loss function: 4.677, Average Loss: 5.089, avg. samples / sec: 888.65
Iteration:   4540, Loss function: 5.041, Average Loss: 5.085, avg. samples / sec: 980.44
Iteration:   4560, Loss function: 4.794, Average Loss: 5.081, avg. samples / sec: 981.27
Iteration:   4580, Loss function: 4.917, Average Loss: 5.079, avg. samples / sec: 981.82
Iteration:   4600, Loss function: 4.685, Average Loss: 5.075, avg. samples / sec: 993.97
Iteration:   4620, Loss function: 4.876, Average Loss: 5.071, avg. samples / sec: 972.49
Iteration:   4640, Loss function: 4.835, Average Loss: 5.066, avg. samples / sec: 951.25
Iteration:   4660, Loss function: 4.843, Average Loss: 5.062, avg. samples / sec: 981.65
Iteration:   4680, Loss function: 5.178, Average Loss: 5.058, avg. samples / sec: 960.89
Iteration:   4700, Loss function: 4.745, Average Loss: 5.054, avg. samples / sec: 930.13
Iteration:   4720, Loss function: 4.892, Average Loss: 5.050, avg. samples / sec: 1005.31
Iteration:   4740, Loss function: 4.900, Average Loss: 5.047, avg. samples / sec: 978.15
Iteration:   4760, Loss function: 4.831, Average Loss: 5.044, avg. samples / sec: 976.27
Iteration:   4780, Loss function: 5.030, Average Loss: 5.040, avg. samples / sec: 978.88
Iteration:   4800, Loss function: 4.897, Average Loss: 5.036, avg. samples / sec: 951.56
Iteration:   4820, Loss function: 4.711, Average Loss: 5.033, avg. samples / sec: 959.22
Iteration:   4840, Loss function: 5.134, Average Loss: 5.029, avg. samples / sec: 928.82
Iteration:   4860, Loss function: 4.770, Average Loss: 5.025, avg. samples / sec: 866.04
Iteration:   4880, Loss function: 5.278, Average Loss: 5.022, avg. samples / sec: 895.83
Iteration:   4900, Loss function: 4.469, Average Loss: 5.019, avg. samples / sec: 926.44
Iteration:   4920, Loss function: 4.719, Average Loss: 5.015, avg. samples / sec: 980.44
Iteration:   4940, Loss function: 4.721, Average Loss: 5.011, avg. samples / sec: 929.23
Iteration:   4960, Loss function: 4.749, Average Loss: 5.007, avg. samples / sec: 889.21
Iteration:   4980, Loss function: 4.506, Average Loss: 5.002, avg. samples / sec: 857.13
Iteration:   5000, Loss function: 4.971, Average Loss: 4.999, avg. samples / sec: 968.98
Iteration:   5020, Loss function: 5.031, Average Loss: 4.996, avg. samples / sec: 981.34
Iteration:   5040, Loss function: 5.013, Average Loss: 4.992, avg. samples / sec: 971.13
Iteration:   5060, Loss function: 4.747, Average Loss: 4.990, avg. samples / sec: 965.07
Iteration:   5080, Loss function: 4.423, Average Loss: 4.986, avg. samples / sec: 980.29
Iteration:   5100, Loss function: 4.682, Average Loss: 4.984, avg. samples / sec: 987.30
Iteration:   5120, Loss function: 4.618, Average Loss: 4.981, avg. samples / sec: 998.66
Iteration:   5140, Loss function: 4.953, Average Loss: 4.978, avg. samples / sec: 944.45
:::MLLOG {"namespace": "", "time_ms": 1639074423436, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.99 s
:::MLLOG {"namespace": "", "time_ms": 1639074455477, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074455525, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074455526, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.859, Average Loss: 4.973, avg. samples / sec: 66.27
Iteration:   5180, Loss function: 4.831, Average Loss: 4.968, avg. samples / sec: 993.73
DONE (t=4.05s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10700
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22064
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09318
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19211
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13699
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20445
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10700 AP goal: 0.10000
Iteration:   5200, Loss function: 4.786, Average Loss: 4.964, avg. samples / sec: 997.33
:::MLLOG {"namespace": "", "time_ms": 1639074462068, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462069, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10700172642425615, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462069, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074462228, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074463
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:43 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:10 PM'
START TIMING RUN WAS 2021-12-09 06:16:10 PM
ENDING TIMING RUN AT 2021-12-09 06:27:43 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:43 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ result=693
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,693,nvidia,2021-12-09 06:16:10 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,693,nvidia,2021-12-09 06:16:10 PM'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
