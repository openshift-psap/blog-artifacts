+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-crckk.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-crckk.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-crckk.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e'
Found 1 MIG instances: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073769
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:09 PM'
STARTING TIMING RUN AT 2021-12-09 06:16:09 PM GPU: 1 x 7g.40gb x 8 Pods
running benchmark
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:09 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-02-38 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ rm -f /data/coco2017/sync/2021-12-09_13-02-38
+ set +x
Thu Dec  9 18:16:09 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-crckk to the sync file ...
run-ssd--1-crckk Found 1 Pods, waiting to have 8 ...
     1	run-ssd--1-crckk
Thu Dec  9 18:16:14 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073776718, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073776841, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4039430525, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4039430525
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073778530, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073778530, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073802678, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073802678, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073803961, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073803961, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073804344, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073804345, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073804347, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.869, Average Loss: 0.023, avg. samples / sec: 4.47
Iteration:     20, Loss function: 21.041, Average Loss: 0.458, avg. samples / sec: 845.09
Iteration:     40, Loss function: 20.666, Average Loss: 0.860, avg. samples / sec: 880.46
Iteration:     60, Loss function: 20.205, Average Loss: 1.250, avg. samples / sec: 874.65
Iteration:     80, Loss function: 19.976, Average Loss: 1.624, avg. samples / sec: 831.34
Iteration:    100, Loss function: 16.190, Average Loss: 1.959, avg. samples / sec: 869.68
Iteration:    120, Loss function: 11.531, Average Loss: 2.176, avg. samples / sec: 701.21
Iteration:    140, Loss function: 9.900, Average Loss: 2.336, avg. samples / sec: 902.12
Iteration:    160, Loss function: 9.262, Average Loss: 2.478, avg. samples / sec: 961.01
Iteration:    180, Loss function: 8.961, Average Loss: 2.608, avg. samples / sec: 936.03
Iteration:    200, Loss function: 8.677, Average Loss: 2.732, avg. samples / sec: 936.42
Iteration:    220, Loss function: 8.576, Average Loss: 2.853, avg. samples / sec: 912.92
Iteration:    240, Loss function: 8.844, Average Loss: 2.971, avg. samples / sec: 956.13
Iteration:    260, Loss function: 8.724, Average Loss: 3.084, avg. samples / sec: 966.38
Iteration:    280, Loss function: 8.432, Average Loss: 3.193, avg. samples / sec: 935.33
Iteration:    300, Loss function: 8.312, Average Loss: 3.297, avg. samples / sec: 886.47
Iteration:    320, Loss function: 8.383, Average Loss: 3.399, avg. samples / sec: 917.32
Iteration:    340, Loss function: 8.510, Average Loss: 3.496, avg. samples / sec: 945.55
Iteration:    360, Loss function: 7.940, Average Loss: 3.589, avg. samples / sec: 941.87
Iteration:    380, Loss function: 8.060, Average Loss: 3.680, avg. samples / sec: 906.81
Iteration:    400, Loss function: 7.810, Average Loss: 3.765, avg. samples / sec: 967.26
Iteration:    420, Loss function: 7.797, Average Loss: 3.847, avg. samples / sec: 967.50
Iteration:    440, Loss function: 7.797, Average Loss: 3.925, avg. samples / sec: 985.51
Iteration:    460, Loss function: 7.787, Average Loss: 4.000, avg. samples / sec: 979.16
Iteration:    480, Loss function: 7.442, Average Loss: 4.072, avg. samples / sec: 959.63
Iteration:    500, Loss function: 7.746, Average Loss: 4.143, avg. samples / sec: 974.07
Iteration:    520, Loss function: 7.490, Average Loss: 4.213, avg. samples / sec: 903.63
Iteration:    540, Loss function: 7.330, Average Loss: 4.278, avg. samples / sec: 962.32
Iteration:    560, Loss function: 7.189, Average Loss: 4.339, avg. samples / sec: 964.30
Iteration:    580, Loss function: 7.276, Average Loss: 4.398, avg. samples / sec: 902.71
Iteration:    600, Loss function: 7.286, Average Loss: 4.457, avg. samples / sec: 930.85
Iteration:    620, Loss function: 7.067, Average Loss: 4.513, avg. samples / sec: 929.58
Iteration:    640, Loss function: 6.898, Average Loss: 4.568, avg. samples / sec: 995.17
Iteration:    660, Loss function: 7.162, Average Loss: 4.621, avg. samples / sec: 960.27
Iteration:    680, Loss function: 7.117, Average Loss: 4.672, avg. samples / sec: 974.58
Iteration:    700, Loss function: 6.843, Average Loss: 4.719, avg. samples / sec: 950.14
Iteration:    720, Loss function: 6.943, Average Loss: 4.767, avg. samples / sec: 962.23
Iteration:    740, Loss function: 6.864, Average Loss: 4.810, avg. samples / sec: 977.64
Iteration:    760, Loss function: 6.984, Average Loss: 4.854, avg. samples / sec: 897.66
Iteration:    780, Loss function: 6.668, Average Loss: 4.896, avg. samples / sec: 899.94
Iteration:    800, Loss function: 7.134, Average Loss: 4.935, avg. samples / sec: 969.21
Iteration:    820, Loss function: 6.700, Average Loss: 4.972, avg. samples / sec: 945.02
Iteration:    840, Loss function: 6.779, Average Loss: 5.007, avg. samples / sec: 984.18
Iteration:    860, Loss function: 6.864, Average Loss: 5.041, avg. samples / sec: 989.57
Iteration:    880, Loss function: 6.689, Average Loss: 5.075, avg. samples / sec: 980.30
Iteration:    900, Loss function: 6.629, Average Loss: 5.105, avg. samples / sec: 977.50
Iteration:    920, Loss function: 6.578, Average Loss: 5.135, avg. samples / sec: 967.61
Iteration:    940, Loss function: 6.741, Average Loss: 5.165, avg. samples / sec: 909.84
Iteration:    960, Loss function: 6.415, Average Loss: 5.192, avg. samples / sec: 959.36
Iteration:    980, Loss function: 6.453, Average Loss: 5.219, avg. samples / sec: 897.75
Iteration:   1000, Loss function: 6.674, Average Loss: 5.245, avg. samples / sec: 985.03
Iteration:   1020, Loss function: 6.356, Average Loss: 5.268, avg. samples / sec: 935.33
:::MLLOG {"namespace": "", "time_ms": 1639073930247, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073930249, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.440, Average Loss: 5.290, avg. samples / sec: 957.95
Iteration:   1060, Loss function: 6.365, Average Loss: 5.312, avg. samples / sec: 984.77
Iteration:   1080, Loss function: 6.344, Average Loss: 5.334, avg. samples / sec: 958.01
Iteration:   1100, Loss function: 6.203, Average Loss: 5.353, avg. samples / sec: 988.94
Iteration:   1120, Loss function: 6.219, Average Loss: 5.372, avg. samples / sec: 943.79
Iteration:   1140, Loss function: 6.312, Average Loss: 5.390, avg. samples / sec: 938.52
Iteration:   1160, Loss function: 6.132, Average Loss: 5.407, avg. samples / sec: 979.68
Iteration:   1180, Loss function: 6.399, Average Loss: 5.425, avg. samples / sec: 993.66
Iteration:   1200, Loss function: 6.241, Average Loss: 5.441, avg. samples / sec: 995.55
Iteration:   1220, Loss function: 6.229, Average Loss: 5.457, avg. samples / sec: 968.86
Iteration:   1240, Loss function: 6.113, Average Loss: 5.469, avg. samples / sec: 961.94
Iteration:   1260, Loss function: 6.027, Average Loss: 5.481, avg. samples / sec: 929.42
Iteration:   1280, Loss function: 5.828, Average Loss: 5.493, avg. samples / sec: 967.13
Iteration:   1300, Loss function: 6.208, Average Loss: 5.506, avg. samples / sec: 973.79
Iteration:   1320, Loss function: 6.029, Average Loss: 5.518, avg. samples / sec: 953.07
Iteration:   1340, Loss function: 5.739, Average Loss: 5.527, avg. samples / sec: 991.09
Iteration:   1360, Loss function: 5.930, Average Loss: 5.537, avg. samples / sec: 969.58
Iteration:   1380, Loss function: 6.112, Average Loss: 5.547, avg. samples / sec: 936.16
Iteration:   1400, Loss function: 5.996, Average Loss: 5.555, avg. samples / sec: 900.49
Iteration:   1420, Loss function: 5.858, Average Loss: 5.563, avg. samples / sec: 982.73
Iteration:   1440, Loss function: 6.299, Average Loss: 5.571, avg. samples / sec: 975.93
Iteration:   1460, Loss function: 6.432, Average Loss: 5.579, avg. samples / sec: 979.88
Iteration:   1480, Loss function: 5.877, Average Loss: 5.587, avg. samples / sec: 982.52
Iteration:   1500, Loss function: 5.999, Average Loss: 5.595, avg. samples / sec: 941.06
Iteration:   1520, Loss function: 5.968, Average Loss: 5.600, avg. samples / sec: 944.81
Iteration:   1540, Loss function: 6.071, Average Loss: 5.605, avg. samples / sec: 913.99
Iteration:   1560, Loss function: 5.736, Average Loss: 5.609, avg. samples / sec: 951.87
Iteration:   1580, Loss function: 5.620, Average Loss: 5.614, avg. samples / sec: 943.34
Iteration:   1600, Loss function: 6.080, Average Loss: 5.619, avg. samples / sec: 896.91
Iteration:   1620, Loss function: 5.875, Average Loss: 5.624, avg. samples / sec: 909.34
Iteration:   1640, Loss function: 6.005, Average Loss: 5.627, avg. samples / sec: 926.09
Iteration:   1660, Loss function: 5.865, Average Loss: 5.630, avg. samples / sec: 971.93
Iteration:   1680, Loss function: 5.743, Average Loss: 5.634, avg. samples / sec: 965.61
Iteration:   1700, Loss function: 5.469, Average Loss: 5.638, avg. samples / sec: 978.74
Iteration:   1720, Loss function: 5.660, Average Loss: 5.639, avg. samples / sec: 963.56
Iteration:   1740, Loss function: 5.777, Average Loss: 5.641, avg. samples / sec: 957.47
Iteration:   1760, Loss function: 5.597, Average Loss: 5.643, avg. samples / sec: 942.55
Iteration:   1780, Loss function: 5.744, Average Loss: 5.645, avg. samples / sec: 951.92
Iteration:   1800, Loss function: 5.554, Average Loss: 5.648, avg. samples / sec: 985.49
Iteration:   1820, Loss function: 5.956, Average Loss: 5.650, avg. samples / sec: 1006.84
Iteration:   1840, Loss function: 5.815, Average Loss: 5.651, avg. samples / sec: 929.88
Iteration:   1860, Loss function: 5.690, Average Loss: 5.650, avg. samples / sec: 967.57
Iteration:   1880, Loss function: 6.124, Average Loss: 5.652, avg. samples / sec: 933.66
Iteration:   1900, Loss function: 5.793, Average Loss: 5.652, avg. samples / sec: 993.24
Iteration:   1920, Loss function: 5.543, Average Loss: 5.651, avg. samples / sec: 999.10
Iteration:   1940, Loss function: 5.688, Average Loss: 5.650, avg. samples / sec: 990.96
Iteration:   1960, Loss function: 5.541, Average Loss: 5.649, avg. samples / sec: 967.87
Iteration:   1980, Loss function: 5.632, Average Loss: 5.648, avg. samples / sec: 969.18
Iteration:   2000, Loss function: 5.484, Average Loss: 5.647, avg. samples / sec: 970.80
Iteration:   2020, Loss function: 5.549, Average Loss: 5.646, avg. samples / sec: 970.25
Iteration:   2040, Loss function: 5.670, Average Loss: 5.645, avg. samples / sec: 916.10
:::MLLOG {"namespace": "", "time_ms": 1639074052521, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074052524, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.535, Average Loss: 5.643, avg. samples / sec: 986.95
Iteration:   2080, Loss function: 5.045, Average Loss: 5.640, avg. samples / sec: 889.40
Iteration:   2100, Loss function: 5.450, Average Loss: 5.638, avg. samples / sec: 963.30
Iteration:   2120, Loss function: 5.328, Average Loss: 5.635, avg. samples / sec: 933.86
Iteration:   2140, Loss function: 5.405, Average Loss: 5.631, avg. samples / sec: 908.24
Iteration:   2160, Loss function: 5.303, Average Loss: 5.629, avg. samples / sec: 956.44
Iteration:   2180, Loss function: 5.430, Average Loss: 5.627, avg. samples / sec: 903.13
Iteration:   2200, Loss function: 5.581, Average Loss: 5.624, avg. samples / sec: 971.71
Iteration:   2220, Loss function: 5.515, Average Loss: 5.620, avg. samples / sec: 945.57
Iteration:   2240, Loss function: 5.492, Average Loss: 5.618, avg. samples / sec: 971.18
Iteration:   2260, Loss function: 5.248, Average Loss: 5.615, avg. samples / sec: 964.75
Iteration:   2280, Loss function: 5.152, Average Loss: 5.612, avg. samples / sec: 922.74
Iteration:   2300, Loss function: 5.120, Average Loss: 5.608, avg. samples / sec: 970.65
Iteration:   2320, Loss function: 5.138, Average Loss: 5.606, avg. samples / sec: 930.87
Iteration:   2340, Loss function: 5.479, Average Loss: 5.603, avg. samples / sec: 980.51
Iteration:   2360, Loss function: 5.255, Average Loss: 5.598, avg. samples / sec: 900.38
Iteration:   2380, Loss function: 5.437, Average Loss: 5.594, avg. samples / sec: 894.96
Iteration:   2400, Loss function: 5.677, Average Loss: 5.589, avg. samples / sec: 885.59
Iteration:   2420, Loss function: 5.425, Average Loss: 5.585, avg. samples / sec: 948.26
Iteration:   2440, Loss function: 5.461, Average Loss: 5.582, avg. samples / sec: 944.61
Iteration:   2460, Loss function: 5.108, Average Loss: 5.579, avg. samples / sec: 964.65
Iteration:   2480, Loss function: 5.411, Average Loss: 5.575, avg. samples / sec: 965.52
Iteration:   2500, Loss function: 5.438, Average Loss: 5.571, avg. samples / sec: 990.09
Iteration:   2520, Loss function: 5.498, Average Loss: 5.565, avg. samples / sec: 980.28
Iteration:   2540, Loss function: 5.363, Average Loss: 5.562, avg. samples / sec: 924.45
Iteration:   2560, Loss function: 5.247, Average Loss: 5.558, avg. samples / sec: 926.35
Iteration:   2580, Loss function: 5.494, Average Loss: 5.556, avg. samples / sec: 976.34
Iteration:   2600, Loss function: 5.452, Average Loss: 5.553, avg. samples / sec: 944.08
Iteration:   2620, Loss function: 5.254, Average Loss: 5.548, avg. samples / sec: 894.56
Iteration:   2640, Loss function: 5.338, Average Loss: 5.545, avg. samples / sec: 931.38
Iteration:   2660, Loss function: 5.102, Average Loss: 5.542, avg. samples / sec: 935.41
Iteration:   2680, Loss function: 5.218, Average Loss: 5.538, avg. samples / sec: 974.50
Iteration:   2700, Loss function: 5.250, Average Loss: 5.532, avg. samples / sec: 924.14
Iteration:   2720, Loss function: 5.203, Average Loss: 5.528, avg. samples / sec: 944.08
Iteration:   2740, Loss function: 5.066, Average Loss: 5.524, avg. samples / sec: 963.29
Iteration:   2760, Loss function: 5.108, Average Loss: 5.518, avg. samples / sec: 972.74
Iteration:   2780, Loss function: 5.585, Average Loss: 5.515, avg. samples / sec: 983.42
Iteration:   2800, Loss function: 5.101, Average Loss: 5.510, avg. samples / sec: 971.05
Iteration:   2820, Loss function: 5.448, Average Loss: 5.506, avg. samples / sec: 979.75
Iteration:   2840, Loss function: 5.076, Average Loss: 5.502, avg. samples / sec: 924.04
Iteration:   2860, Loss function: 5.055, Average Loss: 5.497, avg. samples / sec: 921.60
Iteration:   2880, Loss function: 5.118, Average Loss: 5.492, avg. samples / sec: 987.67
Iteration:   2900, Loss function: 5.093, Average Loss: 5.488, avg. samples / sec: 980.89
Iteration:   2920, Loss function: 5.140, Average Loss: 5.483, avg. samples / sec: 990.07
Iteration:   2940, Loss function: 4.922, Average Loss: 5.479, avg. samples / sec: 996.41
Iteration:   2960, Loss function: 5.373, Average Loss: 5.474, avg. samples / sec: 985.98
Iteration:   2980, Loss function: 5.310, Average Loss: 5.470, avg. samples / sec: 982.76
Iteration:   3000, Loss function: 5.316, Average Loss: 5.465, avg. samples / sec: 931.37
Iteration:   3020, Loss function: 5.320, Average Loss: 5.459, avg. samples / sec: 936.39
Iteration:   3040, Loss function: 5.255, Average Loss: 5.454, avg. samples / sec: 933.96
Iteration:   3060, Loss function: 5.121, Average Loss: 5.448, avg. samples / sec: 900.29
Iteration:   3080, Loss function: 4.902, Average Loss: 5.443, avg. samples / sec: 937.25
:::MLLOG {"namespace": "", "time_ms": 1639074176289, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074176292, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.107, Average Loss: 5.437, avg. samples / sec: 988.54
Iteration:   3120, Loss function: 4.919, Average Loss: 5.431, avg. samples / sec: 889.65
Iteration:   3140, Loss function: 5.083, Average Loss: 5.426, avg. samples / sec: 940.04
Iteration:   3160, Loss function: 5.439, Average Loss: 5.420, avg. samples / sec: 954.06
Iteration:   3180, Loss function: 5.018, Average Loss: 5.414, avg. samples / sec: 980.67
Iteration:   3200, Loss function: 5.205, Average Loss: 5.409, avg. samples / sec: 971.21
Iteration:   3220, Loss function: 5.083, Average Loss: 5.403, avg. samples / sec: 979.13
Iteration:   3240, Loss function: 5.345, Average Loss: 5.398, avg. samples / sec: 996.38
Iteration:   3260, Loss function: 5.072, Average Loss: 5.392, avg. samples / sec: 972.63
Iteration:   3280, Loss function: 5.025, Average Loss: 5.387, avg. samples / sec: 967.27
Iteration:   3300, Loss function: 4.993, Average Loss: 5.382, avg. samples / sec: 985.41
Iteration:   3320, Loss function: 5.058, Average Loss: 5.377, avg. samples / sec: 981.14
Iteration:   3340, Loss function: 5.061, Average Loss: 5.372, avg. samples / sec: 926.32
Iteration:   3360, Loss function: 5.085, Average Loss: 5.366, avg. samples / sec: 954.12
Iteration:   3380, Loss function: 5.129, Average Loss: 5.359, avg. samples / sec: 984.22
Iteration:   3400, Loss function: 4.747, Average Loss: 5.354, avg. samples / sec: 984.18
Iteration:   3420, Loss function: 5.214, Average Loss: 5.349, avg. samples / sec: 959.46
Iteration:   3440, Loss function: 4.914, Average Loss: 5.344, avg. samples / sec: 943.96
Iteration:   3460, Loss function: 5.100, Average Loss: 5.339, avg. samples / sec: 862.02
Iteration:   3480, Loss function: 5.374, Average Loss: 5.335, avg. samples / sec: 985.50
Iteration:   3500, Loss function: 5.192, Average Loss: 5.331, avg. samples / sec: 987.70
Iteration:   3520, Loss function: 5.233, Average Loss: 5.328, avg. samples / sec: 973.34
Iteration:   3540, Loss function: 5.125, Average Loss: 5.323, avg. samples / sec: 947.68
Iteration:   3560, Loss function: 4.976, Average Loss: 5.319, avg. samples / sec: 951.83
Iteration:   3580, Loss function: 5.154, Average Loss: 5.315, avg. samples / sec: 977.31
Iteration:   3600, Loss function: 5.293, Average Loss: 5.309, avg. samples / sec: 954.00
Iteration:   3620, Loss function: 4.970, Average Loss: 5.305, avg. samples / sec: 973.06
Iteration:   3640, Loss function: 4.712, Average Loss: 5.299, avg. samples / sec: 978.35
Iteration:   3660, Loss function: 5.015, Average Loss: 5.294, avg. samples / sec: 982.32
Iteration:   3680, Loss function: 5.215, Average Loss: 5.289, avg. samples / sec: 969.39
Iteration:   3700, Loss function: 4.993, Average Loss: 5.283, avg. samples / sec: 988.15
Iteration:   3720, Loss function: 5.031, Average Loss: 5.277, avg. samples / sec: 895.71
Iteration:   3740, Loss function: 5.144, Average Loss: 5.273, avg. samples / sec: 943.96
Iteration:   3760, Loss function: 5.002, Average Loss: 5.268, avg. samples / sec: 974.51
Iteration:   3780, Loss function: 5.031, Average Loss: 5.263, avg. samples / sec: 983.65
Iteration:   3800, Loss function: 5.109, Average Loss: 5.259, avg. samples / sec: 991.15
Iteration:   3820, Loss function: 5.365, Average Loss: 5.255, avg. samples / sec: 913.39
Iteration:   3840, Loss function: 4.859, Average Loss: 5.250, avg. samples / sec: 935.81
Iteration:   3860, Loss function: 4.880, Average Loss: 5.245, avg. samples / sec: 954.53
Iteration:   3880, Loss function: 4.970, Average Loss: 5.240, avg. samples / sec: 997.01
Iteration:   3900, Loss function: 5.138, Average Loss: 5.235, avg. samples / sec: 947.13
Iteration:   3920, Loss function: 5.240, Average Loss: 5.229, avg. samples / sec: 963.73
Iteration:   3940, Loss function: 5.022, Average Loss: 5.224, avg. samples / sec: 978.60
Iteration:   3960, Loss function: 4.952, Average Loss: 5.220, avg. samples / sec: 959.93
Iteration:   3980, Loss function: 4.915, Average Loss: 5.215, avg. samples / sec: 988.37
Iteration:   4000, Loss function: 5.004, Average Loss: 5.211, avg. samples / sec: 985.10
Iteration:   4020, Loss function: 4.898, Average Loss: 5.206, avg. samples / sec: 895.11
Iteration:   4040, Loss function: 5.232, Average Loss: 5.203, avg. samples / sec: 943.62
Iteration:   4060, Loss function: 5.031, Average Loss: 5.199, avg. samples / sec: 982.82
Iteration:   4080, Loss function: 5.033, Average Loss: 5.194, avg. samples / sec: 944.92
Iteration:   4100, Loss function: 5.159, Average Loss: 5.191, avg. samples / sec: 990.16
:::MLLOG {"namespace": "", "time_ms": 1639074298351, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074298353, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.857, Average Loss: 5.186, avg. samples / sec: 975.81
Iteration:   4140, Loss function: 5.014, Average Loss: 5.181, avg. samples / sec: 988.48
Iteration:   4160, Loss function: 5.005, Average Loss: 5.174, avg. samples / sec: 972.34
Iteration:   4180, Loss function: 4.887, Average Loss: 5.169, avg. samples / sec: 940.01
Iteration:   4200, Loss function: 4.874, Average Loss: 5.164, avg. samples / sec: 994.69
Iteration:   4220, Loss function: 4.700, Average Loss: 5.159, avg. samples / sec: 896.88
Iteration:   4240, Loss function: 4.961, Average Loss: 5.154, avg. samples / sec: 923.69
Iteration:   4260, Loss function: 5.144, Average Loss: 5.149, avg. samples / sec: 905.42
Iteration:   4280, Loss function: 5.071, Average Loss: 5.143, avg. samples / sec: 945.19
Iteration:   4300, Loss function: 4.708, Average Loss: 5.138, avg. samples / sec: 978.93
Iteration:   4320, Loss function: 4.592, Average Loss: 5.132, avg. samples / sec: 1002.10
Iteration:   4340, Loss function: 4.854, Average Loss: 5.127, avg. samples / sec: 960.89
Iteration:   4360, Loss function: 4.702, Average Loss: 5.122, avg. samples / sec: 925.70
Iteration:   4380, Loss function: 5.086, Average Loss: 5.116, avg. samples / sec: 955.49
Iteration:   4400, Loss function: 4.874, Average Loss: 5.112, avg. samples / sec: 907.89
Iteration:   4420, Loss function: 4.847, Average Loss: 5.106, avg. samples / sec: 971.15
Iteration:   4440, Loss function: 4.921, Average Loss: 5.102, avg. samples / sec: 985.87
Iteration:   4460, Loss function: 5.126, Average Loss: 5.098, avg. samples / sec: 975.92
Iteration:   4480, Loss function: 4.910, Average Loss: 5.094, avg. samples / sec: 994.16
Iteration:   4500, Loss function: 4.995, Average Loss: 5.092, avg. samples / sec: 959.73
Iteration:   4520, Loss function: 4.750, Average Loss: 5.088, avg. samples / sec: 938.80
Iteration:   4540, Loss function: 5.007, Average Loss: 5.084, avg. samples / sec: 948.49
Iteration:   4560, Loss function: 4.805, Average Loss: 5.080, avg. samples / sec: 875.62
Iteration:   4580, Loss function: 4.683, Average Loss: 5.077, avg. samples / sec: 919.35
Iteration:   4600, Loss function: 4.903, Average Loss: 5.073, avg. samples / sec: 892.30
Iteration:   4620, Loss function: 4.707, Average Loss: 5.069, avg. samples / sec: 966.40
Iteration:   4640, Loss function: 4.635, Average Loss: 5.064, avg. samples / sec: 944.52
Iteration:   4660, Loss function: 4.565, Average Loss: 5.061, avg. samples / sec: 884.06
Iteration:   4680, Loss function: 5.213, Average Loss: 5.055, avg. samples / sec: 919.80
Iteration:   4700, Loss function: 4.693, Average Loss: 5.052, avg. samples / sec: 918.66
Iteration:   4720, Loss function: 4.668, Average Loss: 5.047, avg. samples / sec: 905.99
Iteration:   4740, Loss function: 4.794, Average Loss: 5.043, avg. samples / sec: 899.00
Iteration:   4760, Loss function: 4.929, Average Loss: 5.040, avg. samples / sec: 975.39
Iteration:   4780, Loss function: 5.019, Average Loss: 5.036, avg. samples / sec: 986.47
Iteration:   4800, Loss function: 4.948, Average Loss: 5.033, avg. samples / sec: 948.89
Iteration:   4820, Loss function: 4.795, Average Loss: 5.029, avg. samples / sec: 975.39
Iteration:   4840, Loss function: 4.968, Average Loss: 5.025, avg. samples / sec: 923.91
Iteration:   4860, Loss function: 4.696, Average Loss: 5.020, avg. samples / sec: 969.00
Iteration:   4880, Loss function: 5.190, Average Loss: 5.016, avg. samples / sec: 960.15
Iteration:   4900, Loss function: 4.420, Average Loss: 5.012, avg. samples / sec: 963.39
Iteration:   4920, Loss function: 4.691, Average Loss: 5.009, avg. samples / sec: 934.00
Iteration:   4940, Loss function: 4.697, Average Loss: 5.006, avg. samples / sec: 914.59
Iteration:   4960, Loss function: 4.691, Average Loss: 5.002, avg. samples / sec: 960.98
Iteration:   4980, Loss function: 4.465, Average Loss: 4.998, avg. samples / sec: 968.39
Iteration:   5000, Loss function: 4.886, Average Loss: 4.995, avg. samples / sec: 926.59
Iteration:   5020, Loss function: 4.999, Average Loss: 4.992, avg. samples / sec: 947.64
Iteration:   5040, Loss function: 5.055, Average Loss: 4.990, avg. samples / sec: 940.16
Iteration:   5060, Loss function: 4.649, Average Loss: 4.987, avg. samples / sec: 968.61
Iteration:   5080, Loss function: 4.631, Average Loss: 4.983, avg. samples / sec: 993.79
Iteration:   5100, Loss function: 4.740, Average Loss: 4.979, avg. samples / sec: 975.22
Iteration:   5120, Loss function: 4.631, Average Loss: 4.975, avg. samples / sec: 930.75
Iteration:   5140, Loss function: 4.855, Average Loss: 4.972, avg. samples / sec: 979.19
:::MLLOG {"namespace": "", "time_ms": 1639074422262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.13 s
:::MLLOG {"namespace": "", "time_ms": 1639074453447, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074453525, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074453525, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.69s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.012, Average Loss: 4.966, avg. samples / sec: 67.95
DONE (t=2.99s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10646
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21617
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09337
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19061
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10646 AP goal: 0.10000
Iteration:   5180, Loss function: 4.962, Average Loss: 4.962, avg. samples / sec: 1007.10
:::MLLOG {"namespace": "", "time_ms": 1639074457726, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457727, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10645963274998495, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457727, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457898, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:39 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:39 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073776718, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073776841, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4039430525, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4039430525
:::MLLOG {"namespace": "", "time_ms": 1639073778530, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073778530, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073778534, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073778535, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073802678, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073802678, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073803961, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073803961, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073804344, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073804345, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073804347, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.869, Average Loss: 0.023, avg. samples / sec: 4.47
Iteration:     20, Loss function: 21.041, Average Loss: 0.458, avg. samples / sec: 845.09
Iteration:     40, Loss function: 20.666, Average Loss: 0.860, avg. samples / sec: 880.46
Iteration:     60, Loss function: 20.205, Average Loss: 1.250, avg. samples / sec: 874.65
Iteration:     80, Loss function: 19.976, Average Loss: 1.624, avg. samples / sec: 831.34
Iteration:    100, Loss function: 16.190, Average Loss: 1.959, avg. samples / sec: 869.68
Iteration:    120, Loss function: 11.531, Average Loss: 2.176, avg. samples / sec: 701.21
Iteration:    140, Loss function: 9.900, Average Loss: 2.336, avg. samples / sec: 902.12
Iteration:    160, Loss function: 9.262, Average Loss: 2.478, avg. samples / sec: 961.01
Iteration:    180, Loss function: 8.961, Average Loss: 2.608, avg. samples / sec: 936.03
Iteration:    200, Loss function: 8.677, Average Loss: 2.732, avg. samples / sec: 936.42
Iteration:    220, Loss function: 8.576, Average Loss: 2.853, avg. samples / sec: 912.92
Iteration:    240, Loss function: 8.844, Average Loss: 2.971, avg. samples / sec: 956.13
Iteration:    260, Loss function: 8.724, Average Loss: 3.084, avg. samples / sec: 966.38
Iteration:    280, Loss function: 8.432, Average Loss: 3.193, avg. samples / sec: 935.33
Iteration:    300, Loss function: 8.312, Average Loss: 3.297, avg. samples / sec: 886.47
Iteration:    320, Loss function: 8.383, Average Loss: 3.399, avg. samples / sec: 917.32
Iteration:    340, Loss function: 8.510, Average Loss: 3.496, avg. samples / sec: 945.55
Iteration:    360, Loss function: 7.940, Average Loss: 3.589, avg. samples / sec: 941.87
Iteration:    380, Loss function: 8.060, Average Loss: 3.680, avg. samples / sec: 906.81
Iteration:    400, Loss function: 7.810, Average Loss: 3.765, avg. samples / sec: 967.26
Iteration:    420, Loss function: 7.797, Average Loss: 3.847, avg. samples / sec: 967.50
Iteration:    440, Loss function: 7.797, Average Loss: 3.925, avg. samples / sec: 985.51
Iteration:    460, Loss function: 7.787, Average Loss: 4.000, avg. samples / sec: 979.16
Iteration:    480, Loss function: 7.442, Average Loss: 4.072, avg. samples / sec: 959.63
Iteration:    500, Loss function: 7.746, Average Loss: 4.143, avg. samples / sec: 974.07
Iteration:    520, Loss function: 7.490, Average Loss: 4.213, avg. samples / sec: 903.63
Iteration:    540, Loss function: 7.330, Average Loss: 4.278, avg. samples / sec: 962.32
Iteration:    560, Loss function: 7.189, Average Loss: 4.339, avg. samples / sec: 964.30
Iteration:    580, Loss function: 7.276, Average Loss: 4.398, avg. samples / sec: 902.71
Iteration:    600, Loss function: 7.286, Average Loss: 4.457, avg. samples / sec: 930.85
Iteration:    620, Loss function: 7.067, Average Loss: 4.513, avg. samples / sec: 929.58
Iteration:    640, Loss function: 6.898, Average Loss: 4.568, avg. samples / sec: 995.17
Iteration:    660, Loss function: 7.162, Average Loss: 4.621, avg. samples / sec: 960.27
Iteration:    680, Loss function: 7.117, Average Loss: 4.672, avg. samples / sec: 974.58
Iteration:    700, Loss function: 6.843, Average Loss: 4.719, avg. samples / sec: 950.14
Iteration:    720, Loss function: 6.943, Average Loss: 4.767, avg. samples / sec: 962.23
Iteration:    740, Loss function: 6.864, Average Loss: 4.810, avg. samples / sec: 977.64
Iteration:    760, Loss function: 6.984, Average Loss: 4.854, avg. samples / sec: 897.66
Iteration:    780, Loss function: 6.668, Average Loss: 4.896, avg. samples / sec: 899.94
Iteration:    800, Loss function: 7.134, Average Loss: 4.935, avg. samples / sec: 969.21
Iteration:    820, Loss function: 6.700, Average Loss: 4.972, avg. samples / sec: 945.02
Iteration:    840, Loss function: 6.779, Average Loss: 5.007, avg. samples / sec: 984.18
Iteration:    860, Loss function: 6.864, Average Loss: 5.041, avg. samples / sec: 989.57
Iteration:    880, Loss function: 6.689, Average Loss: 5.075, avg. samples / sec: 980.30
Iteration:    900, Loss function: 6.629, Average Loss: 5.105, avg. samples / sec: 977.50
Iteration:    920, Loss function: 6.578, Average Loss: 5.135, avg. samples / sec: 967.61
Iteration:    940, Loss function: 6.741, Average Loss: 5.165, avg. samples / sec: 909.84
Iteration:    960, Loss function: 6.415, Average Loss: 5.192, avg. samples / sec: 959.36
Iteration:    980, Loss function: 6.453, Average Loss: 5.219, avg. samples / sec: 897.75
Iteration:   1000, Loss function: 6.674, Average Loss: 5.245, avg. samples / sec: 985.03
Iteration:   1020, Loss function: 6.356, Average Loss: 5.268, avg. samples / sec: 935.33
:::MLLOG {"namespace": "", "time_ms": 1639073930247, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073930249, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.440, Average Loss: 5.290, avg. samples / sec: 957.95
Iteration:   1060, Loss function: 6.365, Average Loss: 5.312, avg. samples / sec: 984.77
Iteration:   1080, Loss function: 6.344, Average Loss: 5.334, avg. samples / sec: 958.01
Iteration:   1100, Loss function: 6.203, Average Loss: 5.353, avg. samples / sec: 988.94
Iteration:   1120, Loss function: 6.219, Average Loss: 5.372, avg. samples / sec: 943.79
Iteration:   1140, Loss function: 6.312, Average Loss: 5.390, avg. samples / sec: 938.52
Iteration:   1160, Loss function: 6.132, Average Loss: 5.407, avg. samples / sec: 979.68
Iteration:   1180, Loss function: 6.399, Average Loss: 5.425, avg. samples / sec: 993.66
Iteration:   1200, Loss function: 6.241, Average Loss: 5.441, avg. samples / sec: 995.55
Iteration:   1220, Loss function: 6.229, Average Loss: 5.457, avg. samples / sec: 968.86
Iteration:   1240, Loss function: 6.113, Average Loss: 5.469, avg. samples / sec: 961.94
Iteration:   1260, Loss function: 6.027, Average Loss: 5.481, avg. samples / sec: 929.42
Iteration:   1280, Loss function: 5.828, Average Loss: 5.493, avg. samples / sec: 967.13
Iteration:   1300, Loss function: 6.208, Average Loss: 5.506, avg. samples / sec: 973.79
Iteration:   1320, Loss function: 6.029, Average Loss: 5.518, avg. samples / sec: 953.07
Iteration:   1340, Loss function: 5.739, Average Loss: 5.527, avg. samples / sec: 991.09
Iteration:   1360, Loss function: 5.930, Average Loss: 5.537, avg. samples / sec: 969.58
Iteration:   1380, Loss function: 6.112, Average Loss: 5.547, avg. samples / sec: 936.16
Iteration:   1400, Loss function: 5.996, Average Loss: 5.555, avg. samples / sec: 900.49
Iteration:   1420, Loss function: 5.858, Average Loss: 5.563, avg. samples / sec: 982.73
Iteration:   1440, Loss function: 6.299, Average Loss: 5.571, avg. samples / sec: 975.93
Iteration:   1460, Loss function: 6.432, Average Loss: 5.579, avg. samples / sec: 979.88
Iteration:   1480, Loss function: 5.877, Average Loss: 5.587, avg. samples / sec: 982.52
Iteration:   1500, Loss function: 5.999, Average Loss: 5.595, avg. samples / sec: 941.06
Iteration:   1520, Loss function: 5.968, Average Loss: 5.600, avg. samples / sec: 944.81
Iteration:   1540, Loss function: 6.071, Average Loss: 5.605, avg. samples / sec: 913.99
Iteration:   1560, Loss function: 5.736, Average Loss: 5.609, avg. samples / sec: 951.87
Iteration:   1580, Loss function: 5.620, Average Loss: 5.614, avg. samples / sec: 943.34
Iteration:   1600, Loss function: 6.080, Average Loss: 5.619, avg. samples / sec: 896.91
Iteration:   1620, Loss function: 5.875, Average Loss: 5.624, avg. samples / sec: 909.34
Iteration:   1640, Loss function: 6.005, Average Loss: 5.627, avg. samples / sec: 926.09
Iteration:   1660, Loss function: 5.865, Average Loss: 5.630, avg. samples / sec: 971.93
Iteration:   1680, Loss function: 5.743, Average Loss: 5.634, avg. samples / sec: 965.61
Iteration:   1700, Loss function: 5.469, Average Loss: 5.638, avg. samples / sec: 978.74
Iteration:   1720, Loss function: 5.660, Average Loss: 5.639, avg. samples / sec: 963.56
Iteration:   1740, Loss function: 5.777, Average Loss: 5.641, avg. samples / sec: 957.47
Iteration:   1760, Loss function: 5.597, Average Loss: 5.643, avg. samples / sec: 942.55
Iteration:   1780, Loss function: 5.744, Average Loss: 5.645, avg. samples / sec: 951.92
Iteration:   1800, Loss function: 5.554, Average Loss: 5.648, avg. samples / sec: 985.49
Iteration:   1820, Loss function: 5.956, Average Loss: 5.650, avg. samples / sec: 1006.84
Iteration:   1840, Loss function: 5.815, Average Loss: 5.651, avg. samples / sec: 929.88
Iteration:   1860, Loss function: 5.690, Average Loss: 5.650, avg. samples / sec: 967.57
Iteration:   1880, Loss function: 6.124, Average Loss: 5.652, avg. samples / sec: 933.66
Iteration:   1900, Loss function: 5.793, Average Loss: 5.652, avg. samples / sec: 993.24
Iteration:   1920, Loss function: 5.543, Average Loss: 5.651, avg. samples / sec: 999.10
Iteration:   1940, Loss function: 5.688, Average Loss: 5.650, avg. samples / sec: 990.96
Iteration:   1960, Loss function: 5.541, Average Loss: 5.649, avg. samples / sec: 967.87
Iteration:   1980, Loss function: 5.632, Average Loss: 5.648, avg. samples / sec: 969.18
Iteration:   2000, Loss function: 5.484, Average Loss: 5.647, avg. samples / sec: 970.80
Iteration:   2020, Loss function: 5.549, Average Loss: 5.646, avg. samples / sec: 970.25
Iteration:   2040, Loss function: 5.670, Average Loss: 5.645, avg. samples / sec: 916.10
:::MLLOG {"namespace": "", "time_ms": 1639074052521, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074052524, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.535, Average Loss: 5.643, avg. samples / sec: 986.95
Iteration:   2080, Loss function: 5.045, Average Loss: 5.640, avg. samples / sec: 889.40
Iteration:   2100, Loss function: 5.450, Average Loss: 5.638, avg. samples / sec: 963.30
Iteration:   2120, Loss function: 5.328, Average Loss: 5.635, avg. samples / sec: 933.86
Iteration:   2140, Loss function: 5.405, Average Loss: 5.631, avg. samples / sec: 908.24
Iteration:   2160, Loss function: 5.303, Average Loss: 5.629, avg. samples / sec: 956.44
Iteration:   2180, Loss function: 5.430, Average Loss: 5.627, avg. samples / sec: 903.13
Iteration:   2200, Loss function: 5.581, Average Loss: 5.624, avg. samples / sec: 971.71
Iteration:   2220, Loss function: 5.515, Average Loss: 5.620, avg. samples / sec: 945.57
Iteration:   2240, Loss function: 5.492, Average Loss: 5.618, avg. samples / sec: 971.18
Iteration:   2260, Loss function: 5.248, Average Loss: 5.615, avg. samples / sec: 964.75
Iteration:   2280, Loss function: 5.152, Average Loss: 5.612, avg. samples / sec: 922.74
Iteration:   2300, Loss function: 5.120, Average Loss: 5.608, avg. samples / sec: 970.65
Iteration:   2320, Loss function: 5.138, Average Loss: 5.606, avg. samples / sec: 930.87
Iteration:   2340, Loss function: 5.479, Average Loss: 5.603, avg. samples / sec: 980.51
Iteration:   2360, Loss function: 5.255, Average Loss: 5.598, avg. samples / sec: 900.38
Iteration:   2380, Loss function: 5.437, Average Loss: 5.594, avg. samples / sec: 894.96
Iteration:   2400, Loss function: 5.677, Average Loss: 5.589, avg. samples / sec: 885.59
Iteration:   2420, Loss function: 5.425, Average Loss: 5.585, avg. samples / sec: 948.26
Iteration:   2440, Loss function: 5.461, Average Loss: 5.582, avg. samples / sec: 944.61
Iteration:   2460, Loss function: 5.108, Average Loss: 5.579, avg. samples / sec: 964.65
Iteration:   2480, Loss function: 5.411, Average Loss: 5.575, avg. samples / sec: 965.52
Iteration:   2500, Loss function: 5.438, Average Loss: 5.571, avg. samples / sec: 990.09
Iteration:   2520, Loss function: 5.498, Average Loss: 5.565, avg. samples / sec: 980.28
Iteration:   2540, Loss function: 5.363, Average Loss: 5.562, avg. samples / sec: 924.45
Iteration:   2560, Loss function: 5.247, Average Loss: 5.558, avg. samples / sec: 926.35
Iteration:   2580, Loss function: 5.494, Average Loss: 5.556, avg. samples / sec: 976.34
Iteration:   2600, Loss function: 5.452, Average Loss: 5.553, avg. samples / sec: 944.08
Iteration:   2620, Loss function: 5.254, Average Loss: 5.548, avg. samples / sec: 894.56
Iteration:   2640, Loss function: 5.338, Average Loss: 5.545, avg. samples / sec: 931.38
Iteration:   2660, Loss function: 5.102, Average Loss: 5.542, avg. samples / sec: 935.41
Iteration:   2680, Loss function: 5.218, Average Loss: 5.538, avg. samples / sec: 974.50
Iteration:   2700, Loss function: 5.250, Average Loss: 5.532, avg. samples / sec: 924.14
Iteration:   2720, Loss function: 5.203, Average Loss: 5.528, avg. samples / sec: 944.08
Iteration:   2740, Loss function: 5.066, Average Loss: 5.524, avg. samples / sec: 963.29
Iteration:   2760, Loss function: 5.108, Average Loss: 5.518, avg. samples / sec: 972.74
Iteration:   2780, Loss function: 5.585, Average Loss: 5.515, avg. samples / sec: 983.42
Iteration:   2800, Loss function: 5.101, Average Loss: 5.510, avg. samples / sec: 971.05
Iteration:   2820, Loss function: 5.448, Average Loss: 5.506, avg. samples / sec: 979.75
Iteration:   2840, Loss function: 5.076, Average Loss: 5.502, avg. samples / sec: 924.04
Iteration:   2860, Loss function: 5.055, Average Loss: 5.497, avg. samples / sec: 921.60
Iteration:   2880, Loss function: 5.118, Average Loss: 5.492, avg. samples / sec: 987.67
Iteration:   2900, Loss function: 5.093, Average Loss: 5.488, avg. samples / sec: 980.89
Iteration:   2920, Loss function: 5.140, Average Loss: 5.483, avg. samples / sec: 990.07
Iteration:   2940, Loss function: 4.922, Average Loss: 5.479, avg. samples / sec: 996.41
Iteration:   2960, Loss function: 5.373, Average Loss: 5.474, avg. samples / sec: 985.98
Iteration:   2980, Loss function: 5.310, Average Loss: 5.470, avg. samples / sec: 982.76
Iteration:   3000, Loss function: 5.316, Average Loss: 5.465, avg. samples / sec: 931.37
Iteration:   3020, Loss function: 5.320, Average Loss: 5.459, avg. samples / sec: 936.39
Iteration:   3040, Loss function: 5.255, Average Loss: 5.454, avg. samples / sec: 933.96
Iteration:   3060, Loss function: 5.121, Average Loss: 5.448, avg. samples / sec: 900.29
Iteration:   3080, Loss function: 4.902, Average Loss: 5.443, avg. samples / sec: 937.25
:::MLLOG {"namespace": "", "time_ms": 1639074176289, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074176292, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.107, Average Loss: 5.437, avg. samples / sec: 988.54
Iteration:   3120, Loss function: 4.919, Average Loss: 5.431, avg. samples / sec: 889.65
Iteration:   3140, Loss function: 5.083, Average Loss: 5.426, avg. samples / sec: 940.04
Iteration:   3160, Loss function: 5.439, Average Loss: 5.420, avg. samples / sec: 954.06
Iteration:   3180, Loss function: 5.018, Average Loss: 5.414, avg. samples / sec: 980.67
Iteration:   3200, Loss function: 5.205, Average Loss: 5.409, avg. samples / sec: 971.21
Iteration:   3220, Loss function: 5.083, Average Loss: 5.403, avg. samples / sec: 979.13
Iteration:   3240, Loss function: 5.345, Average Loss: 5.398, avg. samples / sec: 996.38
Iteration:   3260, Loss function: 5.072, Average Loss: 5.392, avg. samples / sec: 972.63
Iteration:   3280, Loss function: 5.025, Average Loss: 5.387, avg. samples / sec: 967.27
Iteration:   3300, Loss function: 4.993, Average Loss: 5.382, avg. samples / sec: 985.41
Iteration:   3320, Loss function: 5.058, Average Loss: 5.377, avg. samples / sec: 981.14
Iteration:   3340, Loss function: 5.061, Average Loss: 5.372, avg. samples / sec: 926.32
Iteration:   3360, Loss function: 5.085, Average Loss: 5.366, avg. samples / sec: 954.12
Iteration:   3380, Loss function: 5.129, Average Loss: 5.359, avg. samples / sec: 984.22
Iteration:   3400, Loss function: 4.747, Average Loss: 5.354, avg. samples / sec: 984.18
Iteration:   3420, Loss function: 5.214, Average Loss: 5.349, avg. samples / sec: 959.46
Iteration:   3440, Loss function: 4.914, Average Loss: 5.344, avg. samples / sec: 943.96
Iteration:   3460, Loss function: 5.100, Average Loss: 5.339, avg. samples / sec: 862.02
Iteration:   3480, Loss function: 5.374, Average Loss: 5.335, avg. samples / sec: 985.50
Iteration:   3500, Loss function: 5.192, Average Loss: 5.331, avg. samples / sec: 987.70
Iteration:   3520, Loss function: 5.233, Average Loss: 5.328, avg. samples / sec: 973.34
Iteration:   3540, Loss function: 5.125, Average Loss: 5.323, avg. samples / sec: 947.68
Iteration:   3560, Loss function: 4.976, Average Loss: 5.319, avg. samples / sec: 951.83
Iteration:   3580, Loss function: 5.154, Average Loss: 5.315, avg. samples / sec: 977.31
Iteration:   3600, Loss function: 5.293, Average Loss: 5.309, avg. samples / sec: 954.00
Iteration:   3620, Loss function: 4.970, Average Loss: 5.305, avg. samples / sec: 973.06
Iteration:   3640, Loss function: 4.712, Average Loss: 5.299, avg. samples / sec: 978.35
Iteration:   3660, Loss function: 5.015, Average Loss: 5.294, avg. samples / sec: 982.32
Iteration:   3680, Loss function: 5.215, Average Loss: 5.289, avg. samples / sec: 969.39
Iteration:   3700, Loss function: 4.993, Average Loss: 5.283, avg. samples / sec: 988.15
Iteration:   3720, Loss function: 5.031, Average Loss: 5.277, avg. samples / sec: 895.71
Iteration:   3740, Loss function: 5.144, Average Loss: 5.273, avg. samples / sec: 943.96
Iteration:   3760, Loss function: 5.002, Average Loss: 5.268, avg. samples / sec: 974.51
Iteration:   3780, Loss function: 5.031, Average Loss: 5.263, avg. samples / sec: 983.65
Iteration:   3800, Loss function: 5.109, Average Loss: 5.259, avg. samples / sec: 991.15
Iteration:   3820, Loss function: 5.365, Average Loss: 5.255, avg. samples / sec: 913.39
Iteration:   3840, Loss function: 4.859, Average Loss: 5.250, avg. samples / sec: 935.81
Iteration:   3860, Loss function: 4.880, Average Loss: 5.245, avg. samples / sec: 954.53
Iteration:   3880, Loss function: 4.970, Average Loss: 5.240, avg. samples / sec: 997.01
Iteration:   3900, Loss function: 5.138, Average Loss: 5.235, avg. samples / sec: 947.13
Iteration:   3920, Loss function: 5.240, Average Loss: 5.229, avg. samples / sec: 963.73
Iteration:   3940, Loss function: 5.022, Average Loss: 5.224, avg. samples / sec: 978.60
Iteration:   3960, Loss function: 4.952, Average Loss: 5.220, avg. samples / sec: 959.93
Iteration:   3980, Loss function: 4.915, Average Loss: 5.215, avg. samples / sec: 988.37
Iteration:   4000, Loss function: 5.004, Average Loss: 5.211, avg. samples / sec: 985.10
Iteration:   4020, Loss function: 4.898, Average Loss: 5.206, avg. samples / sec: 895.11
Iteration:   4040, Loss function: 5.232, Average Loss: 5.203, avg. samples / sec: 943.62
Iteration:   4060, Loss function: 5.031, Average Loss: 5.199, avg. samples / sec: 982.82
Iteration:   4080, Loss function: 5.033, Average Loss: 5.194, avg. samples / sec: 944.92
Iteration:   4100, Loss function: 5.159, Average Loss: 5.191, avg. samples / sec: 990.16
:::MLLOG {"namespace": "", "time_ms": 1639074298351, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074298353, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.857, Average Loss: 5.186, avg. samples / sec: 975.81
Iteration:   4140, Loss function: 5.014, Average Loss: 5.181, avg. samples / sec: 988.48
Iteration:   4160, Loss function: 5.005, Average Loss: 5.174, avg. samples / sec: 972.34
Iteration:   4180, Loss function: 4.887, Average Loss: 5.169, avg. samples / sec: 940.01
Iteration:   4200, Loss function: 4.874, Average Loss: 5.164, avg. samples / sec: 994.69
Iteration:   4220, Loss function: 4.700, Average Loss: 5.159, avg. samples / sec: 896.88
Iteration:   4240, Loss function: 4.961, Average Loss: 5.154, avg. samples / sec: 923.69
Iteration:   4260, Loss function: 5.144, Average Loss: 5.149, avg. samples / sec: 905.42
Iteration:   4280, Loss function: 5.071, Average Loss: 5.143, avg. samples / sec: 945.19
Iteration:   4300, Loss function: 4.708, Average Loss: 5.138, avg. samples / sec: 978.93
Iteration:   4320, Loss function: 4.592, Average Loss: 5.132, avg. samples / sec: 1002.10
Iteration:   4340, Loss function: 4.854, Average Loss: 5.127, avg. samples / sec: 960.89
Iteration:   4360, Loss function: 4.702, Average Loss: 5.122, avg. samples / sec: 925.70
Iteration:   4380, Loss function: 5.086, Average Loss: 5.116, avg. samples / sec: 955.49
Iteration:   4400, Loss function: 4.874, Average Loss: 5.112, avg. samples / sec: 907.89
Iteration:   4420, Loss function: 4.847, Average Loss: 5.106, avg. samples / sec: 971.15
Iteration:   4440, Loss function: 4.921, Average Loss: 5.102, avg. samples / sec: 985.87
Iteration:   4460, Loss function: 5.126, Average Loss: 5.098, avg. samples / sec: 975.92
Iteration:   4480, Loss function: 4.910, Average Loss: 5.094, avg. samples / sec: 994.16
Iteration:   4500, Loss function: 4.995, Average Loss: 5.092, avg. samples / sec: 959.73
Iteration:   4520, Loss function: 4.750, Average Loss: 5.088, avg. samples / sec: 938.80
Iteration:   4540, Loss function: 5.007, Average Loss: 5.084, avg. samples / sec: 948.49
Iteration:   4560, Loss function: 4.805, Average Loss: 5.080, avg. samples / sec: 875.62
Iteration:   4580, Loss function: 4.683, Average Loss: 5.077, avg. samples / sec: 919.35
Iteration:   4600, Loss function: 4.903, Average Loss: 5.073, avg. samples / sec: 892.30
Iteration:   4620, Loss function: 4.707, Average Loss: 5.069, avg. samples / sec: 966.40
Iteration:   4640, Loss function: 4.635, Average Loss: 5.064, avg. samples / sec: 944.52
Iteration:   4660, Loss function: 4.565, Average Loss: 5.061, avg. samples / sec: 884.06
Iteration:   4680, Loss function: 5.213, Average Loss: 5.055, avg. samples / sec: 919.80
Iteration:   4700, Loss function: 4.693, Average Loss: 5.052, avg. samples / sec: 918.66
Iteration:   4720, Loss function: 4.668, Average Loss: 5.047, avg. samples / sec: 905.99
Iteration:   4740, Loss function: 4.794, Average Loss: 5.043, avg. samples / sec: 899.00
Iteration:   4760, Loss function: 4.929, Average Loss: 5.040, avg. samples / sec: 975.39
Iteration:   4780, Loss function: 5.019, Average Loss: 5.036, avg. samples / sec: 986.47
Iteration:   4800, Loss function: 4.948, Average Loss: 5.033, avg. samples / sec: 948.89
Iteration:   4820, Loss function: 4.795, Average Loss: 5.029, avg. samples / sec: 975.39
Iteration:   4840, Loss function: 4.968, Average Loss: 5.025, avg. samples / sec: 923.91
Iteration:   4860, Loss function: 4.696, Average Loss: 5.020, avg. samples / sec: 969.00
Iteration:   4880, Loss function: 5.190, Average Loss: 5.016, avg. samples / sec: 960.15
Iteration:   4900, Loss function: 4.420, Average Loss: 5.012, avg. samples / sec: 963.39
Iteration:   4920, Loss function: 4.691, Average Loss: 5.009, avg. samples / sec: 934.00
Iteration:   4940, Loss function: 4.697, Average Loss: 5.006, avg. samples / sec: 914.59
Iteration:   4960, Loss function: 4.691, Average Loss: 5.002, avg. samples / sec: 960.98
Iteration:   4980, Loss function: 4.465, Average Loss: 4.998, avg. samples / sec: 968.39
Iteration:   5000, Loss function: 4.886, Average Loss: 4.995, avg. samples / sec: 926.59
Iteration:   5020, Loss function: 4.999, Average Loss: 4.992, avg. samples / sec: 947.64
Iteration:   5040, Loss function: 5.055, Average Loss: 4.990, avg. samples / sec: 940.16
Iteration:   5060, Loss function: 4.649, Average Loss: 4.987, avg. samples / sec: 968.61
Iteration:   5080, Loss function: 4.631, Average Loss: 4.983, avg. samples / sec: 993.79
Iteration:   5100, Loss function: 4.740, Average Loss: 4.979, avg. samples / sec: 975.22
Iteration:   5120, Loss function: 4.631, Average Loss: 4.975, avg. samples / sec: 930.75
Iteration:   5140, Loss function: 4.855, Average Loss: 4.972, avg. samples / sec: 979.19
:::MLLOG {"namespace": "", "time_ms": 1639074422262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.13 s
:::MLLOG {"namespace": "", "time_ms": 1639074453447, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074453525, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074453525, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.69s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.012, Average Loss: 4.966, avg. samples / sec: 67.95
DONE (t=2.99s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10646
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21617
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09337
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19061
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20149
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21377
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10646 AP goal: 0.10000
Iteration:   5180, Loss function: 4.962, Average Loss: 4.962, avg. samples / sec: 1007.10
:::MLLOG {"namespace": "", "time_ms": 1639074457726, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457727, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10645963274998495, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457727, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457898, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074459
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:39 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:09 PM'
START TIMING RUN WAS 2021-12-09 06:16:09 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:39 PM'
ENDING TIMING RUN AT 2021-12-09 06:27:39 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 7g.40gb     Device  0: (UUID: MIG-ac2471ee-ea05-55fe-b7d7-8c31210e7a6e)
+ result=690
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,690,nvidia,2021-12-09 06:16:09 PM'
RESULT,SINGLE_STAGE_DETECTOR,,690,nvidia,2021-12-09 06:16:09 PM
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
