+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-299r5.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-299r5.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-299r5.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60'
Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073771
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:11 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-15-55 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ set +x
Thu Dec  9 18:16:11 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-299r5 to the sync file ...
Thu Dec  9 18:16:11 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073773595, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073773727, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1629283315, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1629283315
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073775250, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073775250, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073775253, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073775253, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073799151, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073799152, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073800379, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073800379, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073800610, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073800611, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073800612, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.252, Average Loss: 0.023, avg. samples / sec: 4.55
Iteration:     20, Loss function: 21.099, Average Loss: 0.460, avg. samples / sec: 949.37
Iteration:     40, Loss function: 20.755, Average Loss: 0.861, avg. samples / sec: 969.46
Iteration:     60, Loss function: 20.471, Average Loss: 1.251, avg. samples / sec: 934.79
Iteration:     80, Loss function: 19.976, Average Loss: 1.625, avg. samples / sec: 925.78
Iteration:    100, Loss function: 15.594, Average Loss: 1.953, avg. samples / sec: 914.16
Iteration:    120, Loss function: 11.649, Average Loss: 2.168, avg. samples / sec: 917.06
Iteration:    140, Loss function: 9.795, Average Loss: 2.331, avg. samples / sec: 896.58
Iteration:    160, Loss function: 9.206, Average Loss: 2.473, avg. samples / sec: 706.84
Iteration:    180, Loss function: 9.062, Average Loss: 2.604, avg. samples / sec: 944.65
Iteration:    200, Loss function: 8.754, Average Loss: 2.729, avg. samples / sec: 967.12
Iteration:    220, Loss function: 8.736, Average Loss: 2.850, avg. samples / sec: 966.35
Iteration:    240, Loss function: 8.706, Average Loss: 2.967, avg. samples / sec: 958.76
Iteration:    260, Loss function: 8.664, Average Loss: 3.082, avg. samples / sec: 889.80
Iteration:    280, Loss function: 8.560, Average Loss: 3.191, avg. samples / sec: 912.53
Iteration:    300, Loss function: 8.453, Average Loss: 3.295, avg. samples / sec: 914.75
Iteration:    320, Loss function: 8.541, Average Loss: 3.396, avg. samples / sec: 895.03
Iteration:    340, Loss function: 8.407, Average Loss: 3.494, avg. samples / sec: 975.85
Iteration:    360, Loss function: 8.050, Average Loss: 3.588, avg. samples / sec: 915.18
Iteration:    380, Loss function: 7.949, Average Loss: 3.678, avg. samples / sec: 948.66
Iteration:    400, Loss function: 8.134, Average Loss: 3.763, avg. samples / sec: 961.26
Iteration:    420, Loss function: 7.743, Average Loss: 3.847, avg. samples / sec: 962.54
Iteration:    440, Loss function: 7.979, Average Loss: 3.927, avg. samples / sec: 966.48
Iteration:    460, Loss function: 7.750, Average Loss: 4.004, avg. samples / sec: 952.10
Iteration:    480, Loss function: 7.581, Average Loss: 4.078, avg. samples / sec: 958.19
Iteration:    500, Loss function: 7.696, Average Loss: 4.148, avg. samples / sec: 959.54
Iteration:    520, Loss function: 7.552, Average Loss: 4.217, avg. samples / sec: 952.20
Iteration:    540, Loss function: 7.606, Average Loss: 4.282, avg. samples / sec: 971.74
Iteration:    560, Loss function: 7.213, Average Loss: 4.346, avg. samples / sec: 938.02
Iteration:    580, Loss function: 7.371, Average Loss: 4.407, avg. samples / sec: 860.25
Iteration:    600, Loss function: 7.343, Average Loss: 4.466, avg. samples / sec: 980.71
Iteration:    620, Loss function: 7.152, Average Loss: 4.522, avg. samples / sec: 987.21
Iteration:    640, Loss function: 6.989, Average Loss: 4.576, avg. samples / sec: 910.57
Iteration:    660, Loss function: 7.287, Average Loss: 4.628, avg. samples / sec: 972.54
Iteration:    680, Loss function: 7.456, Average Loss: 4.680, avg. samples / sec: 954.65
Iteration:    700, Loss function: 6.864, Average Loss: 4.729, avg. samples / sec: 909.23
Iteration:    720, Loss function: 6.982, Average Loss: 4.778, avg. samples / sec: 942.63
Iteration:    740, Loss function: 6.971, Average Loss: 4.823, avg. samples / sec: 980.16
Iteration:    760, Loss function: 7.012, Average Loss: 4.867, avg. samples / sec: 973.50
Iteration:    780, Loss function: 6.755, Average Loss: 4.909, avg. samples / sec: 970.23
Iteration:    800, Loss function: 7.195, Average Loss: 4.948, avg. samples / sec: 939.78
Iteration:    820, Loss function: 6.853, Average Loss: 4.986, avg. samples / sec: 935.13
Iteration:    840, Loss function: 6.820, Average Loss: 5.021, avg. samples / sec: 905.46
Iteration:    860, Loss function: 6.677, Average Loss: 5.055, avg. samples / sec: 930.10
Iteration:    880, Loss function: 6.648, Average Loss: 5.088, avg. samples / sec: 979.01
Iteration:    900, Loss function: 6.805, Average Loss: 5.118, avg. samples / sec: 977.51
Iteration:    920, Loss function: 6.760, Average Loss: 5.148, avg. samples / sec: 947.49
Iteration:    940, Loss function: 6.783, Average Loss: 5.177, avg. samples / sec: 964.31
Iteration:    960, Loss function: 6.572, Average Loss: 5.206, avg. samples / sec: 871.74
Iteration:    980, Loss function: 6.555, Average Loss: 5.233, avg. samples / sec: 937.77
Iteration:   1000, Loss function: 6.576, Average Loss: 5.259, avg. samples / sec: 968.91
Iteration:   1020, Loss function: 6.318, Average Loss: 5.282, avg. samples / sec: 969.07
:::MLLOG {"namespace": "", "time_ms": 1639073925805, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073925807, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.684, Average Loss: 5.307, avg. samples / sec: 978.39
Iteration:   1060, Loss function: 6.405, Average Loss: 5.329, avg. samples / sec: 985.25
Iteration:   1080, Loss function: 6.603, Average Loss: 5.351, avg. samples / sec: 957.36
Iteration:   1100, Loss function: 6.140, Average Loss: 5.371, avg. samples / sec: 863.23
Iteration:   1120, Loss function: 6.224, Average Loss: 5.391, avg. samples / sec: 922.91
Iteration:   1140, Loss function: 6.545, Average Loss: 5.410, avg. samples / sec: 971.13
Iteration:   1160, Loss function: 6.297, Average Loss: 5.428, avg. samples / sec: 979.91
Iteration:   1180, Loss function: 6.261, Average Loss: 5.445, avg. samples / sec: 992.64
Iteration:   1200, Loss function: 6.234, Average Loss: 5.461, avg. samples / sec: 903.66
Iteration:   1220, Loss function: 6.170, Average Loss: 5.476, avg. samples / sec: 918.41
Iteration:   1240, Loss function: 6.103, Average Loss: 5.489, avg. samples / sec: 961.60
Iteration:   1260, Loss function: 6.046, Average Loss: 5.501, avg. samples / sec: 971.33
Iteration:   1280, Loss function: 5.983, Average Loss: 5.514, avg. samples / sec: 970.43
Iteration:   1300, Loss function: 6.181, Average Loss: 5.526, avg. samples / sec: 959.01
Iteration:   1320, Loss function: 6.185, Average Loss: 5.537, avg. samples / sec: 923.69
Iteration:   1340, Loss function: 5.922, Average Loss: 5.548, avg. samples / sec: 937.67
Iteration:   1360, Loss function: 5.889, Average Loss: 5.558, avg. samples / sec: 958.00
Iteration:   1380, Loss function: 6.169, Average Loss: 5.567, avg. samples / sec: 967.05
Iteration:   1400, Loss function: 6.097, Average Loss: 5.575, avg. samples / sec: 982.02
Iteration:   1420, Loss function: 5.859, Average Loss: 5.582, avg. samples / sec: 947.69
Iteration:   1440, Loss function: 6.279, Average Loss: 5.590, avg. samples / sec: 921.25
Iteration:   1460, Loss function: 6.140, Average Loss: 5.599, avg. samples / sec: 931.94
Iteration:   1480, Loss function: 6.065, Average Loss: 5.606, avg. samples / sec: 968.03
Iteration:   1500, Loss function: 6.186, Average Loss: 5.615, avg. samples / sec: 990.38
Iteration:   1520, Loss function: 6.078, Average Loss: 5.621, avg. samples / sec: 976.51
Iteration:   1540, Loss function: 6.041, Average Loss: 5.625, avg. samples / sec: 991.38
Iteration:   1560, Loss function: 5.590, Average Loss: 5.630, avg. samples / sec: 981.26
Iteration:   1580, Loss function: 5.663, Average Loss: 5.634, avg. samples / sec: 983.65
Iteration:   1600, Loss function: 6.139, Average Loss: 5.639, avg. samples / sec: 925.46
Iteration:   1620, Loss function: 5.776, Average Loss: 5.644, avg. samples / sec: 957.86
Iteration:   1640, Loss function: 5.902, Average Loss: 5.646, avg. samples / sec: 991.25
Iteration:   1660, Loss function: 6.152, Average Loss: 5.651, avg. samples / sec: 994.31
Iteration:   1680, Loss function: 5.719, Average Loss: 5.654, avg. samples / sec: 923.79
Iteration:   1700, Loss function: 5.497, Average Loss: 5.658, avg. samples / sec: 968.10
Iteration:   1720, Loss function: 5.737, Average Loss: 5.660, avg. samples / sec: 976.82
Iteration:   1740, Loss function: 5.848, Average Loss: 5.662, avg. samples / sec: 979.27
Iteration:   1760, Loss function: 5.667, Average Loss: 5.664, avg. samples / sec: 986.41
Iteration:   1780, Loss function: 5.550, Average Loss: 5.664, avg. samples / sec: 923.17
Iteration:   1800, Loss function: 5.637, Average Loss: 5.666, avg. samples / sec: 957.01
Iteration:   1820, Loss function: 6.059, Average Loss: 5.668, avg. samples / sec: 962.81
Iteration:   1840, Loss function: 5.759, Average Loss: 5.668, avg. samples / sec: 969.94
Iteration:   1860, Loss function: 5.602, Average Loss: 5.668, avg. samples / sec: 971.51
Iteration:   1880, Loss function: 5.737, Average Loss: 5.668, avg. samples / sec: 864.78
Iteration:   1900, Loss function: 5.983, Average Loss: 5.668, avg. samples / sec: 951.81
Iteration:   1920, Loss function: 5.797, Average Loss: 5.667, avg. samples / sec: 974.87
Iteration:   1940, Loss function: 5.879, Average Loss: 5.666, avg. samples / sec: 917.87
Iteration:   1960, Loss function: 5.618, Average Loss: 5.666, avg. samples / sec: 950.74
Iteration:   1980, Loss function: 5.729, Average Loss: 5.665, avg. samples / sec: 942.61
Iteration:   2000, Loss function: 5.806, Average Loss: 5.665, avg. samples / sec: 971.48
Iteration:   2020, Loss function: 5.687, Average Loss: 5.664, avg. samples / sec: 913.71
Iteration:   2040, Loss function: 5.617, Average Loss: 5.664, avg. samples / sec: 895.47
:::MLLOG {"namespace": "", "time_ms": 1639074048887, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074048888, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.406, Average Loss: 5.662, avg. samples / sec: 970.80
Iteration:   2080, Loss function: 5.137, Average Loss: 5.659, avg. samples / sec: 925.89
Iteration:   2100, Loss function: 5.602, Average Loss: 5.657, avg. samples / sec: 953.53
Iteration:   2120, Loss function: 5.407, Average Loss: 5.653, avg. samples / sec: 969.68
Iteration:   2140, Loss function: 5.511, Average Loss: 5.649, avg. samples / sec: 969.62
Iteration:   2160, Loss function: 5.518, Average Loss: 5.646, avg. samples / sec: 959.71
Iteration:   2180, Loss function: 5.286, Average Loss: 5.643, avg. samples / sec: 932.38
Iteration:   2200, Loss function: 5.598, Average Loss: 5.639, avg. samples / sec: 936.55
Iteration:   2220, Loss function: 5.584, Average Loss: 5.637, avg. samples / sec: 985.79
Iteration:   2240, Loss function: 5.303, Average Loss: 5.634, avg. samples / sec: 965.60
Iteration:   2260, Loss function: 5.309, Average Loss: 5.630, avg. samples / sec: 964.01
Iteration:   2280, Loss function: 5.311, Average Loss: 5.627, avg. samples / sec: 972.30
Iteration:   2300, Loss function: 5.265, Average Loss: 5.624, avg. samples / sec: 988.56
Iteration:   2320, Loss function: 5.132, Average Loss: 5.622, avg. samples / sec: 945.08
Iteration:   2340, Loss function: 5.559, Average Loss: 5.619, avg. samples / sec: 925.34
Iteration:   2360, Loss function: 5.406, Average Loss: 5.615, avg. samples / sec: 902.20
Iteration:   2380, Loss function: 5.331, Average Loss: 5.611, avg. samples / sec: 981.42
Iteration:   2400, Loss function: 5.538, Average Loss: 5.607, avg. samples / sec: 999.69
Iteration:   2420, Loss function: 5.548, Average Loss: 5.603, avg. samples / sec: 951.73
Iteration:   2440, Loss function: 5.618, Average Loss: 5.600, avg. samples / sec: 975.99
Iteration:   2460, Loss function: 5.294, Average Loss: 5.596, avg. samples / sec: 959.04
Iteration:   2480, Loss function: 5.421, Average Loss: 5.593, avg. samples / sec: 939.80
Iteration:   2500, Loss function: 5.558, Average Loss: 5.589, avg. samples / sec: 971.53
Iteration:   2520, Loss function: 5.342, Average Loss: 5.584, avg. samples / sec: 968.64
Iteration:   2540, Loss function: 5.353, Average Loss: 5.580, avg. samples / sec: 932.00
Iteration:   2560, Loss function: 5.202, Average Loss: 5.576, avg. samples / sec: 828.41
Iteration:   2580, Loss function: 5.353, Average Loss: 5.572, avg. samples / sec: 985.82
Iteration:   2600, Loss function: 5.517, Average Loss: 5.569, avg. samples / sec: 982.73
Iteration:   2620, Loss function: 5.646, Average Loss: 5.564, avg. samples / sec: 960.94
Iteration:   2640, Loss function: 5.151, Average Loss: 5.561, avg. samples / sec: 947.82
Iteration:   2660, Loss function: 5.298, Average Loss: 5.558, avg. samples / sec: 971.13
Iteration:   2680, Loss function: 5.352, Average Loss: 5.554, avg. samples / sec: 988.86
Iteration:   2700, Loss function: 5.118, Average Loss: 5.548, avg. samples / sec: 885.04
Iteration:   2720, Loss function: 5.301, Average Loss: 5.544, avg. samples / sec: 947.77
Iteration:   2740, Loss function: 5.038, Average Loss: 5.540, avg. samples / sec: 974.22
Iteration:   2760, Loss function: 4.925, Average Loss: 5.533, avg. samples / sec: 951.24
Iteration:   2780, Loss function: 5.456, Average Loss: 5.529, avg. samples / sec: 974.26
Iteration:   2800, Loss function: 5.334, Average Loss: 5.524, avg. samples / sec: 966.64
Iteration:   2820, Loss function: 5.340, Average Loss: 5.520, avg. samples / sec: 982.33
Iteration:   2840, Loss function: 5.220, Average Loss: 5.516, avg. samples / sec: 974.22
Iteration:   2860, Loss function: 5.285, Average Loss: 5.510, avg. samples / sec: 948.58
Iteration:   2880, Loss function: 5.220, Average Loss: 5.505, avg. samples / sec: 948.11
Iteration:   2900, Loss function: 5.043, Average Loss: 5.500, avg. samples / sec: 967.65
Iteration:   2920, Loss function: 5.207, Average Loss: 5.494, avg. samples / sec: 984.03
Iteration:   2940, Loss function: 4.908, Average Loss: 5.489, avg. samples / sec: 961.12
Iteration:   2960, Loss function: 5.396, Average Loss: 5.485, avg. samples / sec: 980.77
Iteration:   2980, Loss function: 5.301, Average Loss: 5.481, avg. samples / sec: 990.10
Iteration:   3000, Loss function: 5.271, Average Loss: 5.476, avg. samples / sec: 957.97
Iteration:   3020, Loss function: 5.388, Average Loss: 5.470, avg. samples / sec: 966.40
Iteration:   3040, Loss function: 5.211, Average Loss: 5.465, avg. samples / sec: 984.33
Iteration:   3060, Loss function: 4.992, Average Loss: 5.458, avg. samples / sec: 982.78
Iteration:   3080, Loss function: 4.771, Average Loss: 5.453, avg. samples / sec: 979.61
:::MLLOG {"namespace": "", "time_ms": 1639074171133, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074171134, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.119, Average Loss: 5.448, avg. samples / sec: 957.17
Iteration:   3120, Loss function: 5.124, Average Loss: 5.441, avg. samples / sec: 986.60
Iteration:   3140, Loss function: 5.094, Average Loss: 5.436, avg. samples / sec: 991.98
Iteration:   3160, Loss function: 5.302, Average Loss: 5.430, avg. samples / sec: 977.28
Iteration:   3180, Loss function: 5.036, Average Loss: 5.425, avg. samples / sec: 988.75
Iteration:   3200, Loss function: 5.190, Average Loss: 5.419, avg. samples / sec: 974.69
Iteration:   3220, Loss function: 5.196, Average Loss: 5.414, avg. samples / sec: 984.37
Iteration:   3240, Loss function: 5.055, Average Loss: 5.409, avg. samples / sec: 978.42
Iteration:   3260, Loss function: 5.107, Average Loss: 5.403, avg. samples / sec: 975.18
Iteration:   3280, Loss function: 4.813, Average Loss: 5.396, avg. samples / sec: 969.18
Iteration:   3300, Loss function: 4.873, Average Loss: 5.390, avg. samples / sec: 926.14
Iteration:   3320, Loss function: 5.014, Average Loss: 5.385, avg. samples / sec: 974.99
Iteration:   3340, Loss function: 5.056, Average Loss: 5.381, avg. samples / sec: 991.24
Iteration:   3360, Loss function: 5.075, Average Loss: 5.374, avg. samples / sec: 942.70
Iteration:   3380, Loss function: 5.184, Average Loss: 5.367, avg. samples / sec: 944.68
Iteration:   3400, Loss function: 4.784, Average Loss: 5.362, avg. samples / sec: 897.24
Iteration:   3420, Loss function: 5.363, Average Loss: 5.357, avg. samples / sec: 938.49
Iteration:   3440, Loss function: 4.963, Average Loss: 5.353, avg. samples / sec: 906.47
Iteration:   3460, Loss function: 5.184, Average Loss: 5.348, avg. samples / sec: 971.19
Iteration:   3480, Loss function: 5.201, Average Loss: 5.342, avg. samples / sec: 957.26
Iteration:   3500, Loss function: 5.347, Average Loss: 5.338, avg. samples / sec: 960.70
Iteration:   3520, Loss function: 5.183, Average Loss: 5.334, avg. samples / sec: 979.66
Iteration:   3540, Loss function: 5.053, Average Loss: 5.329, avg. samples / sec: 923.60
Iteration:   3560, Loss function: 4.899, Average Loss: 5.325, avg. samples / sec: 935.28
Iteration:   3580, Loss function: 5.163, Average Loss: 5.321, avg. samples / sec: 865.19
Iteration:   3600, Loss function: 5.215, Average Loss: 5.315, avg. samples / sec: 942.50
Iteration:   3620, Loss function: 4.922, Average Loss: 5.310, avg. samples / sec: 933.04
Iteration:   3640, Loss function: 4.740, Average Loss: 5.304, avg. samples / sec: 988.09
Iteration:   3660, Loss function: 5.122, Average Loss: 5.299, avg. samples / sec: 916.75
Iteration:   3680, Loss function: 5.123, Average Loss: 5.293, avg. samples / sec: 949.48
Iteration:   3700, Loss function: 5.032, Average Loss: 5.287, avg. samples / sec: 876.38
Iteration:   3720, Loss function: 4.912, Average Loss: 5.280, avg. samples / sec: 828.12
Iteration:   3740, Loss function: 5.217, Average Loss: 5.276, avg. samples / sec: 955.00
Iteration:   3760, Loss function: 5.198, Average Loss: 5.272, avg. samples / sec: 965.18
Iteration:   3780, Loss function: 4.998, Average Loss: 5.267, avg. samples / sec: 971.56
Iteration:   3800, Loss function: 4.991, Average Loss: 5.264, avg. samples / sec: 940.42
Iteration:   3820, Loss function: 5.140, Average Loss: 5.260, avg. samples / sec: 977.84
Iteration:   3840, Loss function: 4.903, Average Loss: 5.255, avg. samples / sec: 931.76
Iteration:   3860, Loss function: 4.899, Average Loss: 5.250, avg. samples / sec: 983.46
Iteration:   3880, Loss function: 5.058, Average Loss: 5.244, avg. samples / sec: 893.78
Iteration:   3900, Loss function: 5.115, Average Loss: 5.239, avg. samples / sec: 983.27
Iteration:   3920, Loss function: 5.174, Average Loss: 5.234, avg. samples / sec: 966.60
Iteration:   3940, Loss function: 5.099, Average Loss: 5.229, avg. samples / sec: 980.60
Iteration:   3960, Loss function: 4.849, Average Loss: 5.225, avg. samples / sec: 982.38
Iteration:   3980, Loss function: 4.879, Average Loss: 5.220, avg. samples / sec: 956.05
Iteration:   4000, Loss function: 5.238, Average Loss: 5.217, avg. samples / sec: 957.24
Iteration:   4020, Loss function: 4.997, Average Loss: 5.211, avg. samples / sec: 929.23
Iteration:   4040, Loss function: 5.022, Average Loss: 5.208, avg. samples / sec: 952.67
Iteration:   4060, Loss function: 5.094, Average Loss: 5.204, avg. samples / sec: 977.46
Iteration:   4080, Loss function: 5.004, Average Loss: 5.199, avg. samples / sec: 981.87
Iteration:   4100, Loss function: 5.074, Average Loss: 5.195, avg. samples / sec: 977.39
:::MLLOG {"namespace": "", "time_ms": 1639074294374, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074294375, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.114, Average Loss: 5.192, avg. samples / sec: 985.24
Iteration:   4140, Loss function: 5.154, Average Loss: 5.187, avg. samples / sec: 954.75
Iteration:   4160, Loss function: 4.911, Average Loss: 5.180, avg. samples / sec: 937.59
Iteration:   4180, Loss function: 4.823, Average Loss: 5.173, avg. samples / sec: 942.69
Iteration:   4200, Loss function: 5.084, Average Loss: 5.170, avg. samples / sec: 961.98
Iteration:   4220, Loss function: 4.855, Average Loss: 5.165, avg. samples / sec: 959.03
Iteration:   4240, Loss function: 5.004, Average Loss: 5.160, avg. samples / sec: 884.47
Iteration:   4260, Loss function: 4.958, Average Loss: 5.154, avg. samples / sec: 964.17
Iteration:   4280, Loss function: 4.932, Average Loss: 5.148, avg. samples / sec: 936.34
Iteration:   4300, Loss function: 4.689, Average Loss: 5.141, avg. samples / sec: 936.72
Iteration:   4320, Loss function: 4.937, Average Loss: 5.137, avg. samples / sec: 968.79
Iteration:   4340, Loss function: 4.874, Average Loss: 5.131, avg. samples / sec: 938.75
Iteration:   4360, Loss function: 4.832, Average Loss: 5.127, avg. samples / sec: 992.08
Iteration:   4380, Loss function: 5.228, Average Loss: 5.123, avg. samples / sec: 929.18
Iteration:   4400, Loss function: 4.991, Average Loss: 5.118, avg. samples / sec: 941.31
Iteration:   4420, Loss function: 4.861, Average Loss: 5.113, avg. samples / sec: 934.87
Iteration:   4440, Loss function: 4.792, Average Loss: 5.108, avg. samples / sec: 976.54
Iteration:   4460, Loss function: 5.313, Average Loss: 5.104, avg. samples / sec: 941.07
Iteration:   4480, Loss function: 4.982, Average Loss: 5.101, avg. samples / sec: 920.96
Iteration:   4500, Loss function: 4.931, Average Loss: 5.097, avg. samples / sec: 976.94
Iteration:   4520, Loss function: 4.773, Average Loss: 5.094, avg. samples / sec: 979.98
Iteration:   4540, Loss function: 5.135, Average Loss: 5.089, avg. samples / sec: 915.17
Iteration:   4560, Loss function: 4.903, Average Loss: 5.085, avg. samples / sec: 929.79
Iteration:   4580, Loss function: 4.790, Average Loss: 5.083, avg. samples / sec: 977.18
Iteration:   4600, Loss function: 4.809, Average Loss: 5.080, avg. samples / sec: 989.94
Iteration:   4620, Loss function: 4.837, Average Loss: 5.076, avg. samples / sec: 982.89
Iteration:   4640, Loss function: 4.542, Average Loss: 5.071, avg. samples / sec: 917.31
Iteration:   4660, Loss function: 4.671, Average Loss: 5.067, avg. samples / sec: 886.90
Iteration:   4680, Loss function: 5.148, Average Loss: 5.062, avg. samples / sec: 993.13
Iteration:   4700, Loss function: 4.787, Average Loss: 5.058, avg. samples / sec: 962.92
Iteration:   4720, Loss function: 4.944, Average Loss: 5.054, avg. samples / sec: 914.74
Iteration:   4740, Loss function: 4.721, Average Loss: 5.049, avg. samples / sec: 981.79
Iteration:   4760, Loss function: 4.816, Average Loss: 5.046, avg. samples / sec: 922.28
Iteration:   4780, Loss function: 4.929, Average Loss: 5.042, avg. samples / sec: 937.77
Iteration:   4800, Loss function: 4.836, Average Loss: 5.039, avg. samples / sec: 962.12
Iteration:   4820, Loss function: 4.827, Average Loss: 5.035, avg. samples / sec: 943.89
Iteration:   4840, Loss function: 5.054, Average Loss: 5.032, avg. samples / sec: 959.46
Iteration:   4860, Loss function: 4.654, Average Loss: 5.028, avg. samples / sec: 911.74
Iteration:   4880, Loss function: 5.234, Average Loss: 5.024, avg. samples / sec: 970.45
Iteration:   4900, Loss function: 4.608, Average Loss: 5.020, avg. samples / sec: 980.34
Iteration:   4920, Loss function: 4.956, Average Loss: 5.016, avg. samples / sec: 915.89
Iteration:   4940, Loss function: 4.720, Average Loss: 5.011, avg. samples / sec: 937.98
Iteration:   4960, Loss function: 4.497, Average Loss: 5.007, avg. samples / sec: 989.09
Iteration:   4980, Loss function: 4.953, Average Loss: 5.004, avg. samples / sec: 981.92
Iteration:   5000, Loss function: 4.976, Average Loss: 5.001, avg. samples / sec: 975.53
Iteration:   5020, Loss function: 5.249, Average Loss: 4.998, avg. samples / sec: 989.19
Iteration:   5040, Loss function: 4.811, Average Loss: 4.995, avg. samples / sec: 941.96
Iteration:   5060, Loss function: 4.663, Average Loss: 4.991, avg. samples / sec: 957.49
Iteration:   5080, Loss function: 4.459, Average Loss: 4.987, avg. samples / sec: 975.00
Iteration:   5100, Loss function: 4.799, Average Loss: 4.984, avg. samples / sec: 993.18
Iteration:   5120, Loss function: 4.701, Average Loss: 4.981, avg. samples / sec: 977.38
Iteration:   5140, Loss function: 4.791, Average Loss: 4.978, avg. samples / sec: 985.47
:::MLLOG {"namespace": "", "time_ms": 1639074417467, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.09 s
:::MLLOG {"namespace": "", "time_ms": 1639074450637, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074450694, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074450694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.73s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.974, Average Loss: 4.973, avg. samples / sec: 64.05
DONE (t=3.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10853
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22121
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09688
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19672
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14138
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20687
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21909
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21909
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10853 AP goal: 0.10000
Iteration:   5180, Loss function: 4.692, Average Loss: 4.968, avg. samples / sec: 1009.10
:::MLLOG {"namespace": "", "time_ms": 1639074454976, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074454977, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10852548156100907, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074454977, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074455123, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:36 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:36 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073773595, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073773727, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1629283315, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1629283315
:::MLLOG {"namespace": "", "time_ms": 1639073775250, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073775250, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073775253, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073775253, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073775254, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073799151, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073799152, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073800379, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073800379, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073800610, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073800611, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073800612, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.252, Average Loss: 0.023, avg. samples / sec: 4.55
Iteration:     20, Loss function: 21.099, Average Loss: 0.460, avg. samples / sec: 949.37
Iteration:     40, Loss function: 20.755, Average Loss: 0.861, avg. samples / sec: 969.46
Iteration:     60, Loss function: 20.471, Average Loss: 1.251, avg. samples / sec: 934.79
Iteration:     80, Loss function: 19.976, Average Loss: 1.625, avg. samples / sec: 925.78
Iteration:    100, Loss function: 15.594, Average Loss: 1.953, avg. samples / sec: 914.16
Iteration:    120, Loss function: 11.649, Average Loss: 2.168, avg. samples / sec: 917.06
Iteration:    140, Loss function: 9.795, Average Loss: 2.331, avg. samples / sec: 896.58
Iteration:    160, Loss function: 9.206, Average Loss: 2.473, avg. samples / sec: 706.84
Iteration:    180, Loss function: 9.062, Average Loss: 2.604, avg. samples / sec: 944.65
Iteration:    200, Loss function: 8.754, Average Loss: 2.729, avg. samples / sec: 967.12
Iteration:    220, Loss function: 8.736, Average Loss: 2.850, avg. samples / sec: 966.35
Iteration:    240, Loss function: 8.706, Average Loss: 2.967, avg. samples / sec: 958.76
Iteration:    260, Loss function: 8.664, Average Loss: 3.082, avg. samples / sec: 889.80
Iteration:    280, Loss function: 8.560, Average Loss: 3.191, avg. samples / sec: 912.53
Iteration:    300, Loss function: 8.453, Average Loss: 3.295, avg. samples / sec: 914.75
Iteration:    320, Loss function: 8.541, Average Loss: 3.396, avg. samples / sec: 895.03
Iteration:    340, Loss function: 8.407, Average Loss: 3.494, avg. samples / sec: 975.85
Iteration:    360, Loss function: 8.050, Average Loss: 3.588, avg. samples / sec: 915.18
Iteration:    380, Loss function: 7.949, Average Loss: 3.678, avg. samples / sec: 948.66
Iteration:    400, Loss function: 8.134, Average Loss: 3.763, avg. samples / sec: 961.26
Iteration:    420, Loss function: 7.743, Average Loss: 3.847, avg. samples / sec: 962.54
Iteration:    440, Loss function: 7.979, Average Loss: 3.927, avg. samples / sec: 966.48
Iteration:    460, Loss function: 7.750, Average Loss: 4.004, avg. samples / sec: 952.10
Iteration:    480, Loss function: 7.581, Average Loss: 4.078, avg. samples / sec: 958.19
Iteration:    500, Loss function: 7.696, Average Loss: 4.148, avg. samples / sec: 959.54
Iteration:    520, Loss function: 7.552, Average Loss: 4.217, avg. samples / sec: 952.20
Iteration:    540, Loss function: 7.606, Average Loss: 4.282, avg. samples / sec: 971.74
Iteration:    560, Loss function: 7.213, Average Loss: 4.346, avg. samples / sec: 938.02
Iteration:    580, Loss function: 7.371, Average Loss: 4.407, avg. samples / sec: 860.25
Iteration:    600, Loss function: 7.343, Average Loss: 4.466, avg. samples / sec: 980.71
Iteration:    620, Loss function: 7.152, Average Loss: 4.522, avg. samples / sec: 987.21
Iteration:    640, Loss function: 6.989, Average Loss: 4.576, avg. samples / sec: 910.57
Iteration:    660, Loss function: 7.287, Average Loss: 4.628, avg. samples / sec: 972.54
Iteration:    680, Loss function: 7.456, Average Loss: 4.680, avg. samples / sec: 954.65
Iteration:    700, Loss function: 6.864, Average Loss: 4.729, avg. samples / sec: 909.23
Iteration:    720, Loss function: 6.982, Average Loss: 4.778, avg. samples / sec: 942.63
Iteration:    740, Loss function: 6.971, Average Loss: 4.823, avg. samples / sec: 980.16
Iteration:    760, Loss function: 7.012, Average Loss: 4.867, avg. samples / sec: 973.50
Iteration:    780, Loss function: 6.755, Average Loss: 4.909, avg. samples / sec: 970.23
Iteration:    800, Loss function: 7.195, Average Loss: 4.948, avg. samples / sec: 939.78
Iteration:    820, Loss function: 6.853, Average Loss: 4.986, avg. samples / sec: 935.13
Iteration:    840, Loss function: 6.820, Average Loss: 5.021, avg. samples / sec: 905.46
Iteration:    860, Loss function: 6.677, Average Loss: 5.055, avg. samples / sec: 930.10
Iteration:    880, Loss function: 6.648, Average Loss: 5.088, avg. samples / sec: 979.01
Iteration:    900, Loss function: 6.805, Average Loss: 5.118, avg. samples / sec: 977.51
Iteration:    920, Loss function: 6.760, Average Loss: 5.148, avg. samples / sec: 947.49
Iteration:    940, Loss function: 6.783, Average Loss: 5.177, avg. samples / sec: 964.31
Iteration:    960, Loss function: 6.572, Average Loss: 5.206, avg. samples / sec: 871.74
Iteration:    980, Loss function: 6.555, Average Loss: 5.233, avg. samples / sec: 937.77
Iteration:   1000, Loss function: 6.576, Average Loss: 5.259, avg. samples / sec: 968.91
Iteration:   1020, Loss function: 6.318, Average Loss: 5.282, avg. samples / sec: 969.07
:::MLLOG {"namespace": "", "time_ms": 1639073925805, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073925807, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.684, Average Loss: 5.307, avg. samples / sec: 978.39
Iteration:   1060, Loss function: 6.405, Average Loss: 5.329, avg. samples / sec: 985.25
Iteration:   1080, Loss function: 6.603, Average Loss: 5.351, avg. samples / sec: 957.36
Iteration:   1100, Loss function: 6.140, Average Loss: 5.371, avg. samples / sec: 863.23
Iteration:   1120, Loss function: 6.224, Average Loss: 5.391, avg. samples / sec: 922.91
Iteration:   1140, Loss function: 6.545, Average Loss: 5.410, avg. samples / sec: 971.13
Iteration:   1160, Loss function: 6.297, Average Loss: 5.428, avg. samples / sec: 979.91
Iteration:   1180, Loss function: 6.261, Average Loss: 5.445, avg. samples / sec: 992.64
Iteration:   1200, Loss function: 6.234, Average Loss: 5.461, avg. samples / sec: 903.66
Iteration:   1220, Loss function: 6.170, Average Loss: 5.476, avg. samples / sec: 918.41
Iteration:   1240, Loss function: 6.103, Average Loss: 5.489, avg. samples / sec: 961.60
Iteration:   1260, Loss function: 6.046, Average Loss: 5.501, avg. samples / sec: 971.33
Iteration:   1280, Loss function: 5.983, Average Loss: 5.514, avg. samples / sec: 970.43
Iteration:   1300, Loss function: 6.181, Average Loss: 5.526, avg. samples / sec: 959.01
Iteration:   1320, Loss function: 6.185, Average Loss: 5.537, avg. samples / sec: 923.69
Iteration:   1340, Loss function: 5.922, Average Loss: 5.548, avg. samples / sec: 937.67
Iteration:   1360, Loss function: 5.889, Average Loss: 5.558, avg. samples / sec: 958.00
Iteration:   1380, Loss function: 6.169, Average Loss: 5.567, avg. samples / sec: 967.05
Iteration:   1400, Loss function: 6.097, Average Loss: 5.575, avg. samples / sec: 982.02
Iteration:   1420, Loss function: 5.859, Average Loss: 5.582, avg. samples / sec: 947.69
Iteration:   1440, Loss function: 6.279, Average Loss: 5.590, avg. samples / sec: 921.25
Iteration:   1460, Loss function: 6.140, Average Loss: 5.599, avg. samples / sec: 931.94
Iteration:   1480, Loss function: 6.065, Average Loss: 5.606, avg. samples / sec: 968.03
Iteration:   1500, Loss function: 6.186, Average Loss: 5.615, avg. samples / sec: 990.38
Iteration:   1520, Loss function: 6.078, Average Loss: 5.621, avg. samples / sec: 976.51
Iteration:   1540, Loss function: 6.041, Average Loss: 5.625, avg. samples / sec: 991.38
Iteration:   1560, Loss function: 5.590, Average Loss: 5.630, avg. samples / sec: 981.26
Iteration:   1580, Loss function: 5.663, Average Loss: 5.634, avg. samples / sec: 983.65
Iteration:   1600, Loss function: 6.139, Average Loss: 5.639, avg. samples / sec: 925.46
Iteration:   1620, Loss function: 5.776, Average Loss: 5.644, avg. samples / sec: 957.86
Iteration:   1640, Loss function: 5.902, Average Loss: 5.646, avg. samples / sec: 991.25
Iteration:   1660, Loss function: 6.152, Average Loss: 5.651, avg. samples / sec: 994.31
Iteration:   1680, Loss function: 5.719, Average Loss: 5.654, avg. samples / sec: 923.79
Iteration:   1700, Loss function: 5.497, Average Loss: 5.658, avg. samples / sec: 968.10
Iteration:   1720, Loss function: 5.737, Average Loss: 5.660, avg. samples / sec: 976.82
Iteration:   1740, Loss function: 5.848, Average Loss: 5.662, avg. samples / sec: 979.27
Iteration:   1760, Loss function: 5.667, Average Loss: 5.664, avg. samples / sec: 986.41
Iteration:   1780, Loss function: 5.550, Average Loss: 5.664, avg. samples / sec: 923.17
Iteration:   1800, Loss function: 5.637, Average Loss: 5.666, avg. samples / sec: 957.01
Iteration:   1820, Loss function: 6.059, Average Loss: 5.668, avg. samples / sec: 962.81
Iteration:   1840, Loss function: 5.759, Average Loss: 5.668, avg. samples / sec: 969.94
Iteration:   1860, Loss function: 5.602, Average Loss: 5.668, avg. samples / sec: 971.51
Iteration:   1880, Loss function: 5.737, Average Loss: 5.668, avg. samples / sec: 864.78
Iteration:   1900, Loss function: 5.983, Average Loss: 5.668, avg. samples / sec: 951.81
Iteration:   1920, Loss function: 5.797, Average Loss: 5.667, avg. samples / sec: 974.87
Iteration:   1940, Loss function: 5.879, Average Loss: 5.666, avg. samples / sec: 917.87
Iteration:   1960, Loss function: 5.618, Average Loss: 5.666, avg. samples / sec: 950.74
Iteration:   1980, Loss function: 5.729, Average Loss: 5.665, avg. samples / sec: 942.61
Iteration:   2000, Loss function: 5.806, Average Loss: 5.665, avg. samples / sec: 971.48
Iteration:   2020, Loss function: 5.687, Average Loss: 5.664, avg. samples / sec: 913.71
Iteration:   2040, Loss function: 5.617, Average Loss: 5.664, avg. samples / sec: 895.47
:::MLLOG {"namespace": "", "time_ms": 1639074048887, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074048888, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.406, Average Loss: 5.662, avg. samples / sec: 970.80
Iteration:   2080, Loss function: 5.137, Average Loss: 5.659, avg. samples / sec: 925.89
Iteration:   2100, Loss function: 5.602, Average Loss: 5.657, avg. samples / sec: 953.53
Iteration:   2120, Loss function: 5.407, Average Loss: 5.653, avg. samples / sec: 969.68
Iteration:   2140, Loss function: 5.511, Average Loss: 5.649, avg. samples / sec: 969.62
Iteration:   2160, Loss function: 5.518, Average Loss: 5.646, avg. samples / sec: 959.71
Iteration:   2180, Loss function: 5.286, Average Loss: 5.643, avg. samples / sec: 932.38
Iteration:   2200, Loss function: 5.598, Average Loss: 5.639, avg. samples / sec: 936.55
Iteration:   2220, Loss function: 5.584, Average Loss: 5.637, avg. samples / sec: 985.79
Iteration:   2240, Loss function: 5.303, Average Loss: 5.634, avg. samples / sec: 965.60
Iteration:   2260, Loss function: 5.309, Average Loss: 5.630, avg. samples / sec: 964.01
Iteration:   2280, Loss function: 5.311, Average Loss: 5.627, avg. samples / sec: 972.30
Iteration:   2300, Loss function: 5.265, Average Loss: 5.624, avg. samples / sec: 988.56
Iteration:   2320, Loss function: 5.132, Average Loss: 5.622, avg. samples / sec: 945.08
Iteration:   2340, Loss function: 5.559, Average Loss: 5.619, avg. samples / sec: 925.34
Iteration:   2360, Loss function: 5.406, Average Loss: 5.615, avg. samples / sec: 902.20
Iteration:   2380, Loss function: 5.331, Average Loss: 5.611, avg. samples / sec: 981.42
Iteration:   2400, Loss function: 5.538, Average Loss: 5.607, avg. samples / sec: 999.69
Iteration:   2420, Loss function: 5.548, Average Loss: 5.603, avg. samples / sec: 951.73
Iteration:   2440, Loss function: 5.618, Average Loss: 5.600, avg. samples / sec: 975.99
Iteration:   2460, Loss function: 5.294, Average Loss: 5.596, avg. samples / sec: 959.04
Iteration:   2480, Loss function: 5.421, Average Loss: 5.593, avg. samples / sec: 939.80
Iteration:   2500, Loss function: 5.558, Average Loss: 5.589, avg. samples / sec: 971.53
Iteration:   2520, Loss function: 5.342, Average Loss: 5.584, avg. samples / sec: 968.64
Iteration:   2540, Loss function: 5.353, Average Loss: 5.580, avg. samples / sec: 932.00
Iteration:   2560, Loss function: 5.202, Average Loss: 5.576, avg. samples / sec: 828.41
Iteration:   2580, Loss function: 5.353, Average Loss: 5.572, avg. samples / sec: 985.82
Iteration:   2600, Loss function: 5.517, Average Loss: 5.569, avg. samples / sec: 982.73
Iteration:   2620, Loss function: 5.646, Average Loss: 5.564, avg. samples / sec: 960.94
Iteration:   2640, Loss function: 5.151, Average Loss: 5.561, avg. samples / sec: 947.82
Iteration:   2660, Loss function: 5.298, Average Loss: 5.558, avg. samples / sec: 971.13
Iteration:   2680, Loss function: 5.352, Average Loss: 5.554, avg. samples / sec: 988.86
Iteration:   2700, Loss function: 5.118, Average Loss: 5.548, avg. samples / sec: 885.04
Iteration:   2720, Loss function: 5.301, Average Loss: 5.544, avg. samples / sec: 947.77
Iteration:   2740, Loss function: 5.038, Average Loss: 5.540, avg. samples / sec: 974.22
Iteration:   2760, Loss function: 4.925, Average Loss: 5.533, avg. samples / sec: 951.24
Iteration:   2780, Loss function: 5.456, Average Loss: 5.529, avg. samples / sec: 974.26
Iteration:   2800, Loss function: 5.334, Average Loss: 5.524, avg. samples / sec: 966.64
Iteration:   2820, Loss function: 5.340, Average Loss: 5.520, avg. samples / sec: 982.33
Iteration:   2840, Loss function: 5.220, Average Loss: 5.516, avg. samples / sec: 974.22
Iteration:   2860, Loss function: 5.285, Average Loss: 5.510, avg. samples / sec: 948.58
Iteration:   2880, Loss function: 5.220, Average Loss: 5.505, avg. samples / sec: 948.11
Iteration:   2900, Loss function: 5.043, Average Loss: 5.500, avg. samples / sec: 967.65
Iteration:   2920, Loss function: 5.207, Average Loss: 5.494, avg. samples / sec: 984.03
Iteration:   2940, Loss function: 4.908, Average Loss: 5.489, avg. samples / sec: 961.12
Iteration:   2960, Loss function: 5.396, Average Loss: 5.485, avg. samples / sec: 980.77
Iteration:   2980, Loss function: 5.301, Average Loss: 5.481, avg. samples / sec: 990.10
Iteration:   3000, Loss function: 5.271, Average Loss: 5.476, avg. samples / sec: 957.97
Iteration:   3020, Loss function: 5.388, Average Loss: 5.470, avg. samples / sec: 966.40
Iteration:   3040, Loss function: 5.211, Average Loss: 5.465, avg. samples / sec: 984.33
Iteration:   3060, Loss function: 4.992, Average Loss: 5.458, avg. samples / sec: 982.78
Iteration:   3080, Loss function: 4.771, Average Loss: 5.453, avg. samples / sec: 979.61
:::MLLOG {"namespace": "", "time_ms": 1639074171133, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074171134, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.119, Average Loss: 5.448, avg. samples / sec: 957.17
Iteration:   3120, Loss function: 5.124, Average Loss: 5.441, avg. samples / sec: 986.60
Iteration:   3140, Loss function: 5.094, Average Loss: 5.436, avg. samples / sec: 991.98
Iteration:   3160, Loss function: 5.302, Average Loss: 5.430, avg. samples / sec: 977.28
Iteration:   3180, Loss function: 5.036, Average Loss: 5.425, avg. samples / sec: 988.75
Iteration:   3200, Loss function: 5.190, Average Loss: 5.419, avg. samples / sec: 974.69
Iteration:   3220, Loss function: 5.196, Average Loss: 5.414, avg. samples / sec: 984.37
Iteration:   3240, Loss function: 5.055, Average Loss: 5.409, avg. samples / sec: 978.42
Iteration:   3260, Loss function: 5.107, Average Loss: 5.403, avg. samples / sec: 975.18
Iteration:   3280, Loss function: 4.813, Average Loss: 5.396, avg. samples / sec: 969.18
Iteration:   3300, Loss function: 4.873, Average Loss: 5.390, avg. samples / sec: 926.14
Iteration:   3320, Loss function: 5.014, Average Loss: 5.385, avg. samples / sec: 974.99
Iteration:   3340, Loss function: 5.056, Average Loss: 5.381, avg. samples / sec: 991.24
Iteration:   3360, Loss function: 5.075, Average Loss: 5.374, avg. samples / sec: 942.70
Iteration:   3380, Loss function: 5.184, Average Loss: 5.367, avg. samples / sec: 944.68
Iteration:   3400, Loss function: 4.784, Average Loss: 5.362, avg. samples / sec: 897.24
Iteration:   3420, Loss function: 5.363, Average Loss: 5.357, avg. samples / sec: 938.49
Iteration:   3440, Loss function: 4.963, Average Loss: 5.353, avg. samples / sec: 906.47
Iteration:   3460, Loss function: 5.184, Average Loss: 5.348, avg. samples / sec: 971.19
Iteration:   3480, Loss function: 5.201, Average Loss: 5.342, avg. samples / sec: 957.26
Iteration:   3500, Loss function: 5.347, Average Loss: 5.338, avg. samples / sec: 960.70
Iteration:   3520, Loss function: 5.183, Average Loss: 5.334, avg. samples / sec: 979.66
Iteration:   3540, Loss function: 5.053, Average Loss: 5.329, avg. samples / sec: 923.60
Iteration:   3560, Loss function: 4.899, Average Loss: 5.325, avg. samples / sec: 935.28
Iteration:   3580, Loss function: 5.163, Average Loss: 5.321, avg. samples / sec: 865.19
Iteration:   3600, Loss function: 5.215, Average Loss: 5.315, avg. samples / sec: 942.50
Iteration:   3620, Loss function: 4.922, Average Loss: 5.310, avg. samples / sec: 933.04
Iteration:   3640, Loss function: 4.740, Average Loss: 5.304, avg. samples / sec: 988.09
Iteration:   3660, Loss function: 5.122, Average Loss: 5.299, avg. samples / sec: 916.75
Iteration:   3680, Loss function: 5.123, Average Loss: 5.293, avg. samples / sec: 949.48
Iteration:   3700, Loss function: 5.032, Average Loss: 5.287, avg. samples / sec: 876.38
Iteration:   3720, Loss function: 4.912, Average Loss: 5.280, avg. samples / sec: 828.12
Iteration:   3740, Loss function: 5.217, Average Loss: 5.276, avg. samples / sec: 955.00
Iteration:   3760, Loss function: 5.198, Average Loss: 5.272, avg. samples / sec: 965.18
Iteration:   3780, Loss function: 4.998, Average Loss: 5.267, avg. samples / sec: 971.56
Iteration:   3800, Loss function: 4.991, Average Loss: 5.264, avg. samples / sec: 940.42
Iteration:   3820, Loss function: 5.140, Average Loss: 5.260, avg. samples / sec: 977.84
Iteration:   3840, Loss function: 4.903, Average Loss: 5.255, avg. samples / sec: 931.76
Iteration:   3860, Loss function: 4.899, Average Loss: 5.250, avg. samples / sec: 983.46
Iteration:   3880, Loss function: 5.058, Average Loss: 5.244, avg. samples / sec: 893.78
Iteration:   3900, Loss function: 5.115, Average Loss: 5.239, avg. samples / sec: 983.27
Iteration:   3920, Loss function: 5.174, Average Loss: 5.234, avg. samples / sec: 966.60
Iteration:   3940, Loss function: 5.099, Average Loss: 5.229, avg. samples / sec: 980.60
Iteration:   3960, Loss function: 4.849, Average Loss: 5.225, avg. samples / sec: 982.38
Iteration:   3980, Loss function: 4.879, Average Loss: 5.220, avg. samples / sec: 956.05
Iteration:   4000, Loss function: 5.238, Average Loss: 5.217, avg. samples / sec: 957.24
Iteration:   4020, Loss function: 4.997, Average Loss: 5.211, avg. samples / sec: 929.23
Iteration:   4040, Loss function: 5.022, Average Loss: 5.208, avg. samples / sec: 952.67
Iteration:   4060, Loss function: 5.094, Average Loss: 5.204, avg. samples / sec: 977.46
Iteration:   4080, Loss function: 5.004, Average Loss: 5.199, avg. samples / sec: 981.87
Iteration:   4100, Loss function: 5.074, Average Loss: 5.195, avg. samples / sec: 977.39
:::MLLOG {"namespace": "", "time_ms": 1639074294374, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074294375, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.114, Average Loss: 5.192, avg. samples / sec: 985.24
Iteration:   4140, Loss function: 5.154, Average Loss: 5.187, avg. samples / sec: 954.75
Iteration:   4160, Loss function: 4.911, Average Loss: 5.180, avg. samples / sec: 937.59
Iteration:   4180, Loss function: 4.823, Average Loss: 5.173, avg. samples / sec: 942.69
Iteration:   4200, Loss function: 5.084, Average Loss: 5.170, avg. samples / sec: 961.98
Iteration:   4220, Loss function: 4.855, Average Loss: 5.165, avg. samples / sec: 959.03
Iteration:   4240, Loss function: 5.004, Average Loss: 5.160, avg. samples / sec: 884.47
Iteration:   4260, Loss function: 4.958, Average Loss: 5.154, avg. samples / sec: 964.17
Iteration:   4280, Loss function: 4.932, Average Loss: 5.148, avg. samples / sec: 936.34
Iteration:   4300, Loss function: 4.689, Average Loss: 5.141, avg. samples / sec: 936.72
Iteration:   4320, Loss function: 4.937, Average Loss: 5.137, avg. samples / sec: 968.79
Iteration:   4340, Loss function: 4.874, Average Loss: 5.131, avg. samples / sec: 938.75
Iteration:   4360, Loss function: 4.832, Average Loss: 5.127, avg. samples / sec: 992.08
Iteration:   4380, Loss function: 5.228, Average Loss: 5.123, avg. samples / sec: 929.18
Iteration:   4400, Loss function: 4.991, Average Loss: 5.118, avg. samples / sec: 941.31
Iteration:   4420, Loss function: 4.861, Average Loss: 5.113, avg. samples / sec: 934.87
Iteration:   4440, Loss function: 4.792, Average Loss: 5.108, avg. samples / sec: 976.54
Iteration:   4460, Loss function: 5.313, Average Loss: 5.104, avg. samples / sec: 941.07
Iteration:   4480, Loss function: 4.982, Average Loss: 5.101, avg. samples / sec: 920.96
Iteration:   4500, Loss function: 4.931, Average Loss: 5.097, avg. samples / sec: 976.94
Iteration:   4520, Loss function: 4.773, Average Loss: 5.094, avg. samples / sec: 979.98
Iteration:   4540, Loss function: 5.135, Average Loss: 5.089, avg. samples / sec: 915.17
Iteration:   4560, Loss function: 4.903, Average Loss: 5.085, avg. samples / sec: 929.79
Iteration:   4580, Loss function: 4.790, Average Loss: 5.083, avg. samples / sec: 977.18
Iteration:   4600, Loss function: 4.809, Average Loss: 5.080, avg. samples / sec: 989.94
Iteration:   4620, Loss function: 4.837, Average Loss: 5.076, avg. samples / sec: 982.89
Iteration:   4640, Loss function: 4.542, Average Loss: 5.071, avg. samples / sec: 917.31
Iteration:   4660, Loss function: 4.671, Average Loss: 5.067, avg. samples / sec: 886.90
Iteration:   4680, Loss function: 5.148, Average Loss: 5.062, avg. samples / sec: 993.13
Iteration:   4700, Loss function: 4.787, Average Loss: 5.058, avg. samples / sec: 962.92
Iteration:   4720, Loss function: 4.944, Average Loss: 5.054, avg. samples / sec: 914.74
Iteration:   4740, Loss function: 4.721, Average Loss: 5.049, avg. samples / sec: 981.79
Iteration:   4760, Loss function: 4.816, Average Loss: 5.046, avg. samples / sec: 922.28
Iteration:   4780, Loss function: 4.929, Average Loss: 5.042, avg. samples / sec: 937.77
Iteration:   4800, Loss function: 4.836, Average Loss: 5.039, avg. samples / sec: 962.12
Iteration:   4820, Loss function: 4.827, Average Loss: 5.035, avg. samples / sec: 943.89
Iteration:   4840, Loss function: 5.054, Average Loss: 5.032, avg. samples / sec: 959.46
Iteration:   4860, Loss function: 4.654, Average Loss: 5.028, avg. samples / sec: 911.74
Iteration:   4880, Loss function: 5.234, Average Loss: 5.024, avg. samples / sec: 970.45
Iteration:   4900, Loss function: 4.608, Average Loss: 5.020, avg. samples / sec: 980.34
Iteration:   4920, Loss function: 4.956, Average Loss: 5.016, avg. samples / sec: 915.89
Iteration:   4940, Loss function: 4.720, Average Loss: 5.011, avg. samples / sec: 937.98
Iteration:   4960, Loss function: 4.497, Average Loss: 5.007, avg. samples / sec: 989.09
Iteration:   4980, Loss function: 4.953, Average Loss: 5.004, avg. samples / sec: 981.92
Iteration:   5000, Loss function: 4.976, Average Loss: 5.001, avg. samples / sec: 975.53
Iteration:   5020, Loss function: 5.249, Average Loss: 4.998, avg. samples / sec: 989.19
Iteration:   5040, Loss function: 4.811, Average Loss: 4.995, avg. samples / sec: 941.96
Iteration:   5060, Loss function: 4.663, Average Loss: 4.991, avg. samples / sec: 957.49
Iteration:   5080, Loss function: 4.459, Average Loss: 4.987, avg. samples / sec: 975.00
Iteration:   5100, Loss function: 4.799, Average Loss: 4.984, avg. samples / sec: 993.18
Iteration:   5120, Loss function: 4.701, Average Loss: 4.981, avg. samples / sec: 977.38
Iteration:   5140, Loss function: 4.791, Average Loss: 4.978, avg. samples / sec: 985.47
:::MLLOG {"namespace": "", "time_ms": 1639074417467, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.09 s
:::MLLOG {"namespace": "", "time_ms": 1639074450637, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074450694, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074450694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.73s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.974, Average Loss: 4.973, avg. samples / sec: 64.05
DONE (t=3.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10853
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22121
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09688
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19672
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14138
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20687
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21909
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21909
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10853 AP goal: 0.10000
Iteration:   5180, Loss function: 4.692, Average Loss: 4.968, avg. samples / sec: 1009.10
:::MLLOG {"namespace": "", "time_ms": 1639074454976, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074454977, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10852548156100907, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074454977, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074455123, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074456
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:36 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:11 PM'
START TIMING RUN WAS 2021-12-09 06:16:11 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:36 PM'
ENDING TIMING RUN AT 2021-12-09 06:27:36 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ result=685
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,685,nvidia,2021-12-09 06:16:11 PM'
RESULT,SINGLE_STAGE_DETECTOR,,685,nvidia,2021-12-09 06:16:11 PM
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
