+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-4bqpv.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-4bqpv.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-4bqpv.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169'
Found 1 MIG instances: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073771
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:11 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-15-55 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ set +x
Thu Dec  9 18:16:11 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-4bqpv to the sync file ...
run-ssd--1-4bqpv Found 7 Pods, waiting to have 8 ...
     1	run-ssd--1-crckk
     2	run-ssd--1-5r9lr
     3	run-ssd--1-z64cs
     4	run-ssd--1-72t5f
     5	run-ssd--1-6kz48
     6	run-ssd--1-zxwjp
     7	run-ssd--1-4bqpv
Thu Dec  9 18:16:16 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073778557, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073778701, "event_type": "POINT_IN_TIME", "key": "seed", "value": 244949700, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 244949700
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073780593, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073780593, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073780597, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073804603, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073804604, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073806479, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073806481, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073806878, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073806879, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073806881, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.932, Average Loss: 0.023, avg. samples / sec: 4.39
Iteration:     20, Loss function: 20.993, Average Loss: 0.458, avg. samples / sec: 777.83
Iteration:     40, Loss function: 20.741, Average Loss: 0.859, avg. samples / sec: 831.25
Iteration:     60, Loss function: 20.341, Average Loss: 1.248, avg. samples / sec: 922.85
Iteration:     80, Loss function: 19.568, Average Loss: 1.619, avg. samples / sec: 889.39
Iteration:    100, Loss function: 14.081, Average Loss: 1.926, avg. samples / sec: 670.94
Iteration:    120, Loss function: 10.531, Average Loss: 2.120, avg. samples / sec: 904.19
Iteration:    140, Loss function: 9.528, Average Loss: 2.271, avg. samples / sec: 890.22
Iteration:    160, Loss function: 9.016, Average Loss: 2.410, avg. samples / sec: 921.65
Iteration:    180, Loss function: 8.989, Average Loss: 2.539, avg. samples / sec: 891.63
Iteration:    200, Loss function: 8.655, Average Loss: 2.664, avg. samples / sec: 934.97
Iteration:    220, Loss function: 8.597, Average Loss: 2.786, avg. samples / sec: 979.92
Iteration:    240, Loss function: 8.768, Average Loss: 2.906, avg. samples / sec: 984.89
Iteration:    260, Loss function: 8.764, Average Loss: 3.024, avg. samples / sec: 920.95
Iteration:    280, Loss function: 8.543, Average Loss: 3.136, avg. samples / sec: 952.03
Iteration:    300, Loss function: 8.245, Average Loss: 3.241, avg. samples / sec: 960.14
Iteration:    320, Loss function: 8.349, Average Loss: 3.341, avg. samples / sec: 881.07
Iteration:    340, Loss function: 8.229, Average Loss: 3.438, avg. samples / sec: 939.31
Iteration:    360, Loss function: 8.081, Average Loss: 3.532, avg. samples / sec: 923.59
Iteration:    380, Loss function: 7.926, Average Loss: 3.623, avg. samples / sec: 955.41
Iteration:    400, Loss function: 8.085, Average Loss: 3.708, avg. samples / sec: 913.77
Iteration:    420, Loss function: 7.863, Average Loss: 3.792, avg. samples / sec: 940.14
Iteration:    440, Loss function: 7.871, Average Loss: 3.872, avg. samples / sec: 990.10
Iteration:    460, Loss function: 7.833, Average Loss: 3.948, avg. samples / sec: 957.99
Iteration:    480, Loss function: 7.552, Average Loss: 4.023, avg. samples / sec: 965.84
Iteration:    500, Loss function: 7.746, Average Loss: 4.094, avg. samples / sec: 961.52
Iteration:    520, Loss function: 7.510, Average Loss: 4.164, avg. samples / sec: 975.60
Iteration:    540, Loss function: 7.533, Average Loss: 4.231, avg. samples / sec: 932.70
Iteration:    560, Loss function: 7.246, Average Loss: 4.295, avg. samples / sec: 975.36
Iteration:    580, Loss function: 7.191, Average Loss: 4.356, avg. samples / sec: 974.27
Iteration:    600, Loss function: 7.393, Average Loss: 4.415, avg. samples / sec: 767.77
Iteration:    620, Loss function: 6.877, Average Loss: 4.472, avg. samples / sec: 960.80
Iteration:    640, Loss function: 7.071, Average Loss: 4.527, avg. samples / sec: 956.24
Iteration:    660, Loss function: 7.107, Average Loss: 4.579, avg. samples / sec: 930.25
Iteration:    680, Loss function: 7.290, Average Loss: 4.630, avg. samples / sec: 909.79
Iteration:    700, Loss function: 6.844, Average Loss: 4.680, avg. samples / sec: 942.02
Iteration:    720, Loss function: 7.053, Average Loss: 4.729, avg. samples / sec: 930.61
Iteration:    740, Loss function: 6.928, Average Loss: 4.774, avg. samples / sec: 969.16
Iteration:    760, Loss function: 7.071, Average Loss: 4.817, avg. samples / sec: 952.32
Iteration:    780, Loss function: 6.853, Average Loss: 4.860, avg. samples / sec: 969.24
Iteration:    800, Loss function: 7.147, Average Loss: 4.900, avg. samples / sec: 973.95
Iteration:    820, Loss function: 6.795, Average Loss: 4.938, avg. samples / sec: 914.18
Iteration:    840, Loss function: 6.756, Average Loss: 4.974, avg. samples / sec: 955.85
Iteration:    860, Loss function: 6.781, Average Loss: 5.008, avg. samples / sec: 973.72
Iteration:    880, Loss function: 6.561, Average Loss: 5.041, avg. samples / sec: 998.39
Iteration:    900, Loss function: 6.732, Average Loss: 5.071, avg. samples / sec: 940.94
Iteration:    920, Loss function: 6.684, Average Loss: 5.101, avg. samples / sec: 956.23
Iteration:    940, Loss function: 6.753, Average Loss: 5.130, avg. samples / sec: 936.39
Iteration:    960, Loss function: 6.477, Average Loss: 5.158, avg. samples / sec: 949.75
Iteration:    980, Loss function: 6.292, Average Loss: 5.186, avg. samples / sec: 953.79
Iteration:   1000, Loss function: 6.489, Average Loss: 5.212, avg. samples / sec: 945.38
Iteration:   1020, Loss function: 6.220, Average Loss: 5.235, avg. samples / sec: 967.74
:::MLLOG {"namespace": "", "time_ms": 1639073933438, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073933439, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.477, Average Loss: 5.259, avg. samples / sec: 938.42
Iteration:   1060, Loss function: 6.343, Average Loss: 5.282, avg. samples / sec: 965.98
Iteration:   1080, Loss function: 6.340, Average Loss: 5.304, avg. samples / sec: 955.80
Iteration:   1100, Loss function: 6.109, Average Loss: 5.325, avg. samples / sec: 976.76
Iteration:   1120, Loss function: 6.101, Average Loss: 5.344, avg. samples / sec: 967.15
Iteration:   1140, Loss function: 6.421, Average Loss: 5.363, avg. samples / sec: 984.48
Iteration:   1160, Loss function: 6.040, Average Loss: 5.380, avg. samples / sec: 970.57
Iteration:   1180, Loss function: 6.105, Average Loss: 5.396, avg. samples / sec: 982.96
Iteration:   1200, Loss function: 6.223, Average Loss: 5.412, avg. samples / sec: 896.51
Iteration:   1220, Loss function: 6.071, Average Loss: 5.428, avg. samples / sec: 913.25
Iteration:   1240, Loss function: 6.071, Average Loss: 5.440, avg. samples / sec: 913.80
Iteration:   1260, Loss function: 5.895, Average Loss: 5.454, avg. samples / sec: 960.51
Iteration:   1280, Loss function: 5.836, Average Loss: 5.466, avg. samples / sec: 956.03
Iteration:   1300, Loss function: 6.144, Average Loss: 5.480, avg. samples / sec: 967.59
Iteration:   1320, Loss function: 6.227, Average Loss: 5.493, avg. samples / sec: 895.47
Iteration:   1340, Loss function: 5.734, Average Loss: 5.501, avg. samples / sec: 958.53
Iteration:   1360, Loss function: 5.936, Average Loss: 5.511, avg. samples / sec: 943.29
Iteration:   1380, Loss function: 5.991, Average Loss: 5.521, avg. samples / sec: 915.70
Iteration:   1400, Loss function: 6.096, Average Loss: 5.531, avg. samples / sec: 876.25
Iteration:   1420, Loss function: 6.043, Average Loss: 5.539, avg. samples / sec: 891.01
Iteration:   1440, Loss function: 6.291, Average Loss: 5.547, avg. samples / sec: 959.85
Iteration:   1460, Loss function: 6.362, Average Loss: 5.556, avg. samples / sec: 987.55
Iteration:   1480, Loss function: 5.978, Average Loss: 5.564, avg. samples / sec: 961.62
Iteration:   1500, Loss function: 6.076, Average Loss: 5.572, avg. samples / sec: 937.40
Iteration:   1520, Loss function: 5.956, Average Loss: 5.577, avg. samples / sec: 999.07
Iteration:   1540, Loss function: 5.912, Average Loss: 5.580, avg. samples / sec: 975.01
Iteration:   1560, Loss function: 5.631, Average Loss: 5.585, avg. samples / sec: 978.90
Iteration:   1580, Loss function: 5.604, Average Loss: 5.589, avg. samples / sec: 992.90
Iteration:   1600, Loss function: 6.197, Average Loss: 5.594, avg. samples / sec: 981.98
Iteration:   1620, Loss function: 5.798, Average Loss: 5.599, avg. samples / sec: 967.19
Iteration:   1640, Loss function: 5.824, Average Loss: 5.603, avg. samples / sec: 913.71
Iteration:   1660, Loss function: 5.891, Average Loss: 5.607, avg. samples / sec: 923.07
Iteration:   1680, Loss function: 5.735, Average Loss: 5.611, avg. samples / sec: 893.33
Iteration:   1700, Loss function: 5.425, Average Loss: 5.614, avg. samples / sec: 974.47
Iteration:   1720, Loss function: 5.713, Average Loss: 5.617, avg. samples / sec: 982.82
Iteration:   1740, Loss function: 5.920, Average Loss: 5.620, avg. samples / sec: 892.95
Iteration:   1760, Loss function: 5.475, Average Loss: 5.622, avg. samples / sec: 910.07
Iteration:   1780, Loss function: 5.513, Average Loss: 5.622, avg. samples / sec: 934.76
Iteration:   1800, Loss function: 5.604, Average Loss: 5.625, avg. samples / sec: 962.23
Iteration:   1820, Loss function: 5.857, Average Loss: 5.626, avg. samples / sec: 937.06
Iteration:   1840, Loss function: 5.893, Average Loss: 5.628, avg. samples / sec: 982.33
Iteration:   1860, Loss function: 5.576, Average Loss: 5.627, avg. samples / sec: 958.53
Iteration:   1880, Loss function: 5.881, Average Loss: 5.629, avg. samples / sec: 975.34
Iteration:   1900, Loss function: 5.890, Average Loss: 5.630, avg. samples / sec: 989.01
Iteration:   1920, Loss function: 5.689, Average Loss: 5.630, avg. samples / sec: 944.58
Iteration:   1940, Loss function: 5.939, Average Loss: 5.630, avg. samples / sec: 990.80
Iteration:   1960, Loss function: 5.548, Average Loss: 5.629, avg. samples / sec: 994.73
Iteration:   1980, Loss function: 5.727, Average Loss: 5.629, avg. samples / sec: 978.78
Iteration:   2000, Loss function: 5.567, Average Loss: 5.629, avg. samples / sec: 972.03
Iteration:   2020, Loss function: 5.551, Average Loss: 5.627, avg. samples / sec: 963.29
Iteration:   2040, Loss function: 5.581, Average Loss: 5.626, avg. samples / sec: 980.05
:::MLLOG {"namespace": "", "time_ms": 1639074056633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074056635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.436, Average Loss: 5.623, avg. samples / sec: 949.32
Iteration:   2080, Loss function: 5.078, Average Loss: 5.621, avg. samples / sec: 950.99
Iteration:   2100, Loss function: 5.499, Average Loss: 5.618, avg. samples / sec: 937.65
Iteration:   2120, Loss function: 5.460, Average Loss: 5.615, avg. samples / sec: 934.39
Iteration:   2140, Loss function: 5.473, Average Loss: 5.612, avg. samples / sec: 979.80
Iteration:   2160, Loss function: 5.166, Average Loss: 5.609, avg. samples / sec: 1000.07
Iteration:   2180, Loss function: 5.491, Average Loss: 5.607, avg. samples / sec: 908.15
Iteration:   2200, Loss function: 5.599, Average Loss: 5.603, avg. samples / sec: 961.34
Iteration:   2220, Loss function: 5.596, Average Loss: 5.601, avg. samples / sec: 971.17
Iteration:   2240, Loss function: 5.473, Average Loss: 5.600, avg. samples / sec: 928.42
Iteration:   2260, Loss function: 5.329, Average Loss: 5.597, avg. samples / sec: 973.37
Iteration:   2280, Loss function: 5.085, Average Loss: 5.594, avg. samples / sec: 979.65
Iteration:   2300, Loss function: 4.972, Average Loss: 5.590, avg. samples / sec: 977.37
Iteration:   2320, Loss function: 5.244, Average Loss: 5.587, avg. samples / sec: 968.66
Iteration:   2340, Loss function: 5.284, Average Loss: 5.584, avg. samples / sec: 974.18
Iteration:   2360, Loss function: 5.387, Average Loss: 5.581, avg. samples / sec: 939.79
Iteration:   2380, Loss function: 5.448, Average Loss: 5.577, avg. samples / sec: 982.66
Iteration:   2400, Loss function: 5.714, Average Loss: 5.573, avg. samples / sec: 954.06
Iteration:   2420, Loss function: 5.404, Average Loss: 5.569, avg. samples / sec: 891.75
Iteration:   2440, Loss function: 5.527, Average Loss: 5.566, avg. samples / sec: 951.98
Iteration:   2460, Loss function: 5.123, Average Loss: 5.563, avg. samples / sec: 894.32
Iteration:   2480, Loss function: 5.241, Average Loss: 5.560, avg. samples / sec: 943.35
Iteration:   2500, Loss function: 5.323, Average Loss: 5.557, avg. samples / sec: 972.02
Iteration:   2520, Loss function: 5.218, Average Loss: 5.552, avg. samples / sec: 955.25
Iteration:   2540, Loss function: 5.401, Average Loss: 5.549, avg. samples / sec: 946.45
Iteration:   2560, Loss function: 5.275, Average Loss: 5.545, avg. samples / sec: 925.10
Iteration:   2580, Loss function: 5.238, Average Loss: 5.542, avg. samples / sec: 918.18
Iteration:   2600, Loss function: 5.310, Average Loss: 5.539, avg. samples / sec: 907.41
Iteration:   2620, Loss function: 5.297, Average Loss: 5.535, avg. samples / sec: 989.35
Iteration:   2640, Loss function: 5.233, Average Loss: 5.532, avg. samples / sec: 996.40
Iteration:   2660, Loss function: 5.267, Average Loss: 5.529, avg. samples / sec: 974.19
Iteration:   2680, Loss function: 5.098, Average Loss: 5.525, avg. samples / sec: 992.16
Iteration:   2700, Loss function: 5.044, Average Loss: 5.520, avg. samples / sec: 992.97
Iteration:   2720, Loss function: 5.291, Average Loss: 5.516, avg. samples / sec: 979.87
Iteration:   2740, Loss function: 4.984, Average Loss: 5.511, avg. samples / sec: 985.04
Iteration:   2760, Loss function: 4.901, Average Loss: 5.505, avg. samples / sec: 934.01
Iteration:   2780, Loss function: 5.574, Average Loss: 5.502, avg. samples / sec: 912.71
Iteration:   2800, Loss function: 5.243, Average Loss: 5.498, avg. samples / sec: 944.93
Iteration:   2820, Loss function: 5.380, Average Loss: 5.494, avg. samples / sec: 930.09
Iteration:   2840, Loss function: 5.036, Average Loss: 5.490, avg. samples / sec: 925.58
Iteration:   2860, Loss function: 5.092, Average Loss: 5.485, avg. samples / sec: 932.65
Iteration:   2880, Loss function: 5.331, Average Loss: 5.481, avg. samples / sec: 939.52
Iteration:   2900, Loss function: 5.019, Average Loss: 5.477, avg. samples / sec: 884.69
Iteration:   2920, Loss function: 5.273, Average Loss: 5.470, avg. samples / sec: 936.44
Iteration:   2940, Loss function: 4.908, Average Loss: 5.465, avg. samples / sec: 935.26
Iteration:   2960, Loss function: 5.434, Average Loss: 5.460, avg. samples / sec: 965.23
Iteration:   2980, Loss function: 5.219, Average Loss: 5.456, avg. samples / sec: 938.52
Iteration:   3000, Loss function: 5.243, Average Loss: 5.451, avg. samples / sec: 918.82
Iteration:   3020, Loss function: 5.305, Average Loss: 5.445, avg. samples / sec: 930.08
Iteration:   3040, Loss function: 5.289, Average Loss: 5.441, avg. samples / sec: 917.20
Iteration:   3060, Loss function: 5.000, Average Loss: 5.436, avg. samples / sec: 911.63
Iteration:   3080, Loss function: 4.917, Average Loss: 5.430, avg. samples / sec: 974.21
:::MLLOG {"namespace": "", "time_ms": 1639074180409, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074180410, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.176, Average Loss: 5.425, avg. samples / sec: 875.85
Iteration:   3120, Loss function: 5.001, Average Loss: 5.419, avg. samples / sec: 909.34
Iteration:   3140, Loss function: 5.097, Average Loss: 5.413, avg. samples / sec: 976.44
Iteration:   3160, Loss function: 5.536, Average Loss: 5.408, avg. samples / sec: 971.53
Iteration:   3180, Loss function: 4.901, Average Loss: 5.403, avg. samples / sec: 904.36
Iteration:   3200, Loss function: 5.276, Average Loss: 5.398, avg. samples / sec: 924.44
Iteration:   3220, Loss function: 5.057, Average Loss: 5.391, avg. samples / sec: 944.67
Iteration:   3240, Loss function: 5.223, Average Loss: 5.385, avg. samples / sec: 886.83
Iteration:   3260, Loss function: 5.028, Average Loss: 5.381, avg. samples / sec: 947.87
Iteration:   3280, Loss function: 4.933, Average Loss: 5.374, avg. samples / sec: 967.87
Iteration:   3300, Loss function: 4.918, Average Loss: 5.368, avg. samples / sec: 947.61
Iteration:   3320, Loss function: 5.007, Average Loss: 5.364, avg. samples / sec: 948.22
Iteration:   3340, Loss function: 5.103, Average Loss: 5.360, avg. samples / sec: 938.68
Iteration:   3360, Loss function: 5.182, Average Loss: 5.353, avg. samples / sec: 958.85
Iteration:   3380, Loss function: 5.295, Average Loss: 5.346, avg. samples / sec: 945.72
Iteration:   3400, Loss function: 4.819, Average Loss: 5.342, avg. samples / sec: 979.55
Iteration:   3420, Loss function: 5.059, Average Loss: 5.336, avg. samples / sec: 972.70
Iteration:   3440, Loss function: 5.024, Average Loss: 5.331, avg. samples / sec: 914.60
Iteration:   3460, Loss function: 5.181, Average Loss: 5.326, avg. samples / sec: 926.91
Iteration:   3480, Loss function: 5.117, Average Loss: 5.321, avg. samples / sec: 919.16
Iteration:   3500, Loss function: 5.325, Average Loss: 5.316, avg. samples / sec: 948.93
Iteration:   3520, Loss function: 5.090, Average Loss: 5.312, avg. samples / sec: 986.99
Iteration:   3540, Loss function: 4.996, Average Loss: 5.307, avg. samples / sec: 979.39
Iteration:   3560, Loss function: 5.063, Average Loss: 5.304, avg. samples / sec: 981.86
Iteration:   3580, Loss function: 4.979, Average Loss: 5.300, avg. samples / sec: 960.36
Iteration:   3600, Loss function: 5.167, Average Loss: 5.295, avg. samples / sec: 987.74
Iteration:   3620, Loss function: 4.775, Average Loss: 5.290, avg. samples / sec: 983.11
Iteration:   3640, Loss function: 4.815, Average Loss: 5.285, avg. samples / sec: 950.35
Iteration:   3660, Loss function: 5.167, Average Loss: 5.281, avg. samples / sec: 981.47
Iteration:   3680, Loss function: 5.054, Average Loss: 5.275, avg. samples / sec: 911.70
Iteration:   3700, Loss function: 4.885, Average Loss: 5.270, avg. samples / sec: 983.90
Iteration:   3720, Loss function: 4.884, Average Loss: 5.263, avg. samples / sec: 958.55
Iteration:   3740, Loss function: 5.190, Average Loss: 5.259, avg. samples / sec: 875.72
Iteration:   3760, Loss function: 5.153, Average Loss: 5.255, avg. samples / sec: 947.92
Iteration:   3780, Loss function: 5.038, Average Loss: 5.249, avg. samples / sec: 954.99
Iteration:   3800, Loss function: 5.066, Average Loss: 5.246, avg. samples / sec: 927.12
Iteration:   3820, Loss function: 5.499, Average Loss: 5.241, avg. samples / sec: 951.20
Iteration:   3840, Loss function: 4.887, Average Loss: 5.237, avg. samples / sec: 967.86
Iteration:   3860, Loss function: 4.962, Average Loss: 5.231, avg. samples / sec: 904.68
Iteration:   3880, Loss function: 5.076, Average Loss: 5.227, avg. samples / sec: 927.78
Iteration:   3900, Loss function: 5.071, Average Loss: 5.222, avg. samples / sec: 885.99
Iteration:   3920, Loss function: 5.074, Average Loss: 5.216, avg. samples / sec: 960.80
Iteration:   3940, Loss function: 5.104, Average Loss: 5.211, avg. samples / sec: 966.48
Iteration:   3960, Loss function: 4.903, Average Loss: 5.207, avg. samples / sec: 950.17
Iteration:   3980, Loss function: 5.032, Average Loss: 5.203, avg. samples / sec: 936.04
Iteration:   4000, Loss function: 5.215, Average Loss: 5.200, avg. samples / sec: 937.91
Iteration:   4020, Loss function: 4.827, Average Loss: 5.196, avg. samples / sec: 863.80
Iteration:   4040, Loss function: 5.071, Average Loss: 5.192, avg. samples / sec: 924.71
Iteration:   4060, Loss function: 5.139, Average Loss: 5.188, avg. samples / sec: 961.40
Iteration:   4080, Loss function: 5.102, Average Loss: 5.182, avg. samples / sec: 907.08
Iteration:   4100, Loss function: 5.055, Average Loss: 5.178, avg. samples / sec: 919.06
:::MLLOG {"namespace": "", "time_ms": 1639074305140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074305142, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.997, Average Loss: 5.174, avg. samples / sec: 919.05
Iteration:   4140, Loss function: 4.986, Average Loss: 5.170, avg. samples / sec: 931.54
Iteration:   4160, Loss function: 4.908, Average Loss: 5.163, avg. samples / sec: 919.06
Iteration:   4180, Loss function: 4.986, Average Loss: 5.157, avg. samples / sec: 936.11
Iteration:   4200, Loss function: 4.630, Average Loss: 5.152, avg. samples / sec: 945.47
Iteration:   4220, Loss function: 4.815, Average Loss: 5.147, avg. samples / sec: 992.56
Iteration:   4240, Loss function: 4.906, Average Loss: 5.142, avg. samples / sec: 915.88
Iteration:   4260, Loss function: 5.131, Average Loss: 5.137, avg. samples / sec: 928.16
Iteration:   4280, Loss function: 5.063, Average Loss: 5.131, avg. samples / sec: 980.31
Iteration:   4300, Loss function: 4.713, Average Loss: 5.126, avg. samples / sec: 976.83
Iteration:   4320, Loss function: 4.731, Average Loss: 5.121, avg. samples / sec: 928.78
Iteration:   4340, Loss function: 4.698, Average Loss: 5.117, avg. samples / sec: 939.82
Iteration:   4360, Loss function: 4.794, Average Loss: 5.112, avg. samples / sec: 989.70
Iteration:   4380, Loss function: 5.067, Average Loss: 5.108, avg. samples / sec: 978.62
Iteration:   4400, Loss function: 4.698, Average Loss: 5.103, avg. samples / sec: 977.45
Iteration:   4420, Loss function: 4.866, Average Loss: 5.099, avg. samples / sec: 987.16
Iteration:   4440, Loss function: 4.719, Average Loss: 5.094, avg. samples / sec: 936.83
Iteration:   4460, Loss function: 5.159, Average Loss: 5.090, avg. samples / sec: 882.12
Iteration:   4480, Loss function: 5.110, Average Loss: 5.087, avg. samples / sec: 977.13
Iteration:   4500, Loss function: 4.907, Average Loss: 5.083, avg. samples / sec: 963.11
Iteration:   4520, Loss function: 5.056, Average Loss: 5.079, avg. samples / sec: 975.68
Iteration:   4540, Loss function: 5.133, Average Loss: 5.074, avg. samples / sec: 943.85
Iteration:   4560, Loss function: 4.911, Average Loss: 5.072, avg. samples / sec: 918.72
Iteration:   4580, Loss function: 4.750, Average Loss: 5.069, avg. samples / sec: 930.78
Iteration:   4600, Loss function: 4.889, Average Loss: 5.065, avg. samples / sec: 959.97
Iteration:   4620, Loss function: 4.973, Average Loss: 5.060, avg. samples / sec: 991.18
Iteration:   4640, Loss function: 4.677, Average Loss: 5.055, avg. samples / sec: 974.32
Iteration:   4660, Loss function: 4.625, Average Loss: 5.051, avg. samples / sec: 954.67
Iteration:   4680, Loss function: 5.154, Average Loss: 5.047, avg. samples / sec: 927.11
Iteration:   4700, Loss function: 4.685, Average Loss: 5.042, avg. samples / sec: 929.57
Iteration:   4720, Loss function: 4.679, Average Loss: 5.037, avg. samples / sec: 980.90
Iteration:   4740, Loss function: 4.922, Average Loss: 5.033, avg. samples / sec: 924.94
Iteration:   4760, Loss function: 4.609, Average Loss: 5.030, avg. samples / sec: 977.77
Iteration:   4780, Loss function: 5.076, Average Loss: 5.026, avg. samples / sec: 949.57
Iteration:   4800, Loss function: 4.931, Average Loss: 5.023, avg. samples / sec: 947.08
Iteration:   4820, Loss function: 4.770, Average Loss: 5.020, avg. samples / sec: 967.21
Iteration:   4840, Loss function: 5.080, Average Loss: 5.016, avg. samples / sec: 993.30
Iteration:   4860, Loss function: 4.699, Average Loss: 5.012, avg. samples / sec: 982.89
Iteration:   4880, Loss function: 5.089, Average Loss: 5.008, avg. samples / sec: 992.72
Iteration:   4900, Loss function: 4.631, Average Loss: 5.004, avg. samples / sec: 959.98
Iteration:   4920, Loss function: 4.799, Average Loss: 5.001, avg. samples / sec: 936.53
Iteration:   4940, Loss function: 4.825, Average Loss: 4.997, avg. samples / sec: 947.67
Iteration:   4960, Loss function: 4.753, Average Loss: 4.993, avg. samples / sec: 924.59
Iteration:   4980, Loss function: 4.593, Average Loss: 4.989, avg. samples / sec: 922.70
Iteration:   5000, Loss function: 4.884, Average Loss: 4.986, avg. samples / sec: 936.27
Iteration:   5020, Loss function: 5.260, Average Loss: 4.983, avg. samples / sec: 861.11
Iteration:   5040, Loss function: 4.748, Average Loss: 4.980, avg. samples / sec: 946.21
Iteration:   5060, Loss function: 4.851, Average Loss: 4.977, avg. samples / sec: 982.31
Iteration:   5080, Loss function: 4.657, Average Loss: 4.973, avg. samples / sec: 993.62
Iteration:   5100, Loss function: 4.806, Average Loss: 4.971, avg. samples / sec: 987.43
Iteration:   5120, Loss function: 4.584, Average Loss: 4.969, avg. samples / sec: 974.93
Iteration:   5140, Loss function: 4.905, Average Loss: 4.965, avg. samples / sec: 998.27
:::MLLOG {"namespace": "", "time_ms": 1639074428194, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.86 s
:::MLLOG {"namespace": "", "time_ms": 1639074457109, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074457171, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457171, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.821, Average Loss: 4.960, avg. samples / sec: 72.86
Iteration:   5180, Loss function: 4.905, Average Loss: 4.955, avg. samples / sec: 996.19
DONE (t=3.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10991
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22076
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09844
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19330
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13850
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10991 AP goal: 0.10000
Iteration:   5200, Loss function: 4.674, Average Loss: 4.951, avg. samples / sec: 1008.92
:::MLLOG {"namespace": "", "time_ms": 1639074463693, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463694, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1099122642399557, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463694, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463831, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:44 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:44 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073778557, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073778701, "event_type": "POINT_IN_TIME", "key": "seed", "value": 244949700, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 244949700
:::MLLOG {"namespace": "", "time_ms": 1639073780593, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073780593, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073780597, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073780598, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073804603, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073804604, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073806479, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073806481, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073806878, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073806879, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073806881, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.932, Average Loss: 0.023, avg. samples / sec: 4.39
Iteration:     20, Loss function: 20.993, Average Loss: 0.458, avg. samples / sec: 777.83
Iteration:     40, Loss function: 20.741, Average Loss: 0.859, avg. samples / sec: 831.25
Iteration:     60, Loss function: 20.341, Average Loss: 1.248, avg. samples / sec: 922.85
Iteration:     80, Loss function: 19.568, Average Loss: 1.619, avg. samples / sec: 889.39
Iteration:    100, Loss function: 14.081, Average Loss: 1.926, avg. samples / sec: 670.94
Iteration:    120, Loss function: 10.531, Average Loss: 2.120, avg. samples / sec: 904.19
Iteration:    140, Loss function: 9.528, Average Loss: 2.271, avg. samples / sec: 890.22
Iteration:    160, Loss function: 9.016, Average Loss: 2.410, avg. samples / sec: 921.65
Iteration:    180, Loss function: 8.989, Average Loss: 2.539, avg. samples / sec: 891.63
Iteration:    200, Loss function: 8.655, Average Loss: 2.664, avg. samples / sec: 934.97
Iteration:    220, Loss function: 8.597, Average Loss: 2.786, avg. samples / sec: 979.92
Iteration:    240, Loss function: 8.768, Average Loss: 2.906, avg. samples / sec: 984.89
Iteration:    260, Loss function: 8.764, Average Loss: 3.024, avg. samples / sec: 920.95
Iteration:    280, Loss function: 8.543, Average Loss: 3.136, avg. samples / sec: 952.03
Iteration:    300, Loss function: 8.245, Average Loss: 3.241, avg. samples / sec: 960.14
Iteration:    320, Loss function: 8.349, Average Loss: 3.341, avg. samples / sec: 881.07
Iteration:    340, Loss function: 8.229, Average Loss: 3.438, avg. samples / sec: 939.31
Iteration:    360, Loss function: 8.081, Average Loss: 3.532, avg. samples / sec: 923.59
Iteration:    380, Loss function: 7.926, Average Loss: 3.623, avg. samples / sec: 955.41
Iteration:    400, Loss function: 8.085, Average Loss: 3.708, avg. samples / sec: 913.77
Iteration:    420, Loss function: 7.863, Average Loss: 3.792, avg. samples / sec: 940.14
Iteration:    440, Loss function: 7.871, Average Loss: 3.872, avg. samples / sec: 990.10
Iteration:    460, Loss function: 7.833, Average Loss: 3.948, avg. samples / sec: 957.99
Iteration:    480, Loss function: 7.552, Average Loss: 4.023, avg. samples / sec: 965.84
Iteration:    500, Loss function: 7.746, Average Loss: 4.094, avg. samples / sec: 961.52
Iteration:    520, Loss function: 7.510, Average Loss: 4.164, avg. samples / sec: 975.60
Iteration:    540, Loss function: 7.533, Average Loss: 4.231, avg. samples / sec: 932.70
Iteration:    560, Loss function: 7.246, Average Loss: 4.295, avg. samples / sec: 975.36
Iteration:    580, Loss function: 7.191, Average Loss: 4.356, avg. samples / sec: 974.27
Iteration:    600, Loss function: 7.393, Average Loss: 4.415, avg. samples / sec: 767.77
Iteration:    620, Loss function: 6.877, Average Loss: 4.472, avg. samples / sec: 960.80
Iteration:    640, Loss function: 7.071, Average Loss: 4.527, avg. samples / sec: 956.24
Iteration:    660, Loss function: 7.107, Average Loss: 4.579, avg. samples / sec: 930.25
Iteration:    680, Loss function: 7.290, Average Loss: 4.630, avg. samples / sec: 909.79
Iteration:    700, Loss function: 6.844, Average Loss: 4.680, avg. samples / sec: 942.02
Iteration:    720, Loss function: 7.053, Average Loss: 4.729, avg. samples / sec: 930.61
Iteration:    740, Loss function: 6.928, Average Loss: 4.774, avg. samples / sec: 969.16
Iteration:    760, Loss function: 7.071, Average Loss: 4.817, avg. samples / sec: 952.32
Iteration:    780, Loss function: 6.853, Average Loss: 4.860, avg. samples / sec: 969.24
Iteration:    800, Loss function: 7.147, Average Loss: 4.900, avg. samples / sec: 973.95
Iteration:    820, Loss function: 6.795, Average Loss: 4.938, avg. samples / sec: 914.18
Iteration:    840, Loss function: 6.756, Average Loss: 4.974, avg. samples / sec: 955.85
Iteration:    860, Loss function: 6.781, Average Loss: 5.008, avg. samples / sec: 973.72
Iteration:    880, Loss function: 6.561, Average Loss: 5.041, avg. samples / sec: 998.39
Iteration:    900, Loss function: 6.732, Average Loss: 5.071, avg. samples / sec: 940.94
Iteration:    920, Loss function: 6.684, Average Loss: 5.101, avg. samples / sec: 956.23
Iteration:    940, Loss function: 6.753, Average Loss: 5.130, avg. samples / sec: 936.39
Iteration:    960, Loss function: 6.477, Average Loss: 5.158, avg. samples / sec: 949.75
Iteration:    980, Loss function: 6.292, Average Loss: 5.186, avg. samples / sec: 953.79
Iteration:   1000, Loss function: 6.489, Average Loss: 5.212, avg. samples / sec: 945.38
Iteration:   1020, Loss function: 6.220, Average Loss: 5.235, avg. samples / sec: 967.74
:::MLLOG {"namespace": "", "time_ms": 1639073933438, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073933439, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.477, Average Loss: 5.259, avg. samples / sec: 938.42
Iteration:   1060, Loss function: 6.343, Average Loss: 5.282, avg. samples / sec: 965.98
Iteration:   1080, Loss function: 6.340, Average Loss: 5.304, avg. samples / sec: 955.80
Iteration:   1100, Loss function: 6.109, Average Loss: 5.325, avg. samples / sec: 976.76
Iteration:   1120, Loss function: 6.101, Average Loss: 5.344, avg. samples / sec: 967.15
Iteration:   1140, Loss function: 6.421, Average Loss: 5.363, avg. samples / sec: 984.48
Iteration:   1160, Loss function: 6.040, Average Loss: 5.380, avg. samples / sec: 970.57
Iteration:   1180, Loss function: 6.105, Average Loss: 5.396, avg. samples / sec: 982.96
Iteration:   1200, Loss function: 6.223, Average Loss: 5.412, avg. samples / sec: 896.51
Iteration:   1220, Loss function: 6.071, Average Loss: 5.428, avg. samples / sec: 913.25
Iteration:   1240, Loss function: 6.071, Average Loss: 5.440, avg. samples / sec: 913.80
Iteration:   1260, Loss function: 5.895, Average Loss: 5.454, avg. samples / sec: 960.51
Iteration:   1280, Loss function: 5.836, Average Loss: 5.466, avg. samples / sec: 956.03
Iteration:   1300, Loss function: 6.144, Average Loss: 5.480, avg. samples / sec: 967.59
Iteration:   1320, Loss function: 6.227, Average Loss: 5.493, avg. samples / sec: 895.47
Iteration:   1340, Loss function: 5.734, Average Loss: 5.501, avg. samples / sec: 958.53
Iteration:   1360, Loss function: 5.936, Average Loss: 5.511, avg. samples / sec: 943.29
Iteration:   1380, Loss function: 5.991, Average Loss: 5.521, avg. samples / sec: 915.70
Iteration:   1400, Loss function: 6.096, Average Loss: 5.531, avg. samples / sec: 876.25
Iteration:   1420, Loss function: 6.043, Average Loss: 5.539, avg. samples / sec: 891.01
Iteration:   1440, Loss function: 6.291, Average Loss: 5.547, avg. samples / sec: 959.85
Iteration:   1460, Loss function: 6.362, Average Loss: 5.556, avg. samples / sec: 987.55
Iteration:   1480, Loss function: 5.978, Average Loss: 5.564, avg. samples / sec: 961.62
Iteration:   1500, Loss function: 6.076, Average Loss: 5.572, avg. samples / sec: 937.40
Iteration:   1520, Loss function: 5.956, Average Loss: 5.577, avg. samples / sec: 999.07
Iteration:   1540, Loss function: 5.912, Average Loss: 5.580, avg. samples / sec: 975.01
Iteration:   1560, Loss function: 5.631, Average Loss: 5.585, avg. samples / sec: 978.90
Iteration:   1580, Loss function: 5.604, Average Loss: 5.589, avg. samples / sec: 992.90
Iteration:   1600, Loss function: 6.197, Average Loss: 5.594, avg. samples / sec: 981.98
Iteration:   1620, Loss function: 5.798, Average Loss: 5.599, avg. samples / sec: 967.19
Iteration:   1640, Loss function: 5.824, Average Loss: 5.603, avg. samples / sec: 913.71
Iteration:   1660, Loss function: 5.891, Average Loss: 5.607, avg. samples / sec: 923.07
Iteration:   1680, Loss function: 5.735, Average Loss: 5.611, avg. samples / sec: 893.33
Iteration:   1700, Loss function: 5.425, Average Loss: 5.614, avg. samples / sec: 974.47
Iteration:   1720, Loss function: 5.713, Average Loss: 5.617, avg. samples / sec: 982.82
Iteration:   1740, Loss function: 5.920, Average Loss: 5.620, avg. samples / sec: 892.95
Iteration:   1760, Loss function: 5.475, Average Loss: 5.622, avg. samples / sec: 910.07
Iteration:   1780, Loss function: 5.513, Average Loss: 5.622, avg. samples / sec: 934.76
Iteration:   1800, Loss function: 5.604, Average Loss: 5.625, avg. samples / sec: 962.23
Iteration:   1820, Loss function: 5.857, Average Loss: 5.626, avg. samples / sec: 937.06
Iteration:   1840, Loss function: 5.893, Average Loss: 5.628, avg. samples / sec: 982.33
Iteration:   1860, Loss function: 5.576, Average Loss: 5.627, avg. samples / sec: 958.53
Iteration:   1880, Loss function: 5.881, Average Loss: 5.629, avg. samples / sec: 975.34
Iteration:   1900, Loss function: 5.890, Average Loss: 5.630, avg. samples / sec: 989.01
Iteration:   1920, Loss function: 5.689, Average Loss: 5.630, avg. samples / sec: 944.58
Iteration:   1940, Loss function: 5.939, Average Loss: 5.630, avg. samples / sec: 990.80
Iteration:   1960, Loss function: 5.548, Average Loss: 5.629, avg. samples / sec: 994.73
Iteration:   1980, Loss function: 5.727, Average Loss: 5.629, avg. samples / sec: 978.78
Iteration:   2000, Loss function: 5.567, Average Loss: 5.629, avg. samples / sec: 972.03
Iteration:   2020, Loss function: 5.551, Average Loss: 5.627, avg. samples / sec: 963.29
Iteration:   2040, Loss function: 5.581, Average Loss: 5.626, avg. samples / sec: 980.05
:::MLLOG {"namespace": "", "time_ms": 1639074056633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074056635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.436, Average Loss: 5.623, avg. samples / sec: 949.32
Iteration:   2080, Loss function: 5.078, Average Loss: 5.621, avg. samples / sec: 950.99
Iteration:   2100, Loss function: 5.499, Average Loss: 5.618, avg. samples / sec: 937.65
Iteration:   2120, Loss function: 5.460, Average Loss: 5.615, avg. samples / sec: 934.39
Iteration:   2140, Loss function: 5.473, Average Loss: 5.612, avg. samples / sec: 979.80
Iteration:   2160, Loss function: 5.166, Average Loss: 5.609, avg. samples / sec: 1000.07
Iteration:   2180, Loss function: 5.491, Average Loss: 5.607, avg. samples / sec: 908.15
Iteration:   2200, Loss function: 5.599, Average Loss: 5.603, avg. samples / sec: 961.34
Iteration:   2220, Loss function: 5.596, Average Loss: 5.601, avg. samples / sec: 971.17
Iteration:   2240, Loss function: 5.473, Average Loss: 5.600, avg. samples / sec: 928.42
Iteration:   2260, Loss function: 5.329, Average Loss: 5.597, avg. samples / sec: 973.37
Iteration:   2280, Loss function: 5.085, Average Loss: 5.594, avg. samples / sec: 979.65
Iteration:   2300, Loss function: 4.972, Average Loss: 5.590, avg. samples / sec: 977.37
Iteration:   2320, Loss function: 5.244, Average Loss: 5.587, avg. samples / sec: 968.66
Iteration:   2340, Loss function: 5.284, Average Loss: 5.584, avg. samples / sec: 974.18
Iteration:   2360, Loss function: 5.387, Average Loss: 5.581, avg. samples / sec: 939.79
Iteration:   2380, Loss function: 5.448, Average Loss: 5.577, avg. samples / sec: 982.66
Iteration:   2400, Loss function: 5.714, Average Loss: 5.573, avg. samples / sec: 954.06
Iteration:   2420, Loss function: 5.404, Average Loss: 5.569, avg. samples / sec: 891.75
Iteration:   2440, Loss function: 5.527, Average Loss: 5.566, avg. samples / sec: 951.98
Iteration:   2460, Loss function: 5.123, Average Loss: 5.563, avg. samples / sec: 894.32
Iteration:   2480, Loss function: 5.241, Average Loss: 5.560, avg. samples / sec: 943.35
Iteration:   2500, Loss function: 5.323, Average Loss: 5.557, avg. samples / sec: 972.02
Iteration:   2520, Loss function: 5.218, Average Loss: 5.552, avg. samples / sec: 955.25
Iteration:   2540, Loss function: 5.401, Average Loss: 5.549, avg. samples / sec: 946.45
Iteration:   2560, Loss function: 5.275, Average Loss: 5.545, avg. samples / sec: 925.10
Iteration:   2580, Loss function: 5.238, Average Loss: 5.542, avg. samples / sec: 918.18
Iteration:   2600, Loss function: 5.310, Average Loss: 5.539, avg. samples / sec: 907.41
Iteration:   2620, Loss function: 5.297, Average Loss: 5.535, avg. samples / sec: 989.35
Iteration:   2640, Loss function: 5.233, Average Loss: 5.532, avg. samples / sec: 996.40
Iteration:   2660, Loss function: 5.267, Average Loss: 5.529, avg. samples / sec: 974.19
Iteration:   2680, Loss function: 5.098, Average Loss: 5.525, avg. samples / sec: 992.16
Iteration:   2700, Loss function: 5.044, Average Loss: 5.520, avg. samples / sec: 992.97
Iteration:   2720, Loss function: 5.291, Average Loss: 5.516, avg. samples / sec: 979.87
Iteration:   2740, Loss function: 4.984, Average Loss: 5.511, avg. samples / sec: 985.04
Iteration:   2760, Loss function: 4.901, Average Loss: 5.505, avg. samples / sec: 934.01
Iteration:   2780, Loss function: 5.574, Average Loss: 5.502, avg. samples / sec: 912.71
Iteration:   2800, Loss function: 5.243, Average Loss: 5.498, avg. samples / sec: 944.93
Iteration:   2820, Loss function: 5.380, Average Loss: 5.494, avg. samples / sec: 930.09
Iteration:   2840, Loss function: 5.036, Average Loss: 5.490, avg. samples / sec: 925.58
Iteration:   2860, Loss function: 5.092, Average Loss: 5.485, avg. samples / sec: 932.65
Iteration:   2880, Loss function: 5.331, Average Loss: 5.481, avg. samples / sec: 939.52
Iteration:   2900, Loss function: 5.019, Average Loss: 5.477, avg. samples / sec: 884.69
Iteration:   2920, Loss function: 5.273, Average Loss: 5.470, avg. samples / sec: 936.44
Iteration:   2940, Loss function: 4.908, Average Loss: 5.465, avg. samples / sec: 935.26
Iteration:   2960, Loss function: 5.434, Average Loss: 5.460, avg. samples / sec: 965.23
Iteration:   2980, Loss function: 5.219, Average Loss: 5.456, avg. samples / sec: 938.52
Iteration:   3000, Loss function: 5.243, Average Loss: 5.451, avg. samples / sec: 918.82
Iteration:   3020, Loss function: 5.305, Average Loss: 5.445, avg. samples / sec: 930.08
Iteration:   3040, Loss function: 5.289, Average Loss: 5.441, avg. samples / sec: 917.20
Iteration:   3060, Loss function: 5.000, Average Loss: 5.436, avg. samples / sec: 911.63
Iteration:   3080, Loss function: 4.917, Average Loss: 5.430, avg. samples / sec: 974.21
:::MLLOG {"namespace": "", "time_ms": 1639074180409, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074180410, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.176, Average Loss: 5.425, avg. samples / sec: 875.85
Iteration:   3120, Loss function: 5.001, Average Loss: 5.419, avg. samples / sec: 909.34
Iteration:   3140, Loss function: 5.097, Average Loss: 5.413, avg. samples / sec: 976.44
Iteration:   3160, Loss function: 5.536, Average Loss: 5.408, avg. samples / sec: 971.53
Iteration:   3180, Loss function: 4.901, Average Loss: 5.403, avg. samples / sec: 904.36
Iteration:   3200, Loss function: 5.276, Average Loss: 5.398, avg. samples / sec: 924.44
Iteration:   3220, Loss function: 5.057, Average Loss: 5.391, avg. samples / sec: 944.67
Iteration:   3240, Loss function: 5.223, Average Loss: 5.385, avg. samples / sec: 886.83
Iteration:   3260, Loss function: 5.028, Average Loss: 5.381, avg. samples / sec: 947.87
Iteration:   3280, Loss function: 4.933, Average Loss: 5.374, avg. samples / sec: 967.87
Iteration:   3300, Loss function: 4.918, Average Loss: 5.368, avg. samples / sec: 947.61
Iteration:   3320, Loss function: 5.007, Average Loss: 5.364, avg. samples / sec: 948.22
Iteration:   3340, Loss function: 5.103, Average Loss: 5.360, avg. samples / sec: 938.68
Iteration:   3360, Loss function: 5.182, Average Loss: 5.353, avg. samples / sec: 958.85
Iteration:   3380, Loss function: 5.295, Average Loss: 5.346, avg. samples / sec: 945.72
Iteration:   3400, Loss function: 4.819, Average Loss: 5.342, avg. samples / sec: 979.55
Iteration:   3420, Loss function: 5.059, Average Loss: 5.336, avg. samples / sec: 972.70
Iteration:   3440, Loss function: 5.024, Average Loss: 5.331, avg. samples / sec: 914.60
Iteration:   3460, Loss function: 5.181, Average Loss: 5.326, avg. samples / sec: 926.91
Iteration:   3480, Loss function: 5.117, Average Loss: 5.321, avg. samples / sec: 919.16
Iteration:   3500, Loss function: 5.325, Average Loss: 5.316, avg. samples / sec: 948.93
Iteration:   3520, Loss function: 5.090, Average Loss: 5.312, avg. samples / sec: 986.99
Iteration:   3540, Loss function: 4.996, Average Loss: 5.307, avg. samples / sec: 979.39
Iteration:   3560, Loss function: 5.063, Average Loss: 5.304, avg. samples / sec: 981.86
Iteration:   3580, Loss function: 4.979, Average Loss: 5.300, avg. samples / sec: 960.36
Iteration:   3600, Loss function: 5.167, Average Loss: 5.295, avg. samples / sec: 987.74
Iteration:   3620, Loss function: 4.775, Average Loss: 5.290, avg. samples / sec: 983.11
Iteration:   3640, Loss function: 4.815, Average Loss: 5.285, avg. samples / sec: 950.35
Iteration:   3660, Loss function: 5.167, Average Loss: 5.281, avg. samples / sec: 981.47
Iteration:   3680, Loss function: 5.054, Average Loss: 5.275, avg. samples / sec: 911.70
Iteration:   3700, Loss function: 4.885, Average Loss: 5.270, avg. samples / sec: 983.90
Iteration:   3720, Loss function: 4.884, Average Loss: 5.263, avg. samples / sec: 958.55
Iteration:   3740, Loss function: 5.190, Average Loss: 5.259, avg. samples / sec: 875.72
Iteration:   3760, Loss function: 5.153, Average Loss: 5.255, avg. samples / sec: 947.92
Iteration:   3780, Loss function: 5.038, Average Loss: 5.249, avg. samples / sec: 954.99
Iteration:   3800, Loss function: 5.066, Average Loss: 5.246, avg. samples / sec: 927.12
Iteration:   3820, Loss function: 5.499, Average Loss: 5.241, avg. samples / sec: 951.20
Iteration:   3840, Loss function: 4.887, Average Loss: 5.237, avg. samples / sec: 967.86
Iteration:   3860, Loss function: 4.962, Average Loss: 5.231, avg. samples / sec: 904.68
Iteration:   3880, Loss function: 5.076, Average Loss: 5.227, avg. samples / sec: 927.78
Iteration:   3900, Loss function: 5.071, Average Loss: 5.222, avg. samples / sec: 885.99
Iteration:   3920, Loss function: 5.074, Average Loss: 5.216, avg. samples / sec: 960.80
Iteration:   3940, Loss function: 5.104, Average Loss: 5.211, avg. samples / sec: 966.48
Iteration:   3960, Loss function: 4.903, Average Loss: 5.207, avg. samples / sec: 950.17
Iteration:   3980, Loss function: 5.032, Average Loss: 5.203, avg. samples / sec: 936.04
Iteration:   4000, Loss function: 5.215, Average Loss: 5.200, avg. samples / sec: 937.91
Iteration:   4020, Loss function: 4.827, Average Loss: 5.196, avg. samples / sec: 863.80
Iteration:   4040, Loss function: 5.071, Average Loss: 5.192, avg. samples / sec: 924.71
Iteration:   4060, Loss function: 5.139, Average Loss: 5.188, avg. samples / sec: 961.40
Iteration:   4080, Loss function: 5.102, Average Loss: 5.182, avg. samples / sec: 907.08
Iteration:   4100, Loss function: 5.055, Average Loss: 5.178, avg. samples / sec: 919.06
:::MLLOG {"namespace": "", "time_ms": 1639074305140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074305142, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.997, Average Loss: 5.174, avg. samples / sec: 919.05
Iteration:   4140, Loss function: 4.986, Average Loss: 5.170, avg. samples / sec: 931.54
Iteration:   4160, Loss function: 4.908, Average Loss: 5.163, avg. samples / sec: 919.06
Iteration:   4180, Loss function: 4.986, Average Loss: 5.157, avg. samples / sec: 936.11
Iteration:   4200, Loss function: 4.630, Average Loss: 5.152, avg. samples / sec: 945.47
Iteration:   4220, Loss function: 4.815, Average Loss: 5.147, avg. samples / sec: 992.56
Iteration:   4240, Loss function: 4.906, Average Loss: 5.142, avg. samples / sec: 915.88
Iteration:   4260, Loss function: 5.131, Average Loss: 5.137, avg. samples / sec: 928.16
Iteration:   4280, Loss function: 5.063, Average Loss: 5.131, avg. samples / sec: 980.31
Iteration:   4300, Loss function: 4.713, Average Loss: 5.126, avg. samples / sec: 976.83
Iteration:   4320, Loss function: 4.731, Average Loss: 5.121, avg. samples / sec: 928.78
Iteration:   4340, Loss function: 4.698, Average Loss: 5.117, avg. samples / sec: 939.82
Iteration:   4360, Loss function: 4.794, Average Loss: 5.112, avg. samples / sec: 989.70
Iteration:   4380, Loss function: 5.067, Average Loss: 5.108, avg. samples / sec: 978.62
Iteration:   4400, Loss function: 4.698, Average Loss: 5.103, avg. samples / sec: 977.45
Iteration:   4420, Loss function: 4.866, Average Loss: 5.099, avg. samples / sec: 987.16
Iteration:   4440, Loss function: 4.719, Average Loss: 5.094, avg. samples / sec: 936.83
Iteration:   4460, Loss function: 5.159, Average Loss: 5.090, avg. samples / sec: 882.12
Iteration:   4480, Loss function: 5.110, Average Loss: 5.087, avg. samples / sec: 977.13
Iteration:   4500, Loss function: 4.907, Average Loss: 5.083, avg. samples / sec: 963.11
Iteration:   4520, Loss function: 5.056, Average Loss: 5.079, avg. samples / sec: 975.68
Iteration:   4540, Loss function: 5.133, Average Loss: 5.074, avg. samples / sec: 943.85
Iteration:   4560, Loss function: 4.911, Average Loss: 5.072, avg. samples / sec: 918.72
Iteration:   4580, Loss function: 4.750, Average Loss: 5.069, avg. samples / sec: 930.78
Iteration:   4600, Loss function: 4.889, Average Loss: 5.065, avg. samples / sec: 959.97
Iteration:   4620, Loss function: 4.973, Average Loss: 5.060, avg. samples / sec: 991.18
Iteration:   4640, Loss function: 4.677, Average Loss: 5.055, avg. samples / sec: 974.32
Iteration:   4660, Loss function: 4.625, Average Loss: 5.051, avg. samples / sec: 954.67
Iteration:   4680, Loss function: 5.154, Average Loss: 5.047, avg. samples / sec: 927.11
Iteration:   4700, Loss function: 4.685, Average Loss: 5.042, avg. samples / sec: 929.57
Iteration:   4720, Loss function: 4.679, Average Loss: 5.037, avg. samples / sec: 980.90
Iteration:   4740, Loss function: 4.922, Average Loss: 5.033, avg. samples / sec: 924.94
Iteration:   4760, Loss function: 4.609, Average Loss: 5.030, avg. samples / sec: 977.77
Iteration:   4780, Loss function: 5.076, Average Loss: 5.026, avg. samples / sec: 949.57
Iteration:   4800, Loss function: 4.931, Average Loss: 5.023, avg. samples / sec: 947.08
Iteration:   4820, Loss function: 4.770, Average Loss: 5.020, avg. samples / sec: 967.21
Iteration:   4840, Loss function: 5.080, Average Loss: 5.016, avg. samples / sec: 993.30
Iteration:   4860, Loss function: 4.699, Average Loss: 5.012, avg. samples / sec: 982.89
Iteration:   4880, Loss function: 5.089, Average Loss: 5.008, avg. samples / sec: 992.72
Iteration:   4900, Loss function: 4.631, Average Loss: 5.004, avg. samples / sec: 959.98
Iteration:   4920, Loss function: 4.799, Average Loss: 5.001, avg. samples / sec: 936.53
Iteration:   4940, Loss function: 4.825, Average Loss: 4.997, avg. samples / sec: 947.67
Iteration:   4960, Loss function: 4.753, Average Loss: 4.993, avg. samples / sec: 924.59
Iteration:   4980, Loss function: 4.593, Average Loss: 4.989, avg. samples / sec: 922.70
Iteration:   5000, Loss function: 4.884, Average Loss: 4.986, avg. samples / sec: 936.27
Iteration:   5020, Loss function: 5.260, Average Loss: 4.983, avg. samples / sec: 861.11
Iteration:   5040, Loss function: 4.748, Average Loss: 4.980, avg. samples / sec: 946.21
Iteration:   5060, Loss function: 4.851, Average Loss: 4.977, avg. samples / sec: 982.31
Iteration:   5080, Loss function: 4.657, Average Loss: 4.973, avg. samples / sec: 993.62
Iteration:   5100, Loss function: 4.806, Average Loss: 4.971, avg. samples / sec: 987.43
Iteration:   5120, Loss function: 4.584, Average Loss: 4.969, avg. samples / sec: 974.93
Iteration:   5140, Loss function: 4.905, Average Loss: 4.965, avg. samples / sec: 998.27
:::MLLOG {"namespace": "", "time_ms": 1639074428194, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.86 s
:::MLLOG {"namespace": "", "time_ms": 1639074457109, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074457171, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457171, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.821, Average Loss: 4.960, avg. samples / sec: 72.86
Iteration:   5180, Loss function: 4.905, Average Loss: 4.955, avg. samples / sec: 996.19
DONE (t=3.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10991
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22076
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09844
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19330
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13850
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20229
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21332
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10991 AP goal: 0.10000
Iteration:   5200, Loss function: 4.674, Average Loss: 4.951, avg. samples / sec: 1008.92
:::MLLOG {"namespace": "", "time_ms": 1639074463693, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463694, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1099122642399557, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463694, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074463831, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074464
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:44 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:11 PM'
START TIMING RUN WAS 2021-12-09 06:16:11 PM
ENDING TIMING RUN AT 2021-12-09 06:27:44 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:44 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 7g.40gb     Device  0: (UUID: MIG-7008cac5-5da7-5b37-9ddd-3f44ece79169)
+ result=693
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,693,nvidia,2021-12-09 06:16:11 PM'
RESULT,SINGLE_STAGE_DETECTOR,,693,nvidia,2021-12-09 06:16:11 PM
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
