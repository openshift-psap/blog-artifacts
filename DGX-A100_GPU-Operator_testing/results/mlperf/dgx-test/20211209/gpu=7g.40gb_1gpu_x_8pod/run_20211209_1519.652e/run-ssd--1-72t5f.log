+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-72t5f.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-72t5f.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-72t5f.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-62f7dc39-4870-51c0-9b21-86def482903a
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-62f7dc39-4870-51c0-9b21-86def482903a'
Found 1 MIG instances: MIG-62f7dc39-4870-51c0-9b21-86def482903a
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073770
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:10 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:10 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 06:16:10 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-15-55 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ set +x
Thu Dec  9 18:16:10 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-72t5f to the sync file ...
run-ssd--1-72t5f Found 4 Pods, waiting to have 8 ...
     1	run-ssd--1-crckk
     2	run-ssd--1-5r9lr
     3	run-ssd--1-z64cs
     4	run-ssd--1-72t5f
Thu Dec  9 18:16:15 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073777686, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073777822, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1534339990, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1534339990
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073779648, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073779648, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073803763, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073803763, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073805287, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073805288, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073805865, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073805866, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073805867, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.291, Average Loss: 0.023, avg. samples / sec: 4.40
Iteration:     20, Loss function: 20.990, Average Loss: 0.461, avg. samples / sec: 808.28
Iteration:     40, Loss function: 20.622, Average Loss: 0.862, avg. samples / sec: 827.46
Iteration:     60, Loss function: 20.379, Average Loss: 1.251, avg. samples / sec: 884.44
Iteration:     80, Loss function: 19.720, Average Loss: 1.624, avg. samples / sec: 864.56
Iteration:    100, Loss function: 14.859, Average Loss: 1.942, avg. samples / sec: 695.43
Iteration:    120, Loss function: 11.422, Average Loss: 2.145, avg. samples / sec: 825.75
Iteration:    140, Loss function: 9.804, Average Loss: 2.304, avg. samples / sec: 863.31
Iteration:    160, Loss function: 9.354, Average Loss: 2.446, avg. samples / sec: 912.98
Iteration:    180, Loss function: 9.001, Average Loss: 2.576, avg. samples / sec: 942.36
Iteration:    200, Loss function: 8.661, Average Loss: 2.701, avg. samples / sec: 922.88
Iteration:    220, Loss function: 8.533, Average Loss: 2.822, avg. samples / sec: 951.41
Iteration:    240, Loss function: 8.535, Average Loss: 2.939, avg. samples / sec: 872.30
Iteration:    260, Loss function: 8.742, Average Loss: 3.053, avg. samples / sec: 923.55
Iteration:    280, Loss function: 8.688, Average Loss: 3.163, avg. samples / sec: 968.74
Iteration:    300, Loss function: 8.317, Average Loss: 3.267, avg. samples / sec: 948.49
Iteration:    320, Loss function: 8.345, Average Loss: 3.368, avg. samples / sec: 922.59
Iteration:    340, Loss function: 8.345, Average Loss: 3.465, avg. samples / sec: 973.99
Iteration:    360, Loss function: 7.914, Average Loss: 3.558, avg. samples / sec: 976.68
Iteration:    380, Loss function: 7.783, Average Loss: 3.648, avg. samples / sec: 905.94
Iteration:    400, Loss function: 8.051, Average Loss: 3.733, avg. samples / sec: 931.86
Iteration:    420, Loss function: 7.683, Average Loss: 3.815, avg. samples / sec: 922.85
Iteration:    440, Loss function: 7.729, Average Loss: 3.894, avg. samples / sec: 954.87
Iteration:    460, Loss function: 7.821, Average Loss: 3.970, avg. samples / sec: 954.73
Iteration:    480, Loss function: 7.358, Average Loss: 4.043, avg. samples / sec: 959.31
Iteration:    500, Loss function: 7.559, Average Loss: 4.114, avg. samples / sec: 966.23
Iteration:    520, Loss function: 7.613, Average Loss: 4.183, avg. samples / sec: 983.79
Iteration:    540, Loss function: 7.278, Average Loss: 4.248, avg. samples / sec: 869.79
Iteration:    560, Loss function: 7.070, Average Loss: 4.310, avg. samples / sec: 880.18
Iteration:    580, Loss function: 7.200, Average Loss: 4.371, avg. samples / sec: 932.39
Iteration:    600, Loss function: 7.256, Average Loss: 4.430, avg. samples / sec: 920.82
Iteration:    620, Loss function: 6.930, Average Loss: 4.485, avg. samples / sec: 976.82
Iteration:    640, Loss function: 6.852, Average Loss: 4.541, avg. samples / sec: 973.89
Iteration:    660, Loss function: 7.048, Average Loss: 4.593, avg. samples / sec: 949.21
Iteration:    680, Loss function: 7.313, Average Loss: 4.645, avg. samples / sec: 893.38
Iteration:    700, Loss function: 6.736, Average Loss: 4.693, avg. samples / sec: 947.16
Iteration:    720, Loss function: 7.236, Average Loss: 4.741, avg. samples / sec: 929.70
Iteration:    740, Loss function: 6.912, Average Loss: 4.786, avg. samples / sec: 960.99
Iteration:    760, Loss function: 7.094, Average Loss: 4.829, avg. samples / sec: 954.87
Iteration:    780, Loss function: 6.873, Average Loss: 4.871, avg. samples / sec: 965.16
Iteration:    800, Loss function: 7.149, Average Loss: 4.910, avg. samples / sec: 966.72
Iteration:    820, Loss function: 6.914, Average Loss: 4.948, avg. samples / sec: 970.62
Iteration:    840, Loss function: 6.715, Average Loss: 4.985, avg. samples / sec: 969.76
Iteration:    860, Loss function: 6.839, Average Loss: 5.020, avg. samples / sec: 982.02
Iteration:    880, Loss function: 6.606, Average Loss: 5.052, avg. samples / sec: 943.36
Iteration:    900, Loss function: 6.850, Average Loss: 5.083, avg. samples / sec: 964.72
Iteration:    920, Loss function: 6.729, Average Loss: 5.112, avg. samples / sec: 978.47
Iteration:    940, Loss function: 6.781, Average Loss: 5.141, avg. samples / sec: 901.51
Iteration:    960, Loss function: 6.383, Average Loss: 5.169, avg. samples / sec: 907.22
Iteration:    980, Loss function: 6.528, Average Loss: 5.197, avg. samples / sec: 913.03
Iteration:   1000, Loss function: 6.458, Average Loss: 5.221, avg. samples / sec: 895.18
Iteration:   1020, Loss function: 6.360, Average Loss: 5.246, avg. samples / sec: 875.07
:::MLLOG {"namespace": "", "time_ms": 1639073933575, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073933579, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.446, Average Loss: 5.270, avg. samples / sec: 901.56
Iteration:   1060, Loss function: 6.301, Average Loss: 5.293, avg. samples / sec: 961.21
Iteration:   1080, Loss function: 6.340, Average Loss: 5.314, avg. samples / sec: 933.65
Iteration:   1100, Loss function: 6.025, Average Loss: 5.333, avg. samples / sec: 989.64
Iteration:   1120, Loss function: 6.164, Average Loss: 5.353, avg. samples / sec: 988.95
Iteration:   1140, Loss function: 6.393, Average Loss: 5.371, avg. samples / sec: 986.84
Iteration:   1160, Loss function: 6.139, Average Loss: 5.389, avg. samples / sec: 963.60
Iteration:   1180, Loss function: 6.215, Average Loss: 5.405, avg. samples / sec: 953.40
Iteration:   1200, Loss function: 6.193, Average Loss: 5.421, avg. samples / sec: 991.64
Iteration:   1220, Loss function: 6.158, Average Loss: 5.436, avg. samples / sec: 958.21
Iteration:   1240, Loss function: 6.108, Average Loss: 5.448, avg. samples / sec: 993.34
Iteration:   1260, Loss function: 6.167, Average Loss: 5.460, avg. samples / sec: 946.90
Iteration:   1280, Loss function: 5.815, Average Loss: 5.472, avg. samples / sec: 941.32
Iteration:   1300, Loss function: 6.059, Average Loss: 5.484, avg. samples / sec: 900.66
Iteration:   1320, Loss function: 6.190, Average Loss: 5.496, avg. samples / sec: 938.70
Iteration:   1340, Loss function: 5.760, Average Loss: 5.506, avg. samples / sec: 977.08
Iteration:   1360, Loss function: 5.905, Average Loss: 5.515, avg. samples / sec: 961.72
Iteration:   1380, Loss function: 6.123, Average Loss: 5.525, avg. samples / sec: 960.93
Iteration:   1400, Loss function: 5.960, Average Loss: 5.534, avg. samples / sec: 960.65
Iteration:   1420, Loss function: 5.825, Average Loss: 5.541, avg. samples / sec: 985.45
Iteration:   1440, Loss function: 6.350, Average Loss: 5.550, avg. samples / sec: 977.69
Iteration:   1460, Loss function: 6.286, Average Loss: 5.558, avg. samples / sec: 962.14
Iteration:   1480, Loss function: 6.043, Average Loss: 5.566, avg. samples / sec: 918.11
Iteration:   1500, Loss function: 6.111, Average Loss: 5.575, avg. samples / sec: 953.25
Iteration:   1520, Loss function: 6.042, Average Loss: 5.581, avg. samples / sec: 963.93
Iteration:   1540, Loss function: 5.901, Average Loss: 5.585, avg. samples / sec: 979.87
Iteration:   1560, Loss function: 5.793, Average Loss: 5.589, avg. samples / sec: 896.83
Iteration:   1580, Loss function: 5.673, Average Loss: 5.595, avg. samples / sec: 918.42
Iteration:   1600, Loss function: 6.079, Average Loss: 5.600, avg. samples / sec: 921.25
Iteration:   1620, Loss function: 5.603, Average Loss: 5.605, avg. samples / sec: 938.16
Iteration:   1640, Loss function: 5.917, Average Loss: 5.608, avg. samples / sec: 898.37
Iteration:   1660, Loss function: 6.008, Average Loss: 5.612, avg. samples / sec: 973.06
Iteration:   1680, Loss function: 5.515, Average Loss: 5.615, avg. samples / sec: 990.99
Iteration:   1700, Loss function: 5.356, Average Loss: 5.618, avg. samples / sec: 990.74
Iteration:   1720, Loss function: 5.588, Average Loss: 5.620, avg. samples / sec: 920.90
Iteration:   1740, Loss function: 5.963, Average Loss: 5.624, avg. samples / sec: 953.26
Iteration:   1760, Loss function: 5.625, Average Loss: 5.625, avg. samples / sec: 977.33
Iteration:   1780, Loss function: 5.599, Average Loss: 5.626, avg. samples / sec: 924.68
Iteration:   1800, Loss function: 5.686, Average Loss: 5.629, avg. samples / sec: 938.02
Iteration:   1820, Loss function: 5.870, Average Loss: 5.631, avg. samples / sec: 984.13
Iteration:   1840, Loss function: 5.908, Average Loss: 5.631, avg. samples / sec: 951.68
Iteration:   1860, Loss function: 5.739, Average Loss: 5.631, avg. samples / sec: 939.95
Iteration:   1880, Loss function: 5.882, Average Loss: 5.633, avg. samples / sec: 988.27
Iteration:   1900, Loss function: 6.033, Average Loss: 5.634, avg. samples / sec: 940.15
Iteration:   1920, Loss function: 5.620, Average Loss: 5.634, avg. samples / sec: 893.16
Iteration:   1940, Loss function: 5.857, Average Loss: 5.634, avg. samples / sec: 901.02
Iteration:   1960, Loss function: 5.595, Average Loss: 5.633, avg. samples / sec: 961.78
Iteration:   1980, Loss function: 5.740, Average Loss: 5.632, avg. samples / sec: 986.08
Iteration:   2000, Loss function: 5.439, Average Loss: 5.631, avg. samples / sec: 949.93
Iteration:   2020, Loss function: 5.788, Average Loss: 5.630, avg. samples / sec: 953.79
Iteration:   2040, Loss function: 5.662, Average Loss: 5.630, avg. samples / sec: 872.99
:::MLLOG {"namespace": "", "time_ms": 1639074056923, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074056924, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.434, Average Loss: 5.627, avg. samples / sec: 935.55
Iteration:   2080, Loss function: 5.081, Average Loss: 5.624, avg. samples / sec: 944.53
Iteration:   2100, Loss function: 5.407, Average Loss: 5.622, avg. samples / sec: 986.68
Iteration:   2120, Loss function: 5.261, Average Loss: 5.619, avg. samples / sec: 980.22
Iteration:   2140, Loss function: 5.514, Average Loss: 5.616, avg. samples / sec: 905.69
Iteration:   2160, Loss function: 5.452, Average Loss: 5.613, avg. samples / sec: 981.16
Iteration:   2180, Loss function: 5.493, Average Loss: 5.612, avg. samples / sec: 960.22
Iteration:   2200, Loss function: 5.710, Average Loss: 5.609, avg. samples / sec: 991.15
Iteration:   2220, Loss function: 5.450, Average Loss: 5.607, avg. samples / sec: 957.31
Iteration:   2240, Loss function: 5.322, Average Loss: 5.604, avg. samples / sec: 949.22
Iteration:   2260, Loss function: 5.382, Average Loss: 5.600, avg. samples / sec: 966.66
Iteration:   2280, Loss function: 5.274, Average Loss: 5.597, avg. samples / sec: 969.82
Iteration:   2300, Loss function: 5.132, Average Loss: 5.593, avg. samples / sec: 978.75
Iteration:   2320, Loss function: 5.632, Average Loss: 5.591, avg. samples / sec: 984.88
Iteration:   2340, Loss function: 5.443, Average Loss: 5.588, avg. samples / sec: 987.59
Iteration:   2360, Loss function: 5.316, Average Loss: 5.584, avg. samples / sec: 969.75
Iteration:   2380, Loss function: 5.509, Average Loss: 5.582, avg. samples / sec: 980.01
Iteration:   2400, Loss function: 5.347, Average Loss: 5.578, avg. samples / sec: 930.84
Iteration:   2420, Loss function: 5.529, Average Loss: 5.574, avg. samples / sec: 982.32
Iteration:   2440, Loss function: 5.578, Average Loss: 5.570, avg. samples / sec: 907.84
Iteration:   2460, Loss function: 5.360, Average Loss: 5.567, avg. samples / sec: 887.02
Iteration:   2480, Loss function: 5.236, Average Loss: 5.563, avg. samples / sec: 897.88
Iteration:   2500, Loss function: 5.365, Average Loss: 5.559, avg. samples / sec: 945.39
Iteration:   2520, Loss function: 5.291, Average Loss: 5.553, avg. samples / sec: 982.46
Iteration:   2540, Loss function: 5.426, Average Loss: 5.550, avg. samples / sec: 961.01
Iteration:   2560, Loss function: 5.270, Average Loss: 5.546, avg. samples / sec: 989.57
Iteration:   2580, Loss function: 5.415, Average Loss: 5.544, avg. samples / sec: 978.07
Iteration:   2600, Loss function: 5.282, Average Loss: 5.542, avg. samples / sec: 917.89
Iteration:   2620, Loss function: 5.434, Average Loss: 5.537, avg. samples / sec: 920.71
Iteration:   2640, Loss function: 5.221, Average Loss: 5.534, avg. samples / sec: 977.23
Iteration:   2660, Loss function: 5.196, Average Loss: 5.530, avg. samples / sec: 877.56
Iteration:   2680, Loss function: 5.129, Average Loss: 5.527, avg. samples / sec: 878.99
Iteration:   2700, Loss function: 5.128, Average Loss: 5.522, avg. samples / sec: 891.86
Iteration:   2720, Loss function: 5.173, Average Loss: 5.518, avg. samples / sec: 886.71
Iteration:   2740, Loss function: 5.255, Average Loss: 5.514, avg. samples / sec: 888.07
Iteration:   2760, Loss function: 5.050, Average Loss: 5.509, avg. samples / sec: 797.30
Iteration:   2780, Loss function: 5.471, Average Loss: 5.505, avg. samples / sec: 862.18
Iteration:   2800, Loss function: 5.392, Average Loss: 5.501, avg. samples / sec: 980.19
Iteration:   2820, Loss function: 5.308, Average Loss: 5.496, avg. samples / sec: 933.32
Iteration:   2840, Loss function: 5.132, Average Loss: 5.492, avg. samples / sec: 881.80
Iteration:   2860, Loss function: 5.112, Average Loss: 5.487, avg. samples / sec: 978.31
Iteration:   2880, Loss function: 5.306, Average Loss: 5.483, avg. samples / sec: 940.13
Iteration:   2900, Loss function: 5.092, Average Loss: 5.478, avg. samples / sec: 959.99
Iteration:   2920, Loss function: 5.130, Average Loss: 5.472, avg. samples / sec: 916.02
Iteration:   2940, Loss function: 5.074, Average Loss: 5.467, avg. samples / sec: 983.55
Iteration:   2960, Loss function: 5.237, Average Loss: 5.464, avg. samples / sec: 955.25
Iteration:   2980, Loss function: 5.281, Average Loss: 5.460, avg. samples / sec: 955.94
Iteration:   3000, Loss function: 5.439, Average Loss: 5.455, avg. samples / sec: 946.09
Iteration:   3020, Loss function: 5.256, Average Loss: 5.449, avg. samples / sec: 978.44
Iteration:   3040, Loss function: 5.097, Average Loss: 5.444, avg. samples / sec: 981.71
Iteration:   3060, Loss function: 5.138, Average Loss: 5.439, avg. samples / sec: 916.84
Iteration:   3080, Loss function: 4.979, Average Loss: 5.434, avg. samples / sec: 970.53
:::MLLOG {"namespace": "", "time_ms": 1639074181344, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074181346, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.154, Average Loss: 5.429, avg. samples / sec: 965.41
Iteration:   3120, Loss function: 4.937, Average Loss: 5.422, avg. samples / sec: 951.05
Iteration:   3140, Loss function: 5.164, Average Loss: 5.416, avg. samples / sec: 953.29
Iteration:   3160, Loss function: 5.559, Average Loss: 5.411, avg. samples / sec: 944.62
Iteration:   3180, Loss function: 4.944, Average Loss: 5.405, avg. samples / sec: 919.15
Iteration:   3200, Loss function: 5.042, Average Loss: 5.399, avg. samples / sec: 972.72
Iteration:   3220, Loss function: 5.062, Average Loss: 5.393, avg. samples / sec: 917.69
Iteration:   3240, Loss function: 5.125, Average Loss: 5.388, avg. samples / sec: 968.07
Iteration:   3260, Loss function: 5.123, Average Loss: 5.383, avg. samples / sec: 984.44
Iteration:   3280, Loss function: 4.944, Average Loss: 5.376, avg. samples / sec: 963.03
Iteration:   3300, Loss function: 4.783, Average Loss: 5.370, avg. samples / sec: 974.33
Iteration:   3320, Loss function: 4.988, Average Loss: 5.365, avg. samples / sec: 962.19
Iteration:   3340, Loss function: 5.280, Average Loss: 5.362, avg. samples / sec: 924.85
Iteration:   3360, Loss function: 4.990, Average Loss: 5.354, avg. samples / sec: 921.75
Iteration:   3380, Loss function: 5.066, Average Loss: 5.347, avg. samples / sec: 853.49
Iteration:   3400, Loss function: 4.858, Average Loss: 5.343, avg. samples / sec: 952.21
Iteration:   3420, Loss function: 5.105, Average Loss: 5.338, avg. samples / sec: 979.74
Iteration:   3440, Loss function: 4.782, Average Loss: 5.332, avg. samples / sec: 982.71
Iteration:   3460, Loss function: 5.293, Average Loss: 5.327, avg. samples / sec: 994.62
Iteration:   3480, Loss function: 5.138, Average Loss: 5.322, avg. samples / sec: 973.86
Iteration:   3500, Loss function: 5.395, Average Loss: 5.319, avg. samples / sec: 972.30
Iteration:   3520, Loss function: 5.149, Average Loss: 5.315, avg. samples / sec: 968.31
Iteration:   3540, Loss function: 5.009, Average Loss: 5.310, avg. samples / sec: 898.84
Iteration:   3560, Loss function: 4.975, Average Loss: 5.306, avg. samples / sec: 905.47
Iteration:   3580, Loss function: 5.006, Average Loss: 5.302, avg. samples / sec: 936.16
Iteration:   3600, Loss function: 5.061, Average Loss: 5.296, avg. samples / sec: 882.57
Iteration:   3620, Loss function: 4.715, Average Loss: 5.291, avg. samples / sec: 975.43
Iteration:   3640, Loss function: 4.898, Average Loss: 5.285, avg. samples / sec: 933.13
Iteration:   3660, Loss function: 5.075, Average Loss: 5.280, avg. samples / sec: 954.84
Iteration:   3680, Loss function: 5.230, Average Loss: 5.274, avg. samples / sec: 967.15
Iteration:   3700, Loss function: 4.954, Average Loss: 5.269, avg. samples / sec: 963.97
Iteration:   3720, Loss function: 4.838, Average Loss: 5.262, avg. samples / sec: 917.78
Iteration:   3740, Loss function: 5.073, Average Loss: 5.259, avg. samples / sec: 908.41
Iteration:   3760, Loss function: 5.024, Average Loss: 5.254, avg. samples / sec: 935.48
Iteration:   3780, Loss function: 5.114, Average Loss: 5.249, avg. samples / sec: 967.84
Iteration:   3800, Loss function: 5.201, Average Loss: 5.246, avg. samples / sec: 948.57
Iteration:   3820, Loss function: 5.390, Average Loss: 5.242, avg. samples / sec: 948.05
Iteration:   3840, Loss function: 4.940, Average Loss: 5.237, avg. samples / sec: 974.34
Iteration:   3860, Loss function: 4.932, Average Loss: 5.232, avg. samples / sec: 939.42
Iteration:   3880, Loss function: 5.057, Average Loss: 5.227, avg. samples / sec: 944.42
Iteration:   3900, Loss function: 5.201, Average Loss: 5.222, avg. samples / sec: 953.20
Iteration:   3920, Loss function: 5.069, Average Loss: 5.217, avg. samples / sec: 961.03
Iteration:   3940, Loss function: 5.096, Average Loss: 5.211, avg. samples / sec: 961.71
Iteration:   3960, Loss function: 4.899, Average Loss: 5.207, avg. samples / sec: 983.76
Iteration:   3980, Loss function: 4.830, Average Loss: 5.202, avg. samples / sec: 970.55
Iteration:   4000, Loss function: 5.059, Average Loss: 5.198, avg. samples / sec: 909.07
Iteration:   4020, Loss function: 5.148, Average Loss: 5.194, avg. samples / sec: 963.99
Iteration:   4040, Loss function: 4.900, Average Loss: 5.190, avg. samples / sec: 892.57
Iteration:   4060, Loss function: 5.135, Average Loss: 5.186, avg. samples / sec: 900.40
Iteration:   4080, Loss function: 4.969, Average Loss: 5.182, avg. samples / sec: 883.02
Iteration:   4100, Loss function: 5.174, Average Loss: 5.180, avg. samples / sec: 924.31
:::MLLOG {"namespace": "", "time_ms": 1639074305617, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074305619, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.961, Average Loss: 5.175, avg. samples / sec: 954.97
Iteration:   4140, Loss function: 5.106, Average Loss: 5.170, avg. samples / sec: 963.88
Iteration:   4160, Loss function: 4.750, Average Loss: 5.164, avg. samples / sec: 915.81
Iteration:   4180, Loss function: 4.890, Average Loss: 5.158, avg. samples / sec: 977.26
Iteration:   4200, Loss function: 4.767, Average Loss: 5.153, avg. samples / sec: 976.50
Iteration:   4220, Loss function: 4.881, Average Loss: 5.149, avg. samples / sec: 977.54
Iteration:   4240, Loss function: 4.827, Average Loss: 5.144, avg. samples / sec: 981.37
Iteration:   4260, Loss function: 5.094, Average Loss: 5.139, avg. samples / sec: 971.94
Iteration:   4280, Loss function: 4.962, Average Loss: 5.134, avg. samples / sec: 968.58
Iteration:   4300, Loss function: 4.746, Average Loss: 5.128, avg. samples / sec: 961.07
Iteration:   4320, Loss function: 4.745, Average Loss: 5.123, avg. samples / sec: 967.16
Iteration:   4340, Loss function: 4.740, Average Loss: 5.118, avg. samples / sec: 913.08
Iteration:   4360, Loss function: 4.883, Average Loss: 5.114, avg. samples / sec: 870.06
Iteration:   4380, Loss function: 5.014, Average Loss: 5.111, avg. samples / sec: 966.33
Iteration:   4400, Loss function: 4.984, Average Loss: 5.107, avg. samples / sec: 960.82
Iteration:   4420, Loss function: 4.897, Average Loss: 5.103, avg. samples / sec: 943.35
Iteration:   4440, Loss function: 4.788, Average Loss: 5.098, avg. samples / sec: 960.09
Iteration:   4460, Loss function: 5.317, Average Loss: 5.094, avg. samples / sec: 950.49
Iteration:   4480, Loss function: 5.164, Average Loss: 5.091, avg. samples / sec: 971.39
Iteration:   4500, Loss function: 4.933, Average Loss: 5.088, avg. samples / sec: 965.19
Iteration:   4520, Loss function: 4.954, Average Loss: 5.085, avg. samples / sec: 954.48
Iteration:   4540, Loss function: 5.129, Average Loss: 5.080, avg. samples / sec: 967.78
Iteration:   4560, Loss function: 4.578, Average Loss: 5.075, avg. samples / sec: 957.22
Iteration:   4580, Loss function: 4.766, Average Loss: 5.072, avg. samples / sec: 979.36
Iteration:   4600, Loss function: 4.841, Average Loss: 5.068, avg. samples / sec: 938.71
Iteration:   4620, Loss function: 4.595, Average Loss: 5.063, avg. samples / sec: 896.15
Iteration:   4640, Loss function: 4.736, Average Loss: 5.058, avg. samples / sec: 980.09
Iteration:   4660, Loss function: 4.785, Average Loss: 5.054, avg. samples / sec: 983.89
Iteration:   4680, Loss function: 5.196, Average Loss: 5.049, avg. samples / sec: 977.65
Iteration:   4700, Loss function: 4.672, Average Loss: 5.045, avg. samples / sec: 958.60
Iteration:   4720, Loss function: 4.726, Average Loss: 5.040, avg. samples / sec: 920.76
Iteration:   4740, Loss function: 4.841, Average Loss: 5.036, avg. samples / sec: 977.74
Iteration:   4760, Loss function: 4.576, Average Loss: 5.033, avg. samples / sec: 967.02
Iteration:   4780, Loss function: 5.012, Average Loss: 5.029, avg. samples / sec: 980.80
Iteration:   4800, Loss function: 5.021, Average Loss: 5.027, avg. samples / sec: 967.60
Iteration:   4820, Loss function: 4.624, Average Loss: 5.023, avg. samples / sec: 959.59
Iteration:   4840, Loss function: 5.118, Average Loss: 5.020, avg. samples / sec: 945.05
Iteration:   4860, Loss function: 4.801, Average Loss: 5.016, avg. samples / sec: 938.12
Iteration:   4880, Loss function: 5.107, Average Loss: 5.012, avg. samples / sec: 954.86
Iteration:   4900, Loss function: 4.652, Average Loss: 5.008, avg. samples / sec: 941.41
Iteration:   4920, Loss function: 4.716, Average Loss: 5.005, avg. samples / sec: 964.90
Iteration:   4940, Loss function: 4.879, Average Loss: 5.001, avg. samples / sec: 949.78
Iteration:   4960, Loss function: 4.714, Average Loss: 4.997, avg. samples / sec: 965.81
Iteration:   4980, Loss function: 4.701, Average Loss: 4.993, avg. samples / sec: 989.75
Iteration:   5000, Loss function: 5.052, Average Loss: 4.990, avg. samples / sec: 929.38
Iteration:   5020, Loss function: 4.980, Average Loss: 4.986, avg. samples / sec: 973.56
Iteration:   5040, Loss function: 4.838, Average Loss: 4.985, avg. samples / sec: 884.27
Iteration:   5060, Loss function: 4.827, Average Loss: 4.981, avg. samples / sec: 979.96
Iteration:   5080, Loss function: 4.516, Average Loss: 4.978, avg. samples / sec: 990.80
Iteration:   5100, Loss function: 4.856, Average Loss: 4.975, avg. samples / sec: 978.64
Iteration:   5120, Loss function: 4.560, Average Loss: 4.973, avg. samples / sec: 996.87
Iteration:   5140, Loss function: 4.977, Average Loss: 4.969, avg. samples / sec: 1002.51
:::MLLOG {"namespace": "", "time_ms": 1639074428020, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.45 s
:::MLLOG {"namespace": "", "time_ms": 1639074458547, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074458638, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074458638, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.92s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.855, Average Loss: 4.964, avg. samples / sec: 68.98
Iteration:   5180, Loss function: 4.712, Average Loss: 4.959, avg. samples / sec: 999.13
DONE (t=3.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10993
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22362
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09822
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20285
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14066
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22376
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22376
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10993 AP goal: 0.10000
Iteration:   5200, Loss function: 4.767, Average Loss: 4.955, avg. samples / sec: 1019.81
:::MLLOG {"namespace": "", "time_ms": 1639074465236, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465236, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10992527459334141, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465237, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465382, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:46 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:46 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073777686, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073777822, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1534339990, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1534339990
:::MLLOG {"namespace": "", "time_ms": 1639073779648, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073779648, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073779653, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073803763, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073803763, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073805287, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073805288, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073805865, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073805866, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073805867, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.291, Average Loss: 0.023, avg. samples / sec: 4.40
Iteration:     20, Loss function: 20.990, Average Loss: 0.461, avg. samples / sec: 808.28
Iteration:     40, Loss function: 20.622, Average Loss: 0.862, avg. samples / sec: 827.46
Iteration:     60, Loss function: 20.379, Average Loss: 1.251, avg. samples / sec: 884.44
Iteration:     80, Loss function: 19.720, Average Loss: 1.624, avg. samples / sec: 864.56
Iteration:    100, Loss function: 14.859, Average Loss: 1.942, avg. samples / sec: 695.43
Iteration:    120, Loss function: 11.422, Average Loss: 2.145, avg. samples / sec: 825.75
Iteration:    140, Loss function: 9.804, Average Loss: 2.304, avg. samples / sec: 863.31
Iteration:    160, Loss function: 9.354, Average Loss: 2.446, avg. samples / sec: 912.98
Iteration:    180, Loss function: 9.001, Average Loss: 2.576, avg. samples / sec: 942.36
Iteration:    200, Loss function: 8.661, Average Loss: 2.701, avg. samples / sec: 922.88
Iteration:    220, Loss function: 8.533, Average Loss: 2.822, avg. samples / sec: 951.41
Iteration:    240, Loss function: 8.535, Average Loss: 2.939, avg. samples / sec: 872.30
Iteration:    260, Loss function: 8.742, Average Loss: 3.053, avg. samples / sec: 923.55
Iteration:    280, Loss function: 8.688, Average Loss: 3.163, avg. samples / sec: 968.74
Iteration:    300, Loss function: 8.317, Average Loss: 3.267, avg. samples / sec: 948.49
Iteration:    320, Loss function: 8.345, Average Loss: 3.368, avg. samples / sec: 922.59
Iteration:    340, Loss function: 8.345, Average Loss: 3.465, avg. samples / sec: 973.99
Iteration:    360, Loss function: 7.914, Average Loss: 3.558, avg. samples / sec: 976.68
Iteration:    380, Loss function: 7.783, Average Loss: 3.648, avg. samples / sec: 905.94
Iteration:    400, Loss function: 8.051, Average Loss: 3.733, avg. samples / sec: 931.86
Iteration:    420, Loss function: 7.683, Average Loss: 3.815, avg. samples / sec: 922.85
Iteration:    440, Loss function: 7.729, Average Loss: 3.894, avg. samples / sec: 954.87
Iteration:    460, Loss function: 7.821, Average Loss: 3.970, avg. samples / sec: 954.73
Iteration:    480, Loss function: 7.358, Average Loss: 4.043, avg. samples / sec: 959.31
Iteration:    500, Loss function: 7.559, Average Loss: 4.114, avg. samples / sec: 966.23
Iteration:    520, Loss function: 7.613, Average Loss: 4.183, avg. samples / sec: 983.79
Iteration:    540, Loss function: 7.278, Average Loss: 4.248, avg. samples / sec: 869.79
Iteration:    560, Loss function: 7.070, Average Loss: 4.310, avg. samples / sec: 880.18
Iteration:    580, Loss function: 7.200, Average Loss: 4.371, avg. samples / sec: 932.39
Iteration:    600, Loss function: 7.256, Average Loss: 4.430, avg. samples / sec: 920.82
Iteration:    620, Loss function: 6.930, Average Loss: 4.485, avg. samples / sec: 976.82
Iteration:    640, Loss function: 6.852, Average Loss: 4.541, avg. samples / sec: 973.89
Iteration:    660, Loss function: 7.048, Average Loss: 4.593, avg. samples / sec: 949.21
Iteration:    680, Loss function: 7.313, Average Loss: 4.645, avg. samples / sec: 893.38
Iteration:    700, Loss function: 6.736, Average Loss: 4.693, avg. samples / sec: 947.16
Iteration:    720, Loss function: 7.236, Average Loss: 4.741, avg. samples / sec: 929.70
Iteration:    740, Loss function: 6.912, Average Loss: 4.786, avg. samples / sec: 960.99
Iteration:    760, Loss function: 7.094, Average Loss: 4.829, avg. samples / sec: 954.87
Iteration:    780, Loss function: 6.873, Average Loss: 4.871, avg. samples / sec: 965.16
Iteration:    800, Loss function: 7.149, Average Loss: 4.910, avg. samples / sec: 966.72
Iteration:    820, Loss function: 6.914, Average Loss: 4.948, avg. samples / sec: 970.62
Iteration:    840, Loss function: 6.715, Average Loss: 4.985, avg. samples / sec: 969.76
Iteration:    860, Loss function: 6.839, Average Loss: 5.020, avg. samples / sec: 982.02
Iteration:    880, Loss function: 6.606, Average Loss: 5.052, avg. samples / sec: 943.36
Iteration:    900, Loss function: 6.850, Average Loss: 5.083, avg. samples / sec: 964.72
Iteration:    920, Loss function: 6.729, Average Loss: 5.112, avg. samples / sec: 978.47
Iteration:    940, Loss function: 6.781, Average Loss: 5.141, avg. samples / sec: 901.51
Iteration:    960, Loss function: 6.383, Average Loss: 5.169, avg. samples / sec: 907.22
Iteration:    980, Loss function: 6.528, Average Loss: 5.197, avg. samples / sec: 913.03
Iteration:   1000, Loss function: 6.458, Average Loss: 5.221, avg. samples / sec: 895.18
Iteration:   1020, Loss function: 6.360, Average Loss: 5.246, avg. samples / sec: 875.07
:::MLLOG {"namespace": "", "time_ms": 1639073933575, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073933579, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.446, Average Loss: 5.270, avg. samples / sec: 901.56
Iteration:   1060, Loss function: 6.301, Average Loss: 5.293, avg. samples / sec: 961.21
Iteration:   1080, Loss function: 6.340, Average Loss: 5.314, avg. samples / sec: 933.65
Iteration:   1100, Loss function: 6.025, Average Loss: 5.333, avg. samples / sec: 989.64
Iteration:   1120, Loss function: 6.164, Average Loss: 5.353, avg. samples / sec: 988.95
Iteration:   1140, Loss function: 6.393, Average Loss: 5.371, avg. samples / sec: 986.84
Iteration:   1160, Loss function: 6.139, Average Loss: 5.389, avg. samples / sec: 963.60
Iteration:   1180, Loss function: 6.215, Average Loss: 5.405, avg. samples / sec: 953.40
Iteration:   1200, Loss function: 6.193, Average Loss: 5.421, avg. samples / sec: 991.64
Iteration:   1220, Loss function: 6.158, Average Loss: 5.436, avg. samples / sec: 958.21
Iteration:   1240, Loss function: 6.108, Average Loss: 5.448, avg. samples / sec: 993.34
Iteration:   1260, Loss function: 6.167, Average Loss: 5.460, avg. samples / sec: 946.90
Iteration:   1280, Loss function: 5.815, Average Loss: 5.472, avg. samples / sec: 941.32
Iteration:   1300, Loss function: 6.059, Average Loss: 5.484, avg. samples / sec: 900.66
Iteration:   1320, Loss function: 6.190, Average Loss: 5.496, avg. samples / sec: 938.70
Iteration:   1340, Loss function: 5.760, Average Loss: 5.506, avg. samples / sec: 977.08
Iteration:   1360, Loss function: 5.905, Average Loss: 5.515, avg. samples / sec: 961.72
Iteration:   1380, Loss function: 6.123, Average Loss: 5.525, avg. samples / sec: 960.93
Iteration:   1400, Loss function: 5.960, Average Loss: 5.534, avg. samples / sec: 960.65
Iteration:   1420, Loss function: 5.825, Average Loss: 5.541, avg. samples / sec: 985.45
Iteration:   1440, Loss function: 6.350, Average Loss: 5.550, avg. samples / sec: 977.69
Iteration:   1460, Loss function: 6.286, Average Loss: 5.558, avg. samples / sec: 962.14
Iteration:   1480, Loss function: 6.043, Average Loss: 5.566, avg. samples / sec: 918.11
Iteration:   1500, Loss function: 6.111, Average Loss: 5.575, avg. samples / sec: 953.25
Iteration:   1520, Loss function: 6.042, Average Loss: 5.581, avg. samples / sec: 963.93
Iteration:   1540, Loss function: 5.901, Average Loss: 5.585, avg. samples / sec: 979.87
Iteration:   1560, Loss function: 5.793, Average Loss: 5.589, avg. samples / sec: 896.83
Iteration:   1580, Loss function: 5.673, Average Loss: 5.595, avg. samples / sec: 918.42
Iteration:   1600, Loss function: 6.079, Average Loss: 5.600, avg. samples / sec: 921.25
Iteration:   1620, Loss function: 5.603, Average Loss: 5.605, avg. samples / sec: 938.16
Iteration:   1640, Loss function: 5.917, Average Loss: 5.608, avg. samples / sec: 898.37
Iteration:   1660, Loss function: 6.008, Average Loss: 5.612, avg. samples / sec: 973.06
Iteration:   1680, Loss function: 5.515, Average Loss: 5.615, avg. samples / sec: 990.99
Iteration:   1700, Loss function: 5.356, Average Loss: 5.618, avg. samples / sec: 990.74
Iteration:   1720, Loss function: 5.588, Average Loss: 5.620, avg. samples / sec: 920.90
Iteration:   1740, Loss function: 5.963, Average Loss: 5.624, avg. samples / sec: 953.26
Iteration:   1760, Loss function: 5.625, Average Loss: 5.625, avg. samples / sec: 977.33
Iteration:   1780, Loss function: 5.599, Average Loss: 5.626, avg. samples / sec: 924.68
Iteration:   1800, Loss function: 5.686, Average Loss: 5.629, avg. samples / sec: 938.02
Iteration:   1820, Loss function: 5.870, Average Loss: 5.631, avg. samples / sec: 984.13
Iteration:   1840, Loss function: 5.908, Average Loss: 5.631, avg. samples / sec: 951.68
Iteration:   1860, Loss function: 5.739, Average Loss: 5.631, avg. samples / sec: 939.95
Iteration:   1880, Loss function: 5.882, Average Loss: 5.633, avg. samples / sec: 988.27
Iteration:   1900, Loss function: 6.033, Average Loss: 5.634, avg. samples / sec: 940.15
Iteration:   1920, Loss function: 5.620, Average Loss: 5.634, avg. samples / sec: 893.16
Iteration:   1940, Loss function: 5.857, Average Loss: 5.634, avg. samples / sec: 901.02
Iteration:   1960, Loss function: 5.595, Average Loss: 5.633, avg. samples / sec: 961.78
Iteration:   1980, Loss function: 5.740, Average Loss: 5.632, avg. samples / sec: 986.08
Iteration:   2000, Loss function: 5.439, Average Loss: 5.631, avg. samples / sec: 949.93
Iteration:   2020, Loss function: 5.788, Average Loss: 5.630, avg. samples / sec: 953.79
Iteration:   2040, Loss function: 5.662, Average Loss: 5.630, avg. samples / sec: 872.99
:::MLLOG {"namespace": "", "time_ms": 1639074056923, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074056924, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.434, Average Loss: 5.627, avg. samples / sec: 935.55
Iteration:   2080, Loss function: 5.081, Average Loss: 5.624, avg. samples / sec: 944.53
Iteration:   2100, Loss function: 5.407, Average Loss: 5.622, avg. samples / sec: 986.68
Iteration:   2120, Loss function: 5.261, Average Loss: 5.619, avg. samples / sec: 980.22
Iteration:   2140, Loss function: 5.514, Average Loss: 5.616, avg. samples / sec: 905.69
Iteration:   2160, Loss function: 5.452, Average Loss: 5.613, avg. samples / sec: 981.16
Iteration:   2180, Loss function: 5.493, Average Loss: 5.612, avg. samples / sec: 960.22
Iteration:   2200, Loss function: 5.710, Average Loss: 5.609, avg. samples / sec: 991.15
Iteration:   2220, Loss function: 5.450, Average Loss: 5.607, avg. samples / sec: 957.31
Iteration:   2240, Loss function: 5.322, Average Loss: 5.604, avg. samples / sec: 949.22
Iteration:   2260, Loss function: 5.382, Average Loss: 5.600, avg. samples / sec: 966.66
Iteration:   2280, Loss function: 5.274, Average Loss: 5.597, avg. samples / sec: 969.82
Iteration:   2300, Loss function: 5.132, Average Loss: 5.593, avg. samples / sec: 978.75
Iteration:   2320, Loss function: 5.632, Average Loss: 5.591, avg. samples / sec: 984.88
Iteration:   2340, Loss function: 5.443, Average Loss: 5.588, avg. samples / sec: 987.59
Iteration:   2360, Loss function: 5.316, Average Loss: 5.584, avg. samples / sec: 969.75
Iteration:   2380, Loss function: 5.509, Average Loss: 5.582, avg. samples / sec: 980.01
Iteration:   2400, Loss function: 5.347, Average Loss: 5.578, avg. samples / sec: 930.84
Iteration:   2420, Loss function: 5.529, Average Loss: 5.574, avg. samples / sec: 982.32
Iteration:   2440, Loss function: 5.578, Average Loss: 5.570, avg. samples / sec: 907.84
Iteration:   2460, Loss function: 5.360, Average Loss: 5.567, avg. samples / sec: 887.02
Iteration:   2480, Loss function: 5.236, Average Loss: 5.563, avg. samples / sec: 897.88
Iteration:   2500, Loss function: 5.365, Average Loss: 5.559, avg. samples / sec: 945.39
Iteration:   2520, Loss function: 5.291, Average Loss: 5.553, avg. samples / sec: 982.46
Iteration:   2540, Loss function: 5.426, Average Loss: 5.550, avg. samples / sec: 961.01
Iteration:   2560, Loss function: 5.270, Average Loss: 5.546, avg. samples / sec: 989.57
Iteration:   2580, Loss function: 5.415, Average Loss: 5.544, avg. samples / sec: 978.07
Iteration:   2600, Loss function: 5.282, Average Loss: 5.542, avg. samples / sec: 917.89
Iteration:   2620, Loss function: 5.434, Average Loss: 5.537, avg. samples / sec: 920.71
Iteration:   2640, Loss function: 5.221, Average Loss: 5.534, avg. samples / sec: 977.23
Iteration:   2660, Loss function: 5.196, Average Loss: 5.530, avg. samples / sec: 877.56
Iteration:   2680, Loss function: 5.129, Average Loss: 5.527, avg. samples / sec: 878.99
Iteration:   2700, Loss function: 5.128, Average Loss: 5.522, avg. samples / sec: 891.86
Iteration:   2720, Loss function: 5.173, Average Loss: 5.518, avg. samples / sec: 886.71
Iteration:   2740, Loss function: 5.255, Average Loss: 5.514, avg. samples / sec: 888.07
Iteration:   2760, Loss function: 5.050, Average Loss: 5.509, avg. samples / sec: 797.30
Iteration:   2780, Loss function: 5.471, Average Loss: 5.505, avg. samples / sec: 862.18
Iteration:   2800, Loss function: 5.392, Average Loss: 5.501, avg. samples / sec: 980.19
Iteration:   2820, Loss function: 5.308, Average Loss: 5.496, avg. samples / sec: 933.32
Iteration:   2840, Loss function: 5.132, Average Loss: 5.492, avg. samples / sec: 881.80
Iteration:   2860, Loss function: 5.112, Average Loss: 5.487, avg. samples / sec: 978.31
Iteration:   2880, Loss function: 5.306, Average Loss: 5.483, avg. samples / sec: 940.13
Iteration:   2900, Loss function: 5.092, Average Loss: 5.478, avg. samples / sec: 959.99
Iteration:   2920, Loss function: 5.130, Average Loss: 5.472, avg. samples / sec: 916.02
Iteration:   2940, Loss function: 5.074, Average Loss: 5.467, avg. samples / sec: 983.55
Iteration:   2960, Loss function: 5.237, Average Loss: 5.464, avg. samples / sec: 955.25
Iteration:   2980, Loss function: 5.281, Average Loss: 5.460, avg. samples / sec: 955.94
Iteration:   3000, Loss function: 5.439, Average Loss: 5.455, avg. samples / sec: 946.09
Iteration:   3020, Loss function: 5.256, Average Loss: 5.449, avg. samples / sec: 978.44
Iteration:   3040, Loss function: 5.097, Average Loss: 5.444, avg. samples / sec: 981.71
Iteration:   3060, Loss function: 5.138, Average Loss: 5.439, avg. samples / sec: 916.84
Iteration:   3080, Loss function: 4.979, Average Loss: 5.434, avg. samples / sec: 970.53
:::MLLOG {"namespace": "", "time_ms": 1639074181344, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074181346, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.154, Average Loss: 5.429, avg. samples / sec: 965.41
Iteration:   3120, Loss function: 4.937, Average Loss: 5.422, avg. samples / sec: 951.05
Iteration:   3140, Loss function: 5.164, Average Loss: 5.416, avg. samples / sec: 953.29
Iteration:   3160, Loss function: 5.559, Average Loss: 5.411, avg. samples / sec: 944.62
Iteration:   3180, Loss function: 4.944, Average Loss: 5.405, avg. samples / sec: 919.15
Iteration:   3200, Loss function: 5.042, Average Loss: 5.399, avg. samples / sec: 972.72
Iteration:   3220, Loss function: 5.062, Average Loss: 5.393, avg. samples / sec: 917.69
Iteration:   3240, Loss function: 5.125, Average Loss: 5.388, avg. samples / sec: 968.07
Iteration:   3260, Loss function: 5.123, Average Loss: 5.383, avg. samples / sec: 984.44
Iteration:   3280, Loss function: 4.944, Average Loss: 5.376, avg. samples / sec: 963.03
Iteration:   3300, Loss function: 4.783, Average Loss: 5.370, avg. samples / sec: 974.33
Iteration:   3320, Loss function: 4.988, Average Loss: 5.365, avg. samples / sec: 962.19
Iteration:   3340, Loss function: 5.280, Average Loss: 5.362, avg. samples / sec: 924.85
Iteration:   3360, Loss function: 4.990, Average Loss: 5.354, avg. samples / sec: 921.75
Iteration:   3380, Loss function: 5.066, Average Loss: 5.347, avg. samples / sec: 853.49
Iteration:   3400, Loss function: 4.858, Average Loss: 5.343, avg. samples / sec: 952.21
Iteration:   3420, Loss function: 5.105, Average Loss: 5.338, avg. samples / sec: 979.74
Iteration:   3440, Loss function: 4.782, Average Loss: 5.332, avg. samples / sec: 982.71
Iteration:   3460, Loss function: 5.293, Average Loss: 5.327, avg. samples / sec: 994.62
Iteration:   3480, Loss function: 5.138, Average Loss: 5.322, avg. samples / sec: 973.86
Iteration:   3500, Loss function: 5.395, Average Loss: 5.319, avg. samples / sec: 972.30
Iteration:   3520, Loss function: 5.149, Average Loss: 5.315, avg. samples / sec: 968.31
Iteration:   3540, Loss function: 5.009, Average Loss: 5.310, avg. samples / sec: 898.84
Iteration:   3560, Loss function: 4.975, Average Loss: 5.306, avg. samples / sec: 905.47
Iteration:   3580, Loss function: 5.006, Average Loss: 5.302, avg. samples / sec: 936.16
Iteration:   3600, Loss function: 5.061, Average Loss: 5.296, avg. samples / sec: 882.57
Iteration:   3620, Loss function: 4.715, Average Loss: 5.291, avg. samples / sec: 975.43
Iteration:   3640, Loss function: 4.898, Average Loss: 5.285, avg. samples / sec: 933.13
Iteration:   3660, Loss function: 5.075, Average Loss: 5.280, avg. samples / sec: 954.84
Iteration:   3680, Loss function: 5.230, Average Loss: 5.274, avg. samples / sec: 967.15
Iteration:   3700, Loss function: 4.954, Average Loss: 5.269, avg. samples / sec: 963.97
Iteration:   3720, Loss function: 4.838, Average Loss: 5.262, avg. samples / sec: 917.78
Iteration:   3740, Loss function: 5.073, Average Loss: 5.259, avg. samples / sec: 908.41
Iteration:   3760, Loss function: 5.024, Average Loss: 5.254, avg. samples / sec: 935.48
Iteration:   3780, Loss function: 5.114, Average Loss: 5.249, avg. samples / sec: 967.84
Iteration:   3800, Loss function: 5.201, Average Loss: 5.246, avg. samples / sec: 948.57
Iteration:   3820, Loss function: 5.390, Average Loss: 5.242, avg. samples / sec: 948.05
Iteration:   3840, Loss function: 4.940, Average Loss: 5.237, avg. samples / sec: 974.34
Iteration:   3860, Loss function: 4.932, Average Loss: 5.232, avg. samples / sec: 939.42
Iteration:   3880, Loss function: 5.057, Average Loss: 5.227, avg. samples / sec: 944.42
Iteration:   3900, Loss function: 5.201, Average Loss: 5.222, avg. samples / sec: 953.20
Iteration:   3920, Loss function: 5.069, Average Loss: 5.217, avg. samples / sec: 961.03
Iteration:   3940, Loss function: 5.096, Average Loss: 5.211, avg. samples / sec: 961.71
Iteration:   3960, Loss function: 4.899, Average Loss: 5.207, avg. samples / sec: 983.76
Iteration:   3980, Loss function: 4.830, Average Loss: 5.202, avg. samples / sec: 970.55
Iteration:   4000, Loss function: 5.059, Average Loss: 5.198, avg. samples / sec: 909.07
Iteration:   4020, Loss function: 5.148, Average Loss: 5.194, avg. samples / sec: 963.99
Iteration:   4040, Loss function: 4.900, Average Loss: 5.190, avg. samples / sec: 892.57
Iteration:   4060, Loss function: 5.135, Average Loss: 5.186, avg. samples / sec: 900.40
Iteration:   4080, Loss function: 4.969, Average Loss: 5.182, avg. samples / sec: 883.02
Iteration:   4100, Loss function: 5.174, Average Loss: 5.180, avg. samples / sec: 924.31
:::MLLOG {"namespace": "", "time_ms": 1639074305617, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074305619, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.961, Average Loss: 5.175, avg. samples / sec: 954.97
Iteration:   4140, Loss function: 5.106, Average Loss: 5.170, avg. samples / sec: 963.88
Iteration:   4160, Loss function: 4.750, Average Loss: 5.164, avg. samples / sec: 915.81
Iteration:   4180, Loss function: 4.890, Average Loss: 5.158, avg. samples / sec: 977.26
Iteration:   4200, Loss function: 4.767, Average Loss: 5.153, avg. samples / sec: 976.50
Iteration:   4220, Loss function: 4.881, Average Loss: 5.149, avg. samples / sec: 977.54
Iteration:   4240, Loss function: 4.827, Average Loss: 5.144, avg. samples / sec: 981.37
Iteration:   4260, Loss function: 5.094, Average Loss: 5.139, avg. samples / sec: 971.94
Iteration:   4280, Loss function: 4.962, Average Loss: 5.134, avg. samples / sec: 968.58
Iteration:   4300, Loss function: 4.746, Average Loss: 5.128, avg. samples / sec: 961.07
Iteration:   4320, Loss function: 4.745, Average Loss: 5.123, avg. samples / sec: 967.16
Iteration:   4340, Loss function: 4.740, Average Loss: 5.118, avg. samples / sec: 913.08
Iteration:   4360, Loss function: 4.883, Average Loss: 5.114, avg. samples / sec: 870.06
Iteration:   4380, Loss function: 5.014, Average Loss: 5.111, avg. samples / sec: 966.33
Iteration:   4400, Loss function: 4.984, Average Loss: 5.107, avg. samples / sec: 960.82
Iteration:   4420, Loss function: 4.897, Average Loss: 5.103, avg. samples / sec: 943.35
Iteration:   4440, Loss function: 4.788, Average Loss: 5.098, avg. samples / sec: 960.09
Iteration:   4460, Loss function: 5.317, Average Loss: 5.094, avg. samples / sec: 950.49
Iteration:   4480, Loss function: 5.164, Average Loss: 5.091, avg. samples / sec: 971.39
Iteration:   4500, Loss function: 4.933, Average Loss: 5.088, avg. samples / sec: 965.19
Iteration:   4520, Loss function: 4.954, Average Loss: 5.085, avg. samples / sec: 954.48
Iteration:   4540, Loss function: 5.129, Average Loss: 5.080, avg. samples / sec: 967.78
Iteration:   4560, Loss function: 4.578, Average Loss: 5.075, avg. samples / sec: 957.22
Iteration:   4580, Loss function: 4.766, Average Loss: 5.072, avg. samples / sec: 979.36
Iteration:   4600, Loss function: 4.841, Average Loss: 5.068, avg. samples / sec: 938.71
Iteration:   4620, Loss function: 4.595, Average Loss: 5.063, avg. samples / sec: 896.15
Iteration:   4640, Loss function: 4.736, Average Loss: 5.058, avg. samples / sec: 980.09
Iteration:   4660, Loss function: 4.785, Average Loss: 5.054, avg. samples / sec: 983.89
Iteration:   4680, Loss function: 5.196, Average Loss: 5.049, avg. samples / sec: 977.65
Iteration:   4700, Loss function: 4.672, Average Loss: 5.045, avg. samples / sec: 958.60
Iteration:   4720, Loss function: 4.726, Average Loss: 5.040, avg. samples / sec: 920.76
Iteration:   4740, Loss function: 4.841, Average Loss: 5.036, avg. samples / sec: 977.74
Iteration:   4760, Loss function: 4.576, Average Loss: 5.033, avg. samples / sec: 967.02
Iteration:   4780, Loss function: 5.012, Average Loss: 5.029, avg. samples / sec: 980.80
Iteration:   4800, Loss function: 5.021, Average Loss: 5.027, avg. samples / sec: 967.60
Iteration:   4820, Loss function: 4.624, Average Loss: 5.023, avg. samples / sec: 959.59
Iteration:   4840, Loss function: 5.118, Average Loss: 5.020, avg. samples / sec: 945.05
Iteration:   4860, Loss function: 4.801, Average Loss: 5.016, avg. samples / sec: 938.12
Iteration:   4880, Loss function: 5.107, Average Loss: 5.012, avg. samples / sec: 954.86
Iteration:   4900, Loss function: 4.652, Average Loss: 5.008, avg. samples / sec: 941.41
Iteration:   4920, Loss function: 4.716, Average Loss: 5.005, avg. samples / sec: 964.90
Iteration:   4940, Loss function: 4.879, Average Loss: 5.001, avg. samples / sec: 949.78
Iteration:   4960, Loss function: 4.714, Average Loss: 4.997, avg. samples / sec: 965.81
Iteration:   4980, Loss function: 4.701, Average Loss: 4.993, avg. samples / sec: 989.75
Iteration:   5000, Loss function: 5.052, Average Loss: 4.990, avg. samples / sec: 929.38
Iteration:   5020, Loss function: 4.980, Average Loss: 4.986, avg. samples / sec: 973.56
Iteration:   5040, Loss function: 4.838, Average Loss: 4.985, avg. samples / sec: 884.27
Iteration:   5060, Loss function: 4.827, Average Loss: 4.981, avg. samples / sec: 979.96
Iteration:   5080, Loss function: 4.516, Average Loss: 4.978, avg. samples / sec: 990.80
Iteration:   5100, Loss function: 4.856, Average Loss: 4.975, avg. samples / sec: 978.64
Iteration:   5120, Loss function: 4.560, Average Loss: 4.973, avg. samples / sec: 996.87
Iteration:   5140, Loss function: 4.977, Average Loss: 4.969, avg. samples / sec: 1002.51
:::MLLOG {"namespace": "", "time_ms": 1639074428020, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.45 s
:::MLLOG {"namespace": "", "time_ms": 1639074458547, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074458638, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074458638, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.92s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.855, Average Loss: 4.964, avg. samples / sec: 68.98
Iteration:   5180, Loss function: 4.712, Average Loss: 4.959, avg. samples / sec: 999.13
DONE (t=3.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10993
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22362
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09822
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20285
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14066
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22376
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22376
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10993 AP goal: 0.10000
Iteration:   5200, Loss function: 4.767, Average Loss: 4.955, avg. samples / sec: 1019.81
:::MLLOG {"namespace": "", "time_ms": 1639074465236, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465236, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10992527459334141, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465237, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074465382, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074466
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:46 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:10 PM'
START TIMING RUN WAS 2021-12-09 06:16:10 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:46 PM'
ENDING TIMING RUN AT 2021-12-09 06:27:46 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 7g.40gb     Device  0: (UUID: MIG-62f7dc39-4870-51c0-9b21-86def482903a)
+ result=696
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 06:16:10 PM'
RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-09 06:16:10 PM
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
