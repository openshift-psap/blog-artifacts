+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-zxwjp.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-zxwjp.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-zxwjp.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f'
Found 1 MIG instances: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639073771
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 06:16:11 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 06:16:11 PM GPU: 1 x 7g.40gb x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_13-15-55 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\3\-\1\5\-\5\5 ]]
+ set +x
Thu Dec  9 18:16:11 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-zxwjp to the sync file ...
run-ssd--1-zxwjp Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-crckk
     2	run-ssd--1-5r9lr
     3	run-ssd--1-z64cs
     4	run-ssd--1-72t5f
     5	run-ssd--1-6kz48
     6	run-ssd--1-zxwjp
Thu Dec  9 18:16:16 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ tee -a /tmp/ssd_all.log
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
:::MLLOG {"namespace": "", "time_ms": 1639073778435, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073778569, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3589997601, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3589997601
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639073780533, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073780533, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073780538, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073780538, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073804528, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073804529, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639073806287, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073806288, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073806685, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073806688, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073806695, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.865, Average Loss: 0.023, avg. samples / sec: 4.41
Iteration:     20, Loss function: 21.037, Average Loss: 0.456, avg. samples / sec: 753.82
Iteration:     40, Loss function: 20.841, Average Loss: 0.858, avg. samples / sec: 865.10
Iteration:     60, Loss function: 20.279, Average Loss: 1.247, avg. samples / sec: 900.68
Iteration:     80, Loss function: 19.811, Average Loss: 1.619, avg. samples / sec: 919.13
Iteration:    100, Loss function: 14.244, Average Loss: 1.933, avg. samples / sec: 696.18
Iteration:    120, Loss function: 11.442, Average Loss: 2.126, avg. samples / sec: 935.45
Iteration:    140, Loss function: 10.003, Average Loss: 2.292, avg. samples / sec: 827.58
Iteration:    160, Loss function: 9.284, Average Loss: 2.435, avg. samples / sec: 876.95
Iteration:    180, Loss function: 9.135, Average Loss: 2.567, avg. samples / sec: 921.74
Iteration:    200, Loss function: 8.704, Average Loss: 2.694, avg. samples / sec: 856.66
Iteration:    220, Loss function: 8.743, Average Loss: 2.817, avg. samples / sec: 903.56
Iteration:    240, Loss function: 8.821, Average Loss: 2.938, avg. samples / sec: 897.98
Iteration:    260, Loss function: 8.831, Average Loss: 3.054, avg. samples / sec: 851.39
Iteration:    280, Loss function: 8.579, Average Loss: 3.165, avg. samples / sec: 875.35
Iteration:    300, Loss function: 8.393, Average Loss: 3.269, avg. samples / sec: 898.68
Iteration:    320, Loss function: 8.383, Average Loss: 3.373, avg. samples / sec: 934.52
Iteration:    340, Loss function: 8.310, Average Loss: 3.472, avg. samples / sec: 946.42
Iteration:    360, Loss function: 8.021, Average Loss: 3.566, avg. samples / sec: 959.84
Iteration:    380, Loss function: 8.191, Average Loss: 3.657, avg. samples / sec: 955.07
Iteration:    400, Loss function: 8.134, Average Loss: 3.744, avg. samples / sec: 958.52
Iteration:    420, Loss function: 7.654, Average Loss: 3.828, avg. samples / sec: 949.07
Iteration:    440, Loss function: 7.964, Average Loss: 3.908, avg. samples / sec: 956.29
Iteration:    460, Loss function: 7.805, Average Loss: 3.986, avg. samples / sec: 971.53
Iteration:    480, Loss function: 7.565, Average Loss: 4.060, avg. samples / sec: 954.84
Iteration:    500, Loss function: 7.659, Average Loss: 4.132, avg. samples / sec: 932.82
Iteration:    520, Loss function: 7.556, Average Loss: 4.200, avg. samples / sec: 884.05
Iteration:    540, Loss function: 7.614, Average Loss: 4.268, avg. samples / sec: 951.80
Iteration:    560, Loss function: 7.296, Average Loss: 4.331, avg. samples / sec: 977.95
Iteration:    580, Loss function: 7.181, Average Loss: 4.394, avg. samples / sec: 916.94
Iteration:    600, Loss function: 7.417, Average Loss: 4.453, avg. samples / sec: 934.22
Iteration:    620, Loss function: 7.136, Average Loss: 4.510, avg. samples / sec: 889.03
Iteration:    640, Loss function: 6.976, Average Loss: 4.565, avg. samples / sec: 935.83
Iteration:    660, Loss function: 7.246, Average Loss: 4.617, avg. samples / sec: 920.74
Iteration:    680, Loss function: 7.239, Average Loss: 4.668, avg. samples / sec: 983.02
Iteration:    700, Loss function: 6.910, Average Loss: 4.717, avg. samples / sec: 977.96
Iteration:    720, Loss function: 7.056, Average Loss: 4.765, avg. samples / sec: 953.13
Iteration:    740, Loss function: 6.900, Average Loss: 4.810, avg. samples / sec: 872.71
Iteration:    760, Loss function: 6.983, Average Loss: 4.854, avg. samples / sec: 963.56
Iteration:    780, Loss function: 6.778, Average Loss: 4.896, avg. samples / sec: 937.05
Iteration:    800, Loss function: 6.979, Average Loss: 4.935, avg. samples / sec: 874.59
Iteration:    820, Loss function: 6.786, Average Loss: 4.974, avg. samples / sec: 941.55
Iteration:    840, Loss function: 6.776, Average Loss: 5.011, avg. samples / sec: 926.95
Iteration:    860, Loss function: 6.935, Average Loss: 5.046, avg. samples / sec: 936.94
Iteration:    880, Loss function: 6.591, Average Loss: 5.079, avg. samples / sec: 955.83
Iteration:    900, Loss function: 6.925, Average Loss: 5.110, avg. samples / sec: 966.19
Iteration:    920, Loss function: 6.741, Average Loss: 5.140, avg. samples / sec: 924.80
Iteration:    940, Loss function: 6.913, Average Loss: 5.169, avg. samples / sec: 974.93
Iteration:    960, Loss function: 6.384, Average Loss: 5.198, avg. samples / sec: 985.62
Iteration:    980, Loss function: 6.534, Average Loss: 5.226, avg. samples / sec: 962.02
Iteration:   1000, Loss function: 6.567, Average Loss: 5.252, avg. samples / sec: 963.16
Iteration:   1020, Loss function: 6.405, Average Loss: 5.276, avg. samples / sec: 990.42
:::MLLOG {"namespace": "", "time_ms": 1639073934422, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073934424, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.567, Average Loss: 5.300, avg. samples / sec: 981.43
Iteration:   1060, Loss function: 6.491, Average Loss: 5.324, avg. samples / sec: 893.24
Iteration:   1080, Loss function: 6.219, Average Loss: 5.346, avg. samples / sec: 960.50
Iteration:   1100, Loss function: 6.196, Average Loss: 5.365, avg. samples / sec: 885.04
Iteration:   1120, Loss function: 6.243, Average Loss: 5.386, avg. samples / sec: 854.48
Iteration:   1140, Loss function: 6.405, Average Loss: 5.405, avg. samples / sec: 887.68
Iteration:   1160, Loss function: 6.157, Average Loss: 5.422, avg. samples / sec: 948.85
Iteration:   1180, Loss function: 6.227, Average Loss: 5.439, avg. samples / sec: 909.73
Iteration:   1200, Loss function: 6.334, Average Loss: 5.455, avg. samples / sec: 896.74
Iteration:   1220, Loss function: 6.210, Average Loss: 5.470, avg. samples / sec: 992.33
Iteration:   1240, Loss function: 5.980, Average Loss: 5.483, avg. samples / sec: 984.13
Iteration:   1260, Loss function: 5.938, Average Loss: 5.495, avg. samples / sec: 960.05
Iteration:   1280, Loss function: 5.818, Average Loss: 5.507, avg. samples / sec: 922.82
Iteration:   1300, Loss function: 6.171, Average Loss: 5.520, avg. samples / sec: 953.17
Iteration:   1320, Loss function: 5.872, Average Loss: 5.531, avg. samples / sec: 934.42
Iteration:   1340, Loss function: 5.863, Average Loss: 5.540, avg. samples / sec: 935.05
Iteration:   1360, Loss function: 6.032, Average Loss: 5.550, avg. samples / sec: 970.71
Iteration:   1380, Loss function: 6.192, Average Loss: 5.561, avg. samples / sec: 961.04
Iteration:   1400, Loss function: 6.202, Average Loss: 5.569, avg. samples / sec: 937.69
Iteration:   1420, Loss function: 5.977, Average Loss: 5.577, avg. samples / sec: 991.34
Iteration:   1440, Loss function: 6.517, Average Loss: 5.585, avg. samples / sec: 957.04
Iteration:   1460, Loss function: 6.035, Average Loss: 5.592, avg. samples / sec: 987.91
Iteration:   1480, Loss function: 6.039, Average Loss: 5.600, avg. samples / sec: 958.44
Iteration:   1500, Loss function: 6.003, Average Loss: 5.607, avg. samples / sec: 979.79
Iteration:   1520, Loss function: 6.087, Average Loss: 5.613, avg. samples / sec: 980.44
Iteration:   1540, Loss function: 6.116, Average Loss: 5.617, avg. samples / sec: 989.28
Iteration:   1560, Loss function: 5.523, Average Loss: 5.621, avg. samples / sec: 962.24
Iteration:   1580, Loss function: 5.571, Average Loss: 5.626, avg. samples / sec: 983.26
Iteration:   1600, Loss function: 6.192, Average Loss: 5.632, avg. samples / sec: 964.72
Iteration:   1620, Loss function: 5.713, Average Loss: 5.637, avg. samples / sec: 938.72
Iteration:   1640, Loss function: 5.868, Average Loss: 5.640, avg. samples / sec: 956.42
Iteration:   1660, Loss function: 5.971, Average Loss: 5.644, avg. samples / sec: 948.28
Iteration:   1680, Loss function: 5.722, Average Loss: 5.648, avg. samples / sec: 828.03
Iteration:   1700, Loss function: 5.439, Average Loss: 5.652, avg. samples / sec: 978.27
Iteration:   1720, Loss function: 5.552, Average Loss: 5.655, avg. samples / sec: 937.79
Iteration:   1740, Loss function: 6.032, Average Loss: 5.657, avg. samples / sec: 941.15
Iteration:   1760, Loss function: 5.486, Average Loss: 5.658, avg. samples / sec: 972.78
Iteration:   1780, Loss function: 5.750, Average Loss: 5.658, avg. samples / sec: 963.68
Iteration:   1800, Loss function: 5.596, Average Loss: 5.661, avg. samples / sec: 974.95
Iteration:   1820, Loss function: 6.048, Average Loss: 5.664, avg. samples / sec: 977.46
Iteration:   1840, Loss function: 5.986, Average Loss: 5.665, avg. samples / sec: 970.96
Iteration:   1860, Loss function: 5.754, Average Loss: 5.665, avg. samples / sec: 953.96
Iteration:   1880, Loss function: 5.846, Average Loss: 5.666, avg. samples / sec: 964.29
Iteration:   1900, Loss function: 5.882, Average Loss: 5.667, avg. samples / sec: 984.41
Iteration:   1920, Loss function: 5.710, Average Loss: 5.667, avg. samples / sec: 974.37
Iteration:   1940, Loss function: 5.887, Average Loss: 5.667, avg. samples / sec: 951.47
Iteration:   1960, Loss function: 5.645, Average Loss: 5.665, avg. samples / sec: 928.07
Iteration:   1980, Loss function: 5.777, Average Loss: 5.663, avg. samples / sec: 973.56
Iteration:   2000, Loss function: 5.651, Average Loss: 5.662, avg. samples / sec: 969.82
Iteration:   2020, Loss function: 5.740, Average Loss: 5.661, avg. samples / sec: 964.02
Iteration:   2040, Loss function: 5.651, Average Loss: 5.660, avg. samples / sec: 942.51
:::MLLOG {"namespace": "", "time_ms": 1639074058002, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074058003, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.504, Average Loss: 5.658, avg. samples / sec: 945.16
Iteration:   2080, Loss function: 5.103, Average Loss: 5.656, avg. samples / sec: 982.48
Iteration:   2100, Loss function: 5.553, Average Loss: 5.654, avg. samples / sec: 956.84
Iteration:   2120, Loss function: 5.497, Average Loss: 5.651, avg. samples / sec: 986.40
Iteration:   2140, Loss function: 5.304, Average Loss: 5.648, avg. samples / sec: 990.03
Iteration:   2160, Loss function: 5.370, Average Loss: 5.645, avg. samples / sec: 974.42
Iteration:   2180, Loss function: 5.348, Average Loss: 5.641, avg. samples / sec: 986.48
Iteration:   2200, Loss function: 5.496, Average Loss: 5.637, avg. samples / sec: 961.30
Iteration:   2220, Loss function: 5.612, Average Loss: 5.635, avg. samples / sec: 888.38
Iteration:   2240, Loss function: 5.385, Average Loss: 5.633, avg. samples / sec: 941.22
Iteration:   2260, Loss function: 5.353, Average Loss: 5.630, avg. samples / sec: 947.56
Iteration:   2280, Loss function: 5.197, Average Loss: 5.626, avg. samples / sec: 926.04
Iteration:   2300, Loss function: 5.152, Average Loss: 5.623, avg. samples / sec: 936.89
Iteration:   2320, Loss function: 5.278, Average Loss: 5.621, avg. samples / sec: 985.05
Iteration:   2340, Loss function: 5.562, Average Loss: 5.617, avg. samples / sec: 946.91
Iteration:   2360, Loss function: 5.201, Average Loss: 5.612, avg. samples / sec: 910.87
Iteration:   2380, Loss function: 5.390, Average Loss: 5.608, avg. samples / sec: 937.74
Iteration:   2400, Loss function: 5.482, Average Loss: 5.604, avg. samples / sec: 965.74
Iteration:   2420, Loss function: 5.422, Average Loss: 5.601, avg. samples / sec: 944.35
Iteration:   2440, Loss function: 5.382, Average Loss: 5.598, avg. samples / sec: 946.65
Iteration:   2460, Loss function: 5.256, Average Loss: 5.593, avg. samples / sec: 993.27
Iteration:   2480, Loss function: 5.467, Average Loss: 5.590, avg. samples / sec: 974.78
Iteration:   2500, Loss function: 5.233, Average Loss: 5.586, avg. samples / sec: 977.82
Iteration:   2520, Loss function: 5.257, Average Loss: 5.580, avg. samples / sec: 962.86
Iteration:   2540, Loss function: 5.336, Average Loss: 5.578, avg. samples / sec: 981.50
Iteration:   2560, Loss function: 5.302, Average Loss: 5.575, avg. samples / sec: 974.30
Iteration:   2580, Loss function: 5.249, Average Loss: 5.571, avg. samples / sec: 962.90
Iteration:   2600, Loss function: 5.432, Average Loss: 5.568, avg. samples / sec: 974.57
Iteration:   2620, Loss function: 5.478, Average Loss: 5.563, avg. samples / sec: 906.87
Iteration:   2640, Loss function: 5.322, Average Loss: 5.560, avg. samples / sec: 969.67
Iteration:   2660, Loss function: 5.312, Average Loss: 5.556, avg. samples / sec: 892.23
Iteration:   2680, Loss function: 5.080, Average Loss: 5.552, avg. samples / sec: 970.34
Iteration:   2700, Loss function: 5.149, Average Loss: 5.547, avg. samples / sec: 984.31
Iteration:   2720, Loss function: 5.301, Average Loss: 5.542, avg. samples / sec: 978.19
Iteration:   2740, Loss function: 4.951, Average Loss: 5.537, avg. samples / sec: 988.91
Iteration:   2760, Loss function: 4.946, Average Loss: 5.531, avg. samples / sec: 982.04
Iteration:   2780, Loss function: 5.411, Average Loss: 5.527, avg. samples / sec: 967.97
Iteration:   2800, Loss function: 5.151, Average Loss: 5.522, avg. samples / sec: 943.47
Iteration:   2820, Loss function: 5.388, Average Loss: 5.517, avg. samples / sec: 939.99
Iteration:   2840, Loss function: 5.146, Average Loss: 5.512, avg. samples / sec: 991.55
Iteration:   2860, Loss function: 4.910, Average Loss: 5.507, avg. samples / sec: 983.02
Iteration:   2880, Loss function: 5.242, Average Loss: 5.502, avg. samples / sec: 883.55
Iteration:   2900, Loss function: 5.132, Average Loss: 5.497, avg. samples / sec: 919.42
Iteration:   2920, Loss function: 5.275, Average Loss: 5.491, avg. samples / sec: 927.15
Iteration:   2940, Loss function: 5.017, Average Loss: 5.486, avg. samples / sec: 964.67
Iteration:   2960, Loss function: 5.400, Average Loss: 5.481, avg. samples / sec: 924.25
Iteration:   2980, Loss function: 5.225, Average Loss: 5.478, avg. samples / sec: 958.62
Iteration:   3000, Loss function: 5.270, Average Loss: 5.472, avg. samples / sec: 995.28
Iteration:   3020, Loss function: 5.313, Average Loss: 5.467, avg. samples / sec: 972.85
Iteration:   3040, Loss function: 5.188, Average Loss: 5.462, avg. samples / sec: 950.06
Iteration:   3060, Loss function: 5.071, Average Loss: 5.456, avg. samples / sec: 972.67
Iteration:   3080, Loss function: 4.902, Average Loss: 5.450, avg. samples / sec: 933.19
:::MLLOG {"namespace": "", "time_ms": 1639074180561, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074180563, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.135, Average Loss: 5.444, avg. samples / sec: 938.21
Iteration:   3120, Loss function: 4.873, Average Loss: 5.437, avg. samples / sec: 955.54
Iteration:   3140, Loss function: 5.080, Average Loss: 5.433, avg. samples / sec: 978.46
Iteration:   3160, Loss function: 5.761, Average Loss: 5.428, avg. samples / sec: 955.58
Iteration:   3180, Loss function: 4.970, Average Loss: 5.422, avg. samples / sec: 980.59
Iteration:   3200, Loss function: 5.121, Average Loss: 5.417, avg. samples / sec: 956.47
Iteration:   3220, Loss function: 5.109, Average Loss: 5.411, avg. samples / sec: 978.65
Iteration:   3240, Loss function: 5.250, Average Loss: 5.406, avg. samples / sec: 948.47
Iteration:   3260, Loss function: 5.069, Average Loss: 5.401, avg. samples / sec: 936.94
Iteration:   3280, Loss function: 4.927, Average Loss: 5.394, avg. samples / sec: 910.24
Iteration:   3300, Loss function: 4.873, Average Loss: 5.390, avg. samples / sec: 957.92
Iteration:   3320, Loss function: 4.823, Average Loss: 5.384, avg. samples / sec: 972.22
Iteration:   3340, Loss function: 5.166, Average Loss: 5.380, avg. samples / sec: 922.28
Iteration:   3360, Loss function: 5.152, Average Loss: 5.373, avg. samples / sec: 977.08
Iteration:   3380, Loss function: 5.207, Average Loss: 5.366, avg. samples / sec: 936.70
Iteration:   3400, Loss function: 4.913, Average Loss: 5.361, avg. samples / sec: 961.08
Iteration:   3420, Loss function: 5.049, Average Loss: 5.356, avg. samples / sec: 973.40
Iteration:   3440, Loss function: 4.871, Average Loss: 5.352, avg. samples / sec: 985.12
Iteration:   3460, Loss function: 5.090, Average Loss: 5.346, avg. samples / sec: 956.61
Iteration:   3480, Loss function: 5.165, Average Loss: 5.341, avg. samples / sec: 910.25
Iteration:   3500, Loss function: 5.062, Average Loss: 5.336, avg. samples / sec: 951.64
Iteration:   3520, Loss function: 5.013, Average Loss: 5.333, avg. samples / sec: 953.12
Iteration:   3540, Loss function: 5.049, Average Loss: 5.327, avg. samples / sec: 922.86
Iteration:   3560, Loss function: 5.003, Average Loss: 5.323, avg. samples / sec: 977.29
Iteration:   3580, Loss function: 4.965, Average Loss: 5.317, avg. samples / sec: 983.03
Iteration:   3600, Loss function: 5.251, Average Loss: 5.312, avg. samples / sec: 971.11
Iteration:   3620, Loss function: 4.960, Average Loss: 5.308, avg. samples / sec: 972.40
Iteration:   3640, Loss function: 4.833, Average Loss: 5.302, avg. samples / sec: 939.55
Iteration:   3660, Loss function: 5.095, Average Loss: 5.297, avg. samples / sec: 980.68
Iteration:   3680, Loss function: 5.080, Average Loss: 5.292, avg. samples / sec: 959.28
Iteration:   3700, Loss function: 5.048, Average Loss: 5.287, avg. samples / sec: 943.90
Iteration:   3720, Loss function: 4.968, Average Loss: 5.280, avg. samples / sec: 989.81
Iteration:   3740, Loss function: 5.070, Average Loss: 5.277, avg. samples / sec: 972.66
Iteration:   3760, Loss function: 5.061, Average Loss: 5.274, avg. samples / sec: 969.54
Iteration:   3780, Loss function: 4.887, Average Loss: 5.269, avg. samples / sec: 967.86
Iteration:   3800, Loss function: 5.047, Average Loss: 5.265, avg. samples / sec: 949.93
Iteration:   3820, Loss function: 5.467, Average Loss: 5.261, avg. samples / sec: 914.84
Iteration:   3840, Loss function: 4.911, Average Loss: 5.255, avg. samples / sec: 947.80
Iteration:   3860, Loss function: 4.980, Average Loss: 5.250, avg. samples / sec: 907.31
Iteration:   3880, Loss function: 4.918, Average Loss: 5.245, avg. samples / sec: 973.37
Iteration:   3900, Loss function: 5.103, Average Loss: 5.240, avg. samples / sec: 916.44
Iteration:   3920, Loss function: 5.088, Average Loss: 5.234, avg. samples / sec: 993.42
Iteration:   3940, Loss function: 5.023, Average Loss: 5.229, avg. samples / sec: 919.45
Iteration:   3960, Loss function: 4.715, Average Loss: 5.224, avg. samples / sec: 919.81
Iteration:   3980, Loss function: 4.948, Average Loss: 5.220, avg. samples / sec: 984.44
Iteration:   4000, Loss function: 5.144, Average Loss: 5.216, avg. samples / sec: 994.32
Iteration:   4020, Loss function: 4.917, Average Loss: 5.210, avg. samples / sec: 988.09
Iteration:   4040, Loss function: 5.108, Average Loss: 5.207, avg. samples / sec: 985.10
Iteration:   4060, Loss function: 5.087, Average Loss: 5.203, avg. samples / sec: 982.53
Iteration:   4080, Loss function: 5.124, Average Loss: 5.198, avg. samples / sec: 989.80
Iteration:   4100, Loss function: 5.046, Average Loss: 5.194, avg. samples / sec: 983.37
:::MLLOG {"namespace": "", "time_ms": 1639074302970, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074302972, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.178, Average Loss: 5.190, avg. samples / sec: 973.38
Iteration:   4140, Loss function: 5.028, Average Loss: 5.184, avg. samples / sec: 887.63
Iteration:   4160, Loss function: 4.977, Average Loss: 5.178, avg. samples / sec: 952.64
Iteration:   4180, Loss function: 4.917, Average Loss: 5.172, avg. samples / sec: 966.82
Iteration:   4200, Loss function: 4.771, Average Loss: 5.167, avg. samples / sec: 934.81
Iteration:   4220, Loss function: 4.745, Average Loss: 5.163, avg. samples / sec: 850.39
Iteration:   4240, Loss function: 4.902, Average Loss: 5.158, avg. samples / sec: 916.30
Iteration:   4260, Loss function: 5.165, Average Loss: 5.153, avg. samples / sec: 869.70
Iteration:   4280, Loss function: 5.193, Average Loss: 5.147, avg. samples / sec: 944.50
Iteration:   4300, Loss function: 4.821, Average Loss: 5.141, avg. samples / sec: 910.49
Iteration:   4320, Loss function: 4.747, Average Loss: 5.136, avg. samples / sec: 961.05
Iteration:   4340, Loss function: 4.652, Average Loss: 5.130, avg. samples / sec: 981.55
Iteration:   4360, Loss function: 4.907, Average Loss: 5.126, avg. samples / sec: 944.13
Iteration:   4380, Loss function: 5.040, Average Loss: 5.121, avg. samples / sec: 920.49
Iteration:   4400, Loss function: 4.939, Average Loss: 5.116, avg. samples / sec: 973.63
Iteration:   4420, Loss function: 4.918, Average Loss: 5.111, avg. samples / sec: 872.14
Iteration:   4440, Loss function: 4.910, Average Loss: 5.106, avg. samples / sec: 887.76
Iteration:   4460, Loss function: 4.978, Average Loss: 5.101, avg. samples / sec: 971.05
Iteration:   4480, Loss function: 4.918, Average Loss: 5.097, avg. samples / sec: 973.41
Iteration:   4500, Loss function: 4.993, Average Loss: 5.094, avg. samples / sec: 987.79
Iteration:   4520, Loss function: 4.966, Average Loss: 5.089, avg. samples / sec: 978.10
Iteration:   4540, Loss function: 4.999, Average Loss: 5.085, avg. samples / sec: 967.94
Iteration:   4560, Loss function: 4.750, Average Loss: 5.082, avg. samples / sec: 975.28
Iteration:   4580, Loss function: 4.750, Average Loss: 5.079, avg. samples / sec: 977.45
Iteration:   4600, Loss function: 4.735, Average Loss: 5.075, avg. samples / sec: 932.88
Iteration:   4620, Loss function: 4.925, Average Loss: 5.071, avg. samples / sec: 928.55
Iteration:   4640, Loss function: 4.543, Average Loss: 5.065, avg. samples / sec: 966.41
Iteration:   4660, Loss function: 4.888, Average Loss: 5.061, avg. samples / sec: 920.01
Iteration:   4680, Loss function: 5.348, Average Loss: 5.057, avg. samples / sec: 943.32
Iteration:   4700, Loss function: 4.674, Average Loss: 5.053, avg. samples / sec: 985.63
Iteration:   4720, Loss function: 4.910, Average Loss: 5.048, avg. samples / sec: 989.39
Iteration:   4740, Loss function: 4.723, Average Loss: 5.044, avg. samples / sec: 980.12
Iteration:   4760, Loss function: 4.691, Average Loss: 5.041, avg. samples / sec: 917.35
Iteration:   4780, Loss function: 4.984, Average Loss: 5.037, avg. samples / sec: 912.43
Iteration:   4800, Loss function: 4.904, Average Loss: 5.035, avg. samples / sec: 963.73
Iteration:   4820, Loss function: 4.705, Average Loss: 5.031, avg. samples / sec: 891.54
Iteration:   4840, Loss function: 5.024, Average Loss: 5.028, avg. samples / sec: 954.02
Iteration:   4860, Loss function: 4.746, Average Loss: 5.023, avg. samples / sec: 974.38
Iteration:   4880, Loss function: 4.998, Average Loss: 5.020, avg. samples / sec: 970.87
Iteration:   4900, Loss function: 4.617, Average Loss: 5.016, avg. samples / sec: 963.70
Iteration:   4920, Loss function: 4.921, Average Loss: 5.013, avg. samples / sec: 931.89
Iteration:   4940, Loss function: 4.869, Average Loss: 5.009, avg. samples / sec: 914.65
Iteration:   4960, Loss function: 4.721, Average Loss: 5.005, avg. samples / sec: 914.19
Iteration:   4980, Loss function: 4.637, Average Loss: 5.001, avg. samples / sec: 979.59
Iteration:   5000, Loss function: 4.866, Average Loss: 4.997, avg. samples / sec: 957.41
Iteration:   5020, Loss function: 5.160, Average Loss: 4.993, avg. samples / sec: 940.38
Iteration:   5040, Loss function: 4.894, Average Loss: 4.990, avg. samples / sec: 928.91
Iteration:   5060, Loss function: 4.758, Average Loss: 4.987, avg. samples / sec: 956.75
Iteration:   5080, Loss function: 4.495, Average Loss: 4.983, avg. samples / sec: 936.79
Iteration:   5100, Loss function: 4.895, Average Loss: 4.980, avg. samples / sec: 985.47
Iteration:   5120, Loss function: 4.586, Average Loss: 4.977, avg. samples / sec: 985.85
Iteration:   5140, Loss function: 4.725, Average Loss: 4.973, avg. samples / sec: 995.59
:::MLLOG {"namespace": "", "time_ms": 1639074427186, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.62 s
:::MLLOG {"namespace": "", "time_ms": 1639074457870, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074457943, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457945, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.776, Average Loss: 4.969, avg. samples / sec: 68.79
Iteration:   5180, Loss function: 4.840, Average Loss: 4.964, avg. samples / sec: 996.13
DONE (t=3.99s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10912
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22180
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09882
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19742
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14077
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20790
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10912 AP goal: 0.10000
Iteration:   5200, Loss function: 4.721, Average Loss: 4.960, avg. samples / sec: 1012.73
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1091153392110432, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464723, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:27:45 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:27:45 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639073778435, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639073778569, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3589997601, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3589997601
:::MLLOG {"namespace": "", "time_ms": 1639073780533, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639073780533, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639073780538, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639073780538, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639073780539, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639073804528, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639073804529, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639073806287, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639073806288, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639073806685, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639073806688, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639073806695, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.865, Average Loss: 0.023, avg. samples / sec: 4.41
Iteration:     20, Loss function: 21.037, Average Loss: 0.456, avg. samples / sec: 753.82
Iteration:     40, Loss function: 20.841, Average Loss: 0.858, avg. samples / sec: 865.10
Iteration:     60, Loss function: 20.279, Average Loss: 1.247, avg. samples / sec: 900.68
Iteration:     80, Loss function: 19.811, Average Loss: 1.619, avg. samples / sec: 919.13
Iteration:    100, Loss function: 14.244, Average Loss: 1.933, avg. samples / sec: 696.18
Iteration:    120, Loss function: 11.442, Average Loss: 2.126, avg. samples / sec: 935.45
Iteration:    140, Loss function: 10.003, Average Loss: 2.292, avg. samples / sec: 827.58
Iteration:    160, Loss function: 9.284, Average Loss: 2.435, avg. samples / sec: 876.95
Iteration:    180, Loss function: 9.135, Average Loss: 2.567, avg. samples / sec: 921.74
Iteration:    200, Loss function: 8.704, Average Loss: 2.694, avg. samples / sec: 856.66
Iteration:    220, Loss function: 8.743, Average Loss: 2.817, avg. samples / sec: 903.56
Iteration:    240, Loss function: 8.821, Average Loss: 2.938, avg. samples / sec: 897.98
Iteration:    260, Loss function: 8.831, Average Loss: 3.054, avg. samples / sec: 851.39
Iteration:    280, Loss function: 8.579, Average Loss: 3.165, avg. samples / sec: 875.35
Iteration:    300, Loss function: 8.393, Average Loss: 3.269, avg. samples / sec: 898.68
Iteration:    320, Loss function: 8.383, Average Loss: 3.373, avg. samples / sec: 934.52
Iteration:    340, Loss function: 8.310, Average Loss: 3.472, avg. samples / sec: 946.42
Iteration:    360, Loss function: 8.021, Average Loss: 3.566, avg. samples / sec: 959.84
Iteration:    380, Loss function: 8.191, Average Loss: 3.657, avg. samples / sec: 955.07
Iteration:    400, Loss function: 8.134, Average Loss: 3.744, avg. samples / sec: 958.52
Iteration:    420, Loss function: 7.654, Average Loss: 3.828, avg. samples / sec: 949.07
Iteration:    440, Loss function: 7.964, Average Loss: 3.908, avg. samples / sec: 956.29
Iteration:    460, Loss function: 7.805, Average Loss: 3.986, avg. samples / sec: 971.53
Iteration:    480, Loss function: 7.565, Average Loss: 4.060, avg. samples / sec: 954.84
Iteration:    500, Loss function: 7.659, Average Loss: 4.132, avg. samples / sec: 932.82
Iteration:    520, Loss function: 7.556, Average Loss: 4.200, avg. samples / sec: 884.05
Iteration:    540, Loss function: 7.614, Average Loss: 4.268, avg. samples / sec: 951.80
Iteration:    560, Loss function: 7.296, Average Loss: 4.331, avg. samples / sec: 977.95
Iteration:    580, Loss function: 7.181, Average Loss: 4.394, avg. samples / sec: 916.94
Iteration:    600, Loss function: 7.417, Average Loss: 4.453, avg. samples / sec: 934.22
Iteration:    620, Loss function: 7.136, Average Loss: 4.510, avg. samples / sec: 889.03
Iteration:    640, Loss function: 6.976, Average Loss: 4.565, avg. samples / sec: 935.83
Iteration:    660, Loss function: 7.246, Average Loss: 4.617, avg. samples / sec: 920.74
Iteration:    680, Loss function: 7.239, Average Loss: 4.668, avg. samples / sec: 983.02
Iteration:    700, Loss function: 6.910, Average Loss: 4.717, avg. samples / sec: 977.96
Iteration:    720, Loss function: 7.056, Average Loss: 4.765, avg. samples / sec: 953.13
Iteration:    740, Loss function: 6.900, Average Loss: 4.810, avg. samples / sec: 872.71
Iteration:    760, Loss function: 6.983, Average Loss: 4.854, avg. samples / sec: 963.56
Iteration:    780, Loss function: 6.778, Average Loss: 4.896, avg. samples / sec: 937.05
Iteration:    800, Loss function: 6.979, Average Loss: 4.935, avg. samples / sec: 874.59
Iteration:    820, Loss function: 6.786, Average Loss: 4.974, avg. samples / sec: 941.55
Iteration:    840, Loss function: 6.776, Average Loss: 5.011, avg. samples / sec: 926.95
Iteration:    860, Loss function: 6.935, Average Loss: 5.046, avg. samples / sec: 936.94
Iteration:    880, Loss function: 6.591, Average Loss: 5.079, avg. samples / sec: 955.83
Iteration:    900, Loss function: 6.925, Average Loss: 5.110, avg. samples / sec: 966.19
Iteration:    920, Loss function: 6.741, Average Loss: 5.140, avg. samples / sec: 924.80
Iteration:    940, Loss function: 6.913, Average Loss: 5.169, avg. samples / sec: 974.93
Iteration:    960, Loss function: 6.384, Average Loss: 5.198, avg. samples / sec: 985.62
Iteration:    980, Loss function: 6.534, Average Loss: 5.226, avg. samples / sec: 962.02
Iteration:   1000, Loss function: 6.567, Average Loss: 5.252, avg. samples / sec: 963.16
Iteration:   1020, Loss function: 6.405, Average Loss: 5.276, avg. samples / sec: 990.42
:::MLLOG {"namespace": "", "time_ms": 1639073934422, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639073934424, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.567, Average Loss: 5.300, avg. samples / sec: 981.43
Iteration:   1060, Loss function: 6.491, Average Loss: 5.324, avg. samples / sec: 893.24
Iteration:   1080, Loss function: 6.219, Average Loss: 5.346, avg. samples / sec: 960.50
Iteration:   1100, Loss function: 6.196, Average Loss: 5.365, avg. samples / sec: 885.04
Iteration:   1120, Loss function: 6.243, Average Loss: 5.386, avg. samples / sec: 854.48
Iteration:   1140, Loss function: 6.405, Average Loss: 5.405, avg. samples / sec: 887.68
Iteration:   1160, Loss function: 6.157, Average Loss: 5.422, avg. samples / sec: 948.85
Iteration:   1180, Loss function: 6.227, Average Loss: 5.439, avg. samples / sec: 909.73
Iteration:   1200, Loss function: 6.334, Average Loss: 5.455, avg. samples / sec: 896.74
Iteration:   1220, Loss function: 6.210, Average Loss: 5.470, avg. samples / sec: 992.33
Iteration:   1240, Loss function: 5.980, Average Loss: 5.483, avg. samples / sec: 984.13
Iteration:   1260, Loss function: 5.938, Average Loss: 5.495, avg. samples / sec: 960.05
Iteration:   1280, Loss function: 5.818, Average Loss: 5.507, avg. samples / sec: 922.82
Iteration:   1300, Loss function: 6.171, Average Loss: 5.520, avg. samples / sec: 953.17
Iteration:   1320, Loss function: 5.872, Average Loss: 5.531, avg. samples / sec: 934.42
Iteration:   1340, Loss function: 5.863, Average Loss: 5.540, avg. samples / sec: 935.05
Iteration:   1360, Loss function: 6.032, Average Loss: 5.550, avg. samples / sec: 970.71
Iteration:   1380, Loss function: 6.192, Average Loss: 5.561, avg. samples / sec: 961.04
Iteration:   1400, Loss function: 6.202, Average Loss: 5.569, avg. samples / sec: 937.69
Iteration:   1420, Loss function: 5.977, Average Loss: 5.577, avg. samples / sec: 991.34
Iteration:   1440, Loss function: 6.517, Average Loss: 5.585, avg. samples / sec: 957.04
Iteration:   1460, Loss function: 6.035, Average Loss: 5.592, avg. samples / sec: 987.91
Iteration:   1480, Loss function: 6.039, Average Loss: 5.600, avg. samples / sec: 958.44
Iteration:   1500, Loss function: 6.003, Average Loss: 5.607, avg. samples / sec: 979.79
Iteration:   1520, Loss function: 6.087, Average Loss: 5.613, avg. samples / sec: 980.44
Iteration:   1540, Loss function: 6.116, Average Loss: 5.617, avg. samples / sec: 989.28
Iteration:   1560, Loss function: 5.523, Average Loss: 5.621, avg. samples / sec: 962.24
Iteration:   1580, Loss function: 5.571, Average Loss: 5.626, avg. samples / sec: 983.26
Iteration:   1600, Loss function: 6.192, Average Loss: 5.632, avg. samples / sec: 964.72
Iteration:   1620, Loss function: 5.713, Average Loss: 5.637, avg. samples / sec: 938.72
Iteration:   1640, Loss function: 5.868, Average Loss: 5.640, avg. samples / sec: 956.42
Iteration:   1660, Loss function: 5.971, Average Loss: 5.644, avg. samples / sec: 948.28
Iteration:   1680, Loss function: 5.722, Average Loss: 5.648, avg. samples / sec: 828.03
Iteration:   1700, Loss function: 5.439, Average Loss: 5.652, avg. samples / sec: 978.27
Iteration:   1720, Loss function: 5.552, Average Loss: 5.655, avg. samples / sec: 937.79
Iteration:   1740, Loss function: 6.032, Average Loss: 5.657, avg. samples / sec: 941.15
Iteration:   1760, Loss function: 5.486, Average Loss: 5.658, avg. samples / sec: 972.78
Iteration:   1780, Loss function: 5.750, Average Loss: 5.658, avg. samples / sec: 963.68
Iteration:   1800, Loss function: 5.596, Average Loss: 5.661, avg. samples / sec: 974.95
Iteration:   1820, Loss function: 6.048, Average Loss: 5.664, avg. samples / sec: 977.46
Iteration:   1840, Loss function: 5.986, Average Loss: 5.665, avg. samples / sec: 970.96
Iteration:   1860, Loss function: 5.754, Average Loss: 5.665, avg. samples / sec: 953.96
Iteration:   1880, Loss function: 5.846, Average Loss: 5.666, avg. samples / sec: 964.29
Iteration:   1900, Loss function: 5.882, Average Loss: 5.667, avg. samples / sec: 984.41
Iteration:   1920, Loss function: 5.710, Average Loss: 5.667, avg. samples / sec: 974.37
Iteration:   1940, Loss function: 5.887, Average Loss: 5.667, avg. samples / sec: 951.47
Iteration:   1960, Loss function: 5.645, Average Loss: 5.665, avg. samples / sec: 928.07
Iteration:   1980, Loss function: 5.777, Average Loss: 5.663, avg. samples / sec: 973.56
Iteration:   2000, Loss function: 5.651, Average Loss: 5.662, avg. samples / sec: 969.82
Iteration:   2020, Loss function: 5.740, Average Loss: 5.661, avg. samples / sec: 964.02
Iteration:   2040, Loss function: 5.651, Average Loss: 5.660, avg. samples / sec: 942.51
:::MLLOG {"namespace": "", "time_ms": 1639074058002, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639074058003, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.504, Average Loss: 5.658, avg. samples / sec: 945.16
Iteration:   2080, Loss function: 5.103, Average Loss: 5.656, avg. samples / sec: 982.48
Iteration:   2100, Loss function: 5.553, Average Loss: 5.654, avg. samples / sec: 956.84
Iteration:   2120, Loss function: 5.497, Average Loss: 5.651, avg. samples / sec: 986.40
Iteration:   2140, Loss function: 5.304, Average Loss: 5.648, avg. samples / sec: 990.03
Iteration:   2160, Loss function: 5.370, Average Loss: 5.645, avg. samples / sec: 974.42
Iteration:   2180, Loss function: 5.348, Average Loss: 5.641, avg. samples / sec: 986.48
Iteration:   2200, Loss function: 5.496, Average Loss: 5.637, avg. samples / sec: 961.30
Iteration:   2220, Loss function: 5.612, Average Loss: 5.635, avg. samples / sec: 888.38
Iteration:   2240, Loss function: 5.385, Average Loss: 5.633, avg. samples / sec: 941.22
Iteration:   2260, Loss function: 5.353, Average Loss: 5.630, avg. samples / sec: 947.56
Iteration:   2280, Loss function: 5.197, Average Loss: 5.626, avg. samples / sec: 926.04
Iteration:   2300, Loss function: 5.152, Average Loss: 5.623, avg. samples / sec: 936.89
Iteration:   2320, Loss function: 5.278, Average Loss: 5.621, avg. samples / sec: 985.05
Iteration:   2340, Loss function: 5.562, Average Loss: 5.617, avg. samples / sec: 946.91
Iteration:   2360, Loss function: 5.201, Average Loss: 5.612, avg. samples / sec: 910.87
Iteration:   2380, Loss function: 5.390, Average Loss: 5.608, avg. samples / sec: 937.74
Iteration:   2400, Loss function: 5.482, Average Loss: 5.604, avg. samples / sec: 965.74
Iteration:   2420, Loss function: 5.422, Average Loss: 5.601, avg. samples / sec: 944.35
Iteration:   2440, Loss function: 5.382, Average Loss: 5.598, avg. samples / sec: 946.65
Iteration:   2460, Loss function: 5.256, Average Loss: 5.593, avg. samples / sec: 993.27
Iteration:   2480, Loss function: 5.467, Average Loss: 5.590, avg. samples / sec: 974.78
Iteration:   2500, Loss function: 5.233, Average Loss: 5.586, avg. samples / sec: 977.82
Iteration:   2520, Loss function: 5.257, Average Loss: 5.580, avg. samples / sec: 962.86
Iteration:   2540, Loss function: 5.336, Average Loss: 5.578, avg. samples / sec: 981.50
Iteration:   2560, Loss function: 5.302, Average Loss: 5.575, avg. samples / sec: 974.30
Iteration:   2580, Loss function: 5.249, Average Loss: 5.571, avg. samples / sec: 962.90
Iteration:   2600, Loss function: 5.432, Average Loss: 5.568, avg. samples / sec: 974.57
Iteration:   2620, Loss function: 5.478, Average Loss: 5.563, avg. samples / sec: 906.87
Iteration:   2640, Loss function: 5.322, Average Loss: 5.560, avg. samples / sec: 969.67
Iteration:   2660, Loss function: 5.312, Average Loss: 5.556, avg. samples / sec: 892.23
Iteration:   2680, Loss function: 5.080, Average Loss: 5.552, avg. samples / sec: 970.34
Iteration:   2700, Loss function: 5.149, Average Loss: 5.547, avg. samples / sec: 984.31
Iteration:   2720, Loss function: 5.301, Average Loss: 5.542, avg. samples / sec: 978.19
Iteration:   2740, Loss function: 4.951, Average Loss: 5.537, avg. samples / sec: 988.91
Iteration:   2760, Loss function: 4.946, Average Loss: 5.531, avg. samples / sec: 982.04
Iteration:   2780, Loss function: 5.411, Average Loss: 5.527, avg. samples / sec: 967.97
Iteration:   2800, Loss function: 5.151, Average Loss: 5.522, avg. samples / sec: 943.47
Iteration:   2820, Loss function: 5.388, Average Loss: 5.517, avg. samples / sec: 939.99
Iteration:   2840, Loss function: 5.146, Average Loss: 5.512, avg. samples / sec: 991.55
Iteration:   2860, Loss function: 4.910, Average Loss: 5.507, avg. samples / sec: 983.02
Iteration:   2880, Loss function: 5.242, Average Loss: 5.502, avg. samples / sec: 883.55
Iteration:   2900, Loss function: 5.132, Average Loss: 5.497, avg. samples / sec: 919.42
Iteration:   2920, Loss function: 5.275, Average Loss: 5.491, avg. samples / sec: 927.15
Iteration:   2940, Loss function: 5.017, Average Loss: 5.486, avg. samples / sec: 964.67
Iteration:   2960, Loss function: 5.400, Average Loss: 5.481, avg. samples / sec: 924.25
Iteration:   2980, Loss function: 5.225, Average Loss: 5.478, avg. samples / sec: 958.62
Iteration:   3000, Loss function: 5.270, Average Loss: 5.472, avg. samples / sec: 995.28
Iteration:   3020, Loss function: 5.313, Average Loss: 5.467, avg. samples / sec: 972.85
Iteration:   3040, Loss function: 5.188, Average Loss: 5.462, avg. samples / sec: 950.06
Iteration:   3060, Loss function: 5.071, Average Loss: 5.456, avg. samples / sec: 972.67
Iteration:   3080, Loss function: 4.902, Average Loss: 5.450, avg. samples / sec: 933.19
:::MLLOG {"namespace": "", "time_ms": 1639074180561, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639074180563, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.135, Average Loss: 5.444, avg. samples / sec: 938.21
Iteration:   3120, Loss function: 4.873, Average Loss: 5.437, avg. samples / sec: 955.54
Iteration:   3140, Loss function: 5.080, Average Loss: 5.433, avg. samples / sec: 978.46
Iteration:   3160, Loss function: 5.761, Average Loss: 5.428, avg. samples / sec: 955.58
Iteration:   3180, Loss function: 4.970, Average Loss: 5.422, avg. samples / sec: 980.59
Iteration:   3200, Loss function: 5.121, Average Loss: 5.417, avg. samples / sec: 956.47
Iteration:   3220, Loss function: 5.109, Average Loss: 5.411, avg. samples / sec: 978.65
Iteration:   3240, Loss function: 5.250, Average Loss: 5.406, avg. samples / sec: 948.47
Iteration:   3260, Loss function: 5.069, Average Loss: 5.401, avg. samples / sec: 936.94
Iteration:   3280, Loss function: 4.927, Average Loss: 5.394, avg. samples / sec: 910.24
Iteration:   3300, Loss function: 4.873, Average Loss: 5.390, avg. samples / sec: 957.92
Iteration:   3320, Loss function: 4.823, Average Loss: 5.384, avg. samples / sec: 972.22
Iteration:   3340, Loss function: 5.166, Average Loss: 5.380, avg. samples / sec: 922.28
Iteration:   3360, Loss function: 5.152, Average Loss: 5.373, avg. samples / sec: 977.08
Iteration:   3380, Loss function: 5.207, Average Loss: 5.366, avg. samples / sec: 936.70
Iteration:   3400, Loss function: 4.913, Average Loss: 5.361, avg. samples / sec: 961.08
Iteration:   3420, Loss function: 5.049, Average Loss: 5.356, avg. samples / sec: 973.40
Iteration:   3440, Loss function: 4.871, Average Loss: 5.352, avg. samples / sec: 985.12
Iteration:   3460, Loss function: 5.090, Average Loss: 5.346, avg. samples / sec: 956.61
Iteration:   3480, Loss function: 5.165, Average Loss: 5.341, avg. samples / sec: 910.25
Iteration:   3500, Loss function: 5.062, Average Loss: 5.336, avg. samples / sec: 951.64
Iteration:   3520, Loss function: 5.013, Average Loss: 5.333, avg. samples / sec: 953.12
Iteration:   3540, Loss function: 5.049, Average Loss: 5.327, avg. samples / sec: 922.86
Iteration:   3560, Loss function: 5.003, Average Loss: 5.323, avg. samples / sec: 977.29
Iteration:   3580, Loss function: 4.965, Average Loss: 5.317, avg. samples / sec: 983.03
Iteration:   3600, Loss function: 5.251, Average Loss: 5.312, avg. samples / sec: 971.11
Iteration:   3620, Loss function: 4.960, Average Loss: 5.308, avg. samples / sec: 972.40
Iteration:   3640, Loss function: 4.833, Average Loss: 5.302, avg. samples / sec: 939.55
Iteration:   3660, Loss function: 5.095, Average Loss: 5.297, avg. samples / sec: 980.68
Iteration:   3680, Loss function: 5.080, Average Loss: 5.292, avg. samples / sec: 959.28
Iteration:   3700, Loss function: 5.048, Average Loss: 5.287, avg. samples / sec: 943.90
Iteration:   3720, Loss function: 4.968, Average Loss: 5.280, avg. samples / sec: 989.81
Iteration:   3740, Loss function: 5.070, Average Loss: 5.277, avg. samples / sec: 972.66
Iteration:   3760, Loss function: 5.061, Average Loss: 5.274, avg. samples / sec: 969.54
Iteration:   3780, Loss function: 4.887, Average Loss: 5.269, avg. samples / sec: 967.86
Iteration:   3800, Loss function: 5.047, Average Loss: 5.265, avg. samples / sec: 949.93
Iteration:   3820, Loss function: 5.467, Average Loss: 5.261, avg. samples / sec: 914.84
Iteration:   3840, Loss function: 4.911, Average Loss: 5.255, avg. samples / sec: 947.80
Iteration:   3860, Loss function: 4.980, Average Loss: 5.250, avg. samples / sec: 907.31
Iteration:   3880, Loss function: 4.918, Average Loss: 5.245, avg. samples / sec: 973.37
Iteration:   3900, Loss function: 5.103, Average Loss: 5.240, avg. samples / sec: 916.44
Iteration:   3920, Loss function: 5.088, Average Loss: 5.234, avg. samples / sec: 993.42
Iteration:   3940, Loss function: 5.023, Average Loss: 5.229, avg. samples / sec: 919.45
Iteration:   3960, Loss function: 4.715, Average Loss: 5.224, avg. samples / sec: 919.81
Iteration:   3980, Loss function: 4.948, Average Loss: 5.220, avg. samples / sec: 984.44
Iteration:   4000, Loss function: 5.144, Average Loss: 5.216, avg. samples / sec: 994.32
Iteration:   4020, Loss function: 4.917, Average Loss: 5.210, avg. samples / sec: 988.09
Iteration:   4040, Loss function: 5.108, Average Loss: 5.207, avg. samples / sec: 985.10
Iteration:   4060, Loss function: 5.087, Average Loss: 5.203, avg. samples / sec: 982.53
Iteration:   4080, Loss function: 5.124, Average Loss: 5.198, avg. samples / sec: 989.80
Iteration:   4100, Loss function: 5.046, Average Loss: 5.194, avg. samples / sec: 983.37
:::MLLOG {"namespace": "", "time_ms": 1639074302970, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639074302972, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.178, Average Loss: 5.190, avg. samples / sec: 973.38
Iteration:   4140, Loss function: 5.028, Average Loss: 5.184, avg. samples / sec: 887.63
Iteration:   4160, Loss function: 4.977, Average Loss: 5.178, avg. samples / sec: 952.64
Iteration:   4180, Loss function: 4.917, Average Loss: 5.172, avg. samples / sec: 966.82
Iteration:   4200, Loss function: 4.771, Average Loss: 5.167, avg. samples / sec: 934.81
Iteration:   4220, Loss function: 4.745, Average Loss: 5.163, avg. samples / sec: 850.39
Iteration:   4240, Loss function: 4.902, Average Loss: 5.158, avg. samples / sec: 916.30
Iteration:   4260, Loss function: 5.165, Average Loss: 5.153, avg. samples / sec: 869.70
Iteration:   4280, Loss function: 5.193, Average Loss: 5.147, avg. samples / sec: 944.50
Iteration:   4300, Loss function: 4.821, Average Loss: 5.141, avg. samples / sec: 910.49
Iteration:   4320, Loss function: 4.747, Average Loss: 5.136, avg. samples / sec: 961.05
Iteration:   4340, Loss function: 4.652, Average Loss: 5.130, avg. samples / sec: 981.55
Iteration:   4360, Loss function: 4.907, Average Loss: 5.126, avg. samples / sec: 944.13
Iteration:   4380, Loss function: 5.040, Average Loss: 5.121, avg. samples / sec: 920.49
Iteration:   4400, Loss function: 4.939, Average Loss: 5.116, avg. samples / sec: 973.63
Iteration:   4420, Loss function: 4.918, Average Loss: 5.111, avg. samples / sec: 872.14
Iteration:   4440, Loss function: 4.910, Average Loss: 5.106, avg. samples / sec: 887.76
Iteration:   4460, Loss function: 4.978, Average Loss: 5.101, avg. samples / sec: 971.05
Iteration:   4480, Loss function: 4.918, Average Loss: 5.097, avg. samples / sec: 973.41
Iteration:   4500, Loss function: 4.993, Average Loss: 5.094, avg. samples / sec: 987.79
Iteration:   4520, Loss function: 4.966, Average Loss: 5.089, avg. samples / sec: 978.10
Iteration:   4540, Loss function: 4.999, Average Loss: 5.085, avg. samples / sec: 967.94
Iteration:   4560, Loss function: 4.750, Average Loss: 5.082, avg. samples / sec: 975.28
Iteration:   4580, Loss function: 4.750, Average Loss: 5.079, avg. samples / sec: 977.45
Iteration:   4600, Loss function: 4.735, Average Loss: 5.075, avg. samples / sec: 932.88
Iteration:   4620, Loss function: 4.925, Average Loss: 5.071, avg. samples / sec: 928.55
Iteration:   4640, Loss function: 4.543, Average Loss: 5.065, avg. samples / sec: 966.41
Iteration:   4660, Loss function: 4.888, Average Loss: 5.061, avg. samples / sec: 920.01
Iteration:   4680, Loss function: 5.348, Average Loss: 5.057, avg. samples / sec: 943.32
Iteration:   4700, Loss function: 4.674, Average Loss: 5.053, avg. samples / sec: 985.63
Iteration:   4720, Loss function: 4.910, Average Loss: 5.048, avg. samples / sec: 989.39
Iteration:   4740, Loss function: 4.723, Average Loss: 5.044, avg. samples / sec: 980.12
Iteration:   4760, Loss function: 4.691, Average Loss: 5.041, avg. samples / sec: 917.35
Iteration:   4780, Loss function: 4.984, Average Loss: 5.037, avg. samples / sec: 912.43
Iteration:   4800, Loss function: 4.904, Average Loss: 5.035, avg. samples / sec: 963.73
Iteration:   4820, Loss function: 4.705, Average Loss: 5.031, avg. samples / sec: 891.54
Iteration:   4840, Loss function: 5.024, Average Loss: 5.028, avg. samples / sec: 954.02
Iteration:   4860, Loss function: 4.746, Average Loss: 5.023, avg. samples / sec: 974.38
Iteration:   4880, Loss function: 4.998, Average Loss: 5.020, avg. samples / sec: 970.87
Iteration:   4900, Loss function: 4.617, Average Loss: 5.016, avg. samples / sec: 963.70
Iteration:   4920, Loss function: 4.921, Average Loss: 5.013, avg. samples / sec: 931.89
Iteration:   4940, Loss function: 4.869, Average Loss: 5.009, avg. samples / sec: 914.65
Iteration:   4960, Loss function: 4.721, Average Loss: 5.005, avg. samples / sec: 914.19
Iteration:   4980, Loss function: 4.637, Average Loss: 5.001, avg. samples / sec: 979.59
Iteration:   5000, Loss function: 4.866, Average Loss: 4.997, avg. samples / sec: 957.41
Iteration:   5020, Loss function: 5.160, Average Loss: 4.993, avg. samples / sec: 940.38
Iteration:   5040, Loss function: 4.894, Average Loss: 4.990, avg. samples / sec: 928.91
Iteration:   5060, Loss function: 4.758, Average Loss: 4.987, avg. samples / sec: 956.75
Iteration:   5080, Loss function: 4.495, Average Loss: 4.983, avg. samples / sec: 936.79
Iteration:   5100, Loss function: 4.895, Average Loss: 4.980, avg. samples / sec: 985.47
Iteration:   5120, Loss function: 4.586, Average Loss: 4.977, avg. samples / sec: 985.85
Iteration:   5140, Loss function: 4.725, Average Loss: 4.973, avg. samples / sec: 995.59
:::MLLOG {"namespace": "", "time_ms": 1639074427186, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.62 s
:::MLLOG {"namespace": "", "time_ms": 1639074457870, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639074457943, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074457945, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.776, Average Loss: 4.969, avg. samples / sec: 68.79
Iteration:   5180, Loss function: 4.840, Average Loss: 4.964, avg. samples / sec: 996.13
DONE (t=3.99s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10912
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22180
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09882
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19742
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14077
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20790
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21936
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10912 AP goal: 0.10000
Iteration:   5200, Loss function: 4.721, Average Loss: 4.960, avg. samples / sec: 1012.73
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1091153392110432, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464525, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639074464723, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639074465
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:27:45 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 06:16:11 PM'
START TIMING RUN WAS 2021-12-09 06:16:11 PM
ENDING TIMING RUN AT 2021-12-09 06:27:45 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:27:45 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 7g.40gb     Device  0: (UUID: MIG-a0f08426-7343-531e-9087-0a203fe1ab9f)
+ result=694
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 06:16:11 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-09 06:16:11 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
