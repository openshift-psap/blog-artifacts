8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21'
Found 1 MIG instances: MIG-eba8b28b-434d-510c-806c-10304eb92e21
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639755232
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 03:33:52 PM'
STARTING TIMING RUN AT 2021-12-17 03:33:52 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 03:33:52 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_16-32-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\6\-\3\2\-\4\2 ]]
+ set +x
Fri Dec 17 15:33:52 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-wbpms to the sync file ...
run-mlperf--1-wbpms Found 4 Pods, waiting to have 8 ...
     1	run-mlperf--1-lg9lr
     2	run-mlperf--1-4w4z8
     3	run-mlperf--1-vhwqh
     4	run-mlperf--1-wbpms
Fri Dec 17 15:33:57 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755239994, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755240119, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2560192580, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2560192580
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639755242624, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755242624, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266972, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266973, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639755268911, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755268911, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755269279, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755269280, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755269281, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.806, Average Loss: 0.023, avg. samples / sec: 4.34
Iteration:     20, Loss function: 21.115, Average Loss: 0.456, avg. samples / sec: 811.05
Iteration:     40, Loss function: 20.738, Average Loss: 0.858, avg. samples / sec: 833.09
Iteration:     60, Loss function: 20.447, Average Loss: 1.248, avg. samples / sec: 843.56
Iteration:     80, Loss function: 19.959, Average Loss: 1.622, avg. samples / sec: 901.15
Iteration:    100, Loss function: 15.177, Average Loss: 1.948, avg. samples / sec: 861.30
Iteration:    120, Loss function: 11.685, Average Loss: 2.161, avg. samples / sec: 944.24
Iteration:    140, Loss function: 9.579, Average Loss: 2.320, avg. samples / sec: 933.87
Iteration:    160, Loss function: 9.254, Average Loss: 2.461, avg. samples / sec: 941.22
Iteration:    180, Loss function: 8.924, Average Loss: 2.592, avg. samples / sec: 919.75
Iteration:    200, Loss function: 8.729, Average Loss: 2.717, avg. samples / sec: 928.54
Iteration:    220, Loss function: 8.453, Average Loss: 2.837, avg. samples / sec: 888.02
Iteration:    240, Loss function: 8.614, Average Loss: 2.953, avg. samples / sec: 937.51
Iteration:    260, Loss function: 8.852, Average Loss: 3.065, avg. samples / sec: 916.28
Iteration:    280, Loss function: 8.522, Average Loss: 3.174, avg. samples / sec: 856.23
Iteration:    300, Loss function: 8.334, Average Loss: 3.278, avg. samples / sec: 948.01
Iteration:    320, Loss function: 8.415, Average Loss: 3.378, avg. samples / sec: 965.50
Iteration:    340, Loss function: 8.459, Average Loss: 3.476, avg. samples / sec: 966.48
Iteration:    360, Loss function: 8.016, Average Loss: 3.570, avg. samples / sec: 945.72
Iteration:    380, Loss function: 7.852, Average Loss: 3.659, avg. samples / sec: 893.74
Iteration:    400, Loss function: 7.996, Average Loss: 3.743, avg. samples / sec: 820.35
Iteration:    420, Loss function: 7.597, Average Loss: 3.825, avg. samples / sec: 926.62
Iteration:    440, Loss function: 7.771, Average Loss: 3.903, avg. samples / sec: 972.72
Iteration:    460, Loss function: 7.791, Average Loss: 3.977, avg. samples / sec: 925.79
Iteration:    480, Loss function: 7.594, Average Loss: 4.051, avg. samples / sec: 880.43
Iteration:    500, Loss function: 7.439, Average Loss: 4.120, avg. samples / sec: 968.42
Iteration:    520, Loss function: 7.501, Average Loss: 4.188, avg. samples / sec: 976.13
Iteration:    540, Loss function: 7.523, Average Loss: 4.254, avg. samples / sec: 983.15
Iteration:    560, Loss function: 7.144, Average Loss: 4.315, avg. samples / sec: 985.41
Iteration:    580, Loss function: 7.130, Average Loss: 4.374, avg. samples / sec: 973.20
Iteration:    600, Loss function: 7.197, Average Loss: 4.432, avg. samples / sec: 982.57
Iteration:    620, Loss function: 7.104, Average Loss: 4.487, avg. samples / sec: 924.98
Iteration:    640, Loss function: 6.923, Average Loss: 4.541, avg. samples / sec: 917.93
Iteration:    660, Loss function: 7.180, Average Loss: 4.594, avg. samples / sec: 973.91
Iteration:    680, Loss function: 7.178, Average Loss: 4.645, avg. samples / sec: 974.05
Iteration:    700, Loss function: 6.818, Average Loss: 4.692, avg. samples / sec: 956.82
Iteration:    720, Loss function: 6.892, Average Loss: 4.740, avg. samples / sec: 966.05
Iteration:    740, Loss function: 6.946, Average Loss: 4.785, avg. samples / sec: 927.27
Iteration:    760, Loss function: 7.009, Average Loss: 4.828, avg. samples / sec: 974.11
Iteration:    780, Loss function: 6.867, Average Loss: 4.871, avg. samples / sec: 986.66
Iteration:    800, Loss function: 7.082, Average Loss: 4.910, avg. samples / sec: 976.58
Iteration:    820, Loss function: 6.758, Average Loss: 4.947, avg. samples / sec: 974.28
Iteration:    840, Loss function: 6.613, Average Loss: 4.984, avg. samples / sec: 966.53
Iteration:    860, Loss function: 6.782, Average Loss: 5.018, avg. samples / sec: 943.03
Iteration:    880, Loss function: 6.865, Average Loss: 5.051, avg. samples / sec: 910.26
Iteration:    900, Loss function: 6.838, Average Loss: 5.082, avg. samples / sec: 919.66
Iteration:    920, Loss function: 6.582, Average Loss: 5.112, avg. samples / sec: 931.00
Iteration:    940, Loss function: 6.711, Average Loss: 5.141, avg. samples / sec: 907.06
Iteration:    960, Loss function: 6.449, Average Loss: 5.169, avg. samples / sec: 958.30
Iteration:    980, Loss function: 6.434, Average Loss: 5.195, avg. samples / sec: 946.66
Iteration:   1000, Loss function: 6.777, Average Loss: 5.220, avg. samples / sec: 941.21
Iteration:   1020, Loss function: 6.396, Average Loss: 5.243, avg. samples / sec: 914.01
:::MLLOG {"namespace": "", "time_ms": 1639755395424, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755395425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.387, Average Loss: 5.266, avg. samples / sec: 951.52
Iteration:   1060, Loss function: 6.396, Average Loss: 5.289, avg. samples / sec: 948.24
Iteration:   1080, Loss function: 6.162, Average Loss: 5.310, avg. samples / sec: 981.25
Iteration:   1100, Loss function: 6.067, Average Loss: 5.330, avg. samples / sec: 976.88
Iteration:   1120, Loss function: 6.158, Average Loss: 5.348, avg. samples / sec: 979.35
Iteration:   1140, Loss function: 6.162, Average Loss: 5.367, avg. samples / sec: 968.02
Iteration:   1160, Loss function: 6.095, Average Loss: 5.384, avg. samples / sec: 970.67
Iteration:   1180, Loss function: 6.131, Average Loss: 5.399, avg. samples / sec: 997.36
Iteration:   1200, Loss function: 6.177, Average Loss: 5.415, avg. samples / sec: 973.65
Iteration:   1220, Loss function: 6.266, Average Loss: 5.431, avg. samples / sec: 967.44
Iteration:   1240, Loss function: 6.068, Average Loss: 5.444, avg. samples / sec: 960.75
Iteration:   1260, Loss function: 5.910, Average Loss: 5.457, avg. samples / sec: 911.89
Iteration:   1280, Loss function: 5.745, Average Loss: 5.469, avg. samples / sec: 914.45
Iteration:   1300, Loss function: 6.116, Average Loss: 5.482, avg. samples / sec: 845.96
Iteration:   1320, Loss function: 6.181, Average Loss: 5.494, avg. samples / sec: 929.21
Iteration:   1340, Loss function: 5.940, Average Loss: 5.504, avg. samples / sec: 975.93
Iteration:   1360, Loss function: 6.114, Average Loss: 5.515, avg. samples / sec: 973.64
Iteration:   1380, Loss function: 6.211, Average Loss: 5.526, avg. samples / sec: 952.84
Iteration:   1400, Loss function: 6.163, Average Loss: 5.534, avg. samples / sec: 963.14
Iteration:   1420, Loss function: 6.081, Average Loss: 5.543, avg. samples / sec: 955.51
Iteration:   1440, Loss function: 6.212, Average Loss: 5.551, avg. samples / sec: 959.22
Iteration:   1460, Loss function: 6.153, Average Loss: 5.560, avg. samples / sec: 945.86
Iteration:   1480, Loss function: 5.868, Average Loss: 5.568, avg. samples / sec: 977.04
Iteration:   1500, Loss function: 5.947, Average Loss: 5.576, avg. samples / sec: 959.76
Iteration:   1520, Loss function: 5.960, Average Loss: 5.581, avg. samples / sec: 948.75
Iteration:   1540, Loss function: 6.059, Average Loss: 5.585, avg. samples / sec: 968.24
Iteration:   1560, Loss function: 5.716, Average Loss: 5.589, avg. samples / sec: 994.36
Iteration:   1580, Loss function: 5.644, Average Loss: 5.594, avg. samples / sec: 967.67
Iteration:   1600, Loss function: 6.146, Average Loss: 5.599, avg. samples / sec: 971.57
Iteration:   1620, Loss function: 5.721, Average Loss: 5.604, avg. samples / sec: 991.62
Iteration:   1640, Loss function: 5.823, Average Loss: 5.608, avg. samples / sec: 947.88
Iteration:   1660, Loss function: 5.794, Average Loss: 5.613, avg. samples / sec: 953.90
Iteration:   1680, Loss function: 5.637, Average Loss: 5.615, avg. samples / sec: 970.93
Iteration:   1700, Loss function: 5.439, Average Loss: 5.619, avg. samples / sec: 951.17
Iteration:   1720, Loss function: 5.551, Average Loss: 5.622, avg. samples / sec: 967.41
Iteration:   1740, Loss function: 5.755, Average Loss: 5.625, avg. samples / sec: 911.23
Iteration:   1760, Loss function: 5.546, Average Loss: 5.627, avg. samples / sec: 932.58
Iteration:   1780, Loss function: 5.901, Average Loss: 5.629, avg. samples / sec: 980.93
Iteration:   1800, Loss function: 5.473, Average Loss: 5.631, avg. samples / sec: 994.48
Iteration:   1820, Loss function: 5.969, Average Loss: 5.633, avg. samples / sec: 946.26
Iteration:   1840, Loss function: 5.995, Average Loss: 5.634, avg. samples / sec: 979.17
Iteration:   1860, Loss function: 5.501, Average Loss: 5.633, avg. samples / sec: 924.64
Iteration:   1880, Loss function: 5.983, Average Loss: 5.636, avg. samples / sec: 983.86
Iteration:   1900, Loss function: 5.744, Average Loss: 5.637, avg. samples / sec: 955.92
Iteration:   1920, Loss function: 5.663, Average Loss: 5.637, avg. samples / sec: 984.02
Iteration:   1940, Loss function: 5.945, Average Loss: 5.637, avg. samples / sec: 987.09
Iteration:   1960, Loss function: 5.605, Average Loss: 5.637, avg. samples / sec: 967.39
Iteration:   1980, Loss function: 5.590, Average Loss: 5.636, avg. samples / sec: 985.32
Iteration:   2000, Loss function: 5.482, Average Loss: 5.635, avg. samples / sec: 975.41
Iteration:   2020, Loss function: 5.630, Average Loss: 5.634, avg. samples / sec: 982.87
Iteration:   2040, Loss function: 5.657, Average Loss: 5.633, avg. samples / sec: 965.98
:::MLLOG {"namespace": "", "time_ms": 1639755517668, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517670, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.444, Average Loss: 5.630, avg. samples / sec: 912.62
Iteration:   2080, Loss function: 5.107, Average Loss: 5.628, avg. samples / sec: 919.98
Iteration:   2100, Loss function: 5.408, Average Loss: 5.626, avg. samples / sec: 975.27
Iteration:   2120, Loss function: 5.290, Average Loss: 5.623, avg. samples / sec: 970.03
Iteration:   2140, Loss function: 5.448, Average Loss: 5.619, avg. samples / sec: 943.44
Iteration:   2160, Loss function: 5.336, Average Loss: 5.616, avg. samples / sec: 966.09
Iteration:   2180, Loss function: 5.418, Average Loss: 5.614, avg. samples / sec: 954.81
Iteration:   2200, Loss function: 5.341, Average Loss: 5.609, avg. samples / sec: 969.02
Iteration:   2220, Loss function: 5.427, Average Loss: 5.607, avg. samples / sec: 1000.06
Iteration:   2240, Loss function: 5.410, Average Loss: 5.604, avg. samples / sec: 954.82
Iteration:   2260, Loss function: 5.283, Average Loss: 5.602, avg. samples / sec: 907.91
Iteration:   2280, Loss function: 5.101, Average Loss: 5.598, avg. samples / sec: 899.85
Iteration:   2300, Loss function: 5.038, Average Loss: 5.595, avg. samples / sec: 937.02
Iteration:   2320, Loss function: 5.423, Average Loss: 5.592, avg. samples / sec: 987.97
Iteration:   2340, Loss function: 5.335, Average Loss: 5.589, avg. samples / sec: 975.13
Iteration:   2360, Loss function: 5.351, Average Loss: 5.585, avg. samples / sec: 981.75
Iteration:   2380, Loss function: 5.406, Average Loss: 5.581, avg. samples / sec: 966.76
Iteration:   2400, Loss function: 5.284, Average Loss: 5.576, avg. samples / sec: 961.73
Iteration:   2420, Loss function: 5.508, Average Loss: 5.571, avg. samples / sec: 973.23
Iteration:   2440, Loss function: 5.520, Average Loss: 5.568, avg. samples / sec: 918.05
Iteration:   2460, Loss function: 5.119, Average Loss: 5.564, avg. samples / sec: 888.54
Iteration:   2480, Loss function: 5.578, Average Loss: 5.561, avg. samples / sec: 876.04
Iteration:   2500, Loss function: 5.311, Average Loss: 5.556, avg. samples / sec: 975.49
Iteration:   2520, Loss function: 5.236, Average Loss: 5.551, avg. samples / sec: 965.60
Iteration:   2540, Loss function: 5.496, Average Loss: 5.549, avg. samples / sec: 898.43
Iteration:   2560, Loss function: 5.259, Average Loss: 5.545, avg. samples / sec: 905.39
Iteration:   2580, Loss function: 5.309, Average Loss: 5.541, avg. samples / sec: 939.82
Iteration:   2600, Loss function: 5.628, Average Loss: 5.538, avg. samples / sec: 869.61
Iteration:   2620, Loss function: 5.555, Average Loss: 5.534, avg. samples / sec: 993.41
Iteration:   2640, Loss function: 5.049, Average Loss: 5.531, avg. samples / sec: 971.60
Iteration:   2660, Loss function: 5.431, Average Loss: 5.528, avg. samples / sec: 868.99
Iteration:   2680, Loss function: 5.151, Average Loss: 5.525, avg. samples / sec: 931.23
Iteration:   2700, Loss function: 5.317, Average Loss: 5.520, avg. samples / sec: 900.25
Iteration:   2720, Loss function: 5.349, Average Loss: 5.516, avg. samples / sec: 940.58
Iteration:   2740, Loss function: 5.154, Average Loss: 5.512, avg. samples / sec: 959.41
Iteration:   2760, Loss function: 4.974, Average Loss: 5.506, avg. samples / sec: 907.27
Iteration:   2780, Loss function: 5.483, Average Loss: 5.502, avg. samples / sec: 953.00
Iteration:   2800, Loss function: 5.209, Average Loss: 5.498, avg. samples / sec: 973.25
Iteration:   2820, Loss function: 5.359, Average Loss: 5.494, avg. samples / sec: 992.35
Iteration:   2840, Loss function: 5.174, Average Loss: 5.490, avg. samples / sec: 988.57
Iteration:   2860, Loss function: 5.209, Average Loss: 5.485, avg. samples / sec: 901.97
Iteration:   2880, Loss function: 5.242, Average Loss: 5.480, avg. samples / sec: 965.18
Iteration:   2900, Loss function: 5.141, Average Loss: 5.476, avg. samples / sec: 940.59
Iteration:   2920, Loss function: 5.283, Average Loss: 5.471, avg. samples / sec: 949.69
Iteration:   2940, Loss function: 4.955, Average Loss: 5.466, avg. samples / sec: 926.66
Iteration:   2960, Loss function: 5.319, Average Loss: 5.462, avg. samples / sec: 962.11
Iteration:   2980, Loss function: 5.194, Average Loss: 5.459, avg. samples / sec: 891.08
Iteration:   3000, Loss function: 5.234, Average Loss: 5.453, avg. samples / sec: 990.92
Iteration:   3020, Loss function: 5.240, Average Loss: 5.448, avg. samples / sec: 921.71
Iteration:   3040, Loss function: 5.243, Average Loss: 5.442, avg. samples / sec: 976.91
Iteration:   3060, Loss function: 5.035, Average Loss: 5.437, avg. samples / sec: 983.79
Iteration:   3080, Loss function: 4.829, Average Loss: 5.432, avg. samples / sec: 968.51
:::MLLOG {"namespace": "", "time_ms": 1639755641791, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755641794, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.173, Average Loss: 5.428, avg. samples / sec: 931.35
Iteration:   3120, Loss function: 5.006, Average Loss: 5.422, avg. samples / sec: 894.55
Iteration:   3140, Loss function: 5.079, Average Loss: 5.417, avg. samples / sec: 963.26
Iteration:   3160, Loss function: 5.356, Average Loss: 5.411, avg. samples / sec: 985.83
Iteration:   3180, Loss function: 5.034, Average Loss: 5.406, avg. samples / sec: 962.74
Iteration:   3200, Loss function: 5.348, Average Loss: 5.401, avg. samples / sec: 940.32
Iteration:   3220, Loss function: 5.143, Average Loss: 5.395, avg. samples / sec: 922.30
Iteration:   3240, Loss function: 5.224, Average Loss: 5.390, avg. samples / sec: 933.21
Iteration:   3260, Loss function: 4.991, Average Loss: 5.384, avg. samples / sec: 929.12
Iteration:   3280, Loss function: 4.871, Average Loss: 5.378, avg. samples / sec: 895.50
Iteration:   3300, Loss function: 4.837, Average Loss: 5.372, avg. samples / sec: 975.94
Iteration:   3320, Loss function: 4.961, Average Loss: 5.366, avg. samples / sec: 980.66
Iteration:   3340, Loss function: 5.108, Average Loss: 5.362, avg. samples / sec: 949.97
Iteration:   3360, Loss function: 5.143, Average Loss: 5.356, avg. samples / sec: 941.38
Iteration:   3380, Loss function: 5.195, Average Loss: 5.350, avg. samples / sec: 922.18
Iteration:   3400, Loss function: 4.797, Average Loss: 5.345, avg. samples / sec: 904.64
Iteration:   3420, Loss function: 5.103, Average Loss: 5.339, avg. samples / sec: 971.97
Iteration:   3440, Loss function: 4.959, Average Loss: 5.335, avg. samples / sec: 981.33
Iteration:   3460, Loss function: 5.223, Average Loss: 5.330, avg. samples / sec: 985.43
Iteration:   3480, Loss function: 5.368, Average Loss: 5.327, avg. samples / sec: 898.42
Iteration:   3500, Loss function: 5.309, Average Loss: 5.323, avg. samples / sec: 935.93
Iteration:   3520, Loss function: 5.163, Average Loss: 5.320, avg. samples / sec: 910.67
Iteration:   3540, Loss function: 5.081, Average Loss: 5.315, avg. samples / sec: 943.73
Iteration:   3560, Loss function: 4.874, Average Loss: 5.312, avg. samples / sec: 943.75
Iteration:   3580, Loss function: 5.174, Average Loss: 5.307, avg. samples / sec: 982.65
Iteration:   3600, Loss function: 5.066, Average Loss: 5.302, avg. samples / sec: 973.23
Iteration:   3620, Loss function: 4.770, Average Loss: 5.297, avg. samples / sec: 967.65
Iteration:   3640, Loss function: 4.795, Average Loss: 5.292, avg. samples / sec: 952.20
Iteration:   3660, Loss function: 5.021, Average Loss: 5.288, avg. samples / sec: 912.67
Iteration:   3680, Loss function: 5.148, Average Loss: 5.283, avg. samples / sec: 971.07
Iteration:   3700, Loss function: 4.942, Average Loss: 5.279, avg. samples / sec: 985.42
Iteration:   3720, Loss function: 4.902, Average Loss: 5.273, avg. samples / sec: 968.93
Iteration:   3740, Loss function: 5.037, Average Loss: 5.268, avg. samples / sec: 961.46
Iteration:   3760, Loss function: 4.978, Average Loss: 5.264, avg. samples / sec: 967.76
Iteration:   3780, Loss function: 5.056, Average Loss: 5.260, avg. samples / sec: 929.16
Iteration:   3800, Loss function: 5.215, Average Loss: 5.257, avg. samples / sec: 997.50
Iteration:   3820, Loss function: 5.273, Average Loss: 5.252, avg. samples / sec: 967.83
Iteration:   3840, Loss function: 4.776, Average Loss: 5.247, avg. samples / sec: 971.75
Iteration:   3860, Loss function: 5.024, Average Loss: 5.243, avg. samples / sec: 928.07
Iteration:   3880, Loss function: 4.979, Average Loss: 5.237, avg. samples / sec: 937.05
Iteration:   3900, Loss function: 5.133, Average Loss: 5.232, avg. samples / sec: 953.60
Iteration:   3920, Loss function: 5.198, Average Loss: 5.226, avg. samples / sec: 925.15
Iteration:   3940, Loss function: 4.939, Average Loss: 5.221, avg. samples / sec: 991.88
Iteration:   3960, Loss function: 4.925, Average Loss: 5.217, avg. samples / sec: 890.67
Iteration:   3980, Loss function: 4.876, Average Loss: 5.212, avg. samples / sec: 946.63
Iteration:   4000, Loss function: 5.137, Average Loss: 5.207, avg. samples / sec: 918.30
Iteration:   4020, Loss function: 5.139, Average Loss: 5.202, avg. samples / sec: 919.28
Iteration:   4040, Loss function: 5.137, Average Loss: 5.199, avg. samples / sec: 939.53
Iteration:   4060, Loss function: 5.131, Average Loss: 5.195, avg. samples / sec: 950.31
Iteration:   4080, Loss function: 5.024, Average Loss: 5.190, avg. samples / sec: 981.45
Iteration:   4100, Loss function: 5.027, Average Loss: 5.187, avg. samples / sec: 976.24
:::MLLOG {"namespace": "", "time_ms": 1639755765584, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755765585, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.027, Average Loss: 5.183, avg. samples / sec: 962.03
Iteration:   4140, Loss function: 4.917, Average Loss: 5.178, avg. samples / sec: 958.49
Iteration:   4160, Loss function: 4.890, Average Loss: 5.171, avg. samples / sec: 961.56
Iteration:   4180, Loss function: 5.087, Average Loss: 5.166, avg. samples / sec: 977.53
Iteration:   4200, Loss function: 4.824, Average Loss: 5.161, avg. samples / sec: 948.68
Iteration:   4220, Loss function: 4.914, Average Loss: 5.155, avg. samples / sec: 974.46
Iteration:   4240, Loss function: 4.966, Average Loss: 5.150, avg. samples / sec: 976.38
Iteration:   4260, Loss function: 5.191, Average Loss: 5.146, avg. samples / sec: 888.83
Iteration:   4280, Loss function: 5.019, Average Loss: 5.141, avg. samples / sec: 925.01
Iteration:   4300, Loss function: 4.775, Average Loss: 5.134, avg. samples / sec: 931.67
Iteration:   4320, Loss function: 4.604, Average Loss: 5.129, avg. samples / sec: 978.62
Iteration:   4340, Loss function: 4.799, Average Loss: 5.123, avg. samples / sec: 922.22
Iteration:   4360, Loss function: 4.795, Average Loss: 5.119, avg. samples / sec: 950.57
Iteration:   4380, Loss function: 5.049, Average Loss: 5.115, avg. samples / sec: 838.78
Iteration:   4400, Loss function: 5.092, Average Loss: 5.111, avg. samples / sec: 868.13
Iteration:   4420, Loss function: 4.857, Average Loss: 5.107, avg. samples / sec: 963.11
Iteration:   4440, Loss function: 4.822, Average Loss: 5.102, avg. samples / sec: 971.45
Iteration:   4460, Loss function: 4.990, Average Loss: 5.098, avg. samples / sec: 952.77
Iteration:   4480, Loss function: 5.094, Average Loss: 5.096, avg. samples / sec: 972.39
Iteration:   4500, Loss function: 4.901, Average Loss: 5.094, avg. samples / sec: 997.19
Iteration:   4520, Loss function: 4.729, Average Loss: 5.090, avg. samples / sec: 977.21
Iteration:   4540, Loss function: 5.288, Average Loss: 5.085, avg. samples / sec: 920.20
Iteration:   4560, Loss function: 4.791, Average Loss: 5.082, avg. samples / sec: 949.13
Iteration:   4580, Loss function: 4.663, Average Loss: 5.079, avg. samples / sec: 968.97
Iteration:   4600, Loss function: 5.017, Average Loss: 5.076, avg. samples / sec: 928.67
Iteration:   4620, Loss function: 4.899, Average Loss: 5.071, avg. samples / sec: 879.14
Iteration:   4640, Loss function: 4.930, Average Loss: 5.067, avg. samples / sec: 951.19
Iteration:   4660, Loss function: 4.678, Average Loss: 5.063, avg. samples / sec: 907.60
Iteration:   4680, Loss function: 5.257, Average Loss: 5.058, avg. samples / sec: 944.18
Iteration:   4700, Loss function: 4.687, Average Loss: 5.054, avg. samples / sec: 861.52
Iteration:   4720, Loss function: 4.819, Average Loss: 5.050, avg. samples / sec: 939.71
Iteration:   4740, Loss function: 4.784, Average Loss: 5.045, avg. samples / sec: 917.90
Iteration:   4760, Loss function: 4.772, Average Loss: 5.042, avg. samples / sec: 963.21
Iteration:   4780, Loss function: 4.926, Average Loss: 5.038, avg. samples / sec: 986.24
Iteration:   4800, Loss function: 4.845, Average Loss: 5.035, avg. samples / sec: 927.74
Iteration:   4820, Loss function: 4.759, Average Loss: 5.031, avg. samples / sec: 891.55
Iteration:   4840, Loss function: 4.955, Average Loss: 5.027, avg. samples / sec: 968.33
Iteration:   4860, Loss function: 4.754, Average Loss: 5.023, avg. samples / sec: 993.19
Iteration:   4880, Loss function: 4.928, Average Loss: 5.020, avg. samples / sec: 964.43
Iteration:   4900, Loss function: 4.595, Average Loss: 5.016, avg. samples / sec: 965.70
Iteration:   4920, Loss function: 4.844, Average Loss: 5.012, avg. samples / sec: 968.92
Iteration:   4940, Loss function: 4.638, Average Loss: 5.009, avg. samples / sec: 904.93
Iteration:   4960, Loss function: 4.642, Average Loss: 5.005, avg. samples / sec: 935.83
Iteration:   4980, Loss function: 4.547, Average Loss: 5.001, avg. samples / sec: 962.41
Iteration:   5000, Loss function: 5.114, Average Loss: 4.998, avg. samples / sec: 970.86
Iteration:   5020, Loss function: 4.957, Average Loss: 4.994, avg. samples / sec: 950.35
Iteration:   5040, Loss function: 4.841, Average Loss: 4.991, avg. samples / sec: 942.44
Iteration:   5060, Loss function: 4.896, Average Loss: 4.988, avg. samples / sec: 930.85
Iteration:   5080, Loss function: 4.651, Average Loss: 4.984, avg. samples / sec: 891.98
Iteration:   5100, Loss function: 4.628, Average Loss: 4.981, avg. samples / sec: 966.54
Iteration:   5120, Loss function: 4.664, Average Loss: 4.978, avg. samples / sec: 961.03
Iteration:   5140, Loss function: 4.935, Average Loss: 4.973, avg. samples / sec: 993.36
:::MLLOG {"namespace": "", "time_ms": 1639755890021, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.48 s
:::MLLOG {"namespace": "", "time_ms": 1639755918566, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755918616, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755918617, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.855, Average Loss: 4.969, avg. samples / sec: 73.61
Iteration:   5180, Loss function: 4.873, Average Loss: 4.964, avg. samples / sec: 920.68
DONE (t=5.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10830
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21530
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19141
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13684
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10830 AP goal: 0.10000
Iteration:   5200, Loss function: 4.744, Average Loss: 4.960, avg. samples / sec: 869.54
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10829926681872805, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926051, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 15:45:27 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 15:45:27 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755239994, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755240119, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2560192580, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2560192580
:::MLLOG {"namespace": "", "time_ms": 1639755242624, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755242624, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755242629, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266972, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266973, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639755268911, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755268911, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755269279, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755269280, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755269281, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.806, Average Loss: 0.023, avg. samples / sec: 4.34
Iteration:     20, Loss function: 21.115, Average Loss: 0.456, avg. samples / sec: 811.05
Iteration:     40, Loss function: 20.738, Average Loss: 0.858, avg. samples / sec: 833.09
Iteration:     60, Loss function: 20.447, Average Loss: 1.248, avg. samples / sec: 843.56
Iteration:     80, Loss function: 19.959, Average Loss: 1.622, avg. samples / sec: 901.15
Iteration:    100, Loss function: 15.177, Average Loss: 1.948, avg. samples / sec: 861.30
Iteration:    120, Loss function: 11.685, Average Loss: 2.161, avg. samples / sec: 944.24
Iteration:    140, Loss function: 9.579, Average Loss: 2.320, avg. samples / sec: 933.87
Iteration:    160, Loss function: 9.254, Average Loss: 2.461, avg. samples / sec: 941.22
Iteration:    180, Loss function: 8.924, Average Loss: 2.592, avg. samples / sec: 919.75
Iteration:    200, Loss function: 8.729, Average Loss: 2.717, avg. samples / sec: 928.54
Iteration:    220, Loss function: 8.453, Average Loss: 2.837, avg. samples / sec: 888.02
Iteration:    240, Loss function: 8.614, Average Loss: 2.953, avg. samples / sec: 937.51
Iteration:    260, Loss function: 8.852, Average Loss: 3.065, avg. samples / sec: 916.28
Iteration:    280, Loss function: 8.522, Average Loss: 3.174, avg. samples / sec: 856.23
Iteration:    300, Loss function: 8.334, Average Loss: 3.278, avg. samples / sec: 948.01
Iteration:    320, Loss function: 8.415, Average Loss: 3.378, avg. samples / sec: 965.50
Iteration:    340, Loss function: 8.459, Average Loss: 3.476, avg. samples / sec: 966.48
Iteration:    360, Loss function: 8.016, Average Loss: 3.570, avg. samples / sec: 945.72
Iteration:    380, Loss function: 7.852, Average Loss: 3.659, avg. samples / sec: 893.74
Iteration:    400, Loss function: 7.996, Average Loss: 3.743, avg. samples / sec: 820.35
Iteration:    420, Loss function: 7.597, Average Loss: 3.825, avg. samples / sec: 926.62
Iteration:    440, Loss function: 7.771, Average Loss: 3.903, avg. samples / sec: 972.72
Iteration:    460, Loss function: 7.791, Average Loss: 3.977, avg. samples / sec: 925.79
Iteration:    480, Loss function: 7.594, Average Loss: 4.051, avg. samples / sec: 880.43
Iteration:    500, Loss function: 7.439, Average Loss: 4.120, avg. samples / sec: 968.42
Iteration:    520, Loss function: 7.501, Average Loss: 4.188, avg. samples / sec: 976.13
Iteration:    540, Loss function: 7.523, Average Loss: 4.254, avg. samples / sec: 983.15
Iteration:    560, Loss function: 7.144, Average Loss: 4.315, avg. samples / sec: 985.41
Iteration:    580, Loss function: 7.130, Average Loss: 4.374, avg. samples / sec: 973.20
Iteration:    600, Loss function: 7.197, Average Loss: 4.432, avg. samples / sec: 982.57
Iteration:    620, Loss function: 7.104, Average Loss: 4.487, avg. samples / sec: 924.98
Iteration:    640, Loss function: 6.923, Average Loss: 4.541, avg. samples / sec: 917.93
Iteration:    660, Loss function: 7.180, Average Loss: 4.594, avg. samples / sec: 973.91
Iteration:    680, Loss function: 7.178, Average Loss: 4.645, avg. samples / sec: 974.05
Iteration:    700, Loss function: 6.818, Average Loss: 4.692, avg. samples / sec: 956.82
Iteration:    720, Loss function: 6.892, Average Loss: 4.740, avg. samples / sec: 966.05
Iteration:    740, Loss function: 6.946, Average Loss: 4.785, avg. samples / sec: 927.27
Iteration:    760, Loss function: 7.009, Average Loss: 4.828, avg. samples / sec: 974.11
Iteration:    780, Loss function: 6.867, Average Loss: 4.871, avg. samples / sec: 986.66
Iteration:    800, Loss function: 7.082, Average Loss: 4.910, avg. samples / sec: 976.58
Iteration:    820, Loss function: 6.758, Average Loss: 4.947, avg. samples / sec: 974.28
Iteration:    840, Loss function: 6.613, Average Loss: 4.984, avg. samples / sec: 966.53
Iteration:    860, Loss function: 6.782, Average Loss: 5.018, avg. samples / sec: 943.03
Iteration:    880, Loss function: 6.865, Average Loss: 5.051, avg. samples / sec: 910.26
Iteration:    900, Loss function: 6.838, Average Loss: 5.082, avg. samples / sec: 919.66
Iteration:    920, Loss function: 6.582, Average Loss: 5.112, avg. samples / sec: 931.00
Iteration:    940, Loss function: 6.711, Average Loss: 5.141, avg. samples / sec: 907.06
Iteration:    960, Loss function: 6.449, Average Loss: 5.169, avg. samples / sec: 958.30
Iteration:    980, Loss function: 6.434, Average Loss: 5.195, avg. samples / sec: 946.66
Iteration:   1000, Loss function: 6.777, Average Loss: 5.220, avg. samples / sec: 941.21
Iteration:   1020, Loss function: 6.396, Average Loss: 5.243, avg. samples / sec: 914.01
:::MLLOG {"namespace": "", "time_ms": 1639755395424, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755395425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.387, Average Loss: 5.266, avg. samples / sec: 951.52
Iteration:   1060, Loss function: 6.396, Average Loss: 5.289, avg. samples / sec: 948.24
Iteration:   1080, Loss function: 6.162, Average Loss: 5.310, avg. samples / sec: 981.25
Iteration:   1100, Loss function: 6.067, Average Loss: 5.330, avg. samples / sec: 976.88
Iteration:   1120, Loss function: 6.158, Average Loss: 5.348, avg. samples / sec: 979.35
Iteration:   1140, Loss function: 6.162, Average Loss: 5.367, avg. samples / sec: 968.02
Iteration:   1160, Loss function: 6.095, Average Loss: 5.384, avg. samples / sec: 970.67
Iteration:   1180, Loss function: 6.131, Average Loss: 5.399, avg. samples / sec: 997.36
Iteration:   1200, Loss function: 6.177, Average Loss: 5.415, avg. samples / sec: 973.65
Iteration:   1220, Loss function: 6.266, Average Loss: 5.431, avg. samples / sec: 967.44
Iteration:   1240, Loss function: 6.068, Average Loss: 5.444, avg. samples / sec: 960.75
Iteration:   1260, Loss function: 5.910, Average Loss: 5.457, avg. samples / sec: 911.89
Iteration:   1280, Loss function: 5.745, Average Loss: 5.469, avg. samples / sec: 914.45
Iteration:   1300, Loss function: 6.116, Average Loss: 5.482, avg. samples / sec: 845.96
Iteration:   1320, Loss function: 6.181, Average Loss: 5.494, avg. samples / sec: 929.21
Iteration:   1340, Loss function: 5.940, Average Loss: 5.504, avg. samples / sec: 975.93
Iteration:   1360, Loss function: 6.114, Average Loss: 5.515, avg. samples / sec: 973.64
Iteration:   1380, Loss function: 6.211, Average Loss: 5.526, avg. samples / sec: 952.84
Iteration:   1400, Loss function: 6.163, Average Loss: 5.534, avg. samples / sec: 963.14
Iteration:   1420, Loss function: 6.081, Average Loss: 5.543, avg. samples / sec: 955.51
Iteration:   1440, Loss function: 6.212, Average Loss: 5.551, avg. samples / sec: 959.22
Iteration:   1460, Loss function: 6.153, Average Loss: 5.560, avg. samples / sec: 945.86
Iteration:   1480, Loss function: 5.868, Average Loss: 5.568, avg. samples / sec: 977.04
Iteration:   1500, Loss function: 5.947, Average Loss: 5.576, avg. samples / sec: 959.76
Iteration:   1520, Loss function: 5.960, Average Loss: 5.581, avg. samples / sec: 948.75
Iteration:   1540, Loss function: 6.059, Average Loss: 5.585, avg. samples / sec: 968.24
Iteration:   1560, Loss function: 5.716, Average Loss: 5.589, avg. samples / sec: 994.36
Iteration:   1580, Loss function: 5.644, Average Loss: 5.594, avg. samples / sec: 967.67
Iteration:   1600, Loss function: 6.146, Average Loss: 5.599, avg. samples / sec: 971.57
Iteration:   1620, Loss function: 5.721, Average Loss: 5.604, avg. samples / sec: 991.62
Iteration:   1640, Loss function: 5.823, Average Loss: 5.608, avg. samples / sec: 947.88
Iteration:   1660, Loss function: 5.794, Average Loss: 5.613, avg. samples / sec: 953.90
Iteration:   1680, Loss function: 5.637, Average Loss: 5.615, avg. samples / sec: 970.93
Iteration:   1700, Loss function: 5.439, Average Loss: 5.619, avg. samples / sec: 951.17
Iteration:   1720, Loss function: 5.551, Average Loss: 5.622, avg. samples / sec: 967.41
Iteration:   1740, Loss function: 5.755, Average Loss: 5.625, avg. samples / sec: 911.23
Iteration:   1760, Loss function: 5.546, Average Loss: 5.627, avg. samples / sec: 932.58
Iteration:   1780, Loss function: 5.901, Average Loss: 5.629, avg. samples / sec: 980.93
Iteration:   1800, Loss function: 5.473, Average Loss: 5.631, avg. samples / sec: 994.48
Iteration:   1820, Loss function: 5.969, Average Loss: 5.633, avg. samples / sec: 946.26
Iteration:   1840, Loss function: 5.995, Average Loss: 5.634, avg. samples / sec: 979.17
Iteration:   1860, Loss function: 5.501, Average Loss: 5.633, avg. samples / sec: 924.64
Iteration:   1880, Loss function: 5.983, Average Loss: 5.636, avg. samples / sec: 983.86
Iteration:   1900, Loss function: 5.744, Average Loss: 5.637, avg. samples / sec: 955.92
Iteration:   1920, Loss function: 5.663, Average Loss: 5.637, avg. samples / sec: 984.02
Iteration:   1940, Loss function: 5.945, Average Loss: 5.637, avg. samples / sec: 987.09
Iteration:   1960, Loss function: 5.605, Average Loss: 5.637, avg. samples / sec: 967.39
Iteration:   1980, Loss function: 5.590, Average Loss: 5.636, avg. samples / sec: 985.32
Iteration:   2000, Loss function: 5.482, Average Loss: 5.635, avg. samples / sec: 975.41
Iteration:   2020, Loss function: 5.630, Average Loss: 5.634, avg. samples / sec: 982.87
Iteration:   2040, Loss function: 5.657, Average Loss: 5.633, avg. samples / sec: 965.98
:::MLLOG {"namespace": "", "time_ms": 1639755517668, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517670, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.444, Average Loss: 5.630, avg. samples / sec: 912.62
Iteration:   2080, Loss function: 5.107, Average Loss: 5.628, avg. samples / sec: 919.98
Iteration:   2100, Loss function: 5.408, Average Loss: 5.626, avg. samples / sec: 975.27
Iteration:   2120, Loss function: 5.290, Average Loss: 5.623, avg. samples / sec: 970.03
Iteration:   2140, Loss function: 5.448, Average Loss: 5.619, avg. samples / sec: 943.44
Iteration:   2160, Loss function: 5.336, Average Loss: 5.616, avg. samples / sec: 966.09
Iteration:   2180, Loss function: 5.418, Average Loss: 5.614, avg. samples / sec: 954.81
Iteration:   2200, Loss function: 5.341, Average Loss: 5.609, avg. samples / sec: 969.02
Iteration:   2220, Loss function: 5.427, Average Loss: 5.607, avg. samples / sec: 1000.06
Iteration:   2240, Loss function: 5.410, Average Loss: 5.604, avg. samples / sec: 954.82
Iteration:   2260, Loss function: 5.283, Average Loss: 5.602, avg. samples / sec: 907.91
Iteration:   2280, Loss function: 5.101, Average Loss: 5.598, avg. samples / sec: 899.85
Iteration:   2300, Loss function: 5.038, Average Loss: 5.595, avg. samples / sec: 937.02
Iteration:   2320, Loss function: 5.423, Average Loss: 5.592, avg. samples / sec: 987.97
Iteration:   2340, Loss function: 5.335, Average Loss: 5.589, avg. samples / sec: 975.13
Iteration:   2360, Loss function: 5.351, Average Loss: 5.585, avg. samples / sec: 981.75
Iteration:   2380, Loss function: 5.406, Average Loss: 5.581, avg. samples / sec: 966.76
Iteration:   2400, Loss function: 5.284, Average Loss: 5.576, avg. samples / sec: 961.73
Iteration:   2420, Loss function: 5.508, Average Loss: 5.571, avg. samples / sec: 973.23
Iteration:   2440, Loss function: 5.520, Average Loss: 5.568, avg. samples / sec: 918.05
Iteration:   2460, Loss function: 5.119, Average Loss: 5.564, avg. samples / sec: 888.54
Iteration:   2480, Loss function: 5.578, Average Loss: 5.561, avg. samples / sec: 876.04
Iteration:   2500, Loss function: 5.311, Average Loss: 5.556, avg. samples / sec: 975.49
Iteration:   2520, Loss function: 5.236, Average Loss: 5.551, avg. samples / sec: 965.60
Iteration:   2540, Loss function: 5.496, Average Loss: 5.549, avg. samples / sec: 898.43
Iteration:   2560, Loss function: 5.259, Average Loss: 5.545, avg. samples / sec: 905.39
Iteration:   2580, Loss function: 5.309, Average Loss: 5.541, avg. samples / sec: 939.82
Iteration:   2600, Loss function: 5.628, Average Loss: 5.538, avg. samples / sec: 869.61
Iteration:   2620, Loss function: 5.555, Average Loss: 5.534, avg. samples / sec: 993.41
Iteration:   2640, Loss function: 5.049, Average Loss: 5.531, avg. samples / sec: 971.60
Iteration:   2660, Loss function: 5.431, Average Loss: 5.528, avg. samples / sec: 868.99
Iteration:   2680, Loss function: 5.151, Average Loss: 5.525, avg. samples / sec: 931.23
Iteration:   2700, Loss function: 5.317, Average Loss: 5.520, avg. samples / sec: 900.25
Iteration:   2720, Loss function: 5.349, Average Loss: 5.516, avg. samples / sec: 940.58
Iteration:   2740, Loss function: 5.154, Average Loss: 5.512, avg. samples / sec: 959.41
Iteration:   2760, Loss function: 4.974, Average Loss: 5.506, avg. samples / sec: 907.27
Iteration:   2780, Loss function: 5.483, Average Loss: 5.502, avg. samples / sec: 953.00
Iteration:   2800, Loss function: 5.209, Average Loss: 5.498, avg. samples / sec: 973.25
Iteration:   2820, Loss function: 5.359, Average Loss: 5.494, avg. samples / sec: 992.35
Iteration:   2840, Loss function: 5.174, Average Loss: 5.490, avg. samples / sec: 988.57
Iteration:   2860, Loss function: 5.209, Average Loss: 5.485, avg. samples / sec: 901.97
Iteration:   2880, Loss function: 5.242, Average Loss: 5.480, avg. samples / sec: 965.18
Iteration:   2900, Loss function: 5.141, Average Loss: 5.476, avg. samples / sec: 940.59
Iteration:   2920, Loss function: 5.283, Average Loss: 5.471, avg. samples / sec: 949.69
Iteration:   2940, Loss function: 4.955, Average Loss: 5.466, avg. samples / sec: 926.66
Iteration:   2960, Loss function: 5.319, Average Loss: 5.462, avg. samples / sec: 962.11
Iteration:   2980, Loss function: 5.194, Average Loss: 5.459, avg. samples / sec: 891.08
Iteration:   3000, Loss function: 5.234, Average Loss: 5.453, avg. samples / sec: 990.92
Iteration:   3020, Loss function: 5.240, Average Loss: 5.448, avg. samples / sec: 921.71
Iteration:   3040, Loss function: 5.243, Average Loss: 5.442, avg. samples / sec: 976.91
Iteration:   3060, Loss function: 5.035, Average Loss: 5.437, avg. samples / sec: 983.79
Iteration:   3080, Loss function: 4.829, Average Loss: 5.432, avg. samples / sec: 968.51
:::MLLOG {"namespace": "", "time_ms": 1639755641791, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755641794, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.173, Average Loss: 5.428, avg. samples / sec: 931.35
Iteration:   3120, Loss function: 5.006, Average Loss: 5.422, avg. samples / sec: 894.55
Iteration:   3140, Loss function: 5.079, Average Loss: 5.417, avg. samples / sec: 963.26
Iteration:   3160, Loss function: 5.356, Average Loss: 5.411, avg. samples / sec: 985.83
Iteration:   3180, Loss function: 5.034, Average Loss: 5.406, avg. samples / sec: 962.74
Iteration:   3200, Loss function: 5.348, Average Loss: 5.401, avg. samples / sec: 940.32
Iteration:   3220, Loss function: 5.143, Average Loss: 5.395, avg. samples / sec: 922.30
Iteration:   3240, Loss function: 5.224, Average Loss: 5.390, avg. samples / sec: 933.21
Iteration:   3260, Loss function: 4.991, Average Loss: 5.384, avg. samples / sec: 929.12
Iteration:   3280, Loss function: 4.871, Average Loss: 5.378, avg. samples / sec: 895.50
Iteration:   3300, Loss function: 4.837, Average Loss: 5.372, avg. samples / sec: 975.94
Iteration:   3320, Loss function: 4.961, Average Loss: 5.366, avg. samples / sec: 980.66
Iteration:   3340, Loss function: 5.108, Average Loss: 5.362, avg. samples / sec: 949.97
Iteration:   3360, Loss function: 5.143, Average Loss: 5.356, avg. samples / sec: 941.38
Iteration:   3380, Loss function: 5.195, Average Loss: 5.350, avg. samples / sec: 922.18
Iteration:   3400, Loss function: 4.797, Average Loss: 5.345, avg. samples / sec: 904.64
Iteration:   3420, Loss function: 5.103, Average Loss: 5.339, avg. samples / sec: 971.97
Iteration:   3440, Loss function: 4.959, Average Loss: 5.335, avg. samples / sec: 981.33
Iteration:   3460, Loss function: 5.223, Average Loss: 5.330, avg. samples / sec: 985.43
Iteration:   3480, Loss function: 5.368, Average Loss: 5.327, avg. samples / sec: 898.42
Iteration:   3500, Loss function: 5.309, Average Loss: 5.323, avg. samples / sec: 935.93
Iteration:   3520, Loss function: 5.163, Average Loss: 5.320, avg. samples / sec: 910.67
Iteration:   3540, Loss function: 5.081, Average Loss: 5.315, avg. samples / sec: 943.73
Iteration:   3560, Loss function: 4.874, Average Loss: 5.312, avg. samples / sec: 943.75
Iteration:   3580, Loss function: 5.174, Average Loss: 5.307, avg. samples / sec: 982.65
Iteration:   3600, Loss function: 5.066, Average Loss: 5.302, avg. samples / sec: 973.23
Iteration:   3620, Loss function: 4.770, Average Loss: 5.297, avg. samples / sec: 967.65
Iteration:   3640, Loss function: 4.795, Average Loss: 5.292, avg. samples / sec: 952.20
Iteration:   3660, Loss function: 5.021, Average Loss: 5.288, avg. samples / sec: 912.67
Iteration:   3680, Loss function: 5.148, Average Loss: 5.283, avg. samples / sec: 971.07
Iteration:   3700, Loss function: 4.942, Average Loss: 5.279, avg. samples / sec: 985.42
Iteration:   3720, Loss function: 4.902, Average Loss: 5.273, avg. samples / sec: 968.93
Iteration:   3740, Loss function: 5.037, Average Loss: 5.268, avg. samples / sec: 961.46
Iteration:   3760, Loss function: 4.978, Average Loss: 5.264, avg. samples / sec: 967.76
Iteration:   3780, Loss function: 5.056, Average Loss: 5.260, avg. samples / sec: 929.16
Iteration:   3800, Loss function: 5.215, Average Loss: 5.257, avg. samples / sec: 997.50
Iteration:   3820, Loss function: 5.273, Average Loss: 5.252, avg. samples / sec: 967.83
Iteration:   3840, Loss function: 4.776, Average Loss: 5.247, avg. samples / sec: 971.75
Iteration:   3860, Loss function: 5.024, Average Loss: 5.243, avg. samples / sec: 928.07
Iteration:   3880, Loss function: 4.979, Average Loss: 5.237, avg. samples / sec: 937.05
Iteration:   3900, Loss function: 5.133, Average Loss: 5.232, avg. samples / sec: 953.60
Iteration:   3920, Loss function: 5.198, Average Loss: 5.226, avg. samples / sec: 925.15
Iteration:   3940, Loss function: 4.939, Average Loss: 5.221, avg. samples / sec: 991.88
Iteration:   3960, Loss function: 4.925, Average Loss: 5.217, avg. samples / sec: 890.67
Iteration:   3980, Loss function: 4.876, Average Loss: 5.212, avg. samples / sec: 946.63
Iteration:   4000, Loss function: 5.137, Average Loss: 5.207, avg. samples / sec: 918.30
Iteration:   4020, Loss function: 5.139, Average Loss: 5.202, avg. samples / sec: 919.28
Iteration:   4040, Loss function: 5.137, Average Loss: 5.199, avg. samples / sec: 939.53
Iteration:   4060, Loss function: 5.131, Average Loss: 5.195, avg. samples / sec: 950.31
Iteration:   4080, Loss function: 5.024, Average Loss: 5.190, avg. samples / sec: 981.45
Iteration:   4100, Loss function: 5.027, Average Loss: 5.187, avg. samples / sec: 976.24
:::MLLOG {"namespace": "", "time_ms": 1639755765584, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755765585, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.027, Average Loss: 5.183, avg. samples / sec: 962.03
Iteration:   4140, Loss function: 4.917, Average Loss: 5.178, avg. samples / sec: 958.49
Iteration:   4160, Loss function: 4.890, Average Loss: 5.171, avg. samples / sec: 961.56
Iteration:   4180, Loss function: 5.087, Average Loss: 5.166, avg. samples / sec: 977.53
Iteration:   4200, Loss function: 4.824, Average Loss: 5.161, avg. samples / sec: 948.68
Iteration:   4220, Loss function: 4.914, Average Loss: 5.155, avg. samples / sec: 974.46
Iteration:   4240, Loss function: 4.966, Average Loss: 5.150, avg. samples / sec: 976.38
Iteration:   4260, Loss function: 5.191, Average Loss: 5.146, avg. samples / sec: 888.83
Iteration:   4280, Loss function: 5.019, Average Loss: 5.141, avg. samples / sec: 925.01
Iteration:   4300, Loss function: 4.775, Average Loss: 5.134, avg. samples / sec: 931.67
Iteration:   4320, Loss function: 4.604, Average Loss: 5.129, avg. samples / sec: 978.62
Iteration:   4340, Loss function: 4.799, Average Loss: 5.123, avg. samples / sec: 922.22
Iteration:   4360, Loss function: 4.795, Average Loss: 5.119, avg. samples / sec: 950.57
Iteration:   4380, Loss function: 5.049, Average Loss: 5.115, avg. samples / sec: 838.78
Iteration:   4400, Loss function: 5.092, Average Loss: 5.111, avg. samples / sec: 868.13
Iteration:   4420, Loss function: 4.857, Average Loss: 5.107, avg. samples / sec: 963.11
Iteration:   4440, Loss function: 4.822, Average Loss: 5.102, avg. samples / sec: 971.45
Iteration:   4460, Loss function: 4.990, Average Loss: 5.098, avg. samples / sec: 952.77
Iteration:   4480, Loss function: 5.094, Average Loss: 5.096, avg. samples / sec: 972.39
Iteration:   4500, Loss function: 4.901, Average Loss: 5.094, avg. samples / sec: 997.19
Iteration:   4520, Loss function: 4.729, Average Loss: 5.090, avg. samples / sec: 977.21
Iteration:   4540, Loss function: 5.288, Average Loss: 5.085, avg. samples / sec: 920.20
Iteration:   4560, Loss function: 4.791, Average Loss: 5.082, avg. samples / sec: 949.13
Iteration:   4580, Loss function: 4.663, Average Loss: 5.079, avg. samples / sec: 968.97
Iteration:   4600, Loss function: 5.017, Average Loss: 5.076, avg. samples / sec: 928.67
Iteration:   4620, Loss function: 4.899, Average Loss: 5.071, avg. samples / sec: 879.14
Iteration:   4640, Loss function: 4.930, Average Loss: 5.067, avg. samples / sec: 951.19
Iteration:   4660, Loss function: 4.678, Average Loss: 5.063, avg. samples / sec: 907.60
Iteration:   4680, Loss function: 5.257, Average Loss: 5.058, avg. samples / sec: 944.18
Iteration:   4700, Loss function: 4.687, Average Loss: 5.054, avg. samples / sec: 861.52
Iteration:   4720, Loss function: 4.819, Average Loss: 5.050, avg. samples / sec: 939.71
Iteration:   4740, Loss function: 4.784, Average Loss: 5.045, avg. samples / sec: 917.90
Iteration:   4760, Loss function: 4.772, Average Loss: 5.042, avg. samples / sec: 963.21
Iteration:   4780, Loss function: 4.926, Average Loss: 5.038, avg. samples / sec: 986.24
Iteration:   4800, Loss function: 4.845, Average Loss: 5.035, avg. samples / sec: 927.74
Iteration:   4820, Loss function: 4.759, Average Loss: 5.031, avg. samples / sec: 891.55
Iteration:   4840, Loss function: 4.955, Average Loss: 5.027, avg. samples / sec: 968.33
Iteration:   4860, Loss function: 4.754, Average Loss: 5.023, avg. samples / sec: 993.19
Iteration:   4880, Loss function: 4.928, Average Loss: 5.020, avg. samples / sec: 964.43
Iteration:   4900, Loss function: 4.595, Average Loss: 5.016, avg. samples / sec: 965.70
Iteration:   4920, Loss function: 4.844, Average Loss: 5.012, avg. samples / sec: 968.92
Iteration:   4940, Loss function: 4.638, Average Loss: 5.009, avg. samples / sec: 904.93
Iteration:   4960, Loss function: 4.642, Average Loss: 5.005, avg. samples / sec: 935.83
Iteration:   4980, Loss function: 4.547, Average Loss: 5.001, avg. samples / sec: 962.41
Iteration:   5000, Loss function: 5.114, Average Loss: 4.998, avg. samples / sec: 970.86
Iteration:   5020, Loss function: 4.957, Average Loss: 4.994, avg. samples / sec: 950.35
Iteration:   5040, Loss function: 4.841, Average Loss: 4.991, avg. samples / sec: 942.44
Iteration:   5060, Loss function: 4.896, Average Loss: 4.988, avg. samples / sec: 930.85
Iteration:   5080, Loss function: 4.651, Average Loss: 4.984, avg. samples / sec: 891.98
Iteration:   5100, Loss function: 4.628, Average Loss: 4.981, avg. samples / sec: 966.54
Iteration:   5120, Loss function: 4.664, Average Loss: 4.978, avg. samples / sec: 961.03
Iteration:   5140, Loss function: 4.935, Average Loss: 4.973, avg. samples / sec: 993.36
:::MLLOG {"namespace": "", "time_ms": 1639755890021, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.48 s
:::MLLOG {"namespace": "", "time_ms": 1639755918566, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755918616, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755918617, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.855, Average Loss: 4.969, avg. samples / sec: 73.61
Iteration:   5180, Loss function: 4.873, Average Loss: 4.964, avg. samples / sec: 920.68
DONE (t=5.38s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10830
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21530
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10003
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19141
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13684
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21145
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10830 AP goal: 0.10000
Iteration:   5200, Loss function: 4.744, Average Loss: 4.960, avg. samples / sec: 869.54
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10829926681872805, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925748, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926051, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639755927
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 03:45:27 PM'
START TIMING RUN WAS 2021-12-17 03:33:52 PM
+ echo 'START TIMING RUN WAS 2021-12-17 03:33:52 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 03:45:27 PM'
ENDING TIMING RUN AT 2021-12-17 03:45:27 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 7g.40gb     Device  0: (UUID: MIG-eba8b28b-434d-510c-806c-10304eb92e21)
+ result=695
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,695,nvidia,2021-12-17 03:33:52 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,695,nvidia,2021-12-17 03:33:52 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
