8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60'
Found 1 MIG instances: MIG-e4b043ba-742f-5607-806e-29b77f044f60
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639755233
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 03:33:53 PM'
STARTING TIMING RUN AT 2021-12-17 03:33:53 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 03:33:53 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_16-32-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\6\-\3\2\-\4\2 ]]
+ set +x
Fri Dec 17 15:33:53 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-gdwcn to the sync file ...
Fri Dec 17 15:33:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755235086, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755235208, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3568731443, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3568731443
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639755236776, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755236776, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755236781, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755261261, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755261262, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639755262472, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755262473, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755262706, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755262706, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755262708, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.421, Average Loss: 0.022, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.005, Average Loss: 0.452, avg. samples / sec: 918.26
Iteration:     40, Loss function: 20.862, Average Loss: 0.854, avg. samples / sec: 974.04
Iteration:     60, Loss function: 20.421, Average Loss: 1.244, avg. samples / sec: 946.55
Iteration:     80, Loss function: 19.733, Average Loss: 1.617, avg. samples / sec: 948.86
Iteration:    100, Loss function: 15.220, Average Loss: 1.940, avg. samples / sec: 950.84
Iteration:    120, Loss function: 11.034, Average Loss: 2.147, avg. samples / sec: 935.27
Iteration:    140, Loss function: 9.559, Average Loss: 2.301, avg. samples / sec: 920.28
Iteration:    160, Loss function: 9.165, Average Loss: 2.441, avg. samples / sec: 935.38
Iteration:    180, Loss function: 8.952, Average Loss: 2.570, avg. samples / sec: 945.12
Iteration:    200, Loss function: 8.636, Average Loss: 2.695, avg. samples / sec: 957.58
Iteration:    220, Loss function: 8.546, Average Loss: 2.815, avg. samples / sec: 921.51
Iteration:    240, Loss function: 8.569, Average Loss: 2.934, avg. samples / sec: 943.45
Iteration:    260, Loss function: 8.906, Average Loss: 3.048, avg. samples / sec: 965.64
Iteration:    280, Loss function: 8.493, Average Loss: 3.159, avg. samples / sec: 977.79
Iteration:    300, Loss function: 8.307, Average Loss: 3.263, avg. samples / sec: 935.47
Iteration:    320, Loss function: 8.433, Average Loss: 3.366, avg. samples / sec: 871.69
Iteration:    340, Loss function: 8.296, Average Loss: 3.464, avg. samples / sec: 908.21
Iteration:    360, Loss function: 8.269, Average Loss: 3.558, avg. samples / sec: 898.62
Iteration:    380, Loss function: 8.029, Average Loss: 3.650, avg. samples / sec: 794.57
Iteration:    400, Loss function: 8.078, Average Loss: 3.737, avg. samples / sec: 917.72
Iteration:    420, Loss function: 7.642, Average Loss: 3.819, avg. samples / sec: 864.32
Iteration:    440, Loss function: 7.757, Average Loss: 3.899, avg. samples / sec: 923.53
Iteration:    460, Loss function: 7.935, Average Loss: 3.976, avg. samples / sec: 838.21
Iteration:    480, Loss function: 7.515, Average Loss: 4.049, avg. samples / sec: 956.86
Iteration:    500, Loss function: 7.707, Average Loss: 4.120, avg. samples / sec: 955.36
Iteration:    520, Loss function: 7.661, Average Loss: 4.188, avg. samples / sec: 990.12
Iteration:    540, Loss function: 7.330, Average Loss: 4.254, avg. samples / sec: 971.98
Iteration:    560, Loss function: 7.220, Average Loss: 4.316, avg. samples / sec: 962.63
Iteration:    580, Loss function: 7.270, Average Loss: 4.377, avg. samples / sec: 961.25
Iteration:    600, Loss function: 7.474, Average Loss: 4.436, avg. samples / sec: 970.66
Iteration:    620, Loss function: 7.178, Average Loss: 4.493, avg. samples / sec: 970.52
Iteration:    640, Loss function: 6.929, Average Loss: 4.547, avg. samples / sec: 992.41
Iteration:    660, Loss function: 7.198, Average Loss: 4.599, avg. samples / sec: 910.75
Iteration:    680, Loss function: 7.170, Average Loss: 4.651, avg. samples / sec: 938.84
Iteration:    700, Loss function: 6.999, Average Loss: 4.698, avg. samples / sec: 946.42
Iteration:    720, Loss function: 7.021, Average Loss: 4.746, avg. samples / sec: 938.23
Iteration:    740, Loss function: 6.844, Average Loss: 4.791, avg. samples / sec: 894.67
Iteration:    760, Loss function: 7.127, Average Loss: 4.835, avg. samples / sec: 903.37
Iteration:    780, Loss function: 6.869, Average Loss: 4.877, avg. samples / sec: 914.89
Iteration:    800, Loss function: 7.120, Average Loss: 4.917, avg. samples / sec: 972.10
Iteration:    820, Loss function: 6.851, Average Loss: 4.955, avg. samples / sec: 963.54
Iteration:    840, Loss function: 6.706, Average Loss: 4.990, avg. samples / sec: 954.62
Iteration:    860, Loss function: 6.791, Average Loss: 5.024, avg. samples / sec: 889.46
Iteration:    880, Loss function: 6.812, Average Loss: 5.056, avg. samples / sec: 878.13
Iteration:    900, Loss function: 6.822, Average Loss: 5.087, avg. samples / sec: 964.40
Iteration:    920, Loss function: 6.514, Average Loss: 5.115, avg. samples / sec: 922.22
Iteration:    940, Loss function: 6.818, Average Loss: 5.145, avg. samples / sec: 949.49
Iteration:    960, Loss function: 6.412, Average Loss: 5.174, avg. samples / sec: 945.38
Iteration:    980, Loss function: 6.354, Average Loss: 5.201, avg. samples / sec: 929.79
Iteration:   1000, Loss function: 6.604, Average Loss: 5.227, avg. samples / sec: 995.57
Iteration:   1020, Loss function: 6.251, Average Loss: 5.250, avg. samples / sec: 861.92
:::MLLOG {"namespace": "", "time_ms": 1639755388658, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755388659, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.497, Average Loss: 5.273, avg. samples / sec: 908.52
Iteration:   1060, Loss function: 6.441, Average Loss: 5.297, avg. samples / sec: 945.95
Iteration:   1080, Loss function: 6.218, Average Loss: 5.318, avg. samples / sec: 991.00
Iteration:   1100, Loss function: 6.173, Average Loss: 5.338, avg. samples / sec: 944.35
Iteration:   1120, Loss function: 6.246, Average Loss: 5.357, avg. samples / sec: 890.54
Iteration:   1140, Loss function: 6.400, Average Loss: 5.376, avg. samples / sec: 939.19
Iteration:   1160, Loss function: 6.275, Average Loss: 5.393, avg. samples / sec: 927.23
Iteration:   1180, Loss function: 6.354, Average Loss: 5.410, avg. samples / sec: 934.03
Iteration:   1200, Loss function: 6.385, Average Loss: 5.426, avg. samples / sec: 978.67
Iteration:   1220, Loss function: 6.140, Average Loss: 5.441, avg. samples / sec: 959.94
Iteration:   1240, Loss function: 6.149, Average Loss: 5.453, avg. samples / sec: 1000.20
Iteration:   1260, Loss function: 5.970, Average Loss: 5.465, avg. samples / sec: 906.37
Iteration:   1280, Loss function: 5.878, Average Loss: 5.477, avg. samples / sec: 835.28
Iteration:   1300, Loss function: 6.121, Average Loss: 5.489, avg. samples / sec: 903.41
Iteration:   1320, Loss function: 6.146, Average Loss: 5.501, avg. samples / sec: 896.02
Iteration:   1340, Loss function: 5.863, Average Loss: 5.512, avg. samples / sec: 947.57
Iteration:   1360, Loss function: 5.983, Average Loss: 5.521, avg. samples / sec: 973.66
Iteration:   1380, Loss function: 6.159, Average Loss: 5.531, avg. samples / sec: 971.64
Iteration:   1400, Loss function: 6.252, Average Loss: 5.539, avg. samples / sec: 941.39
Iteration:   1420, Loss function: 5.915, Average Loss: 5.546, avg. samples / sec: 983.82
Iteration:   1440, Loss function: 6.318, Average Loss: 5.554, avg. samples / sec: 929.58
Iteration:   1460, Loss function: 6.004, Average Loss: 5.562, avg. samples / sec: 849.98
Iteration:   1480, Loss function: 5.841, Average Loss: 5.570, avg. samples / sec: 909.01
Iteration:   1500, Loss function: 6.059, Average Loss: 5.579, avg. samples / sec: 959.28
Iteration:   1520, Loss function: 5.976, Average Loss: 5.585, avg. samples / sec: 855.01
Iteration:   1540, Loss function: 5.954, Average Loss: 5.588, avg. samples / sec: 869.86
Iteration:   1560, Loss function: 5.654, Average Loss: 5.593, avg. samples / sec: 944.60
Iteration:   1580, Loss function: 5.580, Average Loss: 5.598, avg. samples / sec: 965.22
Iteration:   1600, Loss function: 6.141, Average Loss: 5.603, avg. samples / sec: 960.59
Iteration:   1620, Loss function: 5.832, Average Loss: 5.607, avg. samples / sec: 922.07
Iteration:   1640, Loss function: 5.770, Average Loss: 5.610, avg. samples / sec: 947.17
Iteration:   1660, Loss function: 5.863, Average Loss: 5.615, avg. samples / sec: 987.86
Iteration:   1680, Loss function: 5.781, Average Loss: 5.619, avg. samples / sec: 938.75
Iteration:   1700, Loss function: 5.305, Average Loss: 5.622, avg. samples / sec: 987.17
Iteration:   1720, Loss function: 5.688, Average Loss: 5.624, avg. samples / sec: 959.51
Iteration:   1740, Loss function: 5.878, Average Loss: 5.627, avg. samples / sec: 939.07
Iteration:   1760, Loss function: 5.621, Average Loss: 5.628, avg. samples / sec: 961.54
Iteration:   1780, Loss function: 5.680, Average Loss: 5.629, avg. samples / sec: 919.81
Iteration:   1800, Loss function: 5.651, Average Loss: 5.630, avg. samples / sec: 991.35
Iteration:   1820, Loss function: 5.951, Average Loss: 5.632, avg. samples / sec: 943.00
Iteration:   1840, Loss function: 5.926, Average Loss: 5.633, avg. samples / sec: 873.81
Iteration:   1860, Loss function: 5.554, Average Loss: 5.633, avg. samples / sec: 964.14
Iteration:   1880, Loss function: 5.844, Average Loss: 5.635, avg. samples / sec: 939.08
Iteration:   1900, Loss function: 5.900, Average Loss: 5.635, avg. samples / sec: 944.82
Iteration:   1920, Loss function: 5.670, Average Loss: 5.635, avg. samples / sec: 986.68
Iteration:   1940, Loss function: 5.753, Average Loss: 5.635, avg. samples / sec: 977.72
Iteration:   1960, Loss function: 5.606, Average Loss: 5.635, avg. samples / sec: 913.03
Iteration:   1980, Loss function: 5.735, Average Loss: 5.634, avg. samples / sec: 883.54
Iteration:   2000, Loss function: 5.714, Average Loss: 5.635, avg. samples / sec: 960.72
Iteration:   2020, Loss function: 5.522, Average Loss: 5.633, avg. samples / sec: 971.30
Iteration:   2040, Loss function: 5.630, Average Loss: 5.632, avg. samples / sec: 975.12
:::MLLOG {"namespace": "", "time_ms": 1639755513633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755513635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.468, Average Loss: 5.630, avg. samples / sec: 964.78
Iteration:   2080, Loss function: 5.071, Average Loss: 5.628, avg. samples / sec: 974.29
Iteration:   2100, Loss function: 5.253, Average Loss: 5.626, avg. samples / sec: 923.84
Iteration:   2120, Loss function: 5.353, Average Loss: 5.624, avg. samples / sec: 964.84
Iteration:   2140, Loss function: 5.174, Average Loss: 5.620, avg. samples / sec: 835.82
Iteration:   2160, Loss function: 5.246, Average Loss: 5.617, avg. samples / sec: 942.37
Iteration:   2180, Loss function: 5.232, Average Loss: 5.615, avg. samples / sec: 963.28
Iteration:   2200, Loss function: 5.389, Average Loss: 5.612, avg. samples / sec: 963.18
Iteration:   2220, Loss function: 5.549, Average Loss: 5.610, avg. samples / sec: 962.43
Iteration:   2240, Loss function: 5.415, Average Loss: 5.608, avg. samples / sec: 979.09
Iteration:   2260, Loss function: 5.622, Average Loss: 5.604, avg. samples / sec: 957.91
Iteration:   2280, Loss function: 5.357, Average Loss: 5.602, avg. samples / sec: 958.89
Iteration:   2300, Loss function: 5.318, Average Loss: 5.599, avg. samples / sec: 936.53
Iteration:   2320, Loss function: 5.228, Average Loss: 5.597, avg. samples / sec: 988.29
Iteration:   2340, Loss function: 5.536, Average Loss: 5.594, avg. samples / sec: 909.41
Iteration:   2360, Loss function: 5.232, Average Loss: 5.590, avg. samples / sec: 967.76
Iteration:   2380, Loss function: 5.582, Average Loss: 5.587, avg. samples / sec: 987.03
Iteration:   2400, Loss function: 5.659, Average Loss: 5.582, avg. samples / sec: 967.43
Iteration:   2420, Loss function: 5.340, Average Loss: 5.578, avg. samples / sec: 888.43
Iteration:   2440, Loss function: 5.525, Average Loss: 5.574, avg. samples / sec: 905.64
Iteration:   2460, Loss function: 5.039, Average Loss: 5.570, avg. samples / sec: 909.33
Iteration:   2480, Loss function: 5.433, Average Loss: 5.567, avg. samples / sec: 967.94
Iteration:   2500, Loss function: 5.453, Average Loss: 5.562, avg. samples / sec: 939.30
Iteration:   2520, Loss function: 5.183, Average Loss: 5.556, avg. samples / sec: 847.12
Iteration:   2540, Loss function: 5.273, Average Loss: 5.553, avg. samples / sec: 952.77
Iteration:   2560, Loss function: 5.398, Average Loss: 5.551, avg. samples / sec: 951.92
Iteration:   2580, Loss function: 5.235, Average Loss: 5.548, avg. samples / sec: 901.88
Iteration:   2600, Loss function: 5.460, Average Loss: 5.545, avg. samples / sec: 931.85
Iteration:   2620, Loss function: 5.408, Average Loss: 5.540, avg. samples / sec: 983.88
Iteration:   2640, Loss function: 5.201, Average Loss: 5.537, avg. samples / sec: 984.41
Iteration:   2660, Loss function: 5.193, Average Loss: 5.533, avg. samples / sec: 985.19
Iteration:   2680, Loss function: 5.165, Average Loss: 5.529, avg. samples / sec: 972.28
Iteration:   2700, Loss function: 5.124, Average Loss: 5.523, avg. samples / sec: 983.55
Iteration:   2720, Loss function: 5.336, Average Loss: 5.519, avg. samples / sec: 965.62
Iteration:   2740, Loss function: 5.035, Average Loss: 5.515, avg. samples / sec: 890.81
Iteration:   2760, Loss function: 4.934, Average Loss: 5.510, avg. samples / sec: 964.03
Iteration:   2780, Loss function: 5.479, Average Loss: 5.507, avg. samples / sec: 981.05
Iteration:   2800, Loss function: 5.183, Average Loss: 5.502, avg. samples / sec: 970.35
Iteration:   2820, Loss function: 5.444, Average Loss: 5.498, avg. samples / sec: 925.60
Iteration:   2840, Loss function: 5.200, Average Loss: 5.494, avg. samples / sec: 982.54
Iteration:   2860, Loss function: 5.016, Average Loss: 5.489, avg. samples / sec: 971.99
Iteration:   2880, Loss function: 5.256, Average Loss: 5.484, avg. samples / sec: 941.10
Iteration:   2900, Loss function: 5.073, Average Loss: 5.480, avg. samples / sec: 941.78
Iteration:   2920, Loss function: 5.273, Average Loss: 5.474, avg. samples / sec: 981.21
Iteration:   2940, Loss function: 5.101, Average Loss: 5.470, avg. samples / sec: 980.66
Iteration:   2960, Loss function: 5.291, Average Loss: 5.466, avg. samples / sec: 923.10
Iteration:   2980, Loss function: 5.256, Average Loss: 5.462, avg. samples / sec: 983.41
Iteration:   3000, Loss function: 5.369, Average Loss: 5.456, avg. samples / sec: 969.21
Iteration:   3020, Loss function: 5.225, Average Loss: 5.449, avg. samples / sec: 960.63
Iteration:   3040, Loss function: 5.379, Average Loss: 5.445, avg. samples / sec: 926.47
Iteration:   3060, Loss function: 5.022, Average Loss: 5.439, avg. samples / sec: 963.93
Iteration:   3080, Loss function: 4.816, Average Loss: 5.434, avg. samples / sec: 972.52
:::MLLOG {"namespace": "", "time_ms": 1639755637206, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755637207, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.030, Average Loss: 5.429, avg. samples / sec: 856.62
Iteration:   3120, Loss function: 4.963, Average Loss: 5.422, avg. samples / sec: 848.97
Iteration:   3140, Loss function: 5.096, Average Loss: 5.417, avg. samples / sec: 965.49
Iteration:   3160, Loss function: 5.531, Average Loss: 5.412, avg. samples / sec: 976.66
Iteration:   3180, Loss function: 5.096, Average Loss: 5.408, avg. samples / sec: 956.50
Iteration:   3200, Loss function: 5.232, Average Loss: 5.403, avg. samples / sec: 925.77
Iteration:   3220, Loss function: 5.229, Average Loss: 5.398, avg. samples / sec: 976.77
Iteration:   3240, Loss function: 5.320, Average Loss: 5.393, avg. samples / sec: 964.86
Iteration:   3260, Loss function: 4.983, Average Loss: 5.387, avg. samples / sec: 934.10
Iteration:   3280, Loss function: 4.870, Average Loss: 5.381, avg. samples / sec: 964.21
Iteration:   3300, Loss function: 4.675, Average Loss: 5.375, avg. samples / sec: 970.15
Iteration:   3320, Loss function: 4.974, Average Loss: 5.370, avg. samples / sec: 956.99
Iteration:   3340, Loss function: 5.033, Average Loss: 5.365, avg. samples / sec: 979.79
Iteration:   3360, Loss function: 5.067, Average Loss: 5.359, avg. samples / sec: 971.11
Iteration:   3380, Loss function: 5.165, Average Loss: 5.353, avg. samples / sec: 962.36
Iteration:   3400, Loss function: 4.882, Average Loss: 5.347, avg. samples / sec: 963.63
Iteration:   3420, Loss function: 4.972, Average Loss: 5.341, avg. samples / sec: 974.40
Iteration:   3440, Loss function: 4.746, Average Loss: 5.336, avg. samples / sec: 986.03
Iteration:   3460, Loss function: 5.411, Average Loss: 5.331, avg. samples / sec: 985.96
Iteration:   3480, Loss function: 5.130, Average Loss: 5.326, avg. samples / sec: 912.84
Iteration:   3500, Loss function: 5.292, Average Loss: 5.322, avg. samples / sec: 919.59
Iteration:   3520, Loss function: 4.948, Average Loss: 5.318, avg. samples / sec: 972.47
Iteration:   3540, Loss function: 4.999, Average Loss: 5.314, avg. samples / sec: 951.36
Iteration:   3560, Loss function: 4.843, Average Loss: 5.309, avg. samples / sec: 972.55
Iteration:   3580, Loss function: 5.282, Average Loss: 5.305, avg. samples / sec: 983.78
Iteration:   3600, Loss function: 5.171, Average Loss: 5.298, avg. samples / sec: 998.69
Iteration:   3620, Loss function: 4.838, Average Loss: 5.293, avg. samples / sec: 919.12
Iteration:   3640, Loss function: 4.797, Average Loss: 5.287, avg. samples / sec: 985.24
Iteration:   3660, Loss function: 5.149, Average Loss: 5.282, avg. samples / sec: 980.94
Iteration:   3680, Loss function: 5.082, Average Loss: 5.277, avg. samples / sec: 955.05
Iteration:   3700, Loss function: 5.105, Average Loss: 5.272, avg. samples / sec: 971.81
Iteration:   3720, Loss function: 4.953, Average Loss: 5.265, avg. samples / sec: 982.77
Iteration:   3740, Loss function: 5.167, Average Loss: 5.261, avg. samples / sec: 945.06
Iteration:   3760, Loss function: 5.135, Average Loss: 5.257, avg. samples / sec: 974.27
Iteration:   3780, Loss function: 5.044, Average Loss: 5.252, avg. samples / sec: 944.83
Iteration:   3800, Loss function: 5.065, Average Loss: 5.249, avg. samples / sec: 877.91
Iteration:   3820, Loss function: 5.340, Average Loss: 5.244, avg. samples / sec: 980.71
Iteration:   3840, Loss function: 4.715, Average Loss: 5.240, avg. samples / sec: 945.37
Iteration:   3860, Loss function: 4.830, Average Loss: 5.235, avg. samples / sec: 921.78
Iteration:   3880, Loss function: 5.160, Average Loss: 5.229, avg. samples / sec: 959.14
Iteration:   3900, Loss function: 5.135, Average Loss: 5.225, avg. samples / sec: 922.61
Iteration:   3920, Loss function: 5.086, Average Loss: 5.220, avg. samples / sec: 946.11
Iteration:   3940, Loss function: 5.168, Average Loss: 5.216, avg. samples / sec: 912.56
Iteration:   3960, Loss function: 4.886, Average Loss: 5.212, avg. samples / sec: 878.54
Iteration:   3980, Loss function: 4.782, Average Loss: 5.208, avg. samples / sec: 965.23
Iteration:   4000, Loss function: 5.167, Average Loss: 5.205, avg. samples / sec: 962.02
Iteration:   4020, Loss function: 4.901, Average Loss: 5.200, avg. samples / sec: 965.04
Iteration:   4040, Loss function: 5.127, Average Loss: 5.196, avg. samples / sec: 919.68
Iteration:   4060, Loss function: 4.957, Average Loss: 5.191, avg. samples / sec: 946.39
Iteration:   4080, Loss function: 5.060, Average Loss: 5.187, avg. samples / sec: 993.09
Iteration:   4100, Loss function: 4.952, Average Loss: 5.183, avg. samples / sec: 987.54
:::MLLOG {"namespace": "", "time_ms": 1639755760431, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755760432, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.886, Average Loss: 5.179, avg. samples / sec: 956.68
Iteration:   4140, Loss function: 5.053, Average Loss: 5.174, avg. samples / sec: 849.10
Iteration:   4160, Loss function: 4.863, Average Loss: 5.168, avg. samples / sec: 896.72
Iteration:   4180, Loss function: 4.695, Average Loss: 5.162, avg. samples / sec: 909.75
Iteration:   4200, Loss function: 4.686, Average Loss: 5.157, avg. samples / sec: 948.05
Iteration:   4220, Loss function: 4.932, Average Loss: 5.152, avg. samples / sec: 923.90
Iteration:   4240, Loss function: 4.906, Average Loss: 5.146, avg. samples / sec: 939.65
Iteration:   4260, Loss function: 5.109, Average Loss: 5.142, avg. samples / sec: 978.09
Iteration:   4280, Loss function: 5.167, Average Loss: 5.136, avg. samples / sec: 974.13
Iteration:   4300, Loss function: 4.729, Average Loss: 5.130, avg. samples / sec: 973.44
Iteration:   4320, Loss function: 4.680, Average Loss: 5.125, avg. samples / sec: 947.13
Iteration:   4340, Loss function: 4.657, Average Loss: 5.119, avg. samples / sec: 922.74
Iteration:   4360, Loss function: 4.934, Average Loss: 5.115, avg. samples / sec: 948.00
Iteration:   4380, Loss function: 4.969, Average Loss: 5.111, avg. samples / sec: 941.66
Iteration:   4400, Loss function: 4.866, Average Loss: 5.106, avg. samples / sec: 895.71
Iteration:   4420, Loss function: 4.785, Average Loss: 5.102, avg. samples / sec: 978.22
Iteration:   4440, Loss function: 4.832, Average Loss: 5.098, avg. samples / sec: 962.15
Iteration:   4460, Loss function: 5.138, Average Loss: 5.094, avg. samples / sec: 982.68
Iteration:   4480, Loss function: 5.111, Average Loss: 5.092, avg. samples / sec: 960.60
Iteration:   4500, Loss function: 4.847, Average Loss: 5.089, avg. samples / sec: 972.96
Iteration:   4520, Loss function: 4.738, Average Loss: 5.084, avg. samples / sec: 923.70
Iteration:   4540, Loss function: 5.199, Average Loss: 5.080, avg. samples / sec: 974.32
Iteration:   4560, Loss function: 4.825, Average Loss: 5.077, avg. samples / sec: 992.08
Iteration:   4580, Loss function: 4.705, Average Loss: 5.074, avg. samples / sec: 959.39
Iteration:   4600, Loss function: 4.950, Average Loss: 5.071, avg. samples / sec: 926.49
Iteration:   4620, Loss function: 4.886, Average Loss: 5.066, avg. samples / sec: 924.97
Iteration:   4640, Loss function: 4.826, Average Loss: 5.061, avg. samples / sec: 983.97
Iteration:   4660, Loss function: 4.723, Average Loss: 5.057, avg. samples / sec: 947.44
Iteration:   4680, Loss function: 5.235, Average Loss: 5.052, avg. samples / sec: 954.95
Iteration:   4700, Loss function: 4.736, Average Loss: 5.048, avg. samples / sec: 922.01
Iteration:   4720, Loss function: 4.818, Average Loss: 5.044, avg. samples / sec: 950.29
Iteration:   4740, Loss function: 4.612, Average Loss: 5.040, avg. samples / sec: 888.56
Iteration:   4760, Loss function: 4.717, Average Loss: 5.036, avg. samples / sec: 959.42
Iteration:   4780, Loss function: 5.044, Average Loss: 5.033, avg. samples / sec: 964.84
Iteration:   4800, Loss function: 4.980, Average Loss: 5.031, avg. samples / sec: 955.43
Iteration:   4820, Loss function: 4.750, Average Loss: 5.027, avg. samples / sec: 954.46
Iteration:   4840, Loss function: 5.139, Average Loss: 5.025, avg. samples / sec: 979.63
Iteration:   4860, Loss function: 4.571, Average Loss: 5.020, avg. samples / sec: 996.27
Iteration:   4880, Loss function: 4.998, Average Loss: 5.016, avg. samples / sec: 980.51
Iteration:   4900, Loss function: 4.663, Average Loss: 5.013, avg. samples / sec: 945.70
Iteration:   4920, Loss function: 4.623, Average Loss: 5.010, avg. samples / sec: 962.85
Iteration:   4940, Loss function: 4.923, Average Loss: 5.006, avg. samples / sec: 929.58
Iteration:   4960, Loss function: 4.698, Average Loss: 5.003, avg. samples / sec: 980.47
Iteration:   4980, Loss function: 4.644, Average Loss: 4.999, avg. samples / sec: 905.04
Iteration:   5000, Loss function: 4.882, Average Loss: 4.996, avg. samples / sec: 974.45
Iteration:   5020, Loss function: 5.017, Average Loss: 4.993, avg. samples / sec: 971.55
Iteration:   5040, Loss function: 4.902, Average Loss: 4.990, avg. samples / sec: 985.84
Iteration:   5060, Loss function: 4.698, Average Loss: 4.987, avg. samples / sec: 968.92
Iteration:   5080, Loss function: 4.528, Average Loss: 4.983, avg. samples / sec: 960.49
Iteration:   5100, Loss function: 4.754, Average Loss: 4.981, avg. samples / sec: 987.73
Iteration:   5120, Loss function: 4.670, Average Loss: 4.977, avg. samples / sec: 965.99
Iteration:   5140, Loss function: 4.815, Average Loss: 4.975, avg. samples / sec: 907.26
:::MLLOG {"namespace": "", "time_ms": 1639755883999, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.26 s
:::MLLOG {"namespace": "", "time_ms": 1639755916318, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755916370, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755916371, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.962, Average Loss: 4.970, avg. samples / sec: 65.83
DONE (t=3.15s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10468
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21580
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09063
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18623
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13747
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20961
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20961
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10468 AP goal: 0.10000
Iteration:   5180, Loss function: 4.829, Average Loss: 4.965, avg. samples / sec: 967.26
:::MLLOG {"namespace": "", "time_ms": 1639755920639, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920640, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10467834872977336, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920640, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920876, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
Fri Dec 17 15:45:23 UTC 2021: done waiting for 1 executions
/tmp/benchmark_all.log
++ date
+ echo 'Fri Dec 17 15:45:23 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755235086, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755235208, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3568731443, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3568731443
:::MLLOG {"namespace": "", "time_ms": 1639755236776, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755236776, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755236780, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755236781, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755261261, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755261262, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639755262472, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755262473, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755262706, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755262706, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755262708, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.421, Average Loss: 0.022, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.005, Average Loss: 0.452, avg. samples / sec: 918.26
Iteration:     40, Loss function: 20.862, Average Loss: 0.854, avg. samples / sec: 974.04
Iteration:     60, Loss function: 20.421, Average Loss: 1.244, avg. samples / sec: 946.55
Iteration:     80, Loss function: 19.733, Average Loss: 1.617, avg. samples / sec: 948.86
Iteration:    100, Loss function: 15.220, Average Loss: 1.940, avg. samples / sec: 950.84
Iteration:    120, Loss function: 11.034, Average Loss: 2.147, avg. samples / sec: 935.27
Iteration:    140, Loss function: 9.559, Average Loss: 2.301, avg. samples / sec: 920.28
Iteration:    160, Loss function: 9.165, Average Loss: 2.441, avg. samples / sec: 935.38
Iteration:    180, Loss function: 8.952, Average Loss: 2.570, avg. samples / sec: 945.12
Iteration:    200, Loss function: 8.636, Average Loss: 2.695, avg. samples / sec: 957.58
Iteration:    220, Loss function: 8.546, Average Loss: 2.815, avg. samples / sec: 921.51
Iteration:    240, Loss function: 8.569, Average Loss: 2.934, avg. samples / sec: 943.45
Iteration:    260, Loss function: 8.906, Average Loss: 3.048, avg. samples / sec: 965.64
Iteration:    280, Loss function: 8.493, Average Loss: 3.159, avg. samples / sec: 977.79
Iteration:    300, Loss function: 8.307, Average Loss: 3.263, avg. samples / sec: 935.47
Iteration:    320, Loss function: 8.433, Average Loss: 3.366, avg. samples / sec: 871.69
Iteration:    340, Loss function: 8.296, Average Loss: 3.464, avg. samples / sec: 908.21
Iteration:    360, Loss function: 8.269, Average Loss: 3.558, avg. samples / sec: 898.62
Iteration:    380, Loss function: 8.029, Average Loss: 3.650, avg. samples / sec: 794.57
Iteration:    400, Loss function: 8.078, Average Loss: 3.737, avg. samples / sec: 917.72
Iteration:    420, Loss function: 7.642, Average Loss: 3.819, avg. samples / sec: 864.32
Iteration:    440, Loss function: 7.757, Average Loss: 3.899, avg. samples / sec: 923.53
Iteration:    460, Loss function: 7.935, Average Loss: 3.976, avg. samples / sec: 838.21
Iteration:    480, Loss function: 7.515, Average Loss: 4.049, avg. samples / sec: 956.86
Iteration:    500, Loss function: 7.707, Average Loss: 4.120, avg. samples / sec: 955.36
Iteration:    520, Loss function: 7.661, Average Loss: 4.188, avg. samples / sec: 990.12
Iteration:    540, Loss function: 7.330, Average Loss: 4.254, avg. samples / sec: 971.98
Iteration:    560, Loss function: 7.220, Average Loss: 4.316, avg. samples / sec: 962.63
Iteration:    580, Loss function: 7.270, Average Loss: 4.377, avg. samples / sec: 961.25
Iteration:    600, Loss function: 7.474, Average Loss: 4.436, avg. samples / sec: 970.66
Iteration:    620, Loss function: 7.178, Average Loss: 4.493, avg. samples / sec: 970.52
Iteration:    640, Loss function: 6.929, Average Loss: 4.547, avg. samples / sec: 992.41
Iteration:    660, Loss function: 7.198, Average Loss: 4.599, avg. samples / sec: 910.75
Iteration:    680, Loss function: 7.170, Average Loss: 4.651, avg. samples / sec: 938.84
Iteration:    700, Loss function: 6.999, Average Loss: 4.698, avg. samples / sec: 946.42
Iteration:    720, Loss function: 7.021, Average Loss: 4.746, avg. samples / sec: 938.23
Iteration:    740, Loss function: 6.844, Average Loss: 4.791, avg. samples / sec: 894.67
Iteration:    760, Loss function: 7.127, Average Loss: 4.835, avg. samples / sec: 903.37
Iteration:    780, Loss function: 6.869, Average Loss: 4.877, avg. samples / sec: 914.89
Iteration:    800, Loss function: 7.120, Average Loss: 4.917, avg. samples / sec: 972.10
Iteration:    820, Loss function: 6.851, Average Loss: 4.955, avg. samples / sec: 963.54
Iteration:    840, Loss function: 6.706, Average Loss: 4.990, avg. samples / sec: 954.62
Iteration:    860, Loss function: 6.791, Average Loss: 5.024, avg. samples / sec: 889.46
Iteration:    880, Loss function: 6.812, Average Loss: 5.056, avg. samples / sec: 878.13
Iteration:    900, Loss function: 6.822, Average Loss: 5.087, avg. samples / sec: 964.40
Iteration:    920, Loss function: 6.514, Average Loss: 5.115, avg. samples / sec: 922.22
Iteration:    940, Loss function: 6.818, Average Loss: 5.145, avg. samples / sec: 949.49
Iteration:    960, Loss function: 6.412, Average Loss: 5.174, avg. samples / sec: 945.38
Iteration:    980, Loss function: 6.354, Average Loss: 5.201, avg. samples / sec: 929.79
Iteration:   1000, Loss function: 6.604, Average Loss: 5.227, avg. samples / sec: 995.57
Iteration:   1020, Loss function: 6.251, Average Loss: 5.250, avg. samples / sec: 861.92
:::MLLOG {"namespace": "", "time_ms": 1639755388658, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755388659, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.497, Average Loss: 5.273, avg. samples / sec: 908.52
Iteration:   1060, Loss function: 6.441, Average Loss: 5.297, avg. samples / sec: 945.95
Iteration:   1080, Loss function: 6.218, Average Loss: 5.318, avg. samples / sec: 991.00
Iteration:   1100, Loss function: 6.173, Average Loss: 5.338, avg. samples / sec: 944.35
Iteration:   1120, Loss function: 6.246, Average Loss: 5.357, avg. samples / sec: 890.54
Iteration:   1140, Loss function: 6.400, Average Loss: 5.376, avg. samples / sec: 939.19
Iteration:   1160, Loss function: 6.275, Average Loss: 5.393, avg. samples / sec: 927.23
Iteration:   1180, Loss function: 6.354, Average Loss: 5.410, avg. samples / sec: 934.03
Iteration:   1200, Loss function: 6.385, Average Loss: 5.426, avg. samples / sec: 978.67
Iteration:   1220, Loss function: 6.140, Average Loss: 5.441, avg. samples / sec: 959.94
Iteration:   1240, Loss function: 6.149, Average Loss: 5.453, avg. samples / sec: 1000.20
Iteration:   1260, Loss function: 5.970, Average Loss: 5.465, avg. samples / sec: 906.37
Iteration:   1280, Loss function: 5.878, Average Loss: 5.477, avg. samples / sec: 835.28
Iteration:   1300, Loss function: 6.121, Average Loss: 5.489, avg. samples / sec: 903.41
Iteration:   1320, Loss function: 6.146, Average Loss: 5.501, avg. samples / sec: 896.02
Iteration:   1340, Loss function: 5.863, Average Loss: 5.512, avg. samples / sec: 947.57
Iteration:   1360, Loss function: 5.983, Average Loss: 5.521, avg. samples / sec: 973.66
Iteration:   1380, Loss function: 6.159, Average Loss: 5.531, avg. samples / sec: 971.64
Iteration:   1400, Loss function: 6.252, Average Loss: 5.539, avg. samples / sec: 941.39
Iteration:   1420, Loss function: 5.915, Average Loss: 5.546, avg. samples / sec: 983.82
Iteration:   1440, Loss function: 6.318, Average Loss: 5.554, avg. samples / sec: 929.58
Iteration:   1460, Loss function: 6.004, Average Loss: 5.562, avg. samples / sec: 849.98
Iteration:   1480, Loss function: 5.841, Average Loss: 5.570, avg. samples / sec: 909.01
Iteration:   1500, Loss function: 6.059, Average Loss: 5.579, avg. samples / sec: 959.28
Iteration:   1520, Loss function: 5.976, Average Loss: 5.585, avg. samples / sec: 855.01
Iteration:   1540, Loss function: 5.954, Average Loss: 5.588, avg. samples / sec: 869.86
Iteration:   1560, Loss function: 5.654, Average Loss: 5.593, avg. samples / sec: 944.60
Iteration:   1580, Loss function: 5.580, Average Loss: 5.598, avg. samples / sec: 965.22
Iteration:   1600, Loss function: 6.141, Average Loss: 5.603, avg. samples / sec: 960.59
Iteration:   1620, Loss function: 5.832, Average Loss: 5.607, avg. samples / sec: 922.07
Iteration:   1640, Loss function: 5.770, Average Loss: 5.610, avg. samples / sec: 947.17
Iteration:   1660, Loss function: 5.863, Average Loss: 5.615, avg. samples / sec: 987.86
Iteration:   1680, Loss function: 5.781, Average Loss: 5.619, avg. samples / sec: 938.75
Iteration:   1700, Loss function: 5.305, Average Loss: 5.622, avg. samples / sec: 987.17
Iteration:   1720, Loss function: 5.688, Average Loss: 5.624, avg. samples / sec: 959.51
Iteration:   1740, Loss function: 5.878, Average Loss: 5.627, avg. samples / sec: 939.07
Iteration:   1760, Loss function: 5.621, Average Loss: 5.628, avg. samples / sec: 961.54
Iteration:   1780, Loss function: 5.680, Average Loss: 5.629, avg. samples / sec: 919.81
Iteration:   1800, Loss function: 5.651, Average Loss: 5.630, avg. samples / sec: 991.35
Iteration:   1820, Loss function: 5.951, Average Loss: 5.632, avg. samples / sec: 943.00
Iteration:   1840, Loss function: 5.926, Average Loss: 5.633, avg. samples / sec: 873.81
Iteration:   1860, Loss function: 5.554, Average Loss: 5.633, avg. samples / sec: 964.14
Iteration:   1880, Loss function: 5.844, Average Loss: 5.635, avg. samples / sec: 939.08
Iteration:   1900, Loss function: 5.900, Average Loss: 5.635, avg. samples / sec: 944.82
Iteration:   1920, Loss function: 5.670, Average Loss: 5.635, avg. samples / sec: 986.68
Iteration:   1940, Loss function: 5.753, Average Loss: 5.635, avg. samples / sec: 977.72
Iteration:   1960, Loss function: 5.606, Average Loss: 5.635, avg. samples / sec: 913.03
Iteration:   1980, Loss function: 5.735, Average Loss: 5.634, avg. samples / sec: 883.54
Iteration:   2000, Loss function: 5.714, Average Loss: 5.635, avg. samples / sec: 960.72
Iteration:   2020, Loss function: 5.522, Average Loss: 5.633, avg. samples / sec: 971.30
Iteration:   2040, Loss function: 5.630, Average Loss: 5.632, avg. samples / sec: 975.12
:::MLLOG {"namespace": "", "time_ms": 1639755513633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755513635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.468, Average Loss: 5.630, avg. samples / sec: 964.78
Iteration:   2080, Loss function: 5.071, Average Loss: 5.628, avg. samples / sec: 974.29
Iteration:   2100, Loss function: 5.253, Average Loss: 5.626, avg. samples / sec: 923.84
Iteration:   2120, Loss function: 5.353, Average Loss: 5.624, avg. samples / sec: 964.84
Iteration:   2140, Loss function: 5.174, Average Loss: 5.620, avg. samples / sec: 835.82
Iteration:   2160, Loss function: 5.246, Average Loss: 5.617, avg. samples / sec: 942.37
Iteration:   2180, Loss function: 5.232, Average Loss: 5.615, avg. samples / sec: 963.28
Iteration:   2200, Loss function: 5.389, Average Loss: 5.612, avg. samples / sec: 963.18
Iteration:   2220, Loss function: 5.549, Average Loss: 5.610, avg. samples / sec: 962.43
Iteration:   2240, Loss function: 5.415, Average Loss: 5.608, avg. samples / sec: 979.09
Iteration:   2260, Loss function: 5.622, Average Loss: 5.604, avg. samples / sec: 957.91
Iteration:   2280, Loss function: 5.357, Average Loss: 5.602, avg. samples / sec: 958.89
Iteration:   2300, Loss function: 5.318, Average Loss: 5.599, avg. samples / sec: 936.53
Iteration:   2320, Loss function: 5.228, Average Loss: 5.597, avg. samples / sec: 988.29
Iteration:   2340, Loss function: 5.536, Average Loss: 5.594, avg. samples / sec: 909.41
Iteration:   2360, Loss function: 5.232, Average Loss: 5.590, avg. samples / sec: 967.76
Iteration:   2380, Loss function: 5.582, Average Loss: 5.587, avg. samples / sec: 987.03
Iteration:   2400, Loss function: 5.659, Average Loss: 5.582, avg. samples / sec: 967.43
Iteration:   2420, Loss function: 5.340, Average Loss: 5.578, avg. samples / sec: 888.43
Iteration:   2440, Loss function: 5.525, Average Loss: 5.574, avg. samples / sec: 905.64
Iteration:   2460, Loss function: 5.039, Average Loss: 5.570, avg. samples / sec: 909.33
Iteration:   2480, Loss function: 5.433, Average Loss: 5.567, avg. samples / sec: 967.94
Iteration:   2500, Loss function: 5.453, Average Loss: 5.562, avg. samples / sec: 939.30
Iteration:   2520, Loss function: 5.183, Average Loss: 5.556, avg. samples / sec: 847.12
Iteration:   2540, Loss function: 5.273, Average Loss: 5.553, avg. samples / sec: 952.77
Iteration:   2560, Loss function: 5.398, Average Loss: 5.551, avg. samples / sec: 951.92
Iteration:   2580, Loss function: 5.235, Average Loss: 5.548, avg. samples / sec: 901.88
Iteration:   2600, Loss function: 5.460, Average Loss: 5.545, avg. samples / sec: 931.85
Iteration:   2620, Loss function: 5.408, Average Loss: 5.540, avg. samples / sec: 983.88
Iteration:   2640, Loss function: 5.201, Average Loss: 5.537, avg. samples / sec: 984.41
Iteration:   2660, Loss function: 5.193, Average Loss: 5.533, avg. samples / sec: 985.19
Iteration:   2680, Loss function: 5.165, Average Loss: 5.529, avg. samples / sec: 972.28
Iteration:   2700, Loss function: 5.124, Average Loss: 5.523, avg. samples / sec: 983.55
Iteration:   2720, Loss function: 5.336, Average Loss: 5.519, avg. samples / sec: 965.62
Iteration:   2740, Loss function: 5.035, Average Loss: 5.515, avg. samples / sec: 890.81
Iteration:   2760, Loss function: 4.934, Average Loss: 5.510, avg. samples / sec: 964.03
Iteration:   2780, Loss function: 5.479, Average Loss: 5.507, avg. samples / sec: 981.05
Iteration:   2800, Loss function: 5.183, Average Loss: 5.502, avg. samples / sec: 970.35
Iteration:   2820, Loss function: 5.444, Average Loss: 5.498, avg. samples / sec: 925.60
Iteration:   2840, Loss function: 5.200, Average Loss: 5.494, avg. samples / sec: 982.54
Iteration:   2860, Loss function: 5.016, Average Loss: 5.489, avg. samples / sec: 971.99
Iteration:   2880, Loss function: 5.256, Average Loss: 5.484, avg. samples / sec: 941.10
Iteration:   2900, Loss function: 5.073, Average Loss: 5.480, avg. samples / sec: 941.78
Iteration:   2920, Loss function: 5.273, Average Loss: 5.474, avg. samples / sec: 981.21
Iteration:   2940, Loss function: 5.101, Average Loss: 5.470, avg. samples / sec: 980.66
Iteration:   2960, Loss function: 5.291, Average Loss: 5.466, avg. samples / sec: 923.10
Iteration:   2980, Loss function: 5.256, Average Loss: 5.462, avg. samples / sec: 983.41
Iteration:   3000, Loss function: 5.369, Average Loss: 5.456, avg. samples / sec: 969.21
Iteration:   3020, Loss function: 5.225, Average Loss: 5.449, avg. samples / sec: 960.63
Iteration:   3040, Loss function: 5.379, Average Loss: 5.445, avg. samples / sec: 926.47
Iteration:   3060, Loss function: 5.022, Average Loss: 5.439, avg. samples / sec: 963.93
Iteration:   3080, Loss function: 4.816, Average Loss: 5.434, avg. samples / sec: 972.52
:::MLLOG {"namespace": "", "time_ms": 1639755637206, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755637207, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.030, Average Loss: 5.429, avg. samples / sec: 856.62
Iteration:   3120, Loss function: 4.963, Average Loss: 5.422, avg. samples / sec: 848.97
Iteration:   3140, Loss function: 5.096, Average Loss: 5.417, avg. samples / sec: 965.49
Iteration:   3160, Loss function: 5.531, Average Loss: 5.412, avg. samples / sec: 976.66
Iteration:   3180, Loss function: 5.096, Average Loss: 5.408, avg. samples / sec: 956.50
Iteration:   3200, Loss function: 5.232, Average Loss: 5.403, avg. samples / sec: 925.77
Iteration:   3220, Loss function: 5.229, Average Loss: 5.398, avg. samples / sec: 976.77
Iteration:   3240, Loss function: 5.320, Average Loss: 5.393, avg. samples / sec: 964.86
Iteration:   3260, Loss function: 4.983, Average Loss: 5.387, avg. samples / sec: 934.10
Iteration:   3280, Loss function: 4.870, Average Loss: 5.381, avg. samples / sec: 964.21
Iteration:   3300, Loss function: 4.675, Average Loss: 5.375, avg. samples / sec: 970.15
Iteration:   3320, Loss function: 4.974, Average Loss: 5.370, avg. samples / sec: 956.99
Iteration:   3340, Loss function: 5.033, Average Loss: 5.365, avg. samples / sec: 979.79
Iteration:   3360, Loss function: 5.067, Average Loss: 5.359, avg. samples / sec: 971.11
Iteration:   3380, Loss function: 5.165, Average Loss: 5.353, avg. samples / sec: 962.36
Iteration:   3400, Loss function: 4.882, Average Loss: 5.347, avg. samples / sec: 963.63
Iteration:   3420, Loss function: 4.972, Average Loss: 5.341, avg. samples / sec: 974.40
Iteration:   3440, Loss function: 4.746, Average Loss: 5.336, avg. samples / sec: 986.03
Iteration:   3460, Loss function: 5.411, Average Loss: 5.331, avg. samples / sec: 985.96
Iteration:   3480, Loss function: 5.130, Average Loss: 5.326, avg. samples / sec: 912.84
Iteration:   3500, Loss function: 5.292, Average Loss: 5.322, avg. samples / sec: 919.59
Iteration:   3520, Loss function: 4.948, Average Loss: 5.318, avg. samples / sec: 972.47
Iteration:   3540, Loss function: 4.999, Average Loss: 5.314, avg. samples / sec: 951.36
Iteration:   3560, Loss function: 4.843, Average Loss: 5.309, avg. samples / sec: 972.55
Iteration:   3580, Loss function: 5.282, Average Loss: 5.305, avg. samples / sec: 983.78
Iteration:   3600, Loss function: 5.171, Average Loss: 5.298, avg. samples / sec: 998.69
Iteration:   3620, Loss function: 4.838, Average Loss: 5.293, avg. samples / sec: 919.12
Iteration:   3640, Loss function: 4.797, Average Loss: 5.287, avg. samples / sec: 985.24
Iteration:   3660, Loss function: 5.149, Average Loss: 5.282, avg. samples / sec: 980.94
Iteration:   3680, Loss function: 5.082, Average Loss: 5.277, avg. samples / sec: 955.05
Iteration:   3700, Loss function: 5.105, Average Loss: 5.272, avg. samples / sec: 971.81
Iteration:   3720, Loss function: 4.953, Average Loss: 5.265, avg. samples / sec: 982.77
Iteration:   3740, Loss function: 5.167, Average Loss: 5.261, avg. samples / sec: 945.06
Iteration:   3760, Loss function: 5.135, Average Loss: 5.257, avg. samples / sec: 974.27
Iteration:   3780, Loss function: 5.044, Average Loss: 5.252, avg. samples / sec: 944.83
Iteration:   3800, Loss function: 5.065, Average Loss: 5.249, avg. samples / sec: 877.91
Iteration:   3820, Loss function: 5.340, Average Loss: 5.244, avg. samples / sec: 980.71
Iteration:   3840, Loss function: 4.715, Average Loss: 5.240, avg. samples / sec: 945.37
Iteration:   3860, Loss function: 4.830, Average Loss: 5.235, avg. samples / sec: 921.78
Iteration:   3880, Loss function: 5.160, Average Loss: 5.229, avg. samples / sec: 959.14
Iteration:   3900, Loss function: 5.135, Average Loss: 5.225, avg. samples / sec: 922.61
Iteration:   3920, Loss function: 5.086, Average Loss: 5.220, avg. samples / sec: 946.11
Iteration:   3940, Loss function: 5.168, Average Loss: 5.216, avg. samples / sec: 912.56
Iteration:   3960, Loss function: 4.886, Average Loss: 5.212, avg. samples / sec: 878.54
Iteration:   3980, Loss function: 4.782, Average Loss: 5.208, avg. samples / sec: 965.23
Iteration:   4000, Loss function: 5.167, Average Loss: 5.205, avg. samples / sec: 962.02
Iteration:   4020, Loss function: 4.901, Average Loss: 5.200, avg. samples / sec: 965.04
Iteration:   4040, Loss function: 5.127, Average Loss: 5.196, avg. samples / sec: 919.68
Iteration:   4060, Loss function: 4.957, Average Loss: 5.191, avg. samples / sec: 946.39
Iteration:   4080, Loss function: 5.060, Average Loss: 5.187, avg. samples / sec: 993.09
Iteration:   4100, Loss function: 4.952, Average Loss: 5.183, avg. samples / sec: 987.54
:::MLLOG {"namespace": "", "time_ms": 1639755760431, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755760432, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.886, Average Loss: 5.179, avg. samples / sec: 956.68
Iteration:   4140, Loss function: 5.053, Average Loss: 5.174, avg. samples / sec: 849.10
Iteration:   4160, Loss function: 4.863, Average Loss: 5.168, avg. samples / sec: 896.72
Iteration:   4180, Loss function: 4.695, Average Loss: 5.162, avg. samples / sec: 909.75
Iteration:   4200, Loss function: 4.686, Average Loss: 5.157, avg. samples / sec: 948.05
Iteration:   4220, Loss function: 4.932, Average Loss: 5.152, avg. samples / sec: 923.90
Iteration:   4240, Loss function: 4.906, Average Loss: 5.146, avg. samples / sec: 939.65
Iteration:   4260, Loss function: 5.109, Average Loss: 5.142, avg. samples / sec: 978.09
Iteration:   4280, Loss function: 5.167, Average Loss: 5.136, avg. samples / sec: 974.13
Iteration:   4300, Loss function: 4.729, Average Loss: 5.130, avg. samples / sec: 973.44
Iteration:   4320, Loss function: 4.680, Average Loss: 5.125, avg. samples / sec: 947.13
Iteration:   4340, Loss function: 4.657, Average Loss: 5.119, avg. samples / sec: 922.74
Iteration:   4360, Loss function: 4.934, Average Loss: 5.115, avg. samples / sec: 948.00
Iteration:   4380, Loss function: 4.969, Average Loss: 5.111, avg. samples / sec: 941.66
Iteration:   4400, Loss function: 4.866, Average Loss: 5.106, avg. samples / sec: 895.71
Iteration:   4420, Loss function: 4.785, Average Loss: 5.102, avg. samples / sec: 978.22
Iteration:   4440, Loss function: 4.832, Average Loss: 5.098, avg. samples / sec: 962.15
Iteration:   4460, Loss function: 5.138, Average Loss: 5.094, avg. samples / sec: 982.68
Iteration:   4480, Loss function: 5.111, Average Loss: 5.092, avg. samples / sec: 960.60
Iteration:   4500, Loss function: 4.847, Average Loss: 5.089, avg. samples / sec: 972.96
Iteration:   4520, Loss function: 4.738, Average Loss: 5.084, avg. samples / sec: 923.70
Iteration:   4540, Loss function: 5.199, Average Loss: 5.080, avg. samples / sec: 974.32
Iteration:   4560, Loss function: 4.825, Average Loss: 5.077, avg. samples / sec: 992.08
Iteration:   4580, Loss function: 4.705, Average Loss: 5.074, avg. samples / sec: 959.39
Iteration:   4600, Loss function: 4.950, Average Loss: 5.071, avg. samples / sec: 926.49
Iteration:   4620, Loss function: 4.886, Average Loss: 5.066, avg. samples / sec: 924.97
Iteration:   4640, Loss function: 4.826, Average Loss: 5.061, avg. samples / sec: 983.97
Iteration:   4660, Loss function: 4.723, Average Loss: 5.057, avg. samples / sec: 947.44
Iteration:   4680, Loss function: 5.235, Average Loss: 5.052, avg. samples / sec: 954.95
Iteration:   4700, Loss function: 4.736, Average Loss: 5.048, avg. samples / sec: 922.01
Iteration:   4720, Loss function: 4.818, Average Loss: 5.044, avg. samples / sec: 950.29
Iteration:   4740, Loss function: 4.612, Average Loss: 5.040, avg. samples / sec: 888.56
Iteration:   4760, Loss function: 4.717, Average Loss: 5.036, avg. samples / sec: 959.42
Iteration:   4780, Loss function: 5.044, Average Loss: 5.033, avg. samples / sec: 964.84
Iteration:   4800, Loss function: 4.980, Average Loss: 5.031, avg. samples / sec: 955.43
Iteration:   4820, Loss function: 4.750, Average Loss: 5.027, avg. samples / sec: 954.46
Iteration:   4840, Loss function: 5.139, Average Loss: 5.025, avg. samples / sec: 979.63
Iteration:   4860, Loss function: 4.571, Average Loss: 5.020, avg. samples / sec: 996.27
Iteration:   4880, Loss function: 4.998, Average Loss: 5.016, avg. samples / sec: 980.51
Iteration:   4900, Loss function: 4.663, Average Loss: 5.013, avg. samples / sec: 945.70
Iteration:   4920, Loss function: 4.623, Average Loss: 5.010, avg. samples / sec: 962.85
Iteration:   4940, Loss function: 4.923, Average Loss: 5.006, avg. samples / sec: 929.58
Iteration:   4960, Loss function: 4.698, Average Loss: 5.003, avg. samples / sec: 980.47
Iteration:   4980, Loss function: 4.644, Average Loss: 4.999, avg. samples / sec: 905.04
Iteration:   5000, Loss function: 4.882, Average Loss: 4.996, avg. samples / sec: 974.45
Iteration:   5020, Loss function: 5.017, Average Loss: 4.993, avg. samples / sec: 971.55
Iteration:   5040, Loss function: 4.902, Average Loss: 4.990, avg. samples / sec: 985.84
Iteration:   5060, Loss function: 4.698, Average Loss: 4.987, avg. samples / sec: 968.92
Iteration:   5080, Loss function: 4.528, Average Loss: 4.983, avg. samples / sec: 960.49
Iteration:   5100, Loss function: 4.754, Average Loss: 4.981, avg. samples / sec: 987.73
Iteration:   5120, Loss function: 4.670, Average Loss: 4.977, avg. samples / sec: 965.99
Iteration:   5140, Loss function: 4.815, Average Loss: 4.975, avg. samples / sec: 907.26
:::MLLOG {"namespace": "", "time_ms": 1639755883999, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.26 s
:::MLLOG {"namespace": "", "time_ms": 1639755916318, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755916370, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755916371, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.962, Average Loss: 4.970, avg. samples / sec: 65.83
DONE (t=3.15s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10468
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21580
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09063
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18623
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13747
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19780
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20961
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20961
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10468 AP goal: 0.10000
Iteration:   5180, Loss function: 4.829, Average Loss: 4.965, avg. samples / sec: 967.26
:::MLLOG {"namespace": "", "time_ms": 1639755920639, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920640, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10467834872977336, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920640, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755920876, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
START TIMING RUN WAS 2021-12-17 03:33:53 PM
ENDING TIMING RUN AT 2021-12-17 03:45:23 PM
+ end=1639755923
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 03:45:23 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 03:33:53 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 03:45:23 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 7g.40gb     Device  0: (UUID: MIG-e4b043ba-742f-5607-806e-29b77f044f60)
+ result=690
RESULT,SINGLE_STAGE_DETECTOR,,690,nvidia,2021-12-17 03:33:53 PM
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,690,nvidia,2021-12-17 03:33:53 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
