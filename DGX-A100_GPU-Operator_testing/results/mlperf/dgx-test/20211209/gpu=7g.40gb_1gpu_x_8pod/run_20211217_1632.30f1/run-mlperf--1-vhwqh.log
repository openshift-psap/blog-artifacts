8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8
+ echo 'Found 1 MIG instances: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639755232
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 03:33:52 PM'
STARTING TIMING RUN AT 2021-12-17 03:33:52 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 03:33:52 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
Running in parallel mode.
Patching 'bind_launch.py' to err-exit on failure ...
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_16-32-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\6\-\3\2\-\4\2 ]]
+ set +x
Fri Dec 17 15:33:52 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-vhwqh to the sync file ...
run-mlperf--1-vhwqh Found 3 Pods, waiting to have 8 ...
     1	run-mlperf--1-lg9lr
     2	run-mlperf--1-4w4z8
     3	run-mlperf--1-vhwqh
Fri Dec 17 15:33:57 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755239495, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755239668, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2577025096, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2577025096
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639755241739, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755241739, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266037, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266037, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639755267644, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755267645, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.23s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755268153, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755268154, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755268156, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.446, Average Loss: 0.022, avg. samples / sec: 4.37
Iteration:     20, Loss function: 21.058, Average Loss: 0.452, avg. samples / sec: 855.79
Iteration:     40, Loss function: 20.784, Average Loss: 0.853, avg. samples / sec: 857.38
Iteration:     60, Loss function: 20.437, Average Loss: 1.242, avg. samples / sec: 909.08
Iteration:     80, Loss function: 19.611, Average Loss: 1.613, avg. samples / sec: 891.75
Iteration:    100, Loss function: 14.387, Average Loss: 1.926, avg. samples / sec: 887.83
Iteration:    120, Loss function: 10.432, Average Loss: 2.122, avg. samples / sec: 927.90
Iteration:    140, Loss function: 9.667, Average Loss: 2.279, avg. samples / sec: 901.77
Iteration:    160, Loss function: 9.041, Average Loss: 2.417, avg. samples / sec: 923.52
Iteration:    180, Loss function: 8.846, Average Loss: 2.546, avg. samples / sec: 955.70
Iteration:    200, Loss function: 8.609, Average Loss: 2.672, avg. samples / sec: 941.71
Iteration:    220, Loss function: 8.650, Average Loss: 2.792, avg. samples / sec: 867.64
Iteration:    240, Loss function: 8.716, Average Loss: 2.908, avg. samples / sec: 946.99
Iteration:    260, Loss function: 8.920, Average Loss: 3.025, avg. samples / sec: 963.61
Iteration:    280, Loss function: 8.442, Average Loss: 3.135, avg. samples / sec: 912.79
Iteration:    300, Loss function: 8.444, Average Loss: 3.238, avg. samples / sec: 967.90
Iteration:    320, Loss function: 8.388, Average Loss: 3.339, avg. samples / sec: 987.56
Iteration:    340, Loss function: 8.312, Average Loss: 3.437, avg. samples / sec: 979.54
Iteration:    360, Loss function: 8.099, Average Loss: 3.535, avg. samples / sec: 994.62
Iteration:    380, Loss function: 7.887, Average Loss: 3.627, avg. samples / sec: 963.36
Iteration:    400, Loss function: 7.834, Average Loss: 3.711, avg. samples / sec: 845.49
Iteration:    420, Loss function: 7.448, Average Loss: 3.792, avg. samples / sec: 813.48
Iteration:    440, Loss function: 7.844, Average Loss: 3.871, avg. samples / sec: 951.79
Iteration:    460, Loss function: 7.649, Average Loss: 3.948, avg. samples / sec: 974.02
Iteration:    480, Loss function: 7.430, Average Loss: 4.021, avg. samples / sec: 909.17
Iteration:    500, Loss function: 7.605, Average Loss: 4.093, avg. samples / sec: 931.85
Iteration:    520, Loss function: 7.436, Average Loss: 4.161, avg. samples / sec: 892.13
Iteration:    540, Loss function: 7.433, Average Loss: 4.226, avg. samples / sec: 978.81
Iteration:    560, Loss function: 7.085, Average Loss: 4.290, avg. samples / sec: 974.60
Iteration:    580, Loss function: 7.194, Average Loss: 4.352, avg. samples / sec: 873.14
Iteration:    600, Loss function: 7.332, Average Loss: 4.411, avg. samples / sec: 935.56
Iteration:    620, Loss function: 7.110, Average Loss: 4.467, avg. samples / sec: 922.09
Iteration:    640, Loss function: 6.917, Average Loss: 4.522, avg. samples / sec: 939.07
Iteration:    660, Loss function: 7.104, Average Loss: 4.574, avg. samples / sec: 906.06
Iteration:    680, Loss function: 7.250, Average Loss: 4.624, avg. samples / sec: 969.74
Iteration:    700, Loss function: 6.891, Average Loss: 4.672, avg. samples / sec: 993.56
Iteration:    720, Loss function: 7.002, Average Loss: 4.721, avg. samples / sec: 915.03
Iteration:    740, Loss function: 6.890, Average Loss: 4.766, avg. samples / sec: 913.42
Iteration:    760, Loss function: 7.066, Average Loss: 4.811, avg. samples / sec: 978.68
Iteration:    780, Loss function: 6.815, Average Loss: 4.853, avg. samples / sec: 926.27
Iteration:    800, Loss function: 7.052, Average Loss: 4.892, avg. samples / sec: 962.96
Iteration:    820, Loss function: 6.725, Average Loss: 4.930, avg. samples / sec: 976.98
Iteration:    840, Loss function: 6.588, Average Loss: 4.966, avg. samples / sec: 959.25
Iteration:    860, Loss function: 6.745, Average Loss: 5.000, avg. samples / sec: 955.85
Iteration:    880, Loss function: 6.794, Average Loss: 5.034, avg. samples / sec: 982.36
Iteration:    900, Loss function: 6.717, Average Loss: 5.065, avg. samples / sec: 930.48
Iteration:    920, Loss function: 6.539, Average Loss: 5.095, avg. samples / sec: 944.67
Iteration:    940, Loss function: 6.792, Average Loss: 5.124, avg. samples / sec: 987.49
Iteration:    960, Loss function: 6.449, Average Loss: 5.152, avg. samples / sec: 987.15
Iteration:    980, Loss function: 6.257, Average Loss: 5.179, avg. samples / sec: 971.99
Iteration:   1000, Loss function: 6.425, Average Loss: 5.204, avg. samples / sec: 971.98
Iteration:   1020, Loss function: 6.378, Average Loss: 5.229, avg. samples / sec: 955.90
:::MLLOG {"namespace": "", "time_ms": 1639755393615, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755393617, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.597, Average Loss: 5.253, avg. samples / sec: 890.77
Iteration:   1060, Loss function: 6.325, Average Loss: 5.275, avg. samples / sec: 974.00
Iteration:   1080, Loss function: 6.310, Average Loss: 5.297, avg. samples / sec: 900.47
Iteration:   1100, Loss function: 6.225, Average Loss: 5.317, avg. samples / sec: 966.70
Iteration:   1120, Loss function: 6.308, Average Loss: 5.336, avg. samples / sec: 926.03
Iteration:   1140, Loss function: 6.459, Average Loss: 5.356, avg. samples / sec: 989.19
Iteration:   1160, Loss function: 5.960, Average Loss: 5.372, avg. samples / sec: 924.49
Iteration:   1180, Loss function: 6.246, Average Loss: 5.390, avg. samples / sec: 953.22
Iteration:   1200, Loss function: 6.188, Average Loss: 5.407, avg. samples / sec: 936.25
Iteration:   1220, Loss function: 6.038, Average Loss: 5.422, avg. samples / sec: 984.97
Iteration:   1240, Loss function: 6.009, Average Loss: 5.435, avg. samples / sec: 949.56
Iteration:   1260, Loss function: 6.067, Average Loss: 5.447, avg. samples / sec: 981.79
Iteration:   1280, Loss function: 5.920, Average Loss: 5.460, avg. samples / sec: 1000.78
Iteration:   1300, Loss function: 6.064, Average Loss: 5.473, avg. samples / sec: 973.81
Iteration:   1320, Loss function: 6.150, Average Loss: 5.486, avg. samples / sec: 977.30
Iteration:   1340, Loss function: 5.894, Average Loss: 5.496, avg. samples / sec: 983.61
Iteration:   1360, Loss function: 5.976, Average Loss: 5.507, avg. samples / sec: 983.59
Iteration:   1380, Loss function: 6.068, Average Loss: 5.517, avg. samples / sec: 975.68
Iteration:   1400, Loss function: 6.057, Average Loss: 5.527, avg. samples / sec: 941.68
Iteration:   1420, Loss function: 5.846, Average Loss: 5.535, avg. samples / sec: 985.92
Iteration:   1440, Loss function: 6.265, Average Loss: 5.542, avg. samples / sec: 990.20
Iteration:   1460, Loss function: 6.082, Average Loss: 5.551, avg. samples / sec: 943.01
Iteration:   1480, Loss function: 6.027, Average Loss: 5.559, avg. samples / sec: 960.43
Iteration:   1500, Loss function: 6.059, Average Loss: 5.568, avg. samples / sec: 971.22
Iteration:   1520, Loss function: 5.919, Average Loss: 5.573, avg. samples / sec: 923.93
Iteration:   1540, Loss function: 6.122, Average Loss: 5.578, avg. samples / sec: 885.60
Iteration:   1560, Loss function: 5.867, Average Loss: 5.584, avg. samples / sec: 918.94
Iteration:   1580, Loss function: 5.546, Average Loss: 5.589, avg. samples / sec: 866.51
Iteration:   1600, Loss function: 6.249, Average Loss: 5.594, avg. samples / sec: 924.91
Iteration:   1620, Loss function: 5.650, Average Loss: 5.600, avg. samples / sec: 954.68
Iteration:   1640, Loss function: 5.852, Average Loss: 5.603, avg. samples / sec: 958.00
Iteration:   1660, Loss function: 5.930, Average Loss: 5.607, avg. samples / sec: 931.47
Iteration:   1680, Loss function: 5.642, Average Loss: 5.609, avg. samples / sec: 989.32
Iteration:   1700, Loss function: 5.279, Average Loss: 5.612, avg. samples / sec: 933.46
Iteration:   1720, Loss function: 5.624, Average Loss: 5.614, avg. samples / sec: 937.45
Iteration:   1740, Loss function: 5.878, Average Loss: 5.617, avg. samples / sec: 976.02
Iteration:   1760, Loss function: 5.520, Average Loss: 5.620, avg. samples / sec: 967.45
Iteration:   1780, Loss function: 5.694, Average Loss: 5.622, avg. samples / sec: 963.40
Iteration:   1800, Loss function: 5.472, Average Loss: 5.625, avg. samples / sec: 920.67
Iteration:   1820, Loss function: 6.012, Average Loss: 5.627, avg. samples / sec: 974.32
Iteration:   1840, Loss function: 5.894, Average Loss: 5.629, avg. samples / sec: 904.22
Iteration:   1860, Loss function: 5.639, Average Loss: 5.629, avg. samples / sec: 964.71
Iteration:   1880, Loss function: 5.861, Average Loss: 5.632, avg. samples / sec: 965.86
Iteration:   1900, Loss function: 5.683, Average Loss: 5.632, avg. samples / sec: 913.41
Iteration:   1920, Loss function: 5.761, Average Loss: 5.632, avg. samples / sec: 960.99
Iteration:   1940, Loss function: 5.753, Average Loss: 5.632, avg. samples / sec: 910.25
Iteration:   1960, Loss function: 5.732, Average Loss: 5.632, avg. samples / sec: 974.50
Iteration:   1980, Loss function: 5.755, Average Loss: 5.632, avg. samples / sec: 974.24
Iteration:   2000, Loss function: 5.632, Average Loss: 5.632, avg. samples / sec: 906.96
Iteration:   2020, Loss function: 5.628, Average Loss: 5.631, avg. samples / sec: 957.73
Iteration:   2040, Loss function: 5.558, Average Loss: 5.631, avg. samples / sec: 991.38
:::MLLOG {"namespace": "", "time_ms": 1639755517202, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517203, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.481, Average Loss: 5.629, avg. samples / sec: 916.85
Iteration:   2080, Loss function: 4.999, Average Loss: 5.626, avg. samples / sec: 990.32
Iteration:   2100, Loss function: 5.553, Average Loss: 5.624, avg. samples / sec: 982.70
Iteration:   2120, Loss function: 5.311, Average Loss: 5.621, avg. samples / sec: 963.61
Iteration:   2140, Loss function: 5.428, Average Loss: 5.618, avg. samples / sec: 954.52
Iteration:   2160, Loss function: 5.393, Average Loss: 5.616, avg. samples / sec: 972.99
Iteration:   2180, Loss function: 5.464, Average Loss: 5.613, avg. samples / sec: 929.56
Iteration:   2200, Loss function: 5.723, Average Loss: 5.610, avg. samples / sec: 992.44
Iteration:   2220, Loss function: 5.560, Average Loss: 5.609, avg. samples / sec: 972.99
Iteration:   2240, Loss function: 5.287, Average Loss: 5.606, avg. samples / sec: 969.65
Iteration:   2260, Loss function: 5.296, Average Loss: 5.603, avg. samples / sec: 917.98
Iteration:   2280, Loss function: 5.355, Average Loss: 5.600, avg. samples / sec: 984.83
Iteration:   2300, Loss function: 5.204, Average Loss: 5.597, avg. samples / sec: 973.15
Iteration:   2320, Loss function: 5.507, Average Loss: 5.595, avg. samples / sec: 991.25
Iteration:   2340, Loss function: 5.444, Average Loss: 5.592, avg. samples / sec: 992.31
Iteration:   2360, Loss function: 5.359, Average Loss: 5.588, avg. samples / sec: 970.33
Iteration:   2380, Loss function: 5.418, Average Loss: 5.586, avg. samples / sec: 977.46
Iteration:   2400, Loss function: 5.501, Average Loss: 5.582, avg. samples / sec: 963.47
Iteration:   2420, Loss function: 5.527, Average Loss: 5.578, avg. samples / sec: 952.45
Iteration:   2440, Loss function: 5.407, Average Loss: 5.576, avg. samples / sec: 976.60
Iteration:   2460, Loss function: 5.134, Average Loss: 5.573, avg. samples / sec: 974.15
Iteration:   2480, Loss function: 5.449, Average Loss: 5.569, avg. samples / sec: 985.92
Iteration:   2500, Loss function: 5.241, Average Loss: 5.565, avg. samples / sec: 978.41
Iteration:   2520, Loss function: 5.386, Average Loss: 5.559, avg. samples / sec: 943.58
Iteration:   2540, Loss function: 5.481, Average Loss: 5.556, avg. samples / sec: 893.60
Iteration:   2560, Loss function: 5.222, Average Loss: 5.553, avg. samples / sec: 976.23
Iteration:   2580, Loss function: 5.239, Average Loss: 5.550, avg. samples / sec: 968.96
Iteration:   2600, Loss function: 5.378, Average Loss: 5.547, avg. samples / sec: 984.96
Iteration:   2620, Loss function: 5.532, Average Loss: 5.542, avg. samples / sec: 979.86
Iteration:   2640, Loss function: 5.322, Average Loss: 5.539, avg. samples / sec: 906.60
Iteration:   2660, Loss function: 5.277, Average Loss: 5.537, avg. samples / sec: 886.72
Iteration:   2680, Loss function: 5.148, Average Loss: 5.533, avg. samples / sec: 974.12
Iteration:   2700, Loss function: 5.263, Average Loss: 5.529, avg. samples / sec: 927.76
Iteration:   2720, Loss function: 5.433, Average Loss: 5.525, avg. samples / sec: 938.15
Iteration:   2740, Loss function: 5.126, Average Loss: 5.520, avg. samples / sec: 908.96
Iteration:   2760, Loss function: 5.210, Average Loss: 5.515, avg. samples / sec: 963.08
Iteration:   2780, Loss function: 5.775, Average Loss: 5.512, avg. samples / sec: 986.44
Iteration:   2800, Loss function: 5.186, Average Loss: 5.508, avg. samples / sec: 1002.47
Iteration:   2820, Loss function: 5.408, Average Loss: 5.503, avg. samples / sec: 946.53
Iteration:   2840, Loss function: 5.056, Average Loss: 5.499, avg. samples / sec: 952.21
Iteration:   2860, Loss function: 5.044, Average Loss: 5.493, avg. samples / sec: 958.20
Iteration:   2880, Loss function: 5.319, Average Loss: 5.489, avg. samples / sec: 978.67
Iteration:   2900, Loss function: 5.068, Average Loss: 5.484, avg. samples / sec: 954.12
Iteration:   2920, Loss function: 5.281, Average Loss: 5.478, avg. samples / sec: 908.10
Iteration:   2940, Loss function: 5.083, Average Loss: 5.473, avg. samples / sec: 982.42
Iteration:   2960, Loss function: 5.309, Average Loss: 5.469, avg. samples / sec: 995.41
Iteration:   2980, Loss function: 5.243, Average Loss: 5.466, avg. samples / sec: 965.92
Iteration:   3000, Loss function: 5.311, Average Loss: 5.460, avg. samples / sec: 966.75
Iteration:   3020, Loss function: 5.257, Average Loss: 5.453, avg. samples / sec: 871.85
Iteration:   3040, Loss function: 5.384, Average Loss: 5.448, avg. samples / sec: 977.21
Iteration:   3060, Loss function: 4.929, Average Loss: 5.443, avg. samples / sec: 908.25
Iteration:   3080, Loss function: 4.937, Average Loss: 5.438, avg. samples / sec: 941.00
:::MLLOG {"namespace": "", "time_ms": 1639755639492, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755639494, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.264, Average Loss: 5.432, avg. samples / sec: 952.47
Iteration:   3120, Loss function: 4.879, Average Loss: 5.425, avg. samples / sec: 931.09
Iteration:   3140, Loss function: 5.115, Average Loss: 5.420, avg. samples / sec: 890.06
Iteration:   3160, Loss function: 5.443, Average Loss: 5.414, avg. samples / sec: 899.51
Iteration:   3180, Loss function: 5.251, Average Loss: 5.409, avg. samples / sec: 970.05
Iteration:   3200, Loss function: 5.088, Average Loss: 5.404, avg. samples / sec: 938.72
Iteration:   3220, Loss function: 5.160, Average Loss: 5.398, avg. samples / sec: 967.18
Iteration:   3240, Loss function: 5.129, Average Loss: 5.393, avg. samples / sec: 989.77
Iteration:   3260, Loss function: 4.893, Average Loss: 5.388, avg. samples / sec: 977.01
Iteration:   3280, Loss function: 4.828, Average Loss: 5.382, avg. samples / sec: 900.08
Iteration:   3300, Loss function: 4.729, Average Loss: 5.375, avg. samples / sec: 858.89
Iteration:   3320, Loss function: 5.005, Average Loss: 5.371, avg. samples / sec: 960.35
Iteration:   3340, Loss function: 5.029, Average Loss: 5.366, avg. samples / sec: 959.76
Iteration:   3360, Loss function: 5.158, Average Loss: 5.361, avg. samples / sec: 971.90
Iteration:   3380, Loss function: 5.334, Average Loss: 5.355, avg. samples / sec: 942.43
Iteration:   3400, Loss function: 4.733, Average Loss: 5.350, avg. samples / sec: 950.57
Iteration:   3420, Loss function: 5.284, Average Loss: 5.345, avg. samples / sec: 915.09
Iteration:   3440, Loss function: 4.802, Average Loss: 5.340, avg. samples / sec: 923.76
Iteration:   3460, Loss function: 5.165, Average Loss: 5.335, avg. samples / sec: 995.66
Iteration:   3480, Loss function: 5.069, Average Loss: 5.330, avg. samples / sec: 893.78
Iteration:   3500, Loss function: 5.216, Average Loss: 5.326, avg. samples / sec: 958.36
Iteration:   3520, Loss function: 5.187, Average Loss: 5.323, avg. samples / sec: 987.68
Iteration:   3540, Loss function: 4.831, Average Loss: 5.318, avg. samples / sec: 913.16
Iteration:   3560, Loss function: 4.898, Average Loss: 5.314, avg. samples / sec: 963.90
Iteration:   3580, Loss function: 5.137, Average Loss: 5.310, avg. samples / sec: 988.85
Iteration:   3600, Loss function: 5.271, Average Loss: 5.304, avg. samples / sec: 980.11
Iteration:   3620, Loss function: 5.095, Average Loss: 5.301, avg. samples / sec: 936.71
Iteration:   3640, Loss function: 4.908, Average Loss: 5.296, avg. samples / sec: 958.75
Iteration:   3660, Loss function: 5.058, Average Loss: 5.291, avg. samples / sec: 933.02
Iteration:   3680, Loss function: 5.168, Average Loss: 5.285, avg. samples / sec: 899.89
Iteration:   3700, Loss function: 4.909, Average Loss: 5.280, avg. samples / sec: 949.16
Iteration:   3720, Loss function: 4.903, Average Loss: 5.273, avg. samples / sec: 896.23
Iteration:   3740, Loss function: 5.127, Average Loss: 5.268, avg. samples / sec: 959.94
Iteration:   3760, Loss function: 5.074, Average Loss: 5.264, avg. samples / sec: 923.36
Iteration:   3780, Loss function: 5.095, Average Loss: 5.260, avg. samples / sec: 969.34
Iteration:   3800, Loss function: 5.212, Average Loss: 5.256, avg. samples / sec: 938.69
Iteration:   3820, Loss function: 5.346, Average Loss: 5.252, avg. samples / sec: 938.04
Iteration:   3840, Loss function: 4.808, Average Loss: 5.247, avg. samples / sec: 987.41
Iteration:   3860, Loss function: 4.978, Average Loss: 5.242, avg. samples / sec: 986.93
Iteration:   3880, Loss function: 5.055, Average Loss: 5.237, avg. samples / sec: 969.04
Iteration:   3900, Loss function: 5.172, Average Loss: 5.233, avg. samples / sec: 920.88
Iteration:   3920, Loss function: 5.117, Average Loss: 5.227, avg. samples / sec: 966.94
Iteration:   3940, Loss function: 5.060, Average Loss: 5.222, avg. samples / sec: 975.08
Iteration:   3960, Loss function: 4.795, Average Loss: 5.218, avg. samples / sec: 944.03
Iteration:   3980, Loss function: 4.857, Average Loss: 5.212, avg. samples / sec: 932.12
Iteration:   4000, Loss function: 5.008, Average Loss: 5.208, avg. samples / sec: 874.47
Iteration:   4020, Loss function: 4.858, Average Loss: 5.203, avg. samples / sec: 904.93
Iteration:   4040, Loss function: 5.045, Average Loss: 5.199, avg. samples / sec: 967.10
Iteration:   4060, Loss function: 5.335, Average Loss: 5.195, avg. samples / sec: 946.47
Iteration:   4080, Loss function: 4.948, Average Loss: 5.191, avg. samples / sec: 967.88
Iteration:   4100, Loss function: 5.062, Average Loss: 5.188, avg. samples / sec: 992.60
:::MLLOG {"namespace": "", "time_ms": 1639755763690, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755763692, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.914, Average Loss: 5.183, avg. samples / sec: 977.72
Iteration:   4140, Loss function: 4.947, Average Loss: 5.178, avg. samples / sec: 900.91
Iteration:   4160, Loss function: 5.003, Average Loss: 5.171, avg. samples / sec: 982.47
Iteration:   4180, Loss function: 5.039, Average Loss: 5.165, avg. samples / sec: 982.11
Iteration:   4200, Loss function: 4.785, Average Loss: 5.161, avg. samples / sec: 986.45
Iteration:   4220, Loss function: 4.761, Average Loss: 5.157, avg. samples / sec: 987.27
Iteration:   4240, Loss function: 4.879, Average Loss: 5.153, avg. samples / sec: 911.19
Iteration:   4260, Loss function: 5.188, Average Loss: 5.149, avg. samples / sec: 915.42
Iteration:   4280, Loss function: 5.136, Average Loss: 5.143, avg. samples / sec: 887.47
Iteration:   4300, Loss function: 4.898, Average Loss: 5.137, avg. samples / sec: 963.75
Iteration:   4320, Loss function: 4.889, Average Loss: 5.132, avg. samples / sec: 951.36
Iteration:   4340, Loss function: 4.773, Average Loss: 5.127, avg. samples / sec: 955.90
Iteration:   4360, Loss function: 4.892, Average Loss: 5.122, avg. samples / sec: 914.73
Iteration:   4380, Loss function: 5.145, Average Loss: 5.118, avg. samples / sec: 972.54
Iteration:   4400, Loss function: 4.773, Average Loss: 5.114, avg. samples / sec: 917.19
Iteration:   4420, Loss function: 4.936, Average Loss: 5.110, avg. samples / sec: 938.95
Iteration:   4440, Loss function: 4.860, Average Loss: 5.105, avg. samples / sec: 892.06
Iteration:   4460, Loss function: 5.190, Average Loss: 5.101, avg. samples / sec: 951.84
Iteration:   4480, Loss function: 5.002, Average Loss: 5.097, avg. samples / sec: 956.44
Iteration:   4500, Loss function: 4.966, Average Loss: 5.094, avg. samples / sec: 921.67
Iteration:   4520, Loss function: 4.820, Average Loss: 5.090, avg. samples / sec: 941.37
Iteration:   4540, Loss function: 5.021, Average Loss: 5.086, avg. samples / sec: 976.70
Iteration:   4560, Loss function: 4.662, Average Loss: 5.081, avg. samples / sec: 993.09
Iteration:   4580, Loss function: 4.781, Average Loss: 5.078, avg. samples / sec: 975.92
Iteration:   4600, Loss function: 4.760, Average Loss: 5.075, avg. samples / sec: 965.71
Iteration:   4620, Loss function: 4.854, Average Loss: 5.071, avg. samples / sec: 951.24
Iteration:   4640, Loss function: 4.753, Average Loss: 5.066, avg. samples / sec: 972.04
Iteration:   4660, Loss function: 4.677, Average Loss: 5.062, avg. samples / sec: 929.02
Iteration:   4680, Loss function: 5.314, Average Loss: 5.058, avg. samples / sec: 972.74
Iteration:   4700, Loss function: 4.920, Average Loss: 5.055, avg. samples / sec: 972.31
Iteration:   4720, Loss function: 4.891, Average Loss: 5.052, avg. samples / sec: 969.86
Iteration:   4740, Loss function: 4.646, Average Loss: 5.047, avg. samples / sec: 946.10
Iteration:   4760, Loss function: 4.590, Average Loss: 5.043, avg. samples / sec: 971.19
Iteration:   4780, Loss function: 4.951, Average Loss: 5.039, avg. samples / sec: 936.13
Iteration:   4800, Loss function: 4.846, Average Loss: 5.036, avg. samples / sec: 855.46
Iteration:   4820, Loss function: 4.764, Average Loss: 5.032, avg. samples / sec: 941.47
Iteration:   4840, Loss function: 5.355, Average Loss: 5.029, avg. samples / sec: 982.78
Iteration:   4860, Loss function: 4.559, Average Loss: 5.024, avg. samples / sec: 979.61
Iteration:   4880, Loss function: 5.067, Average Loss: 5.020, avg. samples / sec: 982.20
Iteration:   4900, Loss function: 4.540, Average Loss: 5.016, avg. samples / sec: 985.61
Iteration:   4920, Loss function: 4.849, Average Loss: 5.014, avg. samples / sec: 981.85
Iteration:   4940, Loss function: 4.644, Average Loss: 5.009, avg. samples / sec: 922.97
Iteration:   4960, Loss function: 4.670, Average Loss: 5.006, avg. samples / sec: 936.77
Iteration:   4980, Loss function: 4.459, Average Loss: 5.001, avg. samples / sec: 937.00
Iteration:   5000, Loss function: 4.967, Average Loss: 4.997, avg. samples / sec: 895.88
Iteration:   5020, Loss function: 5.107, Average Loss: 4.994, avg. samples / sec: 949.92
Iteration:   5040, Loss function: 5.007, Average Loss: 4.991, avg. samples / sec: 969.06
Iteration:   5060, Loss function: 4.883, Average Loss: 4.988, avg. samples / sec: 924.19
Iteration:   5080, Loss function: 4.617, Average Loss: 4.983, avg. samples / sec: 961.77
Iteration:   5100, Loss function: 4.911, Average Loss: 4.982, avg. samples / sec: 920.40
Iteration:   5120, Loss function: 4.449, Average Loss: 4.978, avg. samples / sec: 911.78
Iteration:   5140, Loss function: 4.834, Average Loss: 4.974, avg. samples / sec: 984.15
:::MLLOG {"namespace": "", "time_ms": 1639755887514, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.15 s
:::MLLOG {"namespace": "", "time_ms": 1639755918743, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755918806, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755918806, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.97s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.871, Average Loss: 4.970, avg. samples / sec: 67.31
Iteration:   5180, Loss function: 4.842, Average Loss: 4.966, avg. samples / sec: 780.46
DONE (t=6.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10762
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22324
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09421
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19571
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20740
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22012
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22012
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10762 AP goal: 0.10000
Iteration:   5200, Loss function: 4.562, Average Loss: 4.962, avg. samples / sec: 894.90
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10761727552427536, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926706, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 15:45:28 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 15:45:28 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755239495, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755239668, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2577025096, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2577025096
:::MLLOG {"namespace": "", "time_ms": 1639755241739, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755241739, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755241743, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755241744, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266037, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266037, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639755267644, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755267645, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.23s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755268153, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755268154, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755268156, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.446, Average Loss: 0.022, avg. samples / sec: 4.37
Iteration:     20, Loss function: 21.058, Average Loss: 0.452, avg. samples / sec: 855.79
Iteration:     40, Loss function: 20.784, Average Loss: 0.853, avg. samples / sec: 857.38
Iteration:     60, Loss function: 20.437, Average Loss: 1.242, avg. samples / sec: 909.08
Iteration:     80, Loss function: 19.611, Average Loss: 1.613, avg. samples / sec: 891.75
Iteration:    100, Loss function: 14.387, Average Loss: 1.926, avg. samples / sec: 887.83
Iteration:    120, Loss function: 10.432, Average Loss: 2.122, avg. samples / sec: 927.90
Iteration:    140, Loss function: 9.667, Average Loss: 2.279, avg. samples / sec: 901.77
Iteration:    160, Loss function: 9.041, Average Loss: 2.417, avg. samples / sec: 923.52
Iteration:    180, Loss function: 8.846, Average Loss: 2.546, avg. samples / sec: 955.70
Iteration:    200, Loss function: 8.609, Average Loss: 2.672, avg. samples / sec: 941.71
Iteration:    220, Loss function: 8.650, Average Loss: 2.792, avg. samples / sec: 867.64
Iteration:    240, Loss function: 8.716, Average Loss: 2.908, avg. samples / sec: 946.99
Iteration:    260, Loss function: 8.920, Average Loss: 3.025, avg. samples / sec: 963.61
Iteration:    280, Loss function: 8.442, Average Loss: 3.135, avg. samples / sec: 912.79
Iteration:    300, Loss function: 8.444, Average Loss: 3.238, avg. samples / sec: 967.90
Iteration:    320, Loss function: 8.388, Average Loss: 3.339, avg. samples / sec: 987.56
Iteration:    340, Loss function: 8.312, Average Loss: 3.437, avg. samples / sec: 979.54
Iteration:    360, Loss function: 8.099, Average Loss: 3.535, avg. samples / sec: 994.62
Iteration:    380, Loss function: 7.887, Average Loss: 3.627, avg. samples / sec: 963.36
Iteration:    400, Loss function: 7.834, Average Loss: 3.711, avg. samples / sec: 845.49
Iteration:    420, Loss function: 7.448, Average Loss: 3.792, avg. samples / sec: 813.48
Iteration:    440, Loss function: 7.844, Average Loss: 3.871, avg. samples / sec: 951.79
Iteration:    460, Loss function: 7.649, Average Loss: 3.948, avg. samples / sec: 974.02
Iteration:    480, Loss function: 7.430, Average Loss: 4.021, avg. samples / sec: 909.17
Iteration:    500, Loss function: 7.605, Average Loss: 4.093, avg. samples / sec: 931.85
Iteration:    520, Loss function: 7.436, Average Loss: 4.161, avg. samples / sec: 892.13
Iteration:    540, Loss function: 7.433, Average Loss: 4.226, avg. samples / sec: 978.81
Iteration:    560, Loss function: 7.085, Average Loss: 4.290, avg. samples / sec: 974.60
Iteration:    580, Loss function: 7.194, Average Loss: 4.352, avg. samples / sec: 873.14
Iteration:    600, Loss function: 7.332, Average Loss: 4.411, avg. samples / sec: 935.56
Iteration:    620, Loss function: 7.110, Average Loss: 4.467, avg. samples / sec: 922.09
Iteration:    640, Loss function: 6.917, Average Loss: 4.522, avg. samples / sec: 939.07
Iteration:    660, Loss function: 7.104, Average Loss: 4.574, avg. samples / sec: 906.06
Iteration:    680, Loss function: 7.250, Average Loss: 4.624, avg. samples / sec: 969.74
Iteration:    700, Loss function: 6.891, Average Loss: 4.672, avg. samples / sec: 993.56
Iteration:    720, Loss function: 7.002, Average Loss: 4.721, avg. samples / sec: 915.03
Iteration:    740, Loss function: 6.890, Average Loss: 4.766, avg. samples / sec: 913.42
Iteration:    760, Loss function: 7.066, Average Loss: 4.811, avg. samples / sec: 978.68
Iteration:    780, Loss function: 6.815, Average Loss: 4.853, avg. samples / sec: 926.27
Iteration:    800, Loss function: 7.052, Average Loss: 4.892, avg. samples / sec: 962.96
Iteration:    820, Loss function: 6.725, Average Loss: 4.930, avg. samples / sec: 976.98
Iteration:    840, Loss function: 6.588, Average Loss: 4.966, avg. samples / sec: 959.25
Iteration:    860, Loss function: 6.745, Average Loss: 5.000, avg. samples / sec: 955.85
Iteration:    880, Loss function: 6.794, Average Loss: 5.034, avg. samples / sec: 982.36
Iteration:    900, Loss function: 6.717, Average Loss: 5.065, avg. samples / sec: 930.48
Iteration:    920, Loss function: 6.539, Average Loss: 5.095, avg. samples / sec: 944.67
Iteration:    940, Loss function: 6.792, Average Loss: 5.124, avg. samples / sec: 987.49
Iteration:    960, Loss function: 6.449, Average Loss: 5.152, avg. samples / sec: 987.15
Iteration:    980, Loss function: 6.257, Average Loss: 5.179, avg. samples / sec: 971.99
Iteration:   1000, Loss function: 6.425, Average Loss: 5.204, avg. samples / sec: 971.98
Iteration:   1020, Loss function: 6.378, Average Loss: 5.229, avg. samples / sec: 955.90
:::MLLOG {"namespace": "", "time_ms": 1639755393615, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755393617, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.597, Average Loss: 5.253, avg. samples / sec: 890.77
Iteration:   1060, Loss function: 6.325, Average Loss: 5.275, avg. samples / sec: 974.00
Iteration:   1080, Loss function: 6.310, Average Loss: 5.297, avg. samples / sec: 900.47
Iteration:   1100, Loss function: 6.225, Average Loss: 5.317, avg. samples / sec: 966.70
Iteration:   1120, Loss function: 6.308, Average Loss: 5.336, avg. samples / sec: 926.03
Iteration:   1140, Loss function: 6.459, Average Loss: 5.356, avg. samples / sec: 989.19
Iteration:   1160, Loss function: 5.960, Average Loss: 5.372, avg. samples / sec: 924.49
Iteration:   1180, Loss function: 6.246, Average Loss: 5.390, avg. samples / sec: 953.22
Iteration:   1200, Loss function: 6.188, Average Loss: 5.407, avg. samples / sec: 936.25
Iteration:   1220, Loss function: 6.038, Average Loss: 5.422, avg. samples / sec: 984.97
Iteration:   1240, Loss function: 6.009, Average Loss: 5.435, avg. samples / sec: 949.56
Iteration:   1260, Loss function: 6.067, Average Loss: 5.447, avg. samples / sec: 981.79
Iteration:   1280, Loss function: 5.920, Average Loss: 5.460, avg. samples / sec: 1000.78
Iteration:   1300, Loss function: 6.064, Average Loss: 5.473, avg. samples / sec: 973.81
Iteration:   1320, Loss function: 6.150, Average Loss: 5.486, avg. samples / sec: 977.30
Iteration:   1340, Loss function: 5.894, Average Loss: 5.496, avg. samples / sec: 983.61
Iteration:   1360, Loss function: 5.976, Average Loss: 5.507, avg. samples / sec: 983.59
Iteration:   1380, Loss function: 6.068, Average Loss: 5.517, avg. samples / sec: 975.68
Iteration:   1400, Loss function: 6.057, Average Loss: 5.527, avg. samples / sec: 941.68
Iteration:   1420, Loss function: 5.846, Average Loss: 5.535, avg. samples / sec: 985.92
Iteration:   1440, Loss function: 6.265, Average Loss: 5.542, avg. samples / sec: 990.20
Iteration:   1460, Loss function: 6.082, Average Loss: 5.551, avg. samples / sec: 943.01
Iteration:   1480, Loss function: 6.027, Average Loss: 5.559, avg. samples / sec: 960.43
Iteration:   1500, Loss function: 6.059, Average Loss: 5.568, avg. samples / sec: 971.22
Iteration:   1520, Loss function: 5.919, Average Loss: 5.573, avg. samples / sec: 923.93
Iteration:   1540, Loss function: 6.122, Average Loss: 5.578, avg. samples / sec: 885.60
Iteration:   1560, Loss function: 5.867, Average Loss: 5.584, avg. samples / sec: 918.94
Iteration:   1580, Loss function: 5.546, Average Loss: 5.589, avg. samples / sec: 866.51
Iteration:   1600, Loss function: 6.249, Average Loss: 5.594, avg. samples / sec: 924.91
Iteration:   1620, Loss function: 5.650, Average Loss: 5.600, avg. samples / sec: 954.68
Iteration:   1640, Loss function: 5.852, Average Loss: 5.603, avg. samples / sec: 958.00
Iteration:   1660, Loss function: 5.930, Average Loss: 5.607, avg. samples / sec: 931.47
Iteration:   1680, Loss function: 5.642, Average Loss: 5.609, avg. samples / sec: 989.32
Iteration:   1700, Loss function: 5.279, Average Loss: 5.612, avg. samples / sec: 933.46
Iteration:   1720, Loss function: 5.624, Average Loss: 5.614, avg. samples / sec: 937.45
Iteration:   1740, Loss function: 5.878, Average Loss: 5.617, avg. samples / sec: 976.02
Iteration:   1760, Loss function: 5.520, Average Loss: 5.620, avg. samples / sec: 967.45
Iteration:   1780, Loss function: 5.694, Average Loss: 5.622, avg. samples / sec: 963.40
Iteration:   1800, Loss function: 5.472, Average Loss: 5.625, avg. samples / sec: 920.67
Iteration:   1820, Loss function: 6.012, Average Loss: 5.627, avg. samples / sec: 974.32
Iteration:   1840, Loss function: 5.894, Average Loss: 5.629, avg. samples / sec: 904.22
Iteration:   1860, Loss function: 5.639, Average Loss: 5.629, avg. samples / sec: 964.71
Iteration:   1880, Loss function: 5.861, Average Loss: 5.632, avg. samples / sec: 965.86
Iteration:   1900, Loss function: 5.683, Average Loss: 5.632, avg. samples / sec: 913.41
Iteration:   1920, Loss function: 5.761, Average Loss: 5.632, avg. samples / sec: 960.99
Iteration:   1940, Loss function: 5.753, Average Loss: 5.632, avg. samples / sec: 910.25
Iteration:   1960, Loss function: 5.732, Average Loss: 5.632, avg. samples / sec: 974.50
Iteration:   1980, Loss function: 5.755, Average Loss: 5.632, avg. samples / sec: 974.24
Iteration:   2000, Loss function: 5.632, Average Loss: 5.632, avg. samples / sec: 906.96
Iteration:   2020, Loss function: 5.628, Average Loss: 5.631, avg. samples / sec: 957.73
Iteration:   2040, Loss function: 5.558, Average Loss: 5.631, avg. samples / sec: 991.38
:::MLLOG {"namespace": "", "time_ms": 1639755517202, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517203, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.481, Average Loss: 5.629, avg. samples / sec: 916.85
Iteration:   2080, Loss function: 4.999, Average Loss: 5.626, avg. samples / sec: 990.32
Iteration:   2100, Loss function: 5.553, Average Loss: 5.624, avg. samples / sec: 982.70
Iteration:   2120, Loss function: 5.311, Average Loss: 5.621, avg. samples / sec: 963.61
Iteration:   2140, Loss function: 5.428, Average Loss: 5.618, avg. samples / sec: 954.52
Iteration:   2160, Loss function: 5.393, Average Loss: 5.616, avg. samples / sec: 972.99
Iteration:   2180, Loss function: 5.464, Average Loss: 5.613, avg. samples / sec: 929.56
Iteration:   2200, Loss function: 5.723, Average Loss: 5.610, avg. samples / sec: 992.44
Iteration:   2220, Loss function: 5.560, Average Loss: 5.609, avg. samples / sec: 972.99
Iteration:   2240, Loss function: 5.287, Average Loss: 5.606, avg. samples / sec: 969.65
Iteration:   2260, Loss function: 5.296, Average Loss: 5.603, avg. samples / sec: 917.98
Iteration:   2280, Loss function: 5.355, Average Loss: 5.600, avg. samples / sec: 984.83
Iteration:   2300, Loss function: 5.204, Average Loss: 5.597, avg. samples / sec: 973.15
Iteration:   2320, Loss function: 5.507, Average Loss: 5.595, avg. samples / sec: 991.25
Iteration:   2340, Loss function: 5.444, Average Loss: 5.592, avg. samples / sec: 992.31
Iteration:   2360, Loss function: 5.359, Average Loss: 5.588, avg. samples / sec: 970.33
Iteration:   2380, Loss function: 5.418, Average Loss: 5.586, avg. samples / sec: 977.46
Iteration:   2400, Loss function: 5.501, Average Loss: 5.582, avg. samples / sec: 963.47
Iteration:   2420, Loss function: 5.527, Average Loss: 5.578, avg. samples / sec: 952.45
Iteration:   2440, Loss function: 5.407, Average Loss: 5.576, avg. samples / sec: 976.60
Iteration:   2460, Loss function: 5.134, Average Loss: 5.573, avg. samples / sec: 974.15
Iteration:   2480, Loss function: 5.449, Average Loss: 5.569, avg. samples / sec: 985.92
Iteration:   2500, Loss function: 5.241, Average Loss: 5.565, avg. samples / sec: 978.41
Iteration:   2520, Loss function: 5.386, Average Loss: 5.559, avg. samples / sec: 943.58
Iteration:   2540, Loss function: 5.481, Average Loss: 5.556, avg. samples / sec: 893.60
Iteration:   2560, Loss function: 5.222, Average Loss: 5.553, avg. samples / sec: 976.23
Iteration:   2580, Loss function: 5.239, Average Loss: 5.550, avg. samples / sec: 968.96
Iteration:   2600, Loss function: 5.378, Average Loss: 5.547, avg. samples / sec: 984.96
Iteration:   2620, Loss function: 5.532, Average Loss: 5.542, avg. samples / sec: 979.86
Iteration:   2640, Loss function: 5.322, Average Loss: 5.539, avg. samples / sec: 906.60
Iteration:   2660, Loss function: 5.277, Average Loss: 5.537, avg. samples / sec: 886.72
Iteration:   2680, Loss function: 5.148, Average Loss: 5.533, avg. samples / sec: 974.12
Iteration:   2700, Loss function: 5.263, Average Loss: 5.529, avg. samples / sec: 927.76
Iteration:   2720, Loss function: 5.433, Average Loss: 5.525, avg. samples / sec: 938.15
Iteration:   2740, Loss function: 5.126, Average Loss: 5.520, avg. samples / sec: 908.96
Iteration:   2760, Loss function: 5.210, Average Loss: 5.515, avg. samples / sec: 963.08
Iteration:   2780, Loss function: 5.775, Average Loss: 5.512, avg. samples / sec: 986.44
Iteration:   2800, Loss function: 5.186, Average Loss: 5.508, avg. samples / sec: 1002.47
Iteration:   2820, Loss function: 5.408, Average Loss: 5.503, avg. samples / sec: 946.53
Iteration:   2840, Loss function: 5.056, Average Loss: 5.499, avg. samples / sec: 952.21
Iteration:   2860, Loss function: 5.044, Average Loss: 5.493, avg. samples / sec: 958.20
Iteration:   2880, Loss function: 5.319, Average Loss: 5.489, avg. samples / sec: 978.67
Iteration:   2900, Loss function: 5.068, Average Loss: 5.484, avg. samples / sec: 954.12
Iteration:   2920, Loss function: 5.281, Average Loss: 5.478, avg. samples / sec: 908.10
Iteration:   2940, Loss function: 5.083, Average Loss: 5.473, avg. samples / sec: 982.42
Iteration:   2960, Loss function: 5.309, Average Loss: 5.469, avg. samples / sec: 995.41
Iteration:   2980, Loss function: 5.243, Average Loss: 5.466, avg. samples / sec: 965.92
Iteration:   3000, Loss function: 5.311, Average Loss: 5.460, avg. samples / sec: 966.75
Iteration:   3020, Loss function: 5.257, Average Loss: 5.453, avg. samples / sec: 871.85
Iteration:   3040, Loss function: 5.384, Average Loss: 5.448, avg. samples / sec: 977.21
Iteration:   3060, Loss function: 4.929, Average Loss: 5.443, avg. samples / sec: 908.25
Iteration:   3080, Loss function: 4.937, Average Loss: 5.438, avg. samples / sec: 941.00
:::MLLOG {"namespace": "", "time_ms": 1639755639492, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755639494, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.264, Average Loss: 5.432, avg. samples / sec: 952.47
Iteration:   3120, Loss function: 4.879, Average Loss: 5.425, avg. samples / sec: 931.09
Iteration:   3140, Loss function: 5.115, Average Loss: 5.420, avg. samples / sec: 890.06
Iteration:   3160, Loss function: 5.443, Average Loss: 5.414, avg. samples / sec: 899.51
Iteration:   3180, Loss function: 5.251, Average Loss: 5.409, avg. samples / sec: 970.05
Iteration:   3200, Loss function: 5.088, Average Loss: 5.404, avg. samples / sec: 938.72
Iteration:   3220, Loss function: 5.160, Average Loss: 5.398, avg. samples / sec: 967.18
Iteration:   3240, Loss function: 5.129, Average Loss: 5.393, avg. samples / sec: 989.77
Iteration:   3260, Loss function: 4.893, Average Loss: 5.388, avg. samples / sec: 977.01
Iteration:   3280, Loss function: 4.828, Average Loss: 5.382, avg. samples / sec: 900.08
Iteration:   3300, Loss function: 4.729, Average Loss: 5.375, avg. samples / sec: 858.89
Iteration:   3320, Loss function: 5.005, Average Loss: 5.371, avg. samples / sec: 960.35
Iteration:   3340, Loss function: 5.029, Average Loss: 5.366, avg. samples / sec: 959.76
Iteration:   3360, Loss function: 5.158, Average Loss: 5.361, avg. samples / sec: 971.90
Iteration:   3380, Loss function: 5.334, Average Loss: 5.355, avg. samples / sec: 942.43
Iteration:   3400, Loss function: 4.733, Average Loss: 5.350, avg. samples / sec: 950.57
Iteration:   3420, Loss function: 5.284, Average Loss: 5.345, avg. samples / sec: 915.09
Iteration:   3440, Loss function: 4.802, Average Loss: 5.340, avg. samples / sec: 923.76
Iteration:   3460, Loss function: 5.165, Average Loss: 5.335, avg. samples / sec: 995.66
Iteration:   3480, Loss function: 5.069, Average Loss: 5.330, avg. samples / sec: 893.78
Iteration:   3500, Loss function: 5.216, Average Loss: 5.326, avg. samples / sec: 958.36
Iteration:   3520, Loss function: 5.187, Average Loss: 5.323, avg. samples / sec: 987.68
Iteration:   3540, Loss function: 4.831, Average Loss: 5.318, avg. samples / sec: 913.16
Iteration:   3560, Loss function: 4.898, Average Loss: 5.314, avg. samples / sec: 963.90
Iteration:   3580, Loss function: 5.137, Average Loss: 5.310, avg. samples / sec: 988.85
Iteration:   3600, Loss function: 5.271, Average Loss: 5.304, avg. samples / sec: 980.11
Iteration:   3620, Loss function: 5.095, Average Loss: 5.301, avg. samples / sec: 936.71
Iteration:   3640, Loss function: 4.908, Average Loss: 5.296, avg. samples / sec: 958.75
Iteration:   3660, Loss function: 5.058, Average Loss: 5.291, avg. samples / sec: 933.02
Iteration:   3680, Loss function: 5.168, Average Loss: 5.285, avg. samples / sec: 899.89
Iteration:   3700, Loss function: 4.909, Average Loss: 5.280, avg. samples / sec: 949.16
Iteration:   3720, Loss function: 4.903, Average Loss: 5.273, avg. samples / sec: 896.23
Iteration:   3740, Loss function: 5.127, Average Loss: 5.268, avg. samples / sec: 959.94
Iteration:   3760, Loss function: 5.074, Average Loss: 5.264, avg. samples / sec: 923.36
Iteration:   3780, Loss function: 5.095, Average Loss: 5.260, avg. samples / sec: 969.34
Iteration:   3800, Loss function: 5.212, Average Loss: 5.256, avg. samples / sec: 938.69
Iteration:   3820, Loss function: 5.346, Average Loss: 5.252, avg. samples / sec: 938.04
Iteration:   3840, Loss function: 4.808, Average Loss: 5.247, avg. samples / sec: 987.41
Iteration:   3860, Loss function: 4.978, Average Loss: 5.242, avg. samples / sec: 986.93
Iteration:   3880, Loss function: 5.055, Average Loss: 5.237, avg. samples / sec: 969.04
Iteration:   3900, Loss function: 5.172, Average Loss: 5.233, avg. samples / sec: 920.88
Iteration:   3920, Loss function: 5.117, Average Loss: 5.227, avg. samples / sec: 966.94
Iteration:   3940, Loss function: 5.060, Average Loss: 5.222, avg. samples / sec: 975.08
Iteration:   3960, Loss function: 4.795, Average Loss: 5.218, avg. samples / sec: 944.03
Iteration:   3980, Loss function: 4.857, Average Loss: 5.212, avg. samples / sec: 932.12
Iteration:   4000, Loss function: 5.008, Average Loss: 5.208, avg. samples / sec: 874.47
Iteration:   4020, Loss function: 4.858, Average Loss: 5.203, avg. samples / sec: 904.93
Iteration:   4040, Loss function: 5.045, Average Loss: 5.199, avg. samples / sec: 967.10
Iteration:   4060, Loss function: 5.335, Average Loss: 5.195, avg. samples / sec: 946.47
Iteration:   4080, Loss function: 4.948, Average Loss: 5.191, avg. samples / sec: 967.88
Iteration:   4100, Loss function: 5.062, Average Loss: 5.188, avg. samples / sec: 992.60
:::MLLOG {"namespace": "", "time_ms": 1639755763690, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755763692, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.914, Average Loss: 5.183, avg. samples / sec: 977.72
Iteration:   4140, Loss function: 4.947, Average Loss: 5.178, avg. samples / sec: 900.91
Iteration:   4160, Loss function: 5.003, Average Loss: 5.171, avg. samples / sec: 982.47
Iteration:   4180, Loss function: 5.039, Average Loss: 5.165, avg. samples / sec: 982.11
Iteration:   4200, Loss function: 4.785, Average Loss: 5.161, avg. samples / sec: 986.45
Iteration:   4220, Loss function: 4.761, Average Loss: 5.157, avg. samples / sec: 987.27
Iteration:   4240, Loss function: 4.879, Average Loss: 5.153, avg. samples / sec: 911.19
Iteration:   4260, Loss function: 5.188, Average Loss: 5.149, avg. samples / sec: 915.42
Iteration:   4280, Loss function: 5.136, Average Loss: 5.143, avg. samples / sec: 887.47
Iteration:   4300, Loss function: 4.898, Average Loss: 5.137, avg. samples / sec: 963.75
Iteration:   4320, Loss function: 4.889, Average Loss: 5.132, avg. samples / sec: 951.36
Iteration:   4340, Loss function: 4.773, Average Loss: 5.127, avg. samples / sec: 955.90
Iteration:   4360, Loss function: 4.892, Average Loss: 5.122, avg. samples / sec: 914.73
Iteration:   4380, Loss function: 5.145, Average Loss: 5.118, avg. samples / sec: 972.54
Iteration:   4400, Loss function: 4.773, Average Loss: 5.114, avg. samples / sec: 917.19
Iteration:   4420, Loss function: 4.936, Average Loss: 5.110, avg. samples / sec: 938.95
Iteration:   4440, Loss function: 4.860, Average Loss: 5.105, avg. samples / sec: 892.06
Iteration:   4460, Loss function: 5.190, Average Loss: 5.101, avg. samples / sec: 951.84
Iteration:   4480, Loss function: 5.002, Average Loss: 5.097, avg. samples / sec: 956.44
Iteration:   4500, Loss function: 4.966, Average Loss: 5.094, avg. samples / sec: 921.67
Iteration:   4520, Loss function: 4.820, Average Loss: 5.090, avg. samples / sec: 941.37
Iteration:   4540, Loss function: 5.021, Average Loss: 5.086, avg. samples / sec: 976.70
Iteration:   4560, Loss function: 4.662, Average Loss: 5.081, avg. samples / sec: 993.09
Iteration:   4580, Loss function: 4.781, Average Loss: 5.078, avg. samples / sec: 975.92
Iteration:   4600, Loss function: 4.760, Average Loss: 5.075, avg. samples / sec: 965.71
Iteration:   4620, Loss function: 4.854, Average Loss: 5.071, avg. samples / sec: 951.24
Iteration:   4640, Loss function: 4.753, Average Loss: 5.066, avg. samples / sec: 972.04
Iteration:   4660, Loss function: 4.677, Average Loss: 5.062, avg. samples / sec: 929.02
Iteration:   4680, Loss function: 5.314, Average Loss: 5.058, avg. samples / sec: 972.74
Iteration:   4700, Loss function: 4.920, Average Loss: 5.055, avg. samples / sec: 972.31
Iteration:   4720, Loss function: 4.891, Average Loss: 5.052, avg. samples / sec: 969.86
Iteration:   4740, Loss function: 4.646, Average Loss: 5.047, avg. samples / sec: 946.10
Iteration:   4760, Loss function: 4.590, Average Loss: 5.043, avg. samples / sec: 971.19
Iteration:   4780, Loss function: 4.951, Average Loss: 5.039, avg. samples / sec: 936.13
Iteration:   4800, Loss function: 4.846, Average Loss: 5.036, avg. samples / sec: 855.46
Iteration:   4820, Loss function: 4.764, Average Loss: 5.032, avg. samples / sec: 941.47
Iteration:   4840, Loss function: 5.355, Average Loss: 5.029, avg. samples / sec: 982.78
Iteration:   4860, Loss function: 4.559, Average Loss: 5.024, avg. samples / sec: 979.61
Iteration:   4880, Loss function: 5.067, Average Loss: 5.020, avg. samples / sec: 982.20
Iteration:   4900, Loss function: 4.540, Average Loss: 5.016, avg. samples / sec: 985.61
Iteration:   4920, Loss function: 4.849, Average Loss: 5.014, avg. samples / sec: 981.85
Iteration:   4940, Loss function: 4.644, Average Loss: 5.009, avg. samples / sec: 922.97
Iteration:   4960, Loss function: 4.670, Average Loss: 5.006, avg. samples / sec: 936.77
Iteration:   4980, Loss function: 4.459, Average Loss: 5.001, avg. samples / sec: 937.00
Iteration:   5000, Loss function: 4.967, Average Loss: 4.997, avg. samples / sec: 895.88
Iteration:   5020, Loss function: 5.107, Average Loss: 4.994, avg. samples / sec: 949.92
Iteration:   5040, Loss function: 5.007, Average Loss: 4.991, avg. samples / sec: 969.06
Iteration:   5060, Loss function: 4.883, Average Loss: 4.988, avg. samples / sec: 924.19
Iteration:   5080, Loss function: 4.617, Average Loss: 4.983, avg. samples / sec: 961.77
Iteration:   5100, Loss function: 4.911, Average Loss: 4.982, avg. samples / sec: 920.40
Iteration:   5120, Loss function: 4.449, Average Loss: 4.978, avg. samples / sec: 911.78
Iteration:   5140, Loss function: 4.834, Average Loss: 4.974, avg. samples / sec: 984.15
:::MLLOG {"namespace": "", "time_ms": 1639755887514, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.15 s
:::MLLOG {"namespace": "", "time_ms": 1639755918743, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755918806, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755918806, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.97s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.871, Average Loss: 4.970, avg. samples / sec: 67.31
Iteration:   5180, Loss function: 4.842, Average Loss: 4.966, avg. samples / sec: 780.46
DONE (t=6.11s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10762
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22324
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09421
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19571
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13712
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20740
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22012
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22012
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10762 AP goal: 0.10000
Iteration:   5200, Loss function: 4.562, Average Loss: 4.962, avg. samples / sec: 894.90
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10761727552427536, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926506, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755926706, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639755928
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 03:45:28 PM'
START TIMING RUN WAS 2021-12-17 03:33:52 PM
+ echo 'START TIMING RUN WAS 2021-12-17 03:33:52 PM'
ENDING TIMING RUN AT 2021-12-17 03:45:28 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 03:45:28 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 7g.40gb     Device  0: (UUID: MIG-960c229f-92b5-5543-8eb5-2999f26ef6b8)
+ result=696
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-17 03:33:52 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,696,nvidia,2021-12-17 03:33:52 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
