8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ MIG_MODE=1
+ [[ 7g.40gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026'
Found 1 MIG instances: MIG-60bbf248-9d3f-5386-9ff5-6af012397026
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639755233
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 03:33:53 PM'
STARTING TIMING RUN AT 2021-12-17 03:33:53 PM GPU: 1 x 7g.40gb x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 03:33:53 PM GPU: 1 x 7g.40gb x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_16-32-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\6\-\3\2\-\4\2 ]]
+ set +x
Fri Dec 17 15:33:53 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-2pq7t to the sync file ...
run-mlperf--1-2pq7t Found 7 Pods, waiting to have 8 ...
     1	run-mlperf--1-lg9lr
     2	run-mlperf--1-4w4z8
     3	run-mlperf--1-vhwqh
     4	run-mlperf--1-wbpms
     5	run-mlperf--1-db7pn
     6	run-mlperf--1-v2pr5
     7	run-mlperf--1-2pq7t
Fri Dec 17 15:33:58 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755240220, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755240520, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4279776137, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4279776137
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639755242604, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755242604, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266851, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266852, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639755268879, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755268880, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755269256, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755269257, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755269259, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.206, Average Loss: 0.023, avg. samples / sec: 4.33
Iteration:     20, Loss function: 21.165, Average Loss: 0.462, avg. samples / sec: 767.77
Iteration:     40, Loss function: 20.872, Average Loss: 0.866, avg. samples / sec: 833.32
Iteration:     60, Loss function: 20.425, Average Loss: 1.256, avg. samples / sec: 882.30
Iteration:     80, Loss function: 20.228, Average Loss: 1.632, avg. samples / sec: 908.75
Iteration:    100, Loss function: 17.432, Average Loss: 1.978, avg. samples / sec: 930.49
Iteration:    120, Loss function: 12.366, Average Loss: 2.214, avg. samples / sec: 899.37
Iteration:    140, Loss function: 10.035, Average Loss: 2.388, avg. samples / sec: 864.02
Iteration:    160, Loss function: 9.412, Average Loss: 2.531, avg. samples / sec: 892.33
Iteration:    180, Loss function: 9.268, Average Loss: 2.663, avg. samples / sec: 879.01
Iteration:    200, Loss function: 8.873, Average Loss: 2.789, avg. samples / sec: 927.96
Iteration:    220, Loss function: 8.549, Average Loss: 2.909, avg. samples / sec: 913.73
Iteration:    240, Loss function: 8.502, Average Loss: 3.023, avg. samples / sec: 931.24
Iteration:    260, Loss function: 8.999, Average Loss: 3.137, avg. samples / sec: 972.03
Iteration:    280, Loss function: 8.843, Average Loss: 3.250, avg. samples / sec: 984.47
Iteration:    300, Loss function: 8.417, Average Loss: 3.356, avg. samples / sec: 966.82
Iteration:    320, Loss function: 8.409, Average Loss: 3.456, avg. samples / sec: 956.92
Iteration:    340, Loss function: 8.366, Average Loss: 3.553, avg. samples / sec: 930.99
Iteration:    360, Loss function: 8.182, Average Loss: 3.644, avg. samples / sec: 955.26
Iteration:    380, Loss function: 8.035, Average Loss: 3.732, avg. samples / sec: 910.60
Iteration:    400, Loss function: 8.024, Average Loss: 3.816, avg. samples / sec: 993.97
Iteration:    420, Loss function: 7.762, Average Loss: 3.899, avg. samples / sec: 895.30
Iteration:    440, Loss function: 7.824, Average Loss: 3.977, avg. samples / sec: 968.65
Iteration:    460, Loss function: 8.053, Average Loss: 4.052, avg. samples / sec: 887.80
Iteration:    480, Loss function: 7.444, Average Loss: 4.124, avg. samples / sec: 984.85
Iteration:    500, Loss function: 7.644, Average Loss: 4.193, avg. samples / sec: 936.04
Iteration:    520, Loss function: 7.562, Average Loss: 4.262, avg. samples / sec: 924.52
Iteration:    540, Loss function: 7.475, Average Loss: 4.326, avg. samples / sec: 928.85
Iteration:    560, Loss function: 7.085, Average Loss: 4.386, avg. samples / sec: 959.96
Iteration:    580, Loss function: 7.356, Average Loss: 4.447, avg. samples / sec: 927.70
Iteration:    600, Loss function: 7.279, Average Loss: 4.504, avg. samples / sec: 958.36
Iteration:    620, Loss function: 6.980, Average Loss: 4.558, avg. samples / sec: 960.09
Iteration:    640, Loss function: 6.827, Average Loss: 4.612, avg. samples / sec: 963.84
Iteration:    660, Loss function: 6.936, Average Loss: 4.663, avg. samples / sec: 946.75
Iteration:    680, Loss function: 7.366, Average Loss: 4.712, avg. samples / sec: 953.62
Iteration:    700, Loss function: 6.617, Average Loss: 4.759, avg. samples / sec: 932.31
Iteration:    720, Loss function: 7.013, Average Loss: 4.807, avg. samples / sec: 984.07
Iteration:    740, Loss function: 6.932, Average Loss: 4.851, avg. samples / sec: 965.60
Iteration:    760, Loss function: 6.945, Average Loss: 4.894, avg. samples / sec: 954.33
Iteration:    780, Loss function: 6.890, Average Loss: 4.934, avg. samples / sec: 953.79
Iteration:    800, Loss function: 7.244, Average Loss: 4.972, avg. samples / sec: 927.62
Iteration:    820, Loss function: 6.794, Average Loss: 5.009, avg. samples / sec: 983.12
Iteration:    840, Loss function: 6.789, Average Loss: 5.044, avg. samples / sec: 934.58
Iteration:    860, Loss function: 6.929, Average Loss: 5.077, avg. samples / sec: 938.76
Iteration:    880, Loss function: 6.646, Average Loss: 5.109, avg. samples / sec: 970.24
Iteration:    900, Loss function: 6.806, Average Loss: 5.139, avg. samples / sec: 975.65
Iteration:    920, Loss function: 6.602, Average Loss: 5.168, avg. samples / sec: 956.64
Iteration:    940, Loss function: 6.842, Average Loss: 5.197, avg. samples / sec: 971.64
Iteration:    960, Loss function: 6.431, Average Loss: 5.226, avg. samples / sec: 969.86
Iteration:    980, Loss function: 6.520, Average Loss: 5.253, avg. samples / sec: 941.21
Iteration:   1000, Loss function: 6.497, Average Loss: 5.278, avg. samples / sec: 968.01
Iteration:   1020, Loss function: 6.428, Average Loss: 5.301, avg. samples / sec: 933.80
:::MLLOG {"namespace": "", "time_ms": 1639755394732, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755394734, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.556, Average Loss: 5.324, avg. samples / sec: 961.83
Iteration:   1060, Loss function: 6.388, Average Loss: 5.346, avg. samples / sec: 969.15
Iteration:   1080, Loss function: 6.266, Average Loss: 5.366, avg. samples / sec: 924.33
Iteration:   1100, Loss function: 6.168, Average Loss: 5.385, avg. samples / sec: 936.12
Iteration:   1120, Loss function: 6.185, Average Loss: 5.404, avg. samples / sec: 974.70
Iteration:   1140, Loss function: 6.510, Average Loss: 5.421, avg. samples / sec: 979.18
Iteration:   1160, Loss function: 6.185, Average Loss: 5.437, avg. samples / sec: 934.91
Iteration:   1180, Loss function: 6.249, Average Loss: 5.453, avg. samples / sec: 969.30
Iteration:   1200, Loss function: 6.271, Average Loss: 5.469, avg. samples / sec: 985.56
Iteration:   1220, Loss function: 6.031, Average Loss: 5.483, avg. samples / sec: 970.80
Iteration:   1240, Loss function: 6.149, Average Loss: 5.496, avg. samples / sec: 967.68
Iteration:   1260, Loss function: 5.958, Average Loss: 5.507, avg. samples / sec: 950.81
Iteration:   1280, Loss function: 5.907, Average Loss: 5.519, avg. samples / sec: 945.91
Iteration:   1300, Loss function: 6.204, Average Loss: 5.531, avg. samples / sec: 926.60
Iteration:   1320, Loss function: 6.062, Average Loss: 5.543, avg. samples / sec: 928.89
Iteration:   1340, Loss function: 5.852, Average Loss: 5.551, avg. samples / sec: 912.88
Iteration:   1360, Loss function: 6.044, Average Loss: 5.561, avg. samples / sec: 900.59
Iteration:   1380, Loss function: 6.295, Average Loss: 5.571, avg. samples / sec: 985.41
Iteration:   1400, Loss function: 6.093, Average Loss: 5.579, avg. samples / sec: 999.61
Iteration:   1420, Loss function: 5.831, Average Loss: 5.586, avg. samples / sec: 971.94
Iteration:   1440, Loss function: 6.242, Average Loss: 5.593, avg. samples / sec: 968.88
Iteration:   1460, Loss function: 6.259, Average Loss: 5.602, avg. samples / sec: 960.92
Iteration:   1480, Loss function: 5.888, Average Loss: 5.610, avg. samples / sec: 964.63
Iteration:   1500, Loss function: 5.914, Average Loss: 5.617, avg. samples / sec: 958.61
Iteration:   1520, Loss function: 6.205, Average Loss: 5.622, avg. samples / sec: 978.15
Iteration:   1540, Loss function: 5.929, Average Loss: 5.626, avg. samples / sec: 950.88
Iteration:   1560, Loss function: 5.663, Average Loss: 5.630, avg. samples / sec: 961.39
Iteration:   1580, Loss function: 5.593, Average Loss: 5.634, avg. samples / sec: 938.23
Iteration:   1600, Loss function: 6.189, Average Loss: 5.639, avg. samples / sec: 961.43
Iteration:   1620, Loss function: 5.719, Average Loss: 5.644, avg. samples / sec: 975.18
Iteration:   1640, Loss function: 5.914, Average Loss: 5.646, avg. samples / sec: 985.35
Iteration:   1660, Loss function: 5.849, Average Loss: 5.650, avg. samples / sec: 919.93
Iteration:   1680, Loss function: 5.628, Average Loss: 5.652, avg. samples / sec: 887.35
Iteration:   1700, Loss function: 5.462, Average Loss: 5.656, avg. samples / sec: 890.51
Iteration:   1720, Loss function: 5.731, Average Loss: 5.657, avg. samples / sec: 971.83
Iteration:   1740, Loss function: 5.968, Average Loss: 5.660, avg. samples / sec: 912.23
Iteration:   1760, Loss function: 5.539, Average Loss: 5.660, avg. samples / sec: 861.57
Iteration:   1780, Loss function: 5.528, Average Loss: 5.660, avg. samples / sec: 932.74
Iteration:   1800, Loss function: 5.582, Average Loss: 5.661, avg. samples / sec: 976.79
Iteration:   1820, Loss function: 5.906, Average Loss: 5.664, avg. samples / sec: 980.80
Iteration:   1840, Loss function: 6.032, Average Loss: 5.666, avg. samples / sec: 980.56
Iteration:   1860, Loss function: 5.682, Average Loss: 5.665, avg. samples / sec: 915.81
Iteration:   1880, Loss function: 5.871, Average Loss: 5.667, avg. samples / sec: 945.46
Iteration:   1900, Loss function: 5.757, Average Loss: 5.667, avg. samples / sec: 958.43
Iteration:   1920, Loss function: 5.704, Average Loss: 5.666, avg. samples / sec: 1004.43
Iteration:   1940, Loss function: 5.864, Average Loss: 5.665, avg. samples / sec: 951.99
Iteration:   1960, Loss function: 5.663, Average Loss: 5.665, avg. samples / sec: 920.71
Iteration:   1980, Loss function: 5.602, Average Loss: 5.663, avg. samples / sec: 951.79
Iteration:   2000, Loss function: 5.505, Average Loss: 5.663, avg. samples / sec: 960.99
Iteration:   2020, Loss function: 5.538, Average Loss: 5.660, avg. samples / sec: 988.21
Iteration:   2040, Loss function: 5.734, Average Loss: 5.660, avg. samples / sec: 969.85
:::MLLOG {"namespace": "", "time_ms": 1639755517973, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517975, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.491, Average Loss: 5.659, avg. samples / sec: 992.24
Iteration:   2080, Loss function: 5.227, Average Loss: 5.656, avg. samples / sec: 954.28
Iteration:   2100, Loss function: 5.566, Average Loss: 5.654, avg. samples / sec: 988.81
Iteration:   2120, Loss function: 5.291, Average Loss: 5.651, avg. samples / sec: 965.85
Iteration:   2140, Loss function: 5.389, Average Loss: 5.647, avg. samples / sec: 905.83
Iteration:   2160, Loss function: 5.452, Average Loss: 5.645, avg. samples / sec: 939.60
Iteration:   2180, Loss function: 5.346, Average Loss: 5.643, avg. samples / sec: 867.01
Iteration:   2200, Loss function: 5.430, Average Loss: 5.639, avg. samples / sec: 954.39
Iteration:   2220, Loss function: 5.689, Average Loss: 5.636, avg. samples / sec: 911.95
Iteration:   2240, Loss function: 5.666, Average Loss: 5.633, avg. samples / sec: 984.85
Iteration:   2260, Loss function: 5.481, Average Loss: 5.629, avg. samples / sec: 905.14
Iteration:   2280, Loss function: 5.055, Average Loss: 5.627, avg. samples / sec: 947.06
Iteration:   2300, Loss function: 5.055, Average Loss: 5.624, avg. samples / sec: 996.60
Iteration:   2320, Loss function: 5.390, Average Loss: 5.621, avg. samples / sec: 948.52
Iteration:   2340, Loss function: 5.443, Average Loss: 5.617, avg. samples / sec: 971.69
Iteration:   2360, Loss function: 5.473, Average Loss: 5.614, avg. samples / sec: 973.69
Iteration:   2380, Loss function: 5.461, Average Loss: 5.610, avg. samples / sec: 997.02
Iteration:   2400, Loss function: 5.724, Average Loss: 5.605, avg. samples / sec: 996.04
Iteration:   2420, Loss function: 5.597, Average Loss: 5.602, avg. samples / sec: 990.74
Iteration:   2440, Loss function: 5.550, Average Loss: 5.599, avg. samples / sec: 919.67
Iteration:   2460, Loss function: 5.062, Average Loss: 5.595, avg. samples / sec: 962.89
Iteration:   2480, Loss function: 5.442, Average Loss: 5.591, avg. samples / sec: 997.62
Iteration:   2500, Loss function: 5.477, Average Loss: 5.587, avg. samples / sec: 989.02
Iteration:   2520, Loss function: 5.256, Average Loss: 5.580, avg. samples / sec: 965.88
Iteration:   2540, Loss function: 5.491, Average Loss: 5.577, avg. samples / sec: 913.02
Iteration:   2560, Loss function: 5.385, Average Loss: 5.574, avg. samples / sec: 958.36
Iteration:   2580, Loss function: 5.292, Average Loss: 5.570, avg. samples / sec: 968.23
Iteration:   2600, Loss function: 5.476, Average Loss: 5.567, avg. samples / sec: 941.36
Iteration:   2620, Loss function: 5.674, Average Loss: 5.563, avg. samples / sec: 977.91
Iteration:   2640, Loss function: 5.236, Average Loss: 5.560, avg. samples / sec: 992.11
Iteration:   2660, Loss function: 5.305, Average Loss: 5.556, avg. samples / sec: 980.38
Iteration:   2680, Loss function: 5.118, Average Loss: 5.551, avg. samples / sec: 956.06
Iteration:   2700, Loss function: 5.358, Average Loss: 5.546, avg. samples / sec: 989.78
Iteration:   2720, Loss function: 5.348, Average Loss: 5.542, avg. samples / sec: 988.80
Iteration:   2740, Loss function: 5.008, Average Loss: 5.538, avg. samples / sec: 964.96
Iteration:   2760, Loss function: 5.019, Average Loss: 5.533, avg. samples / sec: 948.14
Iteration:   2780, Loss function: 5.466, Average Loss: 5.530, avg. samples / sec: 963.28
Iteration:   2800, Loss function: 5.196, Average Loss: 5.526, avg. samples / sec: 991.48
Iteration:   2820, Loss function: 5.638, Average Loss: 5.520, avg. samples / sec: 970.89
Iteration:   2840, Loss function: 5.145, Average Loss: 5.516, avg. samples / sec: 898.82
Iteration:   2860, Loss function: 5.181, Average Loss: 5.509, avg. samples / sec: 877.12
Iteration:   2880, Loss function: 5.361, Average Loss: 5.504, avg. samples / sec: 963.96
Iteration:   2900, Loss function: 4.947, Average Loss: 5.500, avg. samples / sec: 963.90
Iteration:   2920, Loss function: 5.226, Average Loss: 5.495, avg. samples / sec: 956.22
Iteration:   2940, Loss function: 4.931, Average Loss: 5.489, avg. samples / sec: 895.62
Iteration:   2960, Loss function: 5.383, Average Loss: 5.484, avg. samples / sec: 863.54
Iteration:   2980, Loss function: 5.375, Average Loss: 5.480, avg. samples / sec: 954.77
Iteration:   3000, Loss function: 5.320, Average Loss: 5.475, avg. samples / sec: 975.95
Iteration:   3020, Loss function: 5.176, Average Loss: 5.469, avg. samples / sec: 988.48
Iteration:   3040, Loss function: 5.248, Average Loss: 5.464, avg. samples / sec: 931.00
Iteration:   3060, Loss function: 4.991, Average Loss: 5.458, avg. samples / sec: 990.57
Iteration:   3080, Loss function: 4.935, Average Loss: 5.453, avg. samples / sec: 998.38
:::MLLOG {"namespace": "", "time_ms": 1639755640618, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755640620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.371, Average Loss: 5.448, avg. samples / sec: 981.68
Iteration:   3120, Loss function: 4.928, Average Loss: 5.442, avg. samples / sec: 985.24
Iteration:   3140, Loss function: 5.280, Average Loss: 5.437, avg. samples / sec: 922.22
Iteration:   3160, Loss function: 5.539, Average Loss: 5.432, avg. samples / sec: 922.02
Iteration:   3180, Loss function: 5.097, Average Loss: 5.427, avg. samples / sec: 979.75
Iteration:   3200, Loss function: 5.490, Average Loss: 5.422, avg. samples / sec: 984.95
Iteration:   3220, Loss function: 5.064, Average Loss: 5.416, avg. samples / sec: 927.72
Iteration:   3240, Loss function: 5.103, Average Loss: 5.410, avg. samples / sec: 954.80
Iteration:   3260, Loss function: 5.096, Average Loss: 5.405, avg. samples / sec: 903.49
Iteration:   3280, Loss function: 5.002, Average Loss: 5.398, avg. samples / sec: 928.86
Iteration:   3300, Loss function: 4.835, Average Loss: 5.392, avg. samples / sec: 977.96
Iteration:   3320, Loss function: 5.063, Average Loss: 5.387, avg. samples / sec: 972.98
Iteration:   3340, Loss function: 5.305, Average Loss: 5.384, avg. samples / sec: 979.59
Iteration:   3360, Loss function: 4.957, Average Loss: 5.376, avg. samples / sec: 903.68
Iteration:   3380, Loss function: 5.128, Average Loss: 5.370, avg. samples / sec: 973.13
Iteration:   3400, Loss function: 4.863, Average Loss: 5.365, avg. samples / sec: 971.62
Iteration:   3420, Loss function: 5.321, Average Loss: 5.358, avg. samples / sec: 981.63
Iteration:   3440, Loss function: 4.817, Average Loss: 5.354, avg. samples / sec: 984.43
Iteration:   3460, Loss function: 5.141, Average Loss: 5.349, avg. samples / sec: 974.10
Iteration:   3480, Loss function: 5.305, Average Loss: 5.343, avg. samples / sec: 988.79
Iteration:   3500, Loss function: 5.186, Average Loss: 5.339, avg. samples / sec: 963.67
Iteration:   3520, Loss function: 5.041, Average Loss: 5.335, avg. samples / sec: 938.26
Iteration:   3540, Loss function: 4.995, Average Loss: 5.330, avg. samples / sec: 966.57
Iteration:   3560, Loss function: 5.027, Average Loss: 5.326, avg. samples / sec: 972.82
Iteration:   3580, Loss function: 5.001, Average Loss: 5.321, avg. samples / sec: 948.46
Iteration:   3600, Loss function: 5.331, Average Loss: 5.316, avg. samples / sec: 954.53
Iteration:   3620, Loss function: 5.016, Average Loss: 5.312, avg. samples / sec: 966.81
Iteration:   3640, Loss function: 4.810, Average Loss: 5.306, avg. samples / sec: 981.75
Iteration:   3660, Loss function: 5.029, Average Loss: 5.302, avg. samples / sec: 949.04
Iteration:   3680, Loss function: 5.277, Average Loss: 5.296, avg. samples / sec: 962.95
Iteration:   3700, Loss function: 5.064, Average Loss: 5.291, avg. samples / sec: 981.62
Iteration:   3720, Loss function: 4.944, Average Loss: 5.284, avg. samples / sec: 982.81
Iteration:   3740, Loss function: 5.103, Average Loss: 5.280, avg. samples / sec: 985.23
Iteration:   3760, Loss function: 5.199, Average Loss: 5.277, avg. samples / sec: 961.59
Iteration:   3780, Loss function: 5.060, Average Loss: 5.271, avg. samples / sec: 969.04
Iteration:   3800, Loss function: 5.048, Average Loss: 5.268, avg. samples / sec: 969.93
Iteration:   3820, Loss function: 5.231, Average Loss: 5.262, avg. samples / sec: 960.53
Iteration:   3840, Loss function: 4.910, Average Loss: 5.258, avg. samples / sec: 982.60
Iteration:   3860, Loss function: 4.768, Average Loss: 5.253, avg. samples / sec: 977.54
Iteration:   3880, Loss function: 4.931, Average Loss: 5.247, avg. samples / sec: 968.67
Iteration:   3900, Loss function: 5.101, Average Loss: 5.242, avg. samples / sec: 945.25
Iteration:   3920, Loss function: 5.057, Average Loss: 5.237, avg. samples / sec: 959.66
Iteration:   3940, Loss function: 5.024, Average Loss: 5.232, avg. samples / sec: 915.39
Iteration:   3960, Loss function: 4.777, Average Loss: 5.227, avg. samples / sec: 885.32
Iteration:   3980, Loss function: 4.899, Average Loss: 5.223, avg. samples / sec: 983.27
Iteration:   4000, Loss function: 5.238, Average Loss: 5.219, avg. samples / sec: 990.23
Iteration:   4020, Loss function: 5.168, Average Loss: 5.214, avg. samples / sec: 984.46
Iteration:   4040, Loss function: 5.021, Average Loss: 5.210, avg. samples / sec: 980.94
Iteration:   4060, Loss function: 5.161, Average Loss: 5.206, avg. samples / sec: 969.88
Iteration:   4080, Loss function: 4.933, Average Loss: 5.201, avg. samples / sec: 887.24
Iteration:   4100, Loss function: 5.099, Average Loss: 5.197, avg. samples / sec: 856.74
:::MLLOG {"namespace": "", "time_ms": 1639755763117, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755763119, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.057, Average Loss: 5.193, avg. samples / sec: 979.37
Iteration:   4140, Loss function: 4.752, Average Loss: 5.187, avg. samples / sec: 945.58
Iteration:   4160, Loss function: 4.904, Average Loss: 5.181, avg. samples / sec: 979.03
Iteration:   4180, Loss function: 4.947, Average Loss: 5.175, avg. samples / sec: 984.78
Iteration:   4200, Loss function: 4.831, Average Loss: 5.172, avg. samples / sec: 939.69
Iteration:   4220, Loss function: 4.833, Average Loss: 5.166, avg. samples / sec: 958.81
Iteration:   4240, Loss function: 4.844, Average Loss: 5.161, avg. samples / sec: 947.68
Iteration:   4260, Loss function: 4.985, Average Loss: 5.156, avg. samples / sec: 906.17
Iteration:   4280, Loss function: 5.015, Average Loss: 5.150, avg. samples / sec: 946.64
Iteration:   4300, Loss function: 4.869, Average Loss: 5.144, avg. samples / sec: 894.70
Iteration:   4320, Loss function: 4.741, Average Loss: 5.139, avg. samples / sec: 948.05
Iteration:   4340, Loss function: 4.699, Average Loss: 5.133, avg. samples / sec: 965.33
Iteration:   4360, Loss function: 4.951, Average Loss: 5.128, avg. samples / sec: 920.99
Iteration:   4380, Loss function: 5.291, Average Loss: 5.123, avg. samples / sec: 988.24
Iteration:   4400, Loss function: 4.981, Average Loss: 5.120, avg. samples / sec: 987.81
Iteration:   4420, Loss function: 4.664, Average Loss: 5.115, avg. samples / sec: 959.00
Iteration:   4440, Loss function: 4.906, Average Loss: 5.112, avg. samples / sec: 982.02
Iteration:   4460, Loss function: 5.174, Average Loss: 5.108, avg. samples / sec: 965.17
Iteration:   4480, Loss function: 4.916, Average Loss: 5.105, avg. samples / sec: 984.09
Iteration:   4500, Loss function: 4.910, Average Loss: 5.101, avg. samples / sec: 973.45
Iteration:   4520, Loss function: 4.955, Average Loss: 5.097, avg. samples / sec: 967.78
Iteration:   4540, Loss function: 5.043, Average Loss: 5.092, avg. samples / sec: 971.16
Iteration:   4560, Loss function: 4.730, Average Loss: 5.088, avg. samples / sec: 990.91
Iteration:   4580, Loss function: 4.736, Average Loss: 5.086, avg. samples / sec: 930.78
Iteration:   4600, Loss function: 4.871, Average Loss: 5.081, avg. samples / sec: 940.67
Iteration:   4620, Loss function: 4.872, Average Loss: 5.077, avg. samples / sec: 874.87
Iteration:   4640, Loss function: 4.679, Average Loss: 5.072, avg. samples / sec: 971.95
Iteration:   4660, Loss function: 4.719, Average Loss: 5.069, avg. samples / sec: 951.08
Iteration:   4680, Loss function: 5.213, Average Loss: 5.065, avg. samples / sec: 955.23
Iteration:   4700, Loss function: 4.785, Average Loss: 5.061, avg. samples / sec: 964.02
Iteration:   4720, Loss function: 4.683, Average Loss: 5.057, avg. samples / sec: 969.54
Iteration:   4740, Loss function: 4.792, Average Loss: 5.053, avg. samples / sec: 993.01
Iteration:   4760, Loss function: 4.723, Average Loss: 5.049, avg. samples / sec: 899.36
Iteration:   4780, Loss function: 5.127, Average Loss: 5.045, avg. samples / sec: 970.08
Iteration:   4800, Loss function: 4.717, Average Loss: 5.042, avg. samples / sec: 967.84
Iteration:   4820, Loss function: 4.687, Average Loss: 5.038, avg. samples / sec: 982.39
Iteration:   4840, Loss function: 5.119, Average Loss: 5.035, avg. samples / sec: 992.87
Iteration:   4860, Loss function: 4.572, Average Loss: 5.031, avg. samples / sec: 992.56
Iteration:   4880, Loss function: 5.163, Average Loss: 5.025, avg. samples / sec: 992.61
Iteration:   4900, Loss function: 4.598, Average Loss: 5.021, avg. samples / sec: 980.20
Iteration:   4920, Loss function: 4.818, Average Loss: 5.018, avg. samples / sec: 970.66
Iteration:   4940, Loss function: 4.720, Average Loss: 5.014, avg. samples / sec: 921.46
Iteration:   4960, Loss function: 4.684, Average Loss: 5.010, avg. samples / sec: 975.72
Iteration:   4980, Loss function: 4.562, Average Loss: 5.006, avg. samples / sec: 976.33
Iteration:   5000, Loss function: 5.052, Average Loss: 5.002, avg. samples / sec: 987.66
Iteration:   5020, Loss function: 5.145, Average Loss: 4.999, avg. samples / sec: 968.89
Iteration:   5040, Loss function: 4.687, Average Loss: 4.996, avg. samples / sec: 938.42
Iteration:   5060, Loss function: 4.604, Average Loss: 4.992, avg. samples / sec: 944.80
Iteration:   5080, Loss function: 4.516, Average Loss: 4.989, avg. samples / sec: 988.68
Iteration:   5100, Loss function: 4.705, Average Loss: 4.986, avg. samples / sec: 993.56
Iteration:   5120, Loss function: 4.575, Average Loss: 4.982, avg. samples / sec: 957.60
Iteration:   5140, Loss function: 4.798, Average Loss: 4.978, avg. samples / sec: 970.40
:::MLLOG {"namespace": "", "time_ms": 1639755885309, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.13 s
:::MLLOG {"namespace": "", "time_ms": 1639755917488, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755917546, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755917551, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.785, Average Loss: 4.973, avg. samples / sec: 65.86
Iteration:   5180, Loss function: 4.823, Average Loss: 4.967, avg. samples / sec: 815.08
DONE (t=5.61s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11013
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21966
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19660
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13943
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20682
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11013 AP goal: 0.10000
Iteration:   5200, Loss function: 4.662, Average Loss: 4.964, avg. samples / sec: 818.81
:::MLLOG {"namespace": "", "time_ms": 1639755925067, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925068, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11012812430256556, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925068, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925482, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 15:45:27 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 15:45:27 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639755240220, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639755240520, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4279776137, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4279776137
:::MLLOG {"namespace": "", "time_ms": 1639755242604, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639755242604, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639755242608, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639755266851, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639755266852, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639755268879, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639755268880, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639755269256, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639755269257, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755269259, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.206, Average Loss: 0.023, avg. samples / sec: 4.33
Iteration:     20, Loss function: 21.165, Average Loss: 0.462, avg. samples / sec: 767.77
Iteration:     40, Loss function: 20.872, Average Loss: 0.866, avg. samples / sec: 833.32
Iteration:     60, Loss function: 20.425, Average Loss: 1.256, avg. samples / sec: 882.30
Iteration:     80, Loss function: 20.228, Average Loss: 1.632, avg. samples / sec: 908.75
Iteration:    100, Loss function: 17.432, Average Loss: 1.978, avg. samples / sec: 930.49
Iteration:    120, Loss function: 12.366, Average Loss: 2.214, avg. samples / sec: 899.37
Iteration:    140, Loss function: 10.035, Average Loss: 2.388, avg. samples / sec: 864.02
Iteration:    160, Loss function: 9.412, Average Loss: 2.531, avg. samples / sec: 892.33
Iteration:    180, Loss function: 9.268, Average Loss: 2.663, avg. samples / sec: 879.01
Iteration:    200, Loss function: 8.873, Average Loss: 2.789, avg. samples / sec: 927.96
Iteration:    220, Loss function: 8.549, Average Loss: 2.909, avg. samples / sec: 913.73
Iteration:    240, Loss function: 8.502, Average Loss: 3.023, avg. samples / sec: 931.24
Iteration:    260, Loss function: 8.999, Average Loss: 3.137, avg. samples / sec: 972.03
Iteration:    280, Loss function: 8.843, Average Loss: 3.250, avg. samples / sec: 984.47
Iteration:    300, Loss function: 8.417, Average Loss: 3.356, avg. samples / sec: 966.82
Iteration:    320, Loss function: 8.409, Average Loss: 3.456, avg. samples / sec: 956.92
Iteration:    340, Loss function: 8.366, Average Loss: 3.553, avg. samples / sec: 930.99
Iteration:    360, Loss function: 8.182, Average Loss: 3.644, avg. samples / sec: 955.26
Iteration:    380, Loss function: 8.035, Average Loss: 3.732, avg. samples / sec: 910.60
Iteration:    400, Loss function: 8.024, Average Loss: 3.816, avg. samples / sec: 993.97
Iteration:    420, Loss function: 7.762, Average Loss: 3.899, avg. samples / sec: 895.30
Iteration:    440, Loss function: 7.824, Average Loss: 3.977, avg. samples / sec: 968.65
Iteration:    460, Loss function: 8.053, Average Loss: 4.052, avg. samples / sec: 887.80
Iteration:    480, Loss function: 7.444, Average Loss: 4.124, avg. samples / sec: 984.85
Iteration:    500, Loss function: 7.644, Average Loss: 4.193, avg. samples / sec: 936.04
Iteration:    520, Loss function: 7.562, Average Loss: 4.262, avg. samples / sec: 924.52
Iteration:    540, Loss function: 7.475, Average Loss: 4.326, avg. samples / sec: 928.85
Iteration:    560, Loss function: 7.085, Average Loss: 4.386, avg. samples / sec: 959.96
Iteration:    580, Loss function: 7.356, Average Loss: 4.447, avg. samples / sec: 927.70
Iteration:    600, Loss function: 7.279, Average Loss: 4.504, avg. samples / sec: 958.36
Iteration:    620, Loss function: 6.980, Average Loss: 4.558, avg. samples / sec: 960.09
Iteration:    640, Loss function: 6.827, Average Loss: 4.612, avg. samples / sec: 963.84
Iteration:    660, Loss function: 6.936, Average Loss: 4.663, avg. samples / sec: 946.75
Iteration:    680, Loss function: 7.366, Average Loss: 4.712, avg. samples / sec: 953.62
Iteration:    700, Loss function: 6.617, Average Loss: 4.759, avg. samples / sec: 932.31
Iteration:    720, Loss function: 7.013, Average Loss: 4.807, avg. samples / sec: 984.07
Iteration:    740, Loss function: 6.932, Average Loss: 4.851, avg. samples / sec: 965.60
Iteration:    760, Loss function: 6.945, Average Loss: 4.894, avg. samples / sec: 954.33
Iteration:    780, Loss function: 6.890, Average Loss: 4.934, avg. samples / sec: 953.79
Iteration:    800, Loss function: 7.244, Average Loss: 4.972, avg. samples / sec: 927.62
Iteration:    820, Loss function: 6.794, Average Loss: 5.009, avg. samples / sec: 983.12
Iteration:    840, Loss function: 6.789, Average Loss: 5.044, avg. samples / sec: 934.58
Iteration:    860, Loss function: 6.929, Average Loss: 5.077, avg. samples / sec: 938.76
Iteration:    880, Loss function: 6.646, Average Loss: 5.109, avg. samples / sec: 970.24
Iteration:    900, Loss function: 6.806, Average Loss: 5.139, avg. samples / sec: 975.65
Iteration:    920, Loss function: 6.602, Average Loss: 5.168, avg. samples / sec: 956.64
Iteration:    940, Loss function: 6.842, Average Loss: 5.197, avg. samples / sec: 971.64
Iteration:    960, Loss function: 6.431, Average Loss: 5.226, avg. samples / sec: 969.86
Iteration:    980, Loss function: 6.520, Average Loss: 5.253, avg. samples / sec: 941.21
Iteration:   1000, Loss function: 6.497, Average Loss: 5.278, avg. samples / sec: 968.01
Iteration:   1020, Loss function: 6.428, Average Loss: 5.301, avg. samples / sec: 933.80
:::MLLOG {"namespace": "", "time_ms": 1639755394732, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755394734, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.556, Average Loss: 5.324, avg. samples / sec: 961.83
Iteration:   1060, Loss function: 6.388, Average Loss: 5.346, avg. samples / sec: 969.15
Iteration:   1080, Loss function: 6.266, Average Loss: 5.366, avg. samples / sec: 924.33
Iteration:   1100, Loss function: 6.168, Average Loss: 5.385, avg. samples / sec: 936.12
Iteration:   1120, Loss function: 6.185, Average Loss: 5.404, avg. samples / sec: 974.70
Iteration:   1140, Loss function: 6.510, Average Loss: 5.421, avg. samples / sec: 979.18
Iteration:   1160, Loss function: 6.185, Average Loss: 5.437, avg. samples / sec: 934.91
Iteration:   1180, Loss function: 6.249, Average Loss: 5.453, avg. samples / sec: 969.30
Iteration:   1200, Loss function: 6.271, Average Loss: 5.469, avg. samples / sec: 985.56
Iteration:   1220, Loss function: 6.031, Average Loss: 5.483, avg. samples / sec: 970.80
Iteration:   1240, Loss function: 6.149, Average Loss: 5.496, avg. samples / sec: 967.68
Iteration:   1260, Loss function: 5.958, Average Loss: 5.507, avg. samples / sec: 950.81
Iteration:   1280, Loss function: 5.907, Average Loss: 5.519, avg. samples / sec: 945.91
Iteration:   1300, Loss function: 6.204, Average Loss: 5.531, avg. samples / sec: 926.60
Iteration:   1320, Loss function: 6.062, Average Loss: 5.543, avg. samples / sec: 928.89
Iteration:   1340, Loss function: 5.852, Average Loss: 5.551, avg. samples / sec: 912.88
Iteration:   1360, Loss function: 6.044, Average Loss: 5.561, avg. samples / sec: 900.59
Iteration:   1380, Loss function: 6.295, Average Loss: 5.571, avg. samples / sec: 985.41
Iteration:   1400, Loss function: 6.093, Average Loss: 5.579, avg. samples / sec: 999.61
Iteration:   1420, Loss function: 5.831, Average Loss: 5.586, avg. samples / sec: 971.94
Iteration:   1440, Loss function: 6.242, Average Loss: 5.593, avg. samples / sec: 968.88
Iteration:   1460, Loss function: 6.259, Average Loss: 5.602, avg. samples / sec: 960.92
Iteration:   1480, Loss function: 5.888, Average Loss: 5.610, avg. samples / sec: 964.63
Iteration:   1500, Loss function: 5.914, Average Loss: 5.617, avg. samples / sec: 958.61
Iteration:   1520, Loss function: 6.205, Average Loss: 5.622, avg. samples / sec: 978.15
Iteration:   1540, Loss function: 5.929, Average Loss: 5.626, avg. samples / sec: 950.88
Iteration:   1560, Loss function: 5.663, Average Loss: 5.630, avg. samples / sec: 961.39
Iteration:   1580, Loss function: 5.593, Average Loss: 5.634, avg. samples / sec: 938.23
Iteration:   1600, Loss function: 6.189, Average Loss: 5.639, avg. samples / sec: 961.43
Iteration:   1620, Loss function: 5.719, Average Loss: 5.644, avg. samples / sec: 975.18
Iteration:   1640, Loss function: 5.914, Average Loss: 5.646, avg. samples / sec: 985.35
Iteration:   1660, Loss function: 5.849, Average Loss: 5.650, avg. samples / sec: 919.93
Iteration:   1680, Loss function: 5.628, Average Loss: 5.652, avg. samples / sec: 887.35
Iteration:   1700, Loss function: 5.462, Average Loss: 5.656, avg. samples / sec: 890.51
Iteration:   1720, Loss function: 5.731, Average Loss: 5.657, avg. samples / sec: 971.83
Iteration:   1740, Loss function: 5.968, Average Loss: 5.660, avg. samples / sec: 912.23
Iteration:   1760, Loss function: 5.539, Average Loss: 5.660, avg. samples / sec: 861.57
Iteration:   1780, Loss function: 5.528, Average Loss: 5.660, avg. samples / sec: 932.74
Iteration:   1800, Loss function: 5.582, Average Loss: 5.661, avg. samples / sec: 976.79
Iteration:   1820, Loss function: 5.906, Average Loss: 5.664, avg. samples / sec: 980.80
Iteration:   1840, Loss function: 6.032, Average Loss: 5.666, avg. samples / sec: 980.56
Iteration:   1860, Loss function: 5.682, Average Loss: 5.665, avg. samples / sec: 915.81
Iteration:   1880, Loss function: 5.871, Average Loss: 5.667, avg. samples / sec: 945.46
Iteration:   1900, Loss function: 5.757, Average Loss: 5.667, avg. samples / sec: 958.43
Iteration:   1920, Loss function: 5.704, Average Loss: 5.666, avg. samples / sec: 1004.43
Iteration:   1940, Loss function: 5.864, Average Loss: 5.665, avg. samples / sec: 951.99
Iteration:   1960, Loss function: 5.663, Average Loss: 5.665, avg. samples / sec: 920.71
Iteration:   1980, Loss function: 5.602, Average Loss: 5.663, avg. samples / sec: 951.79
Iteration:   2000, Loss function: 5.505, Average Loss: 5.663, avg. samples / sec: 960.99
Iteration:   2020, Loss function: 5.538, Average Loss: 5.660, avg. samples / sec: 988.21
Iteration:   2040, Loss function: 5.734, Average Loss: 5.660, avg. samples / sec: 969.85
:::MLLOG {"namespace": "", "time_ms": 1639755517973, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639755517975, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.491, Average Loss: 5.659, avg. samples / sec: 992.24
Iteration:   2080, Loss function: 5.227, Average Loss: 5.656, avg. samples / sec: 954.28
Iteration:   2100, Loss function: 5.566, Average Loss: 5.654, avg. samples / sec: 988.81
Iteration:   2120, Loss function: 5.291, Average Loss: 5.651, avg. samples / sec: 965.85
Iteration:   2140, Loss function: 5.389, Average Loss: 5.647, avg. samples / sec: 905.83
Iteration:   2160, Loss function: 5.452, Average Loss: 5.645, avg. samples / sec: 939.60
Iteration:   2180, Loss function: 5.346, Average Loss: 5.643, avg. samples / sec: 867.01
Iteration:   2200, Loss function: 5.430, Average Loss: 5.639, avg. samples / sec: 954.39
Iteration:   2220, Loss function: 5.689, Average Loss: 5.636, avg. samples / sec: 911.95
Iteration:   2240, Loss function: 5.666, Average Loss: 5.633, avg. samples / sec: 984.85
Iteration:   2260, Loss function: 5.481, Average Loss: 5.629, avg. samples / sec: 905.14
Iteration:   2280, Loss function: 5.055, Average Loss: 5.627, avg. samples / sec: 947.06
Iteration:   2300, Loss function: 5.055, Average Loss: 5.624, avg. samples / sec: 996.60
Iteration:   2320, Loss function: 5.390, Average Loss: 5.621, avg. samples / sec: 948.52
Iteration:   2340, Loss function: 5.443, Average Loss: 5.617, avg. samples / sec: 971.69
Iteration:   2360, Loss function: 5.473, Average Loss: 5.614, avg. samples / sec: 973.69
Iteration:   2380, Loss function: 5.461, Average Loss: 5.610, avg. samples / sec: 997.02
Iteration:   2400, Loss function: 5.724, Average Loss: 5.605, avg. samples / sec: 996.04
Iteration:   2420, Loss function: 5.597, Average Loss: 5.602, avg. samples / sec: 990.74
Iteration:   2440, Loss function: 5.550, Average Loss: 5.599, avg. samples / sec: 919.67
Iteration:   2460, Loss function: 5.062, Average Loss: 5.595, avg. samples / sec: 962.89
Iteration:   2480, Loss function: 5.442, Average Loss: 5.591, avg. samples / sec: 997.62
Iteration:   2500, Loss function: 5.477, Average Loss: 5.587, avg. samples / sec: 989.02
Iteration:   2520, Loss function: 5.256, Average Loss: 5.580, avg. samples / sec: 965.88
Iteration:   2540, Loss function: 5.491, Average Loss: 5.577, avg. samples / sec: 913.02
Iteration:   2560, Loss function: 5.385, Average Loss: 5.574, avg. samples / sec: 958.36
Iteration:   2580, Loss function: 5.292, Average Loss: 5.570, avg. samples / sec: 968.23
Iteration:   2600, Loss function: 5.476, Average Loss: 5.567, avg. samples / sec: 941.36
Iteration:   2620, Loss function: 5.674, Average Loss: 5.563, avg. samples / sec: 977.91
Iteration:   2640, Loss function: 5.236, Average Loss: 5.560, avg. samples / sec: 992.11
Iteration:   2660, Loss function: 5.305, Average Loss: 5.556, avg. samples / sec: 980.38
Iteration:   2680, Loss function: 5.118, Average Loss: 5.551, avg. samples / sec: 956.06
Iteration:   2700, Loss function: 5.358, Average Loss: 5.546, avg. samples / sec: 989.78
Iteration:   2720, Loss function: 5.348, Average Loss: 5.542, avg. samples / sec: 988.80
Iteration:   2740, Loss function: 5.008, Average Loss: 5.538, avg. samples / sec: 964.96
Iteration:   2760, Loss function: 5.019, Average Loss: 5.533, avg. samples / sec: 948.14
Iteration:   2780, Loss function: 5.466, Average Loss: 5.530, avg. samples / sec: 963.28
Iteration:   2800, Loss function: 5.196, Average Loss: 5.526, avg. samples / sec: 991.48
Iteration:   2820, Loss function: 5.638, Average Loss: 5.520, avg. samples / sec: 970.89
Iteration:   2840, Loss function: 5.145, Average Loss: 5.516, avg. samples / sec: 898.82
Iteration:   2860, Loss function: 5.181, Average Loss: 5.509, avg. samples / sec: 877.12
Iteration:   2880, Loss function: 5.361, Average Loss: 5.504, avg. samples / sec: 963.96
Iteration:   2900, Loss function: 4.947, Average Loss: 5.500, avg. samples / sec: 963.90
Iteration:   2920, Loss function: 5.226, Average Loss: 5.495, avg. samples / sec: 956.22
Iteration:   2940, Loss function: 4.931, Average Loss: 5.489, avg. samples / sec: 895.62
Iteration:   2960, Loss function: 5.383, Average Loss: 5.484, avg. samples / sec: 863.54
Iteration:   2980, Loss function: 5.375, Average Loss: 5.480, avg. samples / sec: 954.77
Iteration:   3000, Loss function: 5.320, Average Loss: 5.475, avg. samples / sec: 975.95
Iteration:   3020, Loss function: 5.176, Average Loss: 5.469, avg. samples / sec: 988.48
Iteration:   3040, Loss function: 5.248, Average Loss: 5.464, avg. samples / sec: 931.00
Iteration:   3060, Loss function: 4.991, Average Loss: 5.458, avg. samples / sec: 990.57
Iteration:   3080, Loss function: 4.935, Average Loss: 5.453, avg. samples / sec: 998.38
:::MLLOG {"namespace": "", "time_ms": 1639755640618, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639755640620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.371, Average Loss: 5.448, avg. samples / sec: 981.68
Iteration:   3120, Loss function: 4.928, Average Loss: 5.442, avg. samples / sec: 985.24
Iteration:   3140, Loss function: 5.280, Average Loss: 5.437, avg. samples / sec: 922.22
Iteration:   3160, Loss function: 5.539, Average Loss: 5.432, avg. samples / sec: 922.02
Iteration:   3180, Loss function: 5.097, Average Loss: 5.427, avg. samples / sec: 979.75
Iteration:   3200, Loss function: 5.490, Average Loss: 5.422, avg. samples / sec: 984.95
Iteration:   3220, Loss function: 5.064, Average Loss: 5.416, avg. samples / sec: 927.72
Iteration:   3240, Loss function: 5.103, Average Loss: 5.410, avg. samples / sec: 954.80
Iteration:   3260, Loss function: 5.096, Average Loss: 5.405, avg. samples / sec: 903.49
Iteration:   3280, Loss function: 5.002, Average Loss: 5.398, avg. samples / sec: 928.86
Iteration:   3300, Loss function: 4.835, Average Loss: 5.392, avg. samples / sec: 977.96
Iteration:   3320, Loss function: 5.063, Average Loss: 5.387, avg. samples / sec: 972.98
Iteration:   3340, Loss function: 5.305, Average Loss: 5.384, avg. samples / sec: 979.59
Iteration:   3360, Loss function: 4.957, Average Loss: 5.376, avg. samples / sec: 903.68
Iteration:   3380, Loss function: 5.128, Average Loss: 5.370, avg. samples / sec: 973.13
Iteration:   3400, Loss function: 4.863, Average Loss: 5.365, avg. samples / sec: 971.62
Iteration:   3420, Loss function: 5.321, Average Loss: 5.358, avg. samples / sec: 981.63
Iteration:   3440, Loss function: 4.817, Average Loss: 5.354, avg. samples / sec: 984.43
Iteration:   3460, Loss function: 5.141, Average Loss: 5.349, avg. samples / sec: 974.10
Iteration:   3480, Loss function: 5.305, Average Loss: 5.343, avg. samples / sec: 988.79
Iteration:   3500, Loss function: 5.186, Average Loss: 5.339, avg. samples / sec: 963.67
Iteration:   3520, Loss function: 5.041, Average Loss: 5.335, avg. samples / sec: 938.26
Iteration:   3540, Loss function: 4.995, Average Loss: 5.330, avg. samples / sec: 966.57
Iteration:   3560, Loss function: 5.027, Average Loss: 5.326, avg. samples / sec: 972.82
Iteration:   3580, Loss function: 5.001, Average Loss: 5.321, avg. samples / sec: 948.46
Iteration:   3600, Loss function: 5.331, Average Loss: 5.316, avg. samples / sec: 954.53
Iteration:   3620, Loss function: 5.016, Average Loss: 5.312, avg. samples / sec: 966.81
Iteration:   3640, Loss function: 4.810, Average Loss: 5.306, avg. samples / sec: 981.75
Iteration:   3660, Loss function: 5.029, Average Loss: 5.302, avg. samples / sec: 949.04
Iteration:   3680, Loss function: 5.277, Average Loss: 5.296, avg. samples / sec: 962.95
Iteration:   3700, Loss function: 5.064, Average Loss: 5.291, avg. samples / sec: 981.62
Iteration:   3720, Loss function: 4.944, Average Loss: 5.284, avg. samples / sec: 982.81
Iteration:   3740, Loss function: 5.103, Average Loss: 5.280, avg. samples / sec: 985.23
Iteration:   3760, Loss function: 5.199, Average Loss: 5.277, avg. samples / sec: 961.59
Iteration:   3780, Loss function: 5.060, Average Loss: 5.271, avg. samples / sec: 969.04
Iteration:   3800, Loss function: 5.048, Average Loss: 5.268, avg. samples / sec: 969.93
Iteration:   3820, Loss function: 5.231, Average Loss: 5.262, avg. samples / sec: 960.53
Iteration:   3840, Loss function: 4.910, Average Loss: 5.258, avg. samples / sec: 982.60
Iteration:   3860, Loss function: 4.768, Average Loss: 5.253, avg. samples / sec: 977.54
Iteration:   3880, Loss function: 4.931, Average Loss: 5.247, avg. samples / sec: 968.67
Iteration:   3900, Loss function: 5.101, Average Loss: 5.242, avg. samples / sec: 945.25
Iteration:   3920, Loss function: 5.057, Average Loss: 5.237, avg. samples / sec: 959.66
Iteration:   3940, Loss function: 5.024, Average Loss: 5.232, avg. samples / sec: 915.39
Iteration:   3960, Loss function: 4.777, Average Loss: 5.227, avg. samples / sec: 885.32
Iteration:   3980, Loss function: 4.899, Average Loss: 5.223, avg. samples / sec: 983.27
Iteration:   4000, Loss function: 5.238, Average Loss: 5.219, avg. samples / sec: 990.23
Iteration:   4020, Loss function: 5.168, Average Loss: 5.214, avg. samples / sec: 984.46
Iteration:   4040, Loss function: 5.021, Average Loss: 5.210, avg. samples / sec: 980.94
Iteration:   4060, Loss function: 5.161, Average Loss: 5.206, avg. samples / sec: 969.88
Iteration:   4080, Loss function: 4.933, Average Loss: 5.201, avg. samples / sec: 887.24
Iteration:   4100, Loss function: 5.099, Average Loss: 5.197, avg. samples / sec: 856.74
:::MLLOG {"namespace": "", "time_ms": 1639755763117, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639755763119, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.057, Average Loss: 5.193, avg. samples / sec: 979.37
Iteration:   4140, Loss function: 4.752, Average Loss: 5.187, avg. samples / sec: 945.58
Iteration:   4160, Loss function: 4.904, Average Loss: 5.181, avg. samples / sec: 979.03
Iteration:   4180, Loss function: 4.947, Average Loss: 5.175, avg. samples / sec: 984.78
Iteration:   4200, Loss function: 4.831, Average Loss: 5.172, avg. samples / sec: 939.69
Iteration:   4220, Loss function: 4.833, Average Loss: 5.166, avg. samples / sec: 958.81
Iteration:   4240, Loss function: 4.844, Average Loss: 5.161, avg. samples / sec: 947.68
Iteration:   4260, Loss function: 4.985, Average Loss: 5.156, avg. samples / sec: 906.17
Iteration:   4280, Loss function: 5.015, Average Loss: 5.150, avg. samples / sec: 946.64
Iteration:   4300, Loss function: 4.869, Average Loss: 5.144, avg. samples / sec: 894.70
Iteration:   4320, Loss function: 4.741, Average Loss: 5.139, avg. samples / sec: 948.05
Iteration:   4340, Loss function: 4.699, Average Loss: 5.133, avg. samples / sec: 965.33
Iteration:   4360, Loss function: 4.951, Average Loss: 5.128, avg. samples / sec: 920.99
Iteration:   4380, Loss function: 5.291, Average Loss: 5.123, avg. samples / sec: 988.24
Iteration:   4400, Loss function: 4.981, Average Loss: 5.120, avg. samples / sec: 987.81
Iteration:   4420, Loss function: 4.664, Average Loss: 5.115, avg. samples / sec: 959.00
Iteration:   4440, Loss function: 4.906, Average Loss: 5.112, avg. samples / sec: 982.02
Iteration:   4460, Loss function: 5.174, Average Loss: 5.108, avg. samples / sec: 965.17
Iteration:   4480, Loss function: 4.916, Average Loss: 5.105, avg. samples / sec: 984.09
Iteration:   4500, Loss function: 4.910, Average Loss: 5.101, avg. samples / sec: 973.45
Iteration:   4520, Loss function: 4.955, Average Loss: 5.097, avg. samples / sec: 967.78
Iteration:   4540, Loss function: 5.043, Average Loss: 5.092, avg. samples / sec: 971.16
Iteration:   4560, Loss function: 4.730, Average Loss: 5.088, avg. samples / sec: 990.91
Iteration:   4580, Loss function: 4.736, Average Loss: 5.086, avg. samples / sec: 930.78
Iteration:   4600, Loss function: 4.871, Average Loss: 5.081, avg. samples / sec: 940.67
Iteration:   4620, Loss function: 4.872, Average Loss: 5.077, avg. samples / sec: 874.87
Iteration:   4640, Loss function: 4.679, Average Loss: 5.072, avg. samples / sec: 971.95
Iteration:   4660, Loss function: 4.719, Average Loss: 5.069, avg. samples / sec: 951.08
Iteration:   4680, Loss function: 5.213, Average Loss: 5.065, avg. samples / sec: 955.23
Iteration:   4700, Loss function: 4.785, Average Loss: 5.061, avg. samples / sec: 964.02
Iteration:   4720, Loss function: 4.683, Average Loss: 5.057, avg. samples / sec: 969.54
Iteration:   4740, Loss function: 4.792, Average Loss: 5.053, avg. samples / sec: 993.01
Iteration:   4760, Loss function: 4.723, Average Loss: 5.049, avg. samples / sec: 899.36
Iteration:   4780, Loss function: 5.127, Average Loss: 5.045, avg. samples / sec: 970.08
Iteration:   4800, Loss function: 4.717, Average Loss: 5.042, avg. samples / sec: 967.84
Iteration:   4820, Loss function: 4.687, Average Loss: 5.038, avg. samples / sec: 982.39
Iteration:   4840, Loss function: 5.119, Average Loss: 5.035, avg. samples / sec: 992.87
Iteration:   4860, Loss function: 4.572, Average Loss: 5.031, avg. samples / sec: 992.56
Iteration:   4880, Loss function: 5.163, Average Loss: 5.025, avg. samples / sec: 992.61
Iteration:   4900, Loss function: 4.598, Average Loss: 5.021, avg. samples / sec: 980.20
Iteration:   4920, Loss function: 4.818, Average Loss: 5.018, avg. samples / sec: 970.66
Iteration:   4940, Loss function: 4.720, Average Loss: 5.014, avg. samples / sec: 921.46
Iteration:   4960, Loss function: 4.684, Average Loss: 5.010, avg. samples / sec: 975.72
Iteration:   4980, Loss function: 4.562, Average Loss: 5.006, avg. samples / sec: 976.33
Iteration:   5000, Loss function: 5.052, Average Loss: 5.002, avg. samples / sec: 987.66
Iteration:   5020, Loss function: 5.145, Average Loss: 4.999, avg. samples / sec: 968.89
Iteration:   5040, Loss function: 4.687, Average Loss: 4.996, avg. samples / sec: 938.42
Iteration:   5060, Loss function: 4.604, Average Loss: 4.992, avg. samples / sec: 944.80
Iteration:   5080, Loss function: 4.516, Average Loss: 4.989, avg. samples / sec: 988.68
Iteration:   5100, Loss function: 4.705, Average Loss: 4.986, avg. samples / sec: 993.56
Iteration:   5120, Loss function: 4.575, Average Loss: 4.982, avg. samples / sec: 957.60
Iteration:   5140, Loss function: 4.798, Average Loss: 4.978, avg. samples / sec: 970.40
:::MLLOG {"namespace": "", "time_ms": 1639755885309, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.13 s
:::MLLOG {"namespace": "", "time_ms": 1639755917488, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639755917546, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755917551, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.785, Average Loss: 4.973, avg. samples / sec: 65.86
Iteration:   5180, Loss function: 4.823, Average Loss: 4.967, avg. samples / sec: 815.08
DONE (t=5.61s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11013
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21966
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10106
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19660
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13943
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20682
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11013 AP goal: 0.10000
Iteration:   5200, Loss function: 4.662, Average Loss: 4.964, avg. samples / sec: 818.81
:::MLLOG {"namespace": "", "time_ms": 1639755925067, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925068, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11012812430256556, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925068, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639755925482, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639755927
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 03:45:27 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 03:33:53 PM'
START TIMING RUN WAS 2021-12-17 03:33:53 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 03:45:27 PM'
ENDING TIMING RUN AT 2021-12-17 03:45:27 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 7g.40gb     Device  0: (UUID: MIG-60bbf248-9d3f-5386-9ff5-6af012397026)
+ result=694
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-17 03:33:53 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,694,nvidia,2021-12-17 03:33:53 PM'
+ echo 'ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods'
ALL FINISHED GPU: 1 x 7g.40gb x 8 Pods
