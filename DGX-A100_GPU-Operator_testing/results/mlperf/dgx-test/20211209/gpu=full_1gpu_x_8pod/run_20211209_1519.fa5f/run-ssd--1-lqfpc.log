+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-lqfpc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-lqfpc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-lqfpc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-c9297a60-5079-9a56-b935-51e08dc0f65e
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-c9297a60-5079-9a56-b935-51e08dc0f65e).
+ echo 'No MIG GPU available, using the full GPUs (GPU-c9297a60-5079-9a56-b935-51e08dc0f65e).'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065580
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:40 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:40 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:40 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:40 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-lqfpc to the sync file ...
run-ssd--1-lqfpc Found 2 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
run-ssd--1-lqfpc Found 3 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
run-ssd--1-lqfpc Found 5 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
run-ssd--1-lqfpc Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
Thu Dec  9 16:00:00 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065602925, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603085, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1958680710, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1958680710
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065604957, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065604957, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065604963, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065628535, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065628535, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065630400, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065630401, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.23s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065630838, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065630839, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065630841, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.497, Average Loss: 0.022, avg. samples / sec: 4.46
Iteration:     20, Loss function: 21.066, Average Loss: 0.453, avg. samples / sec: 846.97
Iteration:     40, Loss function: 20.724, Average Loss: 0.855, avg. samples / sec: 968.94
Iteration:     60, Loss function: 20.439, Average Loss: 1.246, avg. samples / sec: 948.65
Iteration:     80, Loss function: 20.053, Average Loss: 1.620, avg. samples / sec: 928.99
Iteration:    100, Loss function: 16.960, Average Loss: 1.962, avg. samples / sec: 965.35
Iteration:    120, Loss function: 11.340, Average Loss: 2.188, avg. samples / sec: 1018.03
Iteration:    140, Loss function: 9.790, Average Loss: 2.350, avg. samples / sec: 924.71
Iteration:    160, Loss function: 9.325, Average Loss: 2.491, avg. samples / sec: 934.07
Iteration:    180, Loss function: 8.942, Average Loss: 2.622, avg. samples / sec: 1028.83
Iteration:    200, Loss function: 8.583, Average Loss: 2.746, avg. samples / sec: 1026.79
Iteration:    220, Loss function: 8.654, Average Loss: 2.866, avg. samples / sec: 1033.05
Iteration:    240, Loss function: 8.570, Average Loss: 2.981, avg. samples / sec: 952.03
Iteration:    260, Loss function: 8.772, Average Loss: 3.093, avg. samples / sec: 1004.44
Iteration:    280, Loss function: 8.654, Average Loss: 3.205, avg. samples / sec: 993.18
Iteration:    300, Loss function: 8.451, Average Loss: 3.311, avg. samples / sec: 1031.21
Iteration:    320, Loss function: 8.446, Average Loss: 3.411, avg. samples / sec: 993.07
Iteration:    340, Loss function: 8.234, Average Loss: 3.507, avg. samples / sec: 842.35
Iteration:    360, Loss function: 7.980, Average Loss: 3.600, avg. samples / sec: 999.04
Iteration:    380, Loss function: 7.874, Average Loss: 3.689, avg. samples / sec: 979.06
Iteration:    400, Loss function: 8.013, Average Loss: 3.773, avg. samples / sec: 977.05
Iteration:    420, Loss function: 7.620, Average Loss: 3.854, avg. samples / sec: 1002.62
Iteration:    440, Loss function: 7.659, Average Loss: 3.932, avg. samples / sec: 976.01
Iteration:    460, Loss function: 7.710, Average Loss: 4.007, avg. samples / sec: 1046.93
Iteration:    480, Loss function: 7.396, Average Loss: 4.078, avg. samples / sec: 968.94
Iteration:    500, Loss function: 7.765, Average Loss: 4.148, avg. samples / sec: 985.46
Iteration:    520, Loss function: 7.428, Average Loss: 4.217, avg. samples / sec: 982.05
Iteration:    540, Loss function: 7.502, Average Loss: 4.282, avg. samples / sec: 1056.96
Iteration:    560, Loss function: 7.200, Average Loss: 4.343, avg. samples / sec: 918.71
Iteration:    580, Loss function: 6.989, Average Loss: 4.404, avg. samples / sec: 970.05
Iteration:    600, Loss function: 7.294, Average Loss: 4.462, avg. samples / sec: 1004.23
Iteration:    620, Loss function: 7.152, Average Loss: 4.519, avg. samples / sec: 1037.39
Iteration:    640, Loss function: 6.952, Average Loss: 4.574, avg. samples / sec: 1010.36
Iteration:    660, Loss function: 7.213, Average Loss: 4.626, avg. samples / sec: 1073.64
Iteration:    680, Loss function: 7.184, Average Loss: 4.676, avg. samples / sec: 1082.77
Iteration:    700, Loss function: 6.779, Average Loss: 4.723, avg. samples / sec: 1036.35
Iteration:    720, Loss function: 6.880, Average Loss: 4.771, avg. samples / sec: 1039.04
Iteration:    740, Loss function: 6.955, Average Loss: 4.816, avg. samples / sec: 1006.62
Iteration:    760, Loss function: 7.043, Average Loss: 4.860, avg. samples / sec: 961.57
Iteration:    780, Loss function: 6.971, Average Loss: 4.902, avg. samples / sec: 1019.62
Iteration:    800, Loss function: 7.137, Average Loss: 4.942, avg. samples / sec: 1004.50
Iteration:    820, Loss function: 6.792, Average Loss: 4.979, avg. samples / sec: 1012.20
Iteration:    840, Loss function: 6.660, Average Loss: 5.015, avg. samples / sec: 995.75
Iteration:    860, Loss function: 6.966, Average Loss: 5.048, avg. samples / sec: 1022.78
Iteration:    880, Loss function: 6.774, Average Loss: 5.081, avg. samples / sec: 959.02
Iteration:    900, Loss function: 6.717, Average Loss: 5.112, avg. samples / sec: 1069.05
Iteration:    920, Loss function: 6.679, Average Loss: 5.142, avg. samples / sec: 1000.61
Iteration:    940, Loss function: 6.860, Average Loss: 5.171, avg. samples / sec: 964.92
Iteration:    960, Loss function: 6.504, Average Loss: 5.199, avg. samples / sec: 1011.18
Iteration:    980, Loss function: 6.512, Average Loss: 5.227, avg. samples / sec: 997.05
Iteration:   1000, Loss function: 6.498, Average Loss: 5.253, avg. samples / sec: 1001.59
Iteration:   1020, Loss function: 6.425, Average Loss: 5.277, avg. samples / sec: 988.93
:::MLLOG {"namespace": "", "time_ms": 1639065749379, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065749380, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.653, Average Loss: 5.300, avg. samples / sec: 994.71
Iteration:   1060, Loss function: 6.471, Average Loss: 5.323, avg. samples / sec: 978.86
Iteration:   1080, Loss function: 6.556, Average Loss: 5.344, avg. samples / sec: 951.77
Iteration:   1100, Loss function: 6.280, Average Loss: 5.364, avg. samples / sec: 1043.86
Iteration:   1120, Loss function: 6.252, Average Loss: 5.383, avg. samples / sec: 982.19
Iteration:   1140, Loss function: 6.570, Average Loss: 5.402, avg. samples / sec: 1035.64
Iteration:   1160, Loss function: 5.936, Average Loss: 5.418, avg. samples / sec: 1009.74
Iteration:   1180, Loss function: 6.309, Average Loss: 5.433, avg. samples / sec: 978.56
Iteration:   1200, Loss function: 6.151, Average Loss: 5.448, avg. samples / sec: 972.42
Iteration:   1220, Loss function: 6.262, Average Loss: 5.463, avg. samples / sec: 1049.82
Iteration:   1240, Loss function: 6.109, Average Loss: 5.475, avg. samples / sec: 935.69
Iteration:   1260, Loss function: 6.077, Average Loss: 5.487, avg. samples / sec: 928.64
Iteration:   1280, Loss function: 5.863, Average Loss: 5.499, avg. samples / sec: 994.79
Iteration:   1300, Loss function: 6.141, Average Loss: 5.512, avg. samples / sec: 1044.68
Iteration:   1320, Loss function: 6.062, Average Loss: 5.524, avg. samples / sec: 987.53
Iteration:   1340, Loss function: 5.856, Average Loss: 5.534, avg. samples / sec: 970.97
Iteration:   1360, Loss function: 5.849, Average Loss: 5.545, avg. samples / sec: 958.07
Iteration:   1380, Loss function: 6.286, Average Loss: 5.555, avg. samples / sec: 933.38
Iteration:   1400, Loss function: 6.101, Average Loss: 5.564, avg. samples / sec: 1008.62
Iteration:   1420, Loss function: 6.049, Average Loss: 5.572, avg. samples / sec: 1020.75
Iteration:   1440, Loss function: 6.429, Average Loss: 5.580, avg. samples / sec: 1014.47
Iteration:   1460, Loss function: 6.129, Average Loss: 5.588, avg. samples / sec: 1033.47
Iteration:   1480, Loss function: 5.809, Average Loss: 5.596, avg. samples / sec: 1058.38
Iteration:   1500, Loss function: 6.003, Average Loss: 5.603, avg. samples / sec: 993.16
Iteration:   1520, Loss function: 6.033, Average Loss: 5.609, avg. samples / sec: 1009.24
Iteration:   1540, Loss function: 6.067, Average Loss: 5.613, avg. samples / sec: 1035.60
Iteration:   1560, Loss function: 5.700, Average Loss: 5.618, avg. samples / sec: 1005.68
Iteration:   1580, Loss function: 5.622, Average Loss: 5.623, avg. samples / sec: 1009.20
Iteration:   1600, Loss function: 6.057, Average Loss: 5.629, avg. samples / sec: 1057.34
Iteration:   1620, Loss function: 5.856, Average Loss: 5.633, avg. samples / sec: 1057.84
Iteration:   1640, Loss function: 5.909, Average Loss: 5.636, avg. samples / sec: 1050.99
Iteration:   1660, Loss function: 5.954, Average Loss: 5.641, avg. samples / sec: 1045.90
Iteration:   1680, Loss function: 5.718, Average Loss: 5.643, avg. samples / sec: 1026.03
Iteration:   1700, Loss function: 5.303, Average Loss: 5.646, avg. samples / sec: 917.51
Iteration:   1720, Loss function: 5.647, Average Loss: 5.650, avg. samples / sec: 973.92
Iteration:   1740, Loss function: 5.766, Average Loss: 5.652, avg. samples / sec: 1037.38
Iteration:   1760, Loss function: 5.717, Average Loss: 5.655, avg. samples / sec: 1035.79
Iteration:   1780, Loss function: 5.712, Average Loss: 5.656, avg. samples / sec: 1004.96
Iteration:   1800, Loss function: 5.484, Average Loss: 5.658, avg. samples / sec: 1014.54
Iteration:   1820, Loss function: 6.018, Average Loss: 5.659, avg. samples / sec: 991.02
Iteration:   1840, Loss function: 5.889, Average Loss: 5.660, avg. samples / sec: 1071.83
Iteration:   1860, Loss function: 5.650, Average Loss: 5.659, avg. samples / sec: 936.46
Iteration:   1880, Loss function: 5.950, Average Loss: 5.662, avg. samples / sec: 934.33
Iteration:   1900, Loss function: 5.853, Average Loss: 5.663, avg. samples / sec: 942.48
Iteration:   1920, Loss function: 5.736, Average Loss: 5.662, avg. samples / sec: 962.41
Iteration:   1940, Loss function: 5.771, Average Loss: 5.662, avg. samples / sec: 938.57
Iteration:   1960, Loss function: 5.616, Average Loss: 5.660, avg. samples / sec: 1088.45
Iteration:   1980, Loss function: 5.601, Average Loss: 5.659, avg. samples / sec: 1065.28
Iteration:   2000, Loss function: 5.590, Average Loss: 5.659, avg. samples / sec: 1065.15
Iteration:   2020, Loss function: 5.714, Average Loss: 5.657, avg. samples / sec: 1048.96
Iteration:   2040, Loss function: 5.590, Average Loss: 5.657, avg. samples / sec: 1015.12
:::MLLOG {"namespace": "", "time_ms": 1639065866285, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065866287, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.395, Average Loss: 5.655, avg. samples / sec: 1073.92
Iteration:   2080, Loss function: 5.086, Average Loss: 5.653, avg. samples / sec: 1036.01
Iteration:   2100, Loss function: 5.739, Average Loss: 5.652, avg. samples / sec: 992.72
Iteration:   2120, Loss function: 5.407, Average Loss: 5.648, avg. samples / sec: 1104.48
Iteration:   2140, Loss function: 5.491, Average Loss: 5.645, avg. samples / sec: 1067.98
Iteration:   2160, Loss function: 5.296, Average Loss: 5.642, avg. samples / sec: 1018.49
Iteration:   2180, Loss function: 5.516, Average Loss: 5.639, avg. samples / sec: 954.30
Iteration:   2200, Loss function: 5.566, Average Loss: 5.635, avg. samples / sec: 904.54
Iteration:   2220, Loss function: 5.705, Average Loss: 5.633, avg. samples / sec: 1011.03
Iteration:   2240, Loss function: 5.575, Average Loss: 5.629, avg. samples / sec: 1031.41
Iteration:   2260, Loss function: 5.260, Average Loss: 5.625, avg. samples / sec: 997.17
Iteration:   2280, Loss function: 5.318, Average Loss: 5.622, avg. samples / sec: 1013.94
Iteration:   2300, Loss function: 5.178, Average Loss: 5.620, avg. samples / sec: 1062.93
Iteration:   2320, Loss function: 5.497, Average Loss: 5.618, avg. samples / sec: 1016.15
Iteration:   2340, Loss function: 5.414, Average Loss: 5.615, avg. samples / sec: 964.38
Iteration:   2360, Loss function: 5.358, Average Loss: 5.610, avg. samples / sec: 1023.17
Iteration:   2380, Loss function: 5.369, Average Loss: 5.606, avg. samples / sec: 879.93
Iteration:   2400, Loss function: 5.503, Average Loss: 5.602, avg. samples / sec: 1029.44
Iteration:   2420, Loss function: 5.660, Average Loss: 5.599, avg. samples / sec: 1052.02
Iteration:   2440, Loss function: 5.482, Average Loss: 5.596, avg. samples / sec: 917.24
Iteration:   2460, Loss function: 5.176, Average Loss: 5.593, avg. samples / sec: 999.30
Iteration:   2480, Loss function: 5.369, Average Loss: 5.589, avg. samples / sec: 989.96
Iteration:   2500, Loss function: 5.338, Average Loss: 5.586, avg. samples / sec: 976.59
Iteration:   2520, Loss function: 5.455, Average Loss: 5.581, avg. samples / sec: 1028.01
Iteration:   2540, Loss function: 5.349, Average Loss: 5.578, avg. samples / sec: 1009.26
Iteration:   2560, Loss function: 5.254, Average Loss: 5.575, avg. samples / sec: 1048.58
Iteration:   2580, Loss function: 5.188, Average Loss: 5.571, avg. samples / sec: 1048.68
Iteration:   2600, Loss function: 5.308, Average Loss: 5.568, avg. samples / sec: 1034.58
Iteration:   2620, Loss function: 5.439, Average Loss: 5.563, avg. samples / sec: 1061.44
Iteration:   2640, Loss function: 5.465, Average Loss: 5.561, avg. samples / sec: 977.34
Iteration:   2660, Loss function: 5.097, Average Loss: 5.557, avg. samples / sec: 970.20
Iteration:   2680, Loss function: 5.055, Average Loss: 5.553, avg. samples / sec: 1052.06
Iteration:   2700, Loss function: 5.196, Average Loss: 5.549, avg. samples / sec: 1053.47
Iteration:   2720, Loss function: 5.395, Average Loss: 5.545, avg. samples / sec: 941.74
Iteration:   2740, Loss function: 5.051, Average Loss: 5.541, avg. samples / sec: 1057.40
Iteration:   2760, Loss function: 4.837, Average Loss: 5.536, avg. samples / sec: 912.20
Iteration:   2780, Loss function: 5.547, Average Loss: 5.532, avg. samples / sec: 905.59
Iteration:   2800, Loss function: 5.302, Average Loss: 5.528, avg. samples / sec: 1012.44
Iteration:   2820, Loss function: 5.423, Average Loss: 5.524, avg. samples / sec: 1037.24
Iteration:   2840, Loss function: 5.390, Average Loss: 5.519, avg. samples / sec: 1013.90
Iteration:   2860, Loss function: 5.179, Average Loss: 5.514, avg. samples / sec: 1011.10
Iteration:   2880, Loss function: 5.101, Average Loss: 5.509, avg. samples / sec: 1045.97
Iteration:   2900, Loss function: 5.224, Average Loss: 5.505, avg. samples / sec: 1010.42
Iteration:   2920, Loss function: 5.167, Average Loss: 5.499, avg. samples / sec: 1018.68
Iteration:   2940, Loss function: 4.952, Average Loss: 5.494, avg. samples / sec: 932.62
Iteration:   2960, Loss function: 5.398, Average Loss: 5.490, avg. samples / sec: 948.07
Iteration:   2980, Loss function: 5.378, Average Loss: 5.487, avg. samples / sec: 971.93
Iteration:   3000, Loss function: 5.175, Average Loss: 5.481, avg. samples / sec: 1039.69
Iteration:   3020, Loss function: 5.386, Average Loss: 5.475, avg. samples / sec: 1079.18
Iteration:   3040, Loss function: 5.231, Average Loss: 5.469, avg. samples / sec: 1065.38
Iteration:   3060, Loss function: 4.975, Average Loss: 5.463, avg. samples / sec: 991.86
Iteration:   3080, Loss function: 5.047, Average Loss: 5.457, avg. samples / sec: 975.51
:::MLLOG {"namespace": "", "time_ms": 1639065983141, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065983143, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.320, Average Loss: 5.452, avg. samples / sec: 951.33
Iteration:   3120, Loss function: 4.910, Average Loss: 5.446, avg. samples / sec: 1059.87
Iteration:   3140, Loss function: 5.085, Average Loss: 5.441, avg. samples / sec: 1013.09
Iteration:   3160, Loss function: 5.462, Average Loss: 5.435, avg. samples / sec: 971.38
Iteration:   3180, Loss function: 5.047, Average Loss: 5.431, avg. samples / sec: 1079.97
Iteration:   3200, Loss function: 5.393, Average Loss: 5.426, avg. samples / sec: 993.64
Iteration:   3220, Loss function: 5.247, Average Loss: 5.420, avg. samples / sec: 987.37
Iteration:   3240, Loss function: 5.063, Average Loss: 5.415, avg. samples / sec: 991.36
Iteration:   3260, Loss function: 5.144, Average Loss: 5.409, avg. samples / sec: 1029.49
Iteration:   3280, Loss function: 4.934, Average Loss: 5.403, avg. samples / sec: 970.80
Iteration:   3300, Loss function: 4.772, Average Loss: 5.397, avg. samples / sec: 1058.62
Iteration:   3320, Loss function: 5.027, Average Loss: 5.392, avg. samples / sec: 1015.61
Iteration:   3340, Loss function: 5.246, Average Loss: 5.388, avg. samples / sec: 1024.23
Iteration:   3360, Loss function: 5.242, Average Loss: 5.381, avg. samples / sec: 1029.67
Iteration:   3380, Loss function: 5.193, Average Loss: 5.374, avg. samples / sec: 1001.07
Iteration:   3400, Loss function: 4.945, Average Loss: 5.369, avg. samples / sec: 1069.32
Iteration:   3420, Loss function: 5.227, Average Loss: 5.364, avg. samples / sec: 1112.46
Iteration:   3440, Loss function: 4.995, Average Loss: 5.359, avg. samples / sec: 965.32
Iteration:   3460, Loss function: 4.996, Average Loss: 5.354, avg. samples / sec: 1069.88
Iteration:   3480, Loss function: 5.163, Average Loss: 5.349, avg. samples / sec: 1023.28
Iteration:   3500, Loss function: 5.168, Average Loss: 5.345, avg. samples / sec: 1025.99
Iteration:   3520, Loss function: 5.127, Average Loss: 5.340, avg. samples / sec: 977.20
Iteration:   3540, Loss function: 5.056, Average Loss: 5.336, avg. samples / sec: 1005.78
Iteration:   3560, Loss function: 4.925, Average Loss: 5.333, avg. samples / sec: 943.30
Iteration:   3580, Loss function: 5.092, Average Loss: 5.328, avg. samples / sec: 1021.94
Iteration:   3600, Loss function: 5.214, Average Loss: 5.321, avg. samples / sec: 993.52
Iteration:   3620, Loss function: 4.832, Average Loss: 5.316, avg. samples / sec: 1020.61
Iteration:   3640, Loss function: 4.814, Average Loss: 5.312, avg. samples / sec: 981.63
Iteration:   3660, Loss function: 5.058, Average Loss: 5.307, avg. samples / sec: 1072.82
Iteration:   3680, Loss function: 5.034, Average Loss: 5.301, avg. samples / sec: 1050.38
Iteration:   3700, Loss function: 4.837, Average Loss: 5.296, avg. samples / sec: 1016.86
Iteration:   3720, Loss function: 4.866, Average Loss: 5.289, avg. samples / sec: 1028.13
Iteration:   3740, Loss function: 5.115, Average Loss: 5.285, avg. samples / sec: 1006.13
Iteration:   3760, Loss function: 5.045, Average Loss: 5.281, avg. samples / sec: 1025.30
Iteration:   3780, Loss function: 5.070, Average Loss: 5.276, avg. samples / sec: 983.30
Iteration:   3800, Loss function: 5.019, Average Loss: 5.271, avg. samples / sec: 1025.97
Iteration:   3820, Loss function: 5.322, Average Loss: 5.266, avg. samples / sec: 1046.35
Iteration:   3840, Loss function: 4.794, Average Loss: 5.260, avg. samples / sec: 903.94
Iteration:   3860, Loss function: 4.809, Average Loss: 5.255, avg. samples / sec: 954.39
Iteration:   3880, Loss function: 5.122, Average Loss: 5.249, avg. samples / sec: 1011.89
Iteration:   3900, Loss function: 5.261, Average Loss: 5.245, avg. samples / sec: 960.34
Iteration:   3920, Loss function: 4.997, Average Loss: 5.239, avg. samples / sec: 984.95
Iteration:   3940, Loss function: 5.214, Average Loss: 5.233, avg. samples / sec: 1022.05
Iteration:   3960, Loss function: 4.812, Average Loss: 5.229, avg. samples / sec: 1072.75
Iteration:   3980, Loss function: 4.904, Average Loss: 5.225, avg. samples / sec: 1016.92
Iteration:   4000, Loss function: 5.126, Average Loss: 5.222, avg. samples / sec: 1016.45
Iteration:   4020, Loss function: 5.011, Average Loss: 5.217, avg. samples / sec: 953.49
Iteration:   4040, Loss function: 5.047, Average Loss: 5.213, avg. samples / sec: 1035.75
Iteration:   4060, Loss function: 5.213, Average Loss: 5.209, avg. samples / sec: 1037.03
Iteration:   4080, Loss function: 5.096, Average Loss: 5.205, avg. samples / sec: 1020.37
Iteration:   4100, Loss function: 5.120, Average Loss: 5.202, avg. samples / sec: 1043.77
:::MLLOG {"namespace": "", "time_ms": 1639066099014, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099016, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.047, Average Loss: 5.198, avg. samples / sec: 1064.26
Iteration:   4140, Loss function: 4.946, Average Loss: 5.193, avg. samples / sec: 1045.73
Iteration:   4160, Loss function: 4.908, Average Loss: 5.187, avg. samples / sec: 1052.80
Iteration:   4180, Loss function: 4.842, Average Loss: 5.181, avg. samples / sec: 996.94
Iteration:   4200, Loss function: 4.690, Average Loss: 5.177, avg. samples / sec: 972.41
Iteration:   4220, Loss function: 5.040, Average Loss: 5.173, avg. samples / sec: 951.12
Iteration:   4240, Loss function: 5.008, Average Loss: 5.167, avg. samples / sec: 934.54
Iteration:   4260, Loss function: 5.119, Average Loss: 5.163, avg. samples / sec: 1044.75
Iteration:   4280, Loss function: 5.076, Average Loss: 5.157, avg. samples / sec: 1068.65
Iteration:   4300, Loss function: 4.717, Average Loss: 5.150, avg. samples / sec: 1035.58
Iteration:   4320, Loss function: 4.670, Average Loss: 5.144, avg. samples / sec: 1036.82
Iteration:   4340, Loss function: 4.808, Average Loss: 5.140, avg. samples / sec: 1002.55
Iteration:   4360, Loss function: 4.938, Average Loss: 5.136, avg. samples / sec: 1028.35
Iteration:   4380, Loss function: 5.076, Average Loss: 5.131, avg. samples / sec: 974.92
Iteration:   4400, Loss function: 4.725, Average Loss: 5.127, avg. samples / sec: 992.08
Iteration:   4420, Loss function: 4.923, Average Loss: 5.122, avg. samples / sec: 942.79
Iteration:   4440, Loss function: 4.902, Average Loss: 5.117, avg. samples / sec: 1010.97
Iteration:   4460, Loss function: 5.221, Average Loss: 5.113, avg. samples / sec: 970.34
Iteration:   4480, Loss function: 5.023, Average Loss: 5.110, avg. samples / sec: 1028.66
Iteration:   4500, Loss function: 4.674, Average Loss: 5.106, avg. samples / sec: 1084.82
Iteration:   4520, Loss function: 4.771, Average Loss: 5.101, avg. samples / sec: 1016.29
Iteration:   4540, Loss function: 5.143, Average Loss: 5.096, avg. samples / sec: 1075.81
Iteration:   4560, Loss function: 4.680, Average Loss: 5.092, avg. samples / sec: 1042.43
Iteration:   4580, Loss function: 4.767, Average Loss: 5.090, avg. samples / sec: 1028.44
Iteration:   4600, Loss function: 4.859, Average Loss: 5.087, avg. samples / sec: 968.62
Iteration:   4620, Loss function: 4.808, Average Loss: 5.082, avg. samples / sec: 1025.15
Iteration:   4640, Loss function: 4.826, Average Loss: 5.078, avg. samples / sec: 1010.01
Iteration:   4660, Loss function: 4.793, Average Loss: 5.074, avg. samples / sec: 947.70
Iteration:   4680, Loss function: 5.294, Average Loss: 5.071, avg. samples / sec: 995.13
Iteration:   4700, Loss function: 4.748, Average Loss: 5.067, avg. samples / sec: 994.24
Iteration:   4720, Loss function: 4.853, Average Loss: 5.063, avg. samples / sec: 1051.49
Iteration:   4740, Loss function: 4.841, Average Loss: 5.059, avg. samples / sec: 1081.05
Iteration:   4760, Loss function: 4.755, Average Loss: 5.056, avg. samples / sec: 970.60
Iteration:   4780, Loss function: 5.209, Average Loss: 5.052, avg. samples / sec: 1049.03
Iteration:   4800, Loss function: 4.856, Average Loss: 5.049, avg. samples / sec: 1064.34
Iteration:   4820, Loss function: 4.628, Average Loss: 5.045, avg. samples / sec: 1011.93
Iteration:   4840, Loss function: 5.196, Average Loss: 5.042, avg. samples / sec: 990.57
Iteration:   4860, Loss function: 4.650, Average Loss: 5.037, avg. samples / sec: 1056.85
Iteration:   4880, Loss function: 5.064, Average Loss: 5.034, avg. samples / sec: 1020.60
Iteration:   4900, Loss function: 4.664, Average Loss: 5.030, avg. samples / sec: 982.96
Iteration:   4920, Loss function: 4.753, Average Loss: 5.027, avg. samples / sec: 1085.74
Iteration:   4940, Loss function: 4.902, Average Loss: 5.023, avg. samples / sec: 1002.34
Iteration:   4960, Loss function: 4.740, Average Loss: 5.019, avg. samples / sec: 1031.89
Iteration:   4980, Loss function: 4.485, Average Loss: 5.015, avg. samples / sec: 1028.85
Iteration:   5000, Loss function: 4.917, Average Loss: 5.012, avg. samples / sec: 1023.65
Iteration:   5020, Loss function: 4.928, Average Loss: 5.008, avg. samples / sec: 996.74
Iteration:   5040, Loss function: 4.789, Average Loss: 5.005, avg. samples / sec: 993.18
Iteration:   5060, Loss function: 4.795, Average Loss: 5.003, avg. samples / sec: 964.99
Iteration:   5080, Loss function: 4.687, Average Loss: 5.000, avg. samples / sec: 1007.09
Iteration:   5100, Loss function: 4.815, Average Loss: 4.997, avg. samples / sec: 942.63
Iteration:   5120, Loss function: 4.726, Average Loss: 4.994, avg. samples / sec: 1045.78
Iteration:   5140, Loss function: 4.982, Average Loss: 4.990, avg. samples / sec: 1038.01
:::MLLOG {"namespace": "", "time_ms": 1639066214879, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.80 s
:::MLLOG {"namespace": "", "time_ms": 1639066246735, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066246792, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246793, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.031, Average Loss: 4.985, avg. samples / sec: 67.05
Iteration:   5180, Loss function: 4.606, Average Loss: 4.979, avg. samples / sec: 1050.47
Iteration:   5200, Loss function: 4.660, Average Loss: 4.976, avg. samples / sec: 1046.47
DONE (t=5.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10450
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21131
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09307
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18321
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13300
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19501
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10450 AP goal: 0.10000
Iteration:   5220, Loss function: 4.588, Average Loss: 4.972, avg. samples / sec: 1106.23
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10449819652665043, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066255156, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:10:56 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:10:56 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065602925, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603085, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1958680710, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1958680710
:::MLLOG {"namespace": "", "time_ms": 1639065604957, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065604957, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065604962, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065604963, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065628535, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065628535, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065630400, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065630401, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.23s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065630838, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065630839, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065630841, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.497, Average Loss: 0.022, avg. samples / sec: 4.46
Iteration:     20, Loss function: 21.066, Average Loss: 0.453, avg. samples / sec: 846.97
Iteration:     40, Loss function: 20.724, Average Loss: 0.855, avg. samples / sec: 968.94
Iteration:     60, Loss function: 20.439, Average Loss: 1.246, avg. samples / sec: 948.65
Iteration:     80, Loss function: 20.053, Average Loss: 1.620, avg. samples / sec: 928.99
Iteration:    100, Loss function: 16.960, Average Loss: 1.962, avg. samples / sec: 965.35
Iteration:    120, Loss function: 11.340, Average Loss: 2.188, avg. samples / sec: 1018.03
Iteration:    140, Loss function: 9.790, Average Loss: 2.350, avg. samples / sec: 924.71
Iteration:    160, Loss function: 9.325, Average Loss: 2.491, avg. samples / sec: 934.07
Iteration:    180, Loss function: 8.942, Average Loss: 2.622, avg. samples / sec: 1028.83
Iteration:    200, Loss function: 8.583, Average Loss: 2.746, avg. samples / sec: 1026.79
Iteration:    220, Loss function: 8.654, Average Loss: 2.866, avg. samples / sec: 1033.05
Iteration:    240, Loss function: 8.570, Average Loss: 2.981, avg. samples / sec: 952.03
Iteration:    260, Loss function: 8.772, Average Loss: 3.093, avg. samples / sec: 1004.44
Iteration:    280, Loss function: 8.654, Average Loss: 3.205, avg. samples / sec: 993.18
Iteration:    300, Loss function: 8.451, Average Loss: 3.311, avg. samples / sec: 1031.21
Iteration:    320, Loss function: 8.446, Average Loss: 3.411, avg. samples / sec: 993.07
Iteration:    340, Loss function: 8.234, Average Loss: 3.507, avg. samples / sec: 842.35
Iteration:    360, Loss function: 7.980, Average Loss: 3.600, avg. samples / sec: 999.04
Iteration:    380, Loss function: 7.874, Average Loss: 3.689, avg. samples / sec: 979.06
Iteration:    400, Loss function: 8.013, Average Loss: 3.773, avg. samples / sec: 977.05
Iteration:    420, Loss function: 7.620, Average Loss: 3.854, avg. samples / sec: 1002.62
Iteration:    440, Loss function: 7.659, Average Loss: 3.932, avg. samples / sec: 976.01
Iteration:    460, Loss function: 7.710, Average Loss: 4.007, avg. samples / sec: 1046.93
Iteration:    480, Loss function: 7.396, Average Loss: 4.078, avg. samples / sec: 968.94
Iteration:    500, Loss function: 7.765, Average Loss: 4.148, avg. samples / sec: 985.46
Iteration:    520, Loss function: 7.428, Average Loss: 4.217, avg. samples / sec: 982.05
Iteration:    540, Loss function: 7.502, Average Loss: 4.282, avg. samples / sec: 1056.96
Iteration:    560, Loss function: 7.200, Average Loss: 4.343, avg. samples / sec: 918.71
Iteration:    580, Loss function: 6.989, Average Loss: 4.404, avg. samples / sec: 970.05
Iteration:    600, Loss function: 7.294, Average Loss: 4.462, avg. samples / sec: 1004.23
Iteration:    620, Loss function: 7.152, Average Loss: 4.519, avg. samples / sec: 1037.39
Iteration:    640, Loss function: 6.952, Average Loss: 4.574, avg. samples / sec: 1010.36
Iteration:    660, Loss function: 7.213, Average Loss: 4.626, avg. samples / sec: 1073.64
Iteration:    680, Loss function: 7.184, Average Loss: 4.676, avg. samples / sec: 1082.77
Iteration:    700, Loss function: 6.779, Average Loss: 4.723, avg. samples / sec: 1036.35
Iteration:    720, Loss function: 6.880, Average Loss: 4.771, avg. samples / sec: 1039.04
Iteration:    740, Loss function: 6.955, Average Loss: 4.816, avg. samples / sec: 1006.62
Iteration:    760, Loss function: 7.043, Average Loss: 4.860, avg. samples / sec: 961.57
Iteration:    780, Loss function: 6.971, Average Loss: 4.902, avg. samples / sec: 1019.62
Iteration:    800, Loss function: 7.137, Average Loss: 4.942, avg. samples / sec: 1004.50
Iteration:    820, Loss function: 6.792, Average Loss: 4.979, avg. samples / sec: 1012.20
Iteration:    840, Loss function: 6.660, Average Loss: 5.015, avg. samples / sec: 995.75
Iteration:    860, Loss function: 6.966, Average Loss: 5.048, avg. samples / sec: 1022.78
Iteration:    880, Loss function: 6.774, Average Loss: 5.081, avg. samples / sec: 959.02
Iteration:    900, Loss function: 6.717, Average Loss: 5.112, avg. samples / sec: 1069.05
Iteration:    920, Loss function: 6.679, Average Loss: 5.142, avg. samples / sec: 1000.61
Iteration:    940, Loss function: 6.860, Average Loss: 5.171, avg. samples / sec: 964.92
Iteration:    960, Loss function: 6.504, Average Loss: 5.199, avg. samples / sec: 1011.18
Iteration:    980, Loss function: 6.512, Average Loss: 5.227, avg. samples / sec: 997.05
Iteration:   1000, Loss function: 6.498, Average Loss: 5.253, avg. samples / sec: 1001.59
Iteration:   1020, Loss function: 6.425, Average Loss: 5.277, avg. samples / sec: 988.93
:::MLLOG {"namespace": "", "time_ms": 1639065749379, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065749380, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.653, Average Loss: 5.300, avg. samples / sec: 994.71
Iteration:   1060, Loss function: 6.471, Average Loss: 5.323, avg. samples / sec: 978.86
Iteration:   1080, Loss function: 6.556, Average Loss: 5.344, avg. samples / sec: 951.77
Iteration:   1100, Loss function: 6.280, Average Loss: 5.364, avg. samples / sec: 1043.86
Iteration:   1120, Loss function: 6.252, Average Loss: 5.383, avg. samples / sec: 982.19
Iteration:   1140, Loss function: 6.570, Average Loss: 5.402, avg. samples / sec: 1035.64
Iteration:   1160, Loss function: 5.936, Average Loss: 5.418, avg. samples / sec: 1009.74
Iteration:   1180, Loss function: 6.309, Average Loss: 5.433, avg. samples / sec: 978.56
Iteration:   1200, Loss function: 6.151, Average Loss: 5.448, avg. samples / sec: 972.42
Iteration:   1220, Loss function: 6.262, Average Loss: 5.463, avg. samples / sec: 1049.82
Iteration:   1240, Loss function: 6.109, Average Loss: 5.475, avg. samples / sec: 935.69
Iteration:   1260, Loss function: 6.077, Average Loss: 5.487, avg. samples / sec: 928.64
Iteration:   1280, Loss function: 5.863, Average Loss: 5.499, avg. samples / sec: 994.79
Iteration:   1300, Loss function: 6.141, Average Loss: 5.512, avg. samples / sec: 1044.68
Iteration:   1320, Loss function: 6.062, Average Loss: 5.524, avg. samples / sec: 987.53
Iteration:   1340, Loss function: 5.856, Average Loss: 5.534, avg. samples / sec: 970.97
Iteration:   1360, Loss function: 5.849, Average Loss: 5.545, avg. samples / sec: 958.07
Iteration:   1380, Loss function: 6.286, Average Loss: 5.555, avg. samples / sec: 933.38
Iteration:   1400, Loss function: 6.101, Average Loss: 5.564, avg. samples / sec: 1008.62
Iteration:   1420, Loss function: 6.049, Average Loss: 5.572, avg. samples / sec: 1020.75
Iteration:   1440, Loss function: 6.429, Average Loss: 5.580, avg. samples / sec: 1014.47
Iteration:   1460, Loss function: 6.129, Average Loss: 5.588, avg. samples / sec: 1033.47
Iteration:   1480, Loss function: 5.809, Average Loss: 5.596, avg. samples / sec: 1058.38
Iteration:   1500, Loss function: 6.003, Average Loss: 5.603, avg. samples / sec: 993.16
Iteration:   1520, Loss function: 6.033, Average Loss: 5.609, avg. samples / sec: 1009.24
Iteration:   1540, Loss function: 6.067, Average Loss: 5.613, avg. samples / sec: 1035.60
Iteration:   1560, Loss function: 5.700, Average Loss: 5.618, avg. samples / sec: 1005.68
Iteration:   1580, Loss function: 5.622, Average Loss: 5.623, avg. samples / sec: 1009.20
Iteration:   1600, Loss function: 6.057, Average Loss: 5.629, avg. samples / sec: 1057.34
Iteration:   1620, Loss function: 5.856, Average Loss: 5.633, avg. samples / sec: 1057.84
Iteration:   1640, Loss function: 5.909, Average Loss: 5.636, avg. samples / sec: 1050.99
Iteration:   1660, Loss function: 5.954, Average Loss: 5.641, avg. samples / sec: 1045.90
Iteration:   1680, Loss function: 5.718, Average Loss: 5.643, avg. samples / sec: 1026.03
Iteration:   1700, Loss function: 5.303, Average Loss: 5.646, avg. samples / sec: 917.51
Iteration:   1720, Loss function: 5.647, Average Loss: 5.650, avg. samples / sec: 973.92
Iteration:   1740, Loss function: 5.766, Average Loss: 5.652, avg. samples / sec: 1037.38
Iteration:   1760, Loss function: 5.717, Average Loss: 5.655, avg. samples / sec: 1035.79
Iteration:   1780, Loss function: 5.712, Average Loss: 5.656, avg. samples / sec: 1004.96
Iteration:   1800, Loss function: 5.484, Average Loss: 5.658, avg. samples / sec: 1014.54
Iteration:   1820, Loss function: 6.018, Average Loss: 5.659, avg. samples / sec: 991.02
Iteration:   1840, Loss function: 5.889, Average Loss: 5.660, avg. samples / sec: 1071.83
Iteration:   1860, Loss function: 5.650, Average Loss: 5.659, avg. samples / sec: 936.46
Iteration:   1880, Loss function: 5.950, Average Loss: 5.662, avg. samples / sec: 934.33
Iteration:   1900, Loss function: 5.853, Average Loss: 5.663, avg. samples / sec: 942.48
Iteration:   1920, Loss function: 5.736, Average Loss: 5.662, avg. samples / sec: 962.41
Iteration:   1940, Loss function: 5.771, Average Loss: 5.662, avg. samples / sec: 938.57
Iteration:   1960, Loss function: 5.616, Average Loss: 5.660, avg. samples / sec: 1088.45
Iteration:   1980, Loss function: 5.601, Average Loss: 5.659, avg. samples / sec: 1065.28
Iteration:   2000, Loss function: 5.590, Average Loss: 5.659, avg. samples / sec: 1065.15
Iteration:   2020, Loss function: 5.714, Average Loss: 5.657, avg. samples / sec: 1048.96
Iteration:   2040, Loss function: 5.590, Average Loss: 5.657, avg. samples / sec: 1015.12
:::MLLOG {"namespace": "", "time_ms": 1639065866285, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065866287, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.395, Average Loss: 5.655, avg. samples / sec: 1073.92
Iteration:   2080, Loss function: 5.086, Average Loss: 5.653, avg. samples / sec: 1036.01
Iteration:   2100, Loss function: 5.739, Average Loss: 5.652, avg. samples / sec: 992.72
Iteration:   2120, Loss function: 5.407, Average Loss: 5.648, avg. samples / sec: 1104.48
Iteration:   2140, Loss function: 5.491, Average Loss: 5.645, avg. samples / sec: 1067.98
Iteration:   2160, Loss function: 5.296, Average Loss: 5.642, avg. samples / sec: 1018.49
Iteration:   2180, Loss function: 5.516, Average Loss: 5.639, avg. samples / sec: 954.30
Iteration:   2200, Loss function: 5.566, Average Loss: 5.635, avg. samples / sec: 904.54
Iteration:   2220, Loss function: 5.705, Average Loss: 5.633, avg. samples / sec: 1011.03
Iteration:   2240, Loss function: 5.575, Average Loss: 5.629, avg. samples / sec: 1031.41
Iteration:   2260, Loss function: 5.260, Average Loss: 5.625, avg. samples / sec: 997.17
Iteration:   2280, Loss function: 5.318, Average Loss: 5.622, avg. samples / sec: 1013.94
Iteration:   2300, Loss function: 5.178, Average Loss: 5.620, avg. samples / sec: 1062.93
Iteration:   2320, Loss function: 5.497, Average Loss: 5.618, avg. samples / sec: 1016.15
Iteration:   2340, Loss function: 5.414, Average Loss: 5.615, avg. samples / sec: 964.38
Iteration:   2360, Loss function: 5.358, Average Loss: 5.610, avg. samples / sec: 1023.17
Iteration:   2380, Loss function: 5.369, Average Loss: 5.606, avg. samples / sec: 879.93
Iteration:   2400, Loss function: 5.503, Average Loss: 5.602, avg. samples / sec: 1029.44
Iteration:   2420, Loss function: 5.660, Average Loss: 5.599, avg. samples / sec: 1052.02
Iteration:   2440, Loss function: 5.482, Average Loss: 5.596, avg. samples / sec: 917.24
Iteration:   2460, Loss function: 5.176, Average Loss: 5.593, avg. samples / sec: 999.30
Iteration:   2480, Loss function: 5.369, Average Loss: 5.589, avg. samples / sec: 989.96
Iteration:   2500, Loss function: 5.338, Average Loss: 5.586, avg. samples / sec: 976.59
Iteration:   2520, Loss function: 5.455, Average Loss: 5.581, avg. samples / sec: 1028.01
Iteration:   2540, Loss function: 5.349, Average Loss: 5.578, avg. samples / sec: 1009.26
Iteration:   2560, Loss function: 5.254, Average Loss: 5.575, avg. samples / sec: 1048.58
Iteration:   2580, Loss function: 5.188, Average Loss: 5.571, avg. samples / sec: 1048.68
Iteration:   2600, Loss function: 5.308, Average Loss: 5.568, avg. samples / sec: 1034.58
Iteration:   2620, Loss function: 5.439, Average Loss: 5.563, avg. samples / sec: 1061.44
Iteration:   2640, Loss function: 5.465, Average Loss: 5.561, avg. samples / sec: 977.34
Iteration:   2660, Loss function: 5.097, Average Loss: 5.557, avg. samples / sec: 970.20
Iteration:   2680, Loss function: 5.055, Average Loss: 5.553, avg. samples / sec: 1052.06
Iteration:   2700, Loss function: 5.196, Average Loss: 5.549, avg. samples / sec: 1053.47
Iteration:   2720, Loss function: 5.395, Average Loss: 5.545, avg. samples / sec: 941.74
Iteration:   2740, Loss function: 5.051, Average Loss: 5.541, avg. samples / sec: 1057.40
Iteration:   2760, Loss function: 4.837, Average Loss: 5.536, avg. samples / sec: 912.20
Iteration:   2780, Loss function: 5.547, Average Loss: 5.532, avg. samples / sec: 905.59
Iteration:   2800, Loss function: 5.302, Average Loss: 5.528, avg. samples / sec: 1012.44
Iteration:   2820, Loss function: 5.423, Average Loss: 5.524, avg. samples / sec: 1037.24
Iteration:   2840, Loss function: 5.390, Average Loss: 5.519, avg. samples / sec: 1013.90
Iteration:   2860, Loss function: 5.179, Average Loss: 5.514, avg. samples / sec: 1011.10
Iteration:   2880, Loss function: 5.101, Average Loss: 5.509, avg. samples / sec: 1045.97
Iteration:   2900, Loss function: 5.224, Average Loss: 5.505, avg. samples / sec: 1010.42
Iteration:   2920, Loss function: 5.167, Average Loss: 5.499, avg. samples / sec: 1018.68
Iteration:   2940, Loss function: 4.952, Average Loss: 5.494, avg. samples / sec: 932.62
Iteration:   2960, Loss function: 5.398, Average Loss: 5.490, avg. samples / sec: 948.07
Iteration:   2980, Loss function: 5.378, Average Loss: 5.487, avg. samples / sec: 971.93
Iteration:   3000, Loss function: 5.175, Average Loss: 5.481, avg. samples / sec: 1039.69
Iteration:   3020, Loss function: 5.386, Average Loss: 5.475, avg. samples / sec: 1079.18
Iteration:   3040, Loss function: 5.231, Average Loss: 5.469, avg. samples / sec: 1065.38
Iteration:   3060, Loss function: 4.975, Average Loss: 5.463, avg. samples / sec: 991.86
Iteration:   3080, Loss function: 5.047, Average Loss: 5.457, avg. samples / sec: 975.51
:::MLLOG {"namespace": "", "time_ms": 1639065983141, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065983143, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.320, Average Loss: 5.452, avg. samples / sec: 951.33
Iteration:   3120, Loss function: 4.910, Average Loss: 5.446, avg. samples / sec: 1059.87
Iteration:   3140, Loss function: 5.085, Average Loss: 5.441, avg. samples / sec: 1013.09
Iteration:   3160, Loss function: 5.462, Average Loss: 5.435, avg. samples / sec: 971.38
Iteration:   3180, Loss function: 5.047, Average Loss: 5.431, avg. samples / sec: 1079.97
Iteration:   3200, Loss function: 5.393, Average Loss: 5.426, avg. samples / sec: 993.64
Iteration:   3220, Loss function: 5.247, Average Loss: 5.420, avg. samples / sec: 987.37
Iteration:   3240, Loss function: 5.063, Average Loss: 5.415, avg. samples / sec: 991.36
Iteration:   3260, Loss function: 5.144, Average Loss: 5.409, avg. samples / sec: 1029.49
Iteration:   3280, Loss function: 4.934, Average Loss: 5.403, avg. samples / sec: 970.80
Iteration:   3300, Loss function: 4.772, Average Loss: 5.397, avg. samples / sec: 1058.62
Iteration:   3320, Loss function: 5.027, Average Loss: 5.392, avg. samples / sec: 1015.61
Iteration:   3340, Loss function: 5.246, Average Loss: 5.388, avg. samples / sec: 1024.23
Iteration:   3360, Loss function: 5.242, Average Loss: 5.381, avg. samples / sec: 1029.67
Iteration:   3380, Loss function: 5.193, Average Loss: 5.374, avg. samples / sec: 1001.07
Iteration:   3400, Loss function: 4.945, Average Loss: 5.369, avg. samples / sec: 1069.32
Iteration:   3420, Loss function: 5.227, Average Loss: 5.364, avg. samples / sec: 1112.46
Iteration:   3440, Loss function: 4.995, Average Loss: 5.359, avg. samples / sec: 965.32
Iteration:   3460, Loss function: 4.996, Average Loss: 5.354, avg. samples / sec: 1069.88
Iteration:   3480, Loss function: 5.163, Average Loss: 5.349, avg. samples / sec: 1023.28
Iteration:   3500, Loss function: 5.168, Average Loss: 5.345, avg. samples / sec: 1025.99
Iteration:   3520, Loss function: 5.127, Average Loss: 5.340, avg. samples / sec: 977.20
Iteration:   3540, Loss function: 5.056, Average Loss: 5.336, avg. samples / sec: 1005.78
Iteration:   3560, Loss function: 4.925, Average Loss: 5.333, avg. samples / sec: 943.30
Iteration:   3580, Loss function: 5.092, Average Loss: 5.328, avg. samples / sec: 1021.94
Iteration:   3600, Loss function: 5.214, Average Loss: 5.321, avg. samples / sec: 993.52
Iteration:   3620, Loss function: 4.832, Average Loss: 5.316, avg. samples / sec: 1020.61
Iteration:   3640, Loss function: 4.814, Average Loss: 5.312, avg. samples / sec: 981.63
Iteration:   3660, Loss function: 5.058, Average Loss: 5.307, avg. samples / sec: 1072.82
Iteration:   3680, Loss function: 5.034, Average Loss: 5.301, avg. samples / sec: 1050.38
Iteration:   3700, Loss function: 4.837, Average Loss: 5.296, avg. samples / sec: 1016.86
Iteration:   3720, Loss function: 4.866, Average Loss: 5.289, avg. samples / sec: 1028.13
Iteration:   3740, Loss function: 5.115, Average Loss: 5.285, avg. samples / sec: 1006.13
Iteration:   3760, Loss function: 5.045, Average Loss: 5.281, avg. samples / sec: 1025.30
Iteration:   3780, Loss function: 5.070, Average Loss: 5.276, avg. samples / sec: 983.30
Iteration:   3800, Loss function: 5.019, Average Loss: 5.271, avg. samples / sec: 1025.97
Iteration:   3820, Loss function: 5.322, Average Loss: 5.266, avg. samples / sec: 1046.35
Iteration:   3840, Loss function: 4.794, Average Loss: 5.260, avg. samples / sec: 903.94
Iteration:   3860, Loss function: 4.809, Average Loss: 5.255, avg. samples / sec: 954.39
Iteration:   3880, Loss function: 5.122, Average Loss: 5.249, avg. samples / sec: 1011.89
Iteration:   3900, Loss function: 5.261, Average Loss: 5.245, avg. samples / sec: 960.34
Iteration:   3920, Loss function: 4.997, Average Loss: 5.239, avg. samples / sec: 984.95
Iteration:   3940, Loss function: 5.214, Average Loss: 5.233, avg. samples / sec: 1022.05
Iteration:   3960, Loss function: 4.812, Average Loss: 5.229, avg. samples / sec: 1072.75
Iteration:   3980, Loss function: 4.904, Average Loss: 5.225, avg. samples / sec: 1016.92
Iteration:   4000, Loss function: 5.126, Average Loss: 5.222, avg. samples / sec: 1016.45
Iteration:   4020, Loss function: 5.011, Average Loss: 5.217, avg. samples / sec: 953.49
Iteration:   4040, Loss function: 5.047, Average Loss: 5.213, avg. samples / sec: 1035.75
Iteration:   4060, Loss function: 5.213, Average Loss: 5.209, avg. samples / sec: 1037.03
Iteration:   4080, Loss function: 5.096, Average Loss: 5.205, avg. samples / sec: 1020.37
Iteration:   4100, Loss function: 5.120, Average Loss: 5.202, avg. samples / sec: 1043.77
:::MLLOG {"namespace": "", "time_ms": 1639066099014, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099016, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.047, Average Loss: 5.198, avg. samples / sec: 1064.26
Iteration:   4140, Loss function: 4.946, Average Loss: 5.193, avg. samples / sec: 1045.73
Iteration:   4160, Loss function: 4.908, Average Loss: 5.187, avg. samples / sec: 1052.80
Iteration:   4180, Loss function: 4.842, Average Loss: 5.181, avg. samples / sec: 996.94
Iteration:   4200, Loss function: 4.690, Average Loss: 5.177, avg. samples / sec: 972.41
Iteration:   4220, Loss function: 5.040, Average Loss: 5.173, avg. samples / sec: 951.12
Iteration:   4240, Loss function: 5.008, Average Loss: 5.167, avg. samples / sec: 934.54
Iteration:   4260, Loss function: 5.119, Average Loss: 5.163, avg. samples / sec: 1044.75
Iteration:   4280, Loss function: 5.076, Average Loss: 5.157, avg. samples / sec: 1068.65
Iteration:   4300, Loss function: 4.717, Average Loss: 5.150, avg. samples / sec: 1035.58
Iteration:   4320, Loss function: 4.670, Average Loss: 5.144, avg. samples / sec: 1036.82
Iteration:   4340, Loss function: 4.808, Average Loss: 5.140, avg. samples / sec: 1002.55
Iteration:   4360, Loss function: 4.938, Average Loss: 5.136, avg. samples / sec: 1028.35
Iteration:   4380, Loss function: 5.076, Average Loss: 5.131, avg. samples / sec: 974.92
Iteration:   4400, Loss function: 4.725, Average Loss: 5.127, avg. samples / sec: 992.08
Iteration:   4420, Loss function: 4.923, Average Loss: 5.122, avg. samples / sec: 942.79
Iteration:   4440, Loss function: 4.902, Average Loss: 5.117, avg. samples / sec: 1010.97
Iteration:   4460, Loss function: 5.221, Average Loss: 5.113, avg. samples / sec: 970.34
Iteration:   4480, Loss function: 5.023, Average Loss: 5.110, avg. samples / sec: 1028.66
Iteration:   4500, Loss function: 4.674, Average Loss: 5.106, avg. samples / sec: 1084.82
Iteration:   4520, Loss function: 4.771, Average Loss: 5.101, avg. samples / sec: 1016.29
Iteration:   4540, Loss function: 5.143, Average Loss: 5.096, avg. samples / sec: 1075.81
Iteration:   4560, Loss function: 4.680, Average Loss: 5.092, avg. samples / sec: 1042.43
Iteration:   4580, Loss function: 4.767, Average Loss: 5.090, avg. samples / sec: 1028.44
Iteration:   4600, Loss function: 4.859, Average Loss: 5.087, avg. samples / sec: 968.62
Iteration:   4620, Loss function: 4.808, Average Loss: 5.082, avg. samples / sec: 1025.15
Iteration:   4640, Loss function: 4.826, Average Loss: 5.078, avg. samples / sec: 1010.01
Iteration:   4660, Loss function: 4.793, Average Loss: 5.074, avg. samples / sec: 947.70
Iteration:   4680, Loss function: 5.294, Average Loss: 5.071, avg. samples / sec: 995.13
Iteration:   4700, Loss function: 4.748, Average Loss: 5.067, avg. samples / sec: 994.24
Iteration:   4720, Loss function: 4.853, Average Loss: 5.063, avg. samples / sec: 1051.49
Iteration:   4740, Loss function: 4.841, Average Loss: 5.059, avg. samples / sec: 1081.05
Iteration:   4760, Loss function: 4.755, Average Loss: 5.056, avg. samples / sec: 970.60
Iteration:   4780, Loss function: 5.209, Average Loss: 5.052, avg. samples / sec: 1049.03
Iteration:   4800, Loss function: 4.856, Average Loss: 5.049, avg. samples / sec: 1064.34
Iteration:   4820, Loss function: 4.628, Average Loss: 5.045, avg. samples / sec: 1011.93
Iteration:   4840, Loss function: 5.196, Average Loss: 5.042, avg. samples / sec: 990.57
Iteration:   4860, Loss function: 4.650, Average Loss: 5.037, avg. samples / sec: 1056.85
Iteration:   4880, Loss function: 5.064, Average Loss: 5.034, avg. samples / sec: 1020.60
Iteration:   4900, Loss function: 4.664, Average Loss: 5.030, avg. samples / sec: 982.96
Iteration:   4920, Loss function: 4.753, Average Loss: 5.027, avg. samples / sec: 1085.74
Iteration:   4940, Loss function: 4.902, Average Loss: 5.023, avg. samples / sec: 1002.34
Iteration:   4960, Loss function: 4.740, Average Loss: 5.019, avg. samples / sec: 1031.89
Iteration:   4980, Loss function: 4.485, Average Loss: 5.015, avg. samples / sec: 1028.85
Iteration:   5000, Loss function: 4.917, Average Loss: 5.012, avg. samples / sec: 1023.65
Iteration:   5020, Loss function: 4.928, Average Loss: 5.008, avg. samples / sec: 996.74
Iteration:   5040, Loss function: 4.789, Average Loss: 5.005, avg. samples / sec: 993.18
Iteration:   5060, Loss function: 4.795, Average Loss: 5.003, avg. samples / sec: 964.99
Iteration:   5080, Loss function: 4.687, Average Loss: 5.000, avg. samples / sec: 1007.09
Iteration:   5100, Loss function: 4.815, Average Loss: 4.997, avg. samples / sec: 942.63
Iteration:   5120, Loss function: 4.726, Average Loss: 4.994, avg. samples / sec: 1045.78
Iteration:   5140, Loss function: 4.982, Average Loss: 4.990, avg. samples / sec: 1038.01
:::MLLOG {"namespace": "", "time_ms": 1639066214879, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.80 s
:::MLLOG {"namespace": "", "time_ms": 1639066246735, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066246792, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246793, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.031, Average Loss: 4.985, avg. samples / sec: 67.05
Iteration:   5180, Loss function: 4.606, Average Loss: 4.979, avg. samples / sec: 1050.47
Iteration:   5200, Loss function: 4.660, Average Loss: 4.976, avg. samples / sec: 1046.47
DONE (t=5.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10450
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21131
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09307
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18321
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13300
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19501
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10450 AP goal: 0.10000
Iteration:   5220, Loss function: 4.588, Average Loss: 4.972, avg. samples / sec: 1106.23
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10449819652665043, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254909, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066255156, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066256
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:10:56 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:40 PM'
START TIMING RUN WAS 2021-12-09 03:59:40 PM
ENDING TIMING RUN AT 2021-12-09 04:10:56 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:10:56 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
+ result=676
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,676,nvidia,2021-12-09 03:59:40 PM'
RESULT,SINGLE_STAGE_DETECTOR,,676,nvidia,2021-12-09 03:59:40 PM
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
