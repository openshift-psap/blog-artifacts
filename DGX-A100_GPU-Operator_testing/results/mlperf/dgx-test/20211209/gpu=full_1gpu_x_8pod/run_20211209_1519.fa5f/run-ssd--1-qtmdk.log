+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-qtmdk.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-qtmdk.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-qtmdk.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f).'
No MIG GPU available, using the full GPUs (GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f).
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065589
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:49 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:49 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-qtmdk to the sync file ...
run-ssd--1-qtmdk Found 5 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
run-ssd--1-qtmdk Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
Thu Dec  9 15:59:59 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
Running on all the 1 GPUs 
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065601833, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065601976, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1537300841, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1537300841
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065603710, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065603710, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065626898, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065626898, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065628279, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065628280, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065628550, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065628551, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065628552, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.587, Average Loss: 0.023, avg. samples / sec: 4.65
Iteration:     20, Loss function: 21.130, Average Loss: 0.454, avg. samples / sec: 1012.86
Iteration:     40, Loss function: 20.882, Average Loss: 0.856, avg. samples / sec: 1025.73
Iteration:     60, Loss function: 20.496, Average Loss: 1.246, avg. samples / sec: 964.21
Iteration:     80, Loss function: 20.105, Average Loss: 1.620, avg. samples / sec: 986.17
Iteration:    100, Loss function: 16.028, Average Loss: 1.953, avg. samples / sec: 990.04
Iteration:    120, Loss function: 10.970, Average Loss: 2.164, avg. samples / sec: 971.03
Iteration:    140, Loss function: 9.806, Average Loss: 2.324, avg. samples / sec: 986.17
Iteration:    160, Loss function: 9.328, Average Loss: 2.464, avg. samples / sec: 988.81
Iteration:    180, Loss function: 8.870, Average Loss: 2.594, avg. samples / sec: 1038.57
Iteration:    200, Loss function: 8.615, Average Loss: 2.719, avg. samples / sec: 962.65
Iteration:    220, Loss function: 8.692, Average Loss: 2.840, avg. samples / sec: 995.61
Iteration:    240, Loss function: 9.050, Average Loss: 2.962, avg. samples / sec: 955.32
Iteration:    260, Loss function: 8.868, Average Loss: 3.080, avg. samples / sec: 1016.64
Iteration:    280, Loss function: 8.560, Average Loss: 3.190, avg. samples / sec: 968.40
Iteration:    300, Loss function: 8.307, Average Loss: 3.294, avg. samples / sec: 1008.34
Iteration:    320, Loss function: 8.346, Average Loss: 3.395, avg. samples / sec: 1047.38
Iteration:    340, Loss function: 8.209, Average Loss: 3.492, avg. samples / sec: 951.23
Iteration:    360, Loss function: 8.047, Average Loss: 3.584, avg. samples / sec: 697.14
Iteration:    380, Loss function: 8.016, Average Loss: 3.674, avg. samples / sec: 1043.26
Iteration:    400, Loss function: 7.979, Average Loss: 3.759, avg. samples / sec: 941.23
Iteration:    420, Loss function: 7.534, Average Loss: 3.840, avg. samples / sec: 1022.96
Iteration:    440, Loss function: 7.866, Average Loss: 3.919, avg. samples / sec: 1028.02
Iteration:    460, Loss function: 7.818, Average Loss: 3.995, avg. samples / sec: 953.11
Iteration:    480, Loss function: 7.488, Average Loss: 4.068, avg. samples / sec: 1078.91
Iteration:    500, Loss function: 7.630, Average Loss: 4.139, avg. samples / sec: 1025.64
Iteration:    520, Loss function: 7.487, Average Loss: 4.206, avg. samples / sec: 937.30
Iteration:    540, Loss function: 7.267, Average Loss: 4.271, avg. samples / sec: 998.05
Iteration:    560, Loss function: 7.121, Average Loss: 4.332, avg. samples / sec: 1039.98
Iteration:    580, Loss function: 7.300, Average Loss: 4.394, avg. samples / sec: 1037.57
Iteration:    600, Loss function: 7.264, Average Loss: 4.452, avg. samples / sec: 1003.19
Iteration:    620, Loss function: 7.128, Average Loss: 4.508, avg. samples / sec: 958.49
Iteration:    640, Loss function: 6.774, Average Loss: 4.562, avg. samples / sec: 1050.31
Iteration:    660, Loss function: 7.124, Average Loss: 4.614, avg. samples / sec: 990.36
Iteration:    680, Loss function: 7.252, Average Loss: 4.664, avg. samples / sec: 1022.21
Iteration:    700, Loss function: 6.742, Average Loss: 4.712, avg. samples / sec: 1028.32
Iteration:    720, Loss function: 7.022, Average Loss: 4.761, avg. samples / sec: 1037.75
Iteration:    740, Loss function: 6.912, Average Loss: 4.806, avg. samples / sec: 1019.08
Iteration:    760, Loss function: 7.062, Average Loss: 4.850, avg. samples / sec: 1058.01
Iteration:    780, Loss function: 6.809, Average Loss: 4.892, avg. samples / sec: 961.56
Iteration:    800, Loss function: 7.246, Average Loss: 4.931, avg. samples / sec: 981.58
Iteration:    820, Loss function: 6.849, Average Loss: 4.970, avg. samples / sec: 1040.91
Iteration:    840, Loss function: 6.780, Average Loss: 5.006, avg. samples / sec: 1071.16
Iteration:    860, Loss function: 6.832, Average Loss: 5.041, avg. samples / sec: 1040.34
Iteration:    880, Loss function: 6.897, Average Loss: 5.074, avg. samples / sec: 992.03
Iteration:    900, Loss function: 6.909, Average Loss: 5.105, avg. samples / sec: 979.91
Iteration:    920, Loss function: 6.651, Average Loss: 5.134, avg. samples / sec: 1099.01
Iteration:    940, Loss function: 6.640, Average Loss: 5.163, avg. samples / sec: 989.58
Iteration:    960, Loss function: 6.485, Average Loss: 5.190, avg. samples / sec: 936.35
Iteration:    980, Loss function: 6.424, Average Loss: 5.217, avg. samples / sec: 1061.30
Iteration:   1000, Loss function: 6.483, Average Loss: 5.241, avg. samples / sec: 1000.30
Iteration:   1020, Loss function: 6.383, Average Loss: 5.264, avg. samples / sec: 1004.91
:::MLLOG {"namespace": "", "time_ms": 1639065746254, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065746255, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.534, Average Loss: 5.288, avg. samples / sec: 1057.56
Iteration:   1060, Loss function: 6.315, Average Loss: 5.310, avg. samples / sec: 949.94
Iteration:   1080, Loss function: 6.225, Average Loss: 5.330, avg. samples / sec: 1006.34
Iteration:   1100, Loss function: 6.242, Average Loss: 5.350, avg. samples / sec: 974.55
Iteration:   1120, Loss function: 6.222, Average Loss: 5.369, avg. samples / sec: 988.42
Iteration:   1140, Loss function: 6.453, Average Loss: 5.388, avg. samples / sec: 1003.74
Iteration:   1160, Loss function: 6.163, Average Loss: 5.405, avg. samples / sec: 1024.86
Iteration:   1180, Loss function: 6.207, Average Loss: 5.421, avg. samples / sec: 1022.82
Iteration:   1200, Loss function: 6.187, Average Loss: 5.438, avg. samples / sec: 1017.11
Iteration:   1220, Loss function: 6.154, Average Loss: 5.453, avg. samples / sec: 1052.02
Iteration:   1240, Loss function: 6.007, Average Loss: 5.465, avg. samples / sec: 1075.46
Iteration:   1260, Loss function: 6.142, Average Loss: 5.477, avg. samples / sec: 1022.95
Iteration:   1280, Loss function: 5.871, Average Loss: 5.489, avg. samples / sec: 1017.76
Iteration:   1300, Loss function: 6.000, Average Loss: 5.502, avg. samples / sec: 986.25
Iteration:   1320, Loss function: 6.195, Average Loss: 5.514, avg. samples / sec: 995.37
Iteration:   1340, Loss function: 5.743, Average Loss: 5.524, avg. samples / sec: 989.74
Iteration:   1360, Loss function: 6.054, Average Loss: 5.534, avg. samples / sec: 1025.91
Iteration:   1380, Loss function: 6.040, Average Loss: 5.544, avg. samples / sec: 983.76
Iteration:   1400, Loss function: 6.203, Average Loss: 5.552, avg. samples / sec: 1104.69
Iteration:   1420, Loss function: 5.855, Average Loss: 5.559, avg. samples / sec: 979.39
Iteration:   1440, Loss function: 6.231, Average Loss: 5.567, avg. samples / sec: 944.25
Iteration:   1460, Loss function: 6.177, Average Loss: 5.575, avg. samples / sec: 765.73
Iteration:   1480, Loss function: 5.828, Average Loss: 5.582, avg. samples / sec: 1027.69
Iteration:   1500, Loss function: 5.937, Average Loss: 5.590, avg. samples / sec: 1015.90
Iteration:   1520, Loss function: 5.964, Average Loss: 5.595, avg. samples / sec: 944.07
Iteration:   1540, Loss function: 6.059, Average Loss: 5.599, avg. samples / sec: 942.46
Iteration:   1560, Loss function: 5.735, Average Loss: 5.602, avg. samples / sec: 1029.33
Iteration:   1580, Loss function: 5.531, Average Loss: 5.607, avg. samples / sec: 990.46
Iteration:   1600, Loss function: 6.049, Average Loss: 5.612, avg. samples / sec: 1049.59
Iteration:   1620, Loss function: 5.687, Average Loss: 5.617, avg. samples / sec: 1016.89
Iteration:   1640, Loss function: 5.998, Average Loss: 5.620, avg. samples / sec: 1036.01
Iteration:   1660, Loss function: 5.816, Average Loss: 5.624, avg. samples / sec: 1075.01
Iteration:   1680, Loss function: 5.793, Average Loss: 5.626, avg. samples / sec: 1035.82
Iteration:   1700, Loss function: 5.422, Average Loss: 5.630, avg. samples / sec: 1017.70
Iteration:   1720, Loss function: 5.634, Average Loss: 5.632, avg. samples / sec: 1054.81
Iteration:   1740, Loss function: 5.841, Average Loss: 5.634, avg. samples / sec: 1031.02
Iteration:   1760, Loss function: 5.595, Average Loss: 5.636, avg. samples / sec: 1019.77
Iteration:   1780, Loss function: 5.787, Average Loss: 5.637, avg. samples / sec: 1051.70
Iteration:   1800, Loss function: 5.696, Average Loss: 5.638, avg. samples / sec: 1013.86
Iteration:   1820, Loss function: 5.946, Average Loss: 5.640, avg. samples / sec: 1009.31
Iteration:   1840, Loss function: 6.019, Average Loss: 5.640, avg. samples / sec: 974.80
Iteration:   1860, Loss function: 5.571, Average Loss: 5.640, avg. samples / sec: 1038.86
Iteration:   1880, Loss function: 6.054, Average Loss: 5.642, avg. samples / sec: 968.47
Iteration:   1900, Loss function: 5.867, Average Loss: 5.642, avg. samples / sec: 1023.91
Iteration:   1920, Loss function: 5.708, Average Loss: 5.641, avg. samples / sec: 1000.52
Iteration:   1940, Loss function: 5.896, Average Loss: 5.641, avg. samples / sec: 1004.89
Iteration:   1960, Loss function: 5.519, Average Loss: 5.639, avg. samples / sec: 1048.59
Iteration:   1980, Loss function: 5.726, Average Loss: 5.638, avg. samples / sec: 1027.14
Iteration:   2000, Loss function: 5.739, Average Loss: 5.637, avg. samples / sec: 989.25
Iteration:   2020, Loss function: 5.594, Average Loss: 5.635, avg. samples / sec: 1008.43
Iteration:   2040, Loss function: 5.699, Average Loss: 5.634, avg. samples / sec: 1005.92
:::MLLOG {"namespace": "", "time_ms": 1639065862874, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065862875, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.550, Average Loss: 5.632, avg. samples / sec: 1037.41
Iteration:   2080, Loss function: 5.154, Average Loss: 5.630, avg. samples / sec: 968.17
Iteration:   2100, Loss function: 5.492, Average Loss: 5.628, avg. samples / sec: 911.03
Iteration:   2120, Loss function: 5.141, Average Loss: 5.624, avg. samples / sec: 1051.53
Iteration:   2140, Loss function: 5.429, Average Loss: 5.621, avg. samples / sec: 1021.18
Iteration:   2160, Loss function: 5.336, Average Loss: 5.619, avg. samples / sec: 1036.16
Iteration:   2180, Loss function: 5.354, Average Loss: 5.617, avg. samples / sec: 1029.53
Iteration:   2200, Loss function: 5.427, Average Loss: 5.613, avg. samples / sec: 902.97
Iteration:   2220, Loss function: 5.627, Average Loss: 5.610, avg. samples / sec: 1052.12
Iteration:   2240, Loss function: 5.444, Average Loss: 5.608, avg. samples / sec: 972.79
Iteration:   2260, Loss function: 5.524, Average Loss: 5.605, avg. samples / sec: 1059.26
Iteration:   2280, Loss function: 5.286, Average Loss: 5.602, avg. samples / sec: 989.27
Iteration:   2300, Loss function: 5.204, Average Loss: 5.598, avg. samples / sec: 993.82
Iteration:   2320, Loss function: 5.307, Average Loss: 5.595, avg. samples / sec: 1002.12
Iteration:   2340, Loss function: 5.589, Average Loss: 5.592, avg. samples / sec: 953.47
Iteration:   2360, Loss function: 5.363, Average Loss: 5.589, avg. samples / sec: 935.45
Iteration:   2380, Loss function: 5.236, Average Loss: 5.586, avg. samples / sec: 984.76
Iteration:   2400, Loss function: 5.526, Average Loss: 5.582, avg. samples / sec: 1055.25
Iteration:   2420, Loss function: 5.572, Average Loss: 5.578, avg. samples / sec: 1033.53
Iteration:   2440, Loss function: 5.340, Average Loss: 5.575, avg. samples / sec: 915.59
Iteration:   2460, Loss function: 5.131, Average Loss: 5.572, avg. samples / sec: 1010.55
Iteration:   2480, Loss function: 5.286, Average Loss: 5.567, avg. samples / sec: 1013.47
Iteration:   2500, Loss function: 5.342, Average Loss: 5.563, avg. samples / sec: 1032.88
Iteration:   2520, Loss function: 5.340, Average Loss: 5.557, avg. samples / sec: 971.05
Iteration:   2540, Loss function: 5.515, Average Loss: 5.554, avg. samples / sec: 1024.46
Iteration:   2560, Loss function: 5.239, Average Loss: 5.550, avg. samples / sec: 1016.54
Iteration:   2580, Loss function: 5.201, Average Loss: 5.546, avg. samples / sec: 995.15
Iteration:   2600, Loss function: 5.439, Average Loss: 5.543, avg. samples / sec: 1032.02
Iteration:   2620, Loss function: 5.665, Average Loss: 5.538, avg. samples / sec: 962.46
Iteration:   2640, Loss function: 5.227, Average Loss: 5.536, avg. samples / sec: 997.93
Iteration:   2660, Loss function: 5.237, Average Loss: 5.532, avg. samples / sec: 989.51
Iteration:   2680, Loss function: 5.122, Average Loss: 5.527, avg. samples / sec: 1010.52
Iteration:   2700, Loss function: 5.210, Average Loss: 5.522, avg. samples / sec: 1007.41
Iteration:   2720, Loss function: 5.479, Average Loss: 5.518, avg. samples / sec: 923.71
Iteration:   2740, Loss function: 4.984, Average Loss: 5.514, avg. samples / sec: 1009.52
Iteration:   2760, Loss function: 4.916, Average Loss: 5.508, avg. samples / sec: 999.93
Iteration:   2780, Loss function: 5.482, Average Loss: 5.504, avg. samples / sec: 1008.00
Iteration:   2800, Loss function: 5.126, Average Loss: 5.499, avg. samples / sec: 1045.64
Iteration:   2820, Loss function: 5.277, Average Loss: 5.495, avg. samples / sec: 975.76
Iteration:   2840, Loss function: 5.197, Average Loss: 5.489, avg. samples / sec: 965.20
Iteration:   2860, Loss function: 5.130, Average Loss: 5.484, avg. samples / sec: 1019.12
Iteration:   2880, Loss function: 5.311, Average Loss: 5.479, avg. samples / sec: 1022.39
Iteration:   2900, Loss function: 5.026, Average Loss: 5.473, avg. samples / sec: 972.13
Iteration:   2920, Loss function: 5.101, Average Loss: 5.468, avg. samples / sec: 1019.37
Iteration:   2940, Loss function: 4.947, Average Loss: 5.464, avg. samples / sec: 1054.26
Iteration:   2960, Loss function: 5.273, Average Loss: 5.459, avg. samples / sec: 1057.68
Iteration:   2980, Loss function: 5.264, Average Loss: 5.455, avg. samples / sec: 982.04
Iteration:   3000, Loss function: 5.318, Average Loss: 5.450, avg. samples / sec: 1050.53
Iteration:   3020, Loss function: 5.176, Average Loss: 5.444, avg. samples / sec: 1041.83
Iteration:   3040, Loss function: 5.363, Average Loss: 5.439, avg. samples / sec: 909.86
Iteration:   3060, Loss function: 4.975, Average Loss: 5.434, avg. samples / sec: 988.87
Iteration:   3080, Loss function: 5.079, Average Loss: 5.428, avg. samples / sec: 1031.77
:::MLLOG {"namespace": "", "time_ms": 1639065980261, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065980264, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.301, Average Loss: 5.423, avg. samples / sec: 1011.23
Iteration:   3120, Loss function: 4.928, Average Loss: 5.418, avg. samples / sec: 995.51
Iteration:   3140, Loss function: 5.133, Average Loss: 5.413, avg. samples / sec: 998.99
Iteration:   3160, Loss function: 5.318, Average Loss: 5.407, avg. samples / sec: 1044.23
Iteration:   3180, Loss function: 4.988, Average Loss: 5.402, avg. samples / sec: 1044.33
Iteration:   3200, Loss function: 5.241, Average Loss: 5.397, avg. samples / sec: 964.16
Iteration:   3220, Loss function: 5.183, Average Loss: 5.391, avg. samples / sec: 917.76
Iteration:   3240, Loss function: 5.239, Average Loss: 5.386, avg. samples / sec: 1026.42
Iteration:   3260, Loss function: 4.923, Average Loss: 5.380, avg. samples / sec: 1045.24
Iteration:   3280, Loss function: 5.067, Average Loss: 5.374, avg. samples / sec: 1034.66
Iteration:   3300, Loss function: 4.719, Average Loss: 5.368, avg. samples / sec: 1020.17
Iteration:   3320, Loss function: 5.087, Average Loss: 5.363, avg. samples / sec: 990.65
Iteration:   3340, Loss function: 5.119, Average Loss: 5.358, avg. samples / sec: 991.84
Iteration:   3360, Loss function: 5.278, Average Loss: 5.353, avg. samples / sec: 991.15
Iteration:   3380, Loss function: 5.312, Average Loss: 5.346, avg. samples / sec: 1023.78
Iteration:   3400, Loss function: 4.852, Average Loss: 5.341, avg. samples / sec: 1026.90
Iteration:   3420, Loss function: 5.063, Average Loss: 5.335, avg. samples / sec: 1002.35
Iteration:   3440, Loss function: 4.996, Average Loss: 5.331, avg. samples / sec: 1018.05
Iteration:   3460, Loss function: 5.299, Average Loss: 5.326, avg. samples / sec: 1013.60
Iteration:   3480, Loss function: 5.246, Average Loss: 5.321, avg. samples / sec: 1015.25
Iteration:   3500, Loss function: 5.309, Average Loss: 5.317, avg. samples / sec: 980.33
Iteration:   3520, Loss function: 5.097, Average Loss: 5.314, avg. samples / sec: 1021.03
Iteration:   3540, Loss function: 4.948, Average Loss: 5.310, avg. samples / sec: 1040.33
Iteration:   3560, Loss function: 4.905, Average Loss: 5.306, avg. samples / sec: 1003.20
Iteration:   3580, Loss function: 5.307, Average Loss: 5.303, avg. samples / sec: 994.60
Iteration:   3600, Loss function: 5.069, Average Loss: 5.296, avg. samples / sec: 1042.66
Iteration:   3620, Loss function: 4.690, Average Loss: 5.291, avg. samples / sec: 997.19
Iteration:   3640, Loss function: 4.999, Average Loss: 5.286, avg. samples / sec: 936.03
Iteration:   3660, Loss function: 5.102, Average Loss: 5.281, avg. samples / sec: 1042.53
Iteration:   3680, Loss function: 5.171, Average Loss: 5.274, avg. samples / sec: 1004.19
Iteration:   3700, Loss function: 4.914, Average Loss: 5.270, avg. samples / sec: 960.42
Iteration:   3720, Loss function: 5.007, Average Loss: 5.264, avg. samples / sec: 990.87
Iteration:   3740, Loss function: 4.860, Average Loss: 5.260, avg. samples / sec: 959.01
Iteration:   3760, Loss function: 5.085, Average Loss: 5.256, avg. samples / sec: 1014.64
Iteration:   3780, Loss function: 5.110, Average Loss: 5.252, avg. samples / sec: 1018.85
Iteration:   3800, Loss function: 5.025, Average Loss: 5.248, avg. samples / sec: 1013.33
Iteration:   3820, Loss function: 5.188, Average Loss: 5.243, avg. samples / sec: 998.88
Iteration:   3840, Loss function: 4.812, Average Loss: 5.238, avg. samples / sec: 1005.52
Iteration:   3860, Loss function: 4.883, Average Loss: 5.232, avg. samples / sec: 1060.14
Iteration:   3880, Loss function: 5.002, Average Loss: 5.227, avg. samples / sec: 978.91
Iteration:   3900, Loss function: 5.196, Average Loss: 5.222, avg. samples / sec: 1044.96
Iteration:   3920, Loss function: 5.121, Average Loss: 5.216, avg. samples / sec: 975.08
Iteration:   3940, Loss function: 4.890, Average Loss: 5.210, avg. samples / sec: 1003.21
Iteration:   3960, Loss function: 4.957, Average Loss: 5.206, avg. samples / sec: 975.26
Iteration:   3980, Loss function: 4.895, Average Loss: 5.201, avg. samples / sec: 1033.17
Iteration:   4000, Loss function: 5.135, Average Loss: 5.197, avg. samples / sec: 1028.66
Iteration:   4020, Loss function: 5.015, Average Loss: 5.192, avg. samples / sec: 1021.26
Iteration:   4040, Loss function: 5.159, Average Loss: 5.188, avg. samples / sec: 1023.58
Iteration:   4060, Loss function: 5.090, Average Loss: 5.183, avg. samples / sec: 1043.78
Iteration:   4080, Loss function: 5.043, Average Loss: 5.178, avg. samples / sec: 1070.65
Iteration:   4100, Loss function: 5.085, Average Loss: 5.175, avg. samples / sec: 1016.23
:::MLLOG {"namespace": "", "time_ms": 1639066096650, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066096652, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.042, Average Loss: 5.170, avg. samples / sec: 995.78
Iteration:   4140, Loss function: 5.145, Average Loss: 5.166, avg. samples / sec: 1013.91
Iteration:   4160, Loss function: 4.776, Average Loss: 5.159, avg. samples / sec: 1009.58
Iteration:   4180, Loss function: 4.861, Average Loss: 5.154, avg. samples / sec: 1034.15
Iteration:   4200, Loss function: 4.678, Average Loss: 5.150, avg. samples / sec: 1033.90
Iteration:   4220, Loss function: 4.917, Average Loss: 5.145, avg. samples / sec: 1003.59
Iteration:   4240, Loss function: 4.880, Average Loss: 5.139, avg. samples / sec: 1024.89
Iteration:   4260, Loss function: 5.126, Average Loss: 5.135, avg. samples / sec: 1019.04
Iteration:   4280, Loss function: 5.043, Average Loss: 5.129, avg. samples / sec: 974.47
Iteration:   4300, Loss function: 4.687, Average Loss: 5.123, avg. samples / sec: 947.87
Iteration:   4320, Loss function: 4.781, Average Loss: 5.118, avg. samples / sec: 1008.55
Iteration:   4340, Loss function: 4.820, Average Loss: 5.112, avg. samples / sec: 1041.63
Iteration:   4360, Loss function: 4.913, Average Loss: 5.107, avg. samples / sec: 966.53
Iteration:   4380, Loss function: 5.018, Average Loss: 5.103, avg. samples / sec: 947.88
Iteration:   4400, Loss function: 4.814, Average Loss: 5.099, avg. samples / sec: 1084.29
Iteration:   4420, Loss function: 4.863, Average Loss: 5.094, avg. samples / sec: 1048.54
Iteration:   4440, Loss function: 4.859, Average Loss: 5.090, avg. samples / sec: 948.34
Iteration:   4460, Loss function: 5.033, Average Loss: 5.086, avg. samples / sec: 973.86
Iteration:   4480, Loss function: 4.903, Average Loss: 5.082, avg. samples / sec: 971.60
Iteration:   4500, Loss function: 4.901, Average Loss: 5.079, avg. samples / sec: 1019.70
Iteration:   4520, Loss function: 4.689, Average Loss: 5.075, avg. samples / sec: 1015.28
Iteration:   4540, Loss function: 4.944, Average Loss: 5.071, avg. samples / sec: 955.58
Iteration:   4560, Loss function: 4.868, Average Loss: 5.067, avg. samples / sec: 957.05
Iteration:   4580, Loss function: 4.670, Average Loss: 5.063, avg. samples / sec: 946.48
Iteration:   4600, Loss function: 4.900, Average Loss: 5.060, avg. samples / sec: 1020.31
Iteration:   4620, Loss function: 4.773, Average Loss: 5.056, avg. samples / sec: 1068.42
Iteration:   4640, Loss function: 4.747, Average Loss: 5.051, avg. samples / sec: 986.79
Iteration:   4660, Loss function: 4.694, Average Loss: 5.048, avg. samples / sec: 1004.18
Iteration:   4680, Loss function: 5.110, Average Loss: 5.044, avg. samples / sec: 1028.67
Iteration:   4700, Loss function: 4.803, Average Loss: 5.040, avg. samples / sec: 1025.06
Iteration:   4720, Loss function: 4.625, Average Loss: 5.035, avg. samples / sec: 1010.75
Iteration:   4740, Loss function: 4.826, Average Loss: 5.030, avg. samples / sec: 1002.69
Iteration:   4760, Loss function: 4.712, Average Loss: 5.028, avg. samples / sec: 952.12
Iteration:   4780, Loss function: 5.043, Average Loss: 5.024, avg. samples / sec: 1037.27
Iteration:   4800, Loss function: 4.831, Average Loss: 5.021, avg. samples / sec: 1044.89
Iteration:   4820, Loss function: 4.832, Average Loss: 5.017, avg. samples / sec: 904.06
Iteration:   4840, Loss function: 5.046, Average Loss: 5.014, avg. samples / sec: 974.32
Iteration:   4860, Loss function: 4.688, Average Loss: 5.010, avg. samples / sec: 1010.73
Iteration:   4880, Loss function: 5.015, Average Loss: 5.006, avg. samples / sec: 1004.16
Iteration:   4900, Loss function: 4.471, Average Loss: 5.002, avg. samples / sec: 939.28
Iteration:   4920, Loss function: 4.855, Average Loss: 4.999, avg. samples / sec: 940.32
Iteration:   4940, Loss function: 4.547, Average Loss: 4.994, avg. samples / sec: 939.28
Iteration:   4960, Loss function: 4.756, Average Loss: 4.991, avg. samples / sec: 968.83
Iteration:   4980, Loss function: 4.677, Average Loss: 4.987, avg. samples / sec: 921.33
Iteration:   5000, Loss function: 4.817, Average Loss: 4.983, avg. samples / sec: 968.89
Iteration:   5020, Loss function: 4.996, Average Loss: 4.979, avg. samples / sec: 943.95
Iteration:   5040, Loss function: 4.760, Average Loss: 4.976, avg. samples / sec: 1006.98
Iteration:   5060, Loss function: 4.751, Average Loss: 4.973, avg. samples / sec: 1044.47
Iteration:   5080, Loss function: 4.738, Average Loss: 4.970, avg. samples / sec: 1058.54
Iteration:   5100, Loss function: 4.904, Average Loss: 4.968, avg. samples / sec: 1013.18
Iteration:   5120, Loss function: 4.694, Average Loss: 4.966, avg. samples / sec: 990.22
Iteration:   5140, Loss function: 4.957, Average Loss: 4.962, avg. samples / sec: 1003.13
:::MLLOG {"namespace": "", "time_ms": 1639066214705, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.44 s
:::MLLOG {"namespace": "", "time_ms": 1639066246215, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066246260, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246261, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.87s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.969, Average Loss: 4.957, avg. samples / sec: 67.93
Iteration:   5180, Loss function: 4.694, Average Loss: 4.952, avg. samples / sec: 1156.44
Iteration:   5200, Loss function: 4.532, Average Loss: 4.948, avg. samples / sec: 966.73
DONE (t=5.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10964
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22215
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13914
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20812
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10964 AP goal: 0.10000
Iteration:   5220, Loss function: 4.650, Average Loss: 4.944, avg. samples / sec: 1120.65
:::MLLOG {"namespace": "", "time_ms": 1639066254329, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254330, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10963673103805247, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254330, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254505, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:10:56 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:10:56 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065601833, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065601976, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1537300841, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1537300841
:::MLLOG {"namespace": "", "time_ms": 1639065603710, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065603710, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065603714, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065626898, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065626898, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065628279, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065628280, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065628550, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065628551, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065628552, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.587, Average Loss: 0.023, avg. samples / sec: 4.65
Iteration:     20, Loss function: 21.130, Average Loss: 0.454, avg. samples / sec: 1012.86
Iteration:     40, Loss function: 20.882, Average Loss: 0.856, avg. samples / sec: 1025.73
Iteration:     60, Loss function: 20.496, Average Loss: 1.246, avg. samples / sec: 964.21
Iteration:     80, Loss function: 20.105, Average Loss: 1.620, avg. samples / sec: 986.17
Iteration:    100, Loss function: 16.028, Average Loss: 1.953, avg. samples / sec: 990.04
Iteration:    120, Loss function: 10.970, Average Loss: 2.164, avg. samples / sec: 971.03
Iteration:    140, Loss function: 9.806, Average Loss: 2.324, avg. samples / sec: 986.17
Iteration:    160, Loss function: 9.328, Average Loss: 2.464, avg. samples / sec: 988.81
Iteration:    180, Loss function: 8.870, Average Loss: 2.594, avg. samples / sec: 1038.57
Iteration:    200, Loss function: 8.615, Average Loss: 2.719, avg. samples / sec: 962.65
Iteration:    220, Loss function: 8.692, Average Loss: 2.840, avg. samples / sec: 995.61
Iteration:    240, Loss function: 9.050, Average Loss: 2.962, avg. samples / sec: 955.32
Iteration:    260, Loss function: 8.868, Average Loss: 3.080, avg. samples / sec: 1016.64
Iteration:    280, Loss function: 8.560, Average Loss: 3.190, avg. samples / sec: 968.40
Iteration:    300, Loss function: 8.307, Average Loss: 3.294, avg. samples / sec: 1008.34
Iteration:    320, Loss function: 8.346, Average Loss: 3.395, avg. samples / sec: 1047.38
Iteration:    340, Loss function: 8.209, Average Loss: 3.492, avg. samples / sec: 951.23
Iteration:    360, Loss function: 8.047, Average Loss: 3.584, avg. samples / sec: 697.14
Iteration:    380, Loss function: 8.016, Average Loss: 3.674, avg. samples / sec: 1043.26
Iteration:    400, Loss function: 7.979, Average Loss: 3.759, avg. samples / sec: 941.23
Iteration:    420, Loss function: 7.534, Average Loss: 3.840, avg. samples / sec: 1022.96
Iteration:    440, Loss function: 7.866, Average Loss: 3.919, avg. samples / sec: 1028.02
Iteration:    460, Loss function: 7.818, Average Loss: 3.995, avg. samples / sec: 953.11
Iteration:    480, Loss function: 7.488, Average Loss: 4.068, avg. samples / sec: 1078.91
Iteration:    500, Loss function: 7.630, Average Loss: 4.139, avg. samples / sec: 1025.64
Iteration:    520, Loss function: 7.487, Average Loss: 4.206, avg. samples / sec: 937.30
Iteration:    540, Loss function: 7.267, Average Loss: 4.271, avg. samples / sec: 998.05
Iteration:    560, Loss function: 7.121, Average Loss: 4.332, avg. samples / sec: 1039.98
Iteration:    580, Loss function: 7.300, Average Loss: 4.394, avg. samples / sec: 1037.57
Iteration:    600, Loss function: 7.264, Average Loss: 4.452, avg. samples / sec: 1003.19
Iteration:    620, Loss function: 7.128, Average Loss: 4.508, avg. samples / sec: 958.49
Iteration:    640, Loss function: 6.774, Average Loss: 4.562, avg. samples / sec: 1050.31
Iteration:    660, Loss function: 7.124, Average Loss: 4.614, avg. samples / sec: 990.36
Iteration:    680, Loss function: 7.252, Average Loss: 4.664, avg. samples / sec: 1022.21
Iteration:    700, Loss function: 6.742, Average Loss: 4.712, avg. samples / sec: 1028.32
Iteration:    720, Loss function: 7.022, Average Loss: 4.761, avg. samples / sec: 1037.75
Iteration:    740, Loss function: 6.912, Average Loss: 4.806, avg. samples / sec: 1019.08
Iteration:    760, Loss function: 7.062, Average Loss: 4.850, avg. samples / sec: 1058.01
Iteration:    780, Loss function: 6.809, Average Loss: 4.892, avg. samples / sec: 961.56
Iteration:    800, Loss function: 7.246, Average Loss: 4.931, avg. samples / sec: 981.58
Iteration:    820, Loss function: 6.849, Average Loss: 4.970, avg. samples / sec: 1040.91
Iteration:    840, Loss function: 6.780, Average Loss: 5.006, avg. samples / sec: 1071.16
Iteration:    860, Loss function: 6.832, Average Loss: 5.041, avg. samples / sec: 1040.34
Iteration:    880, Loss function: 6.897, Average Loss: 5.074, avg. samples / sec: 992.03
Iteration:    900, Loss function: 6.909, Average Loss: 5.105, avg. samples / sec: 979.91
Iteration:    920, Loss function: 6.651, Average Loss: 5.134, avg. samples / sec: 1099.01
Iteration:    940, Loss function: 6.640, Average Loss: 5.163, avg. samples / sec: 989.58
Iteration:    960, Loss function: 6.485, Average Loss: 5.190, avg. samples / sec: 936.35
Iteration:    980, Loss function: 6.424, Average Loss: 5.217, avg. samples / sec: 1061.30
Iteration:   1000, Loss function: 6.483, Average Loss: 5.241, avg. samples / sec: 1000.30
Iteration:   1020, Loss function: 6.383, Average Loss: 5.264, avg. samples / sec: 1004.91
:::MLLOG {"namespace": "", "time_ms": 1639065746254, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065746255, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.534, Average Loss: 5.288, avg. samples / sec: 1057.56
Iteration:   1060, Loss function: 6.315, Average Loss: 5.310, avg. samples / sec: 949.94
Iteration:   1080, Loss function: 6.225, Average Loss: 5.330, avg. samples / sec: 1006.34
Iteration:   1100, Loss function: 6.242, Average Loss: 5.350, avg. samples / sec: 974.55
Iteration:   1120, Loss function: 6.222, Average Loss: 5.369, avg. samples / sec: 988.42
Iteration:   1140, Loss function: 6.453, Average Loss: 5.388, avg. samples / sec: 1003.74
Iteration:   1160, Loss function: 6.163, Average Loss: 5.405, avg. samples / sec: 1024.86
Iteration:   1180, Loss function: 6.207, Average Loss: 5.421, avg. samples / sec: 1022.82
Iteration:   1200, Loss function: 6.187, Average Loss: 5.438, avg. samples / sec: 1017.11
Iteration:   1220, Loss function: 6.154, Average Loss: 5.453, avg. samples / sec: 1052.02
Iteration:   1240, Loss function: 6.007, Average Loss: 5.465, avg. samples / sec: 1075.46
Iteration:   1260, Loss function: 6.142, Average Loss: 5.477, avg. samples / sec: 1022.95
Iteration:   1280, Loss function: 5.871, Average Loss: 5.489, avg. samples / sec: 1017.76
Iteration:   1300, Loss function: 6.000, Average Loss: 5.502, avg. samples / sec: 986.25
Iteration:   1320, Loss function: 6.195, Average Loss: 5.514, avg. samples / sec: 995.37
Iteration:   1340, Loss function: 5.743, Average Loss: 5.524, avg. samples / sec: 989.74
Iteration:   1360, Loss function: 6.054, Average Loss: 5.534, avg. samples / sec: 1025.91
Iteration:   1380, Loss function: 6.040, Average Loss: 5.544, avg. samples / sec: 983.76
Iteration:   1400, Loss function: 6.203, Average Loss: 5.552, avg. samples / sec: 1104.69
Iteration:   1420, Loss function: 5.855, Average Loss: 5.559, avg. samples / sec: 979.39
Iteration:   1440, Loss function: 6.231, Average Loss: 5.567, avg. samples / sec: 944.25
Iteration:   1460, Loss function: 6.177, Average Loss: 5.575, avg. samples / sec: 765.73
Iteration:   1480, Loss function: 5.828, Average Loss: 5.582, avg. samples / sec: 1027.69
Iteration:   1500, Loss function: 5.937, Average Loss: 5.590, avg. samples / sec: 1015.90
Iteration:   1520, Loss function: 5.964, Average Loss: 5.595, avg. samples / sec: 944.07
Iteration:   1540, Loss function: 6.059, Average Loss: 5.599, avg. samples / sec: 942.46
Iteration:   1560, Loss function: 5.735, Average Loss: 5.602, avg. samples / sec: 1029.33
Iteration:   1580, Loss function: 5.531, Average Loss: 5.607, avg. samples / sec: 990.46
Iteration:   1600, Loss function: 6.049, Average Loss: 5.612, avg. samples / sec: 1049.59
Iteration:   1620, Loss function: 5.687, Average Loss: 5.617, avg. samples / sec: 1016.89
Iteration:   1640, Loss function: 5.998, Average Loss: 5.620, avg. samples / sec: 1036.01
Iteration:   1660, Loss function: 5.816, Average Loss: 5.624, avg. samples / sec: 1075.01
Iteration:   1680, Loss function: 5.793, Average Loss: 5.626, avg. samples / sec: 1035.82
Iteration:   1700, Loss function: 5.422, Average Loss: 5.630, avg. samples / sec: 1017.70
Iteration:   1720, Loss function: 5.634, Average Loss: 5.632, avg. samples / sec: 1054.81
Iteration:   1740, Loss function: 5.841, Average Loss: 5.634, avg. samples / sec: 1031.02
Iteration:   1760, Loss function: 5.595, Average Loss: 5.636, avg. samples / sec: 1019.77
Iteration:   1780, Loss function: 5.787, Average Loss: 5.637, avg. samples / sec: 1051.70
Iteration:   1800, Loss function: 5.696, Average Loss: 5.638, avg. samples / sec: 1013.86
Iteration:   1820, Loss function: 5.946, Average Loss: 5.640, avg. samples / sec: 1009.31
Iteration:   1840, Loss function: 6.019, Average Loss: 5.640, avg. samples / sec: 974.80
Iteration:   1860, Loss function: 5.571, Average Loss: 5.640, avg. samples / sec: 1038.86
Iteration:   1880, Loss function: 6.054, Average Loss: 5.642, avg. samples / sec: 968.47
Iteration:   1900, Loss function: 5.867, Average Loss: 5.642, avg. samples / sec: 1023.91
Iteration:   1920, Loss function: 5.708, Average Loss: 5.641, avg. samples / sec: 1000.52
Iteration:   1940, Loss function: 5.896, Average Loss: 5.641, avg. samples / sec: 1004.89
Iteration:   1960, Loss function: 5.519, Average Loss: 5.639, avg. samples / sec: 1048.59
Iteration:   1980, Loss function: 5.726, Average Loss: 5.638, avg. samples / sec: 1027.14
Iteration:   2000, Loss function: 5.739, Average Loss: 5.637, avg. samples / sec: 989.25
Iteration:   2020, Loss function: 5.594, Average Loss: 5.635, avg. samples / sec: 1008.43
Iteration:   2040, Loss function: 5.699, Average Loss: 5.634, avg. samples / sec: 1005.92
:::MLLOG {"namespace": "", "time_ms": 1639065862874, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065862875, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.550, Average Loss: 5.632, avg. samples / sec: 1037.41
Iteration:   2080, Loss function: 5.154, Average Loss: 5.630, avg. samples / sec: 968.17
Iteration:   2100, Loss function: 5.492, Average Loss: 5.628, avg. samples / sec: 911.03
Iteration:   2120, Loss function: 5.141, Average Loss: 5.624, avg. samples / sec: 1051.53
Iteration:   2140, Loss function: 5.429, Average Loss: 5.621, avg. samples / sec: 1021.18
Iteration:   2160, Loss function: 5.336, Average Loss: 5.619, avg. samples / sec: 1036.16
Iteration:   2180, Loss function: 5.354, Average Loss: 5.617, avg. samples / sec: 1029.53
Iteration:   2200, Loss function: 5.427, Average Loss: 5.613, avg. samples / sec: 902.97
Iteration:   2220, Loss function: 5.627, Average Loss: 5.610, avg. samples / sec: 1052.12
Iteration:   2240, Loss function: 5.444, Average Loss: 5.608, avg. samples / sec: 972.79
Iteration:   2260, Loss function: 5.524, Average Loss: 5.605, avg. samples / sec: 1059.26
Iteration:   2280, Loss function: 5.286, Average Loss: 5.602, avg. samples / sec: 989.27
Iteration:   2300, Loss function: 5.204, Average Loss: 5.598, avg. samples / sec: 993.82
Iteration:   2320, Loss function: 5.307, Average Loss: 5.595, avg. samples / sec: 1002.12
Iteration:   2340, Loss function: 5.589, Average Loss: 5.592, avg. samples / sec: 953.47
Iteration:   2360, Loss function: 5.363, Average Loss: 5.589, avg. samples / sec: 935.45
Iteration:   2380, Loss function: 5.236, Average Loss: 5.586, avg. samples / sec: 984.76
Iteration:   2400, Loss function: 5.526, Average Loss: 5.582, avg. samples / sec: 1055.25
Iteration:   2420, Loss function: 5.572, Average Loss: 5.578, avg. samples / sec: 1033.53
Iteration:   2440, Loss function: 5.340, Average Loss: 5.575, avg. samples / sec: 915.59
Iteration:   2460, Loss function: 5.131, Average Loss: 5.572, avg. samples / sec: 1010.55
Iteration:   2480, Loss function: 5.286, Average Loss: 5.567, avg. samples / sec: 1013.47
Iteration:   2500, Loss function: 5.342, Average Loss: 5.563, avg. samples / sec: 1032.88
Iteration:   2520, Loss function: 5.340, Average Loss: 5.557, avg. samples / sec: 971.05
Iteration:   2540, Loss function: 5.515, Average Loss: 5.554, avg. samples / sec: 1024.46
Iteration:   2560, Loss function: 5.239, Average Loss: 5.550, avg. samples / sec: 1016.54
Iteration:   2580, Loss function: 5.201, Average Loss: 5.546, avg. samples / sec: 995.15
Iteration:   2600, Loss function: 5.439, Average Loss: 5.543, avg. samples / sec: 1032.02
Iteration:   2620, Loss function: 5.665, Average Loss: 5.538, avg. samples / sec: 962.46
Iteration:   2640, Loss function: 5.227, Average Loss: 5.536, avg. samples / sec: 997.93
Iteration:   2660, Loss function: 5.237, Average Loss: 5.532, avg. samples / sec: 989.51
Iteration:   2680, Loss function: 5.122, Average Loss: 5.527, avg. samples / sec: 1010.52
Iteration:   2700, Loss function: 5.210, Average Loss: 5.522, avg. samples / sec: 1007.41
Iteration:   2720, Loss function: 5.479, Average Loss: 5.518, avg. samples / sec: 923.71
Iteration:   2740, Loss function: 4.984, Average Loss: 5.514, avg. samples / sec: 1009.52
Iteration:   2760, Loss function: 4.916, Average Loss: 5.508, avg. samples / sec: 999.93
Iteration:   2780, Loss function: 5.482, Average Loss: 5.504, avg. samples / sec: 1008.00
Iteration:   2800, Loss function: 5.126, Average Loss: 5.499, avg. samples / sec: 1045.64
Iteration:   2820, Loss function: 5.277, Average Loss: 5.495, avg. samples / sec: 975.76
Iteration:   2840, Loss function: 5.197, Average Loss: 5.489, avg. samples / sec: 965.20
Iteration:   2860, Loss function: 5.130, Average Loss: 5.484, avg. samples / sec: 1019.12
Iteration:   2880, Loss function: 5.311, Average Loss: 5.479, avg. samples / sec: 1022.39
Iteration:   2900, Loss function: 5.026, Average Loss: 5.473, avg. samples / sec: 972.13
Iteration:   2920, Loss function: 5.101, Average Loss: 5.468, avg. samples / sec: 1019.37
Iteration:   2940, Loss function: 4.947, Average Loss: 5.464, avg. samples / sec: 1054.26
Iteration:   2960, Loss function: 5.273, Average Loss: 5.459, avg. samples / sec: 1057.68
Iteration:   2980, Loss function: 5.264, Average Loss: 5.455, avg. samples / sec: 982.04
Iteration:   3000, Loss function: 5.318, Average Loss: 5.450, avg. samples / sec: 1050.53
Iteration:   3020, Loss function: 5.176, Average Loss: 5.444, avg. samples / sec: 1041.83
Iteration:   3040, Loss function: 5.363, Average Loss: 5.439, avg. samples / sec: 909.86
Iteration:   3060, Loss function: 4.975, Average Loss: 5.434, avg. samples / sec: 988.87
Iteration:   3080, Loss function: 5.079, Average Loss: 5.428, avg. samples / sec: 1031.77
:::MLLOG {"namespace": "", "time_ms": 1639065980261, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065980264, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.301, Average Loss: 5.423, avg. samples / sec: 1011.23
Iteration:   3120, Loss function: 4.928, Average Loss: 5.418, avg. samples / sec: 995.51
Iteration:   3140, Loss function: 5.133, Average Loss: 5.413, avg. samples / sec: 998.99
Iteration:   3160, Loss function: 5.318, Average Loss: 5.407, avg. samples / sec: 1044.23
Iteration:   3180, Loss function: 4.988, Average Loss: 5.402, avg. samples / sec: 1044.33
Iteration:   3200, Loss function: 5.241, Average Loss: 5.397, avg. samples / sec: 964.16
Iteration:   3220, Loss function: 5.183, Average Loss: 5.391, avg. samples / sec: 917.76
Iteration:   3240, Loss function: 5.239, Average Loss: 5.386, avg. samples / sec: 1026.42
Iteration:   3260, Loss function: 4.923, Average Loss: 5.380, avg. samples / sec: 1045.24
Iteration:   3280, Loss function: 5.067, Average Loss: 5.374, avg. samples / sec: 1034.66
Iteration:   3300, Loss function: 4.719, Average Loss: 5.368, avg. samples / sec: 1020.17
Iteration:   3320, Loss function: 5.087, Average Loss: 5.363, avg. samples / sec: 990.65
Iteration:   3340, Loss function: 5.119, Average Loss: 5.358, avg. samples / sec: 991.84
Iteration:   3360, Loss function: 5.278, Average Loss: 5.353, avg. samples / sec: 991.15
Iteration:   3380, Loss function: 5.312, Average Loss: 5.346, avg. samples / sec: 1023.78
Iteration:   3400, Loss function: 4.852, Average Loss: 5.341, avg. samples / sec: 1026.90
Iteration:   3420, Loss function: 5.063, Average Loss: 5.335, avg. samples / sec: 1002.35
Iteration:   3440, Loss function: 4.996, Average Loss: 5.331, avg. samples / sec: 1018.05
Iteration:   3460, Loss function: 5.299, Average Loss: 5.326, avg. samples / sec: 1013.60
Iteration:   3480, Loss function: 5.246, Average Loss: 5.321, avg. samples / sec: 1015.25
Iteration:   3500, Loss function: 5.309, Average Loss: 5.317, avg. samples / sec: 980.33
Iteration:   3520, Loss function: 5.097, Average Loss: 5.314, avg. samples / sec: 1021.03
Iteration:   3540, Loss function: 4.948, Average Loss: 5.310, avg. samples / sec: 1040.33
Iteration:   3560, Loss function: 4.905, Average Loss: 5.306, avg. samples / sec: 1003.20
Iteration:   3580, Loss function: 5.307, Average Loss: 5.303, avg. samples / sec: 994.60
Iteration:   3600, Loss function: 5.069, Average Loss: 5.296, avg. samples / sec: 1042.66
Iteration:   3620, Loss function: 4.690, Average Loss: 5.291, avg. samples / sec: 997.19
Iteration:   3640, Loss function: 4.999, Average Loss: 5.286, avg. samples / sec: 936.03
Iteration:   3660, Loss function: 5.102, Average Loss: 5.281, avg. samples / sec: 1042.53
Iteration:   3680, Loss function: 5.171, Average Loss: 5.274, avg. samples / sec: 1004.19
Iteration:   3700, Loss function: 4.914, Average Loss: 5.270, avg. samples / sec: 960.42
Iteration:   3720, Loss function: 5.007, Average Loss: 5.264, avg. samples / sec: 990.87
Iteration:   3740, Loss function: 4.860, Average Loss: 5.260, avg. samples / sec: 959.01
Iteration:   3760, Loss function: 5.085, Average Loss: 5.256, avg. samples / sec: 1014.64
Iteration:   3780, Loss function: 5.110, Average Loss: 5.252, avg. samples / sec: 1018.85
Iteration:   3800, Loss function: 5.025, Average Loss: 5.248, avg. samples / sec: 1013.33
Iteration:   3820, Loss function: 5.188, Average Loss: 5.243, avg. samples / sec: 998.88
Iteration:   3840, Loss function: 4.812, Average Loss: 5.238, avg. samples / sec: 1005.52
Iteration:   3860, Loss function: 4.883, Average Loss: 5.232, avg. samples / sec: 1060.14
Iteration:   3880, Loss function: 5.002, Average Loss: 5.227, avg. samples / sec: 978.91
Iteration:   3900, Loss function: 5.196, Average Loss: 5.222, avg. samples / sec: 1044.96
Iteration:   3920, Loss function: 5.121, Average Loss: 5.216, avg. samples / sec: 975.08
Iteration:   3940, Loss function: 4.890, Average Loss: 5.210, avg. samples / sec: 1003.21
Iteration:   3960, Loss function: 4.957, Average Loss: 5.206, avg. samples / sec: 975.26
Iteration:   3980, Loss function: 4.895, Average Loss: 5.201, avg. samples / sec: 1033.17
Iteration:   4000, Loss function: 5.135, Average Loss: 5.197, avg. samples / sec: 1028.66
Iteration:   4020, Loss function: 5.015, Average Loss: 5.192, avg. samples / sec: 1021.26
Iteration:   4040, Loss function: 5.159, Average Loss: 5.188, avg. samples / sec: 1023.58
Iteration:   4060, Loss function: 5.090, Average Loss: 5.183, avg. samples / sec: 1043.78
Iteration:   4080, Loss function: 5.043, Average Loss: 5.178, avg. samples / sec: 1070.65
Iteration:   4100, Loss function: 5.085, Average Loss: 5.175, avg. samples / sec: 1016.23
:::MLLOG {"namespace": "", "time_ms": 1639066096650, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066096652, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.042, Average Loss: 5.170, avg. samples / sec: 995.78
Iteration:   4140, Loss function: 5.145, Average Loss: 5.166, avg. samples / sec: 1013.91
Iteration:   4160, Loss function: 4.776, Average Loss: 5.159, avg. samples / sec: 1009.58
Iteration:   4180, Loss function: 4.861, Average Loss: 5.154, avg. samples / sec: 1034.15
Iteration:   4200, Loss function: 4.678, Average Loss: 5.150, avg. samples / sec: 1033.90
Iteration:   4220, Loss function: 4.917, Average Loss: 5.145, avg. samples / sec: 1003.59
Iteration:   4240, Loss function: 4.880, Average Loss: 5.139, avg. samples / sec: 1024.89
Iteration:   4260, Loss function: 5.126, Average Loss: 5.135, avg. samples / sec: 1019.04
Iteration:   4280, Loss function: 5.043, Average Loss: 5.129, avg. samples / sec: 974.47
Iteration:   4300, Loss function: 4.687, Average Loss: 5.123, avg. samples / sec: 947.87
Iteration:   4320, Loss function: 4.781, Average Loss: 5.118, avg. samples / sec: 1008.55
Iteration:   4340, Loss function: 4.820, Average Loss: 5.112, avg. samples / sec: 1041.63
Iteration:   4360, Loss function: 4.913, Average Loss: 5.107, avg. samples / sec: 966.53
Iteration:   4380, Loss function: 5.018, Average Loss: 5.103, avg. samples / sec: 947.88
Iteration:   4400, Loss function: 4.814, Average Loss: 5.099, avg. samples / sec: 1084.29
Iteration:   4420, Loss function: 4.863, Average Loss: 5.094, avg. samples / sec: 1048.54
Iteration:   4440, Loss function: 4.859, Average Loss: 5.090, avg. samples / sec: 948.34
Iteration:   4460, Loss function: 5.033, Average Loss: 5.086, avg. samples / sec: 973.86
Iteration:   4480, Loss function: 4.903, Average Loss: 5.082, avg. samples / sec: 971.60
Iteration:   4500, Loss function: 4.901, Average Loss: 5.079, avg. samples / sec: 1019.70
Iteration:   4520, Loss function: 4.689, Average Loss: 5.075, avg. samples / sec: 1015.28
Iteration:   4540, Loss function: 4.944, Average Loss: 5.071, avg. samples / sec: 955.58
Iteration:   4560, Loss function: 4.868, Average Loss: 5.067, avg. samples / sec: 957.05
Iteration:   4580, Loss function: 4.670, Average Loss: 5.063, avg. samples / sec: 946.48
Iteration:   4600, Loss function: 4.900, Average Loss: 5.060, avg. samples / sec: 1020.31
Iteration:   4620, Loss function: 4.773, Average Loss: 5.056, avg. samples / sec: 1068.42
Iteration:   4640, Loss function: 4.747, Average Loss: 5.051, avg. samples / sec: 986.79
Iteration:   4660, Loss function: 4.694, Average Loss: 5.048, avg. samples / sec: 1004.18
Iteration:   4680, Loss function: 5.110, Average Loss: 5.044, avg. samples / sec: 1028.67
Iteration:   4700, Loss function: 4.803, Average Loss: 5.040, avg. samples / sec: 1025.06
Iteration:   4720, Loss function: 4.625, Average Loss: 5.035, avg. samples / sec: 1010.75
Iteration:   4740, Loss function: 4.826, Average Loss: 5.030, avg. samples / sec: 1002.69
Iteration:   4760, Loss function: 4.712, Average Loss: 5.028, avg. samples / sec: 952.12
Iteration:   4780, Loss function: 5.043, Average Loss: 5.024, avg. samples / sec: 1037.27
Iteration:   4800, Loss function: 4.831, Average Loss: 5.021, avg. samples / sec: 1044.89
Iteration:   4820, Loss function: 4.832, Average Loss: 5.017, avg. samples / sec: 904.06
Iteration:   4840, Loss function: 5.046, Average Loss: 5.014, avg. samples / sec: 974.32
Iteration:   4860, Loss function: 4.688, Average Loss: 5.010, avg. samples / sec: 1010.73
Iteration:   4880, Loss function: 5.015, Average Loss: 5.006, avg. samples / sec: 1004.16
Iteration:   4900, Loss function: 4.471, Average Loss: 5.002, avg. samples / sec: 939.28
Iteration:   4920, Loss function: 4.855, Average Loss: 4.999, avg. samples / sec: 940.32
Iteration:   4940, Loss function: 4.547, Average Loss: 4.994, avg. samples / sec: 939.28
Iteration:   4960, Loss function: 4.756, Average Loss: 4.991, avg. samples / sec: 968.83
Iteration:   4980, Loss function: 4.677, Average Loss: 4.987, avg. samples / sec: 921.33
Iteration:   5000, Loss function: 4.817, Average Loss: 4.983, avg. samples / sec: 968.89
Iteration:   5020, Loss function: 4.996, Average Loss: 4.979, avg. samples / sec: 943.95
Iteration:   5040, Loss function: 4.760, Average Loss: 4.976, avg. samples / sec: 1006.98
Iteration:   5060, Loss function: 4.751, Average Loss: 4.973, avg. samples / sec: 1044.47
Iteration:   5080, Loss function: 4.738, Average Loss: 4.970, avg. samples / sec: 1058.54
Iteration:   5100, Loss function: 4.904, Average Loss: 4.968, avg. samples / sec: 1013.18
Iteration:   5120, Loss function: 4.694, Average Loss: 4.966, avg. samples / sec: 990.22
Iteration:   5140, Loss function: 4.957, Average Loss: 4.962, avg. samples / sec: 1003.13
:::MLLOG {"namespace": "", "time_ms": 1639066214705, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.44 s
:::MLLOG {"namespace": "", "time_ms": 1639066246215, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066246260, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246261, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.87s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.969, Average Loss: 4.957, avg. samples / sec: 67.93
Iteration:   5180, Loss function: 4.694, Average Loss: 4.952, avg. samples / sec: 1156.44
Iteration:   5200, Loss function: 4.532, Average Loss: 4.948, avg. samples / sec: 966.73
DONE (t=5.51s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10964
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22215
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19495
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13914
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20812
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22049
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10964 AP goal: 0.10000
Iteration:   5220, Loss function: 4.650, Average Loss: 4.944, avg. samples / sec: 1120.65
:::MLLOG {"namespace": "", "time_ms": 1639066254329, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254330, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10963673103805247, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254330, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066254505, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066256
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:10:56 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:49 PM'
START TIMING RUN WAS 2021-12-09 03:59:49 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:10:56 PM'
ENDING TIMING RUN AT 2021-12-09 04:10:56 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
+ result=667
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,667,nvidia,2021-12-09 03:59:49 PM'
RESULT,SINGLE_STAGE_DETECTOR,,667,nvidia,2021-12-09 03:59:49 PM
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
