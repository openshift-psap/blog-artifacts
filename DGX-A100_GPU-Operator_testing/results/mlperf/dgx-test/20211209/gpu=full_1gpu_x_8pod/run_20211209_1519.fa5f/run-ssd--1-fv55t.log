+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-fv55t.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-fv55t.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-fv55t.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab).'
No MIG GPU available, using the full GPUs (GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab).
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065596
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:56 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:56 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:56 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:56 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-fv55t to the sync file ...
run-ssd--1-fv55t Found 7 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
     7	run-ssd--1-fv55t
Thu Dec  9 16:00:01 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065603296, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603461, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1065168550, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1065168550
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065605321, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065605321, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065605326, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065628526, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065628526, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065630430, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065630431, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065630868, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065630869, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065630870, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.877, Average Loss: 0.023, avg. samples / sec: 4.51
Iteration:     20, Loss function: 21.180, Average Loss: 0.456, avg. samples / sec: 943.21
Iteration:     40, Loss function: 20.768, Average Loss: 0.858, avg. samples / sec: 955.09
Iteration:     60, Loss function: 20.421, Average Loss: 1.247, avg. samples / sec: 911.29
Iteration:     80, Loss function: 19.965, Average Loss: 1.621, avg. samples / sec: 944.46
Iteration:    100, Loss function: 16.002, Average Loss: 1.952, avg. samples / sec: 952.56
Iteration:    120, Loss function: 10.907, Average Loss: 2.162, avg. samples / sec: 983.55
Iteration:    140, Loss function: 9.412, Average Loss: 2.313, avg. samples / sec: 934.98
Iteration:    160, Loss function: 8.926, Average Loss: 2.449, avg. samples / sec: 1009.94
Iteration:    180, Loss function: 8.831, Average Loss: 2.577, avg. samples / sec: 1021.38
Iteration:    200, Loss function: 8.605, Average Loss: 2.702, avg. samples / sec: 933.93
Iteration:    220, Loss function: 8.538, Average Loss: 2.822, avg. samples / sec: 997.75
Iteration:    240, Loss function: 9.012, Average Loss: 2.942, avg. samples / sec: 1025.25
Iteration:    260, Loss function: 8.815, Average Loss: 3.063, avg. samples / sec: 1012.84
Iteration:    280, Loss function: 8.388, Average Loss: 3.173, avg. samples / sec: 973.55
Iteration:    300, Loss function: 8.216, Average Loss: 3.276, avg. samples / sec: 1017.44
Iteration:    320, Loss function: 8.326, Average Loss: 3.375, avg. samples / sec: 1047.85
Iteration:    340, Loss function: 8.081, Average Loss: 3.471, avg. samples / sec: 825.44
Iteration:    360, Loss function: 8.019, Average Loss: 3.563, avg. samples / sec: 1020.28
Iteration:    380, Loss function: 7.969, Average Loss: 3.653, avg. samples / sec: 975.57
Iteration:    400, Loss function: 7.934, Average Loss: 3.739, avg. samples / sec: 1014.11
Iteration:    420, Loss function: 7.638, Average Loss: 3.819, avg. samples / sec: 950.48
Iteration:    440, Loss function: 7.997, Average Loss: 3.896, avg. samples / sec: 1067.19
Iteration:    460, Loss function: 7.642, Average Loss: 3.971, avg. samples / sec: 1027.73
Iteration:    480, Loss function: 7.564, Average Loss: 4.045, avg. samples / sec: 982.50
Iteration:    500, Loss function: 7.508, Average Loss: 4.115, avg. samples / sec: 982.72
Iteration:    520, Loss function: 7.333, Average Loss: 4.182, avg. samples / sec: 978.03
Iteration:    540, Loss function: 7.777, Average Loss: 4.248, avg. samples / sec: 988.12
Iteration:    560, Loss function: 7.369, Average Loss: 4.311, avg. samples / sec: 1008.87
Iteration:    580, Loss function: 7.269, Average Loss: 4.373, avg. samples / sec: 1012.29
Iteration:    600, Loss function: 7.318, Average Loss: 4.432, avg. samples / sec: 1001.64
Iteration:    620, Loss function: 6.985, Average Loss: 4.488, avg. samples / sec: 925.56
Iteration:    640, Loss function: 6.942, Average Loss: 4.542, avg. samples / sec: 904.43
Iteration:    660, Loss function: 7.116, Average Loss: 4.593, avg. samples / sec: 1051.01
Iteration:    680, Loss function: 7.329, Average Loss: 4.644, avg. samples / sec: 989.75
Iteration:    700, Loss function: 6.697, Average Loss: 4.692, avg. samples / sec: 960.86
Iteration:    720, Loss function: 6.851, Average Loss: 4.740, avg. samples / sec: 967.90
Iteration:    740, Loss function: 7.027, Average Loss: 4.784, avg. samples / sec: 1034.95
Iteration:    760, Loss function: 6.980, Average Loss: 4.827, avg. samples / sec: 1011.59
Iteration:    780, Loss function: 6.666, Average Loss: 4.867, avg. samples / sec: 1019.79
Iteration:    800, Loss function: 7.339, Average Loss: 4.906, avg. samples / sec: 1043.77
Iteration:    820, Loss function: 6.856, Average Loss: 4.944, avg. samples / sec: 1079.40
Iteration:    840, Loss function: 6.641, Average Loss: 4.980, avg. samples / sec: 1081.78
Iteration:    860, Loss function: 6.904, Average Loss: 5.014, avg. samples / sec: 988.95
Iteration:    880, Loss function: 6.703, Average Loss: 5.046, avg. samples / sec: 1103.73
Iteration:    900, Loss function: 6.935, Average Loss: 5.077, avg. samples / sec: 1073.50
Iteration:    920, Loss function: 6.469, Average Loss: 5.105, avg. samples / sec: 971.51
Iteration:    940, Loss function: 6.574, Average Loss: 5.135, avg. samples / sec: 1048.49
Iteration:    960, Loss function: 6.490, Average Loss: 5.163, avg. samples / sec: 1042.75
Iteration:    980, Loss function: 6.272, Average Loss: 5.190, avg. samples / sec: 987.72
Iteration:   1000, Loss function: 6.496, Average Loss: 5.216, avg. samples / sec: 986.54
Iteration:   1020, Loss function: 6.439, Average Loss: 5.240, avg. samples / sec: 1001.84
:::MLLOG {"namespace": "", "time_ms": 1639065748976, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065748978, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.529, Average Loss: 5.263, avg. samples / sec: 1028.35
Iteration:   1060, Loss function: 6.362, Average Loss: 5.286, avg. samples / sec: 1094.39
Iteration:   1080, Loss function: 6.326, Average Loss: 5.307, avg. samples / sec: 1015.31
Iteration:   1100, Loss function: 6.201, Average Loss: 5.327, avg. samples / sec: 973.04
Iteration:   1120, Loss function: 6.123, Average Loss: 5.346, avg. samples / sec: 981.90
Iteration:   1140, Loss function: 6.388, Average Loss: 5.364, avg. samples / sec: 1025.08
Iteration:   1160, Loss function: 6.320, Average Loss: 5.381, avg. samples / sec: 967.85
Iteration:   1180, Loss function: 6.208, Average Loss: 5.398, avg. samples / sec: 982.87
Iteration:   1200, Loss function: 6.244, Average Loss: 5.413, avg. samples / sec: 1060.27
Iteration:   1220, Loss function: 6.094, Average Loss: 5.428, avg. samples / sec: 1004.62
Iteration:   1240, Loss function: 6.131, Average Loss: 5.441, avg. samples / sec: 991.51
Iteration:   1260, Loss function: 5.979, Average Loss: 5.454, avg. samples / sec: 988.35
Iteration:   1280, Loss function: 5.895, Average Loss: 5.466, avg. samples / sec: 1096.76
Iteration:   1300, Loss function: 6.361, Average Loss: 5.479, avg. samples / sec: 1063.07
Iteration:   1320, Loss function: 6.117, Average Loss: 5.491, avg. samples / sec: 1004.93
Iteration:   1340, Loss function: 5.950, Average Loss: 5.501, avg. samples / sec: 973.28
Iteration:   1360, Loss function: 5.976, Average Loss: 5.511, avg. samples / sec: 982.94
Iteration:   1380, Loss function: 6.174, Average Loss: 5.522, avg. samples / sec: 1025.10
Iteration:   1400, Loss function: 6.166, Average Loss: 5.531, avg. samples / sec: 995.48
Iteration:   1420, Loss function: 6.007, Average Loss: 5.539, avg. samples / sec: 1022.21
Iteration:   1440, Loss function: 6.319, Average Loss: 5.547, avg. samples / sec: 1047.81
Iteration:   1460, Loss function: 6.166, Average Loss: 5.555, avg. samples / sec: 1120.08
Iteration:   1480, Loss function: 6.056, Average Loss: 5.564, avg. samples / sec: 1011.08
Iteration:   1500, Loss function: 5.991, Average Loss: 5.572, avg. samples / sec: 1004.75
Iteration:   1520, Loss function: 5.865, Average Loss: 5.577, avg. samples / sec: 1013.71
Iteration:   1540, Loss function: 6.035, Average Loss: 5.581, avg. samples / sec: 1065.85
Iteration:   1560, Loss function: 5.791, Average Loss: 5.586, avg. samples / sec: 966.06
Iteration:   1580, Loss function: 5.487, Average Loss: 5.591, avg. samples / sec: 1005.05
Iteration:   1600, Loss function: 6.234, Average Loss: 5.597, avg. samples / sec: 961.77
Iteration:   1620, Loss function: 5.664, Average Loss: 5.602, avg. samples / sec: 1090.11
Iteration:   1640, Loss function: 5.980, Average Loss: 5.607, avg. samples / sec: 958.23
Iteration:   1660, Loss function: 5.893, Average Loss: 5.611, avg. samples / sec: 1021.59
Iteration:   1680, Loss function: 5.688, Average Loss: 5.614, avg. samples / sec: 995.78
Iteration:   1700, Loss function: 5.426, Average Loss: 5.618, avg. samples / sec: 975.99
Iteration:   1720, Loss function: 5.706, Average Loss: 5.620, avg. samples / sec: 1000.43
Iteration:   1740, Loss function: 5.784, Average Loss: 5.622, avg. samples / sec: 992.09
Iteration:   1760, Loss function: 5.380, Average Loss: 5.623, avg. samples / sec: 966.14
Iteration:   1780, Loss function: 5.616, Average Loss: 5.625, avg. samples / sec: 977.11
Iteration:   1800, Loss function: 5.576, Average Loss: 5.627, avg. samples / sec: 994.36
Iteration:   1820, Loss function: 6.044, Average Loss: 5.628, avg. samples / sec: 1025.64
Iteration:   1840, Loss function: 5.789, Average Loss: 5.629, avg. samples / sec: 1013.73
Iteration:   1860, Loss function: 5.637, Average Loss: 5.629, avg. samples / sec: 975.16
Iteration:   1880, Loss function: 5.909, Average Loss: 5.630, avg. samples / sec: 1062.90
Iteration:   1900, Loss function: 5.983, Average Loss: 5.631, avg. samples / sec: 1004.06
Iteration:   1920, Loss function: 5.836, Average Loss: 5.631, avg. samples / sec: 992.30
Iteration:   1940, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 990.47
Iteration:   1960, Loss function: 5.659, Average Loss: 5.629, avg. samples / sec: 978.24
Iteration:   1980, Loss function: 5.696, Average Loss: 5.627, avg. samples / sec: 978.27
Iteration:   2000, Loss function: 5.634, Average Loss: 5.627, avg. samples / sec: 985.63
Iteration:   2020, Loss function: 5.698, Average Loss: 5.627, avg. samples / sec: 972.73
Iteration:   2040, Loss function: 5.572, Average Loss: 5.627, avg. samples / sec: 943.42
:::MLLOG {"namespace": "", "time_ms": 1639065865694, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065865695, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.602, Average Loss: 5.626, avg. samples / sec: 999.15
Iteration:   2080, Loss function: 5.055, Average Loss: 5.623, avg. samples / sec: 1024.58
Iteration:   2100, Loss function: 5.554, Average Loss: 5.621, avg. samples / sec: 1047.96
Iteration:   2120, Loss function: 5.438, Average Loss: 5.618, avg. samples / sec: 1053.92
Iteration:   2140, Loss function: 5.357, Average Loss: 5.615, avg. samples / sec: 1027.44
Iteration:   2160, Loss function: 5.414, Average Loss: 5.612, avg. samples / sec: 1010.90
Iteration:   2180, Loss function: 5.336, Average Loss: 5.611, avg. samples / sec: 1024.72
Iteration:   2200, Loss function: 5.574, Average Loss: 5.606, avg. samples / sec: 1029.58
Iteration:   2220, Loss function: 5.641, Average Loss: 5.603, avg. samples / sec: 996.40
Iteration:   2240, Loss function: 5.413, Average Loss: 5.601, avg. samples / sec: 1060.86
Iteration:   2260, Loss function: 5.304, Average Loss: 5.597, avg. samples / sec: 968.89
Iteration:   2280, Loss function: 5.257, Average Loss: 5.595, avg. samples / sec: 1010.33
Iteration:   2300, Loss function: 5.009, Average Loss: 5.591, avg. samples / sec: 964.43
Iteration:   2320, Loss function: 5.253, Average Loss: 5.588, avg. samples / sec: 1038.26
Iteration:   2340, Loss function: 5.391, Average Loss: 5.585, avg. samples / sec: 962.75
Iteration:   2360, Loss function: 5.376, Average Loss: 5.581, avg. samples / sec: 973.21
Iteration:   2380, Loss function: 5.399, Average Loss: 5.577, avg. samples / sec: 983.86
Iteration:   2400, Loss function: 5.503, Average Loss: 5.573, avg. samples / sec: 1048.94
Iteration:   2420, Loss function: 5.508, Average Loss: 5.570, avg. samples / sec: 972.20
Iteration:   2440, Loss function: 5.545, Average Loss: 5.568, avg. samples / sec: 1017.70
Iteration:   2460, Loss function: 5.206, Average Loss: 5.564, avg. samples / sec: 1003.65
Iteration:   2480, Loss function: 5.362, Average Loss: 5.560, avg. samples / sec: 992.78
Iteration:   2500, Loss function: 5.399, Average Loss: 5.556, avg. samples / sec: 1028.95
Iteration:   2520, Loss function: 5.346, Average Loss: 5.551, avg. samples / sec: 1022.65
Iteration:   2540, Loss function: 5.211, Average Loss: 5.547, avg. samples / sec: 1068.01
Iteration:   2560, Loss function: 5.135, Average Loss: 5.543, avg. samples / sec: 1001.11
Iteration:   2580, Loss function: 5.208, Average Loss: 5.539, avg. samples / sec: 972.70
Iteration:   2600, Loss function: 5.277, Average Loss: 5.535, avg. samples / sec: 1047.97
Iteration:   2620, Loss function: 5.500, Average Loss: 5.532, avg. samples / sec: 990.86
Iteration:   2640, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 1020.26
Iteration:   2660, Loss function: 5.173, Average Loss: 5.526, avg. samples / sec: 1001.52
Iteration:   2680, Loss function: 5.207, Average Loss: 5.522, avg. samples / sec: 998.66
Iteration:   2700, Loss function: 5.171, Average Loss: 5.518, avg. samples / sec: 959.61
Iteration:   2720, Loss function: 5.459, Average Loss: 5.514, avg. samples / sec: 927.15
Iteration:   2740, Loss function: 4.961, Average Loss: 5.510, avg. samples / sec: 956.36
Iteration:   2760, Loss function: 4.999, Average Loss: 5.504, avg. samples / sec: 969.91
Iteration:   2780, Loss function: 5.512, Average Loss: 5.501, avg. samples / sec: 1070.00
Iteration:   2800, Loss function: 5.067, Average Loss: 5.496, avg. samples / sec: 1026.30
Iteration:   2820, Loss function: 5.236, Average Loss: 5.492, avg. samples / sec: 991.96
Iteration:   2840, Loss function: 5.441, Average Loss: 5.488, avg. samples / sec: 994.52
Iteration:   2860, Loss function: 5.159, Average Loss: 5.482, avg. samples / sec: 969.90
Iteration:   2880, Loss function: 5.188, Average Loss: 5.478, avg. samples / sec: 984.76
Iteration:   2900, Loss function: 5.022, Average Loss: 5.472, avg. samples / sec: 1012.13
Iteration:   2920, Loss function: 5.226, Average Loss: 5.467, avg. samples / sec: 990.53
Iteration:   2940, Loss function: 5.268, Average Loss: 5.462, avg. samples / sec: 933.92
Iteration:   2960, Loss function: 5.537, Average Loss: 5.458, avg. samples / sec: 990.00
Iteration:   2980, Loss function: 5.254, Average Loss: 5.454, avg. samples / sec: 1013.48
Iteration:   3000, Loss function: 5.288, Average Loss: 5.449, avg. samples / sec: 998.63
Iteration:   3020, Loss function: 5.053, Average Loss: 5.442, avg. samples / sec: 960.60
Iteration:   3040, Loss function: 5.213, Average Loss: 5.437, avg. samples / sec: 977.19
Iteration:   3060, Loss function: 5.074, Average Loss: 5.431, avg. samples / sec: 1024.75
Iteration:   3080, Loss function: 4.966, Average Loss: 5.426, avg. samples / sec: 1038.82
:::MLLOG {"namespace": "", "time_ms": 1639065982712, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065982714, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.138, Average Loss: 5.422, avg. samples / sec: 966.67
Iteration:   3120, Loss function: 4.947, Average Loss: 5.415, avg. samples / sec: 981.00
Iteration:   3140, Loss function: 5.009, Average Loss: 5.410, avg. samples / sec: 996.72
Iteration:   3160, Loss function: 5.486, Average Loss: 5.405, avg. samples / sec: 1016.44
Iteration:   3180, Loss function: 4.952, Average Loss: 5.400, avg. samples / sec: 1022.56
Iteration:   3200, Loss function: 5.389, Average Loss: 5.396, avg. samples / sec: 1031.27
Iteration:   3220, Loss function: 5.135, Average Loss: 5.390, avg. samples / sec: 993.30
Iteration:   3240, Loss function: 5.193, Average Loss: 5.385, avg. samples / sec: 1037.60
Iteration:   3260, Loss function: 5.023, Average Loss: 5.380, avg. samples / sec: 1046.81
Iteration:   3280, Loss function: 4.945, Average Loss: 5.374, avg. samples / sec: 985.84
Iteration:   3300, Loss function: 4.704, Average Loss: 5.367, avg. samples / sec: 1011.16
Iteration:   3320, Loss function: 5.017, Average Loss: 5.363, avg. samples / sec: 968.13
Iteration:   3340, Loss function: 5.150, Average Loss: 5.359, avg. samples / sec: 1009.79
Iteration:   3360, Loss function: 5.079, Average Loss: 5.353, avg. samples / sec: 1022.04
Iteration:   3380, Loss function: 5.177, Average Loss: 5.346, avg. samples / sec: 1010.62
Iteration:   3400, Loss function: 4.846, Average Loss: 5.341, avg. samples / sec: 959.59
Iteration:   3420, Loss function: 5.149, Average Loss: 5.336, avg. samples / sec: 1004.65
Iteration:   3440, Loss function: 4.949, Average Loss: 5.331, avg. samples / sec: 1067.96
Iteration:   3460, Loss function: 5.063, Average Loss: 5.326, avg. samples / sec: 982.55
Iteration:   3480, Loss function: 5.232, Average Loss: 5.322, avg. samples / sec: 967.36
Iteration:   3500, Loss function: 5.244, Average Loss: 5.318, avg. samples / sec: 990.15
Iteration:   3520, Loss function: 5.004, Average Loss: 5.314, avg. samples / sec: 952.72
Iteration:   3540, Loss function: 5.117, Average Loss: 5.308, avg. samples / sec: 1007.20
Iteration:   3560, Loss function: 4.899, Average Loss: 5.304, avg. samples / sec: 976.60
Iteration:   3580, Loss function: 5.073, Average Loss: 5.301, avg. samples / sec: 994.39
Iteration:   3600, Loss function: 5.124, Average Loss: 5.294, avg. samples / sec: 983.31
Iteration:   3620, Loss function: 4.724, Average Loss: 5.289, avg. samples / sec: 1036.54
Iteration:   3640, Loss function: 4.843, Average Loss: 5.285, avg. samples / sec: 990.11
Iteration:   3660, Loss function: 5.040, Average Loss: 5.280, avg. samples / sec: 996.02
Iteration:   3680, Loss function: 5.241, Average Loss: 5.275, avg. samples / sec: 1042.75
Iteration:   3700, Loss function: 4.882, Average Loss: 5.271, avg. samples / sec: 1037.96
Iteration:   3720, Loss function: 4.853, Average Loss: 5.264, avg. samples / sec: 977.01
Iteration:   3740, Loss function: 4.929, Average Loss: 5.261, avg. samples / sec: 1017.88
Iteration:   3760, Loss function: 5.161, Average Loss: 5.257, avg. samples / sec: 984.50
Iteration:   3780, Loss function: 5.177, Average Loss: 5.252, avg. samples / sec: 952.61
Iteration:   3800, Loss function: 4.994, Average Loss: 5.248, avg. samples / sec: 1061.54
Iteration:   3820, Loss function: 5.087, Average Loss: 5.243, avg. samples / sec: 962.51
Iteration:   3840, Loss function: 4.861, Average Loss: 5.239, avg. samples / sec: 1016.17
Iteration:   3860, Loss function: 4.863, Average Loss: 5.234, avg. samples / sec: 1007.44
Iteration:   3880, Loss function: 4.923, Average Loss: 5.228, avg. samples / sec: 992.03
Iteration:   3900, Loss function: 5.172, Average Loss: 5.223, avg. samples / sec: 1012.82
Iteration:   3920, Loss function: 5.096, Average Loss: 5.218, avg. samples / sec: 1047.45
Iteration:   3940, Loss function: 4.964, Average Loss: 5.212, avg. samples / sec: 1005.62
Iteration:   3960, Loss function: 5.009, Average Loss: 5.208, avg. samples / sec: 985.34
Iteration:   3980, Loss function: 4.816, Average Loss: 5.204, avg. samples / sec: 1001.66
Iteration:   4000, Loss function: 5.148, Average Loss: 5.201, avg. samples / sec: 1013.18
Iteration:   4020, Loss function: 4.884, Average Loss: 5.195, avg. samples / sec: 1004.41
Iteration:   4040, Loss function: 5.011, Average Loss: 5.191, avg. samples / sec: 917.20
Iteration:   4060, Loss function: 5.063, Average Loss: 5.187, avg. samples / sec: 929.89
Iteration:   4080, Loss function: 5.055, Average Loss: 5.182, avg. samples / sec: 1048.23
Iteration:   4100, Loss function: 5.137, Average Loss: 5.179, avg. samples / sec: 994.44
:::MLLOG {"namespace": "", "time_ms": 1639066099952, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099954, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.118, Average Loss: 5.175, avg. samples / sec: 1051.00
Iteration:   4140, Loss function: 5.025, Average Loss: 5.171, avg. samples / sec: 705.33
Iteration:   4160, Loss function: 4.814, Average Loss: 5.164, avg. samples / sec: 896.60
Iteration:   4180, Loss function: 5.050, Average Loss: 5.158, avg. samples / sec: 965.04
Iteration:   4200, Loss function: 4.946, Average Loss: 5.155, avg. samples / sec: 1005.76
Iteration:   4220, Loss function: 4.847, Average Loss: 5.150, avg. samples / sec: 1024.25
Iteration:   4240, Loss function: 4.909, Average Loss: 5.145, avg. samples / sec: 1018.41
Iteration:   4260, Loss function: 5.065, Average Loss: 5.140, avg. samples / sec: 979.06
Iteration:   4280, Loss function: 4.864, Average Loss: 5.134, avg. samples / sec: 932.81
Iteration:   4300, Loss function: 4.907, Average Loss: 5.128, avg. samples / sec: 982.85
Iteration:   4320, Loss function: 4.698, Average Loss: 5.123, avg. samples / sec: 989.84
Iteration:   4340, Loss function: 4.683, Average Loss: 5.118, avg. samples / sec: 1017.02
Iteration:   4360, Loss function: 5.059, Average Loss: 5.114, avg. samples / sec: 953.41
Iteration:   4380, Loss function: 4.972, Average Loss: 5.109, avg. samples / sec: 976.95
Iteration:   4400, Loss function: 4.859, Average Loss: 5.105, avg. samples / sec: 1094.23
Iteration:   4420, Loss function: 4.894, Average Loss: 5.100, avg. samples / sec: 1013.66
Iteration:   4440, Loss function: 4.924, Average Loss: 5.095, avg. samples / sec: 974.74
Iteration:   4460, Loss function: 5.222, Average Loss: 5.091, avg. samples / sec: 1027.71
Iteration:   4480, Loss function: 5.016, Average Loss: 5.087, avg. samples / sec: 973.05
Iteration:   4500, Loss function: 4.863, Average Loss: 5.084, avg. samples / sec: 1085.83
Iteration:   4520, Loss function: 4.795, Average Loss: 5.080, avg. samples / sec: 1002.92
Iteration:   4540, Loss function: 5.055, Average Loss: 5.075, avg. samples / sec: 1042.93
Iteration:   4560, Loss function: 4.655, Average Loss: 5.070, avg. samples / sec: 1011.62
Iteration:   4580, Loss function: 4.616, Average Loss: 5.068, avg. samples / sec: 1006.14
Iteration:   4600, Loss function: 4.806, Average Loss: 5.064, avg. samples / sec: 1016.53
Iteration:   4620, Loss function: 4.796, Average Loss: 5.060, avg. samples / sec: 988.00
Iteration:   4640, Loss function: 4.648, Average Loss: 5.055, avg. samples / sec: 1034.00
Iteration:   4660, Loss function: 4.750, Average Loss: 5.051, avg. samples / sec: 985.04
Iteration:   4680, Loss function: 5.252, Average Loss: 5.047, avg. samples / sec: 1014.13
Iteration:   4700, Loss function: 4.624, Average Loss: 5.043, avg. samples / sec: 1011.64
Iteration:   4720, Loss function: 4.986, Average Loss: 5.039, avg. samples / sec: 999.20
Iteration:   4740, Loss function: 4.737, Average Loss: 5.035, avg. samples / sec: 995.75
Iteration:   4760, Loss function: 4.637, Average Loss: 5.032, avg. samples / sec: 957.66
Iteration:   4780, Loss function: 4.978, Average Loss: 5.028, avg. samples / sec: 1044.71
Iteration:   4800, Loss function: 4.795, Average Loss: 5.024, avg. samples / sec: 999.94
Iteration:   4820, Loss function: 4.825, Average Loss: 5.021, avg. samples / sec: 995.80
Iteration:   4840, Loss function: 5.121, Average Loss: 5.018, avg. samples / sec: 1017.97
Iteration:   4860, Loss function: 4.621, Average Loss: 5.014, avg. samples / sec: 967.75
Iteration:   4880, Loss function: 5.169, Average Loss: 5.010, avg. samples / sec: 1012.21
Iteration:   4900, Loss function: 4.659, Average Loss: 5.007, avg. samples / sec: 1034.17
Iteration:   4920, Loss function: 4.934, Average Loss: 5.004, avg. samples / sec: 957.22
Iteration:   4940, Loss function: 4.544, Average Loss: 4.999, avg. samples / sec: 1002.99
Iteration:   4960, Loss function: 4.652, Average Loss: 4.995, avg. samples / sec: 957.09
Iteration:   4980, Loss function: 4.674, Average Loss: 4.992, avg. samples / sec: 1026.37
Iteration:   5000, Loss function: 4.825, Average Loss: 4.988, avg. samples / sec: 968.22
Iteration:   5020, Loss function: 5.146, Average Loss: 4.985, avg. samples / sec: 1016.43
Iteration:   5040, Loss function: 4.806, Average Loss: 4.982, avg. samples / sec: 933.56
Iteration:   5060, Loss function: 4.897, Average Loss: 4.979, avg. samples / sec: 988.35
Iteration:   5080, Loss function: 4.500, Average Loss: 4.975, avg. samples / sec: 972.65
Iteration:   5100, Loss function: 4.798, Average Loss: 4.972, avg. samples / sec: 1036.86
Iteration:   5120, Loss function: 4.579, Average Loss: 4.969, avg. samples / sec: 1048.24
Iteration:   5140, Loss function: 4.883, Average Loss: 4.964, avg. samples / sec: 1190.31
:::MLLOG {"namespace": "", "time_ms": 1639066218039, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.33 s
:::MLLOG {"namespace": "", "time_ms": 1639066248439, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066248526, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066248526, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.00s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.018, Average Loss: 4.960, avg. samples / sec: 69.80
Iteration:   5180, Loss function: 4.708, Average Loss: 4.955, avg. samples / sec: 1107.47
Iteration:   5200, Loss function: 4.694, Average Loss: 4.951, avg. samples / sec: 1122.63
DONE (t=4.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11020
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22135
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09862
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19888
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14238
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11020 AP goal: 0.10000
Iteration:   5220, Loss function: 4.604, Average Loss: 4.946, avg. samples / sec: 1221.47
:::MLLOG {"namespace": "", "time_ms": 1639066256385, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256386, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11019515136023725, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256386, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256512, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:10:57 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:10:57 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065603296, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603461, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1065168550, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1065168550
:::MLLOG {"namespace": "", "time_ms": 1639065605321, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065605321, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065605325, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065605326, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065628526, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065628526, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065630430, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065630431, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065630868, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065630869, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065630870, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.877, Average Loss: 0.023, avg. samples / sec: 4.51
Iteration:     20, Loss function: 21.180, Average Loss: 0.456, avg. samples / sec: 943.21
Iteration:     40, Loss function: 20.768, Average Loss: 0.858, avg. samples / sec: 955.09
Iteration:     60, Loss function: 20.421, Average Loss: 1.247, avg. samples / sec: 911.29
Iteration:     80, Loss function: 19.965, Average Loss: 1.621, avg. samples / sec: 944.46
Iteration:    100, Loss function: 16.002, Average Loss: 1.952, avg. samples / sec: 952.56
Iteration:    120, Loss function: 10.907, Average Loss: 2.162, avg. samples / sec: 983.55
Iteration:    140, Loss function: 9.412, Average Loss: 2.313, avg. samples / sec: 934.98
Iteration:    160, Loss function: 8.926, Average Loss: 2.449, avg. samples / sec: 1009.94
Iteration:    180, Loss function: 8.831, Average Loss: 2.577, avg. samples / sec: 1021.38
Iteration:    200, Loss function: 8.605, Average Loss: 2.702, avg. samples / sec: 933.93
Iteration:    220, Loss function: 8.538, Average Loss: 2.822, avg. samples / sec: 997.75
Iteration:    240, Loss function: 9.012, Average Loss: 2.942, avg. samples / sec: 1025.25
Iteration:    260, Loss function: 8.815, Average Loss: 3.063, avg. samples / sec: 1012.84
Iteration:    280, Loss function: 8.388, Average Loss: 3.173, avg. samples / sec: 973.55
Iteration:    300, Loss function: 8.216, Average Loss: 3.276, avg. samples / sec: 1017.44
Iteration:    320, Loss function: 8.326, Average Loss: 3.375, avg. samples / sec: 1047.85
Iteration:    340, Loss function: 8.081, Average Loss: 3.471, avg. samples / sec: 825.44
Iteration:    360, Loss function: 8.019, Average Loss: 3.563, avg. samples / sec: 1020.28
Iteration:    380, Loss function: 7.969, Average Loss: 3.653, avg. samples / sec: 975.57
Iteration:    400, Loss function: 7.934, Average Loss: 3.739, avg. samples / sec: 1014.11
Iteration:    420, Loss function: 7.638, Average Loss: 3.819, avg. samples / sec: 950.48
Iteration:    440, Loss function: 7.997, Average Loss: 3.896, avg. samples / sec: 1067.19
Iteration:    460, Loss function: 7.642, Average Loss: 3.971, avg. samples / sec: 1027.73
Iteration:    480, Loss function: 7.564, Average Loss: 4.045, avg. samples / sec: 982.50
Iteration:    500, Loss function: 7.508, Average Loss: 4.115, avg. samples / sec: 982.72
Iteration:    520, Loss function: 7.333, Average Loss: 4.182, avg. samples / sec: 978.03
Iteration:    540, Loss function: 7.777, Average Loss: 4.248, avg. samples / sec: 988.12
Iteration:    560, Loss function: 7.369, Average Loss: 4.311, avg. samples / sec: 1008.87
Iteration:    580, Loss function: 7.269, Average Loss: 4.373, avg. samples / sec: 1012.29
Iteration:    600, Loss function: 7.318, Average Loss: 4.432, avg. samples / sec: 1001.64
Iteration:    620, Loss function: 6.985, Average Loss: 4.488, avg. samples / sec: 925.56
Iteration:    640, Loss function: 6.942, Average Loss: 4.542, avg. samples / sec: 904.43
Iteration:    660, Loss function: 7.116, Average Loss: 4.593, avg. samples / sec: 1051.01
Iteration:    680, Loss function: 7.329, Average Loss: 4.644, avg. samples / sec: 989.75
Iteration:    700, Loss function: 6.697, Average Loss: 4.692, avg. samples / sec: 960.86
Iteration:    720, Loss function: 6.851, Average Loss: 4.740, avg. samples / sec: 967.90
Iteration:    740, Loss function: 7.027, Average Loss: 4.784, avg. samples / sec: 1034.95
Iteration:    760, Loss function: 6.980, Average Loss: 4.827, avg. samples / sec: 1011.59
Iteration:    780, Loss function: 6.666, Average Loss: 4.867, avg. samples / sec: 1019.79
Iteration:    800, Loss function: 7.339, Average Loss: 4.906, avg. samples / sec: 1043.77
Iteration:    820, Loss function: 6.856, Average Loss: 4.944, avg. samples / sec: 1079.40
Iteration:    840, Loss function: 6.641, Average Loss: 4.980, avg. samples / sec: 1081.78
Iteration:    860, Loss function: 6.904, Average Loss: 5.014, avg. samples / sec: 988.95
Iteration:    880, Loss function: 6.703, Average Loss: 5.046, avg. samples / sec: 1103.73
Iteration:    900, Loss function: 6.935, Average Loss: 5.077, avg. samples / sec: 1073.50
Iteration:    920, Loss function: 6.469, Average Loss: 5.105, avg. samples / sec: 971.51
Iteration:    940, Loss function: 6.574, Average Loss: 5.135, avg. samples / sec: 1048.49
Iteration:    960, Loss function: 6.490, Average Loss: 5.163, avg. samples / sec: 1042.75
Iteration:    980, Loss function: 6.272, Average Loss: 5.190, avg. samples / sec: 987.72
Iteration:   1000, Loss function: 6.496, Average Loss: 5.216, avg. samples / sec: 986.54
Iteration:   1020, Loss function: 6.439, Average Loss: 5.240, avg. samples / sec: 1001.84
:::MLLOG {"namespace": "", "time_ms": 1639065748976, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065748978, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.529, Average Loss: 5.263, avg. samples / sec: 1028.35
Iteration:   1060, Loss function: 6.362, Average Loss: 5.286, avg. samples / sec: 1094.39
Iteration:   1080, Loss function: 6.326, Average Loss: 5.307, avg. samples / sec: 1015.31
Iteration:   1100, Loss function: 6.201, Average Loss: 5.327, avg. samples / sec: 973.04
Iteration:   1120, Loss function: 6.123, Average Loss: 5.346, avg. samples / sec: 981.90
Iteration:   1140, Loss function: 6.388, Average Loss: 5.364, avg. samples / sec: 1025.08
Iteration:   1160, Loss function: 6.320, Average Loss: 5.381, avg. samples / sec: 967.85
Iteration:   1180, Loss function: 6.208, Average Loss: 5.398, avg. samples / sec: 982.87
Iteration:   1200, Loss function: 6.244, Average Loss: 5.413, avg. samples / sec: 1060.27
Iteration:   1220, Loss function: 6.094, Average Loss: 5.428, avg. samples / sec: 1004.62
Iteration:   1240, Loss function: 6.131, Average Loss: 5.441, avg. samples / sec: 991.51
Iteration:   1260, Loss function: 5.979, Average Loss: 5.454, avg. samples / sec: 988.35
Iteration:   1280, Loss function: 5.895, Average Loss: 5.466, avg. samples / sec: 1096.76
Iteration:   1300, Loss function: 6.361, Average Loss: 5.479, avg. samples / sec: 1063.07
Iteration:   1320, Loss function: 6.117, Average Loss: 5.491, avg. samples / sec: 1004.93
Iteration:   1340, Loss function: 5.950, Average Loss: 5.501, avg. samples / sec: 973.28
Iteration:   1360, Loss function: 5.976, Average Loss: 5.511, avg. samples / sec: 982.94
Iteration:   1380, Loss function: 6.174, Average Loss: 5.522, avg. samples / sec: 1025.10
Iteration:   1400, Loss function: 6.166, Average Loss: 5.531, avg. samples / sec: 995.48
Iteration:   1420, Loss function: 6.007, Average Loss: 5.539, avg. samples / sec: 1022.21
Iteration:   1440, Loss function: 6.319, Average Loss: 5.547, avg. samples / sec: 1047.81
Iteration:   1460, Loss function: 6.166, Average Loss: 5.555, avg. samples / sec: 1120.08
Iteration:   1480, Loss function: 6.056, Average Loss: 5.564, avg. samples / sec: 1011.08
Iteration:   1500, Loss function: 5.991, Average Loss: 5.572, avg. samples / sec: 1004.75
Iteration:   1520, Loss function: 5.865, Average Loss: 5.577, avg. samples / sec: 1013.71
Iteration:   1540, Loss function: 6.035, Average Loss: 5.581, avg. samples / sec: 1065.85
Iteration:   1560, Loss function: 5.791, Average Loss: 5.586, avg. samples / sec: 966.06
Iteration:   1580, Loss function: 5.487, Average Loss: 5.591, avg. samples / sec: 1005.05
Iteration:   1600, Loss function: 6.234, Average Loss: 5.597, avg. samples / sec: 961.77
Iteration:   1620, Loss function: 5.664, Average Loss: 5.602, avg. samples / sec: 1090.11
Iteration:   1640, Loss function: 5.980, Average Loss: 5.607, avg. samples / sec: 958.23
Iteration:   1660, Loss function: 5.893, Average Loss: 5.611, avg. samples / sec: 1021.59
Iteration:   1680, Loss function: 5.688, Average Loss: 5.614, avg. samples / sec: 995.78
Iteration:   1700, Loss function: 5.426, Average Loss: 5.618, avg. samples / sec: 975.99
Iteration:   1720, Loss function: 5.706, Average Loss: 5.620, avg. samples / sec: 1000.43
Iteration:   1740, Loss function: 5.784, Average Loss: 5.622, avg. samples / sec: 992.09
Iteration:   1760, Loss function: 5.380, Average Loss: 5.623, avg. samples / sec: 966.14
Iteration:   1780, Loss function: 5.616, Average Loss: 5.625, avg. samples / sec: 977.11
Iteration:   1800, Loss function: 5.576, Average Loss: 5.627, avg. samples / sec: 994.36
Iteration:   1820, Loss function: 6.044, Average Loss: 5.628, avg. samples / sec: 1025.64
Iteration:   1840, Loss function: 5.789, Average Loss: 5.629, avg. samples / sec: 1013.73
Iteration:   1860, Loss function: 5.637, Average Loss: 5.629, avg. samples / sec: 975.16
Iteration:   1880, Loss function: 5.909, Average Loss: 5.630, avg. samples / sec: 1062.90
Iteration:   1900, Loss function: 5.983, Average Loss: 5.631, avg. samples / sec: 1004.06
Iteration:   1920, Loss function: 5.836, Average Loss: 5.631, avg. samples / sec: 992.30
Iteration:   1940, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 990.47
Iteration:   1960, Loss function: 5.659, Average Loss: 5.629, avg. samples / sec: 978.24
Iteration:   1980, Loss function: 5.696, Average Loss: 5.627, avg. samples / sec: 978.27
Iteration:   2000, Loss function: 5.634, Average Loss: 5.627, avg. samples / sec: 985.63
Iteration:   2020, Loss function: 5.698, Average Loss: 5.627, avg. samples / sec: 972.73
Iteration:   2040, Loss function: 5.572, Average Loss: 5.627, avg. samples / sec: 943.42
:::MLLOG {"namespace": "", "time_ms": 1639065865694, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065865695, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.602, Average Loss: 5.626, avg. samples / sec: 999.15
Iteration:   2080, Loss function: 5.055, Average Loss: 5.623, avg. samples / sec: 1024.58
Iteration:   2100, Loss function: 5.554, Average Loss: 5.621, avg. samples / sec: 1047.96
Iteration:   2120, Loss function: 5.438, Average Loss: 5.618, avg. samples / sec: 1053.92
Iteration:   2140, Loss function: 5.357, Average Loss: 5.615, avg. samples / sec: 1027.44
Iteration:   2160, Loss function: 5.414, Average Loss: 5.612, avg. samples / sec: 1010.90
Iteration:   2180, Loss function: 5.336, Average Loss: 5.611, avg. samples / sec: 1024.72
Iteration:   2200, Loss function: 5.574, Average Loss: 5.606, avg. samples / sec: 1029.58
Iteration:   2220, Loss function: 5.641, Average Loss: 5.603, avg. samples / sec: 996.40
Iteration:   2240, Loss function: 5.413, Average Loss: 5.601, avg. samples / sec: 1060.86
Iteration:   2260, Loss function: 5.304, Average Loss: 5.597, avg. samples / sec: 968.89
Iteration:   2280, Loss function: 5.257, Average Loss: 5.595, avg. samples / sec: 1010.33
Iteration:   2300, Loss function: 5.009, Average Loss: 5.591, avg. samples / sec: 964.43
Iteration:   2320, Loss function: 5.253, Average Loss: 5.588, avg. samples / sec: 1038.26
Iteration:   2340, Loss function: 5.391, Average Loss: 5.585, avg. samples / sec: 962.75
Iteration:   2360, Loss function: 5.376, Average Loss: 5.581, avg. samples / sec: 973.21
Iteration:   2380, Loss function: 5.399, Average Loss: 5.577, avg. samples / sec: 983.86
Iteration:   2400, Loss function: 5.503, Average Loss: 5.573, avg. samples / sec: 1048.94
Iteration:   2420, Loss function: 5.508, Average Loss: 5.570, avg. samples / sec: 972.20
Iteration:   2440, Loss function: 5.545, Average Loss: 5.568, avg. samples / sec: 1017.70
Iteration:   2460, Loss function: 5.206, Average Loss: 5.564, avg. samples / sec: 1003.65
Iteration:   2480, Loss function: 5.362, Average Loss: 5.560, avg. samples / sec: 992.78
Iteration:   2500, Loss function: 5.399, Average Loss: 5.556, avg. samples / sec: 1028.95
Iteration:   2520, Loss function: 5.346, Average Loss: 5.551, avg. samples / sec: 1022.65
Iteration:   2540, Loss function: 5.211, Average Loss: 5.547, avg. samples / sec: 1068.01
Iteration:   2560, Loss function: 5.135, Average Loss: 5.543, avg. samples / sec: 1001.11
Iteration:   2580, Loss function: 5.208, Average Loss: 5.539, avg. samples / sec: 972.70
Iteration:   2600, Loss function: 5.277, Average Loss: 5.535, avg. samples / sec: 1047.97
Iteration:   2620, Loss function: 5.500, Average Loss: 5.532, avg. samples / sec: 990.86
Iteration:   2640, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 1020.26
Iteration:   2660, Loss function: 5.173, Average Loss: 5.526, avg. samples / sec: 1001.52
Iteration:   2680, Loss function: 5.207, Average Loss: 5.522, avg. samples / sec: 998.66
Iteration:   2700, Loss function: 5.171, Average Loss: 5.518, avg. samples / sec: 959.61
Iteration:   2720, Loss function: 5.459, Average Loss: 5.514, avg. samples / sec: 927.15
Iteration:   2740, Loss function: 4.961, Average Loss: 5.510, avg. samples / sec: 956.36
Iteration:   2760, Loss function: 4.999, Average Loss: 5.504, avg. samples / sec: 969.91
Iteration:   2780, Loss function: 5.512, Average Loss: 5.501, avg. samples / sec: 1070.00
Iteration:   2800, Loss function: 5.067, Average Loss: 5.496, avg. samples / sec: 1026.30
Iteration:   2820, Loss function: 5.236, Average Loss: 5.492, avg. samples / sec: 991.96
Iteration:   2840, Loss function: 5.441, Average Loss: 5.488, avg. samples / sec: 994.52
Iteration:   2860, Loss function: 5.159, Average Loss: 5.482, avg. samples / sec: 969.90
Iteration:   2880, Loss function: 5.188, Average Loss: 5.478, avg. samples / sec: 984.76
Iteration:   2900, Loss function: 5.022, Average Loss: 5.472, avg. samples / sec: 1012.13
Iteration:   2920, Loss function: 5.226, Average Loss: 5.467, avg. samples / sec: 990.53
Iteration:   2940, Loss function: 5.268, Average Loss: 5.462, avg. samples / sec: 933.92
Iteration:   2960, Loss function: 5.537, Average Loss: 5.458, avg. samples / sec: 990.00
Iteration:   2980, Loss function: 5.254, Average Loss: 5.454, avg. samples / sec: 1013.48
Iteration:   3000, Loss function: 5.288, Average Loss: 5.449, avg. samples / sec: 998.63
Iteration:   3020, Loss function: 5.053, Average Loss: 5.442, avg. samples / sec: 960.60
Iteration:   3040, Loss function: 5.213, Average Loss: 5.437, avg. samples / sec: 977.19
Iteration:   3060, Loss function: 5.074, Average Loss: 5.431, avg. samples / sec: 1024.75
Iteration:   3080, Loss function: 4.966, Average Loss: 5.426, avg. samples / sec: 1038.82
:::MLLOG {"namespace": "", "time_ms": 1639065982712, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065982714, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.138, Average Loss: 5.422, avg. samples / sec: 966.67
Iteration:   3120, Loss function: 4.947, Average Loss: 5.415, avg. samples / sec: 981.00
Iteration:   3140, Loss function: 5.009, Average Loss: 5.410, avg. samples / sec: 996.72
Iteration:   3160, Loss function: 5.486, Average Loss: 5.405, avg. samples / sec: 1016.44
Iteration:   3180, Loss function: 4.952, Average Loss: 5.400, avg. samples / sec: 1022.56
Iteration:   3200, Loss function: 5.389, Average Loss: 5.396, avg. samples / sec: 1031.27
Iteration:   3220, Loss function: 5.135, Average Loss: 5.390, avg. samples / sec: 993.30
Iteration:   3240, Loss function: 5.193, Average Loss: 5.385, avg. samples / sec: 1037.60
Iteration:   3260, Loss function: 5.023, Average Loss: 5.380, avg. samples / sec: 1046.81
Iteration:   3280, Loss function: 4.945, Average Loss: 5.374, avg. samples / sec: 985.84
Iteration:   3300, Loss function: 4.704, Average Loss: 5.367, avg. samples / sec: 1011.16
Iteration:   3320, Loss function: 5.017, Average Loss: 5.363, avg. samples / sec: 968.13
Iteration:   3340, Loss function: 5.150, Average Loss: 5.359, avg. samples / sec: 1009.79
Iteration:   3360, Loss function: 5.079, Average Loss: 5.353, avg. samples / sec: 1022.04
Iteration:   3380, Loss function: 5.177, Average Loss: 5.346, avg. samples / sec: 1010.62
Iteration:   3400, Loss function: 4.846, Average Loss: 5.341, avg. samples / sec: 959.59
Iteration:   3420, Loss function: 5.149, Average Loss: 5.336, avg. samples / sec: 1004.65
Iteration:   3440, Loss function: 4.949, Average Loss: 5.331, avg. samples / sec: 1067.96
Iteration:   3460, Loss function: 5.063, Average Loss: 5.326, avg. samples / sec: 982.55
Iteration:   3480, Loss function: 5.232, Average Loss: 5.322, avg. samples / sec: 967.36
Iteration:   3500, Loss function: 5.244, Average Loss: 5.318, avg. samples / sec: 990.15
Iteration:   3520, Loss function: 5.004, Average Loss: 5.314, avg. samples / sec: 952.72
Iteration:   3540, Loss function: 5.117, Average Loss: 5.308, avg. samples / sec: 1007.20
Iteration:   3560, Loss function: 4.899, Average Loss: 5.304, avg. samples / sec: 976.60
Iteration:   3580, Loss function: 5.073, Average Loss: 5.301, avg. samples / sec: 994.39
Iteration:   3600, Loss function: 5.124, Average Loss: 5.294, avg. samples / sec: 983.31
Iteration:   3620, Loss function: 4.724, Average Loss: 5.289, avg. samples / sec: 1036.54
Iteration:   3640, Loss function: 4.843, Average Loss: 5.285, avg. samples / sec: 990.11
Iteration:   3660, Loss function: 5.040, Average Loss: 5.280, avg. samples / sec: 996.02
Iteration:   3680, Loss function: 5.241, Average Loss: 5.275, avg. samples / sec: 1042.75
Iteration:   3700, Loss function: 4.882, Average Loss: 5.271, avg. samples / sec: 1037.96
Iteration:   3720, Loss function: 4.853, Average Loss: 5.264, avg. samples / sec: 977.01
Iteration:   3740, Loss function: 4.929, Average Loss: 5.261, avg. samples / sec: 1017.88
Iteration:   3760, Loss function: 5.161, Average Loss: 5.257, avg. samples / sec: 984.50
Iteration:   3780, Loss function: 5.177, Average Loss: 5.252, avg. samples / sec: 952.61
Iteration:   3800, Loss function: 4.994, Average Loss: 5.248, avg. samples / sec: 1061.54
Iteration:   3820, Loss function: 5.087, Average Loss: 5.243, avg. samples / sec: 962.51
Iteration:   3840, Loss function: 4.861, Average Loss: 5.239, avg. samples / sec: 1016.17
Iteration:   3860, Loss function: 4.863, Average Loss: 5.234, avg. samples / sec: 1007.44
Iteration:   3880, Loss function: 4.923, Average Loss: 5.228, avg. samples / sec: 992.03
Iteration:   3900, Loss function: 5.172, Average Loss: 5.223, avg. samples / sec: 1012.82
Iteration:   3920, Loss function: 5.096, Average Loss: 5.218, avg. samples / sec: 1047.45
Iteration:   3940, Loss function: 4.964, Average Loss: 5.212, avg. samples / sec: 1005.62
Iteration:   3960, Loss function: 5.009, Average Loss: 5.208, avg. samples / sec: 985.34
Iteration:   3980, Loss function: 4.816, Average Loss: 5.204, avg. samples / sec: 1001.66
Iteration:   4000, Loss function: 5.148, Average Loss: 5.201, avg. samples / sec: 1013.18
Iteration:   4020, Loss function: 4.884, Average Loss: 5.195, avg. samples / sec: 1004.41
Iteration:   4040, Loss function: 5.011, Average Loss: 5.191, avg. samples / sec: 917.20
Iteration:   4060, Loss function: 5.063, Average Loss: 5.187, avg. samples / sec: 929.89
Iteration:   4080, Loss function: 5.055, Average Loss: 5.182, avg. samples / sec: 1048.23
Iteration:   4100, Loss function: 5.137, Average Loss: 5.179, avg. samples / sec: 994.44
:::MLLOG {"namespace": "", "time_ms": 1639066099952, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099954, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.118, Average Loss: 5.175, avg. samples / sec: 1051.00
Iteration:   4140, Loss function: 5.025, Average Loss: 5.171, avg. samples / sec: 705.33
Iteration:   4160, Loss function: 4.814, Average Loss: 5.164, avg. samples / sec: 896.60
Iteration:   4180, Loss function: 5.050, Average Loss: 5.158, avg. samples / sec: 965.04
Iteration:   4200, Loss function: 4.946, Average Loss: 5.155, avg. samples / sec: 1005.76
Iteration:   4220, Loss function: 4.847, Average Loss: 5.150, avg. samples / sec: 1024.25
Iteration:   4240, Loss function: 4.909, Average Loss: 5.145, avg. samples / sec: 1018.41
Iteration:   4260, Loss function: 5.065, Average Loss: 5.140, avg. samples / sec: 979.06
Iteration:   4280, Loss function: 4.864, Average Loss: 5.134, avg. samples / sec: 932.81
Iteration:   4300, Loss function: 4.907, Average Loss: 5.128, avg. samples / sec: 982.85
Iteration:   4320, Loss function: 4.698, Average Loss: 5.123, avg. samples / sec: 989.84
Iteration:   4340, Loss function: 4.683, Average Loss: 5.118, avg. samples / sec: 1017.02
Iteration:   4360, Loss function: 5.059, Average Loss: 5.114, avg. samples / sec: 953.41
Iteration:   4380, Loss function: 4.972, Average Loss: 5.109, avg. samples / sec: 976.95
Iteration:   4400, Loss function: 4.859, Average Loss: 5.105, avg. samples / sec: 1094.23
Iteration:   4420, Loss function: 4.894, Average Loss: 5.100, avg. samples / sec: 1013.66
Iteration:   4440, Loss function: 4.924, Average Loss: 5.095, avg. samples / sec: 974.74
Iteration:   4460, Loss function: 5.222, Average Loss: 5.091, avg. samples / sec: 1027.71
Iteration:   4480, Loss function: 5.016, Average Loss: 5.087, avg. samples / sec: 973.05
Iteration:   4500, Loss function: 4.863, Average Loss: 5.084, avg. samples / sec: 1085.83
Iteration:   4520, Loss function: 4.795, Average Loss: 5.080, avg. samples / sec: 1002.92
Iteration:   4540, Loss function: 5.055, Average Loss: 5.075, avg. samples / sec: 1042.93
Iteration:   4560, Loss function: 4.655, Average Loss: 5.070, avg. samples / sec: 1011.62
Iteration:   4580, Loss function: 4.616, Average Loss: 5.068, avg. samples / sec: 1006.14
Iteration:   4600, Loss function: 4.806, Average Loss: 5.064, avg. samples / sec: 1016.53
Iteration:   4620, Loss function: 4.796, Average Loss: 5.060, avg. samples / sec: 988.00
Iteration:   4640, Loss function: 4.648, Average Loss: 5.055, avg. samples / sec: 1034.00
Iteration:   4660, Loss function: 4.750, Average Loss: 5.051, avg. samples / sec: 985.04
Iteration:   4680, Loss function: 5.252, Average Loss: 5.047, avg. samples / sec: 1014.13
Iteration:   4700, Loss function: 4.624, Average Loss: 5.043, avg. samples / sec: 1011.64
Iteration:   4720, Loss function: 4.986, Average Loss: 5.039, avg. samples / sec: 999.20
Iteration:   4740, Loss function: 4.737, Average Loss: 5.035, avg. samples / sec: 995.75
Iteration:   4760, Loss function: 4.637, Average Loss: 5.032, avg. samples / sec: 957.66
Iteration:   4780, Loss function: 4.978, Average Loss: 5.028, avg. samples / sec: 1044.71
Iteration:   4800, Loss function: 4.795, Average Loss: 5.024, avg. samples / sec: 999.94
Iteration:   4820, Loss function: 4.825, Average Loss: 5.021, avg. samples / sec: 995.80
Iteration:   4840, Loss function: 5.121, Average Loss: 5.018, avg. samples / sec: 1017.97
Iteration:   4860, Loss function: 4.621, Average Loss: 5.014, avg. samples / sec: 967.75
Iteration:   4880, Loss function: 5.169, Average Loss: 5.010, avg. samples / sec: 1012.21
Iteration:   4900, Loss function: 4.659, Average Loss: 5.007, avg. samples / sec: 1034.17
Iteration:   4920, Loss function: 4.934, Average Loss: 5.004, avg. samples / sec: 957.22
Iteration:   4940, Loss function: 4.544, Average Loss: 4.999, avg. samples / sec: 1002.99
Iteration:   4960, Loss function: 4.652, Average Loss: 4.995, avg. samples / sec: 957.09
Iteration:   4980, Loss function: 4.674, Average Loss: 4.992, avg. samples / sec: 1026.37
Iteration:   5000, Loss function: 4.825, Average Loss: 4.988, avg. samples / sec: 968.22
Iteration:   5020, Loss function: 5.146, Average Loss: 4.985, avg. samples / sec: 1016.43
Iteration:   5040, Loss function: 4.806, Average Loss: 4.982, avg. samples / sec: 933.56
Iteration:   5060, Loss function: 4.897, Average Loss: 4.979, avg. samples / sec: 988.35
Iteration:   5080, Loss function: 4.500, Average Loss: 4.975, avg. samples / sec: 972.65
Iteration:   5100, Loss function: 4.798, Average Loss: 4.972, avg. samples / sec: 1036.86
Iteration:   5120, Loss function: 4.579, Average Loss: 4.969, avg. samples / sec: 1048.24
Iteration:   5140, Loss function: 4.883, Average Loss: 4.964, avg. samples / sec: 1190.31
:::MLLOG {"namespace": "", "time_ms": 1639066218039, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.33 s
:::MLLOG {"namespace": "", "time_ms": 1639066248439, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066248526, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066248526, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.00s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.018, Average Loss: 4.960, avg. samples / sec: 69.80
Iteration:   5180, Loss function: 4.708, Average Loss: 4.955, avg. samples / sec: 1107.47
Iteration:   5200, Loss function: 4.694, Average Loss: 4.951, avg. samples / sec: 1122.63
DONE (t=4.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11020
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22135
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09862
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19888
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14238
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21954
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11020 AP goal: 0.10000
Iteration:   5220, Loss function: 4.604, Average Loss: 4.946, avg. samples / sec: 1221.47
:::MLLOG {"namespace": "", "time_ms": 1639066256385, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256386, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11019515136023725, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256386, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256512, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066257
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:10:57 PM'
START TIMING RUN WAS 2021-12-09 03:59:56 PM
ENDING TIMING RUN AT 2021-12-09 04:10:57 PM
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:56 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:10:57 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
+ result=661
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,661,nvidia,2021-12-09 03:59:56 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,661,nvidia,2021-12-09 03:59:56 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
