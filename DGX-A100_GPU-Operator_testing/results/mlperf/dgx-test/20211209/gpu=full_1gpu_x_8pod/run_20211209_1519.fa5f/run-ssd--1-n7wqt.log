+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-n7wqt.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-n7wqt.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-n7wqt.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72).
+ echo 'No MIG GPU available, using the full GPUs (GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72).'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065593
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:53 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:53 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:53 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:53 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-n7wqt to the sync file ...
run-ssd--1-n7wqt Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
run-ssd--1-n7wqt Found 7 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
     7	run-ssd--1-fv55t
Thu Dec  9 16:00:03 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 0 == 1 ]]
Running on all the 1 GPUs 
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065605690, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065605894, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3528416392, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3528416392
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065607505, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065607506, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065607510, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065630961, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065630961, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065633129, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065633133, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065633610, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065633611, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065633613, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.238, Average Loss: 0.022, avg. samples / sec: 4.42
Iteration:     20, Loss function: 21.042, Average Loss: 0.449, avg. samples / sec: 769.51
Iteration:     40, Loss function: 20.736, Average Loss: 0.851, avg. samples / sec: 891.87
Iteration:     60, Loss function: 20.369, Average Loss: 1.240, avg. samples / sec: 1001.30
Iteration:     80, Loss function: 19.963, Average Loss: 1.615, avg. samples / sec: 924.53
Iteration:    100, Loss function: 15.595, Average Loss: 1.944, avg. samples / sec: 926.41
Iteration:    120, Loss function: 11.573, Average Loss: 2.157, avg. samples / sec: 951.21
Iteration:    140, Loss function: 9.897, Average Loss: 2.324, avg. samples / sec: 1027.74
Iteration:    160, Loss function: 9.355, Average Loss: 2.466, avg. samples / sec: 951.97
Iteration:    180, Loss function: 9.089, Average Loss: 2.597, avg. samples / sec: 954.65
Iteration:    200, Loss function: 8.640, Average Loss: 2.722, avg. samples / sec: 941.96
Iteration:    220, Loss function: 8.658, Average Loss: 2.842, avg. samples / sec: 1004.03
Iteration:    240, Loss function: 8.498, Average Loss: 2.957, avg. samples / sec: 961.02
Iteration:    260, Loss function: 8.924, Average Loss: 3.070, avg. samples / sec: 970.63
Iteration:    280, Loss function: 8.725, Average Loss: 3.184, avg. samples / sec: 1032.91
Iteration:    300, Loss function: 8.316, Average Loss: 3.289, avg. samples / sec: 1049.45
Iteration:    320, Loss function: 8.249, Average Loss: 3.390, avg. samples / sec: 773.60
Iteration:    340, Loss function: 8.276, Average Loss: 3.487, avg. samples / sec: 1018.56
Iteration:    360, Loss function: 8.019, Average Loss: 3.579, avg. samples / sec: 1013.55
Iteration:    380, Loss function: 7.928, Average Loss: 3.669, avg. samples / sec: 1031.48
Iteration:    400, Loss function: 7.993, Average Loss: 3.756, avg. samples / sec: 982.02
Iteration:    420, Loss function: 7.612, Average Loss: 3.839, avg. samples / sec: 1011.15
Iteration:    440, Loss function: 7.855, Average Loss: 3.918, avg. samples / sec: 918.37
Iteration:    460, Loss function: 7.709, Average Loss: 3.993, avg. samples / sec: 1012.33
Iteration:    480, Loss function: 7.437, Average Loss: 4.067, avg. samples / sec: 949.73
Iteration:    500, Loss function: 7.728, Average Loss: 4.138, avg. samples / sec: 1005.17
Iteration:    520, Loss function: 7.521, Average Loss: 4.205, avg. samples / sec: 1077.98
Iteration:    540, Loss function: 7.638, Average Loss: 4.272, avg. samples / sec: 1049.02
Iteration:    560, Loss function: 7.291, Average Loss: 4.338, avg. samples / sec: 994.47
Iteration:    580, Loss function: 7.265, Average Loss: 4.399, avg. samples / sec: 968.86
Iteration:    600, Loss function: 7.229, Average Loss: 4.459, avg. samples / sec: 1016.30
Iteration:    620, Loss function: 7.064, Average Loss: 4.514, avg. samples / sec: 1002.90
Iteration:    640, Loss function: 6.973, Average Loss: 4.568, avg. samples / sec: 1047.08
Iteration:    660, Loss function: 7.165, Average Loss: 4.620, avg. samples / sec: 965.13
Iteration:    680, Loss function: 7.513, Average Loss: 4.672, avg. samples / sec: 1077.58
Iteration:    700, Loss function: 6.890, Average Loss: 4.720, avg. samples / sec: 992.34
Iteration:    720, Loss function: 7.181, Average Loss: 4.768, avg. samples / sec: 873.53
Iteration:    740, Loss function: 6.829, Average Loss: 4.813, avg. samples / sec: 1028.56
Iteration:    760, Loss function: 6.994, Average Loss: 4.856, avg. samples / sec: 979.55
Iteration:    780, Loss function: 6.671, Average Loss: 4.898, avg. samples / sec: 942.82
Iteration:    800, Loss function: 7.134, Average Loss: 4.937, avg. samples / sec: 985.94
Iteration:    820, Loss function: 6.753, Average Loss: 4.975, avg. samples / sec: 999.59
Iteration:    840, Loss function: 6.837, Average Loss: 5.011, avg. samples / sec: 823.64
Iteration:    860, Loss function: 6.977, Average Loss: 5.046, avg. samples / sec: 966.58
Iteration:    880, Loss function: 6.926, Average Loss: 5.079, avg. samples / sec: 1011.21
Iteration:    900, Loss function: 6.789, Average Loss: 5.109, avg. samples / sec: 991.98
Iteration:    920, Loss function: 6.665, Average Loss: 5.139, avg. samples / sec: 1010.02
Iteration:    940, Loss function: 6.765, Average Loss: 5.169, avg. samples / sec: 969.90
Iteration:    960, Loss function: 6.482, Average Loss: 5.197, avg. samples / sec: 991.99
Iteration:    980, Loss function: 6.524, Average Loss: 5.224, avg. samples / sec: 1017.72
Iteration:   1000, Loss function: 6.704, Average Loss: 5.249, avg. samples / sec: 986.75
Iteration:   1020, Loss function: 6.330, Average Loss: 5.272, avg. samples / sec: 1033.48
:::MLLOG {"namespace": "", "time_ms": 1639065754002, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065754004, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.585, Average Loss: 5.295, avg. samples / sec: 1003.80
Iteration:   1060, Loss function: 6.248, Average Loss: 5.318, avg. samples / sec: 995.89
Iteration:   1080, Loss function: 6.429, Average Loss: 5.341, avg. samples / sec: 1035.33
Iteration:   1100, Loss function: 6.338, Average Loss: 5.361, avg. samples / sec: 966.91
Iteration:   1120, Loss function: 6.185, Average Loss: 5.381, avg. samples / sec: 1033.31
Iteration:   1140, Loss function: 6.539, Average Loss: 5.399, avg. samples / sec: 1033.94
Iteration:   1160, Loss function: 6.093, Average Loss: 5.417, avg. samples / sec: 962.91
Iteration:   1180, Loss function: 6.126, Average Loss: 5.433, avg. samples / sec: 990.79
Iteration:   1200, Loss function: 6.103, Average Loss: 5.449, avg. samples / sec: 1034.62
Iteration:   1220, Loss function: 6.368, Average Loss: 5.465, avg. samples / sec: 1061.60
Iteration:   1240, Loss function: 6.069, Average Loss: 5.477, avg. samples / sec: 1028.71
Iteration:   1260, Loss function: 6.086, Average Loss: 5.490, avg. samples / sec: 1014.85
Iteration:   1280, Loss function: 6.102, Average Loss: 5.502, avg. samples / sec: 1018.93
Iteration:   1300, Loss function: 6.164, Average Loss: 5.515, avg. samples / sec: 963.20
Iteration:   1320, Loss function: 6.067, Average Loss: 5.528, avg. samples / sec: 995.74
Iteration:   1340, Loss function: 5.985, Average Loss: 5.537, avg. samples / sec: 1016.46
Iteration:   1360, Loss function: 6.082, Average Loss: 5.548, avg. samples / sec: 1033.71
Iteration:   1380, Loss function: 6.068, Average Loss: 5.557, avg. samples / sec: 1067.34
Iteration:   1400, Loss function: 6.233, Average Loss: 5.566, avg. samples / sec: 1048.96
Iteration:   1420, Loss function: 5.927, Average Loss: 5.574, avg. samples / sec: 1099.47
Iteration:   1440, Loss function: 6.372, Average Loss: 5.582, avg. samples / sec: 1032.07
Iteration:   1460, Loss function: 6.168, Average Loss: 5.591, avg. samples / sec: 940.55
Iteration:   1480, Loss function: 5.834, Average Loss: 5.599, avg. samples / sec: 981.93
Iteration:   1500, Loss function: 6.124, Average Loss: 5.608, avg. samples / sec: 971.11
Iteration:   1520, Loss function: 5.979, Average Loss: 5.613, avg. samples / sec: 965.65
Iteration:   1540, Loss function: 5.948, Average Loss: 5.616, avg. samples / sec: 927.65
Iteration:   1560, Loss function: 5.778, Average Loss: 5.621, avg. samples / sec: 1057.57
Iteration:   1580, Loss function: 5.718, Average Loss: 5.626, avg. samples / sec: 851.60
Iteration:   1600, Loss function: 6.321, Average Loss: 5.632, avg. samples / sec: 867.26
Iteration:   1620, Loss function: 5.745, Average Loss: 5.637, avg. samples / sec: 932.37
Iteration:   1640, Loss function: 6.006, Average Loss: 5.640, avg. samples / sec: 994.15
Iteration:   1660, Loss function: 5.888, Average Loss: 5.643, avg. samples / sec: 991.13
Iteration:   1680, Loss function: 5.703, Average Loss: 5.647, avg. samples / sec: 993.73
Iteration:   1700, Loss function: 5.406, Average Loss: 5.650, avg. samples / sec: 1027.91
Iteration:   1720, Loss function: 5.713, Average Loss: 5.652, avg. samples / sec: 1030.41
Iteration:   1740, Loss function: 5.990, Average Loss: 5.654, avg. samples / sec: 990.89
Iteration:   1760, Loss function: 5.607, Average Loss: 5.656, avg. samples / sec: 1025.46
Iteration:   1780, Loss function: 5.665, Average Loss: 5.656, avg. samples / sec: 1043.87
Iteration:   1800, Loss function: 5.661, Average Loss: 5.659, avg. samples / sec: 988.52
Iteration:   1820, Loss function: 5.872, Average Loss: 5.660, avg. samples / sec: 1036.86
Iteration:   1840, Loss function: 6.028, Average Loss: 5.661, avg. samples / sec: 1050.60
Iteration:   1860, Loss function: 5.712, Average Loss: 5.660, avg. samples / sec: 1055.25
Iteration:   1880, Loss function: 5.918, Average Loss: 5.662, avg. samples / sec: 993.55
Iteration:   1900, Loss function: 5.781, Average Loss: 5.663, avg. samples / sec: 1010.56
Iteration:   1920, Loss function: 5.619, Average Loss: 5.662, avg. samples / sec: 968.31
Iteration:   1940, Loss function: 5.853, Average Loss: 5.662, avg. samples / sec: 956.22
Iteration:   1960, Loss function: 5.468, Average Loss: 5.661, avg. samples / sec: 970.72
Iteration:   1980, Loss function: 5.632, Average Loss: 5.660, avg. samples / sec: 976.08
Iteration:   2000, Loss function: 5.542, Average Loss: 5.660, avg. samples / sec: 1046.17
Iteration:   2020, Loss function: 5.711, Average Loss: 5.659, avg. samples / sec: 1024.83
Iteration:   2040, Loss function: 5.686, Average Loss: 5.659, avg. samples / sec: 1031.25
:::MLLOG {"namespace": "", "time_ms": 1639065871381, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065871383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.504, Average Loss: 5.657, avg. samples / sec: 978.36
Iteration:   2080, Loss function: 5.158, Average Loss: 5.655, avg. samples / sec: 872.80
Iteration:   2100, Loss function: 5.485, Average Loss: 5.653, avg. samples / sec: 915.80
Iteration:   2120, Loss function: 5.284, Average Loss: 5.650, avg. samples / sec: 1020.47
Iteration:   2140, Loss function: 5.506, Average Loss: 5.647, avg. samples / sec: 1010.81
Iteration:   2160, Loss function: 5.531, Average Loss: 5.644, avg. samples / sec: 1031.69
Iteration:   2180, Loss function: 5.327, Average Loss: 5.642, avg. samples / sec: 979.03
Iteration:   2200, Loss function: 5.584, Average Loss: 5.638, avg. samples / sec: 920.71
Iteration:   2220, Loss function: 5.707, Average Loss: 5.636, avg. samples / sec: 992.45
Iteration:   2240, Loss function: 5.395, Average Loss: 5.633, avg. samples / sec: 993.67
Iteration:   2260, Loss function: 5.238, Average Loss: 5.629, avg. samples / sec: 1065.79
Iteration:   2280, Loss function: 5.380, Average Loss: 5.626, avg. samples / sec: 1021.25
Iteration:   2300, Loss function: 4.958, Average Loss: 5.624, avg. samples / sec: 1006.32
Iteration:   2320, Loss function: 5.311, Average Loss: 5.621, avg. samples / sec: 1045.89
Iteration:   2340, Loss function: 5.695, Average Loss: 5.619, avg. samples / sec: 1006.57
Iteration:   2360, Loss function: 5.436, Average Loss: 5.615, avg. samples / sec: 1011.96
Iteration:   2380, Loss function: 5.513, Average Loss: 5.612, avg. samples / sec: 1023.85
Iteration:   2400, Loss function: 5.659, Average Loss: 5.607, avg. samples / sec: 1007.66
Iteration:   2420, Loss function: 5.385, Average Loss: 5.603, avg. samples / sec: 1022.58
Iteration:   2440, Loss function: 5.366, Average Loss: 5.600, avg. samples / sec: 987.75
Iteration:   2460, Loss function: 5.292, Average Loss: 5.596, avg. samples / sec: 1038.46
Iteration:   2480, Loss function: 5.403, Average Loss: 5.592, avg. samples / sec: 999.05
Iteration:   2500, Loss function: 5.515, Average Loss: 5.588, avg. samples / sec: 1018.70
Iteration:   2520, Loss function: 5.500, Average Loss: 5.583, avg. samples / sec: 1023.78
Iteration:   2540, Loss function: 5.341, Average Loss: 5.580, avg. samples / sec: 985.60
Iteration:   2560, Loss function: 5.238, Average Loss: 5.576, avg. samples / sec: 963.38
Iteration:   2580, Loss function: 5.022, Average Loss: 5.572, avg. samples / sec: 1016.42
Iteration:   2600, Loss function: 5.322, Average Loss: 5.569, avg. samples / sec: 989.10
Iteration:   2620, Loss function: 5.569, Average Loss: 5.565, avg. samples / sec: 979.96
Iteration:   2640, Loss function: 5.328, Average Loss: 5.562, avg. samples / sec: 972.67
Iteration:   2660, Loss function: 5.261, Average Loss: 5.559, avg. samples / sec: 1097.06
Iteration:   2680, Loss function: 5.205, Average Loss: 5.555, avg. samples / sec: 1028.84
Iteration:   2700, Loss function: 5.232, Average Loss: 5.550, avg. samples / sec: 1037.82
Iteration:   2720, Loss function: 5.264, Average Loss: 5.545, avg. samples / sec: 1001.58
Iteration:   2740, Loss function: 4.988, Average Loss: 5.540, avg. samples / sec: 1020.31
Iteration:   2760, Loss function: 5.106, Average Loss: 5.535, avg. samples / sec: 1025.85
Iteration:   2780, Loss function: 5.354, Average Loss: 5.531, avg. samples / sec: 978.81
Iteration:   2800, Loss function: 5.286, Average Loss: 5.526, avg. samples / sec: 978.46
Iteration:   2820, Loss function: 5.448, Average Loss: 5.522, avg. samples / sec: 928.30
Iteration:   2840, Loss function: 5.412, Average Loss: 5.517, avg. samples / sec: 1010.79
Iteration:   2860, Loss function: 5.195, Average Loss: 5.512, avg. samples / sec: 970.38
Iteration:   2880, Loss function: 5.431, Average Loss: 5.508, avg. samples / sec: 1052.64
Iteration:   2900, Loss function: 4.948, Average Loss: 5.503, avg. samples / sec: 1021.78
Iteration:   2920, Loss function: 5.242, Average Loss: 5.498, avg. samples / sec: 980.33
Iteration:   2940, Loss function: 5.198, Average Loss: 5.494, avg. samples / sec: 989.46
Iteration:   2960, Loss function: 5.447, Average Loss: 5.489, avg. samples / sec: 1014.31
Iteration:   2980, Loss function: 5.210, Average Loss: 5.486, avg. samples / sec: 1001.30
Iteration:   3000, Loss function: 5.419, Average Loss: 5.480, avg. samples / sec: 1003.19
Iteration:   3020, Loss function: 5.275, Average Loss: 5.474, avg. samples / sec: 1019.62
Iteration:   3040, Loss function: 5.225, Average Loss: 5.468, avg. samples / sec: 1074.26
Iteration:   3060, Loss function: 5.061, Average Loss: 5.463, avg. samples / sec: 924.65
Iteration:   3080, Loss function: 4.892, Average Loss: 5.456, avg. samples / sec: 980.96
:::MLLOG {"namespace": "", "time_ms": 1639065988669, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065988671, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.055, Average Loss: 5.452, avg. samples / sec: 985.96
Iteration:   3120, Loss function: 5.157, Average Loss: 5.446, avg. samples / sec: 1078.93
Iteration:   3140, Loss function: 4.989, Average Loss: 5.439, avg. samples / sec: 1032.05
Iteration:   3160, Loss function: 5.571, Average Loss: 5.434, avg. samples / sec: 1048.12
Iteration:   3180, Loss function: 4.801, Average Loss: 5.428, avg. samples / sec: 1063.28
Iteration:   3200, Loss function: 5.197, Average Loss: 5.423, avg. samples / sec: 983.51
Iteration:   3220, Loss function: 5.249, Average Loss: 5.417, avg. samples / sec: 1009.14
Iteration:   3240, Loss function: 5.416, Average Loss: 5.411, avg. samples / sec: 1037.37
Iteration:   3260, Loss function: 5.206, Average Loss: 5.405, avg. samples / sec: 942.99
Iteration:   3280, Loss function: 4.879, Average Loss: 5.400, avg. samples / sec: 1039.28
Iteration:   3300, Loss function: 4.971, Average Loss: 5.393, avg. samples / sec: 1014.94
Iteration:   3320, Loss function: 5.144, Average Loss: 5.388, avg. samples / sec: 972.50
Iteration:   3340, Loss function: 5.140, Average Loss: 5.383, avg. samples / sec: 1069.73
Iteration:   3360, Loss function: 5.315, Average Loss: 5.377, avg. samples / sec: 880.26
Iteration:   3380, Loss function: 5.236, Average Loss: 5.370, avg. samples / sec: 976.46
Iteration:   3400, Loss function: 4.859, Average Loss: 5.365, avg. samples / sec: 992.63
Iteration:   3420, Loss function: 5.245, Average Loss: 5.360, avg. samples / sec: 1020.96
Iteration:   3440, Loss function: 4.937, Average Loss: 5.355, avg. samples / sec: 981.81
Iteration:   3460, Loss function: 5.213, Average Loss: 5.350, avg. samples / sec: 960.54
Iteration:   3480, Loss function: 5.235, Average Loss: 5.345, avg. samples / sec: 1049.51
Iteration:   3500, Loss function: 5.178, Average Loss: 5.341, avg. samples / sec: 1042.31
Iteration:   3520, Loss function: 4.902, Average Loss: 5.338, avg. samples / sec: 1016.98
Iteration:   3540, Loss function: 5.011, Average Loss: 5.333, avg. samples / sec: 1046.89
Iteration:   3560, Loss function: 4.821, Average Loss: 5.329, avg. samples / sec: 1009.19
Iteration:   3580, Loss function: 5.229, Average Loss: 5.325, avg. samples / sec: 990.67
Iteration:   3600, Loss function: 5.264, Average Loss: 5.319, avg. samples / sec: 927.16
Iteration:   3620, Loss function: 4.792, Average Loss: 5.314, avg. samples / sec: 983.86
Iteration:   3640, Loss function: 4.790, Average Loss: 5.309, avg. samples / sec: 1011.53
Iteration:   3660, Loss function: 5.055, Average Loss: 5.304, avg. samples / sec: 984.56
Iteration:   3680, Loss function: 4.975, Average Loss: 5.297, avg. samples / sec: 1018.59
Iteration:   3700, Loss function: 5.029, Average Loss: 5.292, avg. samples / sec: 964.95
Iteration:   3720, Loss function: 5.027, Average Loss: 5.287, avg. samples / sec: 988.46
Iteration:   3740, Loss function: 5.215, Average Loss: 5.282, avg. samples / sec: 1004.29
Iteration:   3760, Loss function: 5.037, Average Loss: 5.278, avg. samples / sec: 1015.48
Iteration:   3780, Loss function: 5.025, Average Loss: 5.273, avg. samples / sec: 1050.55
Iteration:   3800, Loss function: 5.051, Average Loss: 5.269, avg. samples / sec: 980.62
Iteration:   3820, Loss function: 5.140, Average Loss: 5.264, avg. samples / sec: 1044.00
Iteration:   3840, Loss function: 4.911, Average Loss: 5.259, avg. samples / sec: 990.14
Iteration:   3860, Loss function: 4.960, Average Loss: 5.255, avg. samples / sec: 958.88
Iteration:   3880, Loss function: 5.029, Average Loss: 5.250, avg. samples / sec: 977.43
Iteration:   3900, Loss function: 5.182, Average Loss: 5.246, avg. samples / sec: 981.78
Iteration:   3920, Loss function: 5.111, Average Loss: 5.240, avg. samples / sec: 1030.81
Iteration:   3940, Loss function: 5.064, Average Loss: 5.234, avg. samples / sec: 972.33
Iteration:   3960, Loss function: 5.003, Average Loss: 5.230, avg. samples / sec: 999.53
Iteration:   3980, Loss function: 4.844, Average Loss: 5.225, avg. samples / sec: 1004.90
Iteration:   4000, Loss function: 4.932, Average Loss: 5.222, avg. samples / sec: 1000.34
Iteration:   4020, Loss function: 4.794, Average Loss: 5.217, avg. samples / sec: 908.08
Iteration:   4040, Loss function: 5.198, Average Loss: 5.214, avg. samples / sec: 927.63
Iteration:   4060, Loss function: 5.066, Average Loss: 5.209, avg. samples / sec: 1064.36
Iteration:   4080, Loss function: 5.069, Average Loss: 5.204, avg. samples / sec: 992.64
Iteration:   4100, Loss function: 5.061, Average Loss: 5.200, avg. samples / sec: 989.94
:::MLLOG {"namespace": "", "time_ms": 1639066106210, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066106211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.155, Average Loss: 5.196, avg. samples / sec: 960.85
Iteration:   4140, Loss function: 5.165, Average Loss: 5.191, avg. samples / sec: 1018.98
Iteration:   4160, Loss function: 4.952, Average Loss: 5.185, avg. samples / sec: 1021.00
Iteration:   4180, Loss function: 5.038, Average Loss: 5.179, avg. samples / sec: 998.48
Iteration:   4200, Loss function: 4.842, Average Loss: 5.175, avg. samples / sec: 1006.83
Iteration:   4220, Loss function: 4.864, Average Loss: 5.170, avg. samples / sec: 1061.02
Iteration:   4240, Loss function: 4.918, Average Loss: 5.165, avg. samples / sec: 1041.08
Iteration:   4260, Loss function: 5.139, Average Loss: 5.160, avg. samples / sec: 967.26
Iteration:   4280, Loss function: 5.010, Average Loss: 5.155, avg. samples / sec: 997.71
Iteration:   4300, Loss function: 4.623, Average Loss: 5.149, avg. samples / sec: 1059.73
Iteration:   4320, Loss function: 4.882, Average Loss: 5.144, avg. samples / sec: 1002.84
Iteration:   4340, Loss function: 4.645, Average Loss: 5.138, avg. samples / sec: 1005.50
Iteration:   4360, Loss function: 4.983, Average Loss: 5.133, avg. samples / sec: 1037.16
Iteration:   4380, Loss function: 5.094, Average Loss: 5.128, avg. samples / sec: 1026.47
Iteration:   4400, Loss function: 5.003, Average Loss: 5.124, avg. samples / sec: 1002.09
Iteration:   4420, Loss function: 4.921, Average Loss: 5.119, avg. samples / sec: 1043.92
Iteration:   4440, Loss function: 4.974, Average Loss: 5.114, avg. samples / sec: 1016.34
Iteration:   4460, Loss function: 5.202, Average Loss: 5.111, avg. samples / sec: 997.81
Iteration:   4480, Loss function: 5.035, Average Loss: 5.107, avg. samples / sec: 956.61
Iteration:   4500, Loss function: 4.839, Average Loss: 5.104, avg. samples / sec: 948.16
Iteration:   4520, Loss function: 4.652, Average Loss: 5.100, avg. samples / sec: 1063.59
Iteration:   4540, Loss function: 5.040, Average Loss: 5.094, avg. samples / sec: 1059.15
Iteration:   4560, Loss function: 4.761, Average Loss: 5.090, avg. samples / sec: 987.46
Iteration:   4580, Loss function: 4.911, Average Loss: 5.088, avg. samples / sec: 1084.71
Iteration:   4600, Loss function: 4.700, Average Loss: 5.083, avg. samples / sec: 999.86
Iteration:   4620, Loss function: 4.925, Average Loss: 5.079, avg. samples / sec: 950.69
Iteration:   4640, Loss function: 4.774, Average Loss: 5.075, avg. samples / sec: 1004.12
Iteration:   4660, Loss function: 4.784, Average Loss: 5.071, avg. samples / sec: 962.90
Iteration:   4680, Loss function: 5.069, Average Loss: 5.066, avg. samples / sec: 1011.24
Iteration:   4700, Loss function: 4.615, Average Loss: 5.061, avg. samples / sec: 1014.65
Iteration:   4720, Loss function: 4.921, Average Loss: 5.056, avg. samples / sec: 1028.63
Iteration:   4740, Loss function: 4.481, Average Loss: 5.052, avg. samples / sec: 1080.50
Iteration:   4760, Loss function: 4.541, Average Loss: 5.049, avg. samples / sec: 1004.74
Iteration:   4780, Loss function: 5.323, Average Loss: 5.045, avg. samples / sec: 1004.34
Iteration:   4800, Loss function: 4.876, Average Loss: 5.043, avg. samples / sec: 928.37
Iteration:   4820, Loss function: 4.781, Average Loss: 5.039, avg. samples / sec: 1031.32
Iteration:   4840, Loss function: 5.083, Average Loss: 5.037, avg. samples / sec: 956.40
Iteration:   4860, Loss function: 4.692, Average Loss: 5.033, avg. samples / sec: 1029.64
Iteration:   4880, Loss function: 5.086, Average Loss: 5.029, avg. samples / sec: 993.53
Iteration:   4900, Loss function: 4.563, Average Loss: 5.025, avg. samples / sec: 1068.59
Iteration:   4920, Loss function: 4.763, Average Loss: 5.022, avg. samples / sec: 1000.63
Iteration:   4940, Loss function: 4.791, Average Loss: 5.018, avg. samples / sec: 985.71
Iteration:   4960, Loss function: 4.622, Average Loss: 5.015, avg. samples / sec: 1024.96
Iteration:   4980, Loss function: 4.642, Average Loss: 5.011, avg. samples / sec: 978.36
Iteration:   5000, Loss function: 4.920, Average Loss: 5.008, avg. samples / sec: 978.48
Iteration:   5020, Loss function: 5.000, Average Loss: 5.005, avg. samples / sec: 1037.76
Iteration:   5040, Loss function: 4.802, Average Loss: 5.002, avg. samples / sec: 1044.32
Iteration:   5060, Loss function: 4.841, Average Loss: 4.999, avg. samples / sec: 1110.83
Iteration:   5080, Loss function: 4.539, Average Loss: 4.996, avg. samples / sec: 1063.28
Iteration:   5100, Loss function: 4.779, Average Loss: 4.993, avg. samples / sec: 1150.04
Iteration:   5120, Loss function: 4.547, Average Loss: 4.990, avg. samples / sec: 1211.94
Iteration:   5140, Loss function: 4.927, Average Loss: 4.986, avg. samples / sec: 1222.36
:::MLLOG {"namespace": "", "time_ms": 1639066220942, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.44 s
:::MLLOG {"namespace": "", "time_ms": 1639066253450, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066253553, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066253556, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.01s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.829, Average Loss: 4.981, avg. samples / sec: 65.77
Iteration:   5180, Loss function: 4.834, Average Loss: 4.976, avg. samples / sec: 1233.26
DONE (t=2.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10719
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21693
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09583
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19469
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13803
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20395
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10719 AP goal: 0.10000
Iteration:   5200, Loss function: 4.672, Average Loss: 4.973, avg. samples / sec: 1243.73
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10719426977859946, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259131, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:11:00 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:11:00 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065605690, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065605894, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3528416392, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3528416392
:::MLLOG {"namespace": "", "time_ms": 1639065607505, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065607506, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065607510, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065607511, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065630961, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065630961, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065633129, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065633133, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065633610, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065633611, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065633613, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.238, Average Loss: 0.022, avg. samples / sec: 4.42
Iteration:     20, Loss function: 21.042, Average Loss: 0.449, avg. samples / sec: 769.51
Iteration:     40, Loss function: 20.736, Average Loss: 0.851, avg. samples / sec: 891.87
Iteration:     60, Loss function: 20.369, Average Loss: 1.240, avg. samples / sec: 1001.30
Iteration:     80, Loss function: 19.963, Average Loss: 1.615, avg. samples / sec: 924.53
Iteration:    100, Loss function: 15.595, Average Loss: 1.944, avg. samples / sec: 926.41
Iteration:    120, Loss function: 11.573, Average Loss: 2.157, avg. samples / sec: 951.21
Iteration:    140, Loss function: 9.897, Average Loss: 2.324, avg. samples / sec: 1027.74
Iteration:    160, Loss function: 9.355, Average Loss: 2.466, avg. samples / sec: 951.97
Iteration:    180, Loss function: 9.089, Average Loss: 2.597, avg. samples / sec: 954.65
Iteration:    200, Loss function: 8.640, Average Loss: 2.722, avg. samples / sec: 941.96
Iteration:    220, Loss function: 8.658, Average Loss: 2.842, avg. samples / sec: 1004.03
Iteration:    240, Loss function: 8.498, Average Loss: 2.957, avg. samples / sec: 961.02
Iteration:    260, Loss function: 8.924, Average Loss: 3.070, avg. samples / sec: 970.63
Iteration:    280, Loss function: 8.725, Average Loss: 3.184, avg. samples / sec: 1032.91
Iteration:    300, Loss function: 8.316, Average Loss: 3.289, avg. samples / sec: 1049.45
Iteration:    320, Loss function: 8.249, Average Loss: 3.390, avg. samples / sec: 773.60
Iteration:    340, Loss function: 8.276, Average Loss: 3.487, avg. samples / sec: 1018.56
Iteration:    360, Loss function: 8.019, Average Loss: 3.579, avg. samples / sec: 1013.55
Iteration:    380, Loss function: 7.928, Average Loss: 3.669, avg. samples / sec: 1031.48
Iteration:    400, Loss function: 7.993, Average Loss: 3.756, avg. samples / sec: 982.02
Iteration:    420, Loss function: 7.612, Average Loss: 3.839, avg. samples / sec: 1011.15
Iteration:    440, Loss function: 7.855, Average Loss: 3.918, avg. samples / sec: 918.37
Iteration:    460, Loss function: 7.709, Average Loss: 3.993, avg. samples / sec: 1012.33
Iteration:    480, Loss function: 7.437, Average Loss: 4.067, avg. samples / sec: 949.73
Iteration:    500, Loss function: 7.728, Average Loss: 4.138, avg. samples / sec: 1005.17
Iteration:    520, Loss function: 7.521, Average Loss: 4.205, avg. samples / sec: 1077.98
Iteration:    540, Loss function: 7.638, Average Loss: 4.272, avg. samples / sec: 1049.02
Iteration:    560, Loss function: 7.291, Average Loss: 4.338, avg. samples / sec: 994.47
Iteration:    580, Loss function: 7.265, Average Loss: 4.399, avg. samples / sec: 968.86
Iteration:    600, Loss function: 7.229, Average Loss: 4.459, avg. samples / sec: 1016.30
Iteration:    620, Loss function: 7.064, Average Loss: 4.514, avg. samples / sec: 1002.90
Iteration:    640, Loss function: 6.973, Average Loss: 4.568, avg. samples / sec: 1047.08
Iteration:    660, Loss function: 7.165, Average Loss: 4.620, avg. samples / sec: 965.13
Iteration:    680, Loss function: 7.513, Average Loss: 4.672, avg. samples / sec: 1077.58
Iteration:    700, Loss function: 6.890, Average Loss: 4.720, avg. samples / sec: 992.34
Iteration:    720, Loss function: 7.181, Average Loss: 4.768, avg. samples / sec: 873.53
Iteration:    740, Loss function: 6.829, Average Loss: 4.813, avg. samples / sec: 1028.56
Iteration:    760, Loss function: 6.994, Average Loss: 4.856, avg. samples / sec: 979.55
Iteration:    780, Loss function: 6.671, Average Loss: 4.898, avg. samples / sec: 942.82
Iteration:    800, Loss function: 7.134, Average Loss: 4.937, avg. samples / sec: 985.94
Iteration:    820, Loss function: 6.753, Average Loss: 4.975, avg. samples / sec: 999.59
Iteration:    840, Loss function: 6.837, Average Loss: 5.011, avg. samples / sec: 823.64
Iteration:    860, Loss function: 6.977, Average Loss: 5.046, avg. samples / sec: 966.58
Iteration:    880, Loss function: 6.926, Average Loss: 5.079, avg. samples / sec: 1011.21
Iteration:    900, Loss function: 6.789, Average Loss: 5.109, avg. samples / sec: 991.98
Iteration:    920, Loss function: 6.665, Average Loss: 5.139, avg. samples / sec: 1010.02
Iteration:    940, Loss function: 6.765, Average Loss: 5.169, avg. samples / sec: 969.90
Iteration:    960, Loss function: 6.482, Average Loss: 5.197, avg. samples / sec: 991.99
Iteration:    980, Loss function: 6.524, Average Loss: 5.224, avg. samples / sec: 1017.72
Iteration:   1000, Loss function: 6.704, Average Loss: 5.249, avg. samples / sec: 986.75
Iteration:   1020, Loss function: 6.330, Average Loss: 5.272, avg. samples / sec: 1033.48
:::MLLOG {"namespace": "", "time_ms": 1639065754002, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065754004, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.585, Average Loss: 5.295, avg. samples / sec: 1003.80
Iteration:   1060, Loss function: 6.248, Average Loss: 5.318, avg. samples / sec: 995.89
Iteration:   1080, Loss function: 6.429, Average Loss: 5.341, avg. samples / sec: 1035.33
Iteration:   1100, Loss function: 6.338, Average Loss: 5.361, avg. samples / sec: 966.91
Iteration:   1120, Loss function: 6.185, Average Loss: 5.381, avg. samples / sec: 1033.31
Iteration:   1140, Loss function: 6.539, Average Loss: 5.399, avg. samples / sec: 1033.94
Iteration:   1160, Loss function: 6.093, Average Loss: 5.417, avg. samples / sec: 962.91
Iteration:   1180, Loss function: 6.126, Average Loss: 5.433, avg. samples / sec: 990.79
Iteration:   1200, Loss function: 6.103, Average Loss: 5.449, avg. samples / sec: 1034.62
Iteration:   1220, Loss function: 6.368, Average Loss: 5.465, avg. samples / sec: 1061.60
Iteration:   1240, Loss function: 6.069, Average Loss: 5.477, avg. samples / sec: 1028.71
Iteration:   1260, Loss function: 6.086, Average Loss: 5.490, avg. samples / sec: 1014.85
Iteration:   1280, Loss function: 6.102, Average Loss: 5.502, avg. samples / sec: 1018.93
Iteration:   1300, Loss function: 6.164, Average Loss: 5.515, avg. samples / sec: 963.20
Iteration:   1320, Loss function: 6.067, Average Loss: 5.528, avg. samples / sec: 995.74
Iteration:   1340, Loss function: 5.985, Average Loss: 5.537, avg. samples / sec: 1016.46
Iteration:   1360, Loss function: 6.082, Average Loss: 5.548, avg. samples / sec: 1033.71
Iteration:   1380, Loss function: 6.068, Average Loss: 5.557, avg. samples / sec: 1067.34
Iteration:   1400, Loss function: 6.233, Average Loss: 5.566, avg. samples / sec: 1048.96
Iteration:   1420, Loss function: 5.927, Average Loss: 5.574, avg. samples / sec: 1099.47
Iteration:   1440, Loss function: 6.372, Average Loss: 5.582, avg. samples / sec: 1032.07
Iteration:   1460, Loss function: 6.168, Average Loss: 5.591, avg. samples / sec: 940.55
Iteration:   1480, Loss function: 5.834, Average Loss: 5.599, avg. samples / sec: 981.93
Iteration:   1500, Loss function: 6.124, Average Loss: 5.608, avg. samples / sec: 971.11
Iteration:   1520, Loss function: 5.979, Average Loss: 5.613, avg. samples / sec: 965.65
Iteration:   1540, Loss function: 5.948, Average Loss: 5.616, avg. samples / sec: 927.65
Iteration:   1560, Loss function: 5.778, Average Loss: 5.621, avg. samples / sec: 1057.57
Iteration:   1580, Loss function: 5.718, Average Loss: 5.626, avg. samples / sec: 851.60
Iteration:   1600, Loss function: 6.321, Average Loss: 5.632, avg. samples / sec: 867.26
Iteration:   1620, Loss function: 5.745, Average Loss: 5.637, avg. samples / sec: 932.37
Iteration:   1640, Loss function: 6.006, Average Loss: 5.640, avg. samples / sec: 994.15
Iteration:   1660, Loss function: 5.888, Average Loss: 5.643, avg. samples / sec: 991.13
Iteration:   1680, Loss function: 5.703, Average Loss: 5.647, avg. samples / sec: 993.73
Iteration:   1700, Loss function: 5.406, Average Loss: 5.650, avg. samples / sec: 1027.91
Iteration:   1720, Loss function: 5.713, Average Loss: 5.652, avg. samples / sec: 1030.41
Iteration:   1740, Loss function: 5.990, Average Loss: 5.654, avg. samples / sec: 990.89
Iteration:   1760, Loss function: 5.607, Average Loss: 5.656, avg. samples / sec: 1025.46
Iteration:   1780, Loss function: 5.665, Average Loss: 5.656, avg. samples / sec: 1043.87
Iteration:   1800, Loss function: 5.661, Average Loss: 5.659, avg. samples / sec: 988.52
Iteration:   1820, Loss function: 5.872, Average Loss: 5.660, avg. samples / sec: 1036.86
Iteration:   1840, Loss function: 6.028, Average Loss: 5.661, avg. samples / sec: 1050.60
Iteration:   1860, Loss function: 5.712, Average Loss: 5.660, avg. samples / sec: 1055.25
Iteration:   1880, Loss function: 5.918, Average Loss: 5.662, avg. samples / sec: 993.55
Iteration:   1900, Loss function: 5.781, Average Loss: 5.663, avg. samples / sec: 1010.56
Iteration:   1920, Loss function: 5.619, Average Loss: 5.662, avg. samples / sec: 968.31
Iteration:   1940, Loss function: 5.853, Average Loss: 5.662, avg. samples / sec: 956.22
Iteration:   1960, Loss function: 5.468, Average Loss: 5.661, avg. samples / sec: 970.72
Iteration:   1980, Loss function: 5.632, Average Loss: 5.660, avg. samples / sec: 976.08
Iteration:   2000, Loss function: 5.542, Average Loss: 5.660, avg. samples / sec: 1046.17
Iteration:   2020, Loss function: 5.711, Average Loss: 5.659, avg. samples / sec: 1024.83
Iteration:   2040, Loss function: 5.686, Average Loss: 5.659, avg. samples / sec: 1031.25
:::MLLOG {"namespace": "", "time_ms": 1639065871381, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065871383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.504, Average Loss: 5.657, avg. samples / sec: 978.36
Iteration:   2080, Loss function: 5.158, Average Loss: 5.655, avg. samples / sec: 872.80
Iteration:   2100, Loss function: 5.485, Average Loss: 5.653, avg. samples / sec: 915.80
Iteration:   2120, Loss function: 5.284, Average Loss: 5.650, avg. samples / sec: 1020.47
Iteration:   2140, Loss function: 5.506, Average Loss: 5.647, avg. samples / sec: 1010.81
Iteration:   2160, Loss function: 5.531, Average Loss: 5.644, avg. samples / sec: 1031.69
Iteration:   2180, Loss function: 5.327, Average Loss: 5.642, avg. samples / sec: 979.03
Iteration:   2200, Loss function: 5.584, Average Loss: 5.638, avg. samples / sec: 920.71
Iteration:   2220, Loss function: 5.707, Average Loss: 5.636, avg. samples / sec: 992.45
Iteration:   2240, Loss function: 5.395, Average Loss: 5.633, avg. samples / sec: 993.67
Iteration:   2260, Loss function: 5.238, Average Loss: 5.629, avg. samples / sec: 1065.79
Iteration:   2280, Loss function: 5.380, Average Loss: 5.626, avg. samples / sec: 1021.25
Iteration:   2300, Loss function: 4.958, Average Loss: 5.624, avg. samples / sec: 1006.32
Iteration:   2320, Loss function: 5.311, Average Loss: 5.621, avg. samples / sec: 1045.89
Iteration:   2340, Loss function: 5.695, Average Loss: 5.619, avg. samples / sec: 1006.57
Iteration:   2360, Loss function: 5.436, Average Loss: 5.615, avg. samples / sec: 1011.96
Iteration:   2380, Loss function: 5.513, Average Loss: 5.612, avg. samples / sec: 1023.85
Iteration:   2400, Loss function: 5.659, Average Loss: 5.607, avg. samples / sec: 1007.66
Iteration:   2420, Loss function: 5.385, Average Loss: 5.603, avg. samples / sec: 1022.58
Iteration:   2440, Loss function: 5.366, Average Loss: 5.600, avg. samples / sec: 987.75
Iteration:   2460, Loss function: 5.292, Average Loss: 5.596, avg. samples / sec: 1038.46
Iteration:   2480, Loss function: 5.403, Average Loss: 5.592, avg. samples / sec: 999.05
Iteration:   2500, Loss function: 5.515, Average Loss: 5.588, avg. samples / sec: 1018.70
Iteration:   2520, Loss function: 5.500, Average Loss: 5.583, avg. samples / sec: 1023.78
Iteration:   2540, Loss function: 5.341, Average Loss: 5.580, avg. samples / sec: 985.60
Iteration:   2560, Loss function: 5.238, Average Loss: 5.576, avg. samples / sec: 963.38
Iteration:   2580, Loss function: 5.022, Average Loss: 5.572, avg. samples / sec: 1016.42
Iteration:   2600, Loss function: 5.322, Average Loss: 5.569, avg. samples / sec: 989.10
Iteration:   2620, Loss function: 5.569, Average Loss: 5.565, avg. samples / sec: 979.96
Iteration:   2640, Loss function: 5.328, Average Loss: 5.562, avg. samples / sec: 972.67
Iteration:   2660, Loss function: 5.261, Average Loss: 5.559, avg. samples / sec: 1097.06
Iteration:   2680, Loss function: 5.205, Average Loss: 5.555, avg. samples / sec: 1028.84
Iteration:   2700, Loss function: 5.232, Average Loss: 5.550, avg. samples / sec: 1037.82
Iteration:   2720, Loss function: 5.264, Average Loss: 5.545, avg. samples / sec: 1001.58
Iteration:   2740, Loss function: 4.988, Average Loss: 5.540, avg. samples / sec: 1020.31
Iteration:   2760, Loss function: 5.106, Average Loss: 5.535, avg. samples / sec: 1025.85
Iteration:   2780, Loss function: 5.354, Average Loss: 5.531, avg. samples / sec: 978.81
Iteration:   2800, Loss function: 5.286, Average Loss: 5.526, avg. samples / sec: 978.46
Iteration:   2820, Loss function: 5.448, Average Loss: 5.522, avg. samples / sec: 928.30
Iteration:   2840, Loss function: 5.412, Average Loss: 5.517, avg. samples / sec: 1010.79
Iteration:   2860, Loss function: 5.195, Average Loss: 5.512, avg. samples / sec: 970.38
Iteration:   2880, Loss function: 5.431, Average Loss: 5.508, avg. samples / sec: 1052.64
Iteration:   2900, Loss function: 4.948, Average Loss: 5.503, avg. samples / sec: 1021.78
Iteration:   2920, Loss function: 5.242, Average Loss: 5.498, avg. samples / sec: 980.33
Iteration:   2940, Loss function: 5.198, Average Loss: 5.494, avg. samples / sec: 989.46
Iteration:   2960, Loss function: 5.447, Average Loss: 5.489, avg. samples / sec: 1014.31
Iteration:   2980, Loss function: 5.210, Average Loss: 5.486, avg. samples / sec: 1001.30
Iteration:   3000, Loss function: 5.419, Average Loss: 5.480, avg. samples / sec: 1003.19
Iteration:   3020, Loss function: 5.275, Average Loss: 5.474, avg. samples / sec: 1019.62
Iteration:   3040, Loss function: 5.225, Average Loss: 5.468, avg. samples / sec: 1074.26
Iteration:   3060, Loss function: 5.061, Average Loss: 5.463, avg. samples / sec: 924.65
Iteration:   3080, Loss function: 4.892, Average Loss: 5.456, avg. samples / sec: 980.96
:::MLLOG {"namespace": "", "time_ms": 1639065988669, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065988671, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.055, Average Loss: 5.452, avg. samples / sec: 985.96
Iteration:   3120, Loss function: 5.157, Average Loss: 5.446, avg. samples / sec: 1078.93
Iteration:   3140, Loss function: 4.989, Average Loss: 5.439, avg. samples / sec: 1032.05
Iteration:   3160, Loss function: 5.571, Average Loss: 5.434, avg. samples / sec: 1048.12
Iteration:   3180, Loss function: 4.801, Average Loss: 5.428, avg. samples / sec: 1063.28
Iteration:   3200, Loss function: 5.197, Average Loss: 5.423, avg. samples / sec: 983.51
Iteration:   3220, Loss function: 5.249, Average Loss: 5.417, avg. samples / sec: 1009.14
Iteration:   3240, Loss function: 5.416, Average Loss: 5.411, avg. samples / sec: 1037.37
Iteration:   3260, Loss function: 5.206, Average Loss: 5.405, avg. samples / sec: 942.99
Iteration:   3280, Loss function: 4.879, Average Loss: 5.400, avg. samples / sec: 1039.28
Iteration:   3300, Loss function: 4.971, Average Loss: 5.393, avg. samples / sec: 1014.94
Iteration:   3320, Loss function: 5.144, Average Loss: 5.388, avg. samples / sec: 972.50
Iteration:   3340, Loss function: 5.140, Average Loss: 5.383, avg. samples / sec: 1069.73
Iteration:   3360, Loss function: 5.315, Average Loss: 5.377, avg. samples / sec: 880.26
Iteration:   3380, Loss function: 5.236, Average Loss: 5.370, avg. samples / sec: 976.46
Iteration:   3400, Loss function: 4.859, Average Loss: 5.365, avg. samples / sec: 992.63
Iteration:   3420, Loss function: 5.245, Average Loss: 5.360, avg. samples / sec: 1020.96
Iteration:   3440, Loss function: 4.937, Average Loss: 5.355, avg. samples / sec: 981.81
Iteration:   3460, Loss function: 5.213, Average Loss: 5.350, avg. samples / sec: 960.54
Iteration:   3480, Loss function: 5.235, Average Loss: 5.345, avg. samples / sec: 1049.51
Iteration:   3500, Loss function: 5.178, Average Loss: 5.341, avg. samples / sec: 1042.31
Iteration:   3520, Loss function: 4.902, Average Loss: 5.338, avg. samples / sec: 1016.98
Iteration:   3540, Loss function: 5.011, Average Loss: 5.333, avg. samples / sec: 1046.89
Iteration:   3560, Loss function: 4.821, Average Loss: 5.329, avg. samples / sec: 1009.19
Iteration:   3580, Loss function: 5.229, Average Loss: 5.325, avg. samples / sec: 990.67
Iteration:   3600, Loss function: 5.264, Average Loss: 5.319, avg. samples / sec: 927.16
Iteration:   3620, Loss function: 4.792, Average Loss: 5.314, avg. samples / sec: 983.86
Iteration:   3640, Loss function: 4.790, Average Loss: 5.309, avg. samples / sec: 1011.53
Iteration:   3660, Loss function: 5.055, Average Loss: 5.304, avg. samples / sec: 984.56
Iteration:   3680, Loss function: 4.975, Average Loss: 5.297, avg. samples / sec: 1018.59
Iteration:   3700, Loss function: 5.029, Average Loss: 5.292, avg. samples / sec: 964.95
Iteration:   3720, Loss function: 5.027, Average Loss: 5.287, avg. samples / sec: 988.46
Iteration:   3740, Loss function: 5.215, Average Loss: 5.282, avg. samples / sec: 1004.29
Iteration:   3760, Loss function: 5.037, Average Loss: 5.278, avg. samples / sec: 1015.48
Iteration:   3780, Loss function: 5.025, Average Loss: 5.273, avg. samples / sec: 1050.55
Iteration:   3800, Loss function: 5.051, Average Loss: 5.269, avg. samples / sec: 980.62
Iteration:   3820, Loss function: 5.140, Average Loss: 5.264, avg. samples / sec: 1044.00
Iteration:   3840, Loss function: 4.911, Average Loss: 5.259, avg. samples / sec: 990.14
Iteration:   3860, Loss function: 4.960, Average Loss: 5.255, avg. samples / sec: 958.88
Iteration:   3880, Loss function: 5.029, Average Loss: 5.250, avg. samples / sec: 977.43
Iteration:   3900, Loss function: 5.182, Average Loss: 5.246, avg. samples / sec: 981.78
Iteration:   3920, Loss function: 5.111, Average Loss: 5.240, avg. samples / sec: 1030.81
Iteration:   3940, Loss function: 5.064, Average Loss: 5.234, avg. samples / sec: 972.33
Iteration:   3960, Loss function: 5.003, Average Loss: 5.230, avg. samples / sec: 999.53
Iteration:   3980, Loss function: 4.844, Average Loss: 5.225, avg. samples / sec: 1004.90
Iteration:   4000, Loss function: 4.932, Average Loss: 5.222, avg. samples / sec: 1000.34
Iteration:   4020, Loss function: 4.794, Average Loss: 5.217, avg. samples / sec: 908.08
Iteration:   4040, Loss function: 5.198, Average Loss: 5.214, avg. samples / sec: 927.63
Iteration:   4060, Loss function: 5.066, Average Loss: 5.209, avg. samples / sec: 1064.36
Iteration:   4080, Loss function: 5.069, Average Loss: 5.204, avg. samples / sec: 992.64
Iteration:   4100, Loss function: 5.061, Average Loss: 5.200, avg. samples / sec: 989.94
:::MLLOG {"namespace": "", "time_ms": 1639066106210, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066106211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.155, Average Loss: 5.196, avg. samples / sec: 960.85
Iteration:   4140, Loss function: 5.165, Average Loss: 5.191, avg. samples / sec: 1018.98
Iteration:   4160, Loss function: 4.952, Average Loss: 5.185, avg. samples / sec: 1021.00
Iteration:   4180, Loss function: 5.038, Average Loss: 5.179, avg. samples / sec: 998.48
Iteration:   4200, Loss function: 4.842, Average Loss: 5.175, avg. samples / sec: 1006.83
Iteration:   4220, Loss function: 4.864, Average Loss: 5.170, avg. samples / sec: 1061.02
Iteration:   4240, Loss function: 4.918, Average Loss: 5.165, avg. samples / sec: 1041.08
Iteration:   4260, Loss function: 5.139, Average Loss: 5.160, avg. samples / sec: 967.26
Iteration:   4280, Loss function: 5.010, Average Loss: 5.155, avg. samples / sec: 997.71
Iteration:   4300, Loss function: 4.623, Average Loss: 5.149, avg. samples / sec: 1059.73
Iteration:   4320, Loss function: 4.882, Average Loss: 5.144, avg. samples / sec: 1002.84
Iteration:   4340, Loss function: 4.645, Average Loss: 5.138, avg. samples / sec: 1005.50
Iteration:   4360, Loss function: 4.983, Average Loss: 5.133, avg. samples / sec: 1037.16
Iteration:   4380, Loss function: 5.094, Average Loss: 5.128, avg. samples / sec: 1026.47
Iteration:   4400, Loss function: 5.003, Average Loss: 5.124, avg. samples / sec: 1002.09
Iteration:   4420, Loss function: 4.921, Average Loss: 5.119, avg. samples / sec: 1043.92
Iteration:   4440, Loss function: 4.974, Average Loss: 5.114, avg. samples / sec: 1016.34
Iteration:   4460, Loss function: 5.202, Average Loss: 5.111, avg. samples / sec: 997.81
Iteration:   4480, Loss function: 5.035, Average Loss: 5.107, avg. samples / sec: 956.61
Iteration:   4500, Loss function: 4.839, Average Loss: 5.104, avg. samples / sec: 948.16
Iteration:   4520, Loss function: 4.652, Average Loss: 5.100, avg. samples / sec: 1063.59
Iteration:   4540, Loss function: 5.040, Average Loss: 5.094, avg. samples / sec: 1059.15
Iteration:   4560, Loss function: 4.761, Average Loss: 5.090, avg. samples / sec: 987.46
Iteration:   4580, Loss function: 4.911, Average Loss: 5.088, avg. samples / sec: 1084.71
Iteration:   4600, Loss function: 4.700, Average Loss: 5.083, avg. samples / sec: 999.86
Iteration:   4620, Loss function: 4.925, Average Loss: 5.079, avg. samples / sec: 950.69
Iteration:   4640, Loss function: 4.774, Average Loss: 5.075, avg. samples / sec: 1004.12
Iteration:   4660, Loss function: 4.784, Average Loss: 5.071, avg. samples / sec: 962.90
Iteration:   4680, Loss function: 5.069, Average Loss: 5.066, avg. samples / sec: 1011.24
Iteration:   4700, Loss function: 4.615, Average Loss: 5.061, avg. samples / sec: 1014.65
Iteration:   4720, Loss function: 4.921, Average Loss: 5.056, avg. samples / sec: 1028.63
Iteration:   4740, Loss function: 4.481, Average Loss: 5.052, avg. samples / sec: 1080.50
Iteration:   4760, Loss function: 4.541, Average Loss: 5.049, avg. samples / sec: 1004.74
Iteration:   4780, Loss function: 5.323, Average Loss: 5.045, avg. samples / sec: 1004.34
Iteration:   4800, Loss function: 4.876, Average Loss: 5.043, avg. samples / sec: 928.37
Iteration:   4820, Loss function: 4.781, Average Loss: 5.039, avg. samples / sec: 1031.32
Iteration:   4840, Loss function: 5.083, Average Loss: 5.037, avg. samples / sec: 956.40
Iteration:   4860, Loss function: 4.692, Average Loss: 5.033, avg. samples / sec: 1029.64
Iteration:   4880, Loss function: 5.086, Average Loss: 5.029, avg. samples / sec: 993.53
Iteration:   4900, Loss function: 4.563, Average Loss: 5.025, avg. samples / sec: 1068.59
Iteration:   4920, Loss function: 4.763, Average Loss: 5.022, avg. samples / sec: 1000.63
Iteration:   4940, Loss function: 4.791, Average Loss: 5.018, avg. samples / sec: 985.71
Iteration:   4960, Loss function: 4.622, Average Loss: 5.015, avg. samples / sec: 1024.96
Iteration:   4980, Loss function: 4.642, Average Loss: 5.011, avg. samples / sec: 978.36
Iteration:   5000, Loss function: 4.920, Average Loss: 5.008, avg. samples / sec: 978.48
Iteration:   5020, Loss function: 5.000, Average Loss: 5.005, avg. samples / sec: 1037.76
Iteration:   5040, Loss function: 4.802, Average Loss: 5.002, avg. samples / sec: 1044.32
Iteration:   5060, Loss function: 4.841, Average Loss: 4.999, avg. samples / sec: 1110.83
Iteration:   5080, Loss function: 4.539, Average Loss: 4.996, avg. samples / sec: 1063.28
Iteration:   5100, Loss function: 4.779, Average Loss: 4.993, avg. samples / sec: 1150.04
Iteration:   5120, Loss function: 4.547, Average Loss: 4.990, avg. samples / sec: 1211.94
Iteration:   5140, Loss function: 4.927, Average Loss: 4.986, avg. samples / sec: 1222.36
:::MLLOG {"namespace": "", "time_ms": 1639066220942, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.44 s
:::MLLOG {"namespace": "", "time_ms": 1639066253450, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066253553, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066253556, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.01s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.829, Average Loss: 4.981, avg. samples / sec: 65.77
Iteration:   5180, Loss function: 4.834, Average Loss: 4.976, avg. samples / sec: 1233.26
DONE (t=2.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10719
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21693
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09583
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19469
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13803
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20395
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21661
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10719 AP goal: 0.10000
Iteration:   5200, Loss function: 4.672, Average Loss: 4.973, avg. samples / sec: 1243.73
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10719426977859946, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259016, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066259131, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066260
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:11:00 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:53 PM'
START TIMING RUN WAS 2021-12-09 03:59:53 PM
ENDING TIMING RUN AT 2021-12-09 04:11:00 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:11:00 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
+ result=667
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,667,nvidia,2021-12-09 03:59:53 PM
ALL FINISHED GPU: 1 x full x 8 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,667,nvidia,2021-12-09 03:59:53 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
