+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-kl2ts.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-kl2ts.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-kl2ts.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-55b69871-247e-9b99-a60a-7daca59a4108
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-55b69871-247e-9b99-a60a-7daca59a4108).
+ echo 'No MIG GPU available, using the full GPUs (GPU-55b69871-247e-9b99-a60a-7daca59a4108).'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065586
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:46 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:46 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:46 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:46 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-kl2ts to the sync file ...
run-ssd--1-kl2ts Found 4 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
run-ssd--1-kl2ts Found 5 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
run-ssd--1-kl2ts Found 7 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
     7	run-ssd--1-fv55t
Thu Dec  9 16:00:01 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065603691, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603883, "event_type": "POINT_IN_TIME", "key": "seed", "value": 104724772, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 104724772
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065605663, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065605663, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065629426, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065629426, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065631313, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065631314, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065631730, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065631730, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065631732, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.130, Average Loss: 0.023, avg. samples / sec: 4.42
Iteration:     20, Loss function: 21.178, Average Loss: 0.459, avg. samples / sec: 842.66
Iteration:     40, Loss function: 20.648, Average Loss: 0.861, avg. samples / sec: 923.58
Iteration:     60, Loss function: 20.493, Average Loss: 1.250, avg. samples / sec: 962.04
Iteration:     80, Loss function: 19.972, Average Loss: 1.625, avg. samples / sec: 930.54
Iteration:    100, Loss function: 15.817, Average Loss: 1.957, avg. samples / sec: 939.00
Iteration:    120, Loss function: 11.111, Average Loss: 2.171, avg. samples / sec: 980.24
Iteration:    140, Loss function: 9.674, Average Loss: 2.330, avg. samples / sec: 911.54
Iteration:    160, Loss function: 9.066, Average Loss: 2.468, avg. samples / sec: 926.84
Iteration:    180, Loss function: 8.839, Average Loss: 2.596, avg. samples / sec: 932.52
Iteration:    200, Loss function: 8.668, Average Loss: 2.719, avg. samples / sec: 994.95
Iteration:    220, Loss function: 8.322, Average Loss: 2.840, avg. samples / sec: 1005.24
Iteration:    240, Loss function: 8.815, Average Loss: 2.958, avg. samples / sec: 992.84
Iteration:    260, Loss function: 8.625, Average Loss: 3.071, avg. samples / sec: 999.98
Iteration:    280, Loss function: 8.404, Average Loss: 3.181, avg. samples / sec: 943.11
Iteration:    300, Loss function: 8.308, Average Loss: 3.283, avg. samples / sec: 1035.83
Iteration:    320, Loss function: 8.386, Average Loss: 3.382, avg. samples / sec: 717.50
Iteration:    340, Loss function: 8.182, Average Loss: 3.479, avg. samples / sec: 933.11
Iteration:    360, Loss function: 8.000, Average Loss: 3.573, avg. samples / sec: 1019.04
Iteration:    380, Loss function: 7.853, Average Loss: 3.663, avg. samples / sec: 987.44
Iteration:    400, Loss function: 8.049, Average Loss: 3.746, avg. samples / sec: 962.56
Iteration:    420, Loss function: 7.597, Average Loss: 3.826, avg. samples / sec: 1021.09
Iteration:    440, Loss function: 7.887, Average Loss: 3.906, avg. samples / sec: 1019.14
Iteration:    460, Loss function: 7.781, Average Loss: 3.982, avg. samples / sec: 1100.71
Iteration:    480, Loss function: 7.566, Average Loss: 4.054, avg. samples / sec: 1061.04
Iteration:    500, Loss function: 7.715, Average Loss: 4.126, avg. samples / sec: 992.60
Iteration:    520, Loss function: 7.370, Average Loss: 4.193, avg. samples / sec: 942.54
Iteration:    540, Loss function: 7.329, Average Loss: 4.257, avg. samples / sec: 1017.63
Iteration:    560, Loss function: 7.253, Average Loss: 4.319, avg. samples / sec: 1014.41
Iteration:    580, Loss function: 7.216, Average Loss: 4.380, avg. samples / sec: 979.30
Iteration:    600, Loss function: 7.184, Average Loss: 4.438, avg. samples / sec: 1018.51
Iteration:    620, Loss function: 7.140, Average Loss: 4.493, avg. samples / sec: 997.18
Iteration:    640, Loss function: 6.892, Average Loss: 4.550, avg. samples / sec: 966.65
Iteration:    660, Loss function: 7.137, Average Loss: 4.603, avg. samples / sec: 948.38
Iteration:    680, Loss function: 7.229, Average Loss: 4.653, avg. samples / sec: 993.59
Iteration:    700, Loss function: 6.785, Average Loss: 4.701, avg. samples / sec: 985.59
Iteration:    720, Loss function: 7.104, Average Loss: 4.749, avg. samples / sec: 1070.85
Iteration:    740, Loss function: 6.798, Average Loss: 4.794, avg. samples / sec: 1057.47
Iteration:    760, Loss function: 7.215, Average Loss: 4.838, avg. samples / sec: 964.25
Iteration:    780, Loss function: 6.733, Average Loss: 4.879, avg. samples / sec: 1013.73
Iteration:    800, Loss function: 7.135, Average Loss: 4.918, avg. samples / sec: 964.43
Iteration:    820, Loss function: 6.849, Average Loss: 4.956, avg. samples / sec: 981.05
Iteration:    840, Loss function: 6.670, Average Loss: 4.991, avg. samples / sec: 953.37
Iteration:    860, Loss function: 6.781, Average Loss: 5.024, avg. samples / sec: 1084.03
Iteration:    880, Loss function: 6.717, Average Loss: 5.057, avg. samples / sec: 1012.70
Iteration:    900, Loss function: 6.813, Average Loss: 5.088, avg. samples / sec: 1024.95
Iteration:    920, Loss function: 6.765, Average Loss: 5.117, avg. samples / sec: 964.58
Iteration:    940, Loss function: 6.725, Average Loss: 5.146, avg. samples / sec: 930.40
Iteration:    960, Loss function: 6.461, Average Loss: 5.174, avg. samples / sec: 968.71
Iteration:    980, Loss function: 6.609, Average Loss: 5.202, avg. samples / sec: 1014.92
Iteration:   1000, Loss function: 6.679, Average Loss: 5.227, avg. samples / sec: 973.64
Iteration:   1020, Loss function: 6.159, Average Loss: 5.250, avg. samples / sec: 1029.56
:::MLLOG {"namespace": "", "time_ms": 1639065751978, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065751980, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.637, Average Loss: 5.273, avg. samples / sec: 951.88
Iteration:   1060, Loss function: 6.308, Average Loss: 5.297, avg. samples / sec: 1010.01
Iteration:   1080, Loss function: 6.336, Average Loss: 5.319, avg. samples / sec: 974.20
Iteration:   1100, Loss function: 6.134, Average Loss: 5.338, avg. samples / sec: 971.63
Iteration:   1120, Loss function: 6.144, Average Loss: 5.357, avg. samples / sec: 1001.10
Iteration:   1140, Loss function: 6.307, Average Loss: 5.375, avg. samples / sec: 1034.70
Iteration:   1160, Loss function: 6.171, Average Loss: 5.391, avg. samples / sec: 1018.22
Iteration:   1180, Loss function: 6.224, Average Loss: 5.407, avg. samples / sec: 964.33
Iteration:   1200, Loss function: 6.191, Average Loss: 5.423, avg. samples / sec: 1049.62
Iteration:   1220, Loss function: 6.258, Average Loss: 5.439, avg. samples / sec: 1022.14
Iteration:   1240, Loss function: 6.026, Average Loss: 5.452, avg. samples / sec: 1051.91
Iteration:   1260, Loss function: 6.048, Average Loss: 5.464, avg. samples / sec: 954.83
Iteration:   1280, Loss function: 5.842, Average Loss: 5.477, avg. samples / sec: 1049.34
Iteration:   1300, Loss function: 6.137, Average Loss: 5.489, avg. samples / sec: 1000.59
Iteration:   1320, Loss function: 6.060, Average Loss: 5.501, avg. samples / sec: 1052.79
Iteration:   1340, Loss function: 5.905, Average Loss: 5.512, avg. samples / sec: 1075.39
Iteration:   1360, Loss function: 6.159, Average Loss: 5.523, avg. samples / sec: 1008.93
Iteration:   1380, Loss function: 6.197, Average Loss: 5.534, avg. samples / sec: 1042.98
Iteration:   1400, Loss function: 6.194, Average Loss: 5.542, avg. samples / sec: 981.53
Iteration:   1420, Loss function: 5.847, Average Loss: 5.551, avg. samples / sec: 1061.19
Iteration:   1440, Loss function: 6.364, Average Loss: 5.559, avg. samples / sec: 967.44
Iteration:   1460, Loss function: 6.082, Average Loss: 5.568, avg. samples / sec: 1023.38
Iteration:   1480, Loss function: 5.782, Average Loss: 5.576, avg. samples / sec: 1058.01
Iteration:   1500, Loss function: 5.942, Average Loss: 5.584, avg. samples / sec: 1041.83
Iteration:   1520, Loss function: 6.125, Average Loss: 5.589, avg. samples / sec: 962.48
Iteration:   1540, Loss function: 5.941, Average Loss: 5.594, avg. samples / sec: 1007.65
Iteration:   1560, Loss function: 5.623, Average Loss: 5.598, avg. samples / sec: 1012.63
Iteration:   1580, Loss function: 5.726, Average Loss: 5.604, avg. samples / sec: 987.02
Iteration:   1600, Loss function: 6.260, Average Loss: 5.610, avg. samples / sec: 1030.84
Iteration:   1620, Loss function: 5.817, Average Loss: 5.615, avg. samples / sec: 1005.53
Iteration:   1640, Loss function: 5.893, Average Loss: 5.618, avg. samples / sec: 988.69
Iteration:   1660, Loss function: 5.890, Average Loss: 5.623, avg. samples / sec: 1042.49
Iteration:   1680, Loss function: 5.688, Average Loss: 5.626, avg. samples / sec: 1013.23
Iteration:   1700, Loss function: 5.380, Average Loss: 5.629, avg. samples / sec: 999.67
Iteration:   1720, Loss function: 5.718, Average Loss: 5.631, avg. samples / sec: 993.59
Iteration:   1740, Loss function: 5.920, Average Loss: 5.634, avg. samples / sec: 1034.75
Iteration:   1760, Loss function: 5.492, Average Loss: 5.636, avg. samples / sec: 1046.43
Iteration:   1780, Loss function: 5.579, Average Loss: 5.637, avg. samples / sec: 1023.91
Iteration:   1800, Loss function: 5.598, Average Loss: 5.640, avg. samples / sec: 1056.75
Iteration:   1820, Loss function: 5.878, Average Loss: 5.641, avg. samples / sec: 998.13
Iteration:   1840, Loss function: 5.954, Average Loss: 5.642, avg. samples / sec: 1025.02
Iteration:   1860, Loss function: 5.608, Average Loss: 5.641, avg. samples / sec: 925.68
Iteration:   1880, Loss function: 5.946, Average Loss: 5.643, avg. samples / sec: 1060.30
Iteration:   1900, Loss function: 5.949, Average Loss: 5.643, avg. samples / sec: 1002.28
Iteration:   1920, Loss function: 5.686, Average Loss: 5.642, avg. samples / sec: 1041.38
Iteration:   1940, Loss function: 5.748, Average Loss: 5.642, avg. samples / sec: 1025.35
Iteration:   1960, Loss function: 5.612, Average Loss: 5.642, avg. samples / sec: 1049.64
Iteration:   1980, Loss function: 5.704, Average Loss: 5.641, avg. samples / sec: 994.78
Iteration:   2000, Loss function: 5.559, Average Loss: 5.639, avg. samples / sec: 1001.95
Iteration:   2020, Loss function: 5.580, Average Loss: 5.637, avg. samples / sec: 1032.91
Iteration:   2040, Loss function: 5.593, Average Loss: 5.637, avg. samples / sec: 1019.71
:::MLLOG {"namespace": "", "time_ms": 1639065867510, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065867512, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.628, Average Loss: 5.636, avg. samples / sec: 1061.26
Iteration:   2080, Loss function: 5.196, Average Loss: 5.634, avg. samples / sec: 1002.73
Iteration:   2100, Loss function: 5.780, Average Loss: 5.633, avg. samples / sec: 969.12
Iteration:   2120, Loss function: 5.338, Average Loss: 5.631, avg. samples / sec: 990.02
Iteration:   2140, Loss function: 5.390, Average Loss: 5.627, avg. samples / sec: 1001.46
Iteration:   2160, Loss function: 5.483, Average Loss: 5.625, avg. samples / sec: 1001.45
Iteration:   2180, Loss function: 5.384, Average Loss: 5.624, avg. samples / sec: 1056.03
Iteration:   2200, Loss function: 5.453, Average Loss: 5.620, avg. samples / sec: 1041.95
Iteration:   2220, Loss function: 5.584, Average Loss: 5.618, avg. samples / sec: 956.40
Iteration:   2240, Loss function: 5.504, Average Loss: 5.615, avg. samples / sec: 977.75
Iteration:   2260, Loss function: 5.371, Average Loss: 5.612, avg. samples / sec: 997.38
Iteration:   2280, Loss function: 5.210, Average Loss: 5.609, avg. samples / sec: 1032.13
Iteration:   2300, Loss function: 5.161, Average Loss: 5.607, avg. samples / sec: 976.91
Iteration:   2320, Loss function: 5.390, Average Loss: 5.604, avg. samples / sec: 1021.96
Iteration:   2340, Loss function: 5.563, Average Loss: 5.602, avg. samples / sec: 1002.82
Iteration:   2360, Loss function: 5.367, Average Loss: 5.599, avg. samples / sec: 965.85
Iteration:   2380, Loss function: 5.276, Average Loss: 5.595, avg. samples / sec: 1040.42
Iteration:   2400, Loss function: 5.412, Average Loss: 5.590, avg. samples / sec: 1023.71
Iteration:   2420, Loss function: 5.394, Average Loss: 5.586, avg. samples / sec: 1024.32
Iteration:   2440, Loss function: 5.441, Average Loss: 5.582, avg. samples / sec: 1009.79
Iteration:   2460, Loss function: 5.210, Average Loss: 5.578, avg. samples / sec: 1014.62
Iteration:   2480, Loss function: 5.412, Average Loss: 5.575, avg. samples / sec: 1012.84
Iteration:   2500, Loss function: 5.526, Average Loss: 5.572, avg. samples / sec: 945.73
Iteration:   2520, Loss function: 5.202, Average Loss: 5.566, avg. samples / sec: 996.07
Iteration:   2540, Loss function: 5.421, Average Loss: 5.563, avg. samples / sec: 1074.35
Iteration:   2560, Loss function: 5.409, Average Loss: 5.561, avg. samples / sec: 957.15
Iteration:   2580, Loss function: 5.388, Average Loss: 5.558, avg. samples / sec: 1045.68
Iteration:   2600, Loss function: 5.446, Average Loss: 5.556, avg. samples / sec: 1024.68
Iteration:   2620, Loss function: 5.427, Average Loss: 5.551, avg. samples / sec: 1034.19
Iteration:   2640, Loss function: 5.069, Average Loss: 5.548, avg. samples / sec: 1015.41
Iteration:   2660, Loss function: 5.229, Average Loss: 5.545, avg. samples / sec: 908.03
Iteration:   2680, Loss function: 5.124, Average Loss: 5.542, avg. samples / sec: 906.83
Iteration:   2700, Loss function: 5.142, Average Loss: 5.538, avg. samples / sec: 1030.21
Iteration:   2720, Loss function: 5.399, Average Loss: 5.534, avg. samples / sec: 1017.11
Iteration:   2740, Loss function: 5.000, Average Loss: 5.529, avg. samples / sec: 1002.95
Iteration:   2760, Loss function: 5.155, Average Loss: 5.523, avg. samples / sec: 952.89
Iteration:   2780, Loss function: 5.503, Average Loss: 5.520, avg. samples / sec: 1042.50
Iteration:   2800, Loss function: 5.099, Average Loss: 5.516, avg. samples / sec: 1024.31
Iteration:   2820, Loss function: 5.458, Average Loss: 5.511, avg. samples / sec: 1042.38
Iteration:   2840, Loss function: 5.158, Average Loss: 5.507, avg. samples / sec: 1094.57
Iteration:   2860, Loss function: 5.083, Average Loss: 5.501, avg. samples / sec: 1010.59
Iteration:   2880, Loss function: 5.212, Average Loss: 5.496, avg. samples / sec: 987.26
Iteration:   2900, Loss function: 5.006, Average Loss: 5.491, avg. samples / sec: 1090.37
Iteration:   2920, Loss function: 5.214, Average Loss: 5.485, avg. samples / sec: 969.89
Iteration:   2940, Loss function: 4.927, Average Loss: 5.481, avg. samples / sec: 1071.44
Iteration:   2960, Loss function: 5.524, Average Loss: 5.478, avg. samples / sec: 1029.92
Iteration:   2980, Loss function: 5.337, Average Loss: 5.475, avg. samples / sec: 1047.36
Iteration:   3000, Loss function: 5.263, Average Loss: 5.470, avg. samples / sec: 956.95
Iteration:   3020, Loss function: 5.227, Average Loss: 5.463, avg. samples / sec: 1051.23
Iteration:   3040, Loss function: 5.145, Average Loss: 5.458, avg. samples / sec: 989.55
Iteration:   3060, Loss function: 5.042, Average Loss: 5.453, avg. samples / sec: 992.06
Iteration:   3080, Loss function: 4.956, Average Loss: 5.448, avg. samples / sec: 920.06
:::MLLOG {"namespace": "", "time_ms": 1639065984189, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065984192, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.241, Average Loss: 5.443, avg. samples / sec: 989.29
Iteration:   3120, Loss function: 5.247, Average Loss: 5.437, avg. samples / sec: 1062.68
Iteration:   3140, Loss function: 5.108, Average Loss: 5.431, avg. samples / sec: 1029.50
Iteration:   3160, Loss function: 5.471, Average Loss: 5.426, avg. samples / sec: 984.88
Iteration:   3180, Loss function: 5.061, Average Loss: 5.422, avg. samples / sec: 971.44
Iteration:   3200, Loss function: 5.333, Average Loss: 5.416, avg. samples / sec: 978.12
Iteration:   3220, Loss function: 5.135, Average Loss: 5.411, avg. samples / sec: 1023.01
Iteration:   3240, Loss function: 5.026, Average Loss: 5.406, avg. samples / sec: 1035.42
Iteration:   3260, Loss function: 4.996, Average Loss: 5.400, avg. samples / sec: 1029.03
Iteration:   3280, Loss function: 4.696, Average Loss: 5.394, avg. samples / sec: 1023.94
Iteration:   3300, Loss function: 4.891, Average Loss: 5.388, avg. samples / sec: 1019.35
Iteration:   3320, Loss function: 5.118, Average Loss: 5.383, avg. samples / sec: 1058.75
Iteration:   3340, Loss function: 5.045, Average Loss: 5.378, avg. samples / sec: 967.06
Iteration:   3360, Loss function: 5.301, Average Loss: 5.372, avg. samples / sec: 1039.15
Iteration:   3380, Loss function: 5.259, Average Loss: 5.365, avg. samples / sec: 992.99
Iteration:   3400, Loss function: 4.683, Average Loss: 5.361, avg. samples / sec: 977.78
Iteration:   3420, Loss function: 5.246, Average Loss: 5.355, avg. samples / sec: 995.75
Iteration:   3440, Loss function: 4.900, Average Loss: 5.350, avg. samples / sec: 1016.82
Iteration:   3460, Loss function: 5.344, Average Loss: 5.346, avg. samples / sec: 1036.53
Iteration:   3480, Loss function: 5.094, Average Loss: 5.341, avg. samples / sec: 1030.24
Iteration:   3500, Loss function: 5.180, Average Loss: 5.336, avg. samples / sec: 997.14
Iteration:   3520, Loss function: 5.132, Average Loss: 5.333, avg. samples / sec: 1055.24
Iteration:   3540, Loss function: 5.143, Average Loss: 5.328, avg. samples / sec: 996.79
Iteration:   3560, Loss function: 4.741, Average Loss: 5.324, avg. samples / sec: 1095.36
Iteration:   3580, Loss function: 5.147, Average Loss: 5.320, avg. samples / sec: 994.61
Iteration:   3600, Loss function: 5.207, Average Loss: 5.314, avg. samples / sec: 986.99
Iteration:   3620, Loss function: 4.809, Average Loss: 5.310, avg. samples / sec: 979.72
Iteration:   3640, Loss function: 4.672, Average Loss: 5.305, avg. samples / sec: 1058.56
Iteration:   3660, Loss function: 5.191, Average Loss: 5.300, avg. samples / sec: 1010.14
Iteration:   3680, Loss function: 5.401, Average Loss: 5.294, avg. samples / sec: 1027.97
Iteration:   3700, Loss function: 4.911, Average Loss: 5.289, avg. samples / sec: 1020.71
Iteration:   3720, Loss function: 5.192, Average Loss: 5.284, avg. samples / sec: 1021.57
Iteration:   3740, Loss function: 5.152, Average Loss: 5.280, avg. samples / sec: 979.18
Iteration:   3760, Loss function: 5.200, Average Loss: 5.275, avg. samples / sec: 1043.89
Iteration:   3780, Loss function: 4.984, Average Loss: 5.271, avg. samples / sec: 951.00
Iteration:   3800, Loss function: 5.019, Average Loss: 5.267, avg. samples / sec: 986.00
Iteration:   3820, Loss function: 5.044, Average Loss: 5.262, avg. samples / sec: 1021.42
Iteration:   3840, Loss function: 4.931, Average Loss: 5.258, avg. samples / sec: 962.14
Iteration:   3860, Loss function: 4.847, Average Loss: 5.253, avg. samples / sec: 1093.52
Iteration:   3880, Loss function: 4.934, Average Loss: 5.247, avg. samples / sec: 1076.64
Iteration:   3900, Loss function: 5.099, Average Loss: 5.242, avg. samples / sec: 1059.54
Iteration:   3920, Loss function: 5.007, Average Loss: 5.237, avg. samples / sec: 1000.66
Iteration:   3940, Loss function: 4.893, Average Loss: 5.232, avg. samples / sec: 1040.79
Iteration:   3960, Loss function: 4.795, Average Loss: 5.228, avg. samples / sec: 1005.78
Iteration:   3980, Loss function: 4.888, Average Loss: 5.224, avg. samples / sec: 986.66
Iteration:   4000, Loss function: 5.329, Average Loss: 5.220, avg. samples / sec: 1081.17
Iteration:   4020, Loss function: 5.001, Average Loss: 5.216, avg. samples / sec: 1069.27
Iteration:   4040, Loss function: 5.080, Average Loss: 5.212, avg. samples / sec: 975.33
Iteration:   4060, Loss function: 5.136, Average Loss: 5.207, avg. samples / sec: 997.83
Iteration:   4080, Loss function: 5.183, Average Loss: 5.203, avg. samples / sec: 977.19
Iteration:   4100, Loss function: 5.024, Average Loss: 5.200, avg. samples / sec: 1003.61
:::MLLOG {"namespace": "", "time_ms": 1639066099890, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099892, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.131, Average Loss: 5.195, avg. samples / sec: 952.34
Iteration:   4140, Loss function: 5.025, Average Loss: 5.190, avg. samples / sec: 1063.36
Iteration:   4160, Loss function: 4.934, Average Loss: 5.184, avg. samples / sec: 1051.78
Iteration:   4180, Loss function: 4.884, Average Loss: 5.177, avg. samples / sec: 1063.10
Iteration:   4200, Loss function: 5.046, Average Loss: 5.173, avg. samples / sec: 1072.46
Iteration:   4220, Loss function: 4.739, Average Loss: 5.168, avg. samples / sec: 1082.73
Iteration:   4240, Loss function: 4.857, Average Loss: 5.163, avg. samples / sec: 997.67
Iteration:   4260, Loss function: 4.933, Average Loss: 5.158, avg. samples / sec: 993.62
Iteration:   4280, Loss function: 4.898, Average Loss: 5.153, avg. samples / sec: 990.99
Iteration:   4300, Loss function: 4.792, Average Loss: 5.147, avg. samples / sec: 1003.90
Iteration:   4320, Loss function: 5.002, Average Loss: 5.142, avg. samples / sec: 1057.48
Iteration:   4340, Loss function: 4.977, Average Loss: 5.136, avg. samples / sec: 976.78
Iteration:   4360, Loss function: 4.762, Average Loss: 5.131, avg. samples / sec: 1020.71
Iteration:   4380, Loss function: 5.137, Average Loss: 5.126, avg. samples / sec: 1040.35
Iteration:   4400, Loss function: 4.912, Average Loss: 5.122, avg. samples / sec: 968.11
Iteration:   4420, Loss function: 4.990, Average Loss: 5.118, avg. samples / sec: 1042.21
Iteration:   4440, Loss function: 5.035, Average Loss: 5.113, avg. samples / sec: 1038.12
Iteration:   4460, Loss function: 5.223, Average Loss: 5.109, avg. samples / sec: 1028.08
Iteration:   4480, Loss function: 4.901, Average Loss: 5.107, avg. samples / sec: 901.72
Iteration:   4500, Loss function: 4.859, Average Loss: 5.103, avg. samples / sec: 993.63
Iteration:   4520, Loss function: 4.769, Average Loss: 5.099, avg. samples / sec: 868.19
Iteration:   4540, Loss function: 5.112, Average Loss: 5.095, avg. samples / sec: 927.39
Iteration:   4560, Loss function: 4.880, Average Loss: 5.092, avg. samples / sec: 1060.98
Iteration:   4580, Loss function: 4.698, Average Loss: 5.089, avg. samples / sec: 994.29
Iteration:   4600, Loss function: 4.876, Average Loss: 5.085, avg. samples / sec: 985.86
Iteration:   4620, Loss function: 4.953, Average Loss: 5.080, avg. samples / sec: 1073.36
Iteration:   4640, Loss function: 4.603, Average Loss: 5.076, avg. samples / sec: 1019.78
Iteration:   4660, Loss function: 4.806, Average Loss: 5.073, avg. samples / sec: 971.92
Iteration:   4680, Loss function: 5.354, Average Loss: 5.068, avg. samples / sec: 1055.01
Iteration:   4700, Loss function: 4.826, Average Loss: 5.064, avg. samples / sec: 972.76
Iteration:   4720, Loss function: 4.744, Average Loss: 5.059, avg. samples / sec: 977.77
Iteration:   4740, Loss function: 4.942, Average Loss: 5.056, avg. samples / sec: 1079.53
Iteration:   4760, Loss function: 4.687, Average Loss: 5.052, avg. samples / sec: 1039.61
Iteration:   4780, Loss function: 4.927, Average Loss: 5.048, avg. samples / sec: 1044.04
Iteration:   4800, Loss function: 4.908, Average Loss: 5.045, avg. samples / sec: 998.19
Iteration:   4820, Loss function: 4.811, Average Loss: 5.041, avg. samples / sec: 989.52
Iteration:   4840, Loss function: 5.169, Average Loss: 5.038, avg. samples / sec: 1034.71
Iteration:   4860, Loss function: 4.774, Average Loss: 5.033, avg. samples / sec: 1025.10
Iteration:   4880, Loss function: 5.106, Average Loss: 5.030, avg. samples / sec: 1073.11
Iteration:   4900, Loss function: 4.496, Average Loss: 5.026, avg. samples / sec: 972.37
Iteration:   4920, Loss function: 4.803, Average Loss: 5.021, avg. samples / sec: 1002.29
Iteration:   4940, Loss function: 4.767, Average Loss: 5.018, avg. samples / sec: 1020.00
Iteration:   4960, Loss function: 4.761, Average Loss: 5.015, avg. samples / sec: 1029.93
Iteration:   4980, Loss function: 4.688, Average Loss: 5.011, avg. samples / sec: 1046.39
Iteration:   5000, Loss function: 4.790, Average Loss: 5.006, avg. samples / sec: 989.72
Iteration:   5020, Loss function: 5.128, Average Loss: 5.003, avg. samples / sec: 1023.66
Iteration:   5040, Loss function: 4.837, Average Loss: 5.000, avg. samples / sec: 992.77
Iteration:   5060, Loss function: 4.821, Average Loss: 4.998, avg. samples / sec: 971.81
Iteration:   5080, Loss function: 4.520, Average Loss: 4.994, avg. samples / sec: 945.20
Iteration:   5100, Loss function: 4.713, Average Loss: 4.991, avg. samples / sec: 1008.18
Iteration:   5120, Loss function: 4.670, Average Loss: 4.988, avg. samples / sec: 1102.06
Iteration:   5140, Loss function: 5.085, Average Loss: 4.985, avg. samples / sec: 1065.38
:::MLLOG {"namespace": "", "time_ms": 1639066215832, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.18 s
:::MLLOG {"namespace": "", "time_ms": 1639066248091, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066248105, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066248120, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.08s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.719, Average Loss: 4.980, avg. samples / sec: 65.48
Iteration:   5180, Loss function: 4.814, Average Loss: 4.975, avg. samples / sec: 993.12
Iteration:   5200, Loss function: 4.864, Average Loss: 4.970, avg. samples / sec: 1134.56
DONE (t=5.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10892
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22051
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09874
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19149
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10892 AP goal: 0.10000
Iteration:   5220, Loss function: 4.527, Average Loss: 4.966, avg. samples / sec: 1187.27
:::MLLOG {"namespace": "", "time_ms": 1639066256507, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256508, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10892021078350493, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256508, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256677, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:10:57 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:10:57 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065603691, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065603883, "event_type": "POINT_IN_TIME", "key": "seed", "value": 104724772, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 104724772
:::MLLOG {"namespace": "", "time_ms": 1639065605663, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065605663, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065605667, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065629426, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065629426, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065631313, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065631314, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065631730, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065631730, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065631732, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.130, Average Loss: 0.023, avg. samples / sec: 4.42
Iteration:     20, Loss function: 21.178, Average Loss: 0.459, avg. samples / sec: 842.66
Iteration:     40, Loss function: 20.648, Average Loss: 0.861, avg. samples / sec: 923.58
Iteration:     60, Loss function: 20.493, Average Loss: 1.250, avg. samples / sec: 962.04
Iteration:     80, Loss function: 19.972, Average Loss: 1.625, avg. samples / sec: 930.54
Iteration:    100, Loss function: 15.817, Average Loss: 1.957, avg. samples / sec: 939.00
Iteration:    120, Loss function: 11.111, Average Loss: 2.171, avg. samples / sec: 980.24
Iteration:    140, Loss function: 9.674, Average Loss: 2.330, avg. samples / sec: 911.54
Iteration:    160, Loss function: 9.066, Average Loss: 2.468, avg. samples / sec: 926.84
Iteration:    180, Loss function: 8.839, Average Loss: 2.596, avg. samples / sec: 932.52
Iteration:    200, Loss function: 8.668, Average Loss: 2.719, avg. samples / sec: 994.95
Iteration:    220, Loss function: 8.322, Average Loss: 2.840, avg. samples / sec: 1005.24
Iteration:    240, Loss function: 8.815, Average Loss: 2.958, avg. samples / sec: 992.84
Iteration:    260, Loss function: 8.625, Average Loss: 3.071, avg. samples / sec: 999.98
Iteration:    280, Loss function: 8.404, Average Loss: 3.181, avg. samples / sec: 943.11
Iteration:    300, Loss function: 8.308, Average Loss: 3.283, avg. samples / sec: 1035.83
Iteration:    320, Loss function: 8.386, Average Loss: 3.382, avg. samples / sec: 717.50
Iteration:    340, Loss function: 8.182, Average Loss: 3.479, avg. samples / sec: 933.11
Iteration:    360, Loss function: 8.000, Average Loss: 3.573, avg. samples / sec: 1019.04
Iteration:    380, Loss function: 7.853, Average Loss: 3.663, avg. samples / sec: 987.44
Iteration:    400, Loss function: 8.049, Average Loss: 3.746, avg. samples / sec: 962.56
Iteration:    420, Loss function: 7.597, Average Loss: 3.826, avg. samples / sec: 1021.09
Iteration:    440, Loss function: 7.887, Average Loss: 3.906, avg. samples / sec: 1019.14
Iteration:    460, Loss function: 7.781, Average Loss: 3.982, avg. samples / sec: 1100.71
Iteration:    480, Loss function: 7.566, Average Loss: 4.054, avg. samples / sec: 1061.04
Iteration:    500, Loss function: 7.715, Average Loss: 4.126, avg. samples / sec: 992.60
Iteration:    520, Loss function: 7.370, Average Loss: 4.193, avg. samples / sec: 942.54
Iteration:    540, Loss function: 7.329, Average Loss: 4.257, avg. samples / sec: 1017.63
Iteration:    560, Loss function: 7.253, Average Loss: 4.319, avg. samples / sec: 1014.41
Iteration:    580, Loss function: 7.216, Average Loss: 4.380, avg. samples / sec: 979.30
Iteration:    600, Loss function: 7.184, Average Loss: 4.438, avg. samples / sec: 1018.51
Iteration:    620, Loss function: 7.140, Average Loss: 4.493, avg. samples / sec: 997.18
Iteration:    640, Loss function: 6.892, Average Loss: 4.550, avg. samples / sec: 966.65
Iteration:    660, Loss function: 7.137, Average Loss: 4.603, avg. samples / sec: 948.38
Iteration:    680, Loss function: 7.229, Average Loss: 4.653, avg. samples / sec: 993.59
Iteration:    700, Loss function: 6.785, Average Loss: 4.701, avg. samples / sec: 985.59
Iteration:    720, Loss function: 7.104, Average Loss: 4.749, avg. samples / sec: 1070.85
Iteration:    740, Loss function: 6.798, Average Loss: 4.794, avg. samples / sec: 1057.47
Iteration:    760, Loss function: 7.215, Average Loss: 4.838, avg. samples / sec: 964.25
Iteration:    780, Loss function: 6.733, Average Loss: 4.879, avg. samples / sec: 1013.73
Iteration:    800, Loss function: 7.135, Average Loss: 4.918, avg. samples / sec: 964.43
Iteration:    820, Loss function: 6.849, Average Loss: 4.956, avg. samples / sec: 981.05
Iteration:    840, Loss function: 6.670, Average Loss: 4.991, avg. samples / sec: 953.37
Iteration:    860, Loss function: 6.781, Average Loss: 5.024, avg. samples / sec: 1084.03
Iteration:    880, Loss function: 6.717, Average Loss: 5.057, avg. samples / sec: 1012.70
Iteration:    900, Loss function: 6.813, Average Loss: 5.088, avg. samples / sec: 1024.95
Iteration:    920, Loss function: 6.765, Average Loss: 5.117, avg. samples / sec: 964.58
Iteration:    940, Loss function: 6.725, Average Loss: 5.146, avg. samples / sec: 930.40
Iteration:    960, Loss function: 6.461, Average Loss: 5.174, avg. samples / sec: 968.71
Iteration:    980, Loss function: 6.609, Average Loss: 5.202, avg. samples / sec: 1014.92
Iteration:   1000, Loss function: 6.679, Average Loss: 5.227, avg. samples / sec: 973.64
Iteration:   1020, Loss function: 6.159, Average Loss: 5.250, avg. samples / sec: 1029.56
:::MLLOG {"namespace": "", "time_ms": 1639065751978, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065751980, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.637, Average Loss: 5.273, avg. samples / sec: 951.88
Iteration:   1060, Loss function: 6.308, Average Loss: 5.297, avg. samples / sec: 1010.01
Iteration:   1080, Loss function: 6.336, Average Loss: 5.319, avg. samples / sec: 974.20
Iteration:   1100, Loss function: 6.134, Average Loss: 5.338, avg. samples / sec: 971.63
Iteration:   1120, Loss function: 6.144, Average Loss: 5.357, avg. samples / sec: 1001.10
Iteration:   1140, Loss function: 6.307, Average Loss: 5.375, avg. samples / sec: 1034.70
Iteration:   1160, Loss function: 6.171, Average Loss: 5.391, avg. samples / sec: 1018.22
Iteration:   1180, Loss function: 6.224, Average Loss: 5.407, avg. samples / sec: 964.33
Iteration:   1200, Loss function: 6.191, Average Loss: 5.423, avg. samples / sec: 1049.62
Iteration:   1220, Loss function: 6.258, Average Loss: 5.439, avg. samples / sec: 1022.14
Iteration:   1240, Loss function: 6.026, Average Loss: 5.452, avg. samples / sec: 1051.91
Iteration:   1260, Loss function: 6.048, Average Loss: 5.464, avg. samples / sec: 954.83
Iteration:   1280, Loss function: 5.842, Average Loss: 5.477, avg. samples / sec: 1049.34
Iteration:   1300, Loss function: 6.137, Average Loss: 5.489, avg. samples / sec: 1000.59
Iteration:   1320, Loss function: 6.060, Average Loss: 5.501, avg. samples / sec: 1052.79
Iteration:   1340, Loss function: 5.905, Average Loss: 5.512, avg. samples / sec: 1075.39
Iteration:   1360, Loss function: 6.159, Average Loss: 5.523, avg. samples / sec: 1008.93
Iteration:   1380, Loss function: 6.197, Average Loss: 5.534, avg. samples / sec: 1042.98
Iteration:   1400, Loss function: 6.194, Average Loss: 5.542, avg. samples / sec: 981.53
Iteration:   1420, Loss function: 5.847, Average Loss: 5.551, avg. samples / sec: 1061.19
Iteration:   1440, Loss function: 6.364, Average Loss: 5.559, avg. samples / sec: 967.44
Iteration:   1460, Loss function: 6.082, Average Loss: 5.568, avg. samples / sec: 1023.38
Iteration:   1480, Loss function: 5.782, Average Loss: 5.576, avg. samples / sec: 1058.01
Iteration:   1500, Loss function: 5.942, Average Loss: 5.584, avg. samples / sec: 1041.83
Iteration:   1520, Loss function: 6.125, Average Loss: 5.589, avg. samples / sec: 962.48
Iteration:   1540, Loss function: 5.941, Average Loss: 5.594, avg. samples / sec: 1007.65
Iteration:   1560, Loss function: 5.623, Average Loss: 5.598, avg. samples / sec: 1012.63
Iteration:   1580, Loss function: 5.726, Average Loss: 5.604, avg. samples / sec: 987.02
Iteration:   1600, Loss function: 6.260, Average Loss: 5.610, avg. samples / sec: 1030.84
Iteration:   1620, Loss function: 5.817, Average Loss: 5.615, avg. samples / sec: 1005.53
Iteration:   1640, Loss function: 5.893, Average Loss: 5.618, avg. samples / sec: 988.69
Iteration:   1660, Loss function: 5.890, Average Loss: 5.623, avg. samples / sec: 1042.49
Iteration:   1680, Loss function: 5.688, Average Loss: 5.626, avg. samples / sec: 1013.23
Iteration:   1700, Loss function: 5.380, Average Loss: 5.629, avg. samples / sec: 999.67
Iteration:   1720, Loss function: 5.718, Average Loss: 5.631, avg. samples / sec: 993.59
Iteration:   1740, Loss function: 5.920, Average Loss: 5.634, avg. samples / sec: 1034.75
Iteration:   1760, Loss function: 5.492, Average Loss: 5.636, avg. samples / sec: 1046.43
Iteration:   1780, Loss function: 5.579, Average Loss: 5.637, avg. samples / sec: 1023.91
Iteration:   1800, Loss function: 5.598, Average Loss: 5.640, avg. samples / sec: 1056.75
Iteration:   1820, Loss function: 5.878, Average Loss: 5.641, avg. samples / sec: 998.13
Iteration:   1840, Loss function: 5.954, Average Loss: 5.642, avg. samples / sec: 1025.02
Iteration:   1860, Loss function: 5.608, Average Loss: 5.641, avg. samples / sec: 925.68
Iteration:   1880, Loss function: 5.946, Average Loss: 5.643, avg. samples / sec: 1060.30
Iteration:   1900, Loss function: 5.949, Average Loss: 5.643, avg. samples / sec: 1002.28
Iteration:   1920, Loss function: 5.686, Average Loss: 5.642, avg. samples / sec: 1041.38
Iteration:   1940, Loss function: 5.748, Average Loss: 5.642, avg. samples / sec: 1025.35
Iteration:   1960, Loss function: 5.612, Average Loss: 5.642, avg. samples / sec: 1049.64
Iteration:   1980, Loss function: 5.704, Average Loss: 5.641, avg. samples / sec: 994.78
Iteration:   2000, Loss function: 5.559, Average Loss: 5.639, avg. samples / sec: 1001.95
Iteration:   2020, Loss function: 5.580, Average Loss: 5.637, avg. samples / sec: 1032.91
Iteration:   2040, Loss function: 5.593, Average Loss: 5.637, avg. samples / sec: 1019.71
:::MLLOG {"namespace": "", "time_ms": 1639065867510, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065867512, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.628, Average Loss: 5.636, avg. samples / sec: 1061.26
Iteration:   2080, Loss function: 5.196, Average Loss: 5.634, avg. samples / sec: 1002.73
Iteration:   2100, Loss function: 5.780, Average Loss: 5.633, avg. samples / sec: 969.12
Iteration:   2120, Loss function: 5.338, Average Loss: 5.631, avg. samples / sec: 990.02
Iteration:   2140, Loss function: 5.390, Average Loss: 5.627, avg. samples / sec: 1001.46
Iteration:   2160, Loss function: 5.483, Average Loss: 5.625, avg. samples / sec: 1001.45
Iteration:   2180, Loss function: 5.384, Average Loss: 5.624, avg. samples / sec: 1056.03
Iteration:   2200, Loss function: 5.453, Average Loss: 5.620, avg. samples / sec: 1041.95
Iteration:   2220, Loss function: 5.584, Average Loss: 5.618, avg. samples / sec: 956.40
Iteration:   2240, Loss function: 5.504, Average Loss: 5.615, avg. samples / sec: 977.75
Iteration:   2260, Loss function: 5.371, Average Loss: 5.612, avg. samples / sec: 997.38
Iteration:   2280, Loss function: 5.210, Average Loss: 5.609, avg. samples / sec: 1032.13
Iteration:   2300, Loss function: 5.161, Average Loss: 5.607, avg. samples / sec: 976.91
Iteration:   2320, Loss function: 5.390, Average Loss: 5.604, avg. samples / sec: 1021.96
Iteration:   2340, Loss function: 5.563, Average Loss: 5.602, avg. samples / sec: 1002.82
Iteration:   2360, Loss function: 5.367, Average Loss: 5.599, avg. samples / sec: 965.85
Iteration:   2380, Loss function: 5.276, Average Loss: 5.595, avg. samples / sec: 1040.42
Iteration:   2400, Loss function: 5.412, Average Loss: 5.590, avg. samples / sec: 1023.71
Iteration:   2420, Loss function: 5.394, Average Loss: 5.586, avg. samples / sec: 1024.32
Iteration:   2440, Loss function: 5.441, Average Loss: 5.582, avg. samples / sec: 1009.79
Iteration:   2460, Loss function: 5.210, Average Loss: 5.578, avg. samples / sec: 1014.62
Iteration:   2480, Loss function: 5.412, Average Loss: 5.575, avg. samples / sec: 1012.84
Iteration:   2500, Loss function: 5.526, Average Loss: 5.572, avg. samples / sec: 945.73
Iteration:   2520, Loss function: 5.202, Average Loss: 5.566, avg. samples / sec: 996.07
Iteration:   2540, Loss function: 5.421, Average Loss: 5.563, avg. samples / sec: 1074.35
Iteration:   2560, Loss function: 5.409, Average Loss: 5.561, avg. samples / sec: 957.15
Iteration:   2580, Loss function: 5.388, Average Loss: 5.558, avg. samples / sec: 1045.68
Iteration:   2600, Loss function: 5.446, Average Loss: 5.556, avg. samples / sec: 1024.68
Iteration:   2620, Loss function: 5.427, Average Loss: 5.551, avg. samples / sec: 1034.19
Iteration:   2640, Loss function: 5.069, Average Loss: 5.548, avg. samples / sec: 1015.41
Iteration:   2660, Loss function: 5.229, Average Loss: 5.545, avg. samples / sec: 908.03
Iteration:   2680, Loss function: 5.124, Average Loss: 5.542, avg. samples / sec: 906.83
Iteration:   2700, Loss function: 5.142, Average Loss: 5.538, avg. samples / sec: 1030.21
Iteration:   2720, Loss function: 5.399, Average Loss: 5.534, avg. samples / sec: 1017.11
Iteration:   2740, Loss function: 5.000, Average Loss: 5.529, avg. samples / sec: 1002.95
Iteration:   2760, Loss function: 5.155, Average Loss: 5.523, avg. samples / sec: 952.89
Iteration:   2780, Loss function: 5.503, Average Loss: 5.520, avg. samples / sec: 1042.50
Iteration:   2800, Loss function: 5.099, Average Loss: 5.516, avg. samples / sec: 1024.31
Iteration:   2820, Loss function: 5.458, Average Loss: 5.511, avg. samples / sec: 1042.38
Iteration:   2840, Loss function: 5.158, Average Loss: 5.507, avg. samples / sec: 1094.57
Iteration:   2860, Loss function: 5.083, Average Loss: 5.501, avg. samples / sec: 1010.59
Iteration:   2880, Loss function: 5.212, Average Loss: 5.496, avg. samples / sec: 987.26
Iteration:   2900, Loss function: 5.006, Average Loss: 5.491, avg. samples / sec: 1090.37
Iteration:   2920, Loss function: 5.214, Average Loss: 5.485, avg. samples / sec: 969.89
Iteration:   2940, Loss function: 4.927, Average Loss: 5.481, avg. samples / sec: 1071.44
Iteration:   2960, Loss function: 5.524, Average Loss: 5.478, avg. samples / sec: 1029.92
Iteration:   2980, Loss function: 5.337, Average Loss: 5.475, avg. samples / sec: 1047.36
Iteration:   3000, Loss function: 5.263, Average Loss: 5.470, avg. samples / sec: 956.95
Iteration:   3020, Loss function: 5.227, Average Loss: 5.463, avg. samples / sec: 1051.23
Iteration:   3040, Loss function: 5.145, Average Loss: 5.458, avg. samples / sec: 989.55
Iteration:   3060, Loss function: 5.042, Average Loss: 5.453, avg. samples / sec: 992.06
Iteration:   3080, Loss function: 4.956, Average Loss: 5.448, avg. samples / sec: 920.06
:::MLLOG {"namespace": "", "time_ms": 1639065984189, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065984192, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.241, Average Loss: 5.443, avg. samples / sec: 989.29
Iteration:   3120, Loss function: 5.247, Average Loss: 5.437, avg. samples / sec: 1062.68
Iteration:   3140, Loss function: 5.108, Average Loss: 5.431, avg. samples / sec: 1029.50
Iteration:   3160, Loss function: 5.471, Average Loss: 5.426, avg. samples / sec: 984.88
Iteration:   3180, Loss function: 5.061, Average Loss: 5.422, avg. samples / sec: 971.44
Iteration:   3200, Loss function: 5.333, Average Loss: 5.416, avg. samples / sec: 978.12
Iteration:   3220, Loss function: 5.135, Average Loss: 5.411, avg. samples / sec: 1023.01
Iteration:   3240, Loss function: 5.026, Average Loss: 5.406, avg. samples / sec: 1035.42
Iteration:   3260, Loss function: 4.996, Average Loss: 5.400, avg. samples / sec: 1029.03
Iteration:   3280, Loss function: 4.696, Average Loss: 5.394, avg. samples / sec: 1023.94
Iteration:   3300, Loss function: 4.891, Average Loss: 5.388, avg. samples / sec: 1019.35
Iteration:   3320, Loss function: 5.118, Average Loss: 5.383, avg. samples / sec: 1058.75
Iteration:   3340, Loss function: 5.045, Average Loss: 5.378, avg. samples / sec: 967.06
Iteration:   3360, Loss function: 5.301, Average Loss: 5.372, avg. samples / sec: 1039.15
Iteration:   3380, Loss function: 5.259, Average Loss: 5.365, avg. samples / sec: 992.99
Iteration:   3400, Loss function: 4.683, Average Loss: 5.361, avg. samples / sec: 977.78
Iteration:   3420, Loss function: 5.246, Average Loss: 5.355, avg. samples / sec: 995.75
Iteration:   3440, Loss function: 4.900, Average Loss: 5.350, avg. samples / sec: 1016.82
Iteration:   3460, Loss function: 5.344, Average Loss: 5.346, avg. samples / sec: 1036.53
Iteration:   3480, Loss function: 5.094, Average Loss: 5.341, avg. samples / sec: 1030.24
Iteration:   3500, Loss function: 5.180, Average Loss: 5.336, avg. samples / sec: 997.14
Iteration:   3520, Loss function: 5.132, Average Loss: 5.333, avg. samples / sec: 1055.24
Iteration:   3540, Loss function: 5.143, Average Loss: 5.328, avg. samples / sec: 996.79
Iteration:   3560, Loss function: 4.741, Average Loss: 5.324, avg. samples / sec: 1095.36
Iteration:   3580, Loss function: 5.147, Average Loss: 5.320, avg. samples / sec: 994.61
Iteration:   3600, Loss function: 5.207, Average Loss: 5.314, avg. samples / sec: 986.99
Iteration:   3620, Loss function: 4.809, Average Loss: 5.310, avg. samples / sec: 979.72
Iteration:   3640, Loss function: 4.672, Average Loss: 5.305, avg. samples / sec: 1058.56
Iteration:   3660, Loss function: 5.191, Average Loss: 5.300, avg. samples / sec: 1010.14
Iteration:   3680, Loss function: 5.401, Average Loss: 5.294, avg. samples / sec: 1027.97
Iteration:   3700, Loss function: 4.911, Average Loss: 5.289, avg. samples / sec: 1020.71
Iteration:   3720, Loss function: 5.192, Average Loss: 5.284, avg. samples / sec: 1021.57
Iteration:   3740, Loss function: 5.152, Average Loss: 5.280, avg. samples / sec: 979.18
Iteration:   3760, Loss function: 5.200, Average Loss: 5.275, avg. samples / sec: 1043.89
Iteration:   3780, Loss function: 4.984, Average Loss: 5.271, avg. samples / sec: 951.00
Iteration:   3800, Loss function: 5.019, Average Loss: 5.267, avg. samples / sec: 986.00
Iteration:   3820, Loss function: 5.044, Average Loss: 5.262, avg. samples / sec: 1021.42
Iteration:   3840, Loss function: 4.931, Average Loss: 5.258, avg. samples / sec: 962.14
Iteration:   3860, Loss function: 4.847, Average Loss: 5.253, avg. samples / sec: 1093.52
Iteration:   3880, Loss function: 4.934, Average Loss: 5.247, avg. samples / sec: 1076.64
Iteration:   3900, Loss function: 5.099, Average Loss: 5.242, avg. samples / sec: 1059.54
Iteration:   3920, Loss function: 5.007, Average Loss: 5.237, avg. samples / sec: 1000.66
Iteration:   3940, Loss function: 4.893, Average Loss: 5.232, avg. samples / sec: 1040.79
Iteration:   3960, Loss function: 4.795, Average Loss: 5.228, avg. samples / sec: 1005.78
Iteration:   3980, Loss function: 4.888, Average Loss: 5.224, avg. samples / sec: 986.66
Iteration:   4000, Loss function: 5.329, Average Loss: 5.220, avg. samples / sec: 1081.17
Iteration:   4020, Loss function: 5.001, Average Loss: 5.216, avg. samples / sec: 1069.27
Iteration:   4040, Loss function: 5.080, Average Loss: 5.212, avg. samples / sec: 975.33
Iteration:   4060, Loss function: 5.136, Average Loss: 5.207, avg. samples / sec: 997.83
Iteration:   4080, Loss function: 5.183, Average Loss: 5.203, avg. samples / sec: 977.19
Iteration:   4100, Loss function: 5.024, Average Loss: 5.200, avg. samples / sec: 1003.61
:::MLLOG {"namespace": "", "time_ms": 1639066099890, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066099892, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.131, Average Loss: 5.195, avg. samples / sec: 952.34
Iteration:   4140, Loss function: 5.025, Average Loss: 5.190, avg. samples / sec: 1063.36
Iteration:   4160, Loss function: 4.934, Average Loss: 5.184, avg. samples / sec: 1051.78
Iteration:   4180, Loss function: 4.884, Average Loss: 5.177, avg. samples / sec: 1063.10
Iteration:   4200, Loss function: 5.046, Average Loss: 5.173, avg. samples / sec: 1072.46
Iteration:   4220, Loss function: 4.739, Average Loss: 5.168, avg. samples / sec: 1082.73
Iteration:   4240, Loss function: 4.857, Average Loss: 5.163, avg. samples / sec: 997.67
Iteration:   4260, Loss function: 4.933, Average Loss: 5.158, avg. samples / sec: 993.62
Iteration:   4280, Loss function: 4.898, Average Loss: 5.153, avg. samples / sec: 990.99
Iteration:   4300, Loss function: 4.792, Average Loss: 5.147, avg. samples / sec: 1003.90
Iteration:   4320, Loss function: 5.002, Average Loss: 5.142, avg. samples / sec: 1057.48
Iteration:   4340, Loss function: 4.977, Average Loss: 5.136, avg. samples / sec: 976.78
Iteration:   4360, Loss function: 4.762, Average Loss: 5.131, avg. samples / sec: 1020.71
Iteration:   4380, Loss function: 5.137, Average Loss: 5.126, avg. samples / sec: 1040.35
Iteration:   4400, Loss function: 4.912, Average Loss: 5.122, avg. samples / sec: 968.11
Iteration:   4420, Loss function: 4.990, Average Loss: 5.118, avg. samples / sec: 1042.21
Iteration:   4440, Loss function: 5.035, Average Loss: 5.113, avg. samples / sec: 1038.12
Iteration:   4460, Loss function: 5.223, Average Loss: 5.109, avg. samples / sec: 1028.08
Iteration:   4480, Loss function: 4.901, Average Loss: 5.107, avg. samples / sec: 901.72
Iteration:   4500, Loss function: 4.859, Average Loss: 5.103, avg. samples / sec: 993.63
Iteration:   4520, Loss function: 4.769, Average Loss: 5.099, avg. samples / sec: 868.19
Iteration:   4540, Loss function: 5.112, Average Loss: 5.095, avg. samples / sec: 927.39
Iteration:   4560, Loss function: 4.880, Average Loss: 5.092, avg. samples / sec: 1060.98
Iteration:   4580, Loss function: 4.698, Average Loss: 5.089, avg. samples / sec: 994.29
Iteration:   4600, Loss function: 4.876, Average Loss: 5.085, avg. samples / sec: 985.86
Iteration:   4620, Loss function: 4.953, Average Loss: 5.080, avg. samples / sec: 1073.36
Iteration:   4640, Loss function: 4.603, Average Loss: 5.076, avg. samples / sec: 1019.78
Iteration:   4660, Loss function: 4.806, Average Loss: 5.073, avg. samples / sec: 971.92
Iteration:   4680, Loss function: 5.354, Average Loss: 5.068, avg. samples / sec: 1055.01
Iteration:   4700, Loss function: 4.826, Average Loss: 5.064, avg. samples / sec: 972.76
Iteration:   4720, Loss function: 4.744, Average Loss: 5.059, avg. samples / sec: 977.77
Iteration:   4740, Loss function: 4.942, Average Loss: 5.056, avg. samples / sec: 1079.53
Iteration:   4760, Loss function: 4.687, Average Loss: 5.052, avg. samples / sec: 1039.61
Iteration:   4780, Loss function: 4.927, Average Loss: 5.048, avg. samples / sec: 1044.04
Iteration:   4800, Loss function: 4.908, Average Loss: 5.045, avg. samples / sec: 998.19
Iteration:   4820, Loss function: 4.811, Average Loss: 5.041, avg. samples / sec: 989.52
Iteration:   4840, Loss function: 5.169, Average Loss: 5.038, avg. samples / sec: 1034.71
Iteration:   4860, Loss function: 4.774, Average Loss: 5.033, avg. samples / sec: 1025.10
Iteration:   4880, Loss function: 5.106, Average Loss: 5.030, avg. samples / sec: 1073.11
Iteration:   4900, Loss function: 4.496, Average Loss: 5.026, avg. samples / sec: 972.37
Iteration:   4920, Loss function: 4.803, Average Loss: 5.021, avg. samples / sec: 1002.29
Iteration:   4940, Loss function: 4.767, Average Loss: 5.018, avg. samples / sec: 1020.00
Iteration:   4960, Loss function: 4.761, Average Loss: 5.015, avg. samples / sec: 1029.93
Iteration:   4980, Loss function: 4.688, Average Loss: 5.011, avg. samples / sec: 1046.39
Iteration:   5000, Loss function: 4.790, Average Loss: 5.006, avg. samples / sec: 989.72
Iteration:   5020, Loss function: 5.128, Average Loss: 5.003, avg. samples / sec: 1023.66
Iteration:   5040, Loss function: 4.837, Average Loss: 5.000, avg. samples / sec: 992.77
Iteration:   5060, Loss function: 4.821, Average Loss: 4.998, avg. samples / sec: 971.81
Iteration:   5080, Loss function: 4.520, Average Loss: 4.994, avg. samples / sec: 945.20
Iteration:   5100, Loss function: 4.713, Average Loss: 4.991, avg. samples / sec: 1008.18
Iteration:   5120, Loss function: 4.670, Average Loss: 4.988, avg. samples / sec: 1102.06
Iteration:   5140, Loss function: 5.085, Average Loss: 4.985, avg. samples / sec: 1065.38
:::MLLOG {"namespace": "", "time_ms": 1639066215832, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.18 s
:::MLLOG {"namespace": "", "time_ms": 1639066248091, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066248105, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066248120, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.08s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.719, Average Loss: 4.980, avg. samples / sec: 65.48
Iteration:   5180, Loss function: 4.814, Average Loss: 4.975, avg. samples / sec: 993.12
Iteration:   5200, Loss function: 4.864, Average Loss: 4.970, avg. samples / sec: 1134.56
DONE (t=5.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10892
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22051
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09874
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19149
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20207
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21391
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10892 AP goal: 0.10000
Iteration:   5220, Loss function: 4.527, Average Loss: 4.966, avg. samples / sec: 1187.27
:::MLLOG {"namespace": "", "time_ms": 1639066256507, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256508, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10892021078350493, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256508, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066256677, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066257
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:10:57 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:46 PM'
START TIMING RUN WAS 2021-12-09 03:59:46 PM
ENDING TIMING RUN AT 2021-12-09 04:10:57 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:10:57 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
+ result=671
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,671,nvidia,2021-12-09 03:59:46 PM'
RESULT,SINGLE_STAGE_DETECTOR,,671,nvidia,2021-12-09 03:59:46 PM
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
