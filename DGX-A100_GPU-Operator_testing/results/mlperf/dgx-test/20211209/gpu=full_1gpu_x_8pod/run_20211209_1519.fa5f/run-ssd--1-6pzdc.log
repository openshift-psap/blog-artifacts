+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-6pzdc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-6pzdc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-6pzdc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-4fb17cd5-cad8-31a6-34d3-08434d926140
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-4fb17cd5-cad8-31a6-34d3-08434d926140).
+ echo 'No MIG GPU available, using the full GPUs (GPU-4fb17cd5-cad8-31a6-34d3-08434d926140).'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639065584
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 03:59:44 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 03:59:44 PM GPU: 1 x full x 8 Pods'
STARTING TIMING RUN AT 2021-12-09 03:59:44 PM GPU: 1 x full x 8 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_10-59-20 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\0\-\5\9\-\2\0 ]]
+ set +x
Thu Dec  9 15:59:44 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd--1-6pzdc to the sync file ...
run-ssd--1-6pzdc Found 3 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
run-ssd--1-6pzdc Found 4 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
run-ssd--1-6pzdc Found 6 Pods, waiting to have 8 ...
     1	run-ssd--1-8chgx
     2	run-ssd--1-lqfpc
     3	run-ssd--1-6pzdc
     4	run-ssd--1-kl2ts
     5	run-ssd--1-qtmdk
     6	run-ssd--1-n7wqt
Thu Dec  9 15:59:59 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
+ [[ 0 == 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065601006, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065601127, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1017602182, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1017602182
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639065602843, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065602843, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065602848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065625947, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065625947, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639065627183, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065627183, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065627456, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065627457, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065627458, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.742, Average Loss: 0.023, avg. samples / sec: 4.70
Iteration:     20, Loss function: 21.138, Average Loss: 0.456, avg. samples / sec: 1048.59
Iteration:     40, Loss function: 20.787, Average Loss: 0.858, avg. samples / sec: 1059.69
Iteration:     60, Loss function: 20.396, Average Loss: 1.248, avg. samples / sec: 1057.20
Iteration:     80, Loss function: 20.217, Average Loss: 1.623, avg. samples / sec: 1009.17
Iteration:    100, Loss function: 16.331, Average Loss: 1.959, avg. samples / sec: 1019.33
Iteration:    120, Loss function: 12.717, Average Loss: 2.186, avg. samples / sec: 1020.12
Iteration:    140, Loss function: 10.029, Average Loss: 2.349, avg. samples / sec: 986.91
Iteration:    160, Loss function: 9.517, Average Loss: 2.493, avg. samples / sec: 976.95
Iteration:    180, Loss function: 9.163, Average Loss: 2.625, avg. samples / sec: 1062.46
Iteration:    200, Loss function: 8.794, Average Loss: 2.750, avg. samples / sec: 978.85
Iteration:    220, Loss function: 8.677, Average Loss: 2.870, avg. samples / sec: 973.11
Iteration:    240, Loss function: 8.732, Average Loss: 2.987, avg. samples / sec: 1052.08
Iteration:    260, Loss function: 8.651, Average Loss: 3.100, avg. samples / sec: 986.20
Iteration:    280, Loss function: 8.697, Average Loss: 3.210, avg. samples / sec: 1041.30
Iteration:    300, Loss function: 8.447, Average Loss: 3.315, avg. samples / sec: 1008.22
Iteration:    320, Loss function: 8.394, Average Loss: 3.416, avg. samples / sec: 1026.08
Iteration:    340, Loss function: 8.248, Average Loss: 3.512, avg. samples / sec: 1026.20
Iteration:    360, Loss function: 8.072, Average Loss: 3.606, avg. samples / sec: 925.29
Iteration:    380, Loss function: 7.952, Average Loss: 3.697, avg. samples / sec: 741.12
Iteration:    400, Loss function: 8.055, Average Loss: 3.780, avg. samples / sec: 1017.47
Iteration:    420, Loss function: 7.571, Average Loss: 3.860, avg. samples / sec: 1000.30
Iteration:    440, Loss function: 7.781, Average Loss: 3.939, avg. samples / sec: 1046.28
Iteration:    460, Loss function: 7.811, Average Loss: 4.014, avg. samples / sec: 1025.02
Iteration:    480, Loss function: 7.519, Average Loss: 4.086, avg. samples / sec: 942.83
Iteration:    500, Loss function: 7.543, Average Loss: 4.156, avg. samples / sec: 905.77
Iteration:    520, Loss function: 7.488, Average Loss: 4.223, avg. samples / sec: 994.19
Iteration:    540, Loss function: 7.479, Average Loss: 4.288, avg. samples / sec: 1023.57
Iteration:    560, Loss function: 7.236, Average Loss: 4.353, avg. samples / sec: 1013.22
Iteration:    580, Loss function: 7.195, Average Loss: 4.414, avg. samples / sec: 897.11
Iteration:    600, Loss function: 7.240, Average Loss: 4.471, avg. samples / sec: 917.83
Iteration:    620, Loss function: 7.080, Average Loss: 4.526, avg. samples / sec: 988.30
Iteration:    640, Loss function: 6.997, Average Loss: 4.579, avg. samples / sec: 1028.25
Iteration:    660, Loss function: 7.031, Average Loss: 4.630, avg. samples / sec: 1004.27
Iteration:    680, Loss function: 7.222, Average Loss: 4.681, avg. samples / sec: 1024.36
Iteration:    700, Loss function: 6.852, Average Loss: 4.729, avg. samples / sec: 883.00
Iteration:    720, Loss function: 6.965, Average Loss: 4.776, avg. samples / sec: 1022.96
Iteration:    740, Loss function: 6.976, Average Loss: 4.821, avg. samples / sec: 1082.86
Iteration:    760, Loss function: 6.964, Average Loss: 4.863, avg. samples / sec: 1010.20
Iteration:    780, Loss function: 6.821, Average Loss: 4.904, avg. samples / sec: 978.08
Iteration:    800, Loss function: 7.148, Average Loss: 4.943, avg. samples / sec: 1007.53
Iteration:    820, Loss function: 6.800, Average Loss: 4.980, avg. samples / sec: 970.00
Iteration:    840, Loss function: 6.767, Average Loss: 5.016, avg. samples / sec: 896.69
Iteration:    860, Loss function: 6.730, Average Loss: 5.050, avg. samples / sec: 1010.01
Iteration:    880, Loss function: 6.836, Average Loss: 5.083, avg. samples / sec: 950.76
Iteration:    900, Loss function: 6.832, Average Loss: 5.114, avg. samples / sec: 951.78
Iteration:    920, Loss function: 6.704, Average Loss: 5.144, avg. samples / sec: 847.66
Iteration:    940, Loss function: 6.817, Average Loss: 5.173, avg. samples / sec: 1014.55
Iteration:    960, Loss function: 6.426, Average Loss: 5.202, avg. samples / sec: 1005.19
Iteration:    980, Loss function: 6.576, Average Loss: 5.228, avg. samples / sec: 1047.59
Iteration:   1000, Loss function: 6.670, Average Loss: 5.254, avg. samples / sec: 977.84
Iteration:   1020, Loss function: 6.365, Average Loss: 5.277, avg. samples / sec: 994.95
:::MLLOG {"namespace": "", "time_ms": 1639065746423, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065746425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.454, Average Loss: 5.302, avg. samples / sec: 1021.23
Iteration:   1060, Loss function: 6.292, Average Loss: 5.324, avg. samples / sec: 1018.39
Iteration:   1080, Loss function: 6.448, Average Loss: 5.346, avg. samples / sec: 994.85
Iteration:   1100, Loss function: 6.287, Average Loss: 5.366, avg. samples / sec: 984.96
Iteration:   1120, Loss function: 6.273, Average Loss: 5.387, avg. samples / sec: 987.84
Iteration:   1140, Loss function: 6.370, Average Loss: 5.406, avg. samples / sec: 1020.78
Iteration:   1160, Loss function: 6.188, Average Loss: 5.422, avg. samples / sec: 962.89
Iteration:   1180, Loss function: 6.248, Average Loss: 5.439, avg. samples / sec: 1020.76
Iteration:   1200, Loss function: 6.228, Average Loss: 5.455, avg. samples / sec: 1043.33
Iteration:   1220, Loss function: 6.174, Average Loss: 5.470, avg. samples / sec: 1033.19
Iteration:   1240, Loss function: 6.024, Average Loss: 5.483, avg. samples / sec: 1041.40
Iteration:   1260, Loss function: 6.240, Average Loss: 5.495, avg. samples / sec: 978.69
Iteration:   1280, Loss function: 5.844, Average Loss: 5.508, avg. samples / sec: 1025.73
Iteration:   1300, Loss function: 6.063, Average Loss: 5.520, avg. samples / sec: 941.43
Iteration:   1320, Loss function: 6.109, Average Loss: 5.532, avg. samples / sec: 1030.18
Iteration:   1340, Loss function: 5.896, Average Loss: 5.541, avg. samples / sec: 1059.87
Iteration:   1360, Loss function: 6.051, Average Loss: 5.551, avg. samples / sec: 1006.35
Iteration:   1380, Loss function: 6.124, Average Loss: 5.561, avg. samples / sec: 1003.48
Iteration:   1400, Loss function: 6.123, Average Loss: 5.569, avg. samples / sec: 994.82
Iteration:   1420, Loss function: 5.906, Average Loss: 5.578, avg. samples / sec: 1026.65
Iteration:   1440, Loss function: 6.299, Average Loss: 5.586, avg. samples / sec: 1001.38
Iteration:   1460, Loss function: 6.090, Average Loss: 5.593, avg. samples / sec: 1024.87
Iteration:   1480, Loss function: 5.979, Average Loss: 5.601, avg. samples / sec: 971.60
Iteration:   1500, Loss function: 5.887, Average Loss: 5.609, avg. samples / sec: 991.76
Iteration:   1520, Loss function: 6.016, Average Loss: 5.614, avg. samples / sec: 1033.74
Iteration:   1540, Loss function: 6.111, Average Loss: 5.617, avg. samples / sec: 1045.58
Iteration:   1560, Loss function: 5.655, Average Loss: 5.623, avg. samples / sec: 1026.19
Iteration:   1580, Loss function: 5.671, Average Loss: 5.627, avg. samples / sec: 1015.44
Iteration:   1600, Loss function: 6.062, Average Loss: 5.632, avg. samples / sec: 1049.23
Iteration:   1620, Loss function: 5.843, Average Loss: 5.635, avg. samples / sec: 1023.82
Iteration:   1640, Loss function: 6.026, Average Loss: 5.638, avg. samples / sec: 961.42
Iteration:   1660, Loss function: 6.091, Average Loss: 5.642, avg. samples / sec: 1019.22
Iteration:   1680, Loss function: 5.696, Average Loss: 5.646, avg. samples / sec: 1029.83
Iteration:   1700, Loss function: 5.483, Average Loss: 5.650, avg. samples / sec: 1018.82
Iteration:   1720, Loss function: 5.595, Average Loss: 5.653, avg. samples / sec: 1007.39
Iteration:   1740, Loss function: 5.845, Average Loss: 5.655, avg. samples / sec: 1027.66
Iteration:   1760, Loss function: 5.584, Average Loss: 5.657, avg. samples / sec: 1058.59
Iteration:   1780, Loss function: 5.613, Average Loss: 5.658, avg. samples / sec: 1035.67
Iteration:   1800, Loss function: 5.636, Average Loss: 5.660, avg. samples / sec: 1031.01
Iteration:   1820, Loss function: 5.854, Average Loss: 5.662, avg. samples / sec: 988.88
Iteration:   1840, Loss function: 5.931, Average Loss: 5.663, avg. samples / sec: 944.30
Iteration:   1860, Loss function: 5.512, Average Loss: 5.662, avg. samples / sec: 961.04
Iteration:   1880, Loss function: 5.796, Average Loss: 5.664, avg. samples / sec: 999.62
Iteration:   1900, Loss function: 5.745, Average Loss: 5.664, avg. samples / sec: 1027.69
Iteration:   1920, Loss function: 5.714, Average Loss: 5.664, avg. samples / sec: 998.41
Iteration:   1940, Loss function: 5.938, Average Loss: 5.663, avg. samples / sec: 1010.64
Iteration:   1960, Loss function: 5.482, Average Loss: 5.663, avg. samples / sec: 980.14
Iteration:   1980, Loss function: 5.702, Average Loss: 5.662, avg. samples / sec: 1060.87
Iteration:   2000, Loss function: 5.610, Average Loss: 5.661, avg. samples / sec: 973.85
Iteration:   2020, Loss function: 5.762, Average Loss: 5.660, avg. samples / sec: 987.87
Iteration:   2040, Loss function: 5.709, Average Loss: 5.659, avg. samples / sec: 1057.58
:::MLLOG {"namespace": "", "time_ms": 1639065862585, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065862587, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.470, Average Loss: 5.657, avg. samples / sec: 990.26
Iteration:   2080, Loss function: 5.165, Average Loss: 5.654, avg. samples / sec: 976.99
Iteration:   2100, Loss function: 5.478, Average Loss: 5.652, avg. samples / sec: 1003.77
Iteration:   2120, Loss function: 5.331, Average Loss: 5.650, avg. samples / sec: 975.71
Iteration:   2140, Loss function: 5.485, Average Loss: 5.647, avg. samples / sec: 1027.33
Iteration:   2160, Loss function: 5.459, Average Loss: 5.644, avg. samples / sec: 981.03
Iteration:   2180, Loss function: 5.326, Average Loss: 5.642, avg. samples / sec: 992.40
Iteration:   2200, Loss function: 5.358, Average Loss: 5.637, avg. samples / sec: 1085.14
Iteration:   2220, Loss function: 5.538, Average Loss: 5.635, avg. samples / sec: 988.10
Iteration:   2240, Loss function: 5.453, Average Loss: 5.633, avg. samples / sec: 1061.88
Iteration:   2260, Loss function: 5.232, Average Loss: 5.629, avg. samples / sec: 1004.91
Iteration:   2280, Loss function: 5.192, Average Loss: 5.626, avg. samples / sec: 1005.33
Iteration:   2300, Loss function: 5.135, Average Loss: 5.623, avg. samples / sec: 1065.88
Iteration:   2320, Loss function: 5.556, Average Loss: 5.619, avg. samples / sec: 1076.97
Iteration:   2340, Loss function: 5.507, Average Loss: 5.616, avg. samples / sec: 1020.01
Iteration:   2360, Loss function: 5.387, Average Loss: 5.611, avg. samples / sec: 1059.68
Iteration:   2380, Loss function: 5.425, Average Loss: 5.607, avg. samples / sec: 998.88
Iteration:   2400, Loss function: 5.748, Average Loss: 5.603, avg. samples / sec: 1014.47
Iteration:   2420, Loss function: 5.449, Average Loss: 5.599, avg. samples / sec: 1086.43
Iteration:   2440, Loss function: 5.276, Average Loss: 5.596, avg. samples / sec: 999.83
Iteration:   2460, Loss function: 5.248, Average Loss: 5.592, avg. samples / sec: 1042.31
Iteration:   2480, Loss function: 5.282, Average Loss: 5.588, avg. samples / sec: 1037.66
Iteration:   2500, Loss function: 5.477, Average Loss: 5.584, avg. samples / sec: 1017.04
Iteration:   2520, Loss function: 5.541, Average Loss: 5.579, avg. samples / sec: 1059.06
Iteration:   2540, Loss function: 5.461, Average Loss: 5.576, avg. samples / sec: 1016.01
Iteration:   2560, Loss function: 5.269, Average Loss: 5.573, avg. samples / sec: 984.43
Iteration:   2580, Loss function: 5.359, Average Loss: 5.569, avg. samples / sec: 1001.00
Iteration:   2600, Loss function: 5.571, Average Loss: 5.566, avg. samples / sec: 963.17
Iteration:   2620, Loss function: 5.640, Average Loss: 5.561, avg. samples / sec: 993.23
Iteration:   2640, Loss function: 5.292, Average Loss: 5.557, avg. samples / sec: 970.76
Iteration:   2660, Loss function: 5.272, Average Loss: 5.553, avg. samples / sec: 1012.64
Iteration:   2680, Loss function: 4.904, Average Loss: 5.549, avg. samples / sec: 1114.78
Iteration:   2700, Loss function: 5.092, Average Loss: 5.542, avg. samples / sec: 1041.11
Iteration:   2720, Loss function: 5.442, Average Loss: 5.538, avg. samples / sec: 1045.41
Iteration:   2740, Loss function: 4.974, Average Loss: 5.533, avg. samples / sec: 1085.80
Iteration:   2760, Loss function: 4.970, Average Loss: 5.528, avg. samples / sec: 1096.62
Iteration:   2780, Loss function: 5.447, Average Loss: 5.524, avg. samples / sec: 1017.09
Iteration:   2800, Loss function: 5.123, Average Loss: 5.519, avg. samples / sec: 1021.67
Iteration:   2820, Loss function: 5.447, Average Loss: 5.514, avg. samples / sec: 976.91
Iteration:   2840, Loss function: 5.259, Average Loss: 5.509, avg. samples / sec: 1033.78
Iteration:   2860, Loss function: 5.037, Average Loss: 5.504, avg. samples / sec: 955.32
Iteration:   2880, Loss function: 5.364, Average Loss: 5.500, avg. samples / sec: 1017.44
Iteration:   2900, Loss function: 5.074, Average Loss: 5.495, avg. samples / sec: 992.35
Iteration:   2920, Loss function: 5.168, Average Loss: 5.489, avg. samples / sec: 1004.19
Iteration:   2940, Loss function: 5.145, Average Loss: 5.485, avg. samples / sec: 1076.23
Iteration:   2960, Loss function: 5.389, Average Loss: 5.480, avg. samples / sec: 978.27
Iteration:   2980, Loss function: 5.401, Average Loss: 5.476, avg. samples / sec: 942.81
Iteration:   3000, Loss function: 5.183, Average Loss: 5.471, avg. samples / sec: 1095.38
Iteration:   3020, Loss function: 5.305, Average Loss: 5.465, avg. samples / sec: 1004.96
Iteration:   3040, Loss function: 5.308, Average Loss: 5.459, avg. samples / sec: 992.42
Iteration:   3060, Loss function: 5.033, Average Loss: 5.453, avg. samples / sec: 1016.05
Iteration:   3080, Loss function: 4.886, Average Loss: 5.449, avg. samples / sec: 1027.05
:::MLLOG {"namespace": "", "time_ms": 1639065977776, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065977778, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.325, Average Loss: 5.444, avg. samples / sec: 1005.74
Iteration:   3120, Loss function: 5.011, Average Loss: 5.437, avg. samples / sec: 1044.28
Iteration:   3140, Loss function: 5.053, Average Loss: 5.432, avg. samples / sec: 1041.01
Iteration:   3160, Loss function: 5.501, Average Loss: 5.426, avg. samples / sec: 1070.79
Iteration:   3180, Loss function: 4.962, Average Loss: 5.421, avg. samples / sec: 944.92
Iteration:   3200, Loss function: 5.229, Average Loss: 5.416, avg. samples / sec: 1036.06
Iteration:   3220, Loss function: 5.154, Average Loss: 5.411, avg. samples / sec: 988.72
Iteration:   3240, Loss function: 5.204, Average Loss: 5.406, avg. samples / sec: 1017.42
Iteration:   3260, Loss function: 5.063, Average Loss: 5.400, avg. samples / sec: 1032.86
Iteration:   3280, Loss function: 4.805, Average Loss: 5.394, avg. samples / sec: 1011.97
Iteration:   3300, Loss function: 4.858, Average Loss: 5.387, avg. samples / sec: 996.06
Iteration:   3320, Loss function: 4.932, Average Loss: 5.382, avg. samples / sec: 999.57
Iteration:   3340, Loss function: 5.178, Average Loss: 5.377, avg. samples / sec: 929.46
Iteration:   3360, Loss function: 5.061, Average Loss: 5.370, avg. samples / sec: 1068.59
Iteration:   3380, Loss function: 5.171, Average Loss: 5.364, avg. samples / sec: 1057.41
Iteration:   3400, Loss function: 4.910, Average Loss: 5.359, avg. samples / sec: 1031.01
Iteration:   3420, Loss function: 5.311, Average Loss: 5.353, avg. samples / sec: 1057.85
Iteration:   3440, Loss function: 4.830, Average Loss: 5.349, avg. samples / sec: 1014.95
Iteration:   3460, Loss function: 5.409, Average Loss: 5.344, avg. samples / sec: 1013.28
Iteration:   3480, Loss function: 5.260, Average Loss: 5.339, avg. samples / sec: 1003.73
Iteration:   3500, Loss function: 5.286, Average Loss: 5.334, avg. samples / sec: 992.31
Iteration:   3520, Loss function: 5.064, Average Loss: 5.330, avg. samples / sec: 1001.05
Iteration:   3540, Loss function: 5.084, Average Loss: 5.325, avg. samples / sec: 1010.41
Iteration:   3560, Loss function: 4.795, Average Loss: 5.321, avg. samples / sec: 1001.24
Iteration:   3580, Loss function: 4.951, Average Loss: 5.316, avg. samples / sec: 1048.33
Iteration:   3600, Loss function: 5.142, Average Loss: 5.310, avg. samples / sec: 1012.66
Iteration:   3620, Loss function: 4.960, Average Loss: 5.305, avg. samples / sec: 944.67
Iteration:   3640, Loss function: 4.743, Average Loss: 5.299, avg. samples / sec: 899.98
Iteration:   3660, Loss function: 5.068, Average Loss: 5.295, avg. samples / sec: 1045.96
Iteration:   3680, Loss function: 5.115, Average Loss: 5.290, avg. samples / sec: 950.86
Iteration:   3700, Loss function: 5.044, Average Loss: 5.284, avg. samples / sec: 973.03
Iteration:   3720, Loss function: 4.961, Average Loss: 5.277, avg. samples / sec: 992.06
Iteration:   3740, Loss function: 5.217, Average Loss: 5.274, avg. samples / sec: 930.59
Iteration:   3760, Loss function: 5.176, Average Loss: 5.269, avg. samples / sec: 1022.38
Iteration:   3780, Loss function: 5.033, Average Loss: 5.264, avg. samples / sec: 946.50
Iteration:   3800, Loss function: 5.177, Average Loss: 5.260, avg. samples / sec: 1038.55
Iteration:   3820, Loss function: 5.288, Average Loss: 5.255, avg. samples / sec: 1045.53
Iteration:   3840, Loss function: 4.729, Average Loss: 5.250, avg. samples / sec: 970.47
Iteration:   3860, Loss function: 4.932, Average Loss: 5.245, avg. samples / sec: 987.37
Iteration:   3880, Loss function: 5.059, Average Loss: 5.241, avg. samples / sec: 979.85
Iteration:   3900, Loss function: 5.143, Average Loss: 5.236, avg. samples / sec: 999.89
Iteration:   3920, Loss function: 5.006, Average Loss: 5.230, avg. samples / sec: 1016.64
Iteration:   3940, Loss function: 5.045, Average Loss: 5.226, avg. samples / sec: 1018.20
Iteration:   3960, Loss function: 4.753, Average Loss: 5.222, avg. samples / sec: 975.81
Iteration:   3980, Loss function: 4.881, Average Loss: 5.219, avg. samples / sec: 931.88
Iteration:   4000, Loss function: 5.103, Average Loss: 5.215, avg. samples / sec: 1019.04
Iteration:   4020, Loss function: 4.908, Average Loss: 5.209, avg. samples / sec: 989.41
Iteration:   4040, Loss function: 5.254, Average Loss: 5.205, avg. samples / sec: 975.80
Iteration:   4060, Loss function: 5.141, Average Loss: 5.202, avg. samples / sec: 979.78
Iteration:   4080, Loss function: 5.149, Average Loss: 5.197, avg. samples / sec: 1033.45
Iteration:   4100, Loss function: 5.166, Average Loss: 5.194, avg. samples / sec: 1060.83
:::MLLOG {"namespace": "", "time_ms": 1639066094717, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066094719, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.138, Average Loss: 5.191, avg. samples / sec: 1092.44
Iteration:   4140, Loss function: 5.023, Average Loss: 5.186, avg. samples / sec: 1080.45
Iteration:   4160, Loss function: 4.932, Average Loss: 5.179, avg. samples / sec: 1054.87
Iteration:   4180, Loss function: 4.905, Average Loss: 5.174, avg. samples / sec: 1036.74
Iteration:   4200, Loss function: 4.917, Average Loss: 5.169, avg. samples / sec: 1093.39
Iteration:   4220, Loss function: 4.926, Average Loss: 5.164, avg. samples / sec: 1071.49
Iteration:   4240, Loss function: 4.952, Average Loss: 5.158, avg. samples / sec: 1064.83
Iteration:   4260, Loss function: 5.066, Average Loss: 5.154, avg. samples / sec: 985.84
Iteration:   4280, Loss function: 5.026, Average Loss: 5.148, avg. samples / sec: 1000.70
Iteration:   4300, Loss function: 4.791, Average Loss: 5.142, avg. samples / sec: 1038.67
Iteration:   4320, Loss function: 4.625, Average Loss: 5.136, avg. samples / sec: 1045.88
Iteration:   4340, Loss function: 4.587, Average Loss: 5.131, avg. samples / sec: 1022.57
Iteration:   4360, Loss function: 4.964, Average Loss: 5.127, avg. samples / sec: 1000.20
Iteration:   4380, Loss function: 5.055, Average Loss: 5.121, avg. samples / sec: 1078.66
Iteration:   4400, Loss function: 4.769, Average Loss: 5.118, avg. samples / sec: 1040.40
Iteration:   4420, Loss function: 4.989, Average Loss: 5.114, avg. samples / sec: 954.51
Iteration:   4440, Loss function: 4.758, Average Loss: 5.109, avg. samples / sec: 996.76
Iteration:   4460, Loss function: 5.081, Average Loss: 5.104, avg. samples / sec: 996.42
Iteration:   4480, Loss function: 5.020, Average Loss: 5.101, avg. samples / sec: 1002.28
Iteration:   4500, Loss function: 5.020, Average Loss: 5.097, avg. samples / sec: 1015.64
Iteration:   4520, Loss function: 4.888, Average Loss: 5.093, avg. samples / sec: 1036.04
Iteration:   4540, Loss function: 5.117, Average Loss: 5.088, avg. samples / sec: 851.42
Iteration:   4560, Loss function: 4.800, Average Loss: 5.083, avg. samples / sec: 1062.35
Iteration:   4580, Loss function: 4.745, Average Loss: 5.081, avg. samples / sec: 1066.01
Iteration:   4600, Loss function: 4.844, Average Loss: 5.077, avg. samples / sec: 1042.37
Iteration:   4620, Loss function: 4.863, Average Loss: 5.073, avg. samples / sec: 994.78
Iteration:   4640, Loss function: 4.835, Average Loss: 5.069, avg. samples / sec: 943.41
Iteration:   4660, Loss function: 4.695, Average Loss: 5.065, avg. samples / sec: 1043.17
Iteration:   4680, Loss function: 5.320, Average Loss: 5.060, avg. samples / sec: 1025.28
Iteration:   4700, Loss function: 4.649, Average Loss: 5.056, avg. samples / sec: 1048.79
Iteration:   4720, Loss function: 4.748, Average Loss: 5.052, avg. samples / sec: 957.25
Iteration:   4740, Loss function: 4.748, Average Loss: 5.047, avg. samples / sec: 995.11
Iteration:   4760, Loss function: 4.748, Average Loss: 5.044, avg. samples / sec: 1016.03
Iteration:   4780, Loss function: 5.205, Average Loss: 5.040, avg. samples / sec: 1027.73
Iteration:   4800, Loss function: 4.886, Average Loss: 5.037, avg. samples / sec: 1053.09
Iteration:   4820, Loss function: 4.681, Average Loss: 5.035, avg. samples / sec: 962.17
Iteration:   4840, Loss function: 5.187, Average Loss: 5.031, avg. samples / sec: 934.27
Iteration:   4860, Loss function: 4.693, Average Loss: 5.027, avg. samples / sec: 980.23
Iteration:   4880, Loss function: 5.304, Average Loss: 5.023, avg. samples / sec: 1022.83
Iteration:   4900, Loss function: 4.522, Average Loss: 5.019, avg. samples / sec: 1018.66
Iteration:   4920, Loss function: 4.601, Average Loss: 5.015, avg. samples / sec: 1105.54
Iteration:   4940, Loss function: 4.823, Average Loss: 5.010, avg. samples / sec: 1036.71
Iteration:   4960, Loss function: 4.639, Average Loss: 5.007, avg. samples / sec: 1010.22
Iteration:   4980, Loss function: 4.547, Average Loss: 5.002, avg. samples / sec: 1048.78
Iteration:   5000, Loss function: 4.878, Average Loss: 4.998, avg. samples / sec: 999.68
Iteration:   5020, Loss function: 5.142, Average Loss: 4.996, avg. samples / sec: 986.79
Iteration:   5040, Loss function: 4.839, Average Loss: 4.993, avg. samples / sec: 1069.85
Iteration:   5060, Loss function: 4.912, Average Loss: 4.991, avg. samples / sec: 1058.70
Iteration:   5080, Loss function: 4.431, Average Loss: 4.988, avg. samples / sec: 1046.52
Iteration:   5100, Loss function: 4.747, Average Loss: 4.986, avg. samples / sec: 1025.49
Iteration:   5120, Loss function: 4.735, Average Loss: 4.984, avg. samples / sec: 1080.13
Iteration:   5140, Loss function: 4.819, Average Loss: 4.980, avg. samples / sec: 1035.64
:::MLLOG {"namespace": "", "time_ms": 1639066209599, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.29 s
:::MLLOG {"namespace": "", "time_ms": 1639066242951, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066243001, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066243002, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.929, Average Loss: 4.975, avg. samples / sec: 64.56
DONE (t=2.58s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10978
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22124
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09902
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19304
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13890
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20449
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10978 AP goal: 0.10000
Iteration:   5180, Loss function: 4.957, Average Loss: 4.970, avg. samples / sec: 1225.97
:::MLLOG {"namespace": "", "time_ms": 1639066246488, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246488, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10978224238274892, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246489, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246615, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 16:10:48 UTC 2021: done waiting for 1 executions'
Thu Dec  9 16:10:48 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639065601006, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639065601127, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1017602182, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1017602182
:::MLLOG {"namespace": "", "time_ms": 1639065602843, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639065602843, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639065602847, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639065602848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639065625947, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639065625947, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639065627183, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639065627183, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639065627456, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639065627457, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639065627458, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.742, Average Loss: 0.023, avg. samples / sec: 4.70
Iteration:     20, Loss function: 21.138, Average Loss: 0.456, avg. samples / sec: 1048.59
Iteration:     40, Loss function: 20.787, Average Loss: 0.858, avg. samples / sec: 1059.69
Iteration:     60, Loss function: 20.396, Average Loss: 1.248, avg. samples / sec: 1057.20
Iteration:     80, Loss function: 20.217, Average Loss: 1.623, avg. samples / sec: 1009.17
Iteration:    100, Loss function: 16.331, Average Loss: 1.959, avg. samples / sec: 1019.33
Iteration:    120, Loss function: 12.717, Average Loss: 2.186, avg. samples / sec: 1020.12
Iteration:    140, Loss function: 10.029, Average Loss: 2.349, avg. samples / sec: 986.91
Iteration:    160, Loss function: 9.517, Average Loss: 2.493, avg. samples / sec: 976.95
Iteration:    180, Loss function: 9.163, Average Loss: 2.625, avg. samples / sec: 1062.46
Iteration:    200, Loss function: 8.794, Average Loss: 2.750, avg. samples / sec: 978.85
Iteration:    220, Loss function: 8.677, Average Loss: 2.870, avg. samples / sec: 973.11
Iteration:    240, Loss function: 8.732, Average Loss: 2.987, avg. samples / sec: 1052.08
Iteration:    260, Loss function: 8.651, Average Loss: 3.100, avg. samples / sec: 986.20
Iteration:    280, Loss function: 8.697, Average Loss: 3.210, avg. samples / sec: 1041.30
Iteration:    300, Loss function: 8.447, Average Loss: 3.315, avg. samples / sec: 1008.22
Iteration:    320, Loss function: 8.394, Average Loss: 3.416, avg. samples / sec: 1026.08
Iteration:    340, Loss function: 8.248, Average Loss: 3.512, avg. samples / sec: 1026.20
Iteration:    360, Loss function: 8.072, Average Loss: 3.606, avg. samples / sec: 925.29
Iteration:    380, Loss function: 7.952, Average Loss: 3.697, avg. samples / sec: 741.12
Iteration:    400, Loss function: 8.055, Average Loss: 3.780, avg. samples / sec: 1017.47
Iteration:    420, Loss function: 7.571, Average Loss: 3.860, avg. samples / sec: 1000.30
Iteration:    440, Loss function: 7.781, Average Loss: 3.939, avg. samples / sec: 1046.28
Iteration:    460, Loss function: 7.811, Average Loss: 4.014, avg. samples / sec: 1025.02
Iteration:    480, Loss function: 7.519, Average Loss: 4.086, avg. samples / sec: 942.83
Iteration:    500, Loss function: 7.543, Average Loss: 4.156, avg. samples / sec: 905.77
Iteration:    520, Loss function: 7.488, Average Loss: 4.223, avg. samples / sec: 994.19
Iteration:    540, Loss function: 7.479, Average Loss: 4.288, avg. samples / sec: 1023.57
Iteration:    560, Loss function: 7.236, Average Loss: 4.353, avg. samples / sec: 1013.22
Iteration:    580, Loss function: 7.195, Average Loss: 4.414, avg. samples / sec: 897.11
Iteration:    600, Loss function: 7.240, Average Loss: 4.471, avg. samples / sec: 917.83
Iteration:    620, Loss function: 7.080, Average Loss: 4.526, avg. samples / sec: 988.30
Iteration:    640, Loss function: 6.997, Average Loss: 4.579, avg. samples / sec: 1028.25
Iteration:    660, Loss function: 7.031, Average Loss: 4.630, avg. samples / sec: 1004.27
Iteration:    680, Loss function: 7.222, Average Loss: 4.681, avg. samples / sec: 1024.36
Iteration:    700, Loss function: 6.852, Average Loss: 4.729, avg. samples / sec: 883.00
Iteration:    720, Loss function: 6.965, Average Loss: 4.776, avg. samples / sec: 1022.96
Iteration:    740, Loss function: 6.976, Average Loss: 4.821, avg. samples / sec: 1082.86
Iteration:    760, Loss function: 6.964, Average Loss: 4.863, avg. samples / sec: 1010.20
Iteration:    780, Loss function: 6.821, Average Loss: 4.904, avg. samples / sec: 978.08
Iteration:    800, Loss function: 7.148, Average Loss: 4.943, avg. samples / sec: 1007.53
Iteration:    820, Loss function: 6.800, Average Loss: 4.980, avg. samples / sec: 970.00
Iteration:    840, Loss function: 6.767, Average Loss: 5.016, avg. samples / sec: 896.69
Iteration:    860, Loss function: 6.730, Average Loss: 5.050, avg. samples / sec: 1010.01
Iteration:    880, Loss function: 6.836, Average Loss: 5.083, avg. samples / sec: 950.76
Iteration:    900, Loss function: 6.832, Average Loss: 5.114, avg. samples / sec: 951.78
Iteration:    920, Loss function: 6.704, Average Loss: 5.144, avg. samples / sec: 847.66
Iteration:    940, Loss function: 6.817, Average Loss: 5.173, avg. samples / sec: 1014.55
Iteration:    960, Loss function: 6.426, Average Loss: 5.202, avg. samples / sec: 1005.19
Iteration:    980, Loss function: 6.576, Average Loss: 5.228, avg. samples / sec: 1047.59
Iteration:   1000, Loss function: 6.670, Average Loss: 5.254, avg. samples / sec: 977.84
Iteration:   1020, Loss function: 6.365, Average Loss: 5.277, avg. samples / sec: 994.95
:::MLLOG {"namespace": "", "time_ms": 1639065746423, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639065746425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.454, Average Loss: 5.302, avg. samples / sec: 1021.23
Iteration:   1060, Loss function: 6.292, Average Loss: 5.324, avg. samples / sec: 1018.39
Iteration:   1080, Loss function: 6.448, Average Loss: 5.346, avg. samples / sec: 994.85
Iteration:   1100, Loss function: 6.287, Average Loss: 5.366, avg. samples / sec: 984.96
Iteration:   1120, Loss function: 6.273, Average Loss: 5.387, avg. samples / sec: 987.84
Iteration:   1140, Loss function: 6.370, Average Loss: 5.406, avg. samples / sec: 1020.78
Iteration:   1160, Loss function: 6.188, Average Loss: 5.422, avg. samples / sec: 962.89
Iteration:   1180, Loss function: 6.248, Average Loss: 5.439, avg. samples / sec: 1020.76
Iteration:   1200, Loss function: 6.228, Average Loss: 5.455, avg. samples / sec: 1043.33
Iteration:   1220, Loss function: 6.174, Average Loss: 5.470, avg. samples / sec: 1033.19
Iteration:   1240, Loss function: 6.024, Average Loss: 5.483, avg. samples / sec: 1041.40
Iteration:   1260, Loss function: 6.240, Average Loss: 5.495, avg. samples / sec: 978.69
Iteration:   1280, Loss function: 5.844, Average Loss: 5.508, avg. samples / sec: 1025.73
Iteration:   1300, Loss function: 6.063, Average Loss: 5.520, avg. samples / sec: 941.43
Iteration:   1320, Loss function: 6.109, Average Loss: 5.532, avg. samples / sec: 1030.18
Iteration:   1340, Loss function: 5.896, Average Loss: 5.541, avg. samples / sec: 1059.87
Iteration:   1360, Loss function: 6.051, Average Loss: 5.551, avg. samples / sec: 1006.35
Iteration:   1380, Loss function: 6.124, Average Loss: 5.561, avg. samples / sec: 1003.48
Iteration:   1400, Loss function: 6.123, Average Loss: 5.569, avg. samples / sec: 994.82
Iteration:   1420, Loss function: 5.906, Average Loss: 5.578, avg. samples / sec: 1026.65
Iteration:   1440, Loss function: 6.299, Average Loss: 5.586, avg. samples / sec: 1001.38
Iteration:   1460, Loss function: 6.090, Average Loss: 5.593, avg. samples / sec: 1024.87
Iteration:   1480, Loss function: 5.979, Average Loss: 5.601, avg. samples / sec: 971.60
Iteration:   1500, Loss function: 5.887, Average Loss: 5.609, avg. samples / sec: 991.76
Iteration:   1520, Loss function: 6.016, Average Loss: 5.614, avg. samples / sec: 1033.74
Iteration:   1540, Loss function: 6.111, Average Loss: 5.617, avg. samples / sec: 1045.58
Iteration:   1560, Loss function: 5.655, Average Loss: 5.623, avg. samples / sec: 1026.19
Iteration:   1580, Loss function: 5.671, Average Loss: 5.627, avg. samples / sec: 1015.44
Iteration:   1600, Loss function: 6.062, Average Loss: 5.632, avg. samples / sec: 1049.23
Iteration:   1620, Loss function: 5.843, Average Loss: 5.635, avg. samples / sec: 1023.82
Iteration:   1640, Loss function: 6.026, Average Loss: 5.638, avg. samples / sec: 961.42
Iteration:   1660, Loss function: 6.091, Average Loss: 5.642, avg. samples / sec: 1019.22
Iteration:   1680, Loss function: 5.696, Average Loss: 5.646, avg. samples / sec: 1029.83
Iteration:   1700, Loss function: 5.483, Average Loss: 5.650, avg. samples / sec: 1018.82
Iteration:   1720, Loss function: 5.595, Average Loss: 5.653, avg. samples / sec: 1007.39
Iteration:   1740, Loss function: 5.845, Average Loss: 5.655, avg. samples / sec: 1027.66
Iteration:   1760, Loss function: 5.584, Average Loss: 5.657, avg. samples / sec: 1058.59
Iteration:   1780, Loss function: 5.613, Average Loss: 5.658, avg. samples / sec: 1035.67
Iteration:   1800, Loss function: 5.636, Average Loss: 5.660, avg. samples / sec: 1031.01
Iteration:   1820, Loss function: 5.854, Average Loss: 5.662, avg. samples / sec: 988.88
Iteration:   1840, Loss function: 5.931, Average Loss: 5.663, avg. samples / sec: 944.30
Iteration:   1860, Loss function: 5.512, Average Loss: 5.662, avg. samples / sec: 961.04
Iteration:   1880, Loss function: 5.796, Average Loss: 5.664, avg. samples / sec: 999.62
Iteration:   1900, Loss function: 5.745, Average Loss: 5.664, avg. samples / sec: 1027.69
Iteration:   1920, Loss function: 5.714, Average Loss: 5.664, avg. samples / sec: 998.41
Iteration:   1940, Loss function: 5.938, Average Loss: 5.663, avg. samples / sec: 1010.64
Iteration:   1960, Loss function: 5.482, Average Loss: 5.663, avg. samples / sec: 980.14
Iteration:   1980, Loss function: 5.702, Average Loss: 5.662, avg. samples / sec: 1060.87
Iteration:   2000, Loss function: 5.610, Average Loss: 5.661, avg. samples / sec: 973.85
Iteration:   2020, Loss function: 5.762, Average Loss: 5.660, avg. samples / sec: 987.87
Iteration:   2040, Loss function: 5.709, Average Loss: 5.659, avg. samples / sec: 1057.58
:::MLLOG {"namespace": "", "time_ms": 1639065862585, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639065862587, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.470, Average Loss: 5.657, avg. samples / sec: 990.26
Iteration:   2080, Loss function: 5.165, Average Loss: 5.654, avg. samples / sec: 976.99
Iteration:   2100, Loss function: 5.478, Average Loss: 5.652, avg. samples / sec: 1003.77
Iteration:   2120, Loss function: 5.331, Average Loss: 5.650, avg. samples / sec: 975.71
Iteration:   2140, Loss function: 5.485, Average Loss: 5.647, avg. samples / sec: 1027.33
Iteration:   2160, Loss function: 5.459, Average Loss: 5.644, avg. samples / sec: 981.03
Iteration:   2180, Loss function: 5.326, Average Loss: 5.642, avg. samples / sec: 992.40
Iteration:   2200, Loss function: 5.358, Average Loss: 5.637, avg. samples / sec: 1085.14
Iteration:   2220, Loss function: 5.538, Average Loss: 5.635, avg. samples / sec: 988.10
Iteration:   2240, Loss function: 5.453, Average Loss: 5.633, avg. samples / sec: 1061.88
Iteration:   2260, Loss function: 5.232, Average Loss: 5.629, avg. samples / sec: 1004.91
Iteration:   2280, Loss function: 5.192, Average Loss: 5.626, avg. samples / sec: 1005.33
Iteration:   2300, Loss function: 5.135, Average Loss: 5.623, avg. samples / sec: 1065.88
Iteration:   2320, Loss function: 5.556, Average Loss: 5.619, avg. samples / sec: 1076.97
Iteration:   2340, Loss function: 5.507, Average Loss: 5.616, avg. samples / sec: 1020.01
Iteration:   2360, Loss function: 5.387, Average Loss: 5.611, avg. samples / sec: 1059.68
Iteration:   2380, Loss function: 5.425, Average Loss: 5.607, avg. samples / sec: 998.88
Iteration:   2400, Loss function: 5.748, Average Loss: 5.603, avg. samples / sec: 1014.47
Iteration:   2420, Loss function: 5.449, Average Loss: 5.599, avg. samples / sec: 1086.43
Iteration:   2440, Loss function: 5.276, Average Loss: 5.596, avg. samples / sec: 999.83
Iteration:   2460, Loss function: 5.248, Average Loss: 5.592, avg. samples / sec: 1042.31
Iteration:   2480, Loss function: 5.282, Average Loss: 5.588, avg. samples / sec: 1037.66
Iteration:   2500, Loss function: 5.477, Average Loss: 5.584, avg. samples / sec: 1017.04
Iteration:   2520, Loss function: 5.541, Average Loss: 5.579, avg. samples / sec: 1059.06
Iteration:   2540, Loss function: 5.461, Average Loss: 5.576, avg. samples / sec: 1016.01
Iteration:   2560, Loss function: 5.269, Average Loss: 5.573, avg. samples / sec: 984.43
Iteration:   2580, Loss function: 5.359, Average Loss: 5.569, avg. samples / sec: 1001.00
Iteration:   2600, Loss function: 5.571, Average Loss: 5.566, avg. samples / sec: 963.17
Iteration:   2620, Loss function: 5.640, Average Loss: 5.561, avg. samples / sec: 993.23
Iteration:   2640, Loss function: 5.292, Average Loss: 5.557, avg. samples / sec: 970.76
Iteration:   2660, Loss function: 5.272, Average Loss: 5.553, avg. samples / sec: 1012.64
Iteration:   2680, Loss function: 4.904, Average Loss: 5.549, avg. samples / sec: 1114.78
Iteration:   2700, Loss function: 5.092, Average Loss: 5.542, avg. samples / sec: 1041.11
Iteration:   2720, Loss function: 5.442, Average Loss: 5.538, avg. samples / sec: 1045.41
Iteration:   2740, Loss function: 4.974, Average Loss: 5.533, avg. samples / sec: 1085.80
Iteration:   2760, Loss function: 4.970, Average Loss: 5.528, avg. samples / sec: 1096.62
Iteration:   2780, Loss function: 5.447, Average Loss: 5.524, avg. samples / sec: 1017.09
Iteration:   2800, Loss function: 5.123, Average Loss: 5.519, avg. samples / sec: 1021.67
Iteration:   2820, Loss function: 5.447, Average Loss: 5.514, avg. samples / sec: 976.91
Iteration:   2840, Loss function: 5.259, Average Loss: 5.509, avg. samples / sec: 1033.78
Iteration:   2860, Loss function: 5.037, Average Loss: 5.504, avg. samples / sec: 955.32
Iteration:   2880, Loss function: 5.364, Average Loss: 5.500, avg. samples / sec: 1017.44
Iteration:   2900, Loss function: 5.074, Average Loss: 5.495, avg. samples / sec: 992.35
Iteration:   2920, Loss function: 5.168, Average Loss: 5.489, avg. samples / sec: 1004.19
Iteration:   2940, Loss function: 5.145, Average Loss: 5.485, avg. samples / sec: 1076.23
Iteration:   2960, Loss function: 5.389, Average Loss: 5.480, avg. samples / sec: 978.27
Iteration:   2980, Loss function: 5.401, Average Loss: 5.476, avg. samples / sec: 942.81
Iteration:   3000, Loss function: 5.183, Average Loss: 5.471, avg. samples / sec: 1095.38
Iteration:   3020, Loss function: 5.305, Average Loss: 5.465, avg. samples / sec: 1004.96
Iteration:   3040, Loss function: 5.308, Average Loss: 5.459, avg. samples / sec: 992.42
Iteration:   3060, Loss function: 5.033, Average Loss: 5.453, avg. samples / sec: 1016.05
Iteration:   3080, Loss function: 4.886, Average Loss: 5.449, avg. samples / sec: 1027.05
:::MLLOG {"namespace": "", "time_ms": 1639065977776, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639065977778, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.325, Average Loss: 5.444, avg. samples / sec: 1005.74
Iteration:   3120, Loss function: 5.011, Average Loss: 5.437, avg. samples / sec: 1044.28
Iteration:   3140, Loss function: 5.053, Average Loss: 5.432, avg. samples / sec: 1041.01
Iteration:   3160, Loss function: 5.501, Average Loss: 5.426, avg. samples / sec: 1070.79
Iteration:   3180, Loss function: 4.962, Average Loss: 5.421, avg. samples / sec: 944.92
Iteration:   3200, Loss function: 5.229, Average Loss: 5.416, avg. samples / sec: 1036.06
Iteration:   3220, Loss function: 5.154, Average Loss: 5.411, avg. samples / sec: 988.72
Iteration:   3240, Loss function: 5.204, Average Loss: 5.406, avg. samples / sec: 1017.42
Iteration:   3260, Loss function: 5.063, Average Loss: 5.400, avg. samples / sec: 1032.86
Iteration:   3280, Loss function: 4.805, Average Loss: 5.394, avg. samples / sec: 1011.97
Iteration:   3300, Loss function: 4.858, Average Loss: 5.387, avg. samples / sec: 996.06
Iteration:   3320, Loss function: 4.932, Average Loss: 5.382, avg. samples / sec: 999.57
Iteration:   3340, Loss function: 5.178, Average Loss: 5.377, avg. samples / sec: 929.46
Iteration:   3360, Loss function: 5.061, Average Loss: 5.370, avg. samples / sec: 1068.59
Iteration:   3380, Loss function: 5.171, Average Loss: 5.364, avg. samples / sec: 1057.41
Iteration:   3400, Loss function: 4.910, Average Loss: 5.359, avg. samples / sec: 1031.01
Iteration:   3420, Loss function: 5.311, Average Loss: 5.353, avg. samples / sec: 1057.85
Iteration:   3440, Loss function: 4.830, Average Loss: 5.349, avg. samples / sec: 1014.95
Iteration:   3460, Loss function: 5.409, Average Loss: 5.344, avg. samples / sec: 1013.28
Iteration:   3480, Loss function: 5.260, Average Loss: 5.339, avg. samples / sec: 1003.73
Iteration:   3500, Loss function: 5.286, Average Loss: 5.334, avg. samples / sec: 992.31
Iteration:   3520, Loss function: 5.064, Average Loss: 5.330, avg. samples / sec: 1001.05
Iteration:   3540, Loss function: 5.084, Average Loss: 5.325, avg. samples / sec: 1010.41
Iteration:   3560, Loss function: 4.795, Average Loss: 5.321, avg. samples / sec: 1001.24
Iteration:   3580, Loss function: 4.951, Average Loss: 5.316, avg. samples / sec: 1048.33
Iteration:   3600, Loss function: 5.142, Average Loss: 5.310, avg. samples / sec: 1012.66
Iteration:   3620, Loss function: 4.960, Average Loss: 5.305, avg. samples / sec: 944.67
Iteration:   3640, Loss function: 4.743, Average Loss: 5.299, avg. samples / sec: 899.98
Iteration:   3660, Loss function: 5.068, Average Loss: 5.295, avg. samples / sec: 1045.96
Iteration:   3680, Loss function: 5.115, Average Loss: 5.290, avg. samples / sec: 950.86
Iteration:   3700, Loss function: 5.044, Average Loss: 5.284, avg. samples / sec: 973.03
Iteration:   3720, Loss function: 4.961, Average Loss: 5.277, avg. samples / sec: 992.06
Iteration:   3740, Loss function: 5.217, Average Loss: 5.274, avg. samples / sec: 930.59
Iteration:   3760, Loss function: 5.176, Average Loss: 5.269, avg. samples / sec: 1022.38
Iteration:   3780, Loss function: 5.033, Average Loss: 5.264, avg. samples / sec: 946.50
Iteration:   3800, Loss function: 5.177, Average Loss: 5.260, avg. samples / sec: 1038.55
Iteration:   3820, Loss function: 5.288, Average Loss: 5.255, avg. samples / sec: 1045.53
Iteration:   3840, Loss function: 4.729, Average Loss: 5.250, avg. samples / sec: 970.47
Iteration:   3860, Loss function: 4.932, Average Loss: 5.245, avg. samples / sec: 987.37
Iteration:   3880, Loss function: 5.059, Average Loss: 5.241, avg. samples / sec: 979.85
Iteration:   3900, Loss function: 5.143, Average Loss: 5.236, avg. samples / sec: 999.89
Iteration:   3920, Loss function: 5.006, Average Loss: 5.230, avg. samples / sec: 1016.64
Iteration:   3940, Loss function: 5.045, Average Loss: 5.226, avg. samples / sec: 1018.20
Iteration:   3960, Loss function: 4.753, Average Loss: 5.222, avg. samples / sec: 975.81
Iteration:   3980, Loss function: 4.881, Average Loss: 5.219, avg. samples / sec: 931.88
Iteration:   4000, Loss function: 5.103, Average Loss: 5.215, avg. samples / sec: 1019.04
Iteration:   4020, Loss function: 4.908, Average Loss: 5.209, avg. samples / sec: 989.41
Iteration:   4040, Loss function: 5.254, Average Loss: 5.205, avg. samples / sec: 975.80
Iteration:   4060, Loss function: 5.141, Average Loss: 5.202, avg. samples / sec: 979.78
Iteration:   4080, Loss function: 5.149, Average Loss: 5.197, avg. samples / sec: 1033.45
Iteration:   4100, Loss function: 5.166, Average Loss: 5.194, avg. samples / sec: 1060.83
:::MLLOG {"namespace": "", "time_ms": 1639066094717, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639066094719, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.138, Average Loss: 5.191, avg. samples / sec: 1092.44
Iteration:   4140, Loss function: 5.023, Average Loss: 5.186, avg. samples / sec: 1080.45
Iteration:   4160, Loss function: 4.932, Average Loss: 5.179, avg. samples / sec: 1054.87
Iteration:   4180, Loss function: 4.905, Average Loss: 5.174, avg. samples / sec: 1036.74
Iteration:   4200, Loss function: 4.917, Average Loss: 5.169, avg. samples / sec: 1093.39
Iteration:   4220, Loss function: 4.926, Average Loss: 5.164, avg. samples / sec: 1071.49
Iteration:   4240, Loss function: 4.952, Average Loss: 5.158, avg. samples / sec: 1064.83
Iteration:   4260, Loss function: 5.066, Average Loss: 5.154, avg. samples / sec: 985.84
Iteration:   4280, Loss function: 5.026, Average Loss: 5.148, avg. samples / sec: 1000.70
Iteration:   4300, Loss function: 4.791, Average Loss: 5.142, avg. samples / sec: 1038.67
Iteration:   4320, Loss function: 4.625, Average Loss: 5.136, avg. samples / sec: 1045.88
Iteration:   4340, Loss function: 4.587, Average Loss: 5.131, avg. samples / sec: 1022.57
Iteration:   4360, Loss function: 4.964, Average Loss: 5.127, avg. samples / sec: 1000.20
Iteration:   4380, Loss function: 5.055, Average Loss: 5.121, avg. samples / sec: 1078.66
Iteration:   4400, Loss function: 4.769, Average Loss: 5.118, avg. samples / sec: 1040.40
Iteration:   4420, Loss function: 4.989, Average Loss: 5.114, avg. samples / sec: 954.51
Iteration:   4440, Loss function: 4.758, Average Loss: 5.109, avg. samples / sec: 996.76
Iteration:   4460, Loss function: 5.081, Average Loss: 5.104, avg. samples / sec: 996.42
Iteration:   4480, Loss function: 5.020, Average Loss: 5.101, avg. samples / sec: 1002.28
Iteration:   4500, Loss function: 5.020, Average Loss: 5.097, avg. samples / sec: 1015.64
Iteration:   4520, Loss function: 4.888, Average Loss: 5.093, avg. samples / sec: 1036.04
Iteration:   4540, Loss function: 5.117, Average Loss: 5.088, avg. samples / sec: 851.42
Iteration:   4560, Loss function: 4.800, Average Loss: 5.083, avg. samples / sec: 1062.35
Iteration:   4580, Loss function: 4.745, Average Loss: 5.081, avg. samples / sec: 1066.01
Iteration:   4600, Loss function: 4.844, Average Loss: 5.077, avg. samples / sec: 1042.37
Iteration:   4620, Loss function: 4.863, Average Loss: 5.073, avg. samples / sec: 994.78
Iteration:   4640, Loss function: 4.835, Average Loss: 5.069, avg. samples / sec: 943.41
Iteration:   4660, Loss function: 4.695, Average Loss: 5.065, avg. samples / sec: 1043.17
Iteration:   4680, Loss function: 5.320, Average Loss: 5.060, avg. samples / sec: 1025.28
Iteration:   4700, Loss function: 4.649, Average Loss: 5.056, avg. samples / sec: 1048.79
Iteration:   4720, Loss function: 4.748, Average Loss: 5.052, avg. samples / sec: 957.25
Iteration:   4740, Loss function: 4.748, Average Loss: 5.047, avg. samples / sec: 995.11
Iteration:   4760, Loss function: 4.748, Average Loss: 5.044, avg. samples / sec: 1016.03
Iteration:   4780, Loss function: 5.205, Average Loss: 5.040, avg. samples / sec: 1027.73
Iteration:   4800, Loss function: 4.886, Average Loss: 5.037, avg. samples / sec: 1053.09
Iteration:   4820, Loss function: 4.681, Average Loss: 5.035, avg. samples / sec: 962.17
Iteration:   4840, Loss function: 5.187, Average Loss: 5.031, avg. samples / sec: 934.27
Iteration:   4860, Loss function: 4.693, Average Loss: 5.027, avg. samples / sec: 980.23
Iteration:   4880, Loss function: 5.304, Average Loss: 5.023, avg. samples / sec: 1022.83
Iteration:   4900, Loss function: 4.522, Average Loss: 5.019, avg. samples / sec: 1018.66
Iteration:   4920, Loss function: 4.601, Average Loss: 5.015, avg. samples / sec: 1105.54
Iteration:   4940, Loss function: 4.823, Average Loss: 5.010, avg. samples / sec: 1036.71
Iteration:   4960, Loss function: 4.639, Average Loss: 5.007, avg. samples / sec: 1010.22
Iteration:   4980, Loss function: 4.547, Average Loss: 5.002, avg. samples / sec: 1048.78
Iteration:   5000, Loss function: 4.878, Average Loss: 4.998, avg. samples / sec: 999.68
Iteration:   5020, Loss function: 5.142, Average Loss: 4.996, avg. samples / sec: 986.79
Iteration:   5040, Loss function: 4.839, Average Loss: 4.993, avg. samples / sec: 1069.85
Iteration:   5060, Loss function: 4.912, Average Loss: 4.991, avg. samples / sec: 1058.70
Iteration:   5080, Loss function: 4.431, Average Loss: 4.988, avg. samples / sec: 1046.52
Iteration:   5100, Loss function: 4.747, Average Loss: 4.986, avg. samples / sec: 1025.49
Iteration:   5120, Loss function: 4.735, Average Loss: 4.984, avg. samples / sec: 1080.13
Iteration:   5140, Loss function: 4.819, Average Loss: 4.980, avg. samples / sec: 1035.64
:::MLLOG {"namespace": "", "time_ms": 1639066209599, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.29 s
:::MLLOG {"namespace": "", "time_ms": 1639066242951, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639066243001, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066243002, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.68s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.929, Average Loss: 4.975, avg. samples / sec: 64.56
DONE (t=2.58s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10978
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22124
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09902
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19304
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13890
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20449
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21630
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10978 AP goal: 0.10000
Iteration:   5180, Loss function: 4.957, Average Loss: 4.970, avg. samples / sec: 1225.97
:::MLLOG {"namespace": "", "time_ms": 1639066246488, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246488, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10978224238274892, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246489, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639066246615, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639066248
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 04:10:48 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 03:59:44 PM'
START TIMING RUN WAS 2021-12-09 03:59:44 PM
ENDING TIMING RUN AT 2021-12-09 04:10:48 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 04:10:48 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
+ result=664
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,664,nvidia,2021-12-09 03:59:44 PM'
RESULT,SINGLE_STAGE_DETECTOR,,664,nvidia,2021-12-09 03:59:44 PM
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
