8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab).'
No MIG GPU available, using the full GPUs (GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab).
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752433
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:13 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:13 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:13 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:13 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-9479c to the sync file ...
run-mlperf--1-9479c Found 2 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
run-mlperf--1-9479c Found 3 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
run-mlperf--1-9479c Found 4 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
run-mlperf--1-9479c Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
Fri Dec 17 14:47:33 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
Running on all the 1 GPUs 
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752455355, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752455487, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1613841238, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1613841238
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752457225, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752457225, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752480300, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752480301, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752482817, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482817, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483138, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483139, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483140, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.717, Average Loss: 0.023, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.208, Average Loss: 0.455, avg. samples / sec: 968.57
Iteration:     40, Loss function: 20.829, Average Loss: 0.857, avg. samples / sec: 1021.29
Iteration:     60, Loss function: 20.326, Average Loss: 1.247, avg. samples / sec: 982.72
Iteration:     80, Loss function: 19.867, Average Loss: 1.621, avg. samples / sec: 938.75
Iteration:    100, Loss function: 15.362, Average Loss: 1.948, avg. samples / sec: 944.41
Iteration:    120, Loss function: 10.750, Average Loss: 2.151, avg. samples / sec: 966.85
Iteration:    140, Loss function: 9.611, Average Loss: 2.306, avg. samples / sec: 923.88
Iteration:    160, Loss function: 9.002, Average Loss: 2.445, avg. samples / sec: 954.50
Iteration:    180, Loss function: 8.915, Average Loss: 2.574, avg. samples / sec: 972.84
Iteration:    200, Loss function: 8.585, Average Loss: 2.698, avg. samples / sec: 927.09
Iteration:    220, Loss function: 8.696, Average Loss: 2.819, avg. samples / sec: 953.67
Iteration:    240, Loss function: 8.857, Average Loss: 2.937, avg. samples / sec: 1002.61
Iteration:    260, Loss function: 8.735, Average Loss: 3.052, avg. samples / sec: 964.51
Iteration:    280, Loss function: 8.692, Average Loss: 3.162, avg. samples / sec: 917.83
Iteration:    300, Loss function: 8.668, Average Loss: 3.270, avg. samples / sec: 973.61
Iteration:    320, Loss function: 8.374, Average Loss: 3.374, avg. samples / sec: 1018.73
Iteration:    340, Loss function: 8.212, Average Loss: 3.472, avg. samples / sec: 958.01
Iteration:    360, Loss function: 8.223, Average Loss: 3.564, avg. samples / sec: 1024.92
Iteration:    380, Loss function: 7.978, Average Loss: 3.653, avg. samples / sec: 982.27
Iteration:    400, Loss function: 7.929, Average Loss: 3.737, avg. samples / sec: 1039.44
Iteration:    420, Loss function: 7.830, Average Loss: 3.819, avg. samples / sec: 1022.76
Iteration:    440, Loss function: 7.689, Average Loss: 3.898, avg. samples / sec: 1015.26
Iteration:    460, Loss function: 7.868, Average Loss: 3.975, avg. samples / sec: 998.80
Iteration:    480, Loss function: 7.481, Average Loss: 4.050, avg. samples / sec: 1016.53
Iteration:    500, Loss function: 7.558, Average Loss: 4.122, avg. samples / sec: 1008.06
Iteration:    520, Loss function: 7.468, Average Loss: 4.190, avg. samples / sec: 744.84
Iteration:    540, Loss function: 7.536, Average Loss: 4.255, avg. samples / sec: 1105.16
Iteration:    560, Loss function: 7.172, Average Loss: 4.316, avg. samples / sec: 1036.33
Iteration:    580, Loss function: 7.289, Average Loss: 4.376, avg. samples / sec: 991.26
Iteration:    600, Loss function: 7.429, Average Loss: 4.435, avg. samples / sec: 1008.97
Iteration:    620, Loss function: 7.084, Average Loss: 4.492, avg. samples / sec: 966.96
Iteration:    640, Loss function: 6.931, Average Loss: 4.545, avg. samples / sec: 1008.06
Iteration:    660, Loss function: 7.197, Average Loss: 4.598, avg. samples / sec: 1055.45
Iteration:    680, Loss function: 7.222, Average Loss: 4.649, avg. samples / sec: 1015.33
Iteration:    700, Loss function: 6.803, Average Loss: 4.696, avg. samples / sec: 1037.20
Iteration:    720, Loss function: 6.993, Average Loss: 4.747, avg. samples / sec: 995.57
Iteration:    740, Loss function: 6.914, Average Loss: 4.792, avg. samples / sec: 998.68
Iteration:    760, Loss function: 7.104, Average Loss: 4.835, avg. samples / sec: 1015.75
Iteration:    780, Loss function: 6.915, Average Loss: 4.876, avg. samples / sec: 989.59
Iteration:    800, Loss function: 7.345, Average Loss: 4.917, avg. samples / sec: 939.23
Iteration:    820, Loss function: 6.882, Average Loss: 4.955, avg. samples / sec: 937.47
Iteration:    840, Loss function: 6.603, Average Loss: 4.991, avg. samples / sec: 947.88
Iteration:    860, Loss function: 6.777, Average Loss: 5.025, avg. samples / sec: 989.61
Iteration:    880, Loss function: 6.831, Average Loss: 5.059, avg. samples / sec: 1013.06
Iteration:    900, Loss function: 6.917, Average Loss: 5.090, avg. samples / sec: 988.48
Iteration:    920, Loss function: 6.587, Average Loss: 5.119, avg. samples / sec: 977.74
Iteration:    940, Loss function: 6.874, Average Loss: 5.148, avg. samples / sec: 971.79
Iteration:    960, Loss function: 6.467, Average Loss: 5.176, avg. samples / sec: 952.74
Iteration:    980, Loss function: 6.414, Average Loss: 5.203, avg. samples / sec: 1000.15
Iteration:   1000, Loss function: 6.530, Average Loss: 5.230, avg. samples / sec: 928.24
Iteration:   1020, Loss function: 6.263, Average Loss: 5.254, avg. samples / sec: 1017.70
:::MLLOG {"namespace": "", "time_ms": 1639752602743, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752602745, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.690, Average Loss: 5.278, avg. samples / sec: 1041.12
Iteration:   1060, Loss function: 6.247, Average Loss: 5.299, avg. samples / sec: 983.67
Iteration:   1080, Loss function: 6.434, Average Loss: 5.322, avg. samples / sec: 941.74
Iteration:   1100, Loss function: 6.153, Average Loss: 5.342, avg. samples / sec: 997.60
Iteration:   1120, Loss function: 6.219, Average Loss: 5.361, avg. samples / sec: 1056.21
Iteration:   1140, Loss function: 6.418, Average Loss: 5.380, avg. samples / sec: 1049.05
Iteration:   1160, Loss function: 6.159, Average Loss: 5.397, avg. samples / sec: 969.54
Iteration:   1180, Loss function: 6.293, Average Loss: 5.415, avg. samples / sec: 1053.75
Iteration:   1200, Loss function: 6.213, Average Loss: 5.431, avg. samples / sec: 1046.20
Iteration:   1220, Loss function: 6.258, Average Loss: 5.447, avg. samples / sec: 1002.78
Iteration:   1240, Loss function: 6.220, Average Loss: 5.460, avg. samples / sec: 1055.87
Iteration:   1260, Loss function: 5.895, Average Loss: 5.473, avg. samples / sec: 1066.04
Iteration:   1280, Loss function: 5.982, Average Loss: 5.485, avg. samples / sec: 1054.63
Iteration:   1300, Loss function: 6.135, Average Loss: 5.497, avg. samples / sec: 947.63
Iteration:   1320, Loss function: 6.146, Average Loss: 5.510, avg. samples / sec: 938.38
Iteration:   1340, Loss function: 5.870, Average Loss: 5.519, avg. samples / sec: 1016.04
Iteration:   1360, Loss function: 5.876, Average Loss: 5.530, avg. samples / sec: 1015.75
Iteration:   1380, Loss function: 6.061, Average Loss: 5.540, avg. samples / sec: 1034.00
Iteration:   1400, Loss function: 6.043, Average Loss: 5.548, avg. samples / sec: 1020.80
Iteration:   1420, Loss function: 5.963, Average Loss: 5.556, avg. samples / sec: 1007.73
Iteration:   1440, Loss function: 6.276, Average Loss: 5.564, avg. samples / sec: 1008.25
Iteration:   1460, Loss function: 6.199, Average Loss: 5.572, avg. samples / sec: 1035.81
Iteration:   1480, Loss function: 6.099, Average Loss: 5.580, avg. samples / sec: 965.47
Iteration:   1500, Loss function: 5.994, Average Loss: 5.588, avg. samples / sec: 1038.30
Iteration:   1520, Loss function: 6.006, Average Loss: 5.594, avg. samples / sec: 1034.93
Iteration:   1540, Loss function: 5.975, Average Loss: 5.598, avg. samples / sec: 934.31
Iteration:   1560, Loss function: 5.655, Average Loss: 5.602, avg. samples / sec: 972.71
Iteration:   1580, Loss function: 5.649, Average Loss: 5.608, avg. samples / sec: 978.59
Iteration:   1600, Loss function: 6.164, Average Loss: 5.614, avg. samples / sec: 1105.87
Iteration:   1620, Loss function: 5.784, Average Loss: 5.619, avg. samples / sec: 1036.00
Iteration:   1640, Loss function: 5.811, Average Loss: 5.622, avg. samples / sec: 1007.35
Iteration:   1660, Loss function: 6.052, Average Loss: 5.627, avg. samples / sec: 996.01
Iteration:   1680, Loss function: 5.696, Average Loss: 5.630, avg. samples / sec: 1020.79
Iteration:   1700, Loss function: 5.411, Average Loss: 5.633, avg. samples / sec: 1085.88
Iteration:   1720, Loss function: 5.859, Average Loss: 5.635, avg. samples / sec: 1068.64
Iteration:   1740, Loss function: 5.836, Average Loss: 5.639, avg. samples / sec: 985.44
Iteration:   1760, Loss function: 5.415, Average Loss: 5.641, avg. samples / sec: 1035.64
Iteration:   1780, Loss function: 5.870, Average Loss: 5.641, avg. samples / sec: 952.28
Iteration:   1800, Loss function: 5.585, Average Loss: 5.643, avg. samples / sec: 941.20
Iteration:   1820, Loss function: 6.068, Average Loss: 5.645, avg. samples / sec: 1053.02
Iteration:   1840, Loss function: 5.915, Average Loss: 5.646, avg. samples / sec: 1049.86
Iteration:   1860, Loss function: 5.604, Average Loss: 5.645, avg. samples / sec: 999.88
Iteration:   1880, Loss function: 5.966, Average Loss: 5.647, avg. samples / sec: 1042.65
Iteration:   1900, Loss function: 5.688, Average Loss: 5.648, avg. samples / sec: 1035.51
Iteration:   1920, Loss function: 5.650, Average Loss: 5.647, avg. samples / sec: 1058.56
Iteration:   1940, Loss function: 5.898, Average Loss: 5.648, avg. samples / sec: 1025.96
Iteration:   1960, Loss function: 5.431, Average Loss: 5.647, avg. samples / sec: 960.47
Iteration:   1980, Loss function: 5.742, Average Loss: 5.646, avg. samples / sec: 983.76
Iteration:   2000, Loss function: 5.677, Average Loss: 5.645, avg. samples / sec: 937.81
Iteration:   2020, Loss function: 5.621, Average Loss: 5.644, avg. samples / sec: 955.81
Iteration:   2040, Loss function: 5.620, Average Loss: 5.643, avg. samples / sec: 977.67
:::MLLOG {"namespace": "", "time_ms": 1639752719140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752719151, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.532, Average Loss: 5.640, avg. samples / sec: 957.23
Iteration:   2080, Loss function: 5.212, Average Loss: 5.637, avg. samples / sec: 969.48
Iteration:   2100, Loss function: 5.397, Average Loss: 5.634, avg. samples / sec: 981.80
Iteration:   2120, Loss function: 5.415, Average Loss: 5.632, avg. samples / sec: 1009.06
Iteration:   2140, Loss function: 5.582, Average Loss: 5.629, avg. samples / sec: 1107.66
Iteration:   2160, Loss function: 5.228, Average Loss: 5.626, avg. samples / sec: 980.31
Iteration:   2180, Loss function: 5.402, Average Loss: 5.624, avg. samples / sec: 1040.33
Iteration:   2200, Loss function: 5.545, Average Loss: 5.619, avg. samples / sec: 1001.16
Iteration:   2220, Loss function: 5.648, Average Loss: 5.618, avg. samples / sec: 1040.09
Iteration:   2240, Loss function: 5.385, Average Loss: 5.615, avg. samples / sec: 987.53
Iteration:   2260, Loss function: 5.383, Average Loss: 5.611, avg. samples / sec: 939.44
Iteration:   2280, Loss function: 5.081, Average Loss: 5.608, avg. samples / sec: 1052.62
Iteration:   2300, Loss function: 5.246, Average Loss: 5.605, avg. samples / sec: 976.20
Iteration:   2320, Loss function: 5.313, Average Loss: 5.603, avg. samples / sec: 920.06
Iteration:   2340, Loss function: 5.321, Average Loss: 5.600, avg. samples / sec: 992.20
Iteration:   2360, Loss function: 5.249, Average Loss: 5.595, avg. samples / sec: 1061.73
Iteration:   2380, Loss function: 5.403, Average Loss: 5.592, avg. samples / sec: 1021.24
Iteration:   2400, Loss function: 5.478, Average Loss: 5.588, avg. samples / sec: 1038.43
Iteration:   2420, Loss function: 5.491, Average Loss: 5.584, avg. samples / sec: 1024.18
Iteration:   2440, Loss function: 5.402, Average Loss: 5.581, avg. samples / sec: 1012.68
Iteration:   2460, Loss function: 5.076, Average Loss: 5.576, avg. samples / sec: 1022.27
Iteration:   2480, Loss function: 5.489, Average Loss: 5.574, avg. samples / sec: 1008.52
Iteration:   2500, Loss function: 5.439, Average Loss: 5.570, avg. samples / sec: 1005.20
Iteration:   2520, Loss function: 5.372, Average Loss: 5.565, avg. samples / sec: 982.57
Iteration:   2540, Loss function: 5.576, Average Loss: 5.562, avg. samples / sec: 1040.14
Iteration:   2560, Loss function: 5.234, Average Loss: 5.558, avg. samples / sec: 997.81
Iteration:   2580, Loss function: 5.390, Average Loss: 5.555, avg. samples / sec: 986.73
Iteration:   2600, Loss function: 5.329, Average Loss: 5.552, avg. samples / sec: 1018.62
Iteration:   2620, Loss function: 5.481, Average Loss: 5.547, avg. samples / sec: 1075.41
Iteration:   2640, Loss function: 5.071, Average Loss: 5.543, avg. samples / sec: 1016.04
Iteration:   2660, Loss function: 5.076, Average Loss: 5.539, avg. samples / sec: 995.17
Iteration:   2680, Loss function: 5.136, Average Loss: 5.536, avg. samples / sec: 949.80
Iteration:   2700, Loss function: 5.216, Average Loss: 5.532, avg. samples / sec: 970.56
Iteration:   2720, Loss function: 5.210, Average Loss: 5.528, avg. samples / sec: 1015.26
Iteration:   2740, Loss function: 5.045, Average Loss: 5.523, avg. samples / sec: 1011.03
Iteration:   2760, Loss function: 5.086, Average Loss: 5.518, avg. samples / sec: 967.07
Iteration:   2780, Loss function: 5.498, Average Loss: 5.514, avg. samples / sec: 979.02
Iteration:   2800, Loss function: 5.066, Average Loss: 5.508, avg. samples / sec: 1013.31
Iteration:   2820, Loss function: 5.548, Average Loss: 5.504, avg. samples / sec: 951.95
Iteration:   2840, Loss function: 5.403, Average Loss: 5.500, avg. samples / sec: 1031.33
Iteration:   2860, Loss function: 5.031, Average Loss: 5.495, avg. samples / sec: 915.29
Iteration:   2880, Loss function: 5.318, Average Loss: 5.490, avg. samples / sec: 998.82
Iteration:   2900, Loss function: 4.988, Average Loss: 5.486, avg. samples / sec: 933.87
Iteration:   2920, Loss function: 5.129, Average Loss: 5.480, avg. samples / sec: 1005.03
Iteration:   2940, Loss function: 5.082, Average Loss: 5.475, avg. samples / sec: 1022.35
Iteration:   2960, Loss function: 5.285, Average Loss: 5.471, avg. samples / sec: 1013.98
Iteration:   2980, Loss function: 5.250, Average Loss: 5.467, avg. samples / sec: 1035.40
Iteration:   3000, Loss function: 5.365, Average Loss: 5.462, avg. samples / sec: 1019.48
Iteration:   3020, Loss function: 5.378, Average Loss: 5.456, avg. samples / sec: 954.99
Iteration:   3040, Loss function: 5.224, Average Loss: 5.450, avg. samples / sec: 994.23
Iteration:   3060, Loss function: 5.211, Average Loss: 5.445, avg. samples / sec: 1002.67
Iteration:   3080, Loss function: 4.877, Average Loss: 5.440, avg. samples / sec: 1009.71
:::MLLOG {"namespace": "", "time_ms": 1639752836215, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752836217, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.163, Average Loss: 5.435, avg. samples / sec: 997.98
Iteration:   3120, Loss function: 4.998, Average Loss: 5.427, avg. samples / sec: 985.80
Iteration:   3140, Loss function: 5.015, Average Loss: 5.423, avg. samples / sec: 994.65
Iteration:   3160, Loss function: 5.476, Average Loss: 5.417, avg. samples / sec: 985.44
Iteration:   3180, Loss function: 4.883, Average Loss: 5.412, avg. samples / sec: 966.22
Iteration:   3200, Loss function: 5.366, Average Loss: 5.408, avg. samples / sec: 952.45
Iteration:   3220, Loss function: 5.112, Average Loss: 5.402, avg. samples / sec: 879.03
Iteration:   3240, Loss function: 5.065, Average Loss: 5.396, avg. samples / sec: 941.92
Iteration:   3260, Loss function: 5.134, Average Loss: 5.391, avg. samples / sec: 989.94
Iteration:   3280, Loss function: 4.736, Average Loss: 5.385, avg. samples / sec: 1009.81
Iteration:   3300, Loss function: 4.914, Average Loss: 5.378, avg. samples / sec: 1022.21
Iteration:   3320, Loss function: 4.898, Average Loss: 5.372, avg. samples / sec: 1065.20
Iteration:   3340, Loss function: 5.130, Average Loss: 5.368, avg. samples / sec: 978.62
Iteration:   3360, Loss function: 4.920, Average Loss: 5.361, avg. samples / sec: 1030.23
Iteration:   3380, Loss function: 5.178, Average Loss: 5.355, avg. samples / sec: 964.75
Iteration:   3400, Loss function: 4.826, Average Loss: 5.351, avg. samples / sec: 1023.79
Iteration:   3420, Loss function: 5.281, Average Loss: 5.346, avg. samples / sec: 1063.56
Iteration:   3440, Loss function: 4.897, Average Loss: 5.341, avg. samples / sec: 971.68
Iteration:   3460, Loss function: 5.084, Average Loss: 5.334, avg. samples / sec: 954.31
Iteration:   3480, Loss function: 5.364, Average Loss: 5.330, avg. samples / sec: 1028.56
Iteration:   3500, Loss function: 5.294, Average Loss: 5.325, avg. samples / sec: 1054.75
Iteration:   3520, Loss function: 5.036, Average Loss: 5.321, avg. samples / sec: 1053.23
Iteration:   3540, Loss function: 4.893, Average Loss: 5.315, avg. samples / sec: 1033.75
Iteration:   3560, Loss function: 4.966, Average Loss: 5.312, avg. samples / sec: 985.40
Iteration:   3580, Loss function: 4.993, Average Loss: 5.308, avg. samples / sec: 992.46
Iteration:   3600, Loss function: 5.205, Average Loss: 5.302, avg. samples / sec: 989.45
Iteration:   3620, Loss function: 4.993, Average Loss: 5.297, avg. samples / sec: 908.67
Iteration:   3640, Loss function: 4.981, Average Loss: 5.293, avg. samples / sec: 909.78
Iteration:   3660, Loss function: 4.972, Average Loss: 5.287, avg. samples / sec: 1040.08
Iteration:   3680, Loss function: 5.146, Average Loss: 5.281, avg. samples / sec: 997.12
Iteration:   3700, Loss function: 5.010, Average Loss: 5.276, avg. samples / sec: 994.13
Iteration:   3720, Loss function: 4.977, Average Loss: 5.269, avg. samples / sec: 1016.85
Iteration:   3740, Loss function: 5.060, Average Loss: 5.265, avg. samples / sec: 1044.95
Iteration:   3760, Loss function: 5.079, Average Loss: 5.261, avg. samples / sec: 1027.61
Iteration:   3780, Loss function: 5.055, Average Loss: 5.255, avg. samples / sec: 988.70
Iteration:   3800, Loss function: 5.088, Average Loss: 5.252, avg. samples / sec: 988.49
Iteration:   3820, Loss function: 5.348, Average Loss: 5.247, avg. samples / sec: 1040.17
Iteration:   3840, Loss function: 4.700, Average Loss: 5.242, avg. samples / sec: 958.32
Iteration:   3860, Loss function: 4.906, Average Loss: 5.237, avg. samples / sec: 1076.05
Iteration:   3880, Loss function: 5.098, Average Loss: 5.232, avg. samples / sec: 1022.84
Iteration:   3900, Loss function: 5.060, Average Loss: 5.227, avg. samples / sec: 1027.83
Iteration:   3920, Loss function: 5.151, Average Loss: 5.221, avg. samples / sec: 1015.16
Iteration:   3940, Loss function: 4.901, Average Loss: 5.217, avg. samples / sec: 1002.28
Iteration:   3960, Loss function: 4.979, Average Loss: 5.213, avg. samples / sec: 967.49
Iteration:   3980, Loss function: 4.970, Average Loss: 5.209, avg. samples / sec: 1000.11
Iteration:   4000, Loss function: 5.042, Average Loss: 5.205, avg. samples / sec: 1005.45
Iteration:   4020, Loss function: 4.908, Average Loss: 5.201, avg. samples / sec: 967.74
Iteration:   4040, Loss function: 5.050, Average Loss: 5.197, avg. samples / sec: 1057.74
Iteration:   4060, Loss function: 5.204, Average Loss: 5.193, avg. samples / sec: 1006.56
Iteration:   4080, Loss function: 5.140, Average Loss: 5.188, avg. samples / sec: 996.82
Iteration:   4100, Loss function: 5.102, Average Loss: 5.185, avg. samples / sec: 958.25
:::MLLOG {"namespace": "", "time_ms": 1639752953974, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953976, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.359, Average Loss: 5.182, avg. samples / sec: 939.79
Iteration:   4140, Loss function: 5.055, Average Loss: 5.177, avg. samples / sec: 983.59
Iteration:   4160, Loss function: 5.060, Average Loss: 5.171, avg. samples / sec: 978.58
Iteration:   4180, Loss function: 4.851, Average Loss: 5.165, avg. samples / sec: 972.34
Iteration:   4200, Loss function: 4.664, Average Loss: 5.160, avg. samples / sec: 940.08
Iteration:   4220, Loss function: 4.882, Average Loss: 5.156, avg. samples / sec: 920.49
Iteration:   4240, Loss function: 5.019, Average Loss: 5.151, avg. samples / sec: 976.11
Iteration:   4260, Loss function: 5.021, Average Loss: 5.146, avg. samples / sec: 1000.43
Iteration:   4280, Loss function: 5.025, Average Loss: 5.140, avg. samples / sec: 936.51
Iteration:   4300, Loss function: 4.878, Average Loss: 5.134, avg. samples / sec: 989.44
Iteration:   4320, Loss function: 4.820, Average Loss: 5.129, avg. samples / sec: 1033.24
Iteration:   4340, Loss function: 4.796, Average Loss: 5.123, avg. samples / sec: 1020.90
Iteration:   4360, Loss function: 4.783, Average Loss: 5.119, avg. samples / sec: 933.01
Iteration:   4380, Loss function: 4.887, Average Loss: 5.113, avg. samples / sec: 964.75
Iteration:   4400, Loss function: 4.823, Average Loss: 5.108, avg. samples / sec: 1008.07
Iteration:   4420, Loss function: 4.892, Average Loss: 5.103, avg. samples / sec: 954.21
Iteration:   4440, Loss function: 4.854, Average Loss: 5.098, avg. samples / sec: 989.15
Iteration:   4460, Loss function: 5.109, Average Loss: 5.095, avg. samples / sec: 1003.12
Iteration:   4480, Loss function: 4.927, Average Loss: 5.092, avg. samples / sec: 1077.38
Iteration:   4500, Loss function: 4.862, Average Loss: 5.088, avg. samples / sec: 1071.11
Iteration:   4520, Loss function: 4.816, Average Loss: 5.084, avg. samples / sec: 988.68
Iteration:   4540, Loss function: 5.220, Average Loss: 5.079, avg. samples / sec: 1023.33
Iteration:   4560, Loss function: 4.724, Average Loss: 5.075, avg. samples / sec: 989.62
Iteration:   4580, Loss function: 4.688, Average Loss: 5.073, avg. samples / sec: 1042.43
Iteration:   4600, Loss function: 4.855, Average Loss: 5.069, avg. samples / sec: 1015.85
Iteration:   4620, Loss function: 4.967, Average Loss: 5.065, avg. samples / sec: 1034.36
Iteration:   4640, Loss function: 4.890, Average Loss: 5.060, avg. samples / sec: 1036.63
Iteration:   4660, Loss function: 4.899, Average Loss: 5.056, avg. samples / sec: 1024.81
Iteration:   4680, Loss function: 5.199, Average Loss: 5.052, avg. samples / sec: 977.61
Iteration:   4700, Loss function: 4.734, Average Loss: 5.047, avg. samples / sec: 1025.44
Iteration:   4720, Loss function: 4.948, Average Loss: 5.043, avg. samples / sec: 967.08
Iteration:   4740, Loss function: 4.859, Average Loss: 5.038, avg. samples / sec: 946.84
Iteration:   4760, Loss function: 4.655, Average Loss: 5.035, avg. samples / sec: 971.12
Iteration:   4780, Loss function: 5.038, Average Loss: 5.031, avg. samples / sec: 1048.16
Iteration:   4800, Loss function: 4.927, Average Loss: 5.027, avg. samples / sec: 1043.02
Iteration:   4820, Loss function: 4.684, Average Loss: 5.024, avg. samples / sec: 1033.03
Iteration:   4840, Loss function: 5.294, Average Loss: 5.022, avg. samples / sec: 932.60
Iteration:   4860, Loss function: 4.842, Average Loss: 5.018, avg. samples / sec: 972.97
Iteration:   4880, Loss function: 5.156, Average Loss: 5.013, avg. samples / sec: 1063.33
Iteration:   4900, Loss function: 4.609, Average Loss: 5.009, avg. samples / sec: 1034.65
Iteration:   4920, Loss function: 4.861, Average Loss: 5.006, avg. samples / sec: 980.85
Iteration:   4940, Loss function: 4.762, Average Loss: 5.002, avg. samples / sec: 939.95
Iteration:   4960, Loss function: 4.687, Average Loss: 4.999, avg. samples / sec: 1011.77
Iteration:   4980, Loss function: 4.701, Average Loss: 4.996, avg. samples / sec: 979.53
Iteration:   5000, Loss function: 4.883, Average Loss: 4.993, avg. samples / sec: 985.96
Iteration:   5020, Loss function: 5.067, Average Loss: 4.990, avg. samples / sec: 989.26
Iteration:   5040, Loss function: 4.903, Average Loss: 4.988, avg. samples / sec: 973.40
Iteration:   5060, Loss function: 4.573, Average Loss: 4.984, avg. samples / sec: 1025.77
Iteration:   5080, Loss function: 4.562, Average Loss: 4.980, avg. samples / sec: 984.18
Iteration:   5100, Loss function: 4.804, Average Loss: 4.977, avg. samples / sec: 1027.46
Iteration:   5120, Loss function: 4.523, Average Loss: 4.975, avg. samples / sec: 1081.35
Iteration:   5140, Loss function: 4.645, Average Loss: 4.971, avg. samples / sec: 1027.75
:::MLLOG {"namespace": "", "time_ms": 1639753071752, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.70 s
:::MLLOG {"namespace": "", "time_ms": 1639753102512, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753102556, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753102573, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.70s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.027, Average Loss: 4.967, avg. samples / sec: 69.54
Iteration:   5180, Loss function: 4.767, Average Loss: 4.963, avg. samples / sec: 1221.62
DONE (t=4.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10671
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21505
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09597
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19198
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13745
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20319
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10671 AP goal: 0.10000
Iteration:   5200, Loss function: 4.483, Average Loss: 4.958, avg. samples / sec: 1079.01
:::MLLOG {"namespace": "", "time_ms": 1639753108171, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108172, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1067146189028569, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108172, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108402, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 17 14:58:30 UTC 2021: done waiting for 1 executions'
Fri Dec 17 14:58:30 UTC 2021: done waiting for 1 executions
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752455355, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752455487, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1613841238, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1613841238
:::MLLOG {"namespace": "", "time_ms": 1639752457225, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752457225, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752457229, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752457230, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752480300, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752480301, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752482817, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482817, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483138, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483139, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483140, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.717, Average Loss: 0.023, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.208, Average Loss: 0.455, avg. samples / sec: 968.57
Iteration:     40, Loss function: 20.829, Average Loss: 0.857, avg. samples / sec: 1021.29
Iteration:     60, Loss function: 20.326, Average Loss: 1.247, avg. samples / sec: 982.72
Iteration:     80, Loss function: 19.867, Average Loss: 1.621, avg. samples / sec: 938.75
Iteration:    100, Loss function: 15.362, Average Loss: 1.948, avg. samples / sec: 944.41
Iteration:    120, Loss function: 10.750, Average Loss: 2.151, avg. samples / sec: 966.85
Iteration:    140, Loss function: 9.611, Average Loss: 2.306, avg. samples / sec: 923.88
Iteration:    160, Loss function: 9.002, Average Loss: 2.445, avg. samples / sec: 954.50
Iteration:    180, Loss function: 8.915, Average Loss: 2.574, avg. samples / sec: 972.84
Iteration:    200, Loss function: 8.585, Average Loss: 2.698, avg. samples / sec: 927.09
Iteration:    220, Loss function: 8.696, Average Loss: 2.819, avg. samples / sec: 953.67
Iteration:    240, Loss function: 8.857, Average Loss: 2.937, avg. samples / sec: 1002.61
Iteration:    260, Loss function: 8.735, Average Loss: 3.052, avg. samples / sec: 964.51
Iteration:    280, Loss function: 8.692, Average Loss: 3.162, avg. samples / sec: 917.83
Iteration:    300, Loss function: 8.668, Average Loss: 3.270, avg. samples / sec: 973.61
Iteration:    320, Loss function: 8.374, Average Loss: 3.374, avg. samples / sec: 1018.73
Iteration:    340, Loss function: 8.212, Average Loss: 3.472, avg. samples / sec: 958.01
Iteration:    360, Loss function: 8.223, Average Loss: 3.564, avg. samples / sec: 1024.92
Iteration:    380, Loss function: 7.978, Average Loss: 3.653, avg. samples / sec: 982.27
Iteration:    400, Loss function: 7.929, Average Loss: 3.737, avg. samples / sec: 1039.44
Iteration:    420, Loss function: 7.830, Average Loss: 3.819, avg. samples / sec: 1022.76
Iteration:    440, Loss function: 7.689, Average Loss: 3.898, avg. samples / sec: 1015.26
Iteration:    460, Loss function: 7.868, Average Loss: 3.975, avg. samples / sec: 998.80
Iteration:    480, Loss function: 7.481, Average Loss: 4.050, avg. samples / sec: 1016.53
Iteration:    500, Loss function: 7.558, Average Loss: 4.122, avg. samples / sec: 1008.06
Iteration:    520, Loss function: 7.468, Average Loss: 4.190, avg. samples / sec: 744.84
Iteration:    540, Loss function: 7.536, Average Loss: 4.255, avg. samples / sec: 1105.16
Iteration:    560, Loss function: 7.172, Average Loss: 4.316, avg. samples / sec: 1036.33
Iteration:    580, Loss function: 7.289, Average Loss: 4.376, avg. samples / sec: 991.26
Iteration:    600, Loss function: 7.429, Average Loss: 4.435, avg. samples / sec: 1008.97
Iteration:    620, Loss function: 7.084, Average Loss: 4.492, avg. samples / sec: 966.96
Iteration:    640, Loss function: 6.931, Average Loss: 4.545, avg. samples / sec: 1008.06
Iteration:    660, Loss function: 7.197, Average Loss: 4.598, avg. samples / sec: 1055.45
Iteration:    680, Loss function: 7.222, Average Loss: 4.649, avg. samples / sec: 1015.33
Iteration:    700, Loss function: 6.803, Average Loss: 4.696, avg. samples / sec: 1037.20
Iteration:    720, Loss function: 6.993, Average Loss: 4.747, avg. samples / sec: 995.57
Iteration:    740, Loss function: 6.914, Average Loss: 4.792, avg. samples / sec: 998.68
Iteration:    760, Loss function: 7.104, Average Loss: 4.835, avg. samples / sec: 1015.75
Iteration:    780, Loss function: 6.915, Average Loss: 4.876, avg. samples / sec: 989.59
Iteration:    800, Loss function: 7.345, Average Loss: 4.917, avg. samples / sec: 939.23
Iteration:    820, Loss function: 6.882, Average Loss: 4.955, avg. samples / sec: 937.47
Iteration:    840, Loss function: 6.603, Average Loss: 4.991, avg. samples / sec: 947.88
Iteration:    860, Loss function: 6.777, Average Loss: 5.025, avg. samples / sec: 989.61
Iteration:    880, Loss function: 6.831, Average Loss: 5.059, avg. samples / sec: 1013.06
Iteration:    900, Loss function: 6.917, Average Loss: 5.090, avg. samples / sec: 988.48
Iteration:    920, Loss function: 6.587, Average Loss: 5.119, avg. samples / sec: 977.74
Iteration:    940, Loss function: 6.874, Average Loss: 5.148, avg. samples / sec: 971.79
Iteration:    960, Loss function: 6.467, Average Loss: 5.176, avg. samples / sec: 952.74
Iteration:    980, Loss function: 6.414, Average Loss: 5.203, avg. samples / sec: 1000.15
Iteration:   1000, Loss function: 6.530, Average Loss: 5.230, avg. samples / sec: 928.24
Iteration:   1020, Loss function: 6.263, Average Loss: 5.254, avg. samples / sec: 1017.70
:::MLLOG {"namespace": "", "time_ms": 1639752602743, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752602745, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.690, Average Loss: 5.278, avg. samples / sec: 1041.12
Iteration:   1060, Loss function: 6.247, Average Loss: 5.299, avg. samples / sec: 983.67
Iteration:   1080, Loss function: 6.434, Average Loss: 5.322, avg. samples / sec: 941.74
Iteration:   1100, Loss function: 6.153, Average Loss: 5.342, avg. samples / sec: 997.60
Iteration:   1120, Loss function: 6.219, Average Loss: 5.361, avg. samples / sec: 1056.21
Iteration:   1140, Loss function: 6.418, Average Loss: 5.380, avg. samples / sec: 1049.05
Iteration:   1160, Loss function: 6.159, Average Loss: 5.397, avg. samples / sec: 969.54
Iteration:   1180, Loss function: 6.293, Average Loss: 5.415, avg. samples / sec: 1053.75
Iteration:   1200, Loss function: 6.213, Average Loss: 5.431, avg. samples / sec: 1046.20
Iteration:   1220, Loss function: 6.258, Average Loss: 5.447, avg. samples / sec: 1002.78
Iteration:   1240, Loss function: 6.220, Average Loss: 5.460, avg. samples / sec: 1055.87
Iteration:   1260, Loss function: 5.895, Average Loss: 5.473, avg. samples / sec: 1066.04
Iteration:   1280, Loss function: 5.982, Average Loss: 5.485, avg. samples / sec: 1054.63
Iteration:   1300, Loss function: 6.135, Average Loss: 5.497, avg. samples / sec: 947.63
Iteration:   1320, Loss function: 6.146, Average Loss: 5.510, avg. samples / sec: 938.38
Iteration:   1340, Loss function: 5.870, Average Loss: 5.519, avg. samples / sec: 1016.04
Iteration:   1360, Loss function: 5.876, Average Loss: 5.530, avg. samples / sec: 1015.75
Iteration:   1380, Loss function: 6.061, Average Loss: 5.540, avg. samples / sec: 1034.00
Iteration:   1400, Loss function: 6.043, Average Loss: 5.548, avg. samples / sec: 1020.80
Iteration:   1420, Loss function: 5.963, Average Loss: 5.556, avg. samples / sec: 1007.73
Iteration:   1440, Loss function: 6.276, Average Loss: 5.564, avg. samples / sec: 1008.25
Iteration:   1460, Loss function: 6.199, Average Loss: 5.572, avg. samples / sec: 1035.81
Iteration:   1480, Loss function: 6.099, Average Loss: 5.580, avg. samples / sec: 965.47
Iteration:   1500, Loss function: 5.994, Average Loss: 5.588, avg. samples / sec: 1038.30
Iteration:   1520, Loss function: 6.006, Average Loss: 5.594, avg. samples / sec: 1034.93
Iteration:   1540, Loss function: 5.975, Average Loss: 5.598, avg. samples / sec: 934.31
Iteration:   1560, Loss function: 5.655, Average Loss: 5.602, avg. samples / sec: 972.71
Iteration:   1580, Loss function: 5.649, Average Loss: 5.608, avg. samples / sec: 978.59
Iteration:   1600, Loss function: 6.164, Average Loss: 5.614, avg. samples / sec: 1105.87
Iteration:   1620, Loss function: 5.784, Average Loss: 5.619, avg. samples / sec: 1036.00
Iteration:   1640, Loss function: 5.811, Average Loss: 5.622, avg. samples / sec: 1007.35
Iteration:   1660, Loss function: 6.052, Average Loss: 5.627, avg. samples / sec: 996.01
Iteration:   1680, Loss function: 5.696, Average Loss: 5.630, avg. samples / sec: 1020.79
Iteration:   1700, Loss function: 5.411, Average Loss: 5.633, avg. samples / sec: 1085.88
Iteration:   1720, Loss function: 5.859, Average Loss: 5.635, avg. samples / sec: 1068.64
Iteration:   1740, Loss function: 5.836, Average Loss: 5.639, avg. samples / sec: 985.44
Iteration:   1760, Loss function: 5.415, Average Loss: 5.641, avg. samples / sec: 1035.64
Iteration:   1780, Loss function: 5.870, Average Loss: 5.641, avg. samples / sec: 952.28
Iteration:   1800, Loss function: 5.585, Average Loss: 5.643, avg. samples / sec: 941.20
Iteration:   1820, Loss function: 6.068, Average Loss: 5.645, avg. samples / sec: 1053.02
Iteration:   1840, Loss function: 5.915, Average Loss: 5.646, avg. samples / sec: 1049.86
Iteration:   1860, Loss function: 5.604, Average Loss: 5.645, avg. samples / sec: 999.88
Iteration:   1880, Loss function: 5.966, Average Loss: 5.647, avg. samples / sec: 1042.65
Iteration:   1900, Loss function: 5.688, Average Loss: 5.648, avg. samples / sec: 1035.51
Iteration:   1920, Loss function: 5.650, Average Loss: 5.647, avg. samples / sec: 1058.56
Iteration:   1940, Loss function: 5.898, Average Loss: 5.648, avg. samples / sec: 1025.96
Iteration:   1960, Loss function: 5.431, Average Loss: 5.647, avg. samples / sec: 960.47
Iteration:   1980, Loss function: 5.742, Average Loss: 5.646, avg. samples / sec: 983.76
Iteration:   2000, Loss function: 5.677, Average Loss: 5.645, avg. samples / sec: 937.81
Iteration:   2020, Loss function: 5.621, Average Loss: 5.644, avg. samples / sec: 955.81
Iteration:   2040, Loss function: 5.620, Average Loss: 5.643, avg. samples / sec: 977.67
:::MLLOG {"namespace": "", "time_ms": 1639752719140, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752719151, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.532, Average Loss: 5.640, avg. samples / sec: 957.23
Iteration:   2080, Loss function: 5.212, Average Loss: 5.637, avg. samples / sec: 969.48
Iteration:   2100, Loss function: 5.397, Average Loss: 5.634, avg. samples / sec: 981.80
Iteration:   2120, Loss function: 5.415, Average Loss: 5.632, avg. samples / sec: 1009.06
Iteration:   2140, Loss function: 5.582, Average Loss: 5.629, avg. samples / sec: 1107.66
Iteration:   2160, Loss function: 5.228, Average Loss: 5.626, avg. samples / sec: 980.31
Iteration:   2180, Loss function: 5.402, Average Loss: 5.624, avg. samples / sec: 1040.33
Iteration:   2200, Loss function: 5.545, Average Loss: 5.619, avg. samples / sec: 1001.16
Iteration:   2220, Loss function: 5.648, Average Loss: 5.618, avg. samples / sec: 1040.09
Iteration:   2240, Loss function: 5.385, Average Loss: 5.615, avg. samples / sec: 987.53
Iteration:   2260, Loss function: 5.383, Average Loss: 5.611, avg. samples / sec: 939.44
Iteration:   2280, Loss function: 5.081, Average Loss: 5.608, avg. samples / sec: 1052.62
Iteration:   2300, Loss function: 5.246, Average Loss: 5.605, avg. samples / sec: 976.20
Iteration:   2320, Loss function: 5.313, Average Loss: 5.603, avg. samples / sec: 920.06
Iteration:   2340, Loss function: 5.321, Average Loss: 5.600, avg. samples / sec: 992.20
Iteration:   2360, Loss function: 5.249, Average Loss: 5.595, avg. samples / sec: 1061.73
Iteration:   2380, Loss function: 5.403, Average Loss: 5.592, avg. samples / sec: 1021.24
Iteration:   2400, Loss function: 5.478, Average Loss: 5.588, avg. samples / sec: 1038.43
Iteration:   2420, Loss function: 5.491, Average Loss: 5.584, avg. samples / sec: 1024.18
Iteration:   2440, Loss function: 5.402, Average Loss: 5.581, avg. samples / sec: 1012.68
Iteration:   2460, Loss function: 5.076, Average Loss: 5.576, avg. samples / sec: 1022.27
Iteration:   2480, Loss function: 5.489, Average Loss: 5.574, avg. samples / sec: 1008.52
Iteration:   2500, Loss function: 5.439, Average Loss: 5.570, avg. samples / sec: 1005.20
Iteration:   2520, Loss function: 5.372, Average Loss: 5.565, avg. samples / sec: 982.57
Iteration:   2540, Loss function: 5.576, Average Loss: 5.562, avg. samples / sec: 1040.14
Iteration:   2560, Loss function: 5.234, Average Loss: 5.558, avg. samples / sec: 997.81
Iteration:   2580, Loss function: 5.390, Average Loss: 5.555, avg. samples / sec: 986.73
Iteration:   2600, Loss function: 5.329, Average Loss: 5.552, avg. samples / sec: 1018.62
Iteration:   2620, Loss function: 5.481, Average Loss: 5.547, avg. samples / sec: 1075.41
Iteration:   2640, Loss function: 5.071, Average Loss: 5.543, avg. samples / sec: 1016.04
Iteration:   2660, Loss function: 5.076, Average Loss: 5.539, avg. samples / sec: 995.17
Iteration:   2680, Loss function: 5.136, Average Loss: 5.536, avg. samples / sec: 949.80
Iteration:   2700, Loss function: 5.216, Average Loss: 5.532, avg. samples / sec: 970.56
Iteration:   2720, Loss function: 5.210, Average Loss: 5.528, avg. samples / sec: 1015.26
Iteration:   2740, Loss function: 5.045, Average Loss: 5.523, avg. samples / sec: 1011.03
Iteration:   2760, Loss function: 5.086, Average Loss: 5.518, avg. samples / sec: 967.07
Iteration:   2780, Loss function: 5.498, Average Loss: 5.514, avg. samples / sec: 979.02
Iteration:   2800, Loss function: 5.066, Average Loss: 5.508, avg. samples / sec: 1013.31
Iteration:   2820, Loss function: 5.548, Average Loss: 5.504, avg. samples / sec: 951.95
Iteration:   2840, Loss function: 5.403, Average Loss: 5.500, avg. samples / sec: 1031.33
Iteration:   2860, Loss function: 5.031, Average Loss: 5.495, avg. samples / sec: 915.29
Iteration:   2880, Loss function: 5.318, Average Loss: 5.490, avg. samples / sec: 998.82
Iteration:   2900, Loss function: 4.988, Average Loss: 5.486, avg. samples / sec: 933.87
Iteration:   2920, Loss function: 5.129, Average Loss: 5.480, avg. samples / sec: 1005.03
Iteration:   2940, Loss function: 5.082, Average Loss: 5.475, avg. samples / sec: 1022.35
Iteration:   2960, Loss function: 5.285, Average Loss: 5.471, avg. samples / sec: 1013.98
Iteration:   2980, Loss function: 5.250, Average Loss: 5.467, avg. samples / sec: 1035.40
Iteration:   3000, Loss function: 5.365, Average Loss: 5.462, avg. samples / sec: 1019.48
Iteration:   3020, Loss function: 5.378, Average Loss: 5.456, avg. samples / sec: 954.99
Iteration:   3040, Loss function: 5.224, Average Loss: 5.450, avg. samples / sec: 994.23
Iteration:   3060, Loss function: 5.211, Average Loss: 5.445, avg. samples / sec: 1002.67
Iteration:   3080, Loss function: 4.877, Average Loss: 5.440, avg. samples / sec: 1009.71
:::MLLOG {"namespace": "", "time_ms": 1639752836215, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752836217, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.163, Average Loss: 5.435, avg. samples / sec: 997.98
Iteration:   3120, Loss function: 4.998, Average Loss: 5.427, avg. samples / sec: 985.80
Iteration:   3140, Loss function: 5.015, Average Loss: 5.423, avg. samples / sec: 994.65
Iteration:   3160, Loss function: 5.476, Average Loss: 5.417, avg. samples / sec: 985.44
Iteration:   3180, Loss function: 4.883, Average Loss: 5.412, avg. samples / sec: 966.22
Iteration:   3200, Loss function: 5.366, Average Loss: 5.408, avg. samples / sec: 952.45
Iteration:   3220, Loss function: 5.112, Average Loss: 5.402, avg. samples / sec: 879.03
Iteration:   3240, Loss function: 5.065, Average Loss: 5.396, avg. samples / sec: 941.92
Iteration:   3260, Loss function: 5.134, Average Loss: 5.391, avg. samples / sec: 989.94
Iteration:   3280, Loss function: 4.736, Average Loss: 5.385, avg. samples / sec: 1009.81
Iteration:   3300, Loss function: 4.914, Average Loss: 5.378, avg. samples / sec: 1022.21
Iteration:   3320, Loss function: 4.898, Average Loss: 5.372, avg. samples / sec: 1065.20
Iteration:   3340, Loss function: 5.130, Average Loss: 5.368, avg. samples / sec: 978.62
Iteration:   3360, Loss function: 4.920, Average Loss: 5.361, avg. samples / sec: 1030.23
Iteration:   3380, Loss function: 5.178, Average Loss: 5.355, avg. samples / sec: 964.75
Iteration:   3400, Loss function: 4.826, Average Loss: 5.351, avg. samples / sec: 1023.79
Iteration:   3420, Loss function: 5.281, Average Loss: 5.346, avg. samples / sec: 1063.56
Iteration:   3440, Loss function: 4.897, Average Loss: 5.341, avg. samples / sec: 971.68
Iteration:   3460, Loss function: 5.084, Average Loss: 5.334, avg. samples / sec: 954.31
Iteration:   3480, Loss function: 5.364, Average Loss: 5.330, avg. samples / sec: 1028.56
Iteration:   3500, Loss function: 5.294, Average Loss: 5.325, avg. samples / sec: 1054.75
Iteration:   3520, Loss function: 5.036, Average Loss: 5.321, avg. samples / sec: 1053.23
Iteration:   3540, Loss function: 4.893, Average Loss: 5.315, avg. samples / sec: 1033.75
Iteration:   3560, Loss function: 4.966, Average Loss: 5.312, avg. samples / sec: 985.40
Iteration:   3580, Loss function: 4.993, Average Loss: 5.308, avg. samples / sec: 992.46
Iteration:   3600, Loss function: 5.205, Average Loss: 5.302, avg. samples / sec: 989.45
Iteration:   3620, Loss function: 4.993, Average Loss: 5.297, avg. samples / sec: 908.67
Iteration:   3640, Loss function: 4.981, Average Loss: 5.293, avg. samples / sec: 909.78
Iteration:   3660, Loss function: 4.972, Average Loss: 5.287, avg. samples / sec: 1040.08
Iteration:   3680, Loss function: 5.146, Average Loss: 5.281, avg. samples / sec: 997.12
Iteration:   3700, Loss function: 5.010, Average Loss: 5.276, avg. samples / sec: 994.13
Iteration:   3720, Loss function: 4.977, Average Loss: 5.269, avg. samples / sec: 1016.85
Iteration:   3740, Loss function: 5.060, Average Loss: 5.265, avg. samples / sec: 1044.95
Iteration:   3760, Loss function: 5.079, Average Loss: 5.261, avg. samples / sec: 1027.61
Iteration:   3780, Loss function: 5.055, Average Loss: 5.255, avg. samples / sec: 988.70
Iteration:   3800, Loss function: 5.088, Average Loss: 5.252, avg. samples / sec: 988.49
Iteration:   3820, Loss function: 5.348, Average Loss: 5.247, avg. samples / sec: 1040.17
Iteration:   3840, Loss function: 4.700, Average Loss: 5.242, avg. samples / sec: 958.32
Iteration:   3860, Loss function: 4.906, Average Loss: 5.237, avg. samples / sec: 1076.05
Iteration:   3880, Loss function: 5.098, Average Loss: 5.232, avg. samples / sec: 1022.84
Iteration:   3900, Loss function: 5.060, Average Loss: 5.227, avg. samples / sec: 1027.83
Iteration:   3920, Loss function: 5.151, Average Loss: 5.221, avg. samples / sec: 1015.16
Iteration:   3940, Loss function: 4.901, Average Loss: 5.217, avg. samples / sec: 1002.28
Iteration:   3960, Loss function: 4.979, Average Loss: 5.213, avg. samples / sec: 967.49
Iteration:   3980, Loss function: 4.970, Average Loss: 5.209, avg. samples / sec: 1000.11
Iteration:   4000, Loss function: 5.042, Average Loss: 5.205, avg. samples / sec: 1005.45
Iteration:   4020, Loss function: 4.908, Average Loss: 5.201, avg. samples / sec: 967.74
Iteration:   4040, Loss function: 5.050, Average Loss: 5.197, avg. samples / sec: 1057.74
Iteration:   4060, Loss function: 5.204, Average Loss: 5.193, avg. samples / sec: 1006.56
Iteration:   4080, Loss function: 5.140, Average Loss: 5.188, avg. samples / sec: 996.82
Iteration:   4100, Loss function: 5.102, Average Loss: 5.185, avg. samples / sec: 958.25
:::MLLOG {"namespace": "", "time_ms": 1639752953974, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953976, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.359, Average Loss: 5.182, avg. samples / sec: 939.79
Iteration:   4140, Loss function: 5.055, Average Loss: 5.177, avg. samples / sec: 983.59
Iteration:   4160, Loss function: 5.060, Average Loss: 5.171, avg. samples / sec: 978.58
Iteration:   4180, Loss function: 4.851, Average Loss: 5.165, avg. samples / sec: 972.34
Iteration:   4200, Loss function: 4.664, Average Loss: 5.160, avg. samples / sec: 940.08
Iteration:   4220, Loss function: 4.882, Average Loss: 5.156, avg. samples / sec: 920.49
Iteration:   4240, Loss function: 5.019, Average Loss: 5.151, avg. samples / sec: 976.11
Iteration:   4260, Loss function: 5.021, Average Loss: 5.146, avg. samples / sec: 1000.43
Iteration:   4280, Loss function: 5.025, Average Loss: 5.140, avg. samples / sec: 936.51
Iteration:   4300, Loss function: 4.878, Average Loss: 5.134, avg. samples / sec: 989.44
Iteration:   4320, Loss function: 4.820, Average Loss: 5.129, avg. samples / sec: 1033.24
Iteration:   4340, Loss function: 4.796, Average Loss: 5.123, avg. samples / sec: 1020.90
Iteration:   4360, Loss function: 4.783, Average Loss: 5.119, avg. samples / sec: 933.01
Iteration:   4380, Loss function: 4.887, Average Loss: 5.113, avg. samples / sec: 964.75
Iteration:   4400, Loss function: 4.823, Average Loss: 5.108, avg. samples / sec: 1008.07
Iteration:   4420, Loss function: 4.892, Average Loss: 5.103, avg. samples / sec: 954.21
Iteration:   4440, Loss function: 4.854, Average Loss: 5.098, avg. samples / sec: 989.15
Iteration:   4460, Loss function: 5.109, Average Loss: 5.095, avg. samples / sec: 1003.12
Iteration:   4480, Loss function: 4.927, Average Loss: 5.092, avg. samples / sec: 1077.38
Iteration:   4500, Loss function: 4.862, Average Loss: 5.088, avg. samples / sec: 1071.11
Iteration:   4520, Loss function: 4.816, Average Loss: 5.084, avg. samples / sec: 988.68
Iteration:   4540, Loss function: 5.220, Average Loss: 5.079, avg. samples / sec: 1023.33
Iteration:   4560, Loss function: 4.724, Average Loss: 5.075, avg. samples / sec: 989.62
Iteration:   4580, Loss function: 4.688, Average Loss: 5.073, avg. samples / sec: 1042.43
Iteration:   4600, Loss function: 4.855, Average Loss: 5.069, avg. samples / sec: 1015.85
Iteration:   4620, Loss function: 4.967, Average Loss: 5.065, avg. samples / sec: 1034.36
Iteration:   4640, Loss function: 4.890, Average Loss: 5.060, avg. samples / sec: 1036.63
Iteration:   4660, Loss function: 4.899, Average Loss: 5.056, avg. samples / sec: 1024.81
Iteration:   4680, Loss function: 5.199, Average Loss: 5.052, avg. samples / sec: 977.61
Iteration:   4700, Loss function: 4.734, Average Loss: 5.047, avg. samples / sec: 1025.44
Iteration:   4720, Loss function: 4.948, Average Loss: 5.043, avg. samples / sec: 967.08
Iteration:   4740, Loss function: 4.859, Average Loss: 5.038, avg. samples / sec: 946.84
Iteration:   4760, Loss function: 4.655, Average Loss: 5.035, avg. samples / sec: 971.12
Iteration:   4780, Loss function: 5.038, Average Loss: 5.031, avg. samples / sec: 1048.16
Iteration:   4800, Loss function: 4.927, Average Loss: 5.027, avg. samples / sec: 1043.02
Iteration:   4820, Loss function: 4.684, Average Loss: 5.024, avg. samples / sec: 1033.03
Iteration:   4840, Loss function: 5.294, Average Loss: 5.022, avg. samples / sec: 932.60
Iteration:   4860, Loss function: 4.842, Average Loss: 5.018, avg. samples / sec: 972.97
Iteration:   4880, Loss function: 5.156, Average Loss: 5.013, avg. samples / sec: 1063.33
Iteration:   4900, Loss function: 4.609, Average Loss: 5.009, avg. samples / sec: 1034.65
Iteration:   4920, Loss function: 4.861, Average Loss: 5.006, avg. samples / sec: 980.85
Iteration:   4940, Loss function: 4.762, Average Loss: 5.002, avg. samples / sec: 939.95
Iteration:   4960, Loss function: 4.687, Average Loss: 4.999, avg. samples / sec: 1011.77
Iteration:   4980, Loss function: 4.701, Average Loss: 4.996, avg. samples / sec: 979.53
Iteration:   5000, Loss function: 4.883, Average Loss: 4.993, avg. samples / sec: 985.96
Iteration:   5020, Loss function: 5.067, Average Loss: 4.990, avg. samples / sec: 989.26
Iteration:   5040, Loss function: 4.903, Average Loss: 4.988, avg. samples / sec: 973.40
Iteration:   5060, Loss function: 4.573, Average Loss: 4.984, avg. samples / sec: 1025.77
Iteration:   5080, Loss function: 4.562, Average Loss: 4.980, avg. samples / sec: 984.18
Iteration:   5100, Loss function: 4.804, Average Loss: 4.977, avg. samples / sec: 1027.46
Iteration:   5120, Loss function: 4.523, Average Loss: 4.975, avg. samples / sec: 1081.35
Iteration:   5140, Loss function: 4.645, Average Loss: 4.971, avg. samples / sec: 1027.75
:::MLLOG {"namespace": "", "time_ms": 1639753071752, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.70 s
:::MLLOG {"namespace": "", "time_ms": 1639753102512, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753102556, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753102573, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.70s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.027, Average Loss: 4.967, avg. samples / sec: 69.54
Iteration:   5180, Loss function: 4.767, Average Loss: 4.963, avg. samples / sec: 1221.62
DONE (t=4.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10671
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21505
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09597
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19198
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13745
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20319
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21486
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10671 AP goal: 0.10000
Iteration:   5200, Loss function: 4.483, Average Loss: 4.958, avg. samples / sec: 1079.01
:::MLLOG {"namespace": "", "time_ms": 1639753108171, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108172, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1067146189028569, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108172, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108402, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753110
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:30 PM'
START TIMING RUN WAS 2021-12-17 02:47:13 PM
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:13 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:30 PM'
ENDING TIMING RUN AT 2021-12-17 02:58:30 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
+ result=677
RESULT,SINGLE_STAGE_DETECTOR,,677,nvidia,2021-12-17 02:47:13 PM
ALL FINISHED GPU: 1 x full x 8 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,677,nvidia,2021-12-17 02:47:13 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
