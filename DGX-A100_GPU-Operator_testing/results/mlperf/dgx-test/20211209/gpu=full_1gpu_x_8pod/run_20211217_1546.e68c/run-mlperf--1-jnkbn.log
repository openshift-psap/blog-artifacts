8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b).
+ echo 'No MIG GPU available, using the full GPUs (GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b).'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752446
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:26 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:26 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:26 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:26 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-jnkbn to the sync file ...
run-mlperf--1-jnkbn Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
run-mlperf--1-jnkbn Found 7 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
     7	run-mlperf--1-k6jf6
Fri Dec 17 14:47:36 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
Running on all the 1 GPUs 
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752458425, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752458623, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3203587143, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3203587143
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752460481, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752460481, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752483687, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752483688, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752485907, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752485908, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752486355, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752486355, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752486357, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.715, Average Loss: 0.023, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.101, Average Loss: 0.455, avg. samples / sec: 821.85
Iteration:     40, Loss function: 20.704, Average Loss: 0.857, avg. samples / sec: 900.27
Iteration:     60, Loss function: 20.392, Average Loss: 1.247, avg. samples / sec: 953.98
Iteration:     80, Loss function: 20.221, Average Loss: 1.622, avg. samples / sec: 984.30
Iteration:    100, Loss function: 17.366, Average Loss: 1.967, avg. samples / sec: 983.36
Iteration:    120, Loss function: 12.742, Average Loss: 2.202, avg. samples / sec: 1000.50
Iteration:    140, Loss function: 9.974, Average Loss: 2.376, avg. samples / sec: 983.87
Iteration:    160, Loss function: 9.416, Average Loss: 2.520, avg. samples / sec: 1017.43
Iteration:    180, Loss function: 9.196, Average Loss: 2.652, avg. samples / sec: 1029.93
Iteration:    200, Loss function: 8.779, Average Loss: 2.778, avg. samples / sec: 1052.03
Iteration:    220, Loss function: 8.467, Average Loss: 2.897, avg. samples / sec: 972.34
Iteration:    240, Loss function: 8.693, Average Loss: 3.014, avg. samples / sec: 1006.96
Iteration:    260, Loss function: 8.621, Average Loss: 3.126, avg. samples / sec: 1051.52
Iteration:    280, Loss function: 8.650, Average Loss: 3.236, avg. samples / sec: 984.05
Iteration:    300, Loss function: 8.343, Average Loss: 3.340, avg. samples / sec: 952.30
Iteration:    320, Loss function: 8.412, Average Loss: 3.440, avg. samples / sec: 1034.69
Iteration:    340, Loss function: 8.372, Average Loss: 3.537, avg. samples / sec: 985.43
Iteration:    360, Loss function: 8.245, Average Loss: 3.630, avg. samples / sec: 990.97
Iteration:    380, Loss function: 7.904, Average Loss: 3.718, avg. samples / sec: 1021.51
Iteration:    400, Loss function: 8.019, Average Loss: 3.803, avg. samples / sec: 1030.86
Iteration:    420, Loss function: 7.637, Average Loss: 3.886, avg. samples / sec: 951.06
Iteration:    440, Loss function: 7.750, Average Loss: 3.964, avg. samples / sec: 1026.55
Iteration:    460, Loss function: 7.773, Average Loss: 4.039, avg. samples / sec: 1045.21
Iteration:    480, Loss function: 7.610, Average Loss: 4.112, avg. samples / sec: 932.91
Iteration:    500, Loss function: 7.740, Average Loss: 4.184, avg. samples / sec: 907.27
Iteration:    520, Loss function: 7.395, Average Loss: 4.252, avg. samples / sec: 998.39
Iteration:    540, Loss function: 7.402, Average Loss: 4.315, avg. samples / sec: 1034.76
Iteration:    560, Loss function: 7.165, Average Loss: 4.376, avg. samples / sec: 1030.45
Iteration:    580, Loss function: 7.177, Average Loss: 4.433, avg. samples / sec: 989.77
Iteration:    600, Loss function: 7.402, Average Loss: 4.492, avg. samples / sec: 992.32
Iteration:    620, Loss function: 7.100, Average Loss: 4.547, avg. samples / sec: 998.69
Iteration:    640, Loss function: 7.018, Average Loss: 4.601, avg. samples / sec: 971.38
Iteration:    660, Loss function: 7.043, Average Loss: 4.653, avg. samples / sec: 996.02
Iteration:    680, Loss function: 7.201, Average Loss: 4.703, avg. samples / sec: 1023.72
Iteration:    700, Loss function: 6.896, Average Loss: 4.750, avg. samples / sec: 1046.28
Iteration:    720, Loss function: 7.047, Average Loss: 4.796, avg. samples / sec: 1067.52
Iteration:    740, Loss function: 6.897, Average Loss: 4.841, avg. samples / sec: 967.19
Iteration:    760, Loss function: 7.029, Average Loss: 4.884, avg. samples / sec: 1021.99
Iteration:    780, Loss function: 6.986, Average Loss: 4.925, avg. samples / sec: 1014.59
Iteration:    800, Loss function: 7.117, Average Loss: 4.963, avg. samples / sec: 1020.51
Iteration:    820, Loss function: 6.859, Average Loss: 5.000, avg. samples / sec: 1026.27
Iteration:    840, Loss function: 6.709, Average Loss: 5.034, avg. samples / sec: 1016.26
Iteration:    860, Loss function: 6.799, Average Loss: 5.067, avg. samples / sec: 915.89
Iteration:    880, Loss function: 6.736, Average Loss: 5.098, avg. samples / sec: 993.18
Iteration:    900, Loss function: 6.923, Average Loss: 5.128, avg. samples / sec: 998.95
Iteration:    920, Loss function: 6.800, Average Loss: 5.158, avg. samples / sec: 1013.69
Iteration:    940, Loss function: 6.679, Average Loss: 5.186, avg. samples / sec: 958.97
Iteration:    960, Loss function: 6.435, Average Loss: 5.214, avg. samples / sec: 984.58
Iteration:    980, Loss function: 6.484, Average Loss: 5.241, avg. samples / sec: 990.34
Iteration:   1000, Loss function: 6.559, Average Loss: 5.266, avg. samples / sec: 1056.15
Iteration:   1020, Loss function: 6.156, Average Loss: 5.290, avg. samples / sec: 1116.86
:::MLLOG {"namespace": "", "time_ms": 1639752604214, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752604215, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.577, Average Loss: 5.314, avg. samples / sec: 1077.43
Iteration:   1060, Loss function: 6.197, Average Loss: 5.337, avg. samples / sec: 1035.15
Iteration:   1080, Loss function: 6.379, Average Loss: 5.359, avg. samples / sec: 1005.25
Iteration:   1100, Loss function: 6.039, Average Loss: 5.378, avg. samples / sec: 935.42
Iteration:   1120, Loss function: 6.172, Average Loss: 5.397, avg. samples / sec: 1061.49
Iteration:   1140, Loss function: 6.326, Average Loss: 5.415, avg. samples / sec: 968.32
Iteration:   1160, Loss function: 6.003, Average Loss: 5.432, avg. samples / sec: 981.42
Iteration:   1180, Loss function: 6.340, Average Loss: 5.449, avg. samples / sec: 1001.09
Iteration:   1200, Loss function: 6.239, Average Loss: 5.466, avg. samples / sec: 990.38
Iteration:   1220, Loss function: 6.200, Average Loss: 5.481, avg. samples / sec: 935.08
Iteration:   1240, Loss function: 6.038, Average Loss: 5.494, avg. samples / sec: 1018.56
Iteration:   1260, Loss function: 6.053, Average Loss: 5.506, avg. samples / sec: 983.49
Iteration:   1280, Loss function: 5.918, Average Loss: 5.518, avg. samples / sec: 983.36
Iteration:   1300, Loss function: 6.066, Average Loss: 5.530, avg. samples / sec: 1037.56
Iteration:   1320, Loss function: 6.127, Average Loss: 5.542, avg. samples / sec: 1077.63
Iteration:   1340, Loss function: 5.892, Average Loss: 5.551, avg. samples / sec: 963.23
Iteration:   1360, Loss function: 5.973, Average Loss: 5.562, avg. samples / sec: 1000.45
Iteration:   1380, Loss function: 6.190, Average Loss: 5.572, avg. samples / sec: 1003.53
Iteration:   1400, Loss function: 6.204, Average Loss: 5.581, avg. samples / sec: 935.77
Iteration:   1420, Loss function: 5.943, Average Loss: 5.588, avg. samples / sec: 1022.00
Iteration:   1440, Loss function: 6.138, Average Loss: 5.595, avg. samples / sec: 1006.20
Iteration:   1460, Loss function: 6.201, Average Loss: 5.603, avg. samples / sec: 1049.88
Iteration:   1480, Loss function: 5.884, Average Loss: 5.610, avg. samples / sec: 964.80
Iteration:   1500, Loss function: 6.093, Average Loss: 5.617, avg. samples / sec: 1022.40
Iteration:   1520, Loss function: 6.147, Average Loss: 5.623, avg. samples / sec: 1049.44
Iteration:   1540, Loss function: 5.879, Average Loss: 5.627, avg. samples / sec: 955.05
Iteration:   1560, Loss function: 5.635, Average Loss: 5.631, avg. samples / sec: 1002.29
Iteration:   1580, Loss function: 5.712, Average Loss: 5.636, avg. samples / sec: 1024.26
Iteration:   1600, Loss function: 6.275, Average Loss: 5.641, avg. samples / sec: 949.97
Iteration:   1620, Loss function: 5.622, Average Loss: 5.645, avg. samples / sec: 994.37
Iteration:   1640, Loss function: 6.016, Average Loss: 5.648, avg. samples / sec: 1003.17
Iteration:   1660, Loss function: 6.109, Average Loss: 5.652, avg. samples / sec: 993.36
Iteration:   1680, Loss function: 5.713, Average Loss: 5.654, avg. samples / sec: 1036.26
Iteration:   1700, Loss function: 5.352, Average Loss: 5.657, avg. samples / sec: 1062.05
Iteration:   1720, Loss function: 5.682, Average Loss: 5.659, avg. samples / sec: 1034.53
Iteration:   1740, Loss function: 5.947, Average Loss: 5.661, avg. samples / sec: 992.45
Iteration:   1760, Loss function: 5.686, Average Loss: 5.662, avg. samples / sec: 1034.76
Iteration:   1780, Loss function: 5.901, Average Loss: 5.663, avg. samples / sec: 1039.68
Iteration:   1800, Loss function: 5.672, Average Loss: 5.664, avg. samples / sec: 987.64
Iteration:   1820, Loss function: 6.060, Average Loss: 5.667, avg. samples / sec: 954.70
Iteration:   1840, Loss function: 5.992, Average Loss: 5.669, avg. samples / sec: 975.90
Iteration:   1860, Loss function: 5.724, Average Loss: 5.668, avg. samples / sec: 1010.49
Iteration:   1880, Loss function: 5.979, Average Loss: 5.669, avg. samples / sec: 1056.67
Iteration:   1900, Loss function: 5.818, Average Loss: 5.670, avg. samples / sec: 1016.96
Iteration:   1920, Loss function: 5.782, Average Loss: 5.669, avg. samples / sec: 994.56
Iteration:   1940, Loss function: 5.798, Average Loss: 5.668, avg. samples / sec: 1017.69
Iteration:   1960, Loss function: 5.647, Average Loss: 5.667, avg. samples / sec: 1026.79
Iteration:   1980, Loss function: 5.834, Average Loss: 5.667, avg. samples / sec: 1018.72
Iteration:   2000, Loss function: 5.618, Average Loss: 5.666, avg. samples / sec: 1037.99
Iteration:   2020, Loss function: 5.489, Average Loss: 5.664, avg. samples / sec: 972.22
Iteration:   2040, Loss function: 5.784, Average Loss: 5.663, avg. samples / sec: 1048.66
:::MLLOG {"namespace": "", "time_ms": 1639752720849, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752720850, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.432, Average Loss: 5.660, avg. samples / sec: 1051.41
Iteration:   2080, Loss function: 5.046, Average Loss: 5.657, avg. samples / sec: 993.47
Iteration:   2100, Loss function: 5.480, Average Loss: 5.655, avg. samples / sec: 1004.36
Iteration:   2120, Loss function: 5.345, Average Loss: 5.652, avg. samples / sec: 1002.43
Iteration:   2140, Loss function: 5.550, Average Loss: 5.649, avg. samples / sec: 943.67
Iteration:   2160, Loss function: 5.305, Average Loss: 5.646, avg. samples / sec: 1026.78
Iteration:   2180, Loss function: 5.352, Average Loss: 5.645, avg. samples / sec: 1047.25
Iteration:   2200, Loss function: 5.374, Average Loss: 5.640, avg. samples / sec: 1062.82
Iteration:   2220, Loss function: 5.785, Average Loss: 5.637, avg. samples / sec: 957.27
Iteration:   2240, Loss function: 5.344, Average Loss: 5.635, avg. samples / sec: 925.35
Iteration:   2260, Loss function: 5.251, Average Loss: 5.630, avg. samples / sec: 944.71
Iteration:   2280, Loss function: 5.322, Average Loss: 5.627, avg. samples / sec: 992.34
Iteration:   2300, Loss function: 5.079, Average Loss: 5.623, avg. samples / sec: 1097.36
Iteration:   2320, Loss function: 5.289, Average Loss: 5.621, avg. samples / sec: 1030.96
Iteration:   2340, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 1019.03
Iteration:   2360, Loss function: 5.241, Average Loss: 5.613, avg. samples / sec: 1030.45
Iteration:   2380, Loss function: 5.582, Average Loss: 5.609, avg. samples / sec: 998.25
Iteration:   2400, Loss function: 5.545, Average Loss: 5.604, avg. samples / sec: 1069.06
Iteration:   2420, Loss function: 5.514, Average Loss: 5.599, avg. samples / sec: 987.16
Iteration:   2440, Loss function: 5.605, Average Loss: 5.596, avg. samples / sec: 965.35
Iteration:   2460, Loss function: 5.189, Average Loss: 5.593, avg. samples / sec: 1068.11
Iteration:   2480, Loss function: 5.280, Average Loss: 5.588, avg. samples / sec: 1011.84
Iteration:   2500, Loss function: 5.373, Average Loss: 5.583, avg. samples / sec: 955.02
Iteration:   2520, Loss function: 5.382, Average Loss: 5.578, avg. samples / sec: 1114.81
Iteration:   2540, Loss function: 5.372, Average Loss: 5.574, avg. samples / sec: 967.18
Iteration:   2560, Loss function: 5.389, Average Loss: 5.571, avg. samples / sec: 1033.51
Iteration:   2580, Loss function: 5.223, Average Loss: 5.567, avg. samples / sec: 1032.51
Iteration:   2600, Loss function: 5.556, Average Loss: 5.565, avg. samples / sec: 975.29
Iteration:   2620, Loss function: 5.640, Average Loss: 5.559, avg. samples / sec: 991.91
Iteration:   2640, Loss function: 5.209, Average Loss: 5.556, avg. samples / sec: 1051.69
Iteration:   2660, Loss function: 5.148, Average Loss: 5.552, avg. samples / sec: 1000.24
Iteration:   2680, Loss function: 5.053, Average Loss: 5.548, avg. samples / sec: 1028.83
Iteration:   2700, Loss function: 5.133, Average Loss: 5.543, avg. samples / sec: 965.62
Iteration:   2720, Loss function: 5.366, Average Loss: 5.539, avg. samples / sec: 972.12
Iteration:   2740, Loss function: 5.017, Average Loss: 5.534, avg. samples / sec: 1061.85
Iteration:   2760, Loss function: 4.936, Average Loss: 5.528, avg. samples / sec: 956.88
Iteration:   2780, Loss function: 5.567, Average Loss: 5.523, avg. samples / sec: 922.13
Iteration:   2800, Loss function: 5.086, Average Loss: 5.518, avg. samples / sec: 1024.93
Iteration:   2820, Loss function: 5.597, Average Loss: 5.513, avg. samples / sec: 1062.86
Iteration:   2840, Loss function: 5.305, Average Loss: 5.509, avg. samples / sec: 1064.52
Iteration:   2860, Loss function: 5.119, Average Loss: 5.503, avg. samples / sec: 1035.34
Iteration:   2880, Loss function: 5.344, Average Loss: 5.497, avg. samples / sec: 1082.63
Iteration:   2900, Loss function: 5.038, Average Loss: 5.492, avg. samples / sec: 1040.30
Iteration:   2920, Loss function: 5.169, Average Loss: 5.487, avg. samples / sec: 1008.92
Iteration:   2940, Loss function: 5.002, Average Loss: 5.483, avg. samples / sec: 988.75
Iteration:   2960, Loss function: 5.373, Average Loss: 5.478, avg. samples / sec: 985.09
Iteration:   2980, Loss function: 5.119, Average Loss: 5.475, avg. samples / sec: 999.87
Iteration:   3000, Loss function: 5.223, Average Loss: 5.469, avg. samples / sec: 1004.20
Iteration:   3020, Loss function: 5.173, Average Loss: 5.463, avg. samples / sec: 979.33
Iteration:   3040, Loss function: 5.076, Average Loss: 5.457, avg. samples / sec: 1022.70
Iteration:   3060, Loss function: 4.930, Average Loss: 5.452, avg. samples / sec: 1040.66
Iteration:   3080, Loss function: 4.943, Average Loss: 5.446, avg. samples / sec: 1000.50
:::MLLOG {"namespace": "", "time_ms": 1639752837029, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752837030, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.249, Average Loss: 5.441, avg. samples / sec: 1017.49
Iteration:   3120, Loss function: 4.970, Average Loss: 5.434, avg. samples / sec: 972.16
Iteration:   3140, Loss function: 4.931, Average Loss: 5.429, avg. samples / sec: 1112.97
Iteration:   3160, Loss function: 5.382, Average Loss: 5.424, avg. samples / sec: 979.05
Iteration:   3180, Loss function: 5.102, Average Loss: 5.419, avg. samples / sec: 983.56
Iteration:   3200, Loss function: 5.120, Average Loss: 5.414, avg. samples / sec: 1017.39
Iteration:   3220, Loss function: 5.348, Average Loss: 5.408, avg. samples / sec: 1008.59
Iteration:   3240, Loss function: 5.251, Average Loss: 5.403, avg. samples / sec: 963.29
Iteration:   3260, Loss function: 5.065, Average Loss: 5.397, avg. samples / sec: 1008.18
Iteration:   3280, Loss function: 4.908, Average Loss: 5.391, avg. samples / sec: 1061.01
Iteration:   3300, Loss function: 4.948, Average Loss: 5.386, avg. samples / sec: 1024.19
Iteration:   3320, Loss function: 4.932, Average Loss: 5.381, avg. samples / sec: 975.12
Iteration:   3340, Loss function: 5.222, Average Loss: 5.377, avg. samples / sec: 948.60
Iteration:   3360, Loss function: 5.131, Average Loss: 5.370, avg. samples / sec: 982.28
Iteration:   3380, Loss function: 5.225, Average Loss: 5.364, avg. samples / sec: 1021.69
Iteration:   3400, Loss function: 4.852, Average Loss: 5.359, avg. samples / sec: 999.40
Iteration:   3420, Loss function: 5.117, Average Loss: 5.354, avg. samples / sec: 1032.14
Iteration:   3440, Loss function: 4.742, Average Loss: 5.349, avg. samples / sec: 1057.78
Iteration:   3460, Loss function: 5.212, Average Loss: 5.343, avg. samples / sec: 1064.73
Iteration:   3480, Loss function: 5.316, Average Loss: 5.339, avg. samples / sec: 1064.60
Iteration:   3500, Loss function: 5.298, Average Loss: 5.334, avg. samples / sec: 1008.76
Iteration:   3520, Loss function: 5.112, Average Loss: 5.330, avg. samples / sec: 1045.94
Iteration:   3540, Loss function: 4.975, Average Loss: 5.325, avg. samples / sec: 1041.51
Iteration:   3560, Loss function: 4.918, Average Loss: 5.321, avg. samples / sec: 1056.12
Iteration:   3580, Loss function: 5.254, Average Loss: 5.317, avg. samples / sec: 1016.12
Iteration:   3600, Loss function: 5.226, Average Loss: 5.312, avg. samples / sec: 994.99
Iteration:   3620, Loss function: 4.831, Average Loss: 5.307, avg. samples / sec: 998.97
Iteration:   3640, Loss function: 4.696, Average Loss: 5.301, avg. samples / sec: 998.92
Iteration:   3660, Loss function: 5.056, Average Loss: 5.296, avg. samples / sec: 1039.89
Iteration:   3680, Loss function: 5.221, Average Loss: 5.289, avg. samples / sec: 993.08
Iteration:   3700, Loss function: 4.857, Average Loss: 5.284, avg. samples / sec: 1006.88
Iteration:   3720, Loss function: 5.009, Average Loss: 5.278, avg. samples / sec: 1016.31
Iteration:   3740, Loss function: 5.124, Average Loss: 5.275, avg. samples / sec: 923.09
Iteration:   3760, Loss function: 5.020, Average Loss: 5.271, avg. samples / sec: 966.61
Iteration:   3780, Loss function: 5.009, Average Loss: 5.267, avg. samples / sec: 1045.38
Iteration:   3800, Loss function: 4.978, Average Loss: 5.263, avg. samples / sec: 1044.27
Iteration:   3820, Loss function: 5.264, Average Loss: 5.258, avg. samples / sec: 1000.00
Iteration:   3840, Loss function: 4.810, Average Loss: 5.254, avg. samples / sec: 953.38
Iteration:   3860, Loss function: 4.841, Average Loss: 5.249, avg. samples / sec: 935.66
Iteration:   3880, Loss function: 4.992, Average Loss: 5.244, avg. samples / sec: 963.64
Iteration:   3900, Loss function: 5.318, Average Loss: 5.239, avg. samples / sec: 1071.66
Iteration:   3920, Loss function: 5.022, Average Loss: 5.233, avg. samples / sec: 993.96
Iteration:   3940, Loss function: 5.061, Average Loss: 5.228, avg. samples / sec: 1036.59
Iteration:   3960, Loss function: 4.907, Average Loss: 5.224, avg. samples / sec: 1002.93
Iteration:   3980, Loss function: 4.767, Average Loss: 5.219, avg. samples / sec: 982.26
Iteration:   4000, Loss function: 5.165, Average Loss: 5.216, avg. samples / sec: 1043.06
Iteration:   4020, Loss function: 4.881, Average Loss: 5.210, avg. samples / sec: 1011.58
Iteration:   4040, Loss function: 5.100, Average Loss: 5.208, avg. samples / sec: 998.87
Iteration:   4060, Loss function: 5.146, Average Loss: 5.203, avg. samples / sec: 1014.81
Iteration:   4080, Loss function: 4.939, Average Loss: 5.198, avg. samples / sec: 1025.72
Iteration:   4100, Loss function: 5.119, Average Loss: 5.195, avg. samples / sec: 1011.55
:::MLLOG {"namespace": "", "time_ms": 1639752953287, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953289, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.971, Average Loss: 5.191, avg. samples / sec: 1039.39
Iteration:   4140, Loss function: 4.934, Average Loss: 5.186, avg. samples / sec: 1048.83
Iteration:   4160, Loss function: 5.024, Average Loss: 5.179, avg. samples / sec: 988.54
Iteration:   4180, Loss function: 4.829, Average Loss: 5.173, avg. samples / sec: 996.27
Iteration:   4200, Loss function: 4.764, Average Loss: 5.169, avg. samples / sec: 1016.82
Iteration:   4220, Loss function: 4.812, Average Loss: 5.164, avg. samples / sec: 1001.52
Iteration:   4240, Loss function: 4.850, Average Loss: 5.158, avg. samples / sec: 977.24
Iteration:   4260, Loss function: 5.046, Average Loss: 5.152, avg. samples / sec: 1031.88
Iteration:   4280, Loss function: 4.990, Average Loss: 5.146, avg. samples / sec: 980.82
Iteration:   4300, Loss function: 4.781, Average Loss: 5.140, avg. samples / sec: 1005.96
Iteration:   4320, Loss function: 4.820, Average Loss: 5.135, avg. samples / sec: 1016.67
Iteration:   4340, Loss function: 4.593, Average Loss: 5.129, avg. samples / sec: 983.00
Iteration:   4360, Loss function: 4.981, Average Loss: 5.125, avg. samples / sec: 998.46
Iteration:   4380, Loss function: 5.019, Average Loss: 5.121, avg. samples / sec: 1139.96
Iteration:   4400, Loss function: 4.862, Average Loss: 5.116, avg. samples / sec: 979.13
Iteration:   4420, Loss function: 4.837, Average Loss: 5.111, avg. samples / sec: 1065.42
Iteration:   4440, Loss function: 4.936, Average Loss: 5.106, avg. samples / sec: 986.85
Iteration:   4460, Loss function: 5.083, Average Loss: 5.101, avg. samples / sec: 933.65
Iteration:   4480, Loss function: 5.020, Average Loss: 5.098, avg. samples / sec: 988.00
Iteration:   4500, Loss function: 4.755, Average Loss: 5.095, avg. samples / sec: 1056.90
Iteration:   4520, Loss function: 4.818, Average Loss: 5.090, avg. samples / sec: 1055.93
Iteration:   4540, Loss function: 5.014, Average Loss: 5.087, avg. samples / sec: 1021.76
Iteration:   4560, Loss function: 4.743, Average Loss: 5.083, avg. samples / sec: 991.12
Iteration:   4580, Loss function: 4.855, Average Loss: 5.080, avg. samples / sec: 1053.73
Iteration:   4600, Loss function: 4.840, Average Loss: 5.078, avg. samples / sec: 1009.93
Iteration:   4620, Loss function: 4.848, Average Loss: 5.073, avg. samples / sec: 922.41
Iteration:   4640, Loss function: 4.793, Average Loss: 5.068, avg. samples / sec: 1058.86
Iteration:   4660, Loss function: 4.742, Average Loss: 5.064, avg. samples / sec: 1068.31
Iteration:   4680, Loss function: 5.179, Average Loss: 5.060, avg. samples / sec: 1079.59
Iteration:   4700, Loss function: 4.876, Average Loss: 5.056, avg. samples / sec: 1060.30
Iteration:   4720, Loss function: 4.612, Average Loss: 5.051, avg. samples / sec: 980.31
Iteration:   4740, Loss function: 4.780, Average Loss: 5.048, avg. samples / sec: 986.92
Iteration:   4760, Loss function: 4.770, Average Loss: 5.044, avg. samples / sec: 1081.22
Iteration:   4780, Loss function: 4.934, Average Loss: 5.040, avg. samples / sec: 1018.68
Iteration:   4800, Loss function: 4.906, Average Loss: 5.037, avg. samples / sec: 1040.14
Iteration:   4820, Loss function: 4.725, Average Loss: 5.034, avg. samples / sec: 947.26
Iteration:   4840, Loss function: 5.042, Average Loss: 5.031, avg. samples / sec: 973.83
Iteration:   4860, Loss function: 4.591, Average Loss: 5.026, avg. samples / sec: 1020.99
Iteration:   4880, Loss function: 5.256, Average Loss: 5.022, avg. samples / sec: 997.43
Iteration:   4900, Loss function: 4.483, Average Loss: 5.018, avg. samples / sec: 1063.62
Iteration:   4920, Loss function: 4.747, Average Loss: 5.016, avg. samples / sec: 1054.13
Iteration:   4940, Loss function: 4.631, Average Loss: 5.011, avg. samples / sec: 960.96
Iteration:   4960, Loss function: 4.768, Average Loss: 5.008, avg. samples / sec: 973.60
Iteration:   4980, Loss function: 4.576, Average Loss: 5.005, avg. samples / sec: 975.88
Iteration:   5000, Loss function: 5.016, Average Loss: 5.000, avg. samples / sec: 971.46
Iteration:   5020, Loss function: 5.111, Average Loss: 4.997, avg. samples / sec: 915.36
Iteration:   5040, Loss function: 4.760, Average Loss: 4.994, avg. samples / sec: 983.05
Iteration:   5060, Loss function: 4.814, Average Loss: 4.992, avg. samples / sec: 966.25
Iteration:   5080, Loss function: 4.564, Average Loss: 4.987, avg. samples / sec: 1037.78
Iteration:   5100, Loss function: 4.860, Average Loss: 4.984, avg. samples / sec: 1085.69
Iteration:   5120, Loss function: 4.673, Average Loss: 4.981, avg. samples / sec: 1008.75
Iteration:   5140, Loss function: 4.841, Average Loss: 4.978, avg. samples / sec: 1063.58
:::MLLOG {"namespace": "", "time_ms": 1639753069451, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.31 s
:::MLLOG {"namespace": "", "time_ms": 1639753102822, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753102880, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753102881, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.926, Average Loss: 4.973, avg. samples / sec: 64.31
Iteration:   5180, Loss function: 5.044, Average Loss: 4.968, avg. samples / sec: 1215.09
Iteration:   5200, Loss function: 4.695, Average Loss: 4.964, avg. samples / sec: 1069.78
DONE (t=4.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10750
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21633
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09528
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19059
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13639
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20075
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10750 AP goal: 0.10000
Iteration:   5220, Loss function: 4.733, Average Loss: 4.961, avg. samples / sec: 1099.44
:::MLLOG {"namespace": "", "time_ms": 1639753110629, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110630, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10749664258561946, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110631, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110830, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:32 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:32 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752458425, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752458623, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3203587143, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3203587143
:::MLLOG {"namespace": "", "time_ms": 1639752460481, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752460481, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752460485, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752483687, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752483688, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752485907, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752485908, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752486355, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752486355, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752486357, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.715, Average Loss: 0.023, avg. samples / sec: 4.45
Iteration:     20, Loss function: 21.101, Average Loss: 0.455, avg. samples / sec: 821.85
Iteration:     40, Loss function: 20.704, Average Loss: 0.857, avg. samples / sec: 900.27
Iteration:     60, Loss function: 20.392, Average Loss: 1.247, avg. samples / sec: 953.98
Iteration:     80, Loss function: 20.221, Average Loss: 1.622, avg. samples / sec: 984.30
Iteration:    100, Loss function: 17.366, Average Loss: 1.967, avg. samples / sec: 983.36
Iteration:    120, Loss function: 12.742, Average Loss: 2.202, avg. samples / sec: 1000.50
Iteration:    140, Loss function: 9.974, Average Loss: 2.376, avg. samples / sec: 983.87
Iteration:    160, Loss function: 9.416, Average Loss: 2.520, avg. samples / sec: 1017.43
Iteration:    180, Loss function: 9.196, Average Loss: 2.652, avg. samples / sec: 1029.93
Iteration:    200, Loss function: 8.779, Average Loss: 2.778, avg. samples / sec: 1052.03
Iteration:    220, Loss function: 8.467, Average Loss: 2.897, avg. samples / sec: 972.34
Iteration:    240, Loss function: 8.693, Average Loss: 3.014, avg. samples / sec: 1006.96
Iteration:    260, Loss function: 8.621, Average Loss: 3.126, avg. samples / sec: 1051.52
Iteration:    280, Loss function: 8.650, Average Loss: 3.236, avg. samples / sec: 984.05
Iteration:    300, Loss function: 8.343, Average Loss: 3.340, avg. samples / sec: 952.30
Iteration:    320, Loss function: 8.412, Average Loss: 3.440, avg. samples / sec: 1034.69
Iteration:    340, Loss function: 8.372, Average Loss: 3.537, avg. samples / sec: 985.43
Iteration:    360, Loss function: 8.245, Average Loss: 3.630, avg. samples / sec: 990.97
Iteration:    380, Loss function: 7.904, Average Loss: 3.718, avg. samples / sec: 1021.51
Iteration:    400, Loss function: 8.019, Average Loss: 3.803, avg. samples / sec: 1030.86
Iteration:    420, Loss function: 7.637, Average Loss: 3.886, avg. samples / sec: 951.06
Iteration:    440, Loss function: 7.750, Average Loss: 3.964, avg. samples / sec: 1026.55
Iteration:    460, Loss function: 7.773, Average Loss: 4.039, avg. samples / sec: 1045.21
Iteration:    480, Loss function: 7.610, Average Loss: 4.112, avg. samples / sec: 932.91
Iteration:    500, Loss function: 7.740, Average Loss: 4.184, avg. samples / sec: 907.27
Iteration:    520, Loss function: 7.395, Average Loss: 4.252, avg. samples / sec: 998.39
Iteration:    540, Loss function: 7.402, Average Loss: 4.315, avg. samples / sec: 1034.76
Iteration:    560, Loss function: 7.165, Average Loss: 4.376, avg. samples / sec: 1030.45
Iteration:    580, Loss function: 7.177, Average Loss: 4.433, avg. samples / sec: 989.77
Iteration:    600, Loss function: 7.402, Average Loss: 4.492, avg. samples / sec: 992.32
Iteration:    620, Loss function: 7.100, Average Loss: 4.547, avg. samples / sec: 998.69
Iteration:    640, Loss function: 7.018, Average Loss: 4.601, avg. samples / sec: 971.38
Iteration:    660, Loss function: 7.043, Average Loss: 4.653, avg. samples / sec: 996.02
Iteration:    680, Loss function: 7.201, Average Loss: 4.703, avg. samples / sec: 1023.72
Iteration:    700, Loss function: 6.896, Average Loss: 4.750, avg. samples / sec: 1046.28
Iteration:    720, Loss function: 7.047, Average Loss: 4.796, avg. samples / sec: 1067.52
Iteration:    740, Loss function: 6.897, Average Loss: 4.841, avg. samples / sec: 967.19
Iteration:    760, Loss function: 7.029, Average Loss: 4.884, avg. samples / sec: 1021.99
Iteration:    780, Loss function: 6.986, Average Loss: 4.925, avg. samples / sec: 1014.59
Iteration:    800, Loss function: 7.117, Average Loss: 4.963, avg. samples / sec: 1020.51
Iteration:    820, Loss function: 6.859, Average Loss: 5.000, avg. samples / sec: 1026.27
Iteration:    840, Loss function: 6.709, Average Loss: 5.034, avg. samples / sec: 1016.26
Iteration:    860, Loss function: 6.799, Average Loss: 5.067, avg. samples / sec: 915.89
Iteration:    880, Loss function: 6.736, Average Loss: 5.098, avg. samples / sec: 993.18
Iteration:    900, Loss function: 6.923, Average Loss: 5.128, avg. samples / sec: 998.95
Iteration:    920, Loss function: 6.800, Average Loss: 5.158, avg. samples / sec: 1013.69
Iteration:    940, Loss function: 6.679, Average Loss: 5.186, avg. samples / sec: 958.97
Iteration:    960, Loss function: 6.435, Average Loss: 5.214, avg. samples / sec: 984.58
Iteration:    980, Loss function: 6.484, Average Loss: 5.241, avg. samples / sec: 990.34
Iteration:   1000, Loss function: 6.559, Average Loss: 5.266, avg. samples / sec: 1056.15
Iteration:   1020, Loss function: 6.156, Average Loss: 5.290, avg. samples / sec: 1116.86
:::MLLOG {"namespace": "", "time_ms": 1639752604214, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752604215, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.577, Average Loss: 5.314, avg. samples / sec: 1077.43
Iteration:   1060, Loss function: 6.197, Average Loss: 5.337, avg. samples / sec: 1035.15
Iteration:   1080, Loss function: 6.379, Average Loss: 5.359, avg. samples / sec: 1005.25
Iteration:   1100, Loss function: 6.039, Average Loss: 5.378, avg. samples / sec: 935.42
Iteration:   1120, Loss function: 6.172, Average Loss: 5.397, avg. samples / sec: 1061.49
Iteration:   1140, Loss function: 6.326, Average Loss: 5.415, avg. samples / sec: 968.32
Iteration:   1160, Loss function: 6.003, Average Loss: 5.432, avg. samples / sec: 981.42
Iteration:   1180, Loss function: 6.340, Average Loss: 5.449, avg. samples / sec: 1001.09
Iteration:   1200, Loss function: 6.239, Average Loss: 5.466, avg. samples / sec: 990.38
Iteration:   1220, Loss function: 6.200, Average Loss: 5.481, avg. samples / sec: 935.08
Iteration:   1240, Loss function: 6.038, Average Loss: 5.494, avg. samples / sec: 1018.56
Iteration:   1260, Loss function: 6.053, Average Loss: 5.506, avg. samples / sec: 983.49
Iteration:   1280, Loss function: 5.918, Average Loss: 5.518, avg. samples / sec: 983.36
Iteration:   1300, Loss function: 6.066, Average Loss: 5.530, avg. samples / sec: 1037.56
Iteration:   1320, Loss function: 6.127, Average Loss: 5.542, avg. samples / sec: 1077.63
Iteration:   1340, Loss function: 5.892, Average Loss: 5.551, avg. samples / sec: 963.23
Iteration:   1360, Loss function: 5.973, Average Loss: 5.562, avg. samples / sec: 1000.45
Iteration:   1380, Loss function: 6.190, Average Loss: 5.572, avg. samples / sec: 1003.53
Iteration:   1400, Loss function: 6.204, Average Loss: 5.581, avg. samples / sec: 935.77
Iteration:   1420, Loss function: 5.943, Average Loss: 5.588, avg. samples / sec: 1022.00
Iteration:   1440, Loss function: 6.138, Average Loss: 5.595, avg. samples / sec: 1006.20
Iteration:   1460, Loss function: 6.201, Average Loss: 5.603, avg. samples / sec: 1049.88
Iteration:   1480, Loss function: 5.884, Average Loss: 5.610, avg. samples / sec: 964.80
Iteration:   1500, Loss function: 6.093, Average Loss: 5.617, avg. samples / sec: 1022.40
Iteration:   1520, Loss function: 6.147, Average Loss: 5.623, avg. samples / sec: 1049.44
Iteration:   1540, Loss function: 5.879, Average Loss: 5.627, avg. samples / sec: 955.05
Iteration:   1560, Loss function: 5.635, Average Loss: 5.631, avg. samples / sec: 1002.29
Iteration:   1580, Loss function: 5.712, Average Loss: 5.636, avg. samples / sec: 1024.26
Iteration:   1600, Loss function: 6.275, Average Loss: 5.641, avg. samples / sec: 949.97
Iteration:   1620, Loss function: 5.622, Average Loss: 5.645, avg. samples / sec: 994.37
Iteration:   1640, Loss function: 6.016, Average Loss: 5.648, avg. samples / sec: 1003.17
Iteration:   1660, Loss function: 6.109, Average Loss: 5.652, avg. samples / sec: 993.36
Iteration:   1680, Loss function: 5.713, Average Loss: 5.654, avg. samples / sec: 1036.26
Iteration:   1700, Loss function: 5.352, Average Loss: 5.657, avg. samples / sec: 1062.05
Iteration:   1720, Loss function: 5.682, Average Loss: 5.659, avg. samples / sec: 1034.53
Iteration:   1740, Loss function: 5.947, Average Loss: 5.661, avg. samples / sec: 992.45
Iteration:   1760, Loss function: 5.686, Average Loss: 5.662, avg. samples / sec: 1034.76
Iteration:   1780, Loss function: 5.901, Average Loss: 5.663, avg. samples / sec: 1039.68
Iteration:   1800, Loss function: 5.672, Average Loss: 5.664, avg. samples / sec: 987.64
Iteration:   1820, Loss function: 6.060, Average Loss: 5.667, avg. samples / sec: 954.70
Iteration:   1840, Loss function: 5.992, Average Loss: 5.669, avg. samples / sec: 975.90
Iteration:   1860, Loss function: 5.724, Average Loss: 5.668, avg. samples / sec: 1010.49
Iteration:   1880, Loss function: 5.979, Average Loss: 5.669, avg. samples / sec: 1056.67
Iteration:   1900, Loss function: 5.818, Average Loss: 5.670, avg. samples / sec: 1016.96
Iteration:   1920, Loss function: 5.782, Average Loss: 5.669, avg. samples / sec: 994.56
Iteration:   1940, Loss function: 5.798, Average Loss: 5.668, avg. samples / sec: 1017.69
Iteration:   1960, Loss function: 5.647, Average Loss: 5.667, avg. samples / sec: 1026.79
Iteration:   1980, Loss function: 5.834, Average Loss: 5.667, avg. samples / sec: 1018.72
Iteration:   2000, Loss function: 5.618, Average Loss: 5.666, avg. samples / sec: 1037.99
Iteration:   2020, Loss function: 5.489, Average Loss: 5.664, avg. samples / sec: 972.22
Iteration:   2040, Loss function: 5.784, Average Loss: 5.663, avg. samples / sec: 1048.66
:::MLLOG {"namespace": "", "time_ms": 1639752720849, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752720850, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.432, Average Loss: 5.660, avg. samples / sec: 1051.41
Iteration:   2080, Loss function: 5.046, Average Loss: 5.657, avg. samples / sec: 993.47
Iteration:   2100, Loss function: 5.480, Average Loss: 5.655, avg. samples / sec: 1004.36
Iteration:   2120, Loss function: 5.345, Average Loss: 5.652, avg. samples / sec: 1002.43
Iteration:   2140, Loss function: 5.550, Average Loss: 5.649, avg. samples / sec: 943.67
Iteration:   2160, Loss function: 5.305, Average Loss: 5.646, avg. samples / sec: 1026.78
Iteration:   2180, Loss function: 5.352, Average Loss: 5.645, avg. samples / sec: 1047.25
Iteration:   2200, Loss function: 5.374, Average Loss: 5.640, avg. samples / sec: 1062.82
Iteration:   2220, Loss function: 5.785, Average Loss: 5.637, avg. samples / sec: 957.27
Iteration:   2240, Loss function: 5.344, Average Loss: 5.635, avg. samples / sec: 925.35
Iteration:   2260, Loss function: 5.251, Average Loss: 5.630, avg. samples / sec: 944.71
Iteration:   2280, Loss function: 5.322, Average Loss: 5.627, avg. samples / sec: 992.34
Iteration:   2300, Loss function: 5.079, Average Loss: 5.623, avg. samples / sec: 1097.36
Iteration:   2320, Loss function: 5.289, Average Loss: 5.621, avg. samples / sec: 1030.96
Iteration:   2340, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 1019.03
Iteration:   2360, Loss function: 5.241, Average Loss: 5.613, avg. samples / sec: 1030.45
Iteration:   2380, Loss function: 5.582, Average Loss: 5.609, avg. samples / sec: 998.25
Iteration:   2400, Loss function: 5.545, Average Loss: 5.604, avg. samples / sec: 1069.06
Iteration:   2420, Loss function: 5.514, Average Loss: 5.599, avg. samples / sec: 987.16
Iteration:   2440, Loss function: 5.605, Average Loss: 5.596, avg. samples / sec: 965.35
Iteration:   2460, Loss function: 5.189, Average Loss: 5.593, avg. samples / sec: 1068.11
Iteration:   2480, Loss function: 5.280, Average Loss: 5.588, avg. samples / sec: 1011.84
Iteration:   2500, Loss function: 5.373, Average Loss: 5.583, avg. samples / sec: 955.02
Iteration:   2520, Loss function: 5.382, Average Loss: 5.578, avg. samples / sec: 1114.81
Iteration:   2540, Loss function: 5.372, Average Loss: 5.574, avg. samples / sec: 967.18
Iteration:   2560, Loss function: 5.389, Average Loss: 5.571, avg. samples / sec: 1033.51
Iteration:   2580, Loss function: 5.223, Average Loss: 5.567, avg. samples / sec: 1032.51
Iteration:   2600, Loss function: 5.556, Average Loss: 5.565, avg. samples / sec: 975.29
Iteration:   2620, Loss function: 5.640, Average Loss: 5.559, avg. samples / sec: 991.91
Iteration:   2640, Loss function: 5.209, Average Loss: 5.556, avg. samples / sec: 1051.69
Iteration:   2660, Loss function: 5.148, Average Loss: 5.552, avg. samples / sec: 1000.24
Iteration:   2680, Loss function: 5.053, Average Loss: 5.548, avg. samples / sec: 1028.83
Iteration:   2700, Loss function: 5.133, Average Loss: 5.543, avg. samples / sec: 965.62
Iteration:   2720, Loss function: 5.366, Average Loss: 5.539, avg. samples / sec: 972.12
Iteration:   2740, Loss function: 5.017, Average Loss: 5.534, avg. samples / sec: 1061.85
Iteration:   2760, Loss function: 4.936, Average Loss: 5.528, avg. samples / sec: 956.88
Iteration:   2780, Loss function: 5.567, Average Loss: 5.523, avg. samples / sec: 922.13
Iteration:   2800, Loss function: 5.086, Average Loss: 5.518, avg. samples / sec: 1024.93
Iteration:   2820, Loss function: 5.597, Average Loss: 5.513, avg. samples / sec: 1062.86
Iteration:   2840, Loss function: 5.305, Average Loss: 5.509, avg. samples / sec: 1064.52
Iteration:   2860, Loss function: 5.119, Average Loss: 5.503, avg. samples / sec: 1035.34
Iteration:   2880, Loss function: 5.344, Average Loss: 5.497, avg. samples / sec: 1082.63
Iteration:   2900, Loss function: 5.038, Average Loss: 5.492, avg. samples / sec: 1040.30
Iteration:   2920, Loss function: 5.169, Average Loss: 5.487, avg. samples / sec: 1008.92
Iteration:   2940, Loss function: 5.002, Average Loss: 5.483, avg. samples / sec: 988.75
Iteration:   2960, Loss function: 5.373, Average Loss: 5.478, avg. samples / sec: 985.09
Iteration:   2980, Loss function: 5.119, Average Loss: 5.475, avg. samples / sec: 999.87
Iteration:   3000, Loss function: 5.223, Average Loss: 5.469, avg. samples / sec: 1004.20
Iteration:   3020, Loss function: 5.173, Average Loss: 5.463, avg. samples / sec: 979.33
Iteration:   3040, Loss function: 5.076, Average Loss: 5.457, avg. samples / sec: 1022.70
Iteration:   3060, Loss function: 4.930, Average Loss: 5.452, avg. samples / sec: 1040.66
Iteration:   3080, Loss function: 4.943, Average Loss: 5.446, avg. samples / sec: 1000.50
:::MLLOG {"namespace": "", "time_ms": 1639752837029, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752837030, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.249, Average Loss: 5.441, avg. samples / sec: 1017.49
Iteration:   3120, Loss function: 4.970, Average Loss: 5.434, avg. samples / sec: 972.16
Iteration:   3140, Loss function: 4.931, Average Loss: 5.429, avg. samples / sec: 1112.97
Iteration:   3160, Loss function: 5.382, Average Loss: 5.424, avg. samples / sec: 979.05
Iteration:   3180, Loss function: 5.102, Average Loss: 5.419, avg. samples / sec: 983.56
Iteration:   3200, Loss function: 5.120, Average Loss: 5.414, avg. samples / sec: 1017.39
Iteration:   3220, Loss function: 5.348, Average Loss: 5.408, avg. samples / sec: 1008.59
Iteration:   3240, Loss function: 5.251, Average Loss: 5.403, avg. samples / sec: 963.29
Iteration:   3260, Loss function: 5.065, Average Loss: 5.397, avg. samples / sec: 1008.18
Iteration:   3280, Loss function: 4.908, Average Loss: 5.391, avg. samples / sec: 1061.01
Iteration:   3300, Loss function: 4.948, Average Loss: 5.386, avg. samples / sec: 1024.19
Iteration:   3320, Loss function: 4.932, Average Loss: 5.381, avg. samples / sec: 975.12
Iteration:   3340, Loss function: 5.222, Average Loss: 5.377, avg. samples / sec: 948.60
Iteration:   3360, Loss function: 5.131, Average Loss: 5.370, avg. samples / sec: 982.28
Iteration:   3380, Loss function: 5.225, Average Loss: 5.364, avg. samples / sec: 1021.69
Iteration:   3400, Loss function: 4.852, Average Loss: 5.359, avg. samples / sec: 999.40
Iteration:   3420, Loss function: 5.117, Average Loss: 5.354, avg. samples / sec: 1032.14
Iteration:   3440, Loss function: 4.742, Average Loss: 5.349, avg. samples / sec: 1057.78
Iteration:   3460, Loss function: 5.212, Average Loss: 5.343, avg. samples / sec: 1064.73
Iteration:   3480, Loss function: 5.316, Average Loss: 5.339, avg. samples / sec: 1064.60
Iteration:   3500, Loss function: 5.298, Average Loss: 5.334, avg. samples / sec: 1008.76
Iteration:   3520, Loss function: 5.112, Average Loss: 5.330, avg. samples / sec: 1045.94
Iteration:   3540, Loss function: 4.975, Average Loss: 5.325, avg. samples / sec: 1041.51
Iteration:   3560, Loss function: 4.918, Average Loss: 5.321, avg. samples / sec: 1056.12
Iteration:   3580, Loss function: 5.254, Average Loss: 5.317, avg. samples / sec: 1016.12
Iteration:   3600, Loss function: 5.226, Average Loss: 5.312, avg. samples / sec: 994.99
Iteration:   3620, Loss function: 4.831, Average Loss: 5.307, avg. samples / sec: 998.97
Iteration:   3640, Loss function: 4.696, Average Loss: 5.301, avg. samples / sec: 998.92
Iteration:   3660, Loss function: 5.056, Average Loss: 5.296, avg. samples / sec: 1039.89
Iteration:   3680, Loss function: 5.221, Average Loss: 5.289, avg. samples / sec: 993.08
Iteration:   3700, Loss function: 4.857, Average Loss: 5.284, avg. samples / sec: 1006.88
Iteration:   3720, Loss function: 5.009, Average Loss: 5.278, avg. samples / sec: 1016.31
Iteration:   3740, Loss function: 5.124, Average Loss: 5.275, avg. samples / sec: 923.09
Iteration:   3760, Loss function: 5.020, Average Loss: 5.271, avg. samples / sec: 966.61
Iteration:   3780, Loss function: 5.009, Average Loss: 5.267, avg. samples / sec: 1045.38
Iteration:   3800, Loss function: 4.978, Average Loss: 5.263, avg. samples / sec: 1044.27
Iteration:   3820, Loss function: 5.264, Average Loss: 5.258, avg. samples / sec: 1000.00
Iteration:   3840, Loss function: 4.810, Average Loss: 5.254, avg. samples / sec: 953.38
Iteration:   3860, Loss function: 4.841, Average Loss: 5.249, avg. samples / sec: 935.66
Iteration:   3880, Loss function: 4.992, Average Loss: 5.244, avg. samples / sec: 963.64
Iteration:   3900, Loss function: 5.318, Average Loss: 5.239, avg. samples / sec: 1071.66
Iteration:   3920, Loss function: 5.022, Average Loss: 5.233, avg. samples / sec: 993.96
Iteration:   3940, Loss function: 5.061, Average Loss: 5.228, avg. samples / sec: 1036.59
Iteration:   3960, Loss function: 4.907, Average Loss: 5.224, avg. samples / sec: 1002.93
Iteration:   3980, Loss function: 4.767, Average Loss: 5.219, avg. samples / sec: 982.26
Iteration:   4000, Loss function: 5.165, Average Loss: 5.216, avg. samples / sec: 1043.06
Iteration:   4020, Loss function: 4.881, Average Loss: 5.210, avg. samples / sec: 1011.58
Iteration:   4040, Loss function: 5.100, Average Loss: 5.208, avg. samples / sec: 998.87
Iteration:   4060, Loss function: 5.146, Average Loss: 5.203, avg. samples / sec: 1014.81
Iteration:   4080, Loss function: 4.939, Average Loss: 5.198, avg. samples / sec: 1025.72
Iteration:   4100, Loss function: 5.119, Average Loss: 5.195, avg. samples / sec: 1011.55
:::MLLOG {"namespace": "", "time_ms": 1639752953287, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953289, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.971, Average Loss: 5.191, avg. samples / sec: 1039.39
Iteration:   4140, Loss function: 4.934, Average Loss: 5.186, avg. samples / sec: 1048.83
Iteration:   4160, Loss function: 5.024, Average Loss: 5.179, avg. samples / sec: 988.54
Iteration:   4180, Loss function: 4.829, Average Loss: 5.173, avg. samples / sec: 996.27
Iteration:   4200, Loss function: 4.764, Average Loss: 5.169, avg. samples / sec: 1016.82
Iteration:   4220, Loss function: 4.812, Average Loss: 5.164, avg. samples / sec: 1001.52
Iteration:   4240, Loss function: 4.850, Average Loss: 5.158, avg. samples / sec: 977.24
Iteration:   4260, Loss function: 5.046, Average Loss: 5.152, avg. samples / sec: 1031.88
Iteration:   4280, Loss function: 4.990, Average Loss: 5.146, avg. samples / sec: 980.82
Iteration:   4300, Loss function: 4.781, Average Loss: 5.140, avg. samples / sec: 1005.96
Iteration:   4320, Loss function: 4.820, Average Loss: 5.135, avg. samples / sec: 1016.67
Iteration:   4340, Loss function: 4.593, Average Loss: 5.129, avg. samples / sec: 983.00
Iteration:   4360, Loss function: 4.981, Average Loss: 5.125, avg. samples / sec: 998.46
Iteration:   4380, Loss function: 5.019, Average Loss: 5.121, avg. samples / sec: 1139.96
Iteration:   4400, Loss function: 4.862, Average Loss: 5.116, avg. samples / sec: 979.13
Iteration:   4420, Loss function: 4.837, Average Loss: 5.111, avg. samples / sec: 1065.42
Iteration:   4440, Loss function: 4.936, Average Loss: 5.106, avg. samples / sec: 986.85
Iteration:   4460, Loss function: 5.083, Average Loss: 5.101, avg. samples / sec: 933.65
Iteration:   4480, Loss function: 5.020, Average Loss: 5.098, avg. samples / sec: 988.00
Iteration:   4500, Loss function: 4.755, Average Loss: 5.095, avg. samples / sec: 1056.90
Iteration:   4520, Loss function: 4.818, Average Loss: 5.090, avg. samples / sec: 1055.93
Iteration:   4540, Loss function: 5.014, Average Loss: 5.087, avg. samples / sec: 1021.76
Iteration:   4560, Loss function: 4.743, Average Loss: 5.083, avg. samples / sec: 991.12
Iteration:   4580, Loss function: 4.855, Average Loss: 5.080, avg. samples / sec: 1053.73
Iteration:   4600, Loss function: 4.840, Average Loss: 5.078, avg. samples / sec: 1009.93
Iteration:   4620, Loss function: 4.848, Average Loss: 5.073, avg. samples / sec: 922.41
Iteration:   4640, Loss function: 4.793, Average Loss: 5.068, avg. samples / sec: 1058.86
Iteration:   4660, Loss function: 4.742, Average Loss: 5.064, avg. samples / sec: 1068.31
Iteration:   4680, Loss function: 5.179, Average Loss: 5.060, avg. samples / sec: 1079.59
Iteration:   4700, Loss function: 4.876, Average Loss: 5.056, avg. samples / sec: 1060.30
Iteration:   4720, Loss function: 4.612, Average Loss: 5.051, avg. samples / sec: 980.31
Iteration:   4740, Loss function: 4.780, Average Loss: 5.048, avg. samples / sec: 986.92
Iteration:   4760, Loss function: 4.770, Average Loss: 5.044, avg. samples / sec: 1081.22
Iteration:   4780, Loss function: 4.934, Average Loss: 5.040, avg. samples / sec: 1018.68
Iteration:   4800, Loss function: 4.906, Average Loss: 5.037, avg. samples / sec: 1040.14
Iteration:   4820, Loss function: 4.725, Average Loss: 5.034, avg. samples / sec: 947.26
Iteration:   4840, Loss function: 5.042, Average Loss: 5.031, avg. samples / sec: 973.83
Iteration:   4860, Loss function: 4.591, Average Loss: 5.026, avg. samples / sec: 1020.99
Iteration:   4880, Loss function: 5.256, Average Loss: 5.022, avg. samples / sec: 997.43
Iteration:   4900, Loss function: 4.483, Average Loss: 5.018, avg. samples / sec: 1063.62
Iteration:   4920, Loss function: 4.747, Average Loss: 5.016, avg. samples / sec: 1054.13
Iteration:   4940, Loss function: 4.631, Average Loss: 5.011, avg. samples / sec: 960.96
Iteration:   4960, Loss function: 4.768, Average Loss: 5.008, avg. samples / sec: 973.60
Iteration:   4980, Loss function: 4.576, Average Loss: 5.005, avg. samples / sec: 975.88
Iteration:   5000, Loss function: 5.016, Average Loss: 5.000, avg. samples / sec: 971.46
Iteration:   5020, Loss function: 5.111, Average Loss: 4.997, avg. samples / sec: 915.36
Iteration:   5040, Loss function: 4.760, Average Loss: 4.994, avg. samples / sec: 983.05
Iteration:   5060, Loss function: 4.814, Average Loss: 4.992, avg. samples / sec: 966.25
Iteration:   5080, Loss function: 4.564, Average Loss: 4.987, avg. samples / sec: 1037.78
Iteration:   5100, Loss function: 4.860, Average Loss: 4.984, avg. samples / sec: 1085.69
Iteration:   5120, Loss function: 4.673, Average Loss: 4.981, avg. samples / sec: 1008.75
Iteration:   5140, Loss function: 4.841, Average Loss: 4.978, avg. samples / sec: 1063.58
:::MLLOG {"namespace": "", "time_ms": 1639753069451, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.31 s
:::MLLOG {"namespace": "", "time_ms": 1639753102822, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753102880, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753102881, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.93s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.926, Average Loss: 4.973, avg. samples / sec: 64.31
Iteration:   5180, Loss function: 5.044, Average Loss: 4.968, avg. samples / sec: 1215.09
Iteration:   5200, Loss function: 4.695, Average Loss: 4.964, avg. samples / sec: 1069.78
DONE (t=4.89s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10750
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21633
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09528
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19059
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13639
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20075
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10750 AP goal: 0.10000
Iteration:   5220, Loss function: 4.733, Average Loss: 4.961, avg. samples / sec: 1099.44
:::MLLOG {"namespace": "", "time_ms": 1639753110629, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110630, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10749664258561946, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110631, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753110830, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753112
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:32 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:26 PM'
START TIMING RUN WAS 2021-12-17 02:47:26 PM
ENDING TIMING RUN AT 2021-12-17 02:58:32 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:32 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
+ result=666
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,666,nvidia,2021-12-17 02:47:26 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,666,nvidia,2021-12-17 02:47:26 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
