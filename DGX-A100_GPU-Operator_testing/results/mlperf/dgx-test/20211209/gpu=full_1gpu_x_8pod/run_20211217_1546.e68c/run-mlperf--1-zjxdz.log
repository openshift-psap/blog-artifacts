8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
No MIG GPU available, using the full GPUs (GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908).
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908).'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752443
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:23 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:23 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:23 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:23 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-zjxdz to the sync file ...
run-mlperf--1-zjxdz Found 5 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
run-mlperf--1-zjxdz Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
Fri Dec 17 14:47:33 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752455903, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752456047, "event_type": "POINT_IN_TIME", "key": "seed", "value": 820242056, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 820242056
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752457755, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752457756, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752480795, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752480796, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752482934, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482937, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483201, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483202, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483203, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.653, Average Loss: 0.023, avg. samples / sec: 4.54
Iteration:     20, Loss function: 20.994, Average Loss: 0.454, avg. samples / sec: 959.34
Iteration:     40, Loss function: 20.698, Average Loss: 0.855, avg. samples / sec: 1024.67
Iteration:     60, Loss function: 20.297, Average Loss: 1.245, avg. samples / sec: 946.63
Iteration:     80, Loss function: 19.974, Average Loss: 1.618, avg. samples / sec: 917.04
Iteration:    100, Loss function: 15.002, Average Loss: 1.939, avg. samples / sec: 980.14
Iteration:    120, Loss function: 10.585, Average Loss: 2.140, avg. samples / sec: 926.35
Iteration:    140, Loss function: 9.691, Average Loss: 2.295, avg. samples / sec: 979.90
Iteration:    160, Loss function: 9.110, Average Loss: 2.434, avg. samples / sec: 955.98
Iteration:    180, Loss function: 8.888, Average Loss: 2.563, avg. samples / sec: 974.10
Iteration:    200, Loss function: 8.671, Average Loss: 2.687, avg. samples / sec: 1023.38
Iteration:    220, Loss function: 8.439, Average Loss: 2.808, avg. samples / sec: 930.29
Iteration:    240, Loss function: 8.719, Average Loss: 2.927, avg. samples / sec: 1002.39
Iteration:    260, Loss function: 8.977, Average Loss: 3.044, avg. samples / sec: 990.22
Iteration:    280, Loss function: 8.536, Average Loss: 3.155, avg. samples / sec: 978.10
Iteration:    300, Loss function: 8.344, Average Loss: 3.260, avg. samples / sec: 955.36
Iteration:    320, Loss function: 8.282, Average Loss: 3.360, avg. samples / sec: 988.66
Iteration:    340, Loss function: 8.384, Average Loss: 3.458, avg. samples / sec: 959.14
Iteration:    360, Loss function: 8.141, Average Loss: 3.551, avg. samples / sec: 958.79
Iteration:    380, Loss function: 8.033, Average Loss: 3.642, avg. samples / sec: 1046.99
Iteration:    400, Loss function: 7.915, Average Loss: 3.727, avg. samples / sec: 1033.23
Iteration:    420, Loss function: 7.712, Average Loss: 3.808, avg. samples / sec: 946.17
Iteration:    440, Loss function: 7.827, Average Loss: 3.886, avg. samples / sec: 1022.97
Iteration:    460, Loss function: 7.820, Average Loss: 3.964, avg. samples / sec: 1047.08
Iteration:    480, Loss function: 7.470, Average Loss: 4.040, avg. samples / sec: 984.01
Iteration:    500, Loss function: 7.468, Average Loss: 4.111, avg. samples / sec: 1001.01
Iteration:    520, Loss function: 7.638, Average Loss: 4.180, avg. samples / sec: 837.98
Iteration:    540, Loss function: 7.561, Average Loss: 4.248, avg. samples / sec: 1147.02
Iteration:    560, Loss function: 7.328, Average Loss: 4.310, avg. samples / sec: 978.83
Iteration:    580, Loss function: 7.150, Average Loss: 4.371, avg. samples / sec: 939.39
Iteration:    600, Loss function: 7.235, Average Loss: 4.430, avg. samples / sec: 1080.08
Iteration:    620, Loss function: 7.232, Average Loss: 4.486, avg. samples / sec: 1054.31
Iteration:    640, Loss function: 6.735, Average Loss: 4.541, avg. samples / sec: 995.18
Iteration:    660, Loss function: 7.334, Average Loss: 4.595, avg. samples / sec: 968.71
Iteration:    680, Loss function: 7.342, Average Loss: 4.647, avg. samples / sec: 980.04
Iteration:    700, Loss function: 6.811, Average Loss: 4.694, avg. samples / sec: 1008.24
Iteration:    720, Loss function: 7.165, Average Loss: 4.743, avg. samples / sec: 960.95
Iteration:    740, Loss function: 7.082, Average Loss: 4.788, avg. samples / sec: 1038.30
Iteration:    760, Loss function: 6.960, Average Loss: 4.831, avg. samples / sec: 1031.84
Iteration:    780, Loss function: 6.878, Average Loss: 4.873, avg. samples / sec: 1053.09
Iteration:    800, Loss function: 7.172, Average Loss: 4.913, avg. samples / sec: 990.17
Iteration:    820, Loss function: 6.684, Average Loss: 4.950, avg. samples / sec: 1053.02
Iteration:    840, Loss function: 6.750, Average Loss: 4.986, avg. samples / sec: 1073.14
Iteration:    860, Loss function: 6.854, Average Loss: 5.021, avg. samples / sec: 1036.70
Iteration:    880, Loss function: 6.824, Average Loss: 5.054, avg. samples / sec: 1001.10
Iteration:    900, Loss function: 6.742, Average Loss: 5.085, avg. samples / sec: 1073.99
Iteration:    920, Loss function: 6.680, Average Loss: 5.115, avg. samples / sec: 993.58
Iteration:    940, Loss function: 6.908, Average Loss: 5.146, avg. samples / sec: 1049.71
Iteration:    960, Loss function: 6.462, Average Loss: 5.175, avg. samples / sec: 975.13
Iteration:    980, Loss function: 6.481, Average Loss: 5.202, avg. samples / sec: 958.99
Iteration:   1000, Loss function: 6.509, Average Loss: 5.228, avg. samples / sec: 1031.03
Iteration:   1020, Loss function: 6.314, Average Loss: 5.253, avg. samples / sec: 1001.27
:::MLLOG {"namespace": "", "time_ms": 1639752601128, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752601129, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.460, Average Loss: 5.276, avg. samples / sec: 993.80
Iteration:   1060, Loss function: 6.379, Average Loss: 5.299, avg. samples / sec: 946.56
Iteration:   1080, Loss function: 6.227, Average Loss: 5.320, avg. samples / sec: 941.28
Iteration:   1100, Loss function: 6.074, Average Loss: 5.340, avg. samples / sec: 999.74
Iteration:   1120, Loss function: 6.227, Average Loss: 5.358, avg. samples / sec: 971.09
Iteration:   1140, Loss function: 6.291, Average Loss: 5.377, avg. samples / sec: 981.96
Iteration:   1160, Loss function: 5.968, Average Loss: 5.393, avg. samples / sec: 986.91
Iteration:   1180, Loss function: 6.186, Average Loss: 5.410, avg. samples / sec: 963.02
Iteration:   1200, Loss function: 6.259, Average Loss: 5.426, avg. samples / sec: 1032.06
Iteration:   1220, Loss function: 6.222, Average Loss: 5.442, avg. samples / sec: 1029.27
Iteration:   1240, Loss function: 6.089, Average Loss: 5.455, avg. samples / sec: 1022.99
Iteration:   1260, Loss function: 5.920, Average Loss: 5.468, avg. samples / sec: 952.88
Iteration:   1280, Loss function: 5.856, Average Loss: 5.481, avg. samples / sec: 957.85
Iteration:   1300, Loss function: 6.048, Average Loss: 5.493, avg. samples / sec: 1021.68
Iteration:   1320, Loss function: 6.097, Average Loss: 5.505, avg. samples / sec: 1010.78
Iteration:   1340, Loss function: 5.829, Average Loss: 5.515, avg. samples / sec: 956.23
Iteration:   1360, Loss function: 5.776, Average Loss: 5.526, avg. samples / sec: 1033.13
Iteration:   1380, Loss function: 6.071, Average Loss: 5.536, avg. samples / sec: 1025.74
Iteration:   1400, Loss function: 6.244, Average Loss: 5.545, avg. samples / sec: 992.22
Iteration:   1420, Loss function: 5.946, Average Loss: 5.553, avg. samples / sec: 1014.66
Iteration:   1440, Loss function: 6.241, Average Loss: 5.561, avg. samples / sec: 995.28
Iteration:   1460, Loss function: 5.941, Average Loss: 5.569, avg. samples / sec: 1074.88
Iteration:   1480, Loss function: 6.063, Average Loss: 5.577, avg. samples / sec: 1030.69
Iteration:   1500, Loss function: 5.922, Average Loss: 5.585, avg. samples / sec: 997.49
Iteration:   1520, Loss function: 5.870, Average Loss: 5.591, avg. samples / sec: 921.24
Iteration:   1540, Loss function: 6.080, Average Loss: 5.596, avg. samples / sec: 956.68
Iteration:   1560, Loss function: 5.901, Average Loss: 5.602, avg. samples / sec: 994.46
Iteration:   1580, Loss function: 5.657, Average Loss: 5.607, avg. samples / sec: 951.62
Iteration:   1600, Loss function: 6.105, Average Loss: 5.614, avg. samples / sec: 996.66
Iteration:   1620, Loss function: 5.750, Average Loss: 5.619, avg. samples / sec: 1010.39
Iteration:   1640, Loss function: 5.897, Average Loss: 5.622, avg. samples / sec: 1042.41
Iteration:   1660, Loss function: 5.984, Average Loss: 5.627, avg. samples / sec: 981.89
Iteration:   1680, Loss function: 5.829, Average Loss: 5.630, avg. samples / sec: 1048.06
Iteration:   1700, Loss function: 5.347, Average Loss: 5.633, avg. samples / sec: 1008.63
Iteration:   1720, Loss function: 5.708, Average Loss: 5.635, avg. samples / sec: 962.69
Iteration:   1740, Loss function: 5.942, Average Loss: 5.637, avg. samples / sec: 1006.75
Iteration:   1760, Loss function: 5.543, Average Loss: 5.640, avg. samples / sec: 986.66
Iteration:   1780, Loss function: 5.565, Average Loss: 5.641, avg. samples / sec: 1045.11
Iteration:   1800, Loss function: 5.618, Average Loss: 5.644, avg. samples / sec: 1080.55
Iteration:   1820, Loss function: 5.933, Average Loss: 5.645, avg. samples / sec: 1002.11
Iteration:   1840, Loss function: 5.885, Average Loss: 5.647, avg. samples / sec: 1037.37
Iteration:   1860, Loss function: 5.720, Average Loss: 5.647, avg. samples / sec: 1019.59
Iteration:   1880, Loss function: 5.929, Average Loss: 5.649, avg. samples / sec: 1031.63
Iteration:   1900, Loss function: 5.846, Average Loss: 5.649, avg. samples / sec: 1024.39
Iteration:   1920, Loss function: 5.871, Average Loss: 5.650, avg. samples / sec: 951.97
Iteration:   1940, Loss function: 5.830, Average Loss: 5.650, avg. samples / sec: 1015.56
Iteration:   1960, Loss function: 5.684, Average Loss: 5.648, avg. samples / sec: 1054.84
Iteration:   1980, Loss function: 5.719, Average Loss: 5.648, avg. samples / sec: 994.35
Iteration:   2000, Loss function: 5.588, Average Loss: 5.648, avg. samples / sec: 1007.90
Iteration:   2020, Loss function: 5.644, Average Loss: 5.646, avg. samples / sec: 988.72
Iteration:   2040, Loss function: 5.697, Average Loss: 5.645, avg. samples / sec: 1009.52
:::MLLOG {"namespace": "", "time_ms": 1639752718530, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752718532, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.485, Average Loss: 5.643, avg. samples / sec: 994.90
Iteration:   2080, Loss function: 5.092, Average Loss: 5.641, avg. samples / sec: 908.65
Iteration:   2100, Loss function: 5.626, Average Loss: 5.638, avg. samples / sec: 1022.71
Iteration:   2120, Loss function: 5.164, Average Loss: 5.635, avg. samples / sec: 959.92
Iteration:   2140, Loss function: 5.339, Average Loss: 5.631, avg. samples / sec: 1033.02
Iteration:   2160, Loss function: 5.523, Average Loss: 5.629, avg. samples / sec: 998.31
Iteration:   2180, Loss function: 5.293, Average Loss: 5.626, avg. samples / sec: 940.57
Iteration:   2200, Loss function: 5.373, Average Loss: 5.622, avg. samples / sec: 989.80
Iteration:   2220, Loss function: 5.514, Average Loss: 5.619, avg. samples / sec: 1028.04
Iteration:   2240, Loss function: 5.400, Average Loss: 5.615, avg. samples / sec: 936.61
Iteration:   2260, Loss function: 5.396, Average Loss: 5.612, avg. samples / sec: 1020.53
Iteration:   2280, Loss function: 5.159, Average Loss: 5.610, avg. samples / sec: 1066.21
Iteration:   2300, Loss function: 5.141, Average Loss: 5.606, avg. samples / sec: 972.49
Iteration:   2320, Loss function: 5.352, Average Loss: 5.604, avg. samples / sec: 948.37
Iteration:   2340, Loss function: 5.650, Average Loss: 5.601, avg. samples / sec: 989.89
Iteration:   2360, Loss function: 5.274, Average Loss: 5.598, avg. samples / sec: 1002.53
Iteration:   2380, Loss function: 5.495, Average Loss: 5.595, avg. samples / sec: 1005.33
Iteration:   2400, Loss function: 5.487, Average Loss: 5.591, avg. samples / sec: 951.43
Iteration:   2420, Loss function: 5.575, Average Loss: 5.587, avg. samples / sec: 941.65
Iteration:   2440, Loss function: 5.382, Average Loss: 5.584, avg. samples / sec: 1017.98
Iteration:   2460, Loss function: 5.257, Average Loss: 5.581, avg. samples / sec: 1020.26
Iteration:   2480, Loss function: 5.335, Average Loss: 5.577, avg. samples / sec: 991.83
Iteration:   2500, Loss function: 5.482, Average Loss: 5.573, avg. samples / sec: 1049.10
Iteration:   2520, Loss function: 5.215, Average Loss: 5.568, avg. samples / sec: 1080.20
Iteration:   2540, Loss function: 5.451, Average Loss: 5.565, avg. samples / sec: 982.92
Iteration:   2560, Loss function: 5.181, Average Loss: 5.561, avg. samples / sec: 1048.02
Iteration:   2580, Loss function: 5.189, Average Loss: 5.557, avg. samples / sec: 987.50
Iteration:   2600, Loss function: 5.389, Average Loss: 5.554, avg. samples / sec: 1024.45
Iteration:   2620, Loss function: 5.497, Average Loss: 5.549, avg. samples / sec: 1061.38
Iteration:   2640, Loss function: 5.172, Average Loss: 5.547, avg. samples / sec: 998.64
Iteration:   2660, Loss function: 5.194, Average Loss: 5.543, avg. samples / sec: 970.87
Iteration:   2680, Loss function: 5.235, Average Loss: 5.540, avg. samples / sec: 965.23
Iteration:   2700, Loss function: 5.132, Average Loss: 5.535, avg. samples / sec: 1005.25
Iteration:   2720, Loss function: 5.421, Average Loss: 5.532, avg. samples / sec: 962.16
Iteration:   2740, Loss function: 5.130, Average Loss: 5.527, avg. samples / sec: 992.55
Iteration:   2760, Loss function: 4.945, Average Loss: 5.520, avg. samples / sec: 928.37
Iteration:   2780, Loss function: 5.521, Average Loss: 5.517, avg. samples / sec: 974.74
Iteration:   2800, Loss function: 5.293, Average Loss: 5.512, avg. samples / sec: 1013.10
Iteration:   2820, Loss function: 5.421, Average Loss: 5.507, avg. samples / sec: 1075.24
Iteration:   2840, Loss function: 5.149, Average Loss: 5.503, avg. samples / sec: 1031.27
Iteration:   2860, Loss function: 5.224, Average Loss: 5.498, avg. samples / sec: 974.59
Iteration:   2880, Loss function: 5.278, Average Loss: 5.494, avg. samples / sec: 1042.16
Iteration:   2900, Loss function: 5.099, Average Loss: 5.489, avg. samples / sec: 911.99
Iteration:   2920, Loss function: 5.240, Average Loss: 5.483, avg. samples / sec: 1028.35
Iteration:   2940, Loss function: 4.944, Average Loss: 5.478, avg. samples / sec: 979.53
Iteration:   2960, Loss function: 5.453, Average Loss: 5.474, avg. samples / sec: 1002.68
Iteration:   2980, Loss function: 5.172, Average Loss: 5.470, avg. samples / sec: 969.12
Iteration:   3000, Loss function: 5.463, Average Loss: 5.465, avg. samples / sec: 1000.65
Iteration:   3020, Loss function: 5.282, Average Loss: 5.458, avg. samples / sec: 1051.00
Iteration:   3040, Loss function: 5.353, Average Loss: 5.453, avg. samples / sec: 1019.91
Iteration:   3060, Loss function: 5.034, Average Loss: 5.446, avg. samples / sec: 1024.50
Iteration:   3080, Loss function: 4.983, Average Loss: 5.441, avg. samples / sec: 1005.97
:::MLLOG {"namespace": "", "time_ms": 1639752836156, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752836158, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.213, Average Loss: 5.436, avg. samples / sec: 996.83
Iteration:   3120, Loss function: 4.927, Average Loss: 5.429, avg. samples / sec: 1004.64
Iteration:   3140, Loss function: 5.018, Average Loss: 5.425, avg. samples / sec: 1007.79
Iteration:   3160, Loss function: 5.376, Average Loss: 5.419, avg. samples / sec: 1027.56
Iteration:   3180, Loss function: 5.027, Average Loss: 5.414, avg. samples / sec: 1004.16
Iteration:   3200, Loss function: 5.163, Average Loss: 5.409, avg. samples / sec: 1006.29
Iteration:   3220, Loss function: 5.111, Average Loss: 5.403, avg. samples / sec: 1059.67
Iteration:   3240, Loss function: 5.213, Average Loss: 5.397, avg. samples / sec: 1024.22
Iteration:   3260, Loss function: 4.921, Average Loss: 5.392, avg. samples / sec: 1015.35
Iteration:   3280, Loss function: 4.693, Average Loss: 5.385, avg. samples / sec: 1029.76
Iteration:   3300, Loss function: 4.780, Average Loss: 5.380, avg. samples / sec: 975.07
Iteration:   3320, Loss function: 4.990, Average Loss: 5.375, avg. samples / sec: 997.86
Iteration:   3340, Loss function: 5.024, Average Loss: 5.371, avg. samples / sec: 1036.24
Iteration:   3360, Loss function: 5.070, Average Loss: 5.364, avg. samples / sec: 1038.91
Iteration:   3380, Loss function: 5.151, Average Loss: 5.357, avg. samples / sec: 1049.73
Iteration:   3400, Loss function: 5.047, Average Loss: 5.352, avg. samples / sec: 996.31
Iteration:   3420, Loss function: 5.229, Average Loss: 5.347, avg. samples / sec: 1052.41
Iteration:   3440, Loss function: 4.894, Average Loss: 5.342, avg. samples / sec: 990.48
Iteration:   3460, Loss function: 5.058, Average Loss: 5.337, avg. samples / sec: 1064.19
Iteration:   3480, Loss function: 5.305, Average Loss: 5.332, avg. samples / sec: 1025.76
Iteration:   3500, Loss function: 5.266, Average Loss: 5.328, avg. samples / sec: 923.99
Iteration:   3520, Loss function: 5.030, Average Loss: 5.325, avg. samples / sec: 990.67
Iteration:   3540, Loss function: 5.070, Average Loss: 5.321, avg. samples / sec: 1003.41
Iteration:   3560, Loss function: 5.027, Average Loss: 5.318, avg. samples / sec: 1002.26
Iteration:   3580, Loss function: 5.189, Average Loss: 5.313, avg. samples / sec: 1012.18
Iteration:   3600, Loss function: 5.248, Average Loss: 5.308, avg. samples / sec: 953.91
Iteration:   3620, Loss function: 5.080, Average Loss: 5.303, avg. samples / sec: 980.78
Iteration:   3640, Loss function: 4.645, Average Loss: 5.297, avg. samples / sec: 1055.51
Iteration:   3660, Loss function: 5.061, Average Loss: 5.292, avg. samples / sec: 1015.80
Iteration:   3680, Loss function: 5.256, Average Loss: 5.286, avg. samples / sec: 1002.11
Iteration:   3700, Loss function: 5.074, Average Loss: 5.281, avg. samples / sec: 1027.15
Iteration:   3720, Loss function: 5.117, Average Loss: 5.275, avg. samples / sec: 991.13
Iteration:   3740, Loss function: 4.984, Average Loss: 5.270, avg. samples / sec: 962.11
Iteration:   3760, Loss function: 4.999, Average Loss: 5.265, avg. samples / sec: 1040.41
Iteration:   3780, Loss function: 5.029, Average Loss: 5.259, avg. samples / sec: 920.71
Iteration:   3800, Loss function: 5.060, Average Loss: 5.255, avg. samples / sec: 1009.46
Iteration:   3820, Loss function: 5.100, Average Loss: 5.249, avg. samples / sec: 977.84
Iteration:   3840, Loss function: 4.778, Average Loss: 5.245, avg. samples / sec: 1007.55
Iteration:   3860, Loss function: 4.907, Average Loss: 5.241, avg. samples / sec: 1006.28
Iteration:   3880, Loss function: 5.097, Average Loss: 5.234, avg. samples / sec: 995.76
Iteration:   3900, Loss function: 5.116, Average Loss: 5.229, avg. samples / sec: 994.06
Iteration:   3920, Loss function: 5.071, Average Loss: 5.223, avg. samples / sec: 1001.22
Iteration:   3940, Loss function: 5.069, Average Loss: 5.218, avg. samples / sec: 964.74
Iteration:   3960, Loss function: 4.964, Average Loss: 5.213, avg. samples / sec: 1021.53
Iteration:   3980, Loss function: 4.715, Average Loss: 5.208, avg. samples / sec: 1015.16
Iteration:   4000, Loss function: 5.206, Average Loss: 5.204, avg. samples / sec: 933.86
Iteration:   4020, Loss function: 4.954, Average Loss: 5.199, avg. samples / sec: 981.12
Iteration:   4040, Loss function: 4.991, Average Loss: 5.196, avg. samples / sec: 971.11
Iteration:   4060, Loss function: 5.117, Average Loss: 5.192, avg. samples / sec: 928.01
Iteration:   4080, Loss function: 5.053, Average Loss: 5.187, avg. samples / sec: 957.03
Iteration:   4100, Loss function: 5.314, Average Loss: 5.184, avg. samples / sec: 1045.78
:::MLLOG {"namespace": "", "time_ms": 1639752953418, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953420, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.034, Average Loss: 5.180, avg. samples / sec: 979.80
Iteration:   4140, Loss function: 4.982, Average Loss: 5.175, avg. samples / sec: 993.66
Iteration:   4160, Loss function: 4.966, Average Loss: 5.168, avg. samples / sec: 1037.00
Iteration:   4180, Loss function: 4.884, Average Loss: 5.163, avg. samples / sec: 984.14
Iteration:   4200, Loss function: 4.847, Average Loss: 5.159, avg. samples / sec: 967.65
Iteration:   4220, Loss function: 4.938, Average Loss: 5.155, avg. samples / sec: 1000.85
Iteration:   4240, Loss function: 5.063, Average Loss: 5.151, avg. samples / sec: 1023.61
Iteration:   4260, Loss function: 4.994, Average Loss: 5.147, avg. samples / sec: 997.98
Iteration:   4280, Loss function: 5.022, Average Loss: 5.140, avg. samples / sec: 1053.60
Iteration:   4300, Loss function: 4.694, Average Loss: 5.135, avg. samples / sec: 983.68
Iteration:   4320, Loss function: 4.642, Average Loss: 5.130, avg. samples / sec: 1017.23
Iteration:   4340, Loss function: 4.674, Average Loss: 5.123, avg. samples / sec: 1041.18
Iteration:   4360, Loss function: 4.921, Average Loss: 5.120, avg. samples / sec: 957.50
Iteration:   4380, Loss function: 5.094, Average Loss: 5.115, avg. samples / sec: 999.86
Iteration:   4400, Loss function: 4.840, Average Loss: 5.110, avg. samples / sec: 972.16
Iteration:   4420, Loss function: 4.989, Average Loss: 5.106, avg. samples / sec: 992.61
Iteration:   4440, Loss function: 4.752, Average Loss: 5.101, avg. samples / sec: 978.95
Iteration:   4460, Loss function: 5.125, Average Loss: 5.096, avg. samples / sec: 977.76
Iteration:   4480, Loss function: 5.044, Average Loss: 5.092, avg. samples / sec: 950.19
Iteration:   4500, Loss function: 4.892, Average Loss: 5.089, avg. samples / sec: 938.18
Iteration:   4520, Loss function: 4.665, Average Loss: 5.084, avg. samples / sec: 1068.29
Iteration:   4540, Loss function: 5.163, Average Loss: 5.080, avg. samples / sec: 1013.95
Iteration:   4560, Loss function: 4.851, Average Loss: 5.076, avg. samples / sec: 936.10
Iteration:   4580, Loss function: 4.945, Average Loss: 5.073, avg. samples / sec: 940.11
Iteration:   4600, Loss function: 4.690, Average Loss: 5.070, avg. samples / sec: 1013.03
Iteration:   4620, Loss function: 4.723, Average Loss: 5.065, avg. samples / sec: 970.20
Iteration:   4640, Loss function: 4.832, Average Loss: 5.060, avg. samples / sec: 1006.15
Iteration:   4660, Loss function: 4.637, Average Loss: 5.056, avg. samples / sec: 974.15
Iteration:   4680, Loss function: 5.340, Average Loss: 5.052, avg. samples / sec: 968.34
Iteration:   4700, Loss function: 4.811, Average Loss: 5.048, avg. samples / sec: 972.32
Iteration:   4720, Loss function: 4.900, Average Loss: 5.044, avg. samples / sec: 1086.33
Iteration:   4740, Loss function: 4.772, Average Loss: 5.041, avg. samples / sec: 1009.02
Iteration:   4760, Loss function: 4.583, Average Loss: 5.038, avg. samples / sec: 989.84
Iteration:   4780, Loss function: 5.069, Average Loss: 5.033, avg. samples / sec: 948.25
Iteration:   4800, Loss function: 5.038, Average Loss: 5.031, avg. samples / sec: 1015.65
Iteration:   4820, Loss function: 4.610, Average Loss: 5.027, avg. samples / sec: 991.82
Iteration:   4840, Loss function: 5.034, Average Loss: 5.023, avg. samples / sec: 991.24
Iteration:   4860, Loss function: 4.845, Average Loss: 5.019, avg. samples / sec: 980.46
Iteration:   4880, Loss function: 4.991, Average Loss: 5.015, avg. samples / sec: 972.25
Iteration:   4900, Loss function: 4.704, Average Loss: 5.011, avg. samples / sec: 1007.55
Iteration:   4920, Loss function: 4.906, Average Loss: 5.008, avg. samples / sec: 1047.71
Iteration:   4940, Loss function: 4.832, Average Loss: 5.004, avg. samples / sec: 964.78
Iteration:   4960, Loss function: 4.726, Average Loss: 5.000, avg. samples / sec: 968.43
Iteration:   4980, Loss function: 4.583, Average Loss: 4.998, avg. samples / sec: 961.00
Iteration:   5000, Loss function: 4.831, Average Loss: 4.994, avg. samples / sec: 953.83
Iteration:   5020, Loss function: 5.004, Average Loss: 4.991, avg. samples / sec: 1010.55
Iteration:   5040, Loss function: 4.734, Average Loss: 4.988, avg. samples / sec: 960.74
Iteration:   5060, Loss function: 4.683, Average Loss: 4.985, avg. samples / sec: 1068.11
Iteration:   5080, Loss function: 4.300, Average Loss: 4.980, avg. samples / sec: 990.37
Iteration:   5100, Loss function: 4.625, Average Loss: 4.977, avg. samples / sec: 1076.99
Iteration:   5120, Loss function: 4.629, Average Loss: 4.974, avg. samples / sec: 1041.58
Iteration:   5140, Loss function: 4.705, Average Loss: 4.970, avg. samples / sec: 1108.64
:::MLLOG {"namespace": "", "time_ms": 1639753071123, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.73 s
:::MLLOG {"namespace": "", "time_ms": 1639753103941, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753103943, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103943, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.929, Average Loss: 4.965, avg. samples / sec: 65.42
Iteration:   5180, Loss function: 4.881, Average Loss: 4.960, avg. samples / sec: 1184.69
Iteration:   5200, Loss function: 4.635, Average Loss: 4.956, avg. samples / sec: 1134.28
DONE (t=5.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10711
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21935
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09283
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19188
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10711 AP goal: 0.10000
Iteration:   5220, Loss function: 4.609, Average Loss: 4.952, avg. samples / sec: 1180.07
:::MLLOG {"namespace": "", "time_ms": 1639753111555, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111555, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10711325157323888, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111556, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111787, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:33 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:33 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752455903, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752456047, "event_type": "POINT_IN_TIME", "key": "seed", "value": 820242056, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 820242056
:::MLLOG {"namespace": "", "time_ms": 1639752457755, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752457756, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752457760, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752480795, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752480796, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752482934, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482937, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483201, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483202, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483203, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.653, Average Loss: 0.023, avg. samples / sec: 4.54
Iteration:     20, Loss function: 20.994, Average Loss: 0.454, avg. samples / sec: 959.34
Iteration:     40, Loss function: 20.698, Average Loss: 0.855, avg. samples / sec: 1024.67
Iteration:     60, Loss function: 20.297, Average Loss: 1.245, avg. samples / sec: 946.63
Iteration:     80, Loss function: 19.974, Average Loss: 1.618, avg. samples / sec: 917.04
Iteration:    100, Loss function: 15.002, Average Loss: 1.939, avg. samples / sec: 980.14
Iteration:    120, Loss function: 10.585, Average Loss: 2.140, avg. samples / sec: 926.35
Iteration:    140, Loss function: 9.691, Average Loss: 2.295, avg. samples / sec: 979.90
Iteration:    160, Loss function: 9.110, Average Loss: 2.434, avg. samples / sec: 955.98
Iteration:    180, Loss function: 8.888, Average Loss: 2.563, avg. samples / sec: 974.10
Iteration:    200, Loss function: 8.671, Average Loss: 2.687, avg. samples / sec: 1023.38
Iteration:    220, Loss function: 8.439, Average Loss: 2.808, avg. samples / sec: 930.29
Iteration:    240, Loss function: 8.719, Average Loss: 2.927, avg. samples / sec: 1002.39
Iteration:    260, Loss function: 8.977, Average Loss: 3.044, avg. samples / sec: 990.22
Iteration:    280, Loss function: 8.536, Average Loss: 3.155, avg. samples / sec: 978.10
Iteration:    300, Loss function: 8.344, Average Loss: 3.260, avg. samples / sec: 955.36
Iteration:    320, Loss function: 8.282, Average Loss: 3.360, avg. samples / sec: 988.66
Iteration:    340, Loss function: 8.384, Average Loss: 3.458, avg. samples / sec: 959.14
Iteration:    360, Loss function: 8.141, Average Loss: 3.551, avg. samples / sec: 958.79
Iteration:    380, Loss function: 8.033, Average Loss: 3.642, avg. samples / sec: 1046.99
Iteration:    400, Loss function: 7.915, Average Loss: 3.727, avg. samples / sec: 1033.23
Iteration:    420, Loss function: 7.712, Average Loss: 3.808, avg. samples / sec: 946.17
Iteration:    440, Loss function: 7.827, Average Loss: 3.886, avg. samples / sec: 1022.97
Iteration:    460, Loss function: 7.820, Average Loss: 3.964, avg. samples / sec: 1047.08
Iteration:    480, Loss function: 7.470, Average Loss: 4.040, avg. samples / sec: 984.01
Iteration:    500, Loss function: 7.468, Average Loss: 4.111, avg. samples / sec: 1001.01
Iteration:    520, Loss function: 7.638, Average Loss: 4.180, avg. samples / sec: 837.98
Iteration:    540, Loss function: 7.561, Average Loss: 4.248, avg. samples / sec: 1147.02
Iteration:    560, Loss function: 7.328, Average Loss: 4.310, avg. samples / sec: 978.83
Iteration:    580, Loss function: 7.150, Average Loss: 4.371, avg. samples / sec: 939.39
Iteration:    600, Loss function: 7.235, Average Loss: 4.430, avg. samples / sec: 1080.08
Iteration:    620, Loss function: 7.232, Average Loss: 4.486, avg. samples / sec: 1054.31
Iteration:    640, Loss function: 6.735, Average Loss: 4.541, avg. samples / sec: 995.18
Iteration:    660, Loss function: 7.334, Average Loss: 4.595, avg. samples / sec: 968.71
Iteration:    680, Loss function: 7.342, Average Loss: 4.647, avg. samples / sec: 980.04
Iteration:    700, Loss function: 6.811, Average Loss: 4.694, avg. samples / sec: 1008.24
Iteration:    720, Loss function: 7.165, Average Loss: 4.743, avg. samples / sec: 960.95
Iteration:    740, Loss function: 7.082, Average Loss: 4.788, avg. samples / sec: 1038.30
Iteration:    760, Loss function: 6.960, Average Loss: 4.831, avg. samples / sec: 1031.84
Iteration:    780, Loss function: 6.878, Average Loss: 4.873, avg. samples / sec: 1053.09
Iteration:    800, Loss function: 7.172, Average Loss: 4.913, avg. samples / sec: 990.17
Iteration:    820, Loss function: 6.684, Average Loss: 4.950, avg. samples / sec: 1053.02
Iteration:    840, Loss function: 6.750, Average Loss: 4.986, avg. samples / sec: 1073.14
Iteration:    860, Loss function: 6.854, Average Loss: 5.021, avg. samples / sec: 1036.70
Iteration:    880, Loss function: 6.824, Average Loss: 5.054, avg. samples / sec: 1001.10
Iteration:    900, Loss function: 6.742, Average Loss: 5.085, avg. samples / sec: 1073.99
Iteration:    920, Loss function: 6.680, Average Loss: 5.115, avg. samples / sec: 993.58
Iteration:    940, Loss function: 6.908, Average Loss: 5.146, avg. samples / sec: 1049.71
Iteration:    960, Loss function: 6.462, Average Loss: 5.175, avg. samples / sec: 975.13
Iteration:    980, Loss function: 6.481, Average Loss: 5.202, avg. samples / sec: 958.99
Iteration:   1000, Loss function: 6.509, Average Loss: 5.228, avg. samples / sec: 1031.03
Iteration:   1020, Loss function: 6.314, Average Loss: 5.253, avg. samples / sec: 1001.27
:::MLLOG {"namespace": "", "time_ms": 1639752601128, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752601129, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.460, Average Loss: 5.276, avg. samples / sec: 993.80
Iteration:   1060, Loss function: 6.379, Average Loss: 5.299, avg. samples / sec: 946.56
Iteration:   1080, Loss function: 6.227, Average Loss: 5.320, avg. samples / sec: 941.28
Iteration:   1100, Loss function: 6.074, Average Loss: 5.340, avg. samples / sec: 999.74
Iteration:   1120, Loss function: 6.227, Average Loss: 5.358, avg. samples / sec: 971.09
Iteration:   1140, Loss function: 6.291, Average Loss: 5.377, avg. samples / sec: 981.96
Iteration:   1160, Loss function: 5.968, Average Loss: 5.393, avg. samples / sec: 986.91
Iteration:   1180, Loss function: 6.186, Average Loss: 5.410, avg. samples / sec: 963.02
Iteration:   1200, Loss function: 6.259, Average Loss: 5.426, avg. samples / sec: 1032.06
Iteration:   1220, Loss function: 6.222, Average Loss: 5.442, avg. samples / sec: 1029.27
Iteration:   1240, Loss function: 6.089, Average Loss: 5.455, avg. samples / sec: 1022.99
Iteration:   1260, Loss function: 5.920, Average Loss: 5.468, avg. samples / sec: 952.88
Iteration:   1280, Loss function: 5.856, Average Loss: 5.481, avg. samples / sec: 957.85
Iteration:   1300, Loss function: 6.048, Average Loss: 5.493, avg. samples / sec: 1021.68
Iteration:   1320, Loss function: 6.097, Average Loss: 5.505, avg. samples / sec: 1010.78
Iteration:   1340, Loss function: 5.829, Average Loss: 5.515, avg. samples / sec: 956.23
Iteration:   1360, Loss function: 5.776, Average Loss: 5.526, avg. samples / sec: 1033.13
Iteration:   1380, Loss function: 6.071, Average Loss: 5.536, avg. samples / sec: 1025.74
Iteration:   1400, Loss function: 6.244, Average Loss: 5.545, avg. samples / sec: 992.22
Iteration:   1420, Loss function: 5.946, Average Loss: 5.553, avg. samples / sec: 1014.66
Iteration:   1440, Loss function: 6.241, Average Loss: 5.561, avg. samples / sec: 995.28
Iteration:   1460, Loss function: 5.941, Average Loss: 5.569, avg. samples / sec: 1074.88
Iteration:   1480, Loss function: 6.063, Average Loss: 5.577, avg. samples / sec: 1030.69
Iteration:   1500, Loss function: 5.922, Average Loss: 5.585, avg. samples / sec: 997.49
Iteration:   1520, Loss function: 5.870, Average Loss: 5.591, avg. samples / sec: 921.24
Iteration:   1540, Loss function: 6.080, Average Loss: 5.596, avg. samples / sec: 956.68
Iteration:   1560, Loss function: 5.901, Average Loss: 5.602, avg. samples / sec: 994.46
Iteration:   1580, Loss function: 5.657, Average Loss: 5.607, avg. samples / sec: 951.62
Iteration:   1600, Loss function: 6.105, Average Loss: 5.614, avg. samples / sec: 996.66
Iteration:   1620, Loss function: 5.750, Average Loss: 5.619, avg. samples / sec: 1010.39
Iteration:   1640, Loss function: 5.897, Average Loss: 5.622, avg. samples / sec: 1042.41
Iteration:   1660, Loss function: 5.984, Average Loss: 5.627, avg. samples / sec: 981.89
Iteration:   1680, Loss function: 5.829, Average Loss: 5.630, avg. samples / sec: 1048.06
Iteration:   1700, Loss function: 5.347, Average Loss: 5.633, avg. samples / sec: 1008.63
Iteration:   1720, Loss function: 5.708, Average Loss: 5.635, avg. samples / sec: 962.69
Iteration:   1740, Loss function: 5.942, Average Loss: 5.637, avg. samples / sec: 1006.75
Iteration:   1760, Loss function: 5.543, Average Loss: 5.640, avg. samples / sec: 986.66
Iteration:   1780, Loss function: 5.565, Average Loss: 5.641, avg. samples / sec: 1045.11
Iteration:   1800, Loss function: 5.618, Average Loss: 5.644, avg. samples / sec: 1080.55
Iteration:   1820, Loss function: 5.933, Average Loss: 5.645, avg. samples / sec: 1002.11
Iteration:   1840, Loss function: 5.885, Average Loss: 5.647, avg. samples / sec: 1037.37
Iteration:   1860, Loss function: 5.720, Average Loss: 5.647, avg. samples / sec: 1019.59
Iteration:   1880, Loss function: 5.929, Average Loss: 5.649, avg. samples / sec: 1031.63
Iteration:   1900, Loss function: 5.846, Average Loss: 5.649, avg. samples / sec: 1024.39
Iteration:   1920, Loss function: 5.871, Average Loss: 5.650, avg. samples / sec: 951.97
Iteration:   1940, Loss function: 5.830, Average Loss: 5.650, avg. samples / sec: 1015.56
Iteration:   1960, Loss function: 5.684, Average Loss: 5.648, avg. samples / sec: 1054.84
Iteration:   1980, Loss function: 5.719, Average Loss: 5.648, avg. samples / sec: 994.35
Iteration:   2000, Loss function: 5.588, Average Loss: 5.648, avg. samples / sec: 1007.90
Iteration:   2020, Loss function: 5.644, Average Loss: 5.646, avg. samples / sec: 988.72
Iteration:   2040, Loss function: 5.697, Average Loss: 5.645, avg. samples / sec: 1009.52
:::MLLOG {"namespace": "", "time_ms": 1639752718530, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752718532, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.485, Average Loss: 5.643, avg. samples / sec: 994.90
Iteration:   2080, Loss function: 5.092, Average Loss: 5.641, avg. samples / sec: 908.65
Iteration:   2100, Loss function: 5.626, Average Loss: 5.638, avg. samples / sec: 1022.71
Iteration:   2120, Loss function: 5.164, Average Loss: 5.635, avg. samples / sec: 959.92
Iteration:   2140, Loss function: 5.339, Average Loss: 5.631, avg. samples / sec: 1033.02
Iteration:   2160, Loss function: 5.523, Average Loss: 5.629, avg. samples / sec: 998.31
Iteration:   2180, Loss function: 5.293, Average Loss: 5.626, avg. samples / sec: 940.57
Iteration:   2200, Loss function: 5.373, Average Loss: 5.622, avg. samples / sec: 989.80
Iteration:   2220, Loss function: 5.514, Average Loss: 5.619, avg. samples / sec: 1028.04
Iteration:   2240, Loss function: 5.400, Average Loss: 5.615, avg. samples / sec: 936.61
Iteration:   2260, Loss function: 5.396, Average Loss: 5.612, avg. samples / sec: 1020.53
Iteration:   2280, Loss function: 5.159, Average Loss: 5.610, avg. samples / sec: 1066.21
Iteration:   2300, Loss function: 5.141, Average Loss: 5.606, avg. samples / sec: 972.49
Iteration:   2320, Loss function: 5.352, Average Loss: 5.604, avg. samples / sec: 948.37
Iteration:   2340, Loss function: 5.650, Average Loss: 5.601, avg. samples / sec: 989.89
Iteration:   2360, Loss function: 5.274, Average Loss: 5.598, avg. samples / sec: 1002.53
Iteration:   2380, Loss function: 5.495, Average Loss: 5.595, avg. samples / sec: 1005.33
Iteration:   2400, Loss function: 5.487, Average Loss: 5.591, avg. samples / sec: 951.43
Iteration:   2420, Loss function: 5.575, Average Loss: 5.587, avg. samples / sec: 941.65
Iteration:   2440, Loss function: 5.382, Average Loss: 5.584, avg. samples / sec: 1017.98
Iteration:   2460, Loss function: 5.257, Average Loss: 5.581, avg. samples / sec: 1020.26
Iteration:   2480, Loss function: 5.335, Average Loss: 5.577, avg. samples / sec: 991.83
Iteration:   2500, Loss function: 5.482, Average Loss: 5.573, avg. samples / sec: 1049.10
Iteration:   2520, Loss function: 5.215, Average Loss: 5.568, avg. samples / sec: 1080.20
Iteration:   2540, Loss function: 5.451, Average Loss: 5.565, avg. samples / sec: 982.92
Iteration:   2560, Loss function: 5.181, Average Loss: 5.561, avg. samples / sec: 1048.02
Iteration:   2580, Loss function: 5.189, Average Loss: 5.557, avg. samples / sec: 987.50
Iteration:   2600, Loss function: 5.389, Average Loss: 5.554, avg. samples / sec: 1024.45
Iteration:   2620, Loss function: 5.497, Average Loss: 5.549, avg. samples / sec: 1061.38
Iteration:   2640, Loss function: 5.172, Average Loss: 5.547, avg. samples / sec: 998.64
Iteration:   2660, Loss function: 5.194, Average Loss: 5.543, avg. samples / sec: 970.87
Iteration:   2680, Loss function: 5.235, Average Loss: 5.540, avg. samples / sec: 965.23
Iteration:   2700, Loss function: 5.132, Average Loss: 5.535, avg. samples / sec: 1005.25
Iteration:   2720, Loss function: 5.421, Average Loss: 5.532, avg. samples / sec: 962.16
Iteration:   2740, Loss function: 5.130, Average Loss: 5.527, avg. samples / sec: 992.55
Iteration:   2760, Loss function: 4.945, Average Loss: 5.520, avg. samples / sec: 928.37
Iteration:   2780, Loss function: 5.521, Average Loss: 5.517, avg. samples / sec: 974.74
Iteration:   2800, Loss function: 5.293, Average Loss: 5.512, avg. samples / sec: 1013.10
Iteration:   2820, Loss function: 5.421, Average Loss: 5.507, avg. samples / sec: 1075.24
Iteration:   2840, Loss function: 5.149, Average Loss: 5.503, avg. samples / sec: 1031.27
Iteration:   2860, Loss function: 5.224, Average Loss: 5.498, avg. samples / sec: 974.59
Iteration:   2880, Loss function: 5.278, Average Loss: 5.494, avg. samples / sec: 1042.16
Iteration:   2900, Loss function: 5.099, Average Loss: 5.489, avg. samples / sec: 911.99
Iteration:   2920, Loss function: 5.240, Average Loss: 5.483, avg. samples / sec: 1028.35
Iteration:   2940, Loss function: 4.944, Average Loss: 5.478, avg. samples / sec: 979.53
Iteration:   2960, Loss function: 5.453, Average Loss: 5.474, avg. samples / sec: 1002.68
Iteration:   2980, Loss function: 5.172, Average Loss: 5.470, avg. samples / sec: 969.12
Iteration:   3000, Loss function: 5.463, Average Loss: 5.465, avg. samples / sec: 1000.65
Iteration:   3020, Loss function: 5.282, Average Loss: 5.458, avg. samples / sec: 1051.00
Iteration:   3040, Loss function: 5.353, Average Loss: 5.453, avg. samples / sec: 1019.91
Iteration:   3060, Loss function: 5.034, Average Loss: 5.446, avg. samples / sec: 1024.50
Iteration:   3080, Loss function: 4.983, Average Loss: 5.441, avg. samples / sec: 1005.97
:::MLLOG {"namespace": "", "time_ms": 1639752836156, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752836158, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.213, Average Loss: 5.436, avg. samples / sec: 996.83
Iteration:   3120, Loss function: 4.927, Average Loss: 5.429, avg. samples / sec: 1004.64
Iteration:   3140, Loss function: 5.018, Average Loss: 5.425, avg. samples / sec: 1007.79
Iteration:   3160, Loss function: 5.376, Average Loss: 5.419, avg. samples / sec: 1027.56
Iteration:   3180, Loss function: 5.027, Average Loss: 5.414, avg. samples / sec: 1004.16
Iteration:   3200, Loss function: 5.163, Average Loss: 5.409, avg. samples / sec: 1006.29
Iteration:   3220, Loss function: 5.111, Average Loss: 5.403, avg. samples / sec: 1059.67
Iteration:   3240, Loss function: 5.213, Average Loss: 5.397, avg. samples / sec: 1024.22
Iteration:   3260, Loss function: 4.921, Average Loss: 5.392, avg. samples / sec: 1015.35
Iteration:   3280, Loss function: 4.693, Average Loss: 5.385, avg. samples / sec: 1029.76
Iteration:   3300, Loss function: 4.780, Average Loss: 5.380, avg. samples / sec: 975.07
Iteration:   3320, Loss function: 4.990, Average Loss: 5.375, avg. samples / sec: 997.86
Iteration:   3340, Loss function: 5.024, Average Loss: 5.371, avg. samples / sec: 1036.24
Iteration:   3360, Loss function: 5.070, Average Loss: 5.364, avg. samples / sec: 1038.91
Iteration:   3380, Loss function: 5.151, Average Loss: 5.357, avg. samples / sec: 1049.73
Iteration:   3400, Loss function: 5.047, Average Loss: 5.352, avg. samples / sec: 996.31
Iteration:   3420, Loss function: 5.229, Average Loss: 5.347, avg. samples / sec: 1052.41
Iteration:   3440, Loss function: 4.894, Average Loss: 5.342, avg. samples / sec: 990.48
Iteration:   3460, Loss function: 5.058, Average Loss: 5.337, avg. samples / sec: 1064.19
Iteration:   3480, Loss function: 5.305, Average Loss: 5.332, avg. samples / sec: 1025.76
Iteration:   3500, Loss function: 5.266, Average Loss: 5.328, avg. samples / sec: 923.99
Iteration:   3520, Loss function: 5.030, Average Loss: 5.325, avg. samples / sec: 990.67
Iteration:   3540, Loss function: 5.070, Average Loss: 5.321, avg. samples / sec: 1003.41
Iteration:   3560, Loss function: 5.027, Average Loss: 5.318, avg. samples / sec: 1002.26
Iteration:   3580, Loss function: 5.189, Average Loss: 5.313, avg. samples / sec: 1012.18
Iteration:   3600, Loss function: 5.248, Average Loss: 5.308, avg. samples / sec: 953.91
Iteration:   3620, Loss function: 5.080, Average Loss: 5.303, avg. samples / sec: 980.78
Iteration:   3640, Loss function: 4.645, Average Loss: 5.297, avg. samples / sec: 1055.51
Iteration:   3660, Loss function: 5.061, Average Loss: 5.292, avg. samples / sec: 1015.80
Iteration:   3680, Loss function: 5.256, Average Loss: 5.286, avg. samples / sec: 1002.11
Iteration:   3700, Loss function: 5.074, Average Loss: 5.281, avg. samples / sec: 1027.15
Iteration:   3720, Loss function: 5.117, Average Loss: 5.275, avg. samples / sec: 991.13
Iteration:   3740, Loss function: 4.984, Average Loss: 5.270, avg. samples / sec: 962.11
Iteration:   3760, Loss function: 4.999, Average Loss: 5.265, avg. samples / sec: 1040.41
Iteration:   3780, Loss function: 5.029, Average Loss: 5.259, avg. samples / sec: 920.71
Iteration:   3800, Loss function: 5.060, Average Loss: 5.255, avg. samples / sec: 1009.46
Iteration:   3820, Loss function: 5.100, Average Loss: 5.249, avg. samples / sec: 977.84
Iteration:   3840, Loss function: 4.778, Average Loss: 5.245, avg. samples / sec: 1007.55
Iteration:   3860, Loss function: 4.907, Average Loss: 5.241, avg. samples / sec: 1006.28
Iteration:   3880, Loss function: 5.097, Average Loss: 5.234, avg. samples / sec: 995.76
Iteration:   3900, Loss function: 5.116, Average Loss: 5.229, avg. samples / sec: 994.06
Iteration:   3920, Loss function: 5.071, Average Loss: 5.223, avg. samples / sec: 1001.22
Iteration:   3940, Loss function: 5.069, Average Loss: 5.218, avg. samples / sec: 964.74
Iteration:   3960, Loss function: 4.964, Average Loss: 5.213, avg. samples / sec: 1021.53
Iteration:   3980, Loss function: 4.715, Average Loss: 5.208, avg. samples / sec: 1015.16
Iteration:   4000, Loss function: 5.206, Average Loss: 5.204, avg. samples / sec: 933.86
Iteration:   4020, Loss function: 4.954, Average Loss: 5.199, avg. samples / sec: 981.12
Iteration:   4040, Loss function: 4.991, Average Loss: 5.196, avg. samples / sec: 971.11
Iteration:   4060, Loss function: 5.117, Average Loss: 5.192, avg. samples / sec: 928.01
Iteration:   4080, Loss function: 5.053, Average Loss: 5.187, avg. samples / sec: 957.03
Iteration:   4100, Loss function: 5.314, Average Loss: 5.184, avg. samples / sec: 1045.78
:::MLLOG {"namespace": "", "time_ms": 1639752953418, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953420, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.034, Average Loss: 5.180, avg. samples / sec: 979.80
Iteration:   4140, Loss function: 4.982, Average Loss: 5.175, avg. samples / sec: 993.66
Iteration:   4160, Loss function: 4.966, Average Loss: 5.168, avg. samples / sec: 1037.00
Iteration:   4180, Loss function: 4.884, Average Loss: 5.163, avg. samples / sec: 984.14
Iteration:   4200, Loss function: 4.847, Average Loss: 5.159, avg. samples / sec: 967.65
Iteration:   4220, Loss function: 4.938, Average Loss: 5.155, avg. samples / sec: 1000.85
Iteration:   4240, Loss function: 5.063, Average Loss: 5.151, avg. samples / sec: 1023.61
Iteration:   4260, Loss function: 4.994, Average Loss: 5.147, avg. samples / sec: 997.98
Iteration:   4280, Loss function: 5.022, Average Loss: 5.140, avg. samples / sec: 1053.60
Iteration:   4300, Loss function: 4.694, Average Loss: 5.135, avg. samples / sec: 983.68
Iteration:   4320, Loss function: 4.642, Average Loss: 5.130, avg. samples / sec: 1017.23
Iteration:   4340, Loss function: 4.674, Average Loss: 5.123, avg. samples / sec: 1041.18
Iteration:   4360, Loss function: 4.921, Average Loss: 5.120, avg. samples / sec: 957.50
Iteration:   4380, Loss function: 5.094, Average Loss: 5.115, avg. samples / sec: 999.86
Iteration:   4400, Loss function: 4.840, Average Loss: 5.110, avg. samples / sec: 972.16
Iteration:   4420, Loss function: 4.989, Average Loss: 5.106, avg. samples / sec: 992.61
Iteration:   4440, Loss function: 4.752, Average Loss: 5.101, avg. samples / sec: 978.95
Iteration:   4460, Loss function: 5.125, Average Loss: 5.096, avg. samples / sec: 977.76
Iteration:   4480, Loss function: 5.044, Average Loss: 5.092, avg. samples / sec: 950.19
Iteration:   4500, Loss function: 4.892, Average Loss: 5.089, avg. samples / sec: 938.18
Iteration:   4520, Loss function: 4.665, Average Loss: 5.084, avg. samples / sec: 1068.29
Iteration:   4540, Loss function: 5.163, Average Loss: 5.080, avg. samples / sec: 1013.95
Iteration:   4560, Loss function: 4.851, Average Loss: 5.076, avg. samples / sec: 936.10
Iteration:   4580, Loss function: 4.945, Average Loss: 5.073, avg. samples / sec: 940.11
Iteration:   4600, Loss function: 4.690, Average Loss: 5.070, avg. samples / sec: 1013.03
Iteration:   4620, Loss function: 4.723, Average Loss: 5.065, avg. samples / sec: 970.20
Iteration:   4640, Loss function: 4.832, Average Loss: 5.060, avg. samples / sec: 1006.15
Iteration:   4660, Loss function: 4.637, Average Loss: 5.056, avg. samples / sec: 974.15
Iteration:   4680, Loss function: 5.340, Average Loss: 5.052, avg. samples / sec: 968.34
Iteration:   4700, Loss function: 4.811, Average Loss: 5.048, avg. samples / sec: 972.32
Iteration:   4720, Loss function: 4.900, Average Loss: 5.044, avg. samples / sec: 1086.33
Iteration:   4740, Loss function: 4.772, Average Loss: 5.041, avg. samples / sec: 1009.02
Iteration:   4760, Loss function: 4.583, Average Loss: 5.038, avg. samples / sec: 989.84
Iteration:   4780, Loss function: 5.069, Average Loss: 5.033, avg. samples / sec: 948.25
Iteration:   4800, Loss function: 5.038, Average Loss: 5.031, avg. samples / sec: 1015.65
Iteration:   4820, Loss function: 4.610, Average Loss: 5.027, avg. samples / sec: 991.82
Iteration:   4840, Loss function: 5.034, Average Loss: 5.023, avg. samples / sec: 991.24
Iteration:   4860, Loss function: 4.845, Average Loss: 5.019, avg. samples / sec: 980.46
Iteration:   4880, Loss function: 4.991, Average Loss: 5.015, avg. samples / sec: 972.25
Iteration:   4900, Loss function: 4.704, Average Loss: 5.011, avg. samples / sec: 1007.55
Iteration:   4920, Loss function: 4.906, Average Loss: 5.008, avg. samples / sec: 1047.71
Iteration:   4940, Loss function: 4.832, Average Loss: 5.004, avg. samples / sec: 964.78
Iteration:   4960, Loss function: 4.726, Average Loss: 5.000, avg. samples / sec: 968.43
Iteration:   4980, Loss function: 4.583, Average Loss: 4.998, avg. samples / sec: 961.00
Iteration:   5000, Loss function: 4.831, Average Loss: 4.994, avg. samples / sec: 953.83
Iteration:   5020, Loss function: 5.004, Average Loss: 4.991, avg. samples / sec: 1010.55
Iteration:   5040, Loss function: 4.734, Average Loss: 4.988, avg. samples / sec: 960.74
Iteration:   5060, Loss function: 4.683, Average Loss: 4.985, avg. samples / sec: 1068.11
Iteration:   5080, Loss function: 4.300, Average Loss: 4.980, avg. samples / sec: 990.37
Iteration:   5100, Loss function: 4.625, Average Loss: 4.977, avg. samples / sec: 1076.99
Iteration:   5120, Loss function: 4.629, Average Loss: 4.974, avg. samples / sec: 1041.58
Iteration:   5140, Loss function: 4.705, Average Loss: 4.970, avg. samples / sec: 1108.64
:::MLLOG {"namespace": "", "time_ms": 1639753071123, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.73 s
:::MLLOG {"namespace": "", "time_ms": 1639753103941, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753103943, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103943, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.929, Average Loss: 4.965, avg. samples / sec: 65.42
Iteration:   5180, Loss function: 4.881, Average Loss: 4.960, avg. samples / sec: 1184.69
Iteration:   5200, Loss function: 4.635, Average Loss: 4.956, avg. samples / sec: 1134.28
DONE (t=5.43s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10711
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21935
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09283
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19188
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21706
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10711 AP goal: 0.10000
Iteration:   5220, Loss function: 4.609, Average Loss: 4.952, avg. samples / sec: 1180.07
:::MLLOG {"namespace": "", "time_ms": 1639753111555, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111555, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10711325157323888, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111556, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111787, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753113
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:33 PM'
START TIMING RUN WAS 2021-12-17 02:47:23 PM
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:23 PM'
ENDING TIMING RUN AT 2021-12-17 02:58:33 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:33 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
+ result=670
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,670,nvidia,2021-12-17 02:47:23 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,670,nvidia,2021-12-17 02:47:23 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
