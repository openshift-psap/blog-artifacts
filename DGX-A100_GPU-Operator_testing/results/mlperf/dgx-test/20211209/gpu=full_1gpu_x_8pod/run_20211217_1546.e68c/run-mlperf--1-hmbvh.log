8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-c9297a60-5079-9a56-b935-51e08dc0f65e
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-c9297a60-5079-9a56-b935-51e08dc0f65e).'
No MIG GPU available, using the full GPUs (GPU-c9297a60-5079-9a56-b935-51e08dc0f65e).
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752436
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:16 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:16 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:16 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:16 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-hmbvh to the sync file ...
run-mlperf--1-hmbvh Found 3 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
run-mlperf--1-hmbvh Found 4 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
run-mlperf--1-hmbvh Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
run-mlperf--1-hmbvh Found 7 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
     7	run-mlperf--1-k6jf6
Fri Dec 17 14:47:36 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752458807, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752459028, "event_type": "POINT_IN_TIME", "key": "seed", "value": 725842544, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 725842544
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752460733, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752460733, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752460736, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752483663, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752483664, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752485918, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752485919, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752486369, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752486370, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752486372, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.885, Average Loss: 0.023, avg. samples / sec: 4.49
Iteration:     20, Loss function: 21.102, Average Loss: 0.457, avg. samples / sec: 800.21
Iteration:     40, Loss function: 20.755, Average Loss: 0.859, avg. samples / sec: 921.41
Iteration:     60, Loss function: 20.476, Average Loss: 1.248, avg. samples / sec: 1014.15
Iteration:     80, Loss function: 19.874, Average Loss: 1.622, avg. samples / sec: 971.65
Iteration:    100, Loss function: 15.427, Average Loss: 1.947, avg. samples / sec: 971.39
Iteration:    120, Loss function: 11.275, Average Loss: 2.157, avg. samples / sec: 954.54
Iteration:    140, Loss function: 9.836, Average Loss: 2.320, avg. samples / sec: 982.61
Iteration:    160, Loss function: 9.207, Average Loss: 2.463, avg. samples / sec: 1030.42
Iteration:    180, Loss function: 9.080, Average Loss: 2.594, avg. samples / sec: 997.71
Iteration:    200, Loss function: 8.813, Average Loss: 2.720, avg. samples / sec: 951.56
Iteration:    220, Loss function: 8.474, Average Loss: 2.840, avg. samples / sec: 1025.58
Iteration:    240, Loss function: 8.536, Average Loss: 2.956, avg. samples / sec: 1018.38
Iteration:    260, Loss function: 8.738, Average Loss: 3.068, avg. samples / sec: 942.97
Iteration:    280, Loss function: 8.870, Average Loss: 3.182, avg. samples / sec: 941.21
Iteration:    300, Loss function: 8.519, Average Loss: 3.290, avg. samples / sec: 966.62
Iteration:    320, Loss function: 8.251, Average Loss: 3.391, avg. samples / sec: 994.23
Iteration:    340, Loss function: 8.139, Average Loss: 3.488, avg. samples / sec: 967.84
Iteration:    360, Loss function: 7.904, Average Loss: 3.580, avg. samples / sec: 923.38
Iteration:    380, Loss function: 7.781, Average Loss: 3.670, avg. samples / sec: 1060.00
Iteration:    400, Loss function: 8.011, Average Loss: 3.754, avg. samples / sec: 985.07
Iteration:    420, Loss function: 7.701, Average Loss: 3.836, avg. samples / sec: 935.92
Iteration:    440, Loss function: 7.921, Average Loss: 3.915, avg. samples / sec: 1027.85
Iteration:    460, Loss function: 7.811, Average Loss: 3.992, avg. samples / sec: 1050.59
Iteration:    480, Loss function: 7.483, Average Loss: 4.065, avg. samples / sec: 1093.97
Iteration:    500, Loss function: 7.711, Average Loss: 4.135, avg. samples / sec: 782.06
Iteration:    520, Loss function: 7.479, Average Loss: 4.203, avg. samples / sec: 1060.63
Iteration:    540, Loss function: 7.568, Average Loss: 4.268, avg. samples / sec: 989.74
Iteration:    560, Loss function: 7.111, Average Loss: 4.331, avg. samples / sec: 1045.79
Iteration:    580, Loss function: 7.146, Average Loss: 4.392, avg. samples / sec: 983.99
Iteration:    600, Loss function: 7.209, Average Loss: 4.451, avg. samples / sec: 1007.15
Iteration:    620, Loss function: 7.284, Average Loss: 4.506, avg. samples / sec: 917.20
Iteration:    640, Loss function: 6.946, Average Loss: 4.560, avg. samples / sec: 1009.67
Iteration:    660, Loss function: 7.130, Average Loss: 4.612, avg. samples / sec: 1029.16
Iteration:    680, Loss function: 7.318, Average Loss: 4.663, avg. samples / sec: 1034.79
Iteration:    700, Loss function: 6.835, Average Loss: 4.710, avg. samples / sec: 980.36
Iteration:    720, Loss function: 6.895, Average Loss: 4.759, avg. samples / sec: 960.96
Iteration:    740, Loss function: 6.940, Average Loss: 4.804, avg. samples / sec: 984.97
Iteration:    760, Loss function: 7.084, Average Loss: 4.848, avg. samples / sec: 1064.96
Iteration:    780, Loss function: 6.915, Average Loss: 4.890, avg. samples / sec: 997.26
Iteration:    800, Loss function: 7.018, Average Loss: 4.929, avg. samples / sec: 961.40
Iteration:    820, Loss function: 6.753, Average Loss: 4.965, avg. samples / sec: 1014.21
Iteration:    840, Loss function: 6.704, Average Loss: 5.001, avg. samples / sec: 996.81
Iteration:    860, Loss function: 6.718, Average Loss: 5.035, avg. samples / sec: 1004.13
Iteration:    880, Loss function: 6.829, Average Loss: 5.067, avg. samples / sec: 1015.04
Iteration:    900, Loss function: 6.924, Average Loss: 5.098, avg. samples / sec: 989.03
Iteration:    920, Loss function: 6.622, Average Loss: 5.128, avg. samples / sec: 963.29
Iteration:    940, Loss function: 6.767, Average Loss: 5.158, avg. samples / sec: 981.84
Iteration:    960, Loss function: 6.434, Average Loss: 5.186, avg. samples / sec: 1023.30
Iteration:    980, Loss function: 6.467, Average Loss: 5.213, avg. samples / sec: 983.83
Iteration:   1000, Loss function: 6.395, Average Loss: 5.238, avg. samples / sec: 958.41
Iteration:   1020, Loss function: 6.394, Average Loss: 5.262, avg. samples / sec: 999.39
:::MLLOG {"namespace": "", "time_ms": 1639752605757, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752605758, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.572, Average Loss: 5.285, avg. samples / sec: 1026.93
Iteration:   1060, Loss function: 6.281, Average Loss: 5.309, avg. samples / sec: 978.38
Iteration:   1080, Loss function: 6.468, Average Loss: 5.331, avg. samples / sec: 903.65
Iteration:   1100, Loss function: 6.257, Average Loss: 5.350, avg. samples / sec: 971.32
Iteration:   1120, Loss function: 6.275, Average Loss: 5.369, avg. samples / sec: 949.64
Iteration:   1140, Loss function: 6.297, Average Loss: 5.387, avg. samples / sec: 1011.19
Iteration:   1160, Loss function: 6.102, Average Loss: 5.404, avg. samples / sec: 1033.64
Iteration:   1180, Loss function: 6.242, Average Loss: 5.420, avg. samples / sec: 978.75
Iteration:   1200, Loss function: 6.209, Average Loss: 5.436, avg. samples / sec: 950.50
Iteration:   1220, Loss function: 6.253, Average Loss: 5.451, avg. samples / sec: 1026.16
Iteration:   1240, Loss function: 6.029, Average Loss: 5.464, avg. samples / sec: 930.73
Iteration:   1260, Loss function: 6.100, Average Loss: 5.477, avg. samples / sec: 977.70
Iteration:   1280, Loss function: 5.951, Average Loss: 5.488, avg. samples / sec: 1012.41
Iteration:   1300, Loss function: 6.135, Average Loss: 5.502, avg. samples / sec: 996.17
Iteration:   1320, Loss function: 5.938, Average Loss: 5.513, avg. samples / sec: 997.63
Iteration:   1340, Loss function: 6.017, Average Loss: 5.522, avg. samples / sec: 998.54
Iteration:   1360, Loss function: 5.956, Average Loss: 5.533, avg. samples / sec: 1013.97
Iteration:   1380, Loss function: 6.017, Average Loss: 5.544, avg. samples / sec: 990.77
Iteration:   1400, Loss function: 6.067, Average Loss: 5.553, avg. samples / sec: 979.31
Iteration:   1420, Loss function: 5.748, Average Loss: 5.561, avg. samples / sec: 957.70
Iteration:   1440, Loss function: 6.275, Average Loss: 5.568, avg. samples / sec: 944.76
Iteration:   1460, Loss function: 6.186, Average Loss: 5.577, avg. samples / sec: 1053.55
Iteration:   1480, Loss function: 5.794, Average Loss: 5.585, avg. samples / sec: 969.32
Iteration:   1500, Loss function: 6.063, Average Loss: 5.592, avg. samples / sec: 1082.52
Iteration:   1520, Loss function: 6.069, Average Loss: 5.599, avg. samples / sec: 995.99
Iteration:   1540, Loss function: 6.046, Average Loss: 5.602, avg. samples / sec: 991.07
Iteration:   1560, Loss function: 5.661, Average Loss: 5.607, avg. samples / sec: 980.04
Iteration:   1580, Loss function: 5.764, Average Loss: 5.611, avg. samples / sec: 1031.56
Iteration:   1600, Loss function: 6.077, Average Loss: 5.617, avg. samples / sec: 1023.77
Iteration:   1620, Loss function: 5.766, Average Loss: 5.623, avg. samples / sec: 968.19
Iteration:   1640, Loss function: 6.131, Average Loss: 5.626, avg. samples / sec: 958.55
Iteration:   1660, Loss function: 5.866, Average Loss: 5.630, avg. samples / sec: 925.87
Iteration:   1680, Loss function: 5.639, Average Loss: 5.633, avg. samples / sec: 899.60
Iteration:   1700, Loss function: 5.411, Average Loss: 5.636, avg. samples / sec: 1017.21
Iteration:   1720, Loss function: 5.666, Average Loss: 5.638, avg. samples / sec: 1062.44
Iteration:   1740, Loss function: 5.875, Average Loss: 5.641, avg. samples / sec: 988.37
Iteration:   1760, Loss function: 5.454, Average Loss: 5.643, avg. samples / sec: 884.72
Iteration:   1780, Loss function: 5.777, Average Loss: 5.644, avg. samples / sec: 1045.78
Iteration:   1800, Loss function: 5.846, Average Loss: 5.645, avg. samples / sec: 1061.36
Iteration:   1820, Loss function: 6.013, Average Loss: 5.647, avg. samples / sec: 1014.94
Iteration:   1840, Loss function: 5.936, Average Loss: 5.648, avg. samples / sec: 927.34
Iteration:   1860, Loss function: 5.584, Average Loss: 5.649, avg. samples / sec: 992.53
Iteration:   1880, Loss function: 5.797, Average Loss: 5.650, avg. samples / sec: 1002.76
Iteration:   1900, Loss function: 5.858, Average Loss: 5.651, avg. samples / sec: 993.32
Iteration:   1920, Loss function: 5.835, Average Loss: 5.651, avg. samples / sec: 1003.35
Iteration:   1940, Loss function: 5.794, Average Loss: 5.650, avg. samples / sec: 1024.19
Iteration:   1960, Loss function: 5.672, Average Loss: 5.650, avg. samples / sec: 1007.07
Iteration:   1980, Loss function: 5.745, Average Loss: 5.650, avg. samples / sec: 986.22
Iteration:   2000, Loss function: 5.584, Average Loss: 5.649, avg. samples / sec: 995.58
Iteration:   2020, Loss function: 5.719, Average Loss: 5.648, avg. samples / sec: 1035.48
Iteration:   2040, Loss function: 5.716, Average Loss: 5.648, avg. samples / sec: 1054.38
:::MLLOG {"namespace": "", "time_ms": 1639752724348, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752724350, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.500, Average Loss: 5.646, avg. samples / sec: 992.08
Iteration:   2080, Loss function: 5.372, Average Loss: 5.644, avg. samples / sec: 999.01
Iteration:   2100, Loss function: 5.474, Average Loss: 5.642, avg. samples / sec: 951.60
Iteration:   2120, Loss function: 5.401, Average Loss: 5.639, avg. samples / sec: 966.11
Iteration:   2140, Loss function: 5.389, Average Loss: 5.635, avg. samples / sec: 996.80
Iteration:   2160, Loss function: 5.364, Average Loss: 5.633, avg. samples / sec: 992.84
Iteration:   2180, Loss function: 5.392, Average Loss: 5.630, avg. samples / sec: 935.41
Iteration:   2200, Loss function: 5.494, Average Loss: 5.627, avg. samples / sec: 1031.92
Iteration:   2220, Loss function: 5.714, Average Loss: 5.624, avg. samples / sec: 980.54
Iteration:   2240, Loss function: 5.328, Average Loss: 5.621, avg. samples / sec: 1024.24
Iteration:   2260, Loss function: 5.321, Average Loss: 5.617, avg. samples / sec: 1109.10
Iteration:   2280, Loss function: 5.206, Average Loss: 5.614, avg. samples / sec: 976.45
Iteration:   2300, Loss function: 5.138, Average Loss: 5.611, avg. samples / sec: 1097.30
Iteration:   2320, Loss function: 5.328, Average Loss: 5.608, avg. samples / sec: 968.54
Iteration:   2340, Loss function: 5.585, Average Loss: 5.607, avg. samples / sec: 1040.65
Iteration:   2360, Loss function: 5.431, Average Loss: 5.603, avg. samples / sec: 1021.14
Iteration:   2380, Loss function: 5.443, Average Loss: 5.599, avg. samples / sec: 1040.87
Iteration:   2400, Loss function: 5.526, Average Loss: 5.595, avg. samples / sec: 1016.29
Iteration:   2420, Loss function: 5.361, Average Loss: 5.592, avg. samples / sec: 1006.38
Iteration:   2440, Loss function: 5.602, Average Loss: 5.589, avg. samples / sec: 960.56
Iteration:   2460, Loss function: 5.018, Average Loss: 5.584, avg. samples / sec: 1020.23
Iteration:   2480, Loss function: 5.393, Average Loss: 5.580, avg. samples / sec: 1030.63
Iteration:   2500, Loss function: 5.446, Average Loss: 5.576, avg. samples / sec: 950.49
Iteration:   2520, Loss function: 5.258, Average Loss: 5.571, avg. samples / sec: 952.51
Iteration:   2540, Loss function: 5.303, Average Loss: 5.567, avg. samples / sec: 960.05
Iteration:   2560, Loss function: 5.196, Average Loss: 5.563, avg. samples / sec: 1033.42
Iteration:   2580, Loss function: 5.367, Average Loss: 5.559, avg. samples / sec: 1034.31
Iteration:   2600, Loss function: 5.315, Average Loss: 5.555, avg. samples / sec: 972.01
Iteration:   2620, Loss function: 5.286, Average Loss: 5.551, avg. samples / sec: 997.47
Iteration:   2640, Loss function: 5.102, Average Loss: 5.548, avg. samples / sec: 1022.19
Iteration:   2660, Loss function: 5.083, Average Loss: 5.544, avg. samples / sec: 997.31
Iteration:   2680, Loss function: 4.992, Average Loss: 5.540, avg. samples / sec: 1016.54
Iteration:   2700, Loss function: 5.221, Average Loss: 5.536, avg. samples / sec: 1018.99
Iteration:   2720, Loss function: 5.440, Average Loss: 5.532, avg. samples / sec: 1034.86
Iteration:   2740, Loss function: 5.118, Average Loss: 5.527, avg. samples / sec: 1058.62
Iteration:   2760, Loss function: 4.940, Average Loss: 5.522, avg. samples / sec: 1034.52
Iteration:   2780, Loss function: 5.641, Average Loss: 5.518, avg. samples / sec: 1027.85
Iteration:   2800, Loss function: 5.227, Average Loss: 5.513, avg. samples / sec: 1039.23
Iteration:   2820, Loss function: 5.421, Average Loss: 5.509, avg. samples / sec: 1028.02
Iteration:   2840, Loss function: 5.076, Average Loss: 5.503, avg. samples / sec: 1008.33
Iteration:   2860, Loss function: 5.028, Average Loss: 5.498, avg. samples / sec: 1029.98
Iteration:   2880, Loss function: 5.223, Average Loss: 5.493, avg. samples / sec: 974.19
Iteration:   2900, Loss function: 5.083, Average Loss: 5.489, avg. samples / sec: 945.33
Iteration:   2920, Loss function: 5.263, Average Loss: 5.482, avg. samples / sec: 1001.51
Iteration:   2940, Loss function: 5.186, Average Loss: 5.478, avg. samples / sec: 975.13
Iteration:   2960, Loss function: 5.426, Average Loss: 5.473, avg. samples / sec: 988.00
Iteration:   2980, Loss function: 5.166, Average Loss: 5.469, avg. samples / sec: 952.55
Iteration:   3000, Loss function: 5.133, Average Loss: 5.464, avg. samples / sec: 1033.68
Iteration:   3020, Loss function: 5.238, Average Loss: 5.457, avg. samples / sec: 1029.42
Iteration:   3040, Loss function: 5.269, Average Loss: 5.452, avg. samples / sec: 957.51
Iteration:   3060, Loss function: 4.972, Average Loss: 5.446, avg. samples / sec: 1022.17
Iteration:   3080, Loss function: 5.014, Average Loss: 5.441, avg. samples / sec: 915.77
:::MLLOG {"namespace": "", "time_ms": 1639752841338, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752841339, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.136, Average Loss: 5.436, avg. samples / sec: 945.76
Iteration:   3120, Loss function: 5.127, Average Loss: 5.430, avg. samples / sec: 941.91
Iteration:   3140, Loss function: 5.002, Average Loss: 5.425, avg. samples / sec: 1026.86
Iteration:   3160, Loss function: 5.421, Average Loss: 5.418, avg. samples / sec: 982.40
Iteration:   3180, Loss function: 4.966, Average Loss: 5.414, avg. samples / sec: 1086.43
Iteration:   3200, Loss function: 5.271, Average Loss: 5.409, avg. samples / sec: 1055.67
Iteration:   3220, Loss function: 5.160, Average Loss: 5.402, avg. samples / sec: 1021.83
Iteration:   3240, Loss function: 5.263, Average Loss: 5.397, avg. samples / sec: 1065.65
Iteration:   3260, Loss function: 4.936, Average Loss: 5.393, avg. samples / sec: 990.77
Iteration:   3280, Loss function: 4.841, Average Loss: 5.387, avg. samples / sec: 939.49
Iteration:   3300, Loss function: 4.935, Average Loss: 5.381, avg. samples / sec: 980.40
Iteration:   3320, Loss function: 5.031, Average Loss: 5.376, avg. samples / sec: 1003.28
Iteration:   3340, Loss function: 4.993, Average Loss: 5.371, avg. samples / sec: 962.10
Iteration:   3360, Loss function: 5.167, Average Loss: 5.365, avg. samples / sec: 1051.77
Iteration:   3380, Loss function: 5.187, Average Loss: 5.358, avg. samples / sec: 1009.64
Iteration:   3400, Loss function: 4.933, Average Loss: 5.353, avg. samples / sec: 1012.82
Iteration:   3420, Loss function: 5.036, Average Loss: 5.348, avg. samples / sec: 1053.00
Iteration:   3440, Loss function: 5.022, Average Loss: 5.343, avg. samples / sec: 978.90
Iteration:   3460, Loss function: 5.200, Average Loss: 5.338, avg. samples / sec: 941.48
Iteration:   3480, Loss function: 5.103, Average Loss: 5.333, avg. samples / sec: 1010.47
Iteration:   3500, Loss function: 5.279, Average Loss: 5.328, avg. samples / sec: 969.83
Iteration:   3520, Loss function: 4.964, Average Loss: 5.325, avg. samples / sec: 983.04
Iteration:   3540, Loss function: 4.981, Average Loss: 5.320, avg. samples / sec: 1042.36
Iteration:   3560, Loss function: 4.940, Average Loss: 5.316, avg. samples / sec: 1023.02
Iteration:   3580, Loss function: 5.185, Average Loss: 5.312, avg. samples / sec: 1063.38
Iteration:   3600, Loss function: 5.165, Average Loss: 5.306, avg. samples / sec: 977.40
Iteration:   3620, Loss function: 4.741, Average Loss: 5.301, avg. samples / sec: 1002.08
Iteration:   3640, Loss function: 4.784, Average Loss: 5.296, avg. samples / sec: 979.37
Iteration:   3660, Loss function: 5.101, Average Loss: 5.291, avg. samples / sec: 915.24
Iteration:   3680, Loss function: 5.375, Average Loss: 5.286, avg. samples / sec: 1036.77
Iteration:   3700, Loss function: 5.048, Average Loss: 5.281, avg. samples / sec: 953.39
Iteration:   3720, Loss function: 5.055, Average Loss: 5.275, avg. samples / sec: 1048.72
Iteration:   3740, Loss function: 5.180, Average Loss: 5.272, avg. samples / sec: 955.95
Iteration:   3760, Loss function: 5.058, Average Loss: 5.268, avg. samples / sec: 929.00
Iteration:   3780, Loss function: 5.073, Average Loss: 5.263, avg. samples / sec: 1009.41
Iteration:   3800, Loss function: 4.966, Average Loss: 5.259, avg. samples / sec: 1015.86
Iteration:   3820, Loss function: 5.058, Average Loss: 5.254, avg. samples / sec: 1008.00
Iteration:   3840, Loss function: 4.768, Average Loss: 5.250, avg. samples / sec: 1021.40
Iteration:   3860, Loss function: 4.894, Average Loss: 5.244, avg. samples / sec: 976.60
Iteration:   3880, Loss function: 4.819, Average Loss: 5.239, avg. samples / sec: 985.38
Iteration:   3900, Loss function: 5.128, Average Loss: 5.235, avg. samples / sec: 982.30
Iteration:   3920, Loss function: 5.268, Average Loss: 5.230, avg. samples / sec: 972.18
Iteration:   3940, Loss function: 4.906, Average Loss: 5.225, avg. samples / sec: 947.25
Iteration:   3960, Loss function: 5.075, Average Loss: 5.220, avg. samples / sec: 1019.71
Iteration:   3980, Loss function: 4.841, Average Loss: 5.216, avg. samples / sec: 1023.14
Iteration:   4000, Loss function: 5.139, Average Loss: 5.213, avg. samples / sec: 935.44
Iteration:   4020, Loss function: 5.065, Average Loss: 5.209, avg. samples / sec: 972.59
Iteration:   4040, Loss function: 5.129, Average Loss: 5.206, avg. samples / sec: 1003.09
Iteration:   4060, Loss function: 5.090, Average Loss: 5.202, avg. samples / sec: 980.72
Iteration:   4080, Loss function: 5.052, Average Loss: 5.197, avg. samples / sec: 947.26
Iteration:   4100, Loss function: 4.967, Average Loss: 5.193, avg. samples / sec: 946.09
:::MLLOG {"namespace": "", "time_ms": 1639752959641, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752959643, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.905, Average Loss: 5.188, avg. samples / sec: 962.46
Iteration:   4140, Loss function: 4.918, Average Loss: 5.183, avg. samples / sec: 1058.56
Iteration:   4160, Loss function: 4.857, Average Loss: 5.177, avg. samples / sec: 1040.00
Iteration:   4180, Loss function: 5.025, Average Loss: 5.171, avg. samples / sec: 1035.94
Iteration:   4200, Loss function: 4.746, Average Loss: 5.166, avg. samples / sec: 1044.84
Iteration:   4220, Loss function: 4.848, Average Loss: 5.161, avg. samples / sec: 969.48
Iteration:   4240, Loss function: 5.100, Average Loss: 5.156, avg. samples / sec: 971.90
Iteration:   4260, Loss function: 4.985, Average Loss: 5.152, avg. samples / sec: 965.73
Iteration:   4280, Loss function: 5.042, Average Loss: 5.146, avg. samples / sec: 986.82
Iteration:   4300, Loss function: 4.684, Average Loss: 5.140, avg. samples / sec: 961.37
Iteration:   4320, Loss function: 4.816, Average Loss: 5.136, avg. samples / sec: 1001.35
Iteration:   4340, Loss function: 4.664, Average Loss: 5.130, avg. samples / sec: 1059.23
Iteration:   4360, Loss function: 4.966, Average Loss: 5.126, avg. samples / sec: 1028.96
Iteration:   4380, Loss function: 5.181, Average Loss: 5.120, avg. samples / sec: 998.24
Iteration:   4400, Loss function: 4.870, Average Loss: 5.115, avg. samples / sec: 1004.12
Iteration:   4420, Loss function: 4.965, Average Loss: 5.111, avg. samples / sec: 1036.74
Iteration:   4440, Loss function: 4.964, Average Loss: 5.107, avg. samples / sec: 1024.16
Iteration:   4460, Loss function: 5.257, Average Loss: 5.103, avg. samples / sec: 1041.48
Iteration:   4480, Loss function: 5.131, Average Loss: 5.100, avg. samples / sec: 1058.99
Iteration:   4500, Loss function: 4.916, Average Loss: 5.097, avg. samples / sec: 991.26
Iteration:   4520, Loss function: 4.712, Average Loss: 5.091, avg. samples / sec: 998.27
Iteration:   4540, Loss function: 5.045, Average Loss: 5.087, avg. samples / sec: 917.07
Iteration:   4560, Loss function: 4.687, Average Loss: 5.083, avg. samples / sec: 1007.71
Iteration:   4580, Loss function: 4.669, Average Loss: 5.081, avg. samples / sec: 1037.15
Iteration:   4600, Loss function: 4.913, Average Loss: 5.077, avg. samples / sec: 1034.73
Iteration:   4620, Loss function: 4.691, Average Loss: 5.073, avg. samples / sec: 954.43
Iteration:   4640, Loss function: 4.601, Average Loss: 5.068, avg. samples / sec: 929.27
Iteration:   4660, Loss function: 4.740, Average Loss: 5.065, avg. samples / sec: 990.10
Iteration:   4680, Loss function: 5.361, Average Loss: 5.061, avg. samples / sec: 1037.34
Iteration:   4700, Loss function: 4.572, Average Loss: 5.057, avg. samples / sec: 997.85
Iteration:   4720, Loss function: 4.842, Average Loss: 5.053, avg. samples / sec: 973.15
Iteration:   4740, Loss function: 4.652, Average Loss: 5.050, avg. samples / sec: 925.55
Iteration:   4760, Loss function: 4.572, Average Loss: 5.047, avg. samples / sec: 955.75
Iteration:   4780, Loss function: 5.074, Average Loss: 5.043, avg. samples / sec: 1060.84
Iteration:   4800, Loss function: 5.072, Average Loss: 5.040, avg. samples / sec: 987.94
Iteration:   4820, Loss function: 4.836, Average Loss: 5.037, avg. samples / sec: 947.45
Iteration:   4840, Loss function: 4.986, Average Loss: 5.033, avg. samples / sec: 967.69
Iteration:   4860, Loss function: 4.771, Average Loss: 5.029, avg. samples / sec: 1000.26
Iteration:   4880, Loss function: 5.175, Average Loss: 5.025, avg. samples / sec: 977.35
Iteration:   4900, Loss function: 4.714, Average Loss: 5.021, avg. samples / sec: 998.41
Iteration:   4920, Loss function: 4.719, Average Loss: 5.018, avg. samples / sec: 992.46
Iteration:   4940, Loss function: 4.679, Average Loss: 5.014, avg. samples / sec: 1036.56
Iteration:   4960, Loss function: 4.604, Average Loss: 5.010, avg. samples / sec: 1040.57
Iteration:   4980, Loss function: 4.697, Average Loss: 5.007, avg. samples / sec: 1003.63
Iteration:   5000, Loss function: 4.864, Average Loss: 5.004, avg. samples / sec: 1047.80
Iteration:   5020, Loss function: 5.039, Average Loss: 5.001, avg. samples / sec: 943.23
Iteration:   5040, Loss function: 4.861, Average Loss: 4.998, avg. samples / sec: 927.34
Iteration:   5060, Loss function: 4.810, Average Loss: 4.994, avg. samples / sec: 1047.99
Iteration:   5080, Loss function: 4.404, Average Loss: 4.990, avg. samples / sec: 1079.39
Iteration:   5100, Loss function: 4.819, Average Loss: 4.988, avg. samples / sec: 1081.18
Iteration:   5120, Loss function: 4.821, Average Loss: 4.985, avg. samples / sec: 1103.90
Iteration:   5140, Loss function: 4.903, Average Loss: 4.982, avg. samples / sec: 1204.04
:::MLLOG {"namespace": "", "time_ms": 1639753076062, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.63 s
:::MLLOG {"namespace": "", "time_ms": 1639753108780, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753108887, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108895, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.09s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.966, Average Loss: 4.977, avg. samples / sec: 64.97
Iteration:   5180, Loss function: 4.744, Average Loss: 4.972, avg. samples / sec: 1202.08
DONE (t=3.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10476
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21439
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09350
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18564
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13550
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10476 AP goal: 0.10000
Iteration:   5200, Loss function: 4.704, Average Loss: 4.969, avg. samples / sec: 1237.40
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10475661481924115, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114735, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:35 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:35 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752458807, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752459028, "event_type": "POINT_IN_TIME", "key": "seed", "value": 725842544, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 725842544
:::MLLOG {"namespace": "", "time_ms": 1639752460733, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752460733, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752460736, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752460737, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752483663, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752483664, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752485918, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752485919, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752486369, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752486370, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752486372, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.885, Average Loss: 0.023, avg. samples / sec: 4.49
Iteration:     20, Loss function: 21.102, Average Loss: 0.457, avg. samples / sec: 800.21
Iteration:     40, Loss function: 20.755, Average Loss: 0.859, avg. samples / sec: 921.41
Iteration:     60, Loss function: 20.476, Average Loss: 1.248, avg. samples / sec: 1014.15
Iteration:     80, Loss function: 19.874, Average Loss: 1.622, avg. samples / sec: 971.65
Iteration:    100, Loss function: 15.427, Average Loss: 1.947, avg. samples / sec: 971.39
Iteration:    120, Loss function: 11.275, Average Loss: 2.157, avg. samples / sec: 954.54
Iteration:    140, Loss function: 9.836, Average Loss: 2.320, avg. samples / sec: 982.61
Iteration:    160, Loss function: 9.207, Average Loss: 2.463, avg. samples / sec: 1030.42
Iteration:    180, Loss function: 9.080, Average Loss: 2.594, avg. samples / sec: 997.71
Iteration:    200, Loss function: 8.813, Average Loss: 2.720, avg. samples / sec: 951.56
Iteration:    220, Loss function: 8.474, Average Loss: 2.840, avg. samples / sec: 1025.58
Iteration:    240, Loss function: 8.536, Average Loss: 2.956, avg. samples / sec: 1018.38
Iteration:    260, Loss function: 8.738, Average Loss: 3.068, avg. samples / sec: 942.97
Iteration:    280, Loss function: 8.870, Average Loss: 3.182, avg. samples / sec: 941.21
Iteration:    300, Loss function: 8.519, Average Loss: 3.290, avg. samples / sec: 966.62
Iteration:    320, Loss function: 8.251, Average Loss: 3.391, avg. samples / sec: 994.23
Iteration:    340, Loss function: 8.139, Average Loss: 3.488, avg. samples / sec: 967.84
Iteration:    360, Loss function: 7.904, Average Loss: 3.580, avg. samples / sec: 923.38
Iteration:    380, Loss function: 7.781, Average Loss: 3.670, avg. samples / sec: 1060.00
Iteration:    400, Loss function: 8.011, Average Loss: 3.754, avg. samples / sec: 985.07
Iteration:    420, Loss function: 7.701, Average Loss: 3.836, avg. samples / sec: 935.92
Iteration:    440, Loss function: 7.921, Average Loss: 3.915, avg. samples / sec: 1027.85
Iteration:    460, Loss function: 7.811, Average Loss: 3.992, avg. samples / sec: 1050.59
Iteration:    480, Loss function: 7.483, Average Loss: 4.065, avg. samples / sec: 1093.97
Iteration:    500, Loss function: 7.711, Average Loss: 4.135, avg. samples / sec: 782.06
Iteration:    520, Loss function: 7.479, Average Loss: 4.203, avg. samples / sec: 1060.63
Iteration:    540, Loss function: 7.568, Average Loss: 4.268, avg. samples / sec: 989.74
Iteration:    560, Loss function: 7.111, Average Loss: 4.331, avg. samples / sec: 1045.79
Iteration:    580, Loss function: 7.146, Average Loss: 4.392, avg. samples / sec: 983.99
Iteration:    600, Loss function: 7.209, Average Loss: 4.451, avg. samples / sec: 1007.15
Iteration:    620, Loss function: 7.284, Average Loss: 4.506, avg. samples / sec: 917.20
Iteration:    640, Loss function: 6.946, Average Loss: 4.560, avg. samples / sec: 1009.67
Iteration:    660, Loss function: 7.130, Average Loss: 4.612, avg. samples / sec: 1029.16
Iteration:    680, Loss function: 7.318, Average Loss: 4.663, avg. samples / sec: 1034.79
Iteration:    700, Loss function: 6.835, Average Loss: 4.710, avg. samples / sec: 980.36
Iteration:    720, Loss function: 6.895, Average Loss: 4.759, avg. samples / sec: 960.96
Iteration:    740, Loss function: 6.940, Average Loss: 4.804, avg. samples / sec: 984.97
Iteration:    760, Loss function: 7.084, Average Loss: 4.848, avg. samples / sec: 1064.96
Iteration:    780, Loss function: 6.915, Average Loss: 4.890, avg. samples / sec: 997.26
Iteration:    800, Loss function: 7.018, Average Loss: 4.929, avg. samples / sec: 961.40
Iteration:    820, Loss function: 6.753, Average Loss: 4.965, avg. samples / sec: 1014.21
Iteration:    840, Loss function: 6.704, Average Loss: 5.001, avg. samples / sec: 996.81
Iteration:    860, Loss function: 6.718, Average Loss: 5.035, avg. samples / sec: 1004.13
Iteration:    880, Loss function: 6.829, Average Loss: 5.067, avg. samples / sec: 1015.04
Iteration:    900, Loss function: 6.924, Average Loss: 5.098, avg. samples / sec: 989.03
Iteration:    920, Loss function: 6.622, Average Loss: 5.128, avg. samples / sec: 963.29
Iteration:    940, Loss function: 6.767, Average Loss: 5.158, avg. samples / sec: 981.84
Iteration:    960, Loss function: 6.434, Average Loss: 5.186, avg. samples / sec: 1023.30
Iteration:    980, Loss function: 6.467, Average Loss: 5.213, avg. samples / sec: 983.83
Iteration:   1000, Loss function: 6.395, Average Loss: 5.238, avg. samples / sec: 958.41
Iteration:   1020, Loss function: 6.394, Average Loss: 5.262, avg. samples / sec: 999.39
:::MLLOG {"namespace": "", "time_ms": 1639752605757, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752605758, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.572, Average Loss: 5.285, avg. samples / sec: 1026.93
Iteration:   1060, Loss function: 6.281, Average Loss: 5.309, avg. samples / sec: 978.38
Iteration:   1080, Loss function: 6.468, Average Loss: 5.331, avg. samples / sec: 903.65
Iteration:   1100, Loss function: 6.257, Average Loss: 5.350, avg. samples / sec: 971.32
Iteration:   1120, Loss function: 6.275, Average Loss: 5.369, avg. samples / sec: 949.64
Iteration:   1140, Loss function: 6.297, Average Loss: 5.387, avg. samples / sec: 1011.19
Iteration:   1160, Loss function: 6.102, Average Loss: 5.404, avg. samples / sec: 1033.64
Iteration:   1180, Loss function: 6.242, Average Loss: 5.420, avg. samples / sec: 978.75
Iteration:   1200, Loss function: 6.209, Average Loss: 5.436, avg. samples / sec: 950.50
Iteration:   1220, Loss function: 6.253, Average Loss: 5.451, avg. samples / sec: 1026.16
Iteration:   1240, Loss function: 6.029, Average Loss: 5.464, avg. samples / sec: 930.73
Iteration:   1260, Loss function: 6.100, Average Loss: 5.477, avg. samples / sec: 977.70
Iteration:   1280, Loss function: 5.951, Average Loss: 5.488, avg. samples / sec: 1012.41
Iteration:   1300, Loss function: 6.135, Average Loss: 5.502, avg. samples / sec: 996.17
Iteration:   1320, Loss function: 5.938, Average Loss: 5.513, avg. samples / sec: 997.63
Iteration:   1340, Loss function: 6.017, Average Loss: 5.522, avg. samples / sec: 998.54
Iteration:   1360, Loss function: 5.956, Average Loss: 5.533, avg. samples / sec: 1013.97
Iteration:   1380, Loss function: 6.017, Average Loss: 5.544, avg. samples / sec: 990.77
Iteration:   1400, Loss function: 6.067, Average Loss: 5.553, avg. samples / sec: 979.31
Iteration:   1420, Loss function: 5.748, Average Loss: 5.561, avg. samples / sec: 957.70
Iteration:   1440, Loss function: 6.275, Average Loss: 5.568, avg. samples / sec: 944.76
Iteration:   1460, Loss function: 6.186, Average Loss: 5.577, avg. samples / sec: 1053.55
Iteration:   1480, Loss function: 5.794, Average Loss: 5.585, avg. samples / sec: 969.32
Iteration:   1500, Loss function: 6.063, Average Loss: 5.592, avg. samples / sec: 1082.52
Iteration:   1520, Loss function: 6.069, Average Loss: 5.599, avg. samples / sec: 995.99
Iteration:   1540, Loss function: 6.046, Average Loss: 5.602, avg. samples / sec: 991.07
Iteration:   1560, Loss function: 5.661, Average Loss: 5.607, avg. samples / sec: 980.04
Iteration:   1580, Loss function: 5.764, Average Loss: 5.611, avg. samples / sec: 1031.56
Iteration:   1600, Loss function: 6.077, Average Loss: 5.617, avg. samples / sec: 1023.77
Iteration:   1620, Loss function: 5.766, Average Loss: 5.623, avg. samples / sec: 968.19
Iteration:   1640, Loss function: 6.131, Average Loss: 5.626, avg. samples / sec: 958.55
Iteration:   1660, Loss function: 5.866, Average Loss: 5.630, avg. samples / sec: 925.87
Iteration:   1680, Loss function: 5.639, Average Loss: 5.633, avg. samples / sec: 899.60
Iteration:   1700, Loss function: 5.411, Average Loss: 5.636, avg. samples / sec: 1017.21
Iteration:   1720, Loss function: 5.666, Average Loss: 5.638, avg. samples / sec: 1062.44
Iteration:   1740, Loss function: 5.875, Average Loss: 5.641, avg. samples / sec: 988.37
Iteration:   1760, Loss function: 5.454, Average Loss: 5.643, avg. samples / sec: 884.72
Iteration:   1780, Loss function: 5.777, Average Loss: 5.644, avg. samples / sec: 1045.78
Iteration:   1800, Loss function: 5.846, Average Loss: 5.645, avg. samples / sec: 1061.36
Iteration:   1820, Loss function: 6.013, Average Loss: 5.647, avg. samples / sec: 1014.94
Iteration:   1840, Loss function: 5.936, Average Loss: 5.648, avg. samples / sec: 927.34
Iteration:   1860, Loss function: 5.584, Average Loss: 5.649, avg. samples / sec: 992.53
Iteration:   1880, Loss function: 5.797, Average Loss: 5.650, avg. samples / sec: 1002.76
Iteration:   1900, Loss function: 5.858, Average Loss: 5.651, avg. samples / sec: 993.32
Iteration:   1920, Loss function: 5.835, Average Loss: 5.651, avg. samples / sec: 1003.35
Iteration:   1940, Loss function: 5.794, Average Loss: 5.650, avg. samples / sec: 1024.19
Iteration:   1960, Loss function: 5.672, Average Loss: 5.650, avg. samples / sec: 1007.07
Iteration:   1980, Loss function: 5.745, Average Loss: 5.650, avg. samples / sec: 986.22
Iteration:   2000, Loss function: 5.584, Average Loss: 5.649, avg. samples / sec: 995.58
Iteration:   2020, Loss function: 5.719, Average Loss: 5.648, avg. samples / sec: 1035.48
Iteration:   2040, Loss function: 5.716, Average Loss: 5.648, avg. samples / sec: 1054.38
:::MLLOG {"namespace": "", "time_ms": 1639752724348, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752724350, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.500, Average Loss: 5.646, avg. samples / sec: 992.08
Iteration:   2080, Loss function: 5.372, Average Loss: 5.644, avg. samples / sec: 999.01
Iteration:   2100, Loss function: 5.474, Average Loss: 5.642, avg. samples / sec: 951.60
Iteration:   2120, Loss function: 5.401, Average Loss: 5.639, avg. samples / sec: 966.11
Iteration:   2140, Loss function: 5.389, Average Loss: 5.635, avg. samples / sec: 996.80
Iteration:   2160, Loss function: 5.364, Average Loss: 5.633, avg. samples / sec: 992.84
Iteration:   2180, Loss function: 5.392, Average Loss: 5.630, avg. samples / sec: 935.41
Iteration:   2200, Loss function: 5.494, Average Loss: 5.627, avg. samples / sec: 1031.92
Iteration:   2220, Loss function: 5.714, Average Loss: 5.624, avg. samples / sec: 980.54
Iteration:   2240, Loss function: 5.328, Average Loss: 5.621, avg. samples / sec: 1024.24
Iteration:   2260, Loss function: 5.321, Average Loss: 5.617, avg. samples / sec: 1109.10
Iteration:   2280, Loss function: 5.206, Average Loss: 5.614, avg. samples / sec: 976.45
Iteration:   2300, Loss function: 5.138, Average Loss: 5.611, avg. samples / sec: 1097.30
Iteration:   2320, Loss function: 5.328, Average Loss: 5.608, avg. samples / sec: 968.54
Iteration:   2340, Loss function: 5.585, Average Loss: 5.607, avg. samples / sec: 1040.65
Iteration:   2360, Loss function: 5.431, Average Loss: 5.603, avg. samples / sec: 1021.14
Iteration:   2380, Loss function: 5.443, Average Loss: 5.599, avg. samples / sec: 1040.87
Iteration:   2400, Loss function: 5.526, Average Loss: 5.595, avg. samples / sec: 1016.29
Iteration:   2420, Loss function: 5.361, Average Loss: 5.592, avg. samples / sec: 1006.38
Iteration:   2440, Loss function: 5.602, Average Loss: 5.589, avg. samples / sec: 960.56
Iteration:   2460, Loss function: 5.018, Average Loss: 5.584, avg. samples / sec: 1020.23
Iteration:   2480, Loss function: 5.393, Average Loss: 5.580, avg. samples / sec: 1030.63
Iteration:   2500, Loss function: 5.446, Average Loss: 5.576, avg. samples / sec: 950.49
Iteration:   2520, Loss function: 5.258, Average Loss: 5.571, avg. samples / sec: 952.51
Iteration:   2540, Loss function: 5.303, Average Loss: 5.567, avg. samples / sec: 960.05
Iteration:   2560, Loss function: 5.196, Average Loss: 5.563, avg. samples / sec: 1033.42
Iteration:   2580, Loss function: 5.367, Average Loss: 5.559, avg. samples / sec: 1034.31
Iteration:   2600, Loss function: 5.315, Average Loss: 5.555, avg. samples / sec: 972.01
Iteration:   2620, Loss function: 5.286, Average Loss: 5.551, avg. samples / sec: 997.47
Iteration:   2640, Loss function: 5.102, Average Loss: 5.548, avg. samples / sec: 1022.19
Iteration:   2660, Loss function: 5.083, Average Loss: 5.544, avg. samples / sec: 997.31
Iteration:   2680, Loss function: 4.992, Average Loss: 5.540, avg. samples / sec: 1016.54
Iteration:   2700, Loss function: 5.221, Average Loss: 5.536, avg. samples / sec: 1018.99
Iteration:   2720, Loss function: 5.440, Average Loss: 5.532, avg. samples / sec: 1034.86
Iteration:   2740, Loss function: 5.118, Average Loss: 5.527, avg. samples / sec: 1058.62
Iteration:   2760, Loss function: 4.940, Average Loss: 5.522, avg. samples / sec: 1034.52
Iteration:   2780, Loss function: 5.641, Average Loss: 5.518, avg. samples / sec: 1027.85
Iteration:   2800, Loss function: 5.227, Average Loss: 5.513, avg. samples / sec: 1039.23
Iteration:   2820, Loss function: 5.421, Average Loss: 5.509, avg. samples / sec: 1028.02
Iteration:   2840, Loss function: 5.076, Average Loss: 5.503, avg. samples / sec: 1008.33
Iteration:   2860, Loss function: 5.028, Average Loss: 5.498, avg. samples / sec: 1029.98
Iteration:   2880, Loss function: 5.223, Average Loss: 5.493, avg. samples / sec: 974.19
Iteration:   2900, Loss function: 5.083, Average Loss: 5.489, avg. samples / sec: 945.33
Iteration:   2920, Loss function: 5.263, Average Loss: 5.482, avg. samples / sec: 1001.51
Iteration:   2940, Loss function: 5.186, Average Loss: 5.478, avg. samples / sec: 975.13
Iteration:   2960, Loss function: 5.426, Average Loss: 5.473, avg. samples / sec: 988.00
Iteration:   2980, Loss function: 5.166, Average Loss: 5.469, avg. samples / sec: 952.55
Iteration:   3000, Loss function: 5.133, Average Loss: 5.464, avg. samples / sec: 1033.68
Iteration:   3020, Loss function: 5.238, Average Loss: 5.457, avg. samples / sec: 1029.42
Iteration:   3040, Loss function: 5.269, Average Loss: 5.452, avg. samples / sec: 957.51
Iteration:   3060, Loss function: 4.972, Average Loss: 5.446, avg. samples / sec: 1022.17
Iteration:   3080, Loss function: 5.014, Average Loss: 5.441, avg. samples / sec: 915.77
:::MLLOG {"namespace": "", "time_ms": 1639752841338, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752841339, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.136, Average Loss: 5.436, avg. samples / sec: 945.76
Iteration:   3120, Loss function: 5.127, Average Loss: 5.430, avg. samples / sec: 941.91
Iteration:   3140, Loss function: 5.002, Average Loss: 5.425, avg. samples / sec: 1026.86
Iteration:   3160, Loss function: 5.421, Average Loss: 5.418, avg. samples / sec: 982.40
Iteration:   3180, Loss function: 4.966, Average Loss: 5.414, avg. samples / sec: 1086.43
Iteration:   3200, Loss function: 5.271, Average Loss: 5.409, avg. samples / sec: 1055.67
Iteration:   3220, Loss function: 5.160, Average Loss: 5.402, avg. samples / sec: 1021.83
Iteration:   3240, Loss function: 5.263, Average Loss: 5.397, avg. samples / sec: 1065.65
Iteration:   3260, Loss function: 4.936, Average Loss: 5.393, avg. samples / sec: 990.77
Iteration:   3280, Loss function: 4.841, Average Loss: 5.387, avg. samples / sec: 939.49
Iteration:   3300, Loss function: 4.935, Average Loss: 5.381, avg. samples / sec: 980.40
Iteration:   3320, Loss function: 5.031, Average Loss: 5.376, avg. samples / sec: 1003.28
Iteration:   3340, Loss function: 4.993, Average Loss: 5.371, avg. samples / sec: 962.10
Iteration:   3360, Loss function: 5.167, Average Loss: 5.365, avg. samples / sec: 1051.77
Iteration:   3380, Loss function: 5.187, Average Loss: 5.358, avg. samples / sec: 1009.64
Iteration:   3400, Loss function: 4.933, Average Loss: 5.353, avg. samples / sec: 1012.82
Iteration:   3420, Loss function: 5.036, Average Loss: 5.348, avg. samples / sec: 1053.00
Iteration:   3440, Loss function: 5.022, Average Loss: 5.343, avg. samples / sec: 978.90
Iteration:   3460, Loss function: 5.200, Average Loss: 5.338, avg. samples / sec: 941.48
Iteration:   3480, Loss function: 5.103, Average Loss: 5.333, avg. samples / sec: 1010.47
Iteration:   3500, Loss function: 5.279, Average Loss: 5.328, avg. samples / sec: 969.83
Iteration:   3520, Loss function: 4.964, Average Loss: 5.325, avg. samples / sec: 983.04
Iteration:   3540, Loss function: 4.981, Average Loss: 5.320, avg. samples / sec: 1042.36
Iteration:   3560, Loss function: 4.940, Average Loss: 5.316, avg. samples / sec: 1023.02
Iteration:   3580, Loss function: 5.185, Average Loss: 5.312, avg. samples / sec: 1063.38
Iteration:   3600, Loss function: 5.165, Average Loss: 5.306, avg. samples / sec: 977.40
Iteration:   3620, Loss function: 4.741, Average Loss: 5.301, avg. samples / sec: 1002.08
Iteration:   3640, Loss function: 4.784, Average Loss: 5.296, avg. samples / sec: 979.37
Iteration:   3660, Loss function: 5.101, Average Loss: 5.291, avg. samples / sec: 915.24
Iteration:   3680, Loss function: 5.375, Average Loss: 5.286, avg. samples / sec: 1036.77
Iteration:   3700, Loss function: 5.048, Average Loss: 5.281, avg. samples / sec: 953.39
Iteration:   3720, Loss function: 5.055, Average Loss: 5.275, avg. samples / sec: 1048.72
Iteration:   3740, Loss function: 5.180, Average Loss: 5.272, avg. samples / sec: 955.95
Iteration:   3760, Loss function: 5.058, Average Loss: 5.268, avg. samples / sec: 929.00
Iteration:   3780, Loss function: 5.073, Average Loss: 5.263, avg. samples / sec: 1009.41
Iteration:   3800, Loss function: 4.966, Average Loss: 5.259, avg. samples / sec: 1015.86
Iteration:   3820, Loss function: 5.058, Average Loss: 5.254, avg. samples / sec: 1008.00
Iteration:   3840, Loss function: 4.768, Average Loss: 5.250, avg. samples / sec: 1021.40
Iteration:   3860, Loss function: 4.894, Average Loss: 5.244, avg. samples / sec: 976.60
Iteration:   3880, Loss function: 4.819, Average Loss: 5.239, avg. samples / sec: 985.38
Iteration:   3900, Loss function: 5.128, Average Loss: 5.235, avg. samples / sec: 982.30
Iteration:   3920, Loss function: 5.268, Average Loss: 5.230, avg. samples / sec: 972.18
Iteration:   3940, Loss function: 4.906, Average Loss: 5.225, avg. samples / sec: 947.25
Iteration:   3960, Loss function: 5.075, Average Loss: 5.220, avg. samples / sec: 1019.71
Iteration:   3980, Loss function: 4.841, Average Loss: 5.216, avg. samples / sec: 1023.14
Iteration:   4000, Loss function: 5.139, Average Loss: 5.213, avg. samples / sec: 935.44
Iteration:   4020, Loss function: 5.065, Average Loss: 5.209, avg. samples / sec: 972.59
Iteration:   4040, Loss function: 5.129, Average Loss: 5.206, avg. samples / sec: 1003.09
Iteration:   4060, Loss function: 5.090, Average Loss: 5.202, avg. samples / sec: 980.72
Iteration:   4080, Loss function: 5.052, Average Loss: 5.197, avg. samples / sec: 947.26
Iteration:   4100, Loss function: 4.967, Average Loss: 5.193, avg. samples / sec: 946.09
:::MLLOG {"namespace": "", "time_ms": 1639752959641, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752959643, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.905, Average Loss: 5.188, avg. samples / sec: 962.46
Iteration:   4140, Loss function: 4.918, Average Loss: 5.183, avg. samples / sec: 1058.56
Iteration:   4160, Loss function: 4.857, Average Loss: 5.177, avg. samples / sec: 1040.00
Iteration:   4180, Loss function: 5.025, Average Loss: 5.171, avg. samples / sec: 1035.94
Iteration:   4200, Loss function: 4.746, Average Loss: 5.166, avg. samples / sec: 1044.84
Iteration:   4220, Loss function: 4.848, Average Loss: 5.161, avg. samples / sec: 969.48
Iteration:   4240, Loss function: 5.100, Average Loss: 5.156, avg. samples / sec: 971.90
Iteration:   4260, Loss function: 4.985, Average Loss: 5.152, avg. samples / sec: 965.73
Iteration:   4280, Loss function: 5.042, Average Loss: 5.146, avg. samples / sec: 986.82
Iteration:   4300, Loss function: 4.684, Average Loss: 5.140, avg. samples / sec: 961.37
Iteration:   4320, Loss function: 4.816, Average Loss: 5.136, avg. samples / sec: 1001.35
Iteration:   4340, Loss function: 4.664, Average Loss: 5.130, avg. samples / sec: 1059.23
Iteration:   4360, Loss function: 4.966, Average Loss: 5.126, avg. samples / sec: 1028.96
Iteration:   4380, Loss function: 5.181, Average Loss: 5.120, avg. samples / sec: 998.24
Iteration:   4400, Loss function: 4.870, Average Loss: 5.115, avg. samples / sec: 1004.12
Iteration:   4420, Loss function: 4.965, Average Loss: 5.111, avg. samples / sec: 1036.74
Iteration:   4440, Loss function: 4.964, Average Loss: 5.107, avg. samples / sec: 1024.16
Iteration:   4460, Loss function: 5.257, Average Loss: 5.103, avg. samples / sec: 1041.48
Iteration:   4480, Loss function: 5.131, Average Loss: 5.100, avg. samples / sec: 1058.99
Iteration:   4500, Loss function: 4.916, Average Loss: 5.097, avg. samples / sec: 991.26
Iteration:   4520, Loss function: 4.712, Average Loss: 5.091, avg. samples / sec: 998.27
Iteration:   4540, Loss function: 5.045, Average Loss: 5.087, avg. samples / sec: 917.07
Iteration:   4560, Loss function: 4.687, Average Loss: 5.083, avg. samples / sec: 1007.71
Iteration:   4580, Loss function: 4.669, Average Loss: 5.081, avg. samples / sec: 1037.15
Iteration:   4600, Loss function: 4.913, Average Loss: 5.077, avg. samples / sec: 1034.73
Iteration:   4620, Loss function: 4.691, Average Loss: 5.073, avg. samples / sec: 954.43
Iteration:   4640, Loss function: 4.601, Average Loss: 5.068, avg. samples / sec: 929.27
Iteration:   4660, Loss function: 4.740, Average Loss: 5.065, avg. samples / sec: 990.10
Iteration:   4680, Loss function: 5.361, Average Loss: 5.061, avg. samples / sec: 1037.34
Iteration:   4700, Loss function: 4.572, Average Loss: 5.057, avg. samples / sec: 997.85
Iteration:   4720, Loss function: 4.842, Average Loss: 5.053, avg. samples / sec: 973.15
Iteration:   4740, Loss function: 4.652, Average Loss: 5.050, avg. samples / sec: 925.55
Iteration:   4760, Loss function: 4.572, Average Loss: 5.047, avg. samples / sec: 955.75
Iteration:   4780, Loss function: 5.074, Average Loss: 5.043, avg. samples / sec: 1060.84
Iteration:   4800, Loss function: 5.072, Average Loss: 5.040, avg. samples / sec: 987.94
Iteration:   4820, Loss function: 4.836, Average Loss: 5.037, avg. samples / sec: 947.45
Iteration:   4840, Loss function: 4.986, Average Loss: 5.033, avg. samples / sec: 967.69
Iteration:   4860, Loss function: 4.771, Average Loss: 5.029, avg. samples / sec: 1000.26
Iteration:   4880, Loss function: 5.175, Average Loss: 5.025, avg. samples / sec: 977.35
Iteration:   4900, Loss function: 4.714, Average Loss: 5.021, avg. samples / sec: 998.41
Iteration:   4920, Loss function: 4.719, Average Loss: 5.018, avg. samples / sec: 992.46
Iteration:   4940, Loss function: 4.679, Average Loss: 5.014, avg. samples / sec: 1036.56
Iteration:   4960, Loss function: 4.604, Average Loss: 5.010, avg. samples / sec: 1040.57
Iteration:   4980, Loss function: 4.697, Average Loss: 5.007, avg. samples / sec: 1003.63
Iteration:   5000, Loss function: 4.864, Average Loss: 5.004, avg. samples / sec: 1047.80
Iteration:   5020, Loss function: 5.039, Average Loss: 5.001, avg. samples / sec: 943.23
Iteration:   5040, Loss function: 4.861, Average Loss: 4.998, avg. samples / sec: 927.34
Iteration:   5060, Loss function: 4.810, Average Loss: 4.994, avg. samples / sec: 1047.99
Iteration:   5080, Loss function: 4.404, Average Loss: 4.990, avg. samples / sec: 1079.39
Iteration:   5100, Loss function: 4.819, Average Loss: 4.988, avg. samples / sec: 1081.18
Iteration:   5120, Loss function: 4.821, Average Loss: 4.985, avg. samples / sec: 1103.90
Iteration:   5140, Loss function: 4.903, Average Loss: 4.982, avg. samples / sec: 1204.04
:::MLLOG {"namespace": "", "time_ms": 1639753076062, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.63 s
:::MLLOG {"namespace": "", "time_ms": 1639753108780, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753108887, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753108895, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.09s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.966, Average Loss: 4.977, avg. samples / sec: 64.97
Iteration:   5180, Loss function: 4.744, Average Loss: 4.972, avg. samples / sec: 1202.08
DONE (t=3.35s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10476
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21439
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09350
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18564
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13550
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19866
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21053
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10476 AP goal: 0.10000
Iteration:   5200, Loss function: 4.704, Average Loss: 4.969, avg. samples / sec: 1237.40
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10475661481924115, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114609, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753114735, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753115
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:35 PM'
START TIMING RUN WAS 2021-12-17 02:47:16 PM
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:16 PM'
ENDING TIMING RUN AT 2021-12-17 02:58:35 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:35 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
+ result=679
RESULT,SINGLE_STAGE_DETECTOR,,679,nvidia,2021-12-17 02:47:16 PM
ALL FINISHED GPU: 1 x full x 8 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,679,nvidia,2021-12-17 02:47:16 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
