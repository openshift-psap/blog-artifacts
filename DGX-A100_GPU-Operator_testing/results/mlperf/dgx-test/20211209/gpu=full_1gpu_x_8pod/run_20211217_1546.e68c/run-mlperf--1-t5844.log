8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72).'
No MIG GPU available, using the full GPUs (GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72).
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752451
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:31 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:31 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:31 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in multi-gpu mode.'
Running in multi-gpu mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:31 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-t5844 to the sync file ...
Fri Dec 17 14:47:31 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
Running on all the 1 GPUs 
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752453802, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752453908, "event_type": "POINT_IN_TIME", "key": "seed", "value": 930299890, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 930299890
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752455529, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752455529, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752478337, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752478337, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752479575, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752479576, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752479852, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752479852, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752479854, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.214, Average Loss: 0.023, avg. samples / sec: 4.75
Iteration:     20, Loss function: 21.134, Average Loss: 0.461, avg. samples / sec: 804.67
Iteration:     40, Loss function: 20.695, Average Loss: 0.863, avg. samples / sec: 1099.73
Iteration:     60, Loss function: 20.441, Average Loss: 1.252, avg. samples / sec: 1060.36
Iteration:     80, Loss function: 19.921, Average Loss: 1.624, avg. samples / sec: 977.40
Iteration:    100, Loss function: 15.302, Average Loss: 1.949, avg. samples / sec: 979.87
Iteration:    120, Loss function: 11.084, Average Loss: 2.153, avg. samples / sec: 979.48
Iteration:    140, Loss function: 9.457, Average Loss: 2.308, avg. samples / sec: 980.15
Iteration:    160, Loss function: 9.214, Average Loss: 2.449, avg. samples / sec: 941.90
Iteration:    180, Loss function: 9.024, Average Loss: 2.579, avg. samples / sec: 979.26
Iteration:    200, Loss function: 8.554, Average Loss: 2.703, avg. samples / sec: 981.84
Iteration:    220, Loss function: 8.656, Average Loss: 2.824, avg. samples / sec: 1002.27
Iteration:    240, Loss function: 8.938, Average Loss: 2.945, avg. samples / sec: 1008.52
Iteration:    260, Loss function: 8.896, Average Loss: 3.061, avg. samples / sec: 1027.95
Iteration:    280, Loss function: 8.481, Average Loss: 3.172, avg. samples / sec: 899.99
Iteration:    300, Loss function: 8.339, Average Loss: 3.276, avg. samples / sec: 954.03
Iteration:    320, Loss function: 8.363, Average Loss: 3.376, avg. samples / sec: 967.06
Iteration:    340, Loss function: 8.445, Average Loss: 3.474, avg. samples / sec: 1037.77
Iteration:    360, Loss function: 8.020, Average Loss: 3.567, avg. samples / sec: 1065.11
Iteration:    380, Loss function: 8.094, Average Loss: 3.656, avg. samples / sec: 1001.10
Iteration:    400, Loss function: 8.030, Average Loss: 3.741, avg. samples / sec: 1054.88
Iteration:    420, Loss function: 7.733, Average Loss: 3.825, avg. samples / sec: 1009.82
Iteration:    440, Loss function: 7.814, Average Loss: 3.904, avg. samples / sec: 925.54
Iteration:    460, Loss function: 7.748, Average Loss: 3.980, avg. samples / sec: 958.88
Iteration:    480, Loss function: 7.556, Average Loss: 4.053, avg. samples / sec: 1018.44
Iteration:    500, Loss function: 7.464, Average Loss: 4.124, avg. samples / sec: 938.61
Iteration:    520, Loss function: 7.456, Average Loss: 4.192, avg. samples / sec: 998.02
Iteration:    540, Loss function: 7.486, Average Loss: 4.258, avg. samples / sec: 1034.62
Iteration:    560, Loss function: 7.129, Average Loss: 4.319, avg. samples / sec: 723.77
Iteration:    580, Loss function: 7.148, Average Loss: 4.380, avg. samples / sec: 1016.99
Iteration:    600, Loss function: 7.252, Average Loss: 4.440, avg. samples / sec: 997.36
Iteration:    620, Loss function: 6.988, Average Loss: 4.496, avg. samples / sec: 981.77
Iteration:    640, Loss function: 6.866, Average Loss: 4.550, avg. samples / sec: 899.33
Iteration:    660, Loss function: 7.000, Average Loss: 4.602, avg. samples / sec: 985.99
Iteration:    680, Loss function: 7.201, Average Loss: 4.653, avg. samples / sec: 1030.75
Iteration:    700, Loss function: 6.807, Average Loss: 4.700, avg. samples / sec: 1044.09
Iteration:    720, Loss function: 7.096, Average Loss: 4.748, avg. samples / sec: 1003.51
Iteration:    740, Loss function: 6.975, Average Loss: 4.791, avg. samples / sec: 974.45
Iteration:    760, Loss function: 7.027, Average Loss: 4.835, avg. samples / sec: 1050.41
Iteration:    780, Loss function: 6.764, Average Loss: 4.877, avg. samples / sec: 935.84
Iteration:    800, Loss function: 7.185, Average Loss: 4.917, avg. samples / sec: 981.26
Iteration:    820, Loss function: 6.666, Average Loss: 4.954, avg. samples / sec: 972.11
Iteration:    840, Loss function: 6.905, Average Loss: 4.990, avg. samples / sec: 926.31
Iteration:    860, Loss function: 6.890, Average Loss: 5.024, avg. samples / sec: 959.92
Iteration:    880, Loss function: 6.606, Average Loss: 5.056, avg. samples / sec: 1021.30
Iteration:    900, Loss function: 6.822, Average Loss: 5.087, avg. samples / sec: 951.29
Iteration:    920, Loss function: 6.602, Average Loss: 5.116, avg. samples / sec: 997.78
Iteration:    940, Loss function: 6.720, Average Loss: 5.146, avg. samples / sec: 1030.67
Iteration:    960, Loss function: 6.412, Average Loss: 5.174, avg. samples / sec: 956.91
Iteration:    980, Loss function: 6.683, Average Loss: 5.201, avg. samples / sec: 1068.79
Iteration:   1000, Loss function: 6.523, Average Loss: 5.226, avg. samples / sec: 989.77
Iteration:   1020, Loss function: 6.364, Average Loss: 5.250, avg. samples / sec: 998.47
:::MLLOG {"namespace": "", "time_ms": 1639752599572, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752599574, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.488, Average Loss: 5.274, avg. samples / sec: 994.17
Iteration:   1060, Loss function: 6.405, Average Loss: 5.296, avg. samples / sec: 954.24
Iteration:   1080, Loss function: 6.342, Average Loss: 5.317, avg. samples / sec: 1038.76
Iteration:   1100, Loss function: 6.170, Average Loss: 5.337, avg. samples / sec: 1086.32
Iteration:   1120, Loss function: 6.257, Average Loss: 5.355, avg. samples / sec: 1001.32
Iteration:   1140, Loss function: 6.471, Average Loss: 5.374, avg. samples / sec: 1066.69
Iteration:   1160, Loss function: 6.193, Average Loss: 5.392, avg. samples / sec: 966.00
Iteration:   1180, Loss function: 6.328, Average Loss: 5.408, avg. samples / sec: 987.69
Iteration:   1200, Loss function: 6.231, Average Loss: 5.425, avg. samples / sec: 893.50
Iteration:   1220, Loss function: 5.935, Average Loss: 5.439, avg. samples / sec: 935.58
Iteration:   1240, Loss function: 6.001, Average Loss: 5.451, avg. samples / sec: 1025.17
Iteration:   1260, Loss function: 6.068, Average Loss: 5.464, avg. samples / sec: 926.19
Iteration:   1280, Loss function: 5.909, Average Loss: 5.476, avg. samples / sec: 984.28
Iteration:   1300, Loss function: 6.267, Average Loss: 5.490, avg. samples / sec: 1021.98
Iteration:   1320, Loss function: 6.079, Average Loss: 5.502, avg. samples / sec: 1072.79
Iteration:   1340, Loss function: 6.032, Average Loss: 5.512, avg. samples / sec: 1097.81
Iteration:   1360, Loss function: 6.046, Average Loss: 5.521, avg. samples / sec: 1010.84
Iteration:   1380, Loss function: 6.276, Average Loss: 5.531, avg. samples / sec: 995.22
Iteration:   1400, Loss function: 6.213, Average Loss: 5.540, avg. samples / sec: 990.66
Iteration:   1420, Loss function: 5.952, Average Loss: 5.549, avg. samples / sec: 1016.65
Iteration:   1440, Loss function: 6.259, Average Loss: 5.557, avg. samples / sec: 980.60
Iteration:   1460, Loss function: 6.095, Average Loss: 5.565, avg. samples / sec: 1006.31
Iteration:   1480, Loss function: 5.951, Average Loss: 5.573, avg. samples / sec: 980.80
Iteration:   1500, Loss function: 6.039, Average Loss: 5.581, avg. samples / sec: 987.03
Iteration:   1520, Loss function: 6.024, Average Loss: 5.586, avg. samples / sec: 960.34
Iteration:   1540, Loss function: 5.915, Average Loss: 5.589, avg. samples / sec: 1031.63
Iteration:   1560, Loss function: 5.711, Average Loss: 5.592, avg. samples / sec: 964.83
Iteration:   1580, Loss function: 5.704, Average Loss: 5.597, avg. samples / sec: 1045.09
Iteration:   1600, Loss function: 6.157, Average Loss: 5.603, avg. samples / sec: 1054.90
Iteration:   1620, Loss function: 5.621, Average Loss: 5.607, avg. samples / sec: 1001.97
Iteration:   1640, Loss function: 5.929, Average Loss: 5.611, avg. samples / sec: 1022.11
Iteration:   1660, Loss function: 6.022, Average Loss: 5.616, avg. samples / sec: 1056.09
Iteration:   1680, Loss function: 5.590, Average Loss: 5.618, avg. samples / sec: 1005.51
Iteration:   1700, Loss function: 5.286, Average Loss: 5.621, avg. samples / sec: 939.27
Iteration:   1720, Loss function: 5.743, Average Loss: 5.623, avg. samples / sec: 937.33
Iteration:   1740, Loss function: 5.913, Average Loss: 5.625, avg. samples / sec: 1005.59
Iteration:   1760, Loss function: 5.390, Average Loss: 5.626, avg. samples / sec: 1036.48
Iteration:   1780, Loss function: 5.726, Average Loss: 5.627, avg. samples / sec: 973.68
Iteration:   1800, Loss function: 5.553, Average Loss: 5.631, avg. samples / sec: 1091.94
Iteration:   1820, Loss function: 6.044, Average Loss: 5.633, avg. samples / sec: 1025.12
Iteration:   1840, Loss function: 5.941, Average Loss: 5.634, avg. samples / sec: 1053.16
Iteration:   1860, Loss function: 5.711, Average Loss: 5.633, avg. samples / sec: 896.57
Iteration:   1880, Loss function: 5.738, Average Loss: 5.635, avg. samples / sec: 1023.01
Iteration:   1900, Loss function: 5.764, Average Loss: 5.636, avg. samples / sec: 1003.94
Iteration:   1920, Loss function: 5.582, Average Loss: 5.635, avg. samples / sec: 945.33
Iteration:   1940, Loss function: 5.766, Average Loss: 5.634, avg. samples / sec: 989.39
Iteration:   1960, Loss function: 5.477, Average Loss: 5.633, avg. samples / sec: 1079.10
Iteration:   1980, Loss function: 5.684, Average Loss: 5.632, avg. samples / sec: 1019.24
Iteration:   2000, Loss function: 5.652, Average Loss: 5.631, avg. samples / sec: 977.55
Iteration:   2020, Loss function: 5.587, Average Loss: 5.630, avg. samples / sec: 961.28
Iteration:   2040, Loss function: 5.773, Average Loss: 5.630, avg. samples / sec: 953.91
:::MLLOG {"namespace": "", "time_ms": 1639752716938, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752716940, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.366, Average Loss: 5.627, avg. samples / sec: 1002.94
Iteration:   2080, Loss function: 5.120, Average Loss: 5.625, avg. samples / sec: 996.43
Iteration:   2100, Loss function: 5.666, Average Loss: 5.624, avg. samples / sec: 1051.55
Iteration:   2120, Loss function: 5.257, Average Loss: 5.621, avg. samples / sec: 1003.21
Iteration:   2140, Loss function: 5.405, Average Loss: 5.618, avg. samples / sec: 966.32
Iteration:   2160, Loss function: 5.468, Average Loss: 5.615, avg. samples / sec: 1017.45
Iteration:   2180, Loss function: 5.312, Average Loss: 5.613, avg. samples / sec: 1031.87
Iteration:   2200, Loss function: 5.492, Average Loss: 5.609, avg. samples / sec: 1010.86
Iteration:   2220, Loss function: 5.408, Average Loss: 5.607, avg. samples / sec: 982.82
Iteration:   2240, Loss function: 5.293, Average Loss: 5.604, avg. samples / sec: 992.96
Iteration:   2260, Loss function: 5.271, Average Loss: 5.600, avg. samples / sec: 1027.59
Iteration:   2280, Loss function: 5.337, Average Loss: 5.598, avg. samples / sec: 977.40
Iteration:   2300, Loss function: 5.239, Average Loss: 5.595, avg. samples / sec: 1010.90
Iteration:   2320, Loss function: 5.361, Average Loss: 5.592, avg. samples / sec: 992.85
Iteration:   2340, Loss function: 5.359, Average Loss: 5.589, avg. samples / sec: 1056.96
Iteration:   2360, Loss function: 5.313, Average Loss: 5.585, avg. samples / sec: 967.60
Iteration:   2380, Loss function: 5.389, Average Loss: 5.581, avg. samples / sec: 939.34
Iteration:   2400, Loss function: 5.617, Average Loss: 5.577, avg. samples / sec: 924.97
Iteration:   2420, Loss function: 5.361, Average Loss: 5.572, avg. samples / sec: 982.78
Iteration:   2440, Loss function: 5.463, Average Loss: 5.570, avg. samples / sec: 990.11
Iteration:   2460, Loss function: 5.400, Average Loss: 5.567, avg. samples / sec: 1011.47
Iteration:   2480, Loss function: 5.398, Average Loss: 5.563, avg. samples / sec: 975.16
Iteration:   2500, Loss function: 5.403, Average Loss: 5.559, avg. samples / sec: 967.11
Iteration:   2520, Loss function: 5.292, Average Loss: 5.553, avg. samples / sec: 1004.16
Iteration:   2540, Loss function: 5.379, Average Loss: 5.550, avg. samples / sec: 1027.46
Iteration:   2560, Loss function: 5.267, Average Loss: 5.547, avg. samples / sec: 989.52
Iteration:   2580, Loss function: 5.260, Average Loss: 5.544, avg. samples / sec: 955.72
Iteration:   2600, Loss function: 5.436, Average Loss: 5.542, avg. samples / sec: 962.46
Iteration:   2620, Loss function: 5.632, Average Loss: 5.538, avg. samples / sec: 901.42
Iteration:   2640, Loss function: 5.169, Average Loss: 5.535, avg. samples / sec: 918.12
Iteration:   2660, Loss function: 5.132, Average Loss: 5.532, avg. samples / sec: 981.59
Iteration:   2680, Loss function: 5.045, Average Loss: 5.529, avg. samples / sec: 933.19
Iteration:   2700, Loss function: 5.133, Average Loss: 5.524, avg. samples / sec: 1027.26
Iteration:   2720, Loss function: 5.290, Average Loss: 5.519, avg. samples / sec: 1011.88
Iteration:   2740, Loss function: 4.972, Average Loss: 5.515, avg. samples / sec: 959.87
Iteration:   2760, Loss function: 4.858, Average Loss: 5.510, avg. samples / sec: 1026.42
Iteration:   2780, Loss function: 5.633, Average Loss: 5.506, avg. samples / sec: 1019.24
Iteration:   2800, Loss function: 5.315, Average Loss: 5.502, avg. samples / sec: 1018.76
Iteration:   2820, Loss function: 5.294, Average Loss: 5.499, avg. samples / sec: 1005.61
Iteration:   2840, Loss function: 5.303, Average Loss: 5.495, avg. samples / sec: 957.05
Iteration:   2860, Loss function: 5.005, Average Loss: 5.490, avg. samples / sec: 977.45
Iteration:   2880, Loss function: 5.173, Average Loss: 5.484, avg. samples / sec: 982.61
Iteration:   2900, Loss function: 4.950, Average Loss: 5.480, avg. samples / sec: 1020.86
Iteration:   2920, Loss function: 5.061, Average Loss: 5.474, avg. samples / sec: 950.88
Iteration:   2940, Loss function: 5.093, Average Loss: 5.469, avg. samples / sec: 994.25
Iteration:   2960, Loss function: 5.337, Average Loss: 5.465, avg. samples / sec: 1013.88
Iteration:   2980, Loss function: 5.370, Average Loss: 5.461, avg. samples / sec: 951.60
Iteration:   3000, Loss function: 5.083, Average Loss: 5.455, avg. samples / sec: 1034.96
Iteration:   3020, Loss function: 5.370, Average Loss: 5.449, avg. samples / sec: 951.98
Iteration:   3040, Loss function: 5.314, Average Loss: 5.445, avg. samples / sec: 865.70
Iteration:   3060, Loss function: 5.057, Average Loss: 5.440, avg. samples / sec: 943.54
Iteration:   3080, Loss function: 4.957, Average Loss: 5.434, avg. samples / sec: 1032.03
:::MLLOG {"namespace": "", "time_ms": 1639752835990, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752835992, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.337, Average Loss: 5.429, avg. samples / sec: 1028.24
Iteration:   3120, Loss function: 5.112, Average Loss: 5.423, avg. samples / sec: 1008.64
Iteration:   3140, Loss function: 5.105, Average Loss: 5.419, avg. samples / sec: 1024.27
Iteration:   3160, Loss function: 5.481, Average Loss: 5.414, avg. samples / sec: 1007.55
Iteration:   3180, Loss function: 4.962, Average Loss: 5.410, avg. samples / sec: 986.31
Iteration:   3200, Loss function: 5.247, Average Loss: 5.404, avg. samples / sec: 972.88
Iteration:   3220, Loss function: 4.919, Average Loss: 5.398, avg. samples / sec: 1063.46
Iteration:   3240, Loss function: 5.250, Average Loss: 5.392, avg. samples / sec: 980.03
Iteration:   3260, Loss function: 5.114, Average Loss: 5.387, avg. samples / sec: 967.30
Iteration:   3280, Loss function: 4.843, Average Loss: 5.381, avg. samples / sec: 1037.06
Iteration:   3300, Loss function: 4.883, Average Loss: 5.375, avg. samples / sec: 962.96
Iteration:   3320, Loss function: 4.952, Average Loss: 5.371, avg. samples / sec: 1036.21
Iteration:   3340, Loss function: 5.251, Average Loss: 5.367, avg. samples / sec: 988.94
Iteration:   3360, Loss function: 5.148, Average Loss: 5.361, avg. samples / sec: 1027.03
Iteration:   3380, Loss function: 5.172, Average Loss: 5.354, avg. samples / sec: 950.31
Iteration:   3400, Loss function: 4.932, Average Loss: 5.349, avg. samples / sec: 1007.38
Iteration:   3420, Loss function: 5.095, Average Loss: 5.344, avg. samples / sec: 974.02
Iteration:   3440, Loss function: 4.880, Average Loss: 5.339, avg. samples / sec: 989.90
Iteration:   3460, Loss function: 5.342, Average Loss: 5.334, avg. samples / sec: 1053.85
Iteration:   3480, Loss function: 5.193, Average Loss: 5.330, avg. samples / sec: 1008.73
Iteration:   3500, Loss function: 5.155, Average Loss: 5.325, avg. samples / sec: 1026.89
Iteration:   3520, Loss function: 5.084, Average Loss: 5.322, avg. samples / sec: 1024.42
Iteration:   3540, Loss function: 5.074, Average Loss: 5.317, avg. samples / sec: 970.96
Iteration:   3560, Loss function: 4.895, Average Loss: 5.314, avg. samples / sec: 1023.28
Iteration:   3580, Loss function: 5.210, Average Loss: 5.309, avg. samples / sec: 912.23
Iteration:   3600, Loss function: 5.105, Average Loss: 5.302, avg. samples / sec: 1032.22
Iteration:   3620, Loss function: 4.789, Average Loss: 5.298, avg. samples / sec: 941.08
Iteration:   3640, Loss function: 4.896, Average Loss: 5.293, avg. samples / sec: 1004.70
Iteration:   3660, Loss function: 5.198, Average Loss: 5.288, avg. samples / sec: 967.22
Iteration:   3680, Loss function: 5.184, Average Loss: 5.282, avg. samples / sec: 928.81
Iteration:   3700, Loss function: 4.990, Average Loss: 5.277, avg. samples / sec: 1001.81
Iteration:   3720, Loss function: 4.866, Average Loss: 5.271, avg. samples / sec: 900.95
Iteration:   3740, Loss function: 4.983, Average Loss: 5.266, avg. samples / sec: 977.07
Iteration:   3760, Loss function: 5.044, Average Loss: 5.262, avg. samples / sec: 981.99
Iteration:   3780, Loss function: 4.978, Average Loss: 5.256, avg. samples / sec: 1002.36
Iteration:   3800, Loss function: 5.107, Average Loss: 5.253, avg. samples / sec: 999.08
Iteration:   3820, Loss function: 5.178, Average Loss: 5.248, avg. samples / sec: 1062.85
Iteration:   3840, Loss function: 4.597, Average Loss: 5.243, avg. samples / sec: 1024.92
Iteration:   3860, Loss function: 4.779, Average Loss: 5.238, avg. samples / sec: 1029.36
Iteration:   3880, Loss function: 4.936, Average Loss: 5.231, avg. samples / sec: 1031.23
Iteration:   3900, Loss function: 5.164, Average Loss: 5.227, avg. samples / sec: 1020.52
Iteration:   3920, Loss function: 5.183, Average Loss: 5.222, avg. samples / sec: 1035.45
Iteration:   3940, Loss function: 5.025, Average Loss: 5.217, avg. samples / sec: 1031.55
Iteration:   3960, Loss function: 4.792, Average Loss: 5.213, avg. samples / sec: 1017.11
Iteration:   3980, Loss function: 4.786, Average Loss: 5.208, avg. samples / sec: 1070.53
Iteration:   4000, Loss function: 5.105, Average Loss: 5.204, avg. samples / sec: 1015.42
Iteration:   4020, Loss function: 5.060, Average Loss: 5.199, avg. samples / sec: 1028.91
Iteration:   4040, Loss function: 5.170, Average Loss: 5.195, avg. samples / sec: 998.88
Iteration:   4060, Loss function: 5.273, Average Loss: 5.192, avg. samples / sec: 1008.49
Iteration:   4080, Loss function: 5.166, Average Loss: 5.187, avg. samples / sec: 962.65
Iteration:   4100, Loss function: 5.211, Average Loss: 5.184, avg. samples / sec: 1061.20
:::MLLOG {"namespace": "", "time_ms": 1639752953073, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953074, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.999, Average Loss: 5.179, avg. samples / sec: 1056.19
Iteration:   4140, Loss function: 5.088, Average Loss: 5.175, avg. samples / sec: 1012.65
Iteration:   4160, Loss function: 4.913, Average Loss: 5.169, avg. samples / sec: 1030.05
Iteration:   4180, Loss function: 4.861, Average Loss: 5.163, avg. samples / sec: 1025.43
Iteration:   4200, Loss function: 4.758, Average Loss: 5.158, avg. samples / sec: 995.05
Iteration:   4220, Loss function: 4.723, Average Loss: 5.154, avg. samples / sec: 980.93
Iteration:   4240, Loss function: 4.821, Average Loss: 5.149, avg. samples / sec: 1013.92
Iteration:   4260, Loss function: 5.054, Average Loss: 5.145, avg. samples / sec: 963.42
Iteration:   4280, Loss function: 4.806, Average Loss: 5.138, avg. samples / sec: 989.67
Iteration:   4300, Loss function: 4.833, Average Loss: 5.132, avg. samples / sec: 1007.53
Iteration:   4320, Loss function: 4.842, Average Loss: 5.128, avg. samples / sec: 990.23
Iteration:   4340, Loss function: 4.737, Average Loss: 5.123, avg. samples / sec: 975.46
Iteration:   4360, Loss function: 4.971, Average Loss: 5.118, avg. samples / sec: 1034.52
Iteration:   4380, Loss function: 4.935, Average Loss: 5.114, avg. samples / sec: 999.79
Iteration:   4400, Loss function: 4.716, Average Loss: 5.108, avg. samples / sec: 960.65
Iteration:   4420, Loss function: 4.814, Average Loss: 5.103, avg. samples / sec: 949.78
Iteration:   4440, Loss function: 4.863, Average Loss: 5.098, avg. samples / sec: 975.60
Iteration:   4460, Loss function: 5.074, Average Loss: 5.094, avg. samples / sec: 1035.46
Iteration:   4480, Loss function: 4.954, Average Loss: 5.090, avg. samples / sec: 982.25
Iteration:   4500, Loss function: 4.824, Average Loss: 5.087, avg. samples / sec: 949.88
Iteration:   4520, Loss function: 4.706, Average Loss: 5.082, avg. samples / sec: 982.16
Iteration:   4540, Loss function: 5.081, Average Loss: 5.079, avg. samples / sec: 1041.67
Iteration:   4560, Loss function: 4.889, Average Loss: 5.075, avg. samples / sec: 975.03
Iteration:   4580, Loss function: 4.818, Average Loss: 5.072, avg. samples / sec: 982.23
Iteration:   4600, Loss function: 4.856, Average Loss: 5.069, avg. samples / sec: 965.43
Iteration:   4620, Loss function: 4.699, Average Loss: 5.064, avg. samples / sec: 940.28
Iteration:   4640, Loss function: 4.845, Average Loss: 5.059, avg. samples / sec: 952.28
Iteration:   4660, Loss function: 4.708, Average Loss: 5.055, avg. samples / sec: 1017.48
Iteration:   4680, Loss function: 5.216, Average Loss: 5.051, avg. samples / sec: 1038.23
Iteration:   4700, Loss function: 4.855, Average Loss: 5.048, avg. samples / sec: 980.84
Iteration:   4720, Loss function: 4.532, Average Loss: 5.044, avg. samples / sec: 955.77
Iteration:   4740, Loss function: 4.824, Average Loss: 5.040, avg. samples / sec: 941.99
Iteration:   4760, Loss function: 4.643, Average Loss: 5.037, avg. samples / sec: 999.23
Iteration:   4780, Loss function: 5.100, Average Loss: 5.033, avg. samples / sec: 1004.04
Iteration:   4800, Loss function: 4.981, Average Loss: 5.031, avg. samples / sec: 902.34
Iteration:   4820, Loss function: 4.762, Average Loss: 5.028, avg. samples / sec: 993.83
Iteration:   4840, Loss function: 5.064, Average Loss: 5.024, avg. samples / sec: 922.08
Iteration:   4860, Loss function: 4.720, Average Loss: 5.020, avg. samples / sec: 1046.17
Iteration:   4880, Loss function: 5.083, Average Loss: 5.017, avg. samples / sec: 942.01
Iteration:   4900, Loss function: 4.657, Average Loss: 5.013, avg. samples / sec: 985.89
Iteration:   4920, Loss function: 4.844, Average Loss: 5.010, avg. samples / sec: 1046.32
Iteration:   4940, Loss function: 4.753, Average Loss: 5.006, avg. samples / sec: 961.74
Iteration:   4960, Loss function: 4.753, Average Loss: 5.003, avg. samples / sec: 1004.49
Iteration:   4980, Loss function: 4.617, Average Loss: 4.999, avg. samples / sec: 1007.87
Iteration:   5000, Loss function: 5.106, Average Loss: 4.995, avg. samples / sec: 1039.36
Iteration:   5020, Loss function: 5.135, Average Loss: 4.993, avg. samples / sec: 966.86
Iteration:   5040, Loss function: 4.811, Average Loss: 4.989, avg. samples / sec: 992.47
Iteration:   5060, Loss function: 4.724, Average Loss: 4.986, avg. samples / sec: 965.83
Iteration:   5080, Loss function: 4.469, Average Loss: 4.983, avg. samples / sec: 969.76
Iteration:   5100, Loss function: 4.676, Average Loss: 4.982, avg. samples / sec: 982.94
Iteration:   5120, Loss function: 4.608, Average Loss: 4.979, avg. samples / sec: 997.15
Iteration:   5140, Loss function: 4.720, Average Loss: 4.975, avg. samples / sec: 1030.88
:::MLLOG {"namespace": "", "time_ms": 1639753071800, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.65 s
:::MLLOG {"namespace": "", "time_ms": 1639753103538, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753103583, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103583, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.78s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.741, Average Loss: 4.970, avg. samples / sec: 67.53
Iteration:   5180, Loss function: 4.790, Average Loss: 4.966, avg. samples / sec: 1160.49
Iteration:   5200, Loss function: 4.715, Average Loss: 4.962, avg. samples / sec: 1065.95
DONE (t=4.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10665
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21792
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09489
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18887
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20115
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10665 AP goal: 0.10000
Iteration:   5220, Loss function: 4.505, Average Loss: 4.957, avg. samples / sec: 1089.96
:::MLLOG {"namespace": "", "time_ms": 1639753111430, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111431, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10664656277698743, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111431, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111682, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:33 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:33 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752453802, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752453908, "event_type": "POINT_IN_TIME", "key": "seed", "value": 930299890, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 930299890
:::MLLOG {"namespace": "", "time_ms": 1639752455529, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752455529, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752455533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752478337, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752478337, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752479575, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752479576, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752479852, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752479852, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752479854, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.214, Average Loss: 0.023, avg. samples / sec: 4.75
Iteration:     20, Loss function: 21.134, Average Loss: 0.461, avg. samples / sec: 804.67
Iteration:     40, Loss function: 20.695, Average Loss: 0.863, avg. samples / sec: 1099.73
Iteration:     60, Loss function: 20.441, Average Loss: 1.252, avg. samples / sec: 1060.36
Iteration:     80, Loss function: 19.921, Average Loss: 1.624, avg. samples / sec: 977.40
Iteration:    100, Loss function: 15.302, Average Loss: 1.949, avg. samples / sec: 979.87
Iteration:    120, Loss function: 11.084, Average Loss: 2.153, avg. samples / sec: 979.48
Iteration:    140, Loss function: 9.457, Average Loss: 2.308, avg. samples / sec: 980.15
Iteration:    160, Loss function: 9.214, Average Loss: 2.449, avg. samples / sec: 941.90
Iteration:    180, Loss function: 9.024, Average Loss: 2.579, avg. samples / sec: 979.26
Iteration:    200, Loss function: 8.554, Average Loss: 2.703, avg. samples / sec: 981.84
Iteration:    220, Loss function: 8.656, Average Loss: 2.824, avg. samples / sec: 1002.27
Iteration:    240, Loss function: 8.938, Average Loss: 2.945, avg. samples / sec: 1008.52
Iteration:    260, Loss function: 8.896, Average Loss: 3.061, avg. samples / sec: 1027.95
Iteration:    280, Loss function: 8.481, Average Loss: 3.172, avg. samples / sec: 899.99
Iteration:    300, Loss function: 8.339, Average Loss: 3.276, avg. samples / sec: 954.03
Iteration:    320, Loss function: 8.363, Average Loss: 3.376, avg. samples / sec: 967.06
Iteration:    340, Loss function: 8.445, Average Loss: 3.474, avg. samples / sec: 1037.77
Iteration:    360, Loss function: 8.020, Average Loss: 3.567, avg. samples / sec: 1065.11
Iteration:    380, Loss function: 8.094, Average Loss: 3.656, avg. samples / sec: 1001.10
Iteration:    400, Loss function: 8.030, Average Loss: 3.741, avg. samples / sec: 1054.88
Iteration:    420, Loss function: 7.733, Average Loss: 3.825, avg. samples / sec: 1009.82
Iteration:    440, Loss function: 7.814, Average Loss: 3.904, avg. samples / sec: 925.54
Iteration:    460, Loss function: 7.748, Average Loss: 3.980, avg. samples / sec: 958.88
Iteration:    480, Loss function: 7.556, Average Loss: 4.053, avg. samples / sec: 1018.44
Iteration:    500, Loss function: 7.464, Average Loss: 4.124, avg. samples / sec: 938.61
Iteration:    520, Loss function: 7.456, Average Loss: 4.192, avg. samples / sec: 998.02
Iteration:    540, Loss function: 7.486, Average Loss: 4.258, avg. samples / sec: 1034.62
Iteration:    560, Loss function: 7.129, Average Loss: 4.319, avg. samples / sec: 723.77
Iteration:    580, Loss function: 7.148, Average Loss: 4.380, avg. samples / sec: 1016.99
Iteration:    600, Loss function: 7.252, Average Loss: 4.440, avg. samples / sec: 997.36
Iteration:    620, Loss function: 6.988, Average Loss: 4.496, avg. samples / sec: 981.77
Iteration:    640, Loss function: 6.866, Average Loss: 4.550, avg. samples / sec: 899.33
Iteration:    660, Loss function: 7.000, Average Loss: 4.602, avg. samples / sec: 985.99
Iteration:    680, Loss function: 7.201, Average Loss: 4.653, avg. samples / sec: 1030.75
Iteration:    700, Loss function: 6.807, Average Loss: 4.700, avg. samples / sec: 1044.09
Iteration:    720, Loss function: 7.096, Average Loss: 4.748, avg. samples / sec: 1003.51
Iteration:    740, Loss function: 6.975, Average Loss: 4.791, avg. samples / sec: 974.45
Iteration:    760, Loss function: 7.027, Average Loss: 4.835, avg. samples / sec: 1050.41
Iteration:    780, Loss function: 6.764, Average Loss: 4.877, avg. samples / sec: 935.84
Iteration:    800, Loss function: 7.185, Average Loss: 4.917, avg. samples / sec: 981.26
Iteration:    820, Loss function: 6.666, Average Loss: 4.954, avg. samples / sec: 972.11
Iteration:    840, Loss function: 6.905, Average Loss: 4.990, avg. samples / sec: 926.31
Iteration:    860, Loss function: 6.890, Average Loss: 5.024, avg. samples / sec: 959.92
Iteration:    880, Loss function: 6.606, Average Loss: 5.056, avg. samples / sec: 1021.30
Iteration:    900, Loss function: 6.822, Average Loss: 5.087, avg. samples / sec: 951.29
Iteration:    920, Loss function: 6.602, Average Loss: 5.116, avg. samples / sec: 997.78
Iteration:    940, Loss function: 6.720, Average Loss: 5.146, avg. samples / sec: 1030.67
Iteration:    960, Loss function: 6.412, Average Loss: 5.174, avg. samples / sec: 956.91
Iteration:    980, Loss function: 6.683, Average Loss: 5.201, avg. samples / sec: 1068.79
Iteration:   1000, Loss function: 6.523, Average Loss: 5.226, avg. samples / sec: 989.77
Iteration:   1020, Loss function: 6.364, Average Loss: 5.250, avg. samples / sec: 998.47
:::MLLOG {"namespace": "", "time_ms": 1639752599572, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752599574, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.488, Average Loss: 5.274, avg. samples / sec: 994.17
Iteration:   1060, Loss function: 6.405, Average Loss: 5.296, avg. samples / sec: 954.24
Iteration:   1080, Loss function: 6.342, Average Loss: 5.317, avg. samples / sec: 1038.76
Iteration:   1100, Loss function: 6.170, Average Loss: 5.337, avg. samples / sec: 1086.32
Iteration:   1120, Loss function: 6.257, Average Loss: 5.355, avg. samples / sec: 1001.32
Iteration:   1140, Loss function: 6.471, Average Loss: 5.374, avg. samples / sec: 1066.69
Iteration:   1160, Loss function: 6.193, Average Loss: 5.392, avg. samples / sec: 966.00
Iteration:   1180, Loss function: 6.328, Average Loss: 5.408, avg. samples / sec: 987.69
Iteration:   1200, Loss function: 6.231, Average Loss: 5.425, avg. samples / sec: 893.50
Iteration:   1220, Loss function: 5.935, Average Loss: 5.439, avg. samples / sec: 935.58
Iteration:   1240, Loss function: 6.001, Average Loss: 5.451, avg. samples / sec: 1025.17
Iteration:   1260, Loss function: 6.068, Average Loss: 5.464, avg. samples / sec: 926.19
Iteration:   1280, Loss function: 5.909, Average Loss: 5.476, avg. samples / sec: 984.28
Iteration:   1300, Loss function: 6.267, Average Loss: 5.490, avg. samples / sec: 1021.98
Iteration:   1320, Loss function: 6.079, Average Loss: 5.502, avg. samples / sec: 1072.79
Iteration:   1340, Loss function: 6.032, Average Loss: 5.512, avg. samples / sec: 1097.81
Iteration:   1360, Loss function: 6.046, Average Loss: 5.521, avg. samples / sec: 1010.84
Iteration:   1380, Loss function: 6.276, Average Loss: 5.531, avg. samples / sec: 995.22
Iteration:   1400, Loss function: 6.213, Average Loss: 5.540, avg. samples / sec: 990.66
Iteration:   1420, Loss function: 5.952, Average Loss: 5.549, avg. samples / sec: 1016.65
Iteration:   1440, Loss function: 6.259, Average Loss: 5.557, avg. samples / sec: 980.60
Iteration:   1460, Loss function: 6.095, Average Loss: 5.565, avg. samples / sec: 1006.31
Iteration:   1480, Loss function: 5.951, Average Loss: 5.573, avg. samples / sec: 980.80
Iteration:   1500, Loss function: 6.039, Average Loss: 5.581, avg. samples / sec: 987.03
Iteration:   1520, Loss function: 6.024, Average Loss: 5.586, avg. samples / sec: 960.34
Iteration:   1540, Loss function: 5.915, Average Loss: 5.589, avg. samples / sec: 1031.63
Iteration:   1560, Loss function: 5.711, Average Loss: 5.592, avg. samples / sec: 964.83
Iteration:   1580, Loss function: 5.704, Average Loss: 5.597, avg. samples / sec: 1045.09
Iteration:   1600, Loss function: 6.157, Average Loss: 5.603, avg. samples / sec: 1054.90
Iteration:   1620, Loss function: 5.621, Average Loss: 5.607, avg. samples / sec: 1001.97
Iteration:   1640, Loss function: 5.929, Average Loss: 5.611, avg. samples / sec: 1022.11
Iteration:   1660, Loss function: 6.022, Average Loss: 5.616, avg. samples / sec: 1056.09
Iteration:   1680, Loss function: 5.590, Average Loss: 5.618, avg. samples / sec: 1005.51
Iteration:   1700, Loss function: 5.286, Average Loss: 5.621, avg. samples / sec: 939.27
Iteration:   1720, Loss function: 5.743, Average Loss: 5.623, avg. samples / sec: 937.33
Iteration:   1740, Loss function: 5.913, Average Loss: 5.625, avg. samples / sec: 1005.59
Iteration:   1760, Loss function: 5.390, Average Loss: 5.626, avg. samples / sec: 1036.48
Iteration:   1780, Loss function: 5.726, Average Loss: 5.627, avg. samples / sec: 973.68
Iteration:   1800, Loss function: 5.553, Average Loss: 5.631, avg. samples / sec: 1091.94
Iteration:   1820, Loss function: 6.044, Average Loss: 5.633, avg. samples / sec: 1025.12
Iteration:   1840, Loss function: 5.941, Average Loss: 5.634, avg. samples / sec: 1053.16
Iteration:   1860, Loss function: 5.711, Average Loss: 5.633, avg. samples / sec: 896.57
Iteration:   1880, Loss function: 5.738, Average Loss: 5.635, avg. samples / sec: 1023.01
Iteration:   1900, Loss function: 5.764, Average Loss: 5.636, avg. samples / sec: 1003.94
Iteration:   1920, Loss function: 5.582, Average Loss: 5.635, avg. samples / sec: 945.33
Iteration:   1940, Loss function: 5.766, Average Loss: 5.634, avg. samples / sec: 989.39
Iteration:   1960, Loss function: 5.477, Average Loss: 5.633, avg. samples / sec: 1079.10
Iteration:   1980, Loss function: 5.684, Average Loss: 5.632, avg. samples / sec: 1019.24
Iteration:   2000, Loss function: 5.652, Average Loss: 5.631, avg. samples / sec: 977.55
Iteration:   2020, Loss function: 5.587, Average Loss: 5.630, avg. samples / sec: 961.28
Iteration:   2040, Loss function: 5.773, Average Loss: 5.630, avg. samples / sec: 953.91
:::MLLOG {"namespace": "", "time_ms": 1639752716938, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752716940, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.366, Average Loss: 5.627, avg. samples / sec: 1002.94
Iteration:   2080, Loss function: 5.120, Average Loss: 5.625, avg. samples / sec: 996.43
Iteration:   2100, Loss function: 5.666, Average Loss: 5.624, avg. samples / sec: 1051.55
Iteration:   2120, Loss function: 5.257, Average Loss: 5.621, avg. samples / sec: 1003.21
Iteration:   2140, Loss function: 5.405, Average Loss: 5.618, avg. samples / sec: 966.32
Iteration:   2160, Loss function: 5.468, Average Loss: 5.615, avg. samples / sec: 1017.45
Iteration:   2180, Loss function: 5.312, Average Loss: 5.613, avg. samples / sec: 1031.87
Iteration:   2200, Loss function: 5.492, Average Loss: 5.609, avg. samples / sec: 1010.86
Iteration:   2220, Loss function: 5.408, Average Loss: 5.607, avg. samples / sec: 982.82
Iteration:   2240, Loss function: 5.293, Average Loss: 5.604, avg. samples / sec: 992.96
Iteration:   2260, Loss function: 5.271, Average Loss: 5.600, avg. samples / sec: 1027.59
Iteration:   2280, Loss function: 5.337, Average Loss: 5.598, avg. samples / sec: 977.40
Iteration:   2300, Loss function: 5.239, Average Loss: 5.595, avg. samples / sec: 1010.90
Iteration:   2320, Loss function: 5.361, Average Loss: 5.592, avg. samples / sec: 992.85
Iteration:   2340, Loss function: 5.359, Average Loss: 5.589, avg. samples / sec: 1056.96
Iteration:   2360, Loss function: 5.313, Average Loss: 5.585, avg. samples / sec: 967.60
Iteration:   2380, Loss function: 5.389, Average Loss: 5.581, avg. samples / sec: 939.34
Iteration:   2400, Loss function: 5.617, Average Loss: 5.577, avg. samples / sec: 924.97
Iteration:   2420, Loss function: 5.361, Average Loss: 5.572, avg. samples / sec: 982.78
Iteration:   2440, Loss function: 5.463, Average Loss: 5.570, avg. samples / sec: 990.11
Iteration:   2460, Loss function: 5.400, Average Loss: 5.567, avg. samples / sec: 1011.47
Iteration:   2480, Loss function: 5.398, Average Loss: 5.563, avg. samples / sec: 975.16
Iteration:   2500, Loss function: 5.403, Average Loss: 5.559, avg. samples / sec: 967.11
Iteration:   2520, Loss function: 5.292, Average Loss: 5.553, avg. samples / sec: 1004.16
Iteration:   2540, Loss function: 5.379, Average Loss: 5.550, avg. samples / sec: 1027.46
Iteration:   2560, Loss function: 5.267, Average Loss: 5.547, avg. samples / sec: 989.52
Iteration:   2580, Loss function: 5.260, Average Loss: 5.544, avg. samples / sec: 955.72
Iteration:   2600, Loss function: 5.436, Average Loss: 5.542, avg. samples / sec: 962.46
Iteration:   2620, Loss function: 5.632, Average Loss: 5.538, avg. samples / sec: 901.42
Iteration:   2640, Loss function: 5.169, Average Loss: 5.535, avg. samples / sec: 918.12
Iteration:   2660, Loss function: 5.132, Average Loss: 5.532, avg. samples / sec: 981.59
Iteration:   2680, Loss function: 5.045, Average Loss: 5.529, avg. samples / sec: 933.19
Iteration:   2700, Loss function: 5.133, Average Loss: 5.524, avg. samples / sec: 1027.26
Iteration:   2720, Loss function: 5.290, Average Loss: 5.519, avg. samples / sec: 1011.88
Iteration:   2740, Loss function: 4.972, Average Loss: 5.515, avg. samples / sec: 959.87
Iteration:   2760, Loss function: 4.858, Average Loss: 5.510, avg. samples / sec: 1026.42
Iteration:   2780, Loss function: 5.633, Average Loss: 5.506, avg. samples / sec: 1019.24
Iteration:   2800, Loss function: 5.315, Average Loss: 5.502, avg. samples / sec: 1018.76
Iteration:   2820, Loss function: 5.294, Average Loss: 5.499, avg. samples / sec: 1005.61
Iteration:   2840, Loss function: 5.303, Average Loss: 5.495, avg. samples / sec: 957.05
Iteration:   2860, Loss function: 5.005, Average Loss: 5.490, avg. samples / sec: 977.45
Iteration:   2880, Loss function: 5.173, Average Loss: 5.484, avg. samples / sec: 982.61
Iteration:   2900, Loss function: 4.950, Average Loss: 5.480, avg. samples / sec: 1020.86
Iteration:   2920, Loss function: 5.061, Average Loss: 5.474, avg. samples / sec: 950.88
Iteration:   2940, Loss function: 5.093, Average Loss: 5.469, avg. samples / sec: 994.25
Iteration:   2960, Loss function: 5.337, Average Loss: 5.465, avg. samples / sec: 1013.88
Iteration:   2980, Loss function: 5.370, Average Loss: 5.461, avg. samples / sec: 951.60
Iteration:   3000, Loss function: 5.083, Average Loss: 5.455, avg. samples / sec: 1034.96
Iteration:   3020, Loss function: 5.370, Average Loss: 5.449, avg. samples / sec: 951.98
Iteration:   3040, Loss function: 5.314, Average Loss: 5.445, avg. samples / sec: 865.70
Iteration:   3060, Loss function: 5.057, Average Loss: 5.440, avg. samples / sec: 943.54
Iteration:   3080, Loss function: 4.957, Average Loss: 5.434, avg. samples / sec: 1032.03
:::MLLOG {"namespace": "", "time_ms": 1639752835990, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752835992, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.337, Average Loss: 5.429, avg. samples / sec: 1028.24
Iteration:   3120, Loss function: 5.112, Average Loss: 5.423, avg. samples / sec: 1008.64
Iteration:   3140, Loss function: 5.105, Average Loss: 5.419, avg. samples / sec: 1024.27
Iteration:   3160, Loss function: 5.481, Average Loss: 5.414, avg. samples / sec: 1007.55
Iteration:   3180, Loss function: 4.962, Average Loss: 5.410, avg. samples / sec: 986.31
Iteration:   3200, Loss function: 5.247, Average Loss: 5.404, avg. samples / sec: 972.88
Iteration:   3220, Loss function: 4.919, Average Loss: 5.398, avg. samples / sec: 1063.46
Iteration:   3240, Loss function: 5.250, Average Loss: 5.392, avg. samples / sec: 980.03
Iteration:   3260, Loss function: 5.114, Average Loss: 5.387, avg. samples / sec: 967.30
Iteration:   3280, Loss function: 4.843, Average Loss: 5.381, avg. samples / sec: 1037.06
Iteration:   3300, Loss function: 4.883, Average Loss: 5.375, avg. samples / sec: 962.96
Iteration:   3320, Loss function: 4.952, Average Loss: 5.371, avg. samples / sec: 1036.21
Iteration:   3340, Loss function: 5.251, Average Loss: 5.367, avg. samples / sec: 988.94
Iteration:   3360, Loss function: 5.148, Average Loss: 5.361, avg. samples / sec: 1027.03
Iteration:   3380, Loss function: 5.172, Average Loss: 5.354, avg. samples / sec: 950.31
Iteration:   3400, Loss function: 4.932, Average Loss: 5.349, avg. samples / sec: 1007.38
Iteration:   3420, Loss function: 5.095, Average Loss: 5.344, avg. samples / sec: 974.02
Iteration:   3440, Loss function: 4.880, Average Loss: 5.339, avg. samples / sec: 989.90
Iteration:   3460, Loss function: 5.342, Average Loss: 5.334, avg. samples / sec: 1053.85
Iteration:   3480, Loss function: 5.193, Average Loss: 5.330, avg. samples / sec: 1008.73
Iteration:   3500, Loss function: 5.155, Average Loss: 5.325, avg. samples / sec: 1026.89
Iteration:   3520, Loss function: 5.084, Average Loss: 5.322, avg. samples / sec: 1024.42
Iteration:   3540, Loss function: 5.074, Average Loss: 5.317, avg. samples / sec: 970.96
Iteration:   3560, Loss function: 4.895, Average Loss: 5.314, avg. samples / sec: 1023.28
Iteration:   3580, Loss function: 5.210, Average Loss: 5.309, avg. samples / sec: 912.23
Iteration:   3600, Loss function: 5.105, Average Loss: 5.302, avg. samples / sec: 1032.22
Iteration:   3620, Loss function: 4.789, Average Loss: 5.298, avg. samples / sec: 941.08
Iteration:   3640, Loss function: 4.896, Average Loss: 5.293, avg. samples / sec: 1004.70
Iteration:   3660, Loss function: 5.198, Average Loss: 5.288, avg. samples / sec: 967.22
Iteration:   3680, Loss function: 5.184, Average Loss: 5.282, avg. samples / sec: 928.81
Iteration:   3700, Loss function: 4.990, Average Loss: 5.277, avg. samples / sec: 1001.81
Iteration:   3720, Loss function: 4.866, Average Loss: 5.271, avg. samples / sec: 900.95
Iteration:   3740, Loss function: 4.983, Average Loss: 5.266, avg. samples / sec: 977.07
Iteration:   3760, Loss function: 5.044, Average Loss: 5.262, avg. samples / sec: 981.99
Iteration:   3780, Loss function: 4.978, Average Loss: 5.256, avg. samples / sec: 1002.36
Iteration:   3800, Loss function: 5.107, Average Loss: 5.253, avg. samples / sec: 999.08
Iteration:   3820, Loss function: 5.178, Average Loss: 5.248, avg. samples / sec: 1062.85
Iteration:   3840, Loss function: 4.597, Average Loss: 5.243, avg. samples / sec: 1024.92
Iteration:   3860, Loss function: 4.779, Average Loss: 5.238, avg. samples / sec: 1029.36
Iteration:   3880, Loss function: 4.936, Average Loss: 5.231, avg. samples / sec: 1031.23
Iteration:   3900, Loss function: 5.164, Average Loss: 5.227, avg. samples / sec: 1020.52
Iteration:   3920, Loss function: 5.183, Average Loss: 5.222, avg. samples / sec: 1035.45
Iteration:   3940, Loss function: 5.025, Average Loss: 5.217, avg. samples / sec: 1031.55
Iteration:   3960, Loss function: 4.792, Average Loss: 5.213, avg. samples / sec: 1017.11
Iteration:   3980, Loss function: 4.786, Average Loss: 5.208, avg. samples / sec: 1070.53
Iteration:   4000, Loss function: 5.105, Average Loss: 5.204, avg. samples / sec: 1015.42
Iteration:   4020, Loss function: 5.060, Average Loss: 5.199, avg. samples / sec: 1028.91
Iteration:   4040, Loss function: 5.170, Average Loss: 5.195, avg. samples / sec: 998.88
Iteration:   4060, Loss function: 5.273, Average Loss: 5.192, avg. samples / sec: 1008.49
Iteration:   4080, Loss function: 5.166, Average Loss: 5.187, avg. samples / sec: 962.65
Iteration:   4100, Loss function: 5.211, Average Loss: 5.184, avg. samples / sec: 1061.20
:::MLLOG {"namespace": "", "time_ms": 1639752953073, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752953074, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.999, Average Loss: 5.179, avg. samples / sec: 1056.19
Iteration:   4140, Loss function: 5.088, Average Loss: 5.175, avg. samples / sec: 1012.65
Iteration:   4160, Loss function: 4.913, Average Loss: 5.169, avg. samples / sec: 1030.05
Iteration:   4180, Loss function: 4.861, Average Loss: 5.163, avg. samples / sec: 1025.43
Iteration:   4200, Loss function: 4.758, Average Loss: 5.158, avg. samples / sec: 995.05
Iteration:   4220, Loss function: 4.723, Average Loss: 5.154, avg. samples / sec: 980.93
Iteration:   4240, Loss function: 4.821, Average Loss: 5.149, avg. samples / sec: 1013.92
Iteration:   4260, Loss function: 5.054, Average Loss: 5.145, avg. samples / sec: 963.42
Iteration:   4280, Loss function: 4.806, Average Loss: 5.138, avg. samples / sec: 989.67
Iteration:   4300, Loss function: 4.833, Average Loss: 5.132, avg. samples / sec: 1007.53
Iteration:   4320, Loss function: 4.842, Average Loss: 5.128, avg. samples / sec: 990.23
Iteration:   4340, Loss function: 4.737, Average Loss: 5.123, avg. samples / sec: 975.46
Iteration:   4360, Loss function: 4.971, Average Loss: 5.118, avg. samples / sec: 1034.52
Iteration:   4380, Loss function: 4.935, Average Loss: 5.114, avg. samples / sec: 999.79
Iteration:   4400, Loss function: 4.716, Average Loss: 5.108, avg. samples / sec: 960.65
Iteration:   4420, Loss function: 4.814, Average Loss: 5.103, avg. samples / sec: 949.78
Iteration:   4440, Loss function: 4.863, Average Loss: 5.098, avg. samples / sec: 975.60
Iteration:   4460, Loss function: 5.074, Average Loss: 5.094, avg. samples / sec: 1035.46
Iteration:   4480, Loss function: 4.954, Average Loss: 5.090, avg. samples / sec: 982.25
Iteration:   4500, Loss function: 4.824, Average Loss: 5.087, avg. samples / sec: 949.88
Iteration:   4520, Loss function: 4.706, Average Loss: 5.082, avg. samples / sec: 982.16
Iteration:   4540, Loss function: 5.081, Average Loss: 5.079, avg. samples / sec: 1041.67
Iteration:   4560, Loss function: 4.889, Average Loss: 5.075, avg. samples / sec: 975.03
Iteration:   4580, Loss function: 4.818, Average Loss: 5.072, avg. samples / sec: 982.23
Iteration:   4600, Loss function: 4.856, Average Loss: 5.069, avg. samples / sec: 965.43
Iteration:   4620, Loss function: 4.699, Average Loss: 5.064, avg. samples / sec: 940.28
Iteration:   4640, Loss function: 4.845, Average Loss: 5.059, avg. samples / sec: 952.28
Iteration:   4660, Loss function: 4.708, Average Loss: 5.055, avg. samples / sec: 1017.48
Iteration:   4680, Loss function: 5.216, Average Loss: 5.051, avg. samples / sec: 1038.23
Iteration:   4700, Loss function: 4.855, Average Loss: 5.048, avg. samples / sec: 980.84
Iteration:   4720, Loss function: 4.532, Average Loss: 5.044, avg. samples / sec: 955.77
Iteration:   4740, Loss function: 4.824, Average Loss: 5.040, avg. samples / sec: 941.99
Iteration:   4760, Loss function: 4.643, Average Loss: 5.037, avg. samples / sec: 999.23
Iteration:   4780, Loss function: 5.100, Average Loss: 5.033, avg. samples / sec: 1004.04
Iteration:   4800, Loss function: 4.981, Average Loss: 5.031, avg. samples / sec: 902.34
Iteration:   4820, Loss function: 4.762, Average Loss: 5.028, avg. samples / sec: 993.83
Iteration:   4840, Loss function: 5.064, Average Loss: 5.024, avg. samples / sec: 922.08
Iteration:   4860, Loss function: 4.720, Average Loss: 5.020, avg. samples / sec: 1046.17
Iteration:   4880, Loss function: 5.083, Average Loss: 5.017, avg. samples / sec: 942.01
Iteration:   4900, Loss function: 4.657, Average Loss: 5.013, avg. samples / sec: 985.89
Iteration:   4920, Loss function: 4.844, Average Loss: 5.010, avg. samples / sec: 1046.32
Iteration:   4940, Loss function: 4.753, Average Loss: 5.006, avg. samples / sec: 961.74
Iteration:   4960, Loss function: 4.753, Average Loss: 5.003, avg. samples / sec: 1004.49
Iteration:   4980, Loss function: 4.617, Average Loss: 4.999, avg. samples / sec: 1007.87
Iteration:   5000, Loss function: 5.106, Average Loss: 4.995, avg. samples / sec: 1039.36
Iteration:   5020, Loss function: 5.135, Average Loss: 4.993, avg. samples / sec: 966.86
Iteration:   5040, Loss function: 4.811, Average Loss: 4.989, avg. samples / sec: 992.47
Iteration:   5060, Loss function: 4.724, Average Loss: 4.986, avg. samples / sec: 965.83
Iteration:   5080, Loss function: 4.469, Average Loss: 4.983, avg. samples / sec: 969.76
Iteration:   5100, Loss function: 4.676, Average Loss: 4.982, avg. samples / sec: 982.94
Iteration:   5120, Loss function: 4.608, Average Loss: 4.979, avg. samples / sec: 997.15
Iteration:   5140, Loss function: 4.720, Average Loss: 4.975, avg. samples / sec: 1030.88
:::MLLOG {"namespace": "", "time_ms": 1639753071800, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.65 s
:::MLLOG {"namespace": "", "time_ms": 1639753103538, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753103583, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103583, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.78s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.741, Average Loss: 4.970, avg. samples / sec: 67.53
Iteration:   5180, Loss function: 4.790, Average Loss: 4.966, avg. samples / sec: 1160.49
Iteration:   5200, Loss function: 4.715, Average Loss: 4.962, avg. samples / sec: 1065.95
DONE (t=4.97s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10665
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21792
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09489
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18887
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13683
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20115
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21370
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10665 AP goal: 0.10000
Iteration:   5220, Loss function: 4.505, Average Loss: 4.957, avg. samples / sec: 1089.96
:::MLLOG {"namespace": "", "time_ms": 1639753111430, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111431, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10664656277698743, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111431, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753111682, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753113
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:33 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:31 PM'
START TIMING RUN WAS 2021-12-17 02:47:31 PM
ENDING TIMING RUN AT 2021-12-17 02:58:33 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:33 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
+ result=662
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,662,nvidia,2021-12-17 02:47:31 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,662,nvidia,2021-12-17 02:47:31 PM'
ALL FINISHED GPU: 1 x full x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
