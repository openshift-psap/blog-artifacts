8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-55b69871-247e-9b99-a60a-7daca59a4108
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
+ [[ full != \f\u\l\l ]]
No MIG GPU available, using the full GPUs (GPU-55b69871-247e-9b99-a60a-7daca59a4108).
+ echo 'No MIG GPU available, using the full GPUs (GPU-55b69871-247e-9b99-a60a-7daca59a4108).'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752432
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:12 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:12 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:12 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-40-45 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ rm -f /data/coco2017/sync/2021-12-17_15-40-45
+ set +x
Fri Dec 17 14:47:12 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-hxs5t to the sync file ...
run-mlperf--1-hxs5t Found 1 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
run-mlperf--1-hxs5t Found 3 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
run-mlperf--1-hxs5t Found 4 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
run-mlperf--1-hxs5t Found 6 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
Fri Dec 17 14:47:32 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
Running on all the 1 GPUs 
+ echo 'Running on all the 1 GPUs '
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752454299, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752454431, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3859925998, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3859925998
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752456024, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752456024, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752456029, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752456029, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752479085, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752479086, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752480337, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752480338, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752480586, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752480587, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752480588, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.814, Average Loss: 0.023, avg. samples / sec: 4.70
Iteration:     20, Loss function: 21.051, Average Loss: 0.455, avg. samples / sec: 738.62
Iteration:     40, Loss function: 20.878, Average Loss: 0.857, avg. samples / sec: 1039.53
Iteration:     60, Loss function: 20.435, Average Loss: 1.248, avg. samples / sec: 1047.33
Iteration:     80, Loss function: 20.321, Average Loss: 1.624, avg. samples / sec: 950.00
Iteration:    100, Loss function: 17.921, Average Loss: 1.974, avg. samples / sec: 948.97
Iteration:    120, Loss function: 11.780, Average Loss: 2.214, avg. samples / sec: 934.84
Iteration:    140, Loss function: 10.419, Average Loss: 2.391, avg. samples / sec: 985.43
Iteration:    160, Loss function: 9.840, Average Loss: 2.539, avg. samples / sec: 1011.36
Iteration:    180, Loss function: 9.297, Average Loss: 2.672, avg. samples / sec: 1002.87
Iteration:    200, Loss function: 8.814, Average Loss: 2.798, avg. samples / sec: 952.81
Iteration:    220, Loss function: 8.537, Average Loss: 2.918, avg. samples / sec: 1029.17
Iteration:    240, Loss function: 8.707, Average Loss: 3.033, avg. samples / sec: 1056.36
Iteration:    260, Loss function: 8.833, Average Loss: 3.144, avg. samples / sec: 1031.73
Iteration:    280, Loss function: 8.816, Average Loss: 3.257, avg. samples / sec: 1014.32
Iteration:    300, Loss function: 8.367, Average Loss: 3.361, avg. samples / sec: 1041.30
Iteration:    320, Loss function: 8.379, Average Loss: 3.461, avg. samples / sec: 1019.41
Iteration:    340, Loss function: 8.339, Average Loss: 3.558, avg. samples / sec: 1004.04
Iteration:    360, Loss function: 8.288, Average Loss: 3.652, avg. samples / sec: 959.29
Iteration:    380, Loss function: 8.074, Average Loss: 3.742, avg. samples / sec: 1026.28
Iteration:    400, Loss function: 7.986, Average Loss: 3.827, avg. samples / sec: 974.08
Iteration:    420, Loss function: 7.688, Average Loss: 3.909, avg. samples / sec: 943.68
Iteration:    440, Loss function: 7.850, Average Loss: 3.986, avg. samples / sec: 1035.82
Iteration:    460, Loss function: 7.898, Average Loss: 4.061, avg. samples / sec: 1005.62
Iteration:    480, Loss function: 7.422, Average Loss: 4.133, avg. samples / sec: 1056.96
Iteration:    500, Loss function: 7.527, Average Loss: 4.202, avg. samples / sec: 1024.83
Iteration:    520, Loss function: 7.543, Average Loss: 4.270, avg. samples / sec: 983.54
Iteration:    540, Loss function: 7.670, Average Loss: 4.335, avg. samples / sec: 983.25
Iteration:    560, Loss function: 7.096, Average Loss: 4.396, avg. samples / sec: 991.71
Iteration:    580, Loss function: 7.198, Average Loss: 4.455, avg. samples / sec: 961.87
Iteration:    600, Loss function: 7.491, Average Loss: 4.515, avg. samples / sec: 959.43
Iteration:    620, Loss function: 7.181, Average Loss: 4.571, avg. samples / sec: 936.29
Iteration:    640, Loss function: 7.060, Average Loss: 4.626, avg. samples / sec: 990.70
Iteration:    660, Loss function: 7.157, Average Loss: 4.678, avg. samples / sec: 921.48
Iteration:    680, Loss function: 7.416, Average Loss: 4.729, avg. samples / sec: 987.28
Iteration:    700, Loss function: 6.918, Average Loss: 4.776, avg. samples / sec: 940.26
Iteration:    720, Loss function: 6.971, Average Loss: 4.824, avg. samples / sec: 1019.12
Iteration:    740, Loss function: 6.902, Average Loss: 4.868, avg. samples / sec: 938.86
Iteration:    760, Loss function: 7.029, Average Loss: 4.910, avg. samples / sec: 978.20
Iteration:    780, Loss function: 6.967, Average Loss: 4.952, avg. samples / sec: 1049.61
Iteration:    800, Loss function: 7.083, Average Loss: 4.990, avg. samples / sec: 1061.22
Iteration:    820, Loss function: 6.877, Average Loss: 5.027, avg. samples / sec: 1028.21
Iteration:    840, Loss function: 6.809, Average Loss: 5.063, avg. samples / sec: 993.02
Iteration:    860, Loss function: 6.830, Average Loss: 5.097, avg. samples / sec: 1034.47
Iteration:    880, Loss function: 6.744, Average Loss: 5.130, avg. samples / sec: 1022.68
Iteration:    900, Loss function: 6.944, Average Loss: 5.160, avg. samples / sec: 992.37
Iteration:    920, Loss function: 6.683, Average Loss: 5.188, avg. samples / sec: 995.04
Iteration:    940, Loss function: 6.745, Average Loss: 5.217, avg. samples / sec: 1034.15
Iteration:    960, Loss function: 6.570, Average Loss: 5.246, avg. samples / sec: 990.48
Iteration:    980, Loss function: 6.479, Average Loss: 5.273, avg. samples / sec: 1077.97
Iteration:   1000, Loss function: 6.677, Average Loss: 5.298, avg. samples / sec: 994.41
Iteration:   1020, Loss function: 6.275, Average Loss: 5.322, avg. samples / sec: 973.72
:::MLLOG {"namespace": "", "time_ms": 1639752599033, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752599035, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.662, Average Loss: 5.346, avg. samples / sec: 936.39
Iteration:   1060, Loss function: 6.287, Average Loss: 5.368, avg. samples / sec: 999.77
Iteration:   1080, Loss function: 6.507, Average Loss: 5.390, avg. samples / sec: 951.74
Iteration:   1100, Loss function: 6.107, Average Loss: 5.409, avg. samples / sec: 1063.04
Iteration:   1120, Loss function: 6.283, Average Loss: 5.428, avg. samples / sec: 1071.27
Iteration:   1140, Loss function: 6.601, Average Loss: 5.446, avg. samples / sec: 970.62
Iteration:   1160, Loss function: 6.286, Average Loss: 5.463, avg. samples / sec: 1026.31
Iteration:   1180, Loss function: 6.467, Average Loss: 5.480, avg. samples / sec: 1042.95
Iteration:   1200, Loss function: 6.345, Average Loss: 5.495, avg. samples / sec: 1028.11
Iteration:   1220, Loss function: 6.137, Average Loss: 5.510, avg. samples / sec: 1004.18
Iteration:   1240, Loss function: 6.170, Average Loss: 5.523, avg. samples / sec: 971.27
Iteration:   1260, Loss function: 6.038, Average Loss: 5.535, avg. samples / sec: 1079.14
Iteration:   1280, Loss function: 5.904, Average Loss: 5.546, avg. samples / sec: 999.45
Iteration:   1300, Loss function: 6.132, Average Loss: 5.558, avg. samples / sec: 996.31
Iteration:   1320, Loss function: 6.018, Average Loss: 5.569, avg. samples / sec: 1011.00
Iteration:   1340, Loss function: 5.809, Average Loss: 5.578, avg. samples / sec: 1017.52
Iteration:   1360, Loss function: 5.807, Average Loss: 5.588, avg. samples / sec: 979.05
Iteration:   1380, Loss function: 6.213, Average Loss: 5.598, avg. samples / sec: 990.71
Iteration:   1400, Loss function: 6.221, Average Loss: 5.606, avg. samples / sec: 1048.76
Iteration:   1420, Loss function: 5.875, Average Loss: 5.613, avg. samples / sec: 974.25
Iteration:   1440, Loss function: 6.396, Average Loss: 5.621, avg. samples / sec: 981.39
Iteration:   1460, Loss function: 6.141, Average Loss: 5.630, avg. samples / sec: 993.75
Iteration:   1480, Loss function: 5.939, Average Loss: 5.636, avg. samples / sec: 1065.25
Iteration:   1500, Loss function: 5.896, Average Loss: 5.643, avg. samples / sec: 959.02
Iteration:   1520, Loss function: 5.860, Average Loss: 5.648, avg. samples / sec: 1030.33
Iteration:   1540, Loss function: 6.192, Average Loss: 5.652, avg. samples / sec: 1025.73
Iteration:   1560, Loss function: 5.775, Average Loss: 5.656, avg. samples / sec: 998.27
Iteration:   1580, Loss function: 5.701, Average Loss: 5.661, avg. samples / sec: 1013.79
Iteration:   1600, Loss function: 6.141, Average Loss: 5.667, avg. samples / sec: 1000.21
Iteration:   1620, Loss function: 5.815, Average Loss: 5.671, avg. samples / sec: 919.89
Iteration:   1640, Loss function: 5.945, Average Loss: 5.674, avg. samples / sec: 979.25
Iteration:   1660, Loss function: 5.983, Average Loss: 5.678, avg. samples / sec: 971.25
Iteration:   1680, Loss function: 5.818, Average Loss: 5.681, avg. samples / sec: 1010.80
Iteration:   1700, Loss function: 5.356, Average Loss: 5.683, avg. samples / sec: 978.71
Iteration:   1720, Loss function: 5.682, Average Loss: 5.685, avg. samples / sec: 1010.46
Iteration:   1740, Loss function: 5.804, Average Loss: 5.686, avg. samples / sec: 998.70
Iteration:   1760, Loss function: 5.606, Average Loss: 5.687, avg. samples / sec: 1002.60
Iteration:   1780, Loss function: 5.594, Average Loss: 5.688, avg. samples / sec: 1045.41
Iteration:   1800, Loss function: 5.643, Average Loss: 5.689, avg. samples / sec: 1031.65
Iteration:   1820, Loss function: 5.926, Average Loss: 5.692, avg. samples / sec: 1045.97
Iteration:   1840, Loss function: 5.874, Average Loss: 5.693, avg. samples / sec: 1039.42
Iteration:   1860, Loss function: 5.679, Average Loss: 5.692, avg. samples / sec: 1017.46
Iteration:   1880, Loss function: 6.079, Average Loss: 5.693, avg. samples / sec: 1038.87
Iteration:   1900, Loss function: 5.872, Average Loss: 5.694, avg. samples / sec: 1005.71
Iteration:   1920, Loss function: 5.665, Average Loss: 5.694, avg. samples / sec: 1000.95
Iteration:   1940, Loss function: 5.926, Average Loss: 5.693, avg. samples / sec: 1045.58
Iteration:   1960, Loss function: 5.563, Average Loss: 5.691, avg. samples / sec: 953.88
Iteration:   1980, Loss function: 5.739, Average Loss: 5.690, avg. samples / sec: 996.42
Iteration:   2000, Loss function: 5.415, Average Loss: 5.689, avg. samples / sec: 972.66
Iteration:   2020, Loss function: 5.639, Average Loss: 5.686, avg. samples / sec: 1061.77
Iteration:   2040, Loss function: 5.722, Average Loss: 5.685, avg. samples / sec: 1064.80
:::MLLOG {"namespace": "", "time_ms": 1639752715433, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752715435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.535, Average Loss: 5.683, avg. samples / sec: 1056.17
Iteration:   2080, Loss function: 5.148, Average Loss: 5.680, avg. samples / sec: 996.17
Iteration:   2100, Loss function: 5.643, Average Loss: 5.678, avg. samples / sec: 1012.32
Iteration:   2120, Loss function: 5.386, Average Loss: 5.675, avg. samples / sec: 967.35
Iteration:   2140, Loss function: 5.527, Average Loss: 5.672, avg. samples / sec: 1111.15
Iteration:   2160, Loss function: 5.342, Average Loss: 5.669, avg. samples / sec: 976.23
Iteration:   2180, Loss function: 5.364, Average Loss: 5.666, avg. samples / sec: 1058.76
Iteration:   2200, Loss function: 5.450, Average Loss: 5.662, avg. samples / sec: 1002.08
Iteration:   2220, Loss function: 5.530, Average Loss: 5.660, avg. samples / sec: 1013.34
Iteration:   2240, Loss function: 5.500, Average Loss: 5.657, avg. samples / sec: 1010.88
Iteration:   2260, Loss function: 5.364, Average Loss: 5.652, avg. samples / sec: 981.67
Iteration:   2280, Loss function: 5.289, Average Loss: 5.649, avg. samples / sec: 1008.54
Iteration:   2300, Loss function: 5.054, Average Loss: 5.645, avg. samples / sec: 1071.00
Iteration:   2320, Loss function: 5.403, Average Loss: 5.642, avg. samples / sec: 946.32
Iteration:   2340, Loss function: 5.706, Average Loss: 5.639, avg. samples / sec: 976.98
Iteration:   2360, Loss function: 5.324, Average Loss: 5.635, avg. samples / sec: 1053.56
Iteration:   2380, Loss function: 5.337, Average Loss: 5.631, avg. samples / sec: 975.34
Iteration:   2400, Loss function: 5.532, Average Loss: 5.626, avg. samples / sec: 1036.82
Iteration:   2420, Loss function: 5.706, Average Loss: 5.623, avg. samples / sec: 1009.52
Iteration:   2440, Loss function: 5.480, Average Loss: 5.620, avg. samples / sec: 975.42
Iteration:   2460, Loss function: 5.449, Average Loss: 5.617, avg. samples / sec: 1009.70
Iteration:   2480, Loss function: 5.380, Average Loss: 5.612, avg. samples / sec: 1054.98
Iteration:   2500, Loss function: 5.387, Average Loss: 5.608, avg. samples / sec: 1024.56
Iteration:   2520, Loss function: 5.497, Average Loss: 5.603, avg. samples / sec: 1007.09
Iteration:   2540, Loss function: 5.406, Average Loss: 5.599, avg. samples / sec: 992.92
Iteration:   2560, Loss function: 5.325, Average Loss: 5.595, avg. samples / sec: 942.59
Iteration:   2580, Loss function: 5.300, Average Loss: 5.590, avg. samples / sec: 1017.01
Iteration:   2600, Loss function: 5.560, Average Loss: 5.586, avg. samples / sec: 1057.87
Iteration:   2620, Loss function: 5.592, Average Loss: 5.582, avg. samples / sec: 1074.79
Iteration:   2640, Loss function: 5.379, Average Loss: 5.580, avg. samples / sec: 967.62
Iteration:   2660, Loss function: 5.253, Average Loss: 5.575, avg. samples / sec: 1053.10
Iteration:   2680, Loss function: 5.169, Average Loss: 5.571, avg. samples / sec: 1024.33
Iteration:   2700, Loss function: 5.196, Average Loss: 5.566, avg. samples / sec: 1042.15
Iteration:   2720, Loss function: 5.496, Average Loss: 5.562, avg. samples / sec: 1043.13
Iteration:   2740, Loss function: 5.094, Average Loss: 5.557, avg. samples / sec: 924.71
Iteration:   2760, Loss function: 4.972, Average Loss: 5.551, avg. samples / sec: 1022.07
Iteration:   2780, Loss function: 5.532, Average Loss: 5.547, avg. samples / sec: 955.81
Iteration:   2800, Loss function: 5.189, Average Loss: 5.543, avg. samples / sec: 1009.01
Iteration:   2820, Loss function: 5.327, Average Loss: 5.539, avg. samples / sec: 1042.70
Iteration:   2840, Loss function: 5.187, Average Loss: 5.534, avg. samples / sec: 929.33
Iteration:   2860, Loss function: 5.269, Average Loss: 5.530, avg. samples / sec: 1006.97
Iteration:   2880, Loss function: 5.271, Average Loss: 5.525, avg. samples / sec: 959.02
Iteration:   2900, Loss function: 5.136, Average Loss: 5.519, avg. samples / sec: 1052.21
Iteration:   2920, Loss function: 5.252, Average Loss: 5.513, avg. samples / sec: 952.49
Iteration:   2940, Loss function: 5.023, Average Loss: 5.509, avg. samples / sec: 1029.22
Iteration:   2960, Loss function: 5.335, Average Loss: 5.504, avg. samples / sec: 998.86
Iteration:   2980, Loss function: 5.207, Average Loss: 5.500, avg. samples / sec: 1017.29
Iteration:   3000, Loss function: 5.367, Average Loss: 5.495, avg. samples / sec: 1024.96
Iteration:   3020, Loss function: 5.164, Average Loss: 5.489, avg. samples / sec: 1014.18
Iteration:   3040, Loss function: 5.192, Average Loss: 5.483, avg. samples / sec: 1029.13
Iteration:   3060, Loss function: 5.065, Average Loss: 5.476, avg. samples / sec: 1029.58
Iteration:   3080, Loss function: 5.079, Average Loss: 5.470, avg. samples / sec: 1049.99
:::MLLOG {"namespace": "", "time_ms": 1639752831634, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752831636, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.298, Average Loss: 5.466, avg. samples / sec: 997.70
Iteration:   3120, Loss function: 4.970, Average Loss: 5.459, avg. samples / sec: 953.76
Iteration:   3140, Loss function: 5.129, Average Loss: 5.454, avg. samples / sec: 956.48
Iteration:   3160, Loss function: 5.722, Average Loss: 5.448, avg. samples / sec: 1066.26
Iteration:   3180, Loss function: 5.045, Average Loss: 5.442, avg. samples / sec: 974.08
Iteration:   3200, Loss function: 5.194, Average Loss: 5.436, avg. samples / sec: 1004.66
Iteration:   3220, Loss function: 5.168, Average Loss: 5.431, avg. samples / sec: 1038.30
Iteration:   3240, Loss function: 5.264, Average Loss: 5.426, avg. samples / sec: 1033.32
Iteration:   3260, Loss function: 5.084, Average Loss: 5.420, avg. samples / sec: 1033.81
Iteration:   3280, Loss function: 4.851, Average Loss: 5.413, avg. samples / sec: 1000.26
Iteration:   3300, Loss function: 5.010, Average Loss: 5.407, avg. samples / sec: 1029.58
Iteration:   3320, Loss function: 5.095, Average Loss: 5.403, avg. samples / sec: 934.21
Iteration:   3340, Loss function: 5.084, Average Loss: 5.399, avg. samples / sec: 1079.53
Iteration:   3360, Loss function: 5.089, Average Loss: 5.391, avg. samples / sec: 1045.03
Iteration:   3380, Loss function: 5.244, Average Loss: 5.384, avg. samples / sec: 1027.96
Iteration:   3400, Loss function: 4.801, Average Loss: 5.378, avg. samples / sec: 1028.00
Iteration:   3420, Loss function: 5.043, Average Loss: 5.373, avg. samples / sec: 1024.58
Iteration:   3440, Loss function: 4.899, Average Loss: 5.367, avg. samples / sec: 952.10
Iteration:   3460, Loss function: 5.247, Average Loss: 5.361, avg. samples / sec: 1005.37
Iteration:   3480, Loss function: 5.169, Average Loss: 5.358, avg. samples / sec: 1022.07
Iteration:   3500, Loss function: 5.183, Average Loss: 5.353, avg. samples / sec: 958.16
Iteration:   3520, Loss function: 5.129, Average Loss: 5.349, avg. samples / sec: 1036.84
Iteration:   3540, Loss function: 5.023, Average Loss: 5.343, avg. samples / sec: 992.23
Iteration:   3560, Loss function: 5.009, Average Loss: 5.338, avg. samples / sec: 1038.65
Iteration:   3580, Loss function: 5.105, Average Loss: 5.334, avg. samples / sec: 1009.06
Iteration:   3600, Loss function: 5.041, Average Loss: 5.328, avg. samples / sec: 1030.32
Iteration:   3620, Loss function: 4.981, Average Loss: 5.324, avg. samples / sec: 1028.14
Iteration:   3640, Loss function: 4.891, Average Loss: 5.319, avg. samples / sec: 992.75
Iteration:   3660, Loss function: 4.989, Average Loss: 5.313, avg. samples / sec: 1038.14
Iteration:   3680, Loss function: 5.137, Average Loss: 5.308, avg. samples / sec: 961.28
Iteration:   3700, Loss function: 4.912, Average Loss: 5.304, avg. samples / sec: 996.09
Iteration:   3720, Loss function: 5.055, Average Loss: 5.297, avg. samples / sec: 991.26
Iteration:   3740, Loss function: 5.123, Average Loss: 5.293, avg. samples / sec: 1066.96
Iteration:   3760, Loss function: 5.175, Average Loss: 5.290, avg. samples / sec: 1092.67
Iteration:   3780, Loss function: 5.078, Average Loss: 5.285, avg. samples / sec: 1051.86
Iteration:   3800, Loss function: 5.091, Average Loss: 5.281, avg. samples / sec: 1052.26
Iteration:   3820, Loss function: 5.204, Average Loss: 5.275, avg. samples / sec: 1019.07
Iteration:   3840, Loss function: 4.913, Average Loss: 5.270, avg. samples / sec: 1010.77
Iteration:   3860, Loss function: 4.989, Average Loss: 5.265, avg. samples / sec: 1084.52
Iteration:   3880, Loss function: 5.057, Average Loss: 5.259, avg. samples / sec: 1031.88
Iteration:   3900, Loss function: 5.290, Average Loss: 5.254, avg. samples / sec: 1015.90
Iteration:   3920, Loss function: 5.296, Average Loss: 5.249, avg. samples / sec: 996.86
Iteration:   3940, Loss function: 5.092, Average Loss: 5.244, avg. samples / sec: 1005.15
Iteration:   3960, Loss function: 4.698, Average Loss: 5.240, avg. samples / sec: 994.57
Iteration:   3980, Loss function: 4.878, Average Loss: 5.235, avg. samples / sec: 1030.81
Iteration:   4000, Loss function: 5.315, Average Loss: 5.232, avg. samples / sec: 1020.55
Iteration:   4020, Loss function: 5.198, Average Loss: 5.227, avg. samples / sec: 1016.15
Iteration:   4040, Loss function: 4.999, Average Loss: 5.223, avg. samples / sec: 1060.41
Iteration:   4060, Loss function: 5.005, Average Loss: 5.219, avg. samples / sec: 985.83
Iteration:   4080, Loss function: 5.144, Average Loss: 5.214, avg. samples / sec: 1019.67
Iteration:   4100, Loss function: 5.099, Average Loss: 5.210, avg. samples / sec: 976.96
:::MLLOG {"namespace": "", "time_ms": 1639752947267, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752947268, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.111, Average Loss: 5.206, avg. samples / sec: 992.74
Iteration:   4140, Loss function: 5.038, Average Loss: 5.201, avg. samples / sec: 1073.36
Iteration:   4160, Loss function: 4.975, Average Loss: 5.195, avg. samples / sec: 998.50
Iteration:   4180, Loss function: 4.886, Average Loss: 5.189, avg. samples / sec: 1028.74
Iteration:   4200, Loss function: 4.788, Average Loss: 5.184, avg. samples / sec: 1025.85
Iteration:   4220, Loss function: 4.876, Average Loss: 5.179, avg. samples / sec: 987.26
Iteration:   4240, Loss function: 4.870, Average Loss: 5.175, avg. samples / sec: 929.81
Iteration:   4260, Loss function: 5.064, Average Loss: 5.170, avg. samples / sec: 1047.10
Iteration:   4280, Loss function: 4.819, Average Loss: 5.163, avg. samples / sec: 1016.36
Iteration:   4300, Loss function: 4.805, Average Loss: 5.157, avg. samples / sec: 1048.09
Iteration:   4320, Loss function: 4.772, Average Loss: 5.151, avg. samples / sec: 1000.98
Iteration:   4340, Loss function: 4.702, Average Loss: 5.145, avg. samples / sec: 1047.87
Iteration:   4360, Loss function: 5.079, Average Loss: 5.141, avg. samples / sec: 1048.19
Iteration:   4380, Loss function: 4.872, Average Loss: 5.136, avg. samples / sec: 1016.80
Iteration:   4400, Loss function: 5.116, Average Loss: 5.132, avg. samples / sec: 1009.80
Iteration:   4420, Loss function: 4.884, Average Loss: 5.127, avg. samples / sec: 1073.25
Iteration:   4440, Loss function: 4.880, Average Loss: 5.122, avg. samples / sec: 966.28
Iteration:   4460, Loss function: 5.135, Average Loss: 5.118, avg. samples / sec: 1055.11
Iteration:   4480, Loss function: 5.229, Average Loss: 5.115, avg. samples / sec: 1063.77
Iteration:   4500, Loss function: 4.963, Average Loss: 5.112, avg. samples / sec: 1024.71
Iteration:   4520, Loss function: 4.896, Average Loss: 5.108, avg. samples / sec: 1006.53
Iteration:   4540, Loss function: 5.087, Average Loss: 5.104, avg. samples / sec: 1069.29
Iteration:   4560, Loss function: 4.719, Average Loss: 5.100, avg. samples / sec: 1026.40
Iteration:   4580, Loss function: 4.784, Average Loss: 5.098, avg. samples / sec: 987.92
Iteration:   4600, Loss function: 4.829, Average Loss: 5.093, avg. samples / sec: 991.10
Iteration:   4620, Loss function: 4.791, Average Loss: 5.089, avg. samples / sec: 1081.18
Iteration:   4640, Loss function: 4.625, Average Loss: 5.084, avg. samples / sec: 1014.57
Iteration:   4660, Loss function: 4.718, Average Loss: 5.080, avg. samples / sec: 1027.04
Iteration:   4680, Loss function: 5.207, Average Loss: 5.075, avg. samples / sec: 1073.81
Iteration:   4700, Loss function: 4.719, Average Loss: 5.072, avg. samples / sec: 1011.50
Iteration:   4720, Loss function: 4.758, Average Loss: 5.068, avg. samples / sec: 983.85
Iteration:   4740, Loss function: 4.872, Average Loss: 5.064, avg. samples / sec: 1011.39
Iteration:   4760, Loss function: 4.659, Average Loss: 5.061, avg. samples / sec: 1003.88
Iteration:   4780, Loss function: 5.132, Average Loss: 5.057, avg. samples / sec: 1053.73
Iteration:   4800, Loss function: 4.718, Average Loss: 5.054, avg. samples / sec: 990.78
Iteration:   4820, Loss function: 4.768, Average Loss: 5.050, avg. samples / sec: 1000.56
Iteration:   4840, Loss function: 5.030, Average Loss: 5.047, avg. samples / sec: 979.28
Iteration:   4860, Loss function: 4.757, Average Loss: 5.042, avg. samples / sec: 1045.30
Iteration:   4880, Loss function: 5.155, Average Loss: 5.038, avg. samples / sec: 1049.63
Iteration:   4900, Loss function: 4.430, Average Loss: 5.034, avg. samples / sec: 981.44
Iteration:   4920, Loss function: 4.855, Average Loss: 5.029, avg. samples / sec: 1046.89
Iteration:   4940, Loss function: 4.706, Average Loss: 5.025, avg. samples / sec: 927.20
Iteration:   4960, Loss function: 4.639, Average Loss: 5.021, avg. samples / sec: 988.06
Iteration:   4980, Loss function: 4.671, Average Loss: 5.016, avg. samples / sec: 989.70
Iteration:   5000, Loss function: 5.029, Average Loss: 5.013, avg. samples / sec: 925.22
Iteration:   5020, Loss function: 5.154, Average Loss: 5.010, avg. samples / sec: 912.08
Iteration:   5040, Loss function: 4.857, Average Loss: 5.006, avg. samples / sec: 1057.86
Iteration:   5060, Loss function: 4.810, Average Loss: 5.004, avg. samples / sec: 1049.53
Iteration:   5080, Loss function: 4.525, Average Loss: 5.000, avg. samples / sec: 1014.65
Iteration:   5100, Loss function: 4.935, Average Loss: 4.997, avg. samples / sec: 992.15
Iteration:   5120, Loss function: 4.576, Average Loss: 4.994, avg. samples / sec: 1001.14
Iteration:   5140, Loss function: 4.855, Average Loss: 4.990, avg. samples / sec: 987.42
:::MLLOG {"namespace": "", "time_ms": 1639753063077, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 34.55 s
:::MLLOG {"namespace": "", "time_ms": 1639753097689, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753097744, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753097744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.057, Average Loss: 4.985, avg. samples / sec: 62.11
Iteration:   5180, Loss function: 4.919, Average Loss: 4.981, avg. samples / sec: 1208.19
DONE (t=3.04s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10803
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21801
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09698
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19208
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13898
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10803 AP goal: 0.10000
Iteration:   5200, Loss function: 4.668, Average Loss: 4.977, avg. samples / sec: 1221.48
:::MLLOG {"namespace": "", "time_ms": 1639753103185, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103186, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1080250655782069, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103186, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103345, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:24 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:24 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752454299, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752454431, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3859925998, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3859925998
:::MLLOG {"namespace": "", "time_ms": 1639752456024, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752456024, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752456028, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752456029, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752456029, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752479085, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752479086, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752480337, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752480338, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752480586, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752480587, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752480588, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.814, Average Loss: 0.023, avg. samples / sec: 4.70
Iteration:     20, Loss function: 21.051, Average Loss: 0.455, avg. samples / sec: 738.62
Iteration:     40, Loss function: 20.878, Average Loss: 0.857, avg. samples / sec: 1039.53
Iteration:     60, Loss function: 20.435, Average Loss: 1.248, avg. samples / sec: 1047.33
Iteration:     80, Loss function: 20.321, Average Loss: 1.624, avg. samples / sec: 950.00
Iteration:    100, Loss function: 17.921, Average Loss: 1.974, avg. samples / sec: 948.97
Iteration:    120, Loss function: 11.780, Average Loss: 2.214, avg. samples / sec: 934.84
Iteration:    140, Loss function: 10.419, Average Loss: 2.391, avg. samples / sec: 985.43
Iteration:    160, Loss function: 9.840, Average Loss: 2.539, avg. samples / sec: 1011.36
Iteration:    180, Loss function: 9.297, Average Loss: 2.672, avg. samples / sec: 1002.87
Iteration:    200, Loss function: 8.814, Average Loss: 2.798, avg. samples / sec: 952.81
Iteration:    220, Loss function: 8.537, Average Loss: 2.918, avg. samples / sec: 1029.17
Iteration:    240, Loss function: 8.707, Average Loss: 3.033, avg. samples / sec: 1056.36
Iteration:    260, Loss function: 8.833, Average Loss: 3.144, avg. samples / sec: 1031.73
Iteration:    280, Loss function: 8.816, Average Loss: 3.257, avg. samples / sec: 1014.32
Iteration:    300, Loss function: 8.367, Average Loss: 3.361, avg. samples / sec: 1041.30
Iteration:    320, Loss function: 8.379, Average Loss: 3.461, avg. samples / sec: 1019.41
Iteration:    340, Loss function: 8.339, Average Loss: 3.558, avg. samples / sec: 1004.04
Iteration:    360, Loss function: 8.288, Average Loss: 3.652, avg. samples / sec: 959.29
Iteration:    380, Loss function: 8.074, Average Loss: 3.742, avg. samples / sec: 1026.28
Iteration:    400, Loss function: 7.986, Average Loss: 3.827, avg. samples / sec: 974.08
Iteration:    420, Loss function: 7.688, Average Loss: 3.909, avg. samples / sec: 943.68
Iteration:    440, Loss function: 7.850, Average Loss: 3.986, avg. samples / sec: 1035.82
Iteration:    460, Loss function: 7.898, Average Loss: 4.061, avg. samples / sec: 1005.62
Iteration:    480, Loss function: 7.422, Average Loss: 4.133, avg. samples / sec: 1056.96
Iteration:    500, Loss function: 7.527, Average Loss: 4.202, avg. samples / sec: 1024.83
Iteration:    520, Loss function: 7.543, Average Loss: 4.270, avg. samples / sec: 983.54
Iteration:    540, Loss function: 7.670, Average Loss: 4.335, avg. samples / sec: 983.25
Iteration:    560, Loss function: 7.096, Average Loss: 4.396, avg. samples / sec: 991.71
Iteration:    580, Loss function: 7.198, Average Loss: 4.455, avg. samples / sec: 961.87
Iteration:    600, Loss function: 7.491, Average Loss: 4.515, avg. samples / sec: 959.43
Iteration:    620, Loss function: 7.181, Average Loss: 4.571, avg. samples / sec: 936.29
Iteration:    640, Loss function: 7.060, Average Loss: 4.626, avg. samples / sec: 990.70
Iteration:    660, Loss function: 7.157, Average Loss: 4.678, avg. samples / sec: 921.48
Iteration:    680, Loss function: 7.416, Average Loss: 4.729, avg. samples / sec: 987.28
Iteration:    700, Loss function: 6.918, Average Loss: 4.776, avg. samples / sec: 940.26
Iteration:    720, Loss function: 6.971, Average Loss: 4.824, avg. samples / sec: 1019.12
Iteration:    740, Loss function: 6.902, Average Loss: 4.868, avg. samples / sec: 938.86
Iteration:    760, Loss function: 7.029, Average Loss: 4.910, avg. samples / sec: 978.20
Iteration:    780, Loss function: 6.967, Average Loss: 4.952, avg. samples / sec: 1049.61
Iteration:    800, Loss function: 7.083, Average Loss: 4.990, avg. samples / sec: 1061.22
Iteration:    820, Loss function: 6.877, Average Loss: 5.027, avg. samples / sec: 1028.21
Iteration:    840, Loss function: 6.809, Average Loss: 5.063, avg. samples / sec: 993.02
Iteration:    860, Loss function: 6.830, Average Loss: 5.097, avg. samples / sec: 1034.47
Iteration:    880, Loss function: 6.744, Average Loss: 5.130, avg. samples / sec: 1022.68
Iteration:    900, Loss function: 6.944, Average Loss: 5.160, avg. samples / sec: 992.37
Iteration:    920, Loss function: 6.683, Average Loss: 5.188, avg. samples / sec: 995.04
Iteration:    940, Loss function: 6.745, Average Loss: 5.217, avg. samples / sec: 1034.15
Iteration:    960, Loss function: 6.570, Average Loss: 5.246, avg. samples / sec: 990.48
Iteration:    980, Loss function: 6.479, Average Loss: 5.273, avg. samples / sec: 1077.97
Iteration:   1000, Loss function: 6.677, Average Loss: 5.298, avg. samples / sec: 994.41
Iteration:   1020, Loss function: 6.275, Average Loss: 5.322, avg. samples / sec: 973.72
:::MLLOG {"namespace": "", "time_ms": 1639752599033, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752599035, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.662, Average Loss: 5.346, avg. samples / sec: 936.39
Iteration:   1060, Loss function: 6.287, Average Loss: 5.368, avg. samples / sec: 999.77
Iteration:   1080, Loss function: 6.507, Average Loss: 5.390, avg. samples / sec: 951.74
Iteration:   1100, Loss function: 6.107, Average Loss: 5.409, avg. samples / sec: 1063.04
Iteration:   1120, Loss function: 6.283, Average Loss: 5.428, avg. samples / sec: 1071.27
Iteration:   1140, Loss function: 6.601, Average Loss: 5.446, avg. samples / sec: 970.62
Iteration:   1160, Loss function: 6.286, Average Loss: 5.463, avg. samples / sec: 1026.31
Iteration:   1180, Loss function: 6.467, Average Loss: 5.480, avg. samples / sec: 1042.95
Iteration:   1200, Loss function: 6.345, Average Loss: 5.495, avg. samples / sec: 1028.11
Iteration:   1220, Loss function: 6.137, Average Loss: 5.510, avg. samples / sec: 1004.18
Iteration:   1240, Loss function: 6.170, Average Loss: 5.523, avg. samples / sec: 971.27
Iteration:   1260, Loss function: 6.038, Average Loss: 5.535, avg. samples / sec: 1079.14
Iteration:   1280, Loss function: 5.904, Average Loss: 5.546, avg. samples / sec: 999.45
Iteration:   1300, Loss function: 6.132, Average Loss: 5.558, avg. samples / sec: 996.31
Iteration:   1320, Loss function: 6.018, Average Loss: 5.569, avg. samples / sec: 1011.00
Iteration:   1340, Loss function: 5.809, Average Loss: 5.578, avg. samples / sec: 1017.52
Iteration:   1360, Loss function: 5.807, Average Loss: 5.588, avg. samples / sec: 979.05
Iteration:   1380, Loss function: 6.213, Average Loss: 5.598, avg. samples / sec: 990.71
Iteration:   1400, Loss function: 6.221, Average Loss: 5.606, avg. samples / sec: 1048.76
Iteration:   1420, Loss function: 5.875, Average Loss: 5.613, avg. samples / sec: 974.25
Iteration:   1440, Loss function: 6.396, Average Loss: 5.621, avg. samples / sec: 981.39
Iteration:   1460, Loss function: 6.141, Average Loss: 5.630, avg. samples / sec: 993.75
Iteration:   1480, Loss function: 5.939, Average Loss: 5.636, avg. samples / sec: 1065.25
Iteration:   1500, Loss function: 5.896, Average Loss: 5.643, avg. samples / sec: 959.02
Iteration:   1520, Loss function: 5.860, Average Loss: 5.648, avg. samples / sec: 1030.33
Iteration:   1540, Loss function: 6.192, Average Loss: 5.652, avg. samples / sec: 1025.73
Iteration:   1560, Loss function: 5.775, Average Loss: 5.656, avg. samples / sec: 998.27
Iteration:   1580, Loss function: 5.701, Average Loss: 5.661, avg. samples / sec: 1013.79
Iteration:   1600, Loss function: 6.141, Average Loss: 5.667, avg. samples / sec: 1000.21
Iteration:   1620, Loss function: 5.815, Average Loss: 5.671, avg. samples / sec: 919.89
Iteration:   1640, Loss function: 5.945, Average Loss: 5.674, avg. samples / sec: 979.25
Iteration:   1660, Loss function: 5.983, Average Loss: 5.678, avg. samples / sec: 971.25
Iteration:   1680, Loss function: 5.818, Average Loss: 5.681, avg. samples / sec: 1010.80
Iteration:   1700, Loss function: 5.356, Average Loss: 5.683, avg. samples / sec: 978.71
Iteration:   1720, Loss function: 5.682, Average Loss: 5.685, avg. samples / sec: 1010.46
Iteration:   1740, Loss function: 5.804, Average Loss: 5.686, avg. samples / sec: 998.70
Iteration:   1760, Loss function: 5.606, Average Loss: 5.687, avg. samples / sec: 1002.60
Iteration:   1780, Loss function: 5.594, Average Loss: 5.688, avg. samples / sec: 1045.41
Iteration:   1800, Loss function: 5.643, Average Loss: 5.689, avg. samples / sec: 1031.65
Iteration:   1820, Loss function: 5.926, Average Loss: 5.692, avg. samples / sec: 1045.97
Iteration:   1840, Loss function: 5.874, Average Loss: 5.693, avg. samples / sec: 1039.42
Iteration:   1860, Loss function: 5.679, Average Loss: 5.692, avg. samples / sec: 1017.46
Iteration:   1880, Loss function: 6.079, Average Loss: 5.693, avg. samples / sec: 1038.87
Iteration:   1900, Loss function: 5.872, Average Loss: 5.694, avg. samples / sec: 1005.71
Iteration:   1920, Loss function: 5.665, Average Loss: 5.694, avg. samples / sec: 1000.95
Iteration:   1940, Loss function: 5.926, Average Loss: 5.693, avg. samples / sec: 1045.58
Iteration:   1960, Loss function: 5.563, Average Loss: 5.691, avg. samples / sec: 953.88
Iteration:   1980, Loss function: 5.739, Average Loss: 5.690, avg. samples / sec: 996.42
Iteration:   2000, Loss function: 5.415, Average Loss: 5.689, avg. samples / sec: 972.66
Iteration:   2020, Loss function: 5.639, Average Loss: 5.686, avg. samples / sec: 1061.77
Iteration:   2040, Loss function: 5.722, Average Loss: 5.685, avg. samples / sec: 1064.80
:::MLLOG {"namespace": "", "time_ms": 1639752715433, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752715435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.535, Average Loss: 5.683, avg. samples / sec: 1056.17
Iteration:   2080, Loss function: 5.148, Average Loss: 5.680, avg. samples / sec: 996.17
Iteration:   2100, Loss function: 5.643, Average Loss: 5.678, avg. samples / sec: 1012.32
Iteration:   2120, Loss function: 5.386, Average Loss: 5.675, avg. samples / sec: 967.35
Iteration:   2140, Loss function: 5.527, Average Loss: 5.672, avg. samples / sec: 1111.15
Iteration:   2160, Loss function: 5.342, Average Loss: 5.669, avg. samples / sec: 976.23
Iteration:   2180, Loss function: 5.364, Average Loss: 5.666, avg. samples / sec: 1058.76
Iteration:   2200, Loss function: 5.450, Average Loss: 5.662, avg. samples / sec: 1002.08
Iteration:   2220, Loss function: 5.530, Average Loss: 5.660, avg. samples / sec: 1013.34
Iteration:   2240, Loss function: 5.500, Average Loss: 5.657, avg. samples / sec: 1010.88
Iteration:   2260, Loss function: 5.364, Average Loss: 5.652, avg. samples / sec: 981.67
Iteration:   2280, Loss function: 5.289, Average Loss: 5.649, avg. samples / sec: 1008.54
Iteration:   2300, Loss function: 5.054, Average Loss: 5.645, avg. samples / sec: 1071.00
Iteration:   2320, Loss function: 5.403, Average Loss: 5.642, avg. samples / sec: 946.32
Iteration:   2340, Loss function: 5.706, Average Loss: 5.639, avg. samples / sec: 976.98
Iteration:   2360, Loss function: 5.324, Average Loss: 5.635, avg. samples / sec: 1053.56
Iteration:   2380, Loss function: 5.337, Average Loss: 5.631, avg. samples / sec: 975.34
Iteration:   2400, Loss function: 5.532, Average Loss: 5.626, avg. samples / sec: 1036.82
Iteration:   2420, Loss function: 5.706, Average Loss: 5.623, avg. samples / sec: 1009.52
Iteration:   2440, Loss function: 5.480, Average Loss: 5.620, avg. samples / sec: 975.42
Iteration:   2460, Loss function: 5.449, Average Loss: 5.617, avg. samples / sec: 1009.70
Iteration:   2480, Loss function: 5.380, Average Loss: 5.612, avg. samples / sec: 1054.98
Iteration:   2500, Loss function: 5.387, Average Loss: 5.608, avg. samples / sec: 1024.56
Iteration:   2520, Loss function: 5.497, Average Loss: 5.603, avg. samples / sec: 1007.09
Iteration:   2540, Loss function: 5.406, Average Loss: 5.599, avg. samples / sec: 992.92
Iteration:   2560, Loss function: 5.325, Average Loss: 5.595, avg. samples / sec: 942.59
Iteration:   2580, Loss function: 5.300, Average Loss: 5.590, avg. samples / sec: 1017.01
Iteration:   2600, Loss function: 5.560, Average Loss: 5.586, avg. samples / sec: 1057.87
Iteration:   2620, Loss function: 5.592, Average Loss: 5.582, avg. samples / sec: 1074.79
Iteration:   2640, Loss function: 5.379, Average Loss: 5.580, avg. samples / sec: 967.62
Iteration:   2660, Loss function: 5.253, Average Loss: 5.575, avg. samples / sec: 1053.10
Iteration:   2680, Loss function: 5.169, Average Loss: 5.571, avg. samples / sec: 1024.33
Iteration:   2700, Loss function: 5.196, Average Loss: 5.566, avg. samples / sec: 1042.15
Iteration:   2720, Loss function: 5.496, Average Loss: 5.562, avg. samples / sec: 1043.13
Iteration:   2740, Loss function: 5.094, Average Loss: 5.557, avg. samples / sec: 924.71
Iteration:   2760, Loss function: 4.972, Average Loss: 5.551, avg. samples / sec: 1022.07
Iteration:   2780, Loss function: 5.532, Average Loss: 5.547, avg. samples / sec: 955.81
Iteration:   2800, Loss function: 5.189, Average Loss: 5.543, avg. samples / sec: 1009.01
Iteration:   2820, Loss function: 5.327, Average Loss: 5.539, avg. samples / sec: 1042.70
Iteration:   2840, Loss function: 5.187, Average Loss: 5.534, avg. samples / sec: 929.33
Iteration:   2860, Loss function: 5.269, Average Loss: 5.530, avg. samples / sec: 1006.97
Iteration:   2880, Loss function: 5.271, Average Loss: 5.525, avg. samples / sec: 959.02
Iteration:   2900, Loss function: 5.136, Average Loss: 5.519, avg. samples / sec: 1052.21
Iteration:   2920, Loss function: 5.252, Average Loss: 5.513, avg. samples / sec: 952.49
Iteration:   2940, Loss function: 5.023, Average Loss: 5.509, avg. samples / sec: 1029.22
Iteration:   2960, Loss function: 5.335, Average Loss: 5.504, avg. samples / sec: 998.86
Iteration:   2980, Loss function: 5.207, Average Loss: 5.500, avg. samples / sec: 1017.29
Iteration:   3000, Loss function: 5.367, Average Loss: 5.495, avg. samples / sec: 1024.96
Iteration:   3020, Loss function: 5.164, Average Loss: 5.489, avg. samples / sec: 1014.18
Iteration:   3040, Loss function: 5.192, Average Loss: 5.483, avg. samples / sec: 1029.13
Iteration:   3060, Loss function: 5.065, Average Loss: 5.476, avg. samples / sec: 1029.58
Iteration:   3080, Loss function: 5.079, Average Loss: 5.470, avg. samples / sec: 1049.99
:::MLLOG {"namespace": "", "time_ms": 1639752831634, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752831636, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.298, Average Loss: 5.466, avg. samples / sec: 997.70
Iteration:   3120, Loss function: 4.970, Average Loss: 5.459, avg. samples / sec: 953.76
Iteration:   3140, Loss function: 5.129, Average Loss: 5.454, avg. samples / sec: 956.48
Iteration:   3160, Loss function: 5.722, Average Loss: 5.448, avg. samples / sec: 1066.26
Iteration:   3180, Loss function: 5.045, Average Loss: 5.442, avg. samples / sec: 974.08
Iteration:   3200, Loss function: 5.194, Average Loss: 5.436, avg. samples / sec: 1004.66
Iteration:   3220, Loss function: 5.168, Average Loss: 5.431, avg. samples / sec: 1038.30
Iteration:   3240, Loss function: 5.264, Average Loss: 5.426, avg. samples / sec: 1033.32
Iteration:   3260, Loss function: 5.084, Average Loss: 5.420, avg. samples / sec: 1033.81
Iteration:   3280, Loss function: 4.851, Average Loss: 5.413, avg. samples / sec: 1000.26
Iteration:   3300, Loss function: 5.010, Average Loss: 5.407, avg. samples / sec: 1029.58
Iteration:   3320, Loss function: 5.095, Average Loss: 5.403, avg. samples / sec: 934.21
Iteration:   3340, Loss function: 5.084, Average Loss: 5.399, avg. samples / sec: 1079.53
Iteration:   3360, Loss function: 5.089, Average Loss: 5.391, avg. samples / sec: 1045.03
Iteration:   3380, Loss function: 5.244, Average Loss: 5.384, avg. samples / sec: 1027.96
Iteration:   3400, Loss function: 4.801, Average Loss: 5.378, avg. samples / sec: 1028.00
Iteration:   3420, Loss function: 5.043, Average Loss: 5.373, avg. samples / sec: 1024.58
Iteration:   3440, Loss function: 4.899, Average Loss: 5.367, avg. samples / sec: 952.10
Iteration:   3460, Loss function: 5.247, Average Loss: 5.361, avg. samples / sec: 1005.37
Iteration:   3480, Loss function: 5.169, Average Loss: 5.358, avg. samples / sec: 1022.07
Iteration:   3500, Loss function: 5.183, Average Loss: 5.353, avg. samples / sec: 958.16
Iteration:   3520, Loss function: 5.129, Average Loss: 5.349, avg. samples / sec: 1036.84
Iteration:   3540, Loss function: 5.023, Average Loss: 5.343, avg. samples / sec: 992.23
Iteration:   3560, Loss function: 5.009, Average Loss: 5.338, avg. samples / sec: 1038.65
Iteration:   3580, Loss function: 5.105, Average Loss: 5.334, avg. samples / sec: 1009.06
Iteration:   3600, Loss function: 5.041, Average Loss: 5.328, avg. samples / sec: 1030.32
Iteration:   3620, Loss function: 4.981, Average Loss: 5.324, avg. samples / sec: 1028.14
Iteration:   3640, Loss function: 4.891, Average Loss: 5.319, avg. samples / sec: 992.75
Iteration:   3660, Loss function: 4.989, Average Loss: 5.313, avg. samples / sec: 1038.14
Iteration:   3680, Loss function: 5.137, Average Loss: 5.308, avg. samples / sec: 961.28
Iteration:   3700, Loss function: 4.912, Average Loss: 5.304, avg. samples / sec: 996.09
Iteration:   3720, Loss function: 5.055, Average Loss: 5.297, avg. samples / sec: 991.26
Iteration:   3740, Loss function: 5.123, Average Loss: 5.293, avg. samples / sec: 1066.96
Iteration:   3760, Loss function: 5.175, Average Loss: 5.290, avg. samples / sec: 1092.67
Iteration:   3780, Loss function: 5.078, Average Loss: 5.285, avg. samples / sec: 1051.86
Iteration:   3800, Loss function: 5.091, Average Loss: 5.281, avg. samples / sec: 1052.26
Iteration:   3820, Loss function: 5.204, Average Loss: 5.275, avg. samples / sec: 1019.07
Iteration:   3840, Loss function: 4.913, Average Loss: 5.270, avg. samples / sec: 1010.77
Iteration:   3860, Loss function: 4.989, Average Loss: 5.265, avg. samples / sec: 1084.52
Iteration:   3880, Loss function: 5.057, Average Loss: 5.259, avg. samples / sec: 1031.88
Iteration:   3900, Loss function: 5.290, Average Loss: 5.254, avg. samples / sec: 1015.90
Iteration:   3920, Loss function: 5.296, Average Loss: 5.249, avg. samples / sec: 996.86
Iteration:   3940, Loss function: 5.092, Average Loss: 5.244, avg. samples / sec: 1005.15
Iteration:   3960, Loss function: 4.698, Average Loss: 5.240, avg. samples / sec: 994.57
Iteration:   3980, Loss function: 4.878, Average Loss: 5.235, avg. samples / sec: 1030.81
Iteration:   4000, Loss function: 5.315, Average Loss: 5.232, avg. samples / sec: 1020.55
Iteration:   4020, Loss function: 5.198, Average Loss: 5.227, avg. samples / sec: 1016.15
Iteration:   4040, Loss function: 4.999, Average Loss: 5.223, avg. samples / sec: 1060.41
Iteration:   4060, Loss function: 5.005, Average Loss: 5.219, avg. samples / sec: 985.83
Iteration:   4080, Loss function: 5.144, Average Loss: 5.214, avg. samples / sec: 1019.67
Iteration:   4100, Loss function: 5.099, Average Loss: 5.210, avg. samples / sec: 976.96
:::MLLOG {"namespace": "", "time_ms": 1639752947267, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752947268, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.111, Average Loss: 5.206, avg. samples / sec: 992.74
Iteration:   4140, Loss function: 5.038, Average Loss: 5.201, avg. samples / sec: 1073.36
Iteration:   4160, Loss function: 4.975, Average Loss: 5.195, avg. samples / sec: 998.50
Iteration:   4180, Loss function: 4.886, Average Loss: 5.189, avg. samples / sec: 1028.74
Iteration:   4200, Loss function: 4.788, Average Loss: 5.184, avg. samples / sec: 1025.85
Iteration:   4220, Loss function: 4.876, Average Loss: 5.179, avg. samples / sec: 987.26
Iteration:   4240, Loss function: 4.870, Average Loss: 5.175, avg. samples / sec: 929.81
Iteration:   4260, Loss function: 5.064, Average Loss: 5.170, avg. samples / sec: 1047.10
Iteration:   4280, Loss function: 4.819, Average Loss: 5.163, avg. samples / sec: 1016.36
Iteration:   4300, Loss function: 4.805, Average Loss: 5.157, avg. samples / sec: 1048.09
Iteration:   4320, Loss function: 4.772, Average Loss: 5.151, avg. samples / sec: 1000.98
Iteration:   4340, Loss function: 4.702, Average Loss: 5.145, avg. samples / sec: 1047.87
Iteration:   4360, Loss function: 5.079, Average Loss: 5.141, avg. samples / sec: 1048.19
Iteration:   4380, Loss function: 4.872, Average Loss: 5.136, avg. samples / sec: 1016.80
Iteration:   4400, Loss function: 5.116, Average Loss: 5.132, avg. samples / sec: 1009.80
Iteration:   4420, Loss function: 4.884, Average Loss: 5.127, avg. samples / sec: 1073.25
Iteration:   4440, Loss function: 4.880, Average Loss: 5.122, avg. samples / sec: 966.28
Iteration:   4460, Loss function: 5.135, Average Loss: 5.118, avg. samples / sec: 1055.11
Iteration:   4480, Loss function: 5.229, Average Loss: 5.115, avg. samples / sec: 1063.77
Iteration:   4500, Loss function: 4.963, Average Loss: 5.112, avg. samples / sec: 1024.71
Iteration:   4520, Loss function: 4.896, Average Loss: 5.108, avg. samples / sec: 1006.53
Iteration:   4540, Loss function: 5.087, Average Loss: 5.104, avg. samples / sec: 1069.29
Iteration:   4560, Loss function: 4.719, Average Loss: 5.100, avg. samples / sec: 1026.40
Iteration:   4580, Loss function: 4.784, Average Loss: 5.098, avg. samples / sec: 987.92
Iteration:   4600, Loss function: 4.829, Average Loss: 5.093, avg. samples / sec: 991.10
Iteration:   4620, Loss function: 4.791, Average Loss: 5.089, avg. samples / sec: 1081.18
Iteration:   4640, Loss function: 4.625, Average Loss: 5.084, avg. samples / sec: 1014.57
Iteration:   4660, Loss function: 4.718, Average Loss: 5.080, avg. samples / sec: 1027.04
Iteration:   4680, Loss function: 5.207, Average Loss: 5.075, avg. samples / sec: 1073.81
Iteration:   4700, Loss function: 4.719, Average Loss: 5.072, avg. samples / sec: 1011.50
Iteration:   4720, Loss function: 4.758, Average Loss: 5.068, avg. samples / sec: 983.85
Iteration:   4740, Loss function: 4.872, Average Loss: 5.064, avg. samples / sec: 1011.39
Iteration:   4760, Loss function: 4.659, Average Loss: 5.061, avg. samples / sec: 1003.88
Iteration:   4780, Loss function: 5.132, Average Loss: 5.057, avg. samples / sec: 1053.73
Iteration:   4800, Loss function: 4.718, Average Loss: 5.054, avg. samples / sec: 990.78
Iteration:   4820, Loss function: 4.768, Average Loss: 5.050, avg. samples / sec: 1000.56
Iteration:   4840, Loss function: 5.030, Average Loss: 5.047, avg. samples / sec: 979.28
Iteration:   4860, Loss function: 4.757, Average Loss: 5.042, avg. samples / sec: 1045.30
Iteration:   4880, Loss function: 5.155, Average Loss: 5.038, avg. samples / sec: 1049.63
Iteration:   4900, Loss function: 4.430, Average Loss: 5.034, avg. samples / sec: 981.44
Iteration:   4920, Loss function: 4.855, Average Loss: 5.029, avg. samples / sec: 1046.89
Iteration:   4940, Loss function: 4.706, Average Loss: 5.025, avg. samples / sec: 927.20
Iteration:   4960, Loss function: 4.639, Average Loss: 5.021, avg. samples / sec: 988.06
Iteration:   4980, Loss function: 4.671, Average Loss: 5.016, avg. samples / sec: 989.70
Iteration:   5000, Loss function: 5.029, Average Loss: 5.013, avg. samples / sec: 925.22
Iteration:   5020, Loss function: 5.154, Average Loss: 5.010, avg. samples / sec: 912.08
Iteration:   5040, Loss function: 4.857, Average Loss: 5.006, avg. samples / sec: 1057.86
Iteration:   5060, Loss function: 4.810, Average Loss: 5.004, avg. samples / sec: 1049.53
Iteration:   5080, Loss function: 4.525, Average Loss: 5.000, avg. samples / sec: 1014.65
Iteration:   5100, Loss function: 4.935, Average Loss: 4.997, avg. samples / sec: 992.15
Iteration:   5120, Loss function: 4.576, Average Loss: 4.994, avg. samples / sec: 1001.14
Iteration:   5140, Loss function: 4.855, Average Loss: 4.990, avg. samples / sec: 987.42
:::MLLOG {"namespace": "", "time_ms": 1639753063077, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 34.55 s
:::MLLOG {"namespace": "", "time_ms": 1639753097689, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753097744, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753097744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.81s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.057, Average Loss: 4.985, avg. samples / sec: 62.11
Iteration:   5180, Loss function: 4.919, Average Loss: 4.981, avg. samples / sec: 1208.19
DONE (t=3.04s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10803
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21801
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09698
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19208
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13898
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20435
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10803 AP goal: 0.10000
Iteration:   5200, Loss function: 4.668, Average Loss: 4.977, avg. samples / sec: 1221.48
:::MLLOG {"namespace": "", "time_ms": 1639753103185, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103186, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1080250655782069, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103186, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753103345, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753104
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:24 PM'
START TIMING RUN WAS 2021-12-17 02:47:12 PM
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:12 PM'
ENDING TIMING RUN AT 2021-12-17 02:58:24 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:24 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
+ result=672
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,672,nvidia,2021-12-17 02:47:12 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,672,nvidia,2021-12-17 02:47:12 PM'
ALL FINISHED GPU: 1 x full x 8 Pods
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
