8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
++ true
+ NB_GPUS=0
+ [[ 0 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ cut '-d ' -f6
++ cut '-d)' -f1
+ ALL_GPUS=GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f
++ nvidia-smi -L
++ grep 'UUID: GPU'
++ wc -l
+ NB_GPUS=1
+ MIG_MODE=0
No MIG GPU available, using the full GPUs (GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f).
+ [[ full != \f\u\l\l ]]
+ echo 'No MIG GPU available, using the full GPUs (GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f).'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639752449
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 02:47:29 PM'
STARTING TIMING RUN AT 2021-12-17 02:47:29 PM GPU: 1 x full x 8 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 02:47:29 PM GPU: 1 x full x 8 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 0 == \1 ]]
+ DGXNGPU=1
Running in multi-gpu mode.
+ echo 'Running in multi-gpu mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_15-46-53 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\5\-\4\6\-\5\3 ]]
+ set +x
Fri Dec 17 14:47:29 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf--1-k6jf6 to the sync file ...
run-mlperf--1-k6jf6 Found 7 Pods, waiting to have 8 ...
     1	run-mlperf--1-hxs5t
     2	run-mlperf--1-9479c
     3	run-mlperf--1-hmbvh
     4	run-mlperf--1-htc7t
     5	run-mlperf--1-zjxdz
     6	run-mlperf--1-jnkbn
     7	run-mlperf--1-k6jf6
Fri Dec 17 14:47:34 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
+ [[ 0 == 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 0 == 1 ]]
+ echo 'Running on all the 1 GPUs '
Running on all the 1 GPUs 
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752456266, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752456438, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3429559176, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3429559176
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639752458148, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752458148, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752458152, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752481062, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752481062, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639752482979, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482981, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483265, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483266, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483267, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.098, Average Loss: 0.023, avg. samples / sec: 4.59
Iteration:     20, Loss function: 20.999, Average Loss: 0.458, avg. samples / sec: 981.76
Iteration:     40, Loss function: 20.835, Average Loss: 0.861, avg. samples / sec: 984.64
Iteration:     60, Loss function: 20.462, Average Loss: 1.251, avg. samples / sec: 946.75
Iteration:     80, Loss function: 20.026, Average Loss: 1.625, avg. samples / sec: 988.86
Iteration:    100, Loss function: 15.786, Average Loss: 1.955, avg. samples / sec: 983.95
Iteration:    120, Loss function: 11.187, Average Loss: 2.168, avg. samples / sec: 990.56
Iteration:    140, Loss function: 9.658, Average Loss: 2.323, avg. samples / sec: 983.66
Iteration:    160, Loss function: 9.166, Average Loss: 2.463, avg. samples / sec: 986.04
Iteration:    180, Loss function: 8.950, Average Loss: 2.592, avg. samples / sec: 925.88
Iteration:    200, Loss function: 8.720, Average Loss: 2.716, avg. samples / sec: 907.41
Iteration:    220, Loss function: 8.652, Average Loss: 2.838, avg. samples / sec: 933.13
Iteration:    240, Loss function: 8.495, Average Loss: 2.956, avg. samples / sec: 1013.01
Iteration:    260, Loss function: 8.568, Average Loss: 3.068, avg. samples / sec: 962.47
Iteration:    280, Loss function: 8.409, Average Loss: 3.177, avg. samples / sec: 1016.08
Iteration:    300, Loss function: 8.275, Average Loss: 3.279, avg. samples / sec: 1043.53
Iteration:    320, Loss function: 8.630, Average Loss: 3.380, avg. samples / sec: 962.02
Iteration:    340, Loss function: 8.274, Average Loss: 3.480, avg. samples / sec: 991.81
Iteration:    360, Loss function: 8.070, Average Loss: 3.573, avg. samples / sec: 966.53
Iteration:    380, Loss function: 7.829, Average Loss: 3.661, avg. samples / sec: 967.37
Iteration:    400, Loss function: 8.092, Average Loss: 3.746, avg. samples / sec: 1016.40
Iteration:    420, Loss function: 7.619, Average Loss: 3.831, avg. samples / sec: 941.83
Iteration:    440, Loss function: 7.882, Average Loss: 3.910, avg. samples / sec: 972.22
Iteration:    460, Loss function: 7.730, Average Loss: 3.986, avg. samples / sec: 869.39
Iteration:    480, Loss function: 7.482, Average Loss: 4.059, avg. samples / sec: 968.92
Iteration:    500, Loss function: 7.570, Average Loss: 4.129, avg. samples / sec: 971.11
Iteration:    520, Loss function: 7.748, Average Loss: 4.197, avg. samples / sec: 763.79
Iteration:    540, Loss function: 7.506, Average Loss: 4.263, avg. samples / sec: 919.99
Iteration:    560, Loss function: 7.453, Average Loss: 4.327, avg. samples / sec: 966.80
Iteration:    580, Loss function: 7.363, Average Loss: 4.388, avg. samples / sec: 968.82
Iteration:    600, Loss function: 7.181, Average Loss: 4.446, avg. samples / sec: 1019.49
Iteration:    620, Loss function: 7.162, Average Loss: 4.501, avg. samples / sec: 1002.06
Iteration:    640, Loss function: 6.947, Average Loss: 4.556, avg. samples / sec: 1054.33
Iteration:    660, Loss function: 7.046, Average Loss: 4.608, avg. samples / sec: 954.59
Iteration:    680, Loss function: 7.268, Average Loss: 4.659, avg. samples / sec: 1053.31
Iteration:    700, Loss function: 6.846, Average Loss: 4.707, avg. samples / sec: 939.94
Iteration:    720, Loss function: 6.992, Average Loss: 4.755, avg. samples / sec: 1018.41
Iteration:    740, Loss function: 6.841, Average Loss: 4.800, avg. samples / sec: 1043.38
Iteration:    760, Loss function: 7.058, Average Loss: 4.842, avg. samples / sec: 978.14
Iteration:    780, Loss function: 6.929, Average Loss: 4.884, avg. samples / sec: 1046.09
Iteration:    800, Loss function: 7.083, Average Loss: 4.923, avg. samples / sec: 1067.21
Iteration:    820, Loss function: 6.859, Average Loss: 4.962, avg. samples / sec: 918.79
Iteration:    840, Loss function: 6.925, Average Loss: 4.998, avg. samples / sec: 976.46
Iteration:    860, Loss function: 6.958, Average Loss: 5.033, avg. samples / sec: 1003.81
Iteration:    880, Loss function: 6.728, Average Loss: 5.065, avg. samples / sec: 1094.91
Iteration:    900, Loss function: 6.647, Average Loss: 5.096, avg. samples / sec: 966.93
Iteration:    920, Loss function: 6.902, Average Loss: 5.126, avg. samples / sec: 999.66
Iteration:    940, Loss function: 6.696, Average Loss: 5.156, avg. samples / sec: 926.68
Iteration:    960, Loss function: 6.397, Average Loss: 5.184, avg. samples / sec: 965.70
Iteration:    980, Loss function: 6.334, Average Loss: 5.212, avg. samples / sec: 978.56
Iteration:   1000, Loss function: 6.578, Average Loss: 5.237, avg. samples / sec: 1023.84
Iteration:   1020, Loss function: 6.446, Average Loss: 5.260, avg. samples / sec: 960.93
:::MLLOG {"namespace": "", "time_ms": 1639752603441, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752603443, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.688, Average Loss: 5.286, avg. samples / sec: 1013.79
Iteration:   1060, Loss function: 6.367, Average Loss: 5.309, avg. samples / sec: 780.35
Iteration:   1080, Loss function: 6.310, Average Loss: 5.331, avg. samples / sec: 1003.82
Iteration:   1100, Loss function: 6.234, Average Loss: 5.350, avg. samples / sec: 1046.20
Iteration:   1120, Loss function: 6.191, Average Loss: 5.370, avg. samples / sec: 984.99
Iteration:   1140, Loss function: 6.397, Average Loss: 5.389, avg. samples / sec: 996.90
Iteration:   1160, Loss function: 6.140, Average Loss: 5.406, avg. samples / sec: 1059.08
Iteration:   1180, Loss function: 6.328, Average Loss: 5.423, avg. samples / sec: 962.67
Iteration:   1200, Loss function: 6.320, Average Loss: 5.439, avg. samples / sec: 949.53
Iteration:   1220, Loss function: 6.216, Average Loss: 5.455, avg. samples / sec: 932.55
Iteration:   1240, Loss function: 6.018, Average Loss: 5.468, avg. samples / sec: 1013.29
Iteration:   1260, Loss function: 6.099, Average Loss: 5.481, avg. samples / sec: 984.46
Iteration:   1280, Loss function: 5.975, Average Loss: 5.494, avg. samples / sec: 984.22
Iteration:   1300, Loss function: 6.160, Average Loss: 5.507, avg. samples / sec: 948.23
Iteration:   1320, Loss function: 6.065, Average Loss: 5.519, avg. samples / sec: 984.70
Iteration:   1340, Loss function: 5.873, Average Loss: 5.529, avg. samples / sec: 1033.96
Iteration:   1360, Loss function: 6.033, Average Loss: 5.539, avg. samples / sec: 965.91
Iteration:   1380, Loss function: 6.198, Average Loss: 5.548, avg. samples / sec: 1064.60
Iteration:   1400, Loss function: 6.199, Average Loss: 5.557, avg. samples / sec: 1054.68
Iteration:   1420, Loss function: 5.957, Average Loss: 5.565, avg. samples / sec: 945.55
Iteration:   1440, Loss function: 6.478, Average Loss: 5.573, avg. samples / sec: 1000.02
Iteration:   1460, Loss function: 6.192, Average Loss: 5.581, avg. samples / sec: 1055.99
Iteration:   1480, Loss function: 5.773, Average Loss: 5.588, avg. samples / sec: 1004.60
Iteration:   1500, Loss function: 5.922, Average Loss: 5.596, avg. samples / sec: 1038.09
Iteration:   1520, Loss function: 5.883, Average Loss: 5.602, avg. samples / sec: 1021.46
Iteration:   1540, Loss function: 6.069, Average Loss: 5.605, avg. samples / sec: 976.00
Iteration:   1560, Loss function: 5.610, Average Loss: 5.610, avg. samples / sec: 1057.69
Iteration:   1580, Loss function: 5.588, Average Loss: 5.615, avg. samples / sec: 1015.73
Iteration:   1600, Loss function: 6.132, Average Loss: 5.621, avg. samples / sec: 1007.43
Iteration:   1620, Loss function: 5.970, Average Loss: 5.626, avg. samples / sec: 1037.63
Iteration:   1640, Loss function: 5.983, Average Loss: 5.630, avg. samples / sec: 1028.45
Iteration:   1660, Loss function: 5.713, Average Loss: 5.633, avg. samples / sec: 995.32
Iteration:   1680, Loss function: 5.735, Average Loss: 5.637, avg. samples / sec: 1000.84
Iteration:   1700, Loss function: 5.374, Average Loss: 5.640, avg. samples / sec: 939.84
Iteration:   1720, Loss function: 5.623, Average Loss: 5.641, avg. samples / sec: 930.06
Iteration:   1740, Loss function: 5.941, Average Loss: 5.643, avg. samples / sec: 929.45
Iteration:   1760, Loss function: 5.577, Average Loss: 5.645, avg. samples / sec: 969.52
Iteration:   1780, Loss function: 5.726, Average Loss: 5.646, avg. samples / sec: 932.94
Iteration:   1800, Loss function: 5.818, Average Loss: 5.648, avg. samples / sec: 1018.03
Iteration:   1820, Loss function: 5.860, Average Loss: 5.650, avg. samples / sec: 995.92
Iteration:   1840, Loss function: 5.898, Average Loss: 5.650, avg. samples / sec: 983.46
Iteration:   1860, Loss function: 5.600, Average Loss: 5.650, avg. samples / sec: 990.45
Iteration:   1880, Loss function: 5.804, Average Loss: 5.651, avg. samples / sec: 950.99
Iteration:   1900, Loss function: 5.853, Average Loss: 5.651, avg. samples / sec: 966.60
Iteration:   1920, Loss function: 5.848, Average Loss: 5.651, avg. samples / sec: 992.27
Iteration:   1940, Loss function: 5.736, Average Loss: 5.652, avg. samples / sec: 1006.47
Iteration:   1960, Loss function: 5.502, Average Loss: 5.651, avg. samples / sec: 986.12
Iteration:   1980, Loss function: 5.670, Average Loss: 5.650, avg. samples / sec: 939.33
Iteration:   2000, Loss function: 5.601, Average Loss: 5.650, avg. samples / sec: 1003.01
Iteration:   2020, Loss function: 5.553, Average Loss: 5.648, avg. samples / sec: 962.42
Iteration:   2040, Loss function: 5.657, Average Loss: 5.647, avg. samples / sec: 969.43
:::MLLOG {"namespace": "", "time_ms": 1639752722404, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752722406, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.331, Average Loss: 5.645, avg. samples / sec: 1044.62
Iteration:   2080, Loss function: 5.180, Average Loss: 5.642, avg. samples / sec: 1001.47
Iteration:   2100, Loss function: 5.517, Average Loss: 5.640, avg. samples / sec: 978.69
Iteration:   2120, Loss function: 5.357, Average Loss: 5.637, avg. samples / sec: 1015.63
Iteration:   2140, Loss function: 5.483, Average Loss: 5.634, avg. samples / sec: 1046.90
Iteration:   2160, Loss function: 5.445, Average Loss: 5.631, avg. samples / sec: 998.84
Iteration:   2180, Loss function: 5.407, Average Loss: 5.629, avg. samples / sec: 945.21
Iteration:   2200, Loss function: 5.423, Average Loss: 5.625, avg. samples / sec: 1010.52
Iteration:   2220, Loss function: 5.543, Average Loss: 5.623, avg. samples / sec: 1008.49
Iteration:   2240, Loss function: 5.487, Average Loss: 5.620, avg. samples / sec: 1032.37
Iteration:   2260, Loss function: 5.345, Average Loss: 5.616, avg. samples / sec: 978.81
Iteration:   2280, Loss function: 5.307, Average Loss: 5.613, avg. samples / sec: 1038.99
Iteration:   2300, Loss function: 5.147, Average Loss: 5.609, avg. samples / sec: 997.46
Iteration:   2320, Loss function: 5.134, Average Loss: 5.606, avg. samples / sec: 876.44
Iteration:   2340, Loss function: 5.419, Average Loss: 5.602, avg. samples / sec: 1004.18
Iteration:   2360, Loss function: 5.425, Average Loss: 5.598, avg. samples / sec: 1041.29
Iteration:   2380, Loss function: 5.254, Average Loss: 5.594, avg. samples / sec: 1045.16
Iteration:   2400, Loss function: 5.694, Average Loss: 5.590, avg. samples / sec: 1015.40
Iteration:   2420, Loss function: 5.470, Average Loss: 5.587, avg. samples / sec: 979.22
Iteration:   2440, Loss function: 5.480, Average Loss: 5.585, avg. samples / sec: 1018.78
Iteration:   2460, Loss function: 5.295, Average Loss: 5.582, avg. samples / sec: 1014.22
Iteration:   2480, Loss function: 5.364, Average Loss: 5.578, avg. samples / sec: 1050.37
Iteration:   2500, Loss function: 5.418, Average Loss: 5.574, avg. samples / sec: 1045.92
Iteration:   2520, Loss function: 5.368, Average Loss: 5.569, avg. samples / sec: 967.16
Iteration:   2540, Loss function: 5.359, Average Loss: 5.565, avg. samples / sec: 1074.56
Iteration:   2560, Loss function: 5.354, Average Loss: 5.561, avg. samples / sec: 1003.94
Iteration:   2580, Loss function: 5.254, Average Loss: 5.558, avg. samples / sec: 954.37
Iteration:   2600, Loss function: 5.548, Average Loss: 5.556, avg. samples / sec: 984.62
Iteration:   2620, Loss function: 5.425, Average Loss: 5.550, avg. samples / sec: 1054.62
Iteration:   2640, Loss function: 5.185, Average Loss: 5.546, avg. samples / sec: 1019.82
Iteration:   2660, Loss function: 5.454, Average Loss: 5.543, avg. samples / sec: 970.69
Iteration:   2680, Loss function: 5.192, Average Loss: 5.539, avg. samples / sec: 1049.99
Iteration:   2700, Loss function: 5.227, Average Loss: 5.533, avg. samples / sec: 1079.39
Iteration:   2720, Loss function: 5.393, Average Loss: 5.529, avg. samples / sec: 1003.24
Iteration:   2740, Loss function: 5.188, Average Loss: 5.526, avg. samples / sec: 1003.10
Iteration:   2760, Loss function: 4.959, Average Loss: 5.521, avg. samples / sec: 925.70
Iteration:   2780, Loss function: 5.363, Average Loss: 5.517, avg. samples / sec: 1017.40
Iteration:   2800, Loss function: 5.290, Average Loss: 5.512, avg. samples / sec: 971.77
Iteration:   2820, Loss function: 5.389, Average Loss: 5.507, avg. samples / sec: 1054.45
Iteration:   2840, Loss function: 4.989, Average Loss: 5.503, avg. samples / sec: 972.40
Iteration:   2860, Loss function: 5.187, Average Loss: 5.497, avg. samples / sec: 1048.49
Iteration:   2880, Loss function: 5.172, Average Loss: 5.493, avg. samples / sec: 1019.43
Iteration:   2900, Loss function: 5.113, Average Loss: 5.488, avg. samples / sec: 983.61
Iteration:   2920, Loss function: 5.281, Average Loss: 5.482, avg. samples / sec: 1011.89
Iteration:   2940, Loss function: 4.891, Average Loss: 5.478, avg. samples / sec: 999.41
Iteration:   2960, Loss function: 5.347, Average Loss: 5.474, avg. samples / sec: 911.21
Iteration:   2980, Loss function: 5.104, Average Loss: 5.470, avg. samples / sec: 1017.00
Iteration:   3000, Loss function: 5.214, Average Loss: 5.466, avg. samples / sec: 1038.79
Iteration:   3020, Loss function: 5.340, Average Loss: 5.459, avg. samples / sec: 1015.66
Iteration:   3040, Loss function: 5.165, Average Loss: 5.453, avg. samples / sec: 951.85
Iteration:   3060, Loss function: 5.019, Average Loss: 5.448, avg. samples / sec: 975.84
Iteration:   3080, Loss function: 4.983, Average Loss: 5.443, avg. samples / sec: 1015.56
:::MLLOG {"namespace": "", "time_ms": 1639752839184, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752839186, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.277, Average Loss: 5.438, avg. samples / sec: 1065.92
Iteration:   3120, Loss function: 4.921, Average Loss: 5.431, avg. samples / sec: 997.00
Iteration:   3140, Loss function: 5.282, Average Loss: 5.426, avg. samples / sec: 974.21
Iteration:   3160, Loss function: 5.537, Average Loss: 5.420, avg. samples / sec: 1045.45
Iteration:   3180, Loss function: 5.138, Average Loss: 5.415, avg. samples / sec: 980.85
Iteration:   3200, Loss function: 5.383, Average Loss: 5.410, avg. samples / sec: 921.21
Iteration:   3220, Loss function: 5.181, Average Loss: 5.405, avg. samples / sec: 1053.85
Iteration:   3240, Loss function: 5.192, Average Loss: 5.400, avg. samples / sec: 1015.89
Iteration:   3260, Loss function: 5.053, Average Loss: 5.394, avg. samples / sec: 972.23
Iteration:   3280, Loss function: 4.750, Average Loss: 5.388, avg. samples / sec: 961.40
Iteration:   3300, Loss function: 4.728, Average Loss: 5.382, avg. samples / sec: 1015.00
Iteration:   3320, Loss function: 4.942, Average Loss: 5.377, avg. samples / sec: 1006.07
Iteration:   3340, Loss function: 5.181, Average Loss: 5.373, avg. samples / sec: 977.93
Iteration:   3360, Loss function: 5.208, Average Loss: 5.367, avg. samples / sec: 999.22
Iteration:   3380, Loss function: 5.238, Average Loss: 5.362, avg. samples / sec: 986.66
Iteration:   3400, Loss function: 4.978, Average Loss: 5.358, avg. samples / sec: 954.37
Iteration:   3420, Loss function: 5.170, Average Loss: 5.352, avg. samples / sec: 998.57
Iteration:   3440, Loss function: 4.872, Average Loss: 5.347, avg. samples / sec: 943.91
Iteration:   3460, Loss function: 5.216, Average Loss: 5.342, avg. samples / sec: 1030.62
Iteration:   3480, Loss function: 5.170, Average Loss: 5.337, avg. samples / sec: 941.29
Iteration:   3500, Loss function: 5.110, Average Loss: 5.333, avg. samples / sec: 973.63
Iteration:   3520, Loss function: 5.128, Average Loss: 5.329, avg. samples / sec: 934.43
Iteration:   3540, Loss function: 4.923, Average Loss: 5.324, avg. samples / sec: 985.73
Iteration:   3560, Loss function: 4.842, Average Loss: 5.319, avg. samples / sec: 1031.80
Iteration:   3580, Loss function: 4.990, Average Loss: 5.314, avg. samples / sec: 959.83
Iteration:   3600, Loss function: 5.199, Average Loss: 5.308, avg. samples / sec: 1040.37
Iteration:   3620, Loss function: 4.792, Average Loss: 5.303, avg. samples / sec: 1004.63
Iteration:   3640, Loss function: 4.705, Average Loss: 5.296, avg. samples / sec: 1016.67
Iteration:   3660, Loss function: 4.982, Average Loss: 5.291, avg. samples / sec: 1037.37
Iteration:   3680, Loss function: 5.423, Average Loss: 5.286, avg. samples / sec: 979.17
Iteration:   3700, Loss function: 5.103, Average Loss: 5.281, avg. samples / sec: 1013.07
Iteration:   3720, Loss function: 4.904, Average Loss: 5.275, avg. samples / sec: 994.01
Iteration:   3740, Loss function: 5.079, Average Loss: 5.271, avg. samples / sec: 1011.80
Iteration:   3760, Loss function: 5.040, Average Loss: 5.267, avg. samples / sec: 1057.63
Iteration:   3780, Loss function: 5.051, Average Loss: 5.263, avg. samples / sec: 978.42
Iteration:   3800, Loss function: 5.096, Average Loss: 5.261, avg. samples / sec: 976.34
Iteration:   3820, Loss function: 5.186, Average Loss: 5.256, avg. samples / sec: 1020.61
Iteration:   3840, Loss function: 4.789, Average Loss: 5.251, avg. samples / sec: 970.68
Iteration:   3860, Loss function: 4.859, Average Loss: 5.246, avg. samples / sec: 912.46
Iteration:   3880, Loss function: 5.186, Average Loss: 5.241, avg. samples / sec: 947.89
Iteration:   3900, Loss function: 5.004, Average Loss: 5.236, avg. samples / sec: 963.14
Iteration:   3920, Loss function: 5.067, Average Loss: 5.230, avg. samples / sec: 1018.94
Iteration:   3940, Loss function: 5.038, Average Loss: 5.224, avg. samples / sec: 1068.56
Iteration:   3960, Loss function: 4.892, Average Loss: 5.220, avg. samples / sec: 1033.02
Iteration:   3980, Loss function: 4.747, Average Loss: 5.216, avg. samples / sec: 915.67
Iteration:   4000, Loss function: 5.238, Average Loss: 5.211, avg. samples / sec: 957.60
Iteration:   4020, Loss function: 4.947, Average Loss: 5.207, avg. samples / sec: 1064.42
Iteration:   4040, Loss function: 4.903, Average Loss: 5.203, avg. samples / sec: 1016.90
Iteration:   4060, Loss function: 5.151, Average Loss: 5.199, avg. samples / sec: 992.38
Iteration:   4080, Loss function: 5.210, Average Loss: 5.196, avg. samples / sec: 985.67
Iteration:   4100, Loss function: 5.080, Average Loss: 5.193, avg. samples / sec: 978.95
:::MLLOG {"namespace": "", "time_ms": 1639752957607, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752957609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.104, Average Loss: 5.188, avg. samples / sec: 935.88
Iteration:   4140, Loss function: 4.832, Average Loss: 5.183, avg. samples / sec: 1042.56
Iteration:   4160, Loss function: 4.931, Average Loss: 5.177, avg. samples / sec: 925.05
Iteration:   4180, Loss function: 4.970, Average Loss: 5.171, avg. samples / sec: 1018.62
Iteration:   4200, Loss function: 4.910, Average Loss: 5.166, avg. samples / sec: 964.20
Iteration:   4220, Loss function: 4.678, Average Loss: 5.161, avg. samples / sec: 980.22
Iteration:   4240, Loss function: 5.016, Average Loss: 5.157, avg. samples / sec: 956.79
Iteration:   4260, Loss function: 5.198, Average Loss: 5.153, avg. samples / sec: 992.03
Iteration:   4280, Loss function: 5.033, Average Loss: 5.147, avg. samples / sec: 983.84
Iteration:   4300, Loss function: 4.761, Average Loss: 5.140, avg. samples / sec: 918.20
Iteration:   4320, Loss function: 4.967, Average Loss: 5.136, avg. samples / sec: 1081.91
Iteration:   4340, Loss function: 4.800, Average Loss: 5.130, avg. samples / sec: 1000.56
Iteration:   4360, Loss function: 4.908, Average Loss: 5.126, avg. samples / sec: 964.68
Iteration:   4380, Loss function: 4.925, Average Loss: 5.121, avg. samples / sec: 971.81
Iteration:   4400, Loss function: 4.820, Average Loss: 5.118, avg. samples / sec: 1103.07
Iteration:   4420, Loss function: 4.821, Average Loss: 5.112, avg. samples / sec: 1007.87
Iteration:   4440, Loss function: 4.929, Average Loss: 5.107, avg. samples / sec: 969.97
Iteration:   4460, Loss function: 5.209, Average Loss: 5.103, avg. samples / sec: 1023.86
Iteration:   4480, Loss function: 4.963, Average Loss: 5.099, avg. samples / sec: 988.57
Iteration:   4500, Loss function: 4.900, Average Loss: 5.095, avg. samples / sec: 1005.05
Iteration:   4520, Loss function: 4.752, Average Loss: 5.091, avg. samples / sec: 1013.51
Iteration:   4540, Loss function: 5.081, Average Loss: 5.087, avg. samples / sec: 1021.16
Iteration:   4560, Loss function: 4.716, Average Loss: 5.083, avg. samples / sec: 1083.36
Iteration:   4580, Loss function: 4.629, Average Loss: 5.080, avg. samples / sec: 984.04
Iteration:   4600, Loss function: 4.728, Average Loss: 5.077, avg. samples / sec: 990.89
Iteration:   4620, Loss function: 4.759, Average Loss: 5.072, avg. samples / sec: 991.13
Iteration:   4640, Loss function: 4.900, Average Loss: 5.067, avg. samples / sec: 1031.36
Iteration:   4660, Loss function: 4.747, Average Loss: 5.063, avg. samples / sec: 1042.38
Iteration:   4680, Loss function: 5.138, Average Loss: 5.059, avg. samples / sec: 1079.20
Iteration:   4700, Loss function: 4.817, Average Loss: 5.055, avg. samples / sec: 960.01
Iteration:   4720, Loss function: 4.769, Average Loss: 5.050, avg. samples / sec: 1044.35
Iteration:   4740, Loss function: 4.706, Average Loss: 5.045, avg. samples / sec: 1015.83
Iteration:   4760, Loss function: 4.626, Average Loss: 5.041, avg. samples / sec: 1052.47
Iteration:   4780, Loss function: 5.108, Average Loss: 5.037, avg. samples / sec: 1030.22
Iteration:   4800, Loss function: 4.843, Average Loss: 5.033, avg. samples / sec: 1035.27
Iteration:   4820, Loss function: 4.761, Average Loss: 5.030, avg. samples / sec: 962.16
Iteration:   4840, Loss function: 5.099, Average Loss: 5.027, avg. samples / sec: 960.75
Iteration:   4860, Loss function: 4.842, Average Loss: 5.022, avg. samples / sec: 1015.97
Iteration:   4880, Loss function: 5.153, Average Loss: 5.019, avg. samples / sec: 958.40
Iteration:   4900, Loss function: 4.780, Average Loss: 5.014, avg. samples / sec: 1076.53
Iteration:   4920, Loss function: 4.788, Average Loss: 5.011, avg. samples / sec: 1043.99
Iteration:   4940, Loss function: 4.857, Average Loss: 5.008, avg. samples / sec: 978.59
Iteration:   4960, Loss function: 4.661, Average Loss: 5.005, avg. samples / sec: 1040.98
Iteration:   4980, Loss function: 4.561, Average Loss: 5.000, avg. samples / sec: 971.00
Iteration:   5000, Loss function: 4.936, Average Loss: 4.996, avg. samples / sec: 1035.99
Iteration:   5020, Loss function: 5.016, Average Loss: 4.994, avg. samples / sec: 1072.51
Iteration:   5040, Loss function: 4.817, Average Loss: 4.991, avg. samples / sec: 991.53
Iteration:   5060, Loss function: 4.878, Average Loss: 4.987, avg. samples / sec: 1013.54
Iteration:   5080, Loss function: 4.583, Average Loss: 4.983, avg. samples / sec: 1019.04
Iteration:   5100, Loss function: 4.795, Average Loss: 4.980, avg. samples / sec: 1014.47
Iteration:   5120, Loss function: 4.629, Average Loss: 4.977, avg. samples / sec: 1049.82
Iteration:   5140, Loss function: 4.777, Average Loss: 4.973, avg. samples / sec: 1151.78
:::MLLOG {"namespace": "", "time_ms": 1639753073709, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.78 s
:::MLLOG {"namespace": "", "time_ms": 1639753106580, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753106687, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753106687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.03s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.126, Average Loss: 4.970, avg. samples / sec: 64.81
Iteration:   5180, Loss function: 4.831, Average Loss: 4.966, avg. samples / sec: 1033.98
DONE (t=4.62s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10659
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09363
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19041
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13759
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10659 AP goal: 0.10000
Iteration:   5200, Loss function: 4.680, Average Loss: 4.963, avg. samples / sec: 1218.81
:::MLLOG {"namespace": "", "time_ms": 1639753112655, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112656, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10659182288839261, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112656, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112844, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 14:58:34 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 14:58:34 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639752456266, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639752456438, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3429559176, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3429559176
:::MLLOG {"namespace": "", "time_ms": 1639752458148, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639752458148, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639752458152, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639752458153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639752481062, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639752481062, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639752482979, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639752482981, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639752483265, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639752483266, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639752483267, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.098, Average Loss: 0.023, avg. samples / sec: 4.59
Iteration:     20, Loss function: 20.999, Average Loss: 0.458, avg. samples / sec: 981.76
Iteration:     40, Loss function: 20.835, Average Loss: 0.861, avg. samples / sec: 984.64
Iteration:     60, Loss function: 20.462, Average Loss: 1.251, avg. samples / sec: 946.75
Iteration:     80, Loss function: 20.026, Average Loss: 1.625, avg. samples / sec: 988.86
Iteration:    100, Loss function: 15.786, Average Loss: 1.955, avg. samples / sec: 983.95
Iteration:    120, Loss function: 11.187, Average Loss: 2.168, avg. samples / sec: 990.56
Iteration:    140, Loss function: 9.658, Average Loss: 2.323, avg. samples / sec: 983.66
Iteration:    160, Loss function: 9.166, Average Loss: 2.463, avg. samples / sec: 986.04
Iteration:    180, Loss function: 8.950, Average Loss: 2.592, avg. samples / sec: 925.88
Iteration:    200, Loss function: 8.720, Average Loss: 2.716, avg. samples / sec: 907.41
Iteration:    220, Loss function: 8.652, Average Loss: 2.838, avg. samples / sec: 933.13
Iteration:    240, Loss function: 8.495, Average Loss: 2.956, avg. samples / sec: 1013.01
Iteration:    260, Loss function: 8.568, Average Loss: 3.068, avg. samples / sec: 962.47
Iteration:    280, Loss function: 8.409, Average Loss: 3.177, avg. samples / sec: 1016.08
Iteration:    300, Loss function: 8.275, Average Loss: 3.279, avg. samples / sec: 1043.53
Iteration:    320, Loss function: 8.630, Average Loss: 3.380, avg. samples / sec: 962.02
Iteration:    340, Loss function: 8.274, Average Loss: 3.480, avg. samples / sec: 991.81
Iteration:    360, Loss function: 8.070, Average Loss: 3.573, avg. samples / sec: 966.53
Iteration:    380, Loss function: 7.829, Average Loss: 3.661, avg. samples / sec: 967.37
Iteration:    400, Loss function: 8.092, Average Loss: 3.746, avg. samples / sec: 1016.40
Iteration:    420, Loss function: 7.619, Average Loss: 3.831, avg. samples / sec: 941.83
Iteration:    440, Loss function: 7.882, Average Loss: 3.910, avg. samples / sec: 972.22
Iteration:    460, Loss function: 7.730, Average Loss: 3.986, avg. samples / sec: 869.39
Iteration:    480, Loss function: 7.482, Average Loss: 4.059, avg. samples / sec: 968.92
Iteration:    500, Loss function: 7.570, Average Loss: 4.129, avg. samples / sec: 971.11
Iteration:    520, Loss function: 7.748, Average Loss: 4.197, avg. samples / sec: 763.79
Iteration:    540, Loss function: 7.506, Average Loss: 4.263, avg. samples / sec: 919.99
Iteration:    560, Loss function: 7.453, Average Loss: 4.327, avg. samples / sec: 966.80
Iteration:    580, Loss function: 7.363, Average Loss: 4.388, avg. samples / sec: 968.82
Iteration:    600, Loss function: 7.181, Average Loss: 4.446, avg. samples / sec: 1019.49
Iteration:    620, Loss function: 7.162, Average Loss: 4.501, avg. samples / sec: 1002.06
Iteration:    640, Loss function: 6.947, Average Loss: 4.556, avg. samples / sec: 1054.33
Iteration:    660, Loss function: 7.046, Average Loss: 4.608, avg. samples / sec: 954.59
Iteration:    680, Loss function: 7.268, Average Loss: 4.659, avg. samples / sec: 1053.31
Iteration:    700, Loss function: 6.846, Average Loss: 4.707, avg. samples / sec: 939.94
Iteration:    720, Loss function: 6.992, Average Loss: 4.755, avg. samples / sec: 1018.41
Iteration:    740, Loss function: 6.841, Average Loss: 4.800, avg. samples / sec: 1043.38
Iteration:    760, Loss function: 7.058, Average Loss: 4.842, avg. samples / sec: 978.14
Iteration:    780, Loss function: 6.929, Average Loss: 4.884, avg. samples / sec: 1046.09
Iteration:    800, Loss function: 7.083, Average Loss: 4.923, avg. samples / sec: 1067.21
Iteration:    820, Loss function: 6.859, Average Loss: 4.962, avg. samples / sec: 918.79
Iteration:    840, Loss function: 6.925, Average Loss: 4.998, avg. samples / sec: 976.46
Iteration:    860, Loss function: 6.958, Average Loss: 5.033, avg. samples / sec: 1003.81
Iteration:    880, Loss function: 6.728, Average Loss: 5.065, avg. samples / sec: 1094.91
Iteration:    900, Loss function: 6.647, Average Loss: 5.096, avg. samples / sec: 966.93
Iteration:    920, Loss function: 6.902, Average Loss: 5.126, avg. samples / sec: 999.66
Iteration:    940, Loss function: 6.696, Average Loss: 5.156, avg. samples / sec: 926.68
Iteration:    960, Loss function: 6.397, Average Loss: 5.184, avg. samples / sec: 965.70
Iteration:    980, Loss function: 6.334, Average Loss: 5.212, avg. samples / sec: 978.56
Iteration:   1000, Loss function: 6.578, Average Loss: 5.237, avg. samples / sec: 1023.84
Iteration:   1020, Loss function: 6.446, Average Loss: 5.260, avg. samples / sec: 960.93
:::MLLOG {"namespace": "", "time_ms": 1639752603441, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639752603443, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.688, Average Loss: 5.286, avg. samples / sec: 1013.79
Iteration:   1060, Loss function: 6.367, Average Loss: 5.309, avg. samples / sec: 780.35
Iteration:   1080, Loss function: 6.310, Average Loss: 5.331, avg. samples / sec: 1003.82
Iteration:   1100, Loss function: 6.234, Average Loss: 5.350, avg. samples / sec: 1046.20
Iteration:   1120, Loss function: 6.191, Average Loss: 5.370, avg. samples / sec: 984.99
Iteration:   1140, Loss function: 6.397, Average Loss: 5.389, avg. samples / sec: 996.90
Iteration:   1160, Loss function: 6.140, Average Loss: 5.406, avg. samples / sec: 1059.08
Iteration:   1180, Loss function: 6.328, Average Loss: 5.423, avg. samples / sec: 962.67
Iteration:   1200, Loss function: 6.320, Average Loss: 5.439, avg. samples / sec: 949.53
Iteration:   1220, Loss function: 6.216, Average Loss: 5.455, avg. samples / sec: 932.55
Iteration:   1240, Loss function: 6.018, Average Loss: 5.468, avg. samples / sec: 1013.29
Iteration:   1260, Loss function: 6.099, Average Loss: 5.481, avg. samples / sec: 984.46
Iteration:   1280, Loss function: 5.975, Average Loss: 5.494, avg. samples / sec: 984.22
Iteration:   1300, Loss function: 6.160, Average Loss: 5.507, avg. samples / sec: 948.23
Iteration:   1320, Loss function: 6.065, Average Loss: 5.519, avg. samples / sec: 984.70
Iteration:   1340, Loss function: 5.873, Average Loss: 5.529, avg. samples / sec: 1033.96
Iteration:   1360, Loss function: 6.033, Average Loss: 5.539, avg. samples / sec: 965.91
Iteration:   1380, Loss function: 6.198, Average Loss: 5.548, avg. samples / sec: 1064.60
Iteration:   1400, Loss function: 6.199, Average Loss: 5.557, avg. samples / sec: 1054.68
Iteration:   1420, Loss function: 5.957, Average Loss: 5.565, avg. samples / sec: 945.55
Iteration:   1440, Loss function: 6.478, Average Loss: 5.573, avg. samples / sec: 1000.02
Iteration:   1460, Loss function: 6.192, Average Loss: 5.581, avg. samples / sec: 1055.99
Iteration:   1480, Loss function: 5.773, Average Loss: 5.588, avg. samples / sec: 1004.60
Iteration:   1500, Loss function: 5.922, Average Loss: 5.596, avg. samples / sec: 1038.09
Iteration:   1520, Loss function: 5.883, Average Loss: 5.602, avg. samples / sec: 1021.46
Iteration:   1540, Loss function: 6.069, Average Loss: 5.605, avg. samples / sec: 976.00
Iteration:   1560, Loss function: 5.610, Average Loss: 5.610, avg. samples / sec: 1057.69
Iteration:   1580, Loss function: 5.588, Average Loss: 5.615, avg. samples / sec: 1015.73
Iteration:   1600, Loss function: 6.132, Average Loss: 5.621, avg. samples / sec: 1007.43
Iteration:   1620, Loss function: 5.970, Average Loss: 5.626, avg. samples / sec: 1037.63
Iteration:   1640, Loss function: 5.983, Average Loss: 5.630, avg. samples / sec: 1028.45
Iteration:   1660, Loss function: 5.713, Average Loss: 5.633, avg. samples / sec: 995.32
Iteration:   1680, Loss function: 5.735, Average Loss: 5.637, avg. samples / sec: 1000.84
Iteration:   1700, Loss function: 5.374, Average Loss: 5.640, avg. samples / sec: 939.84
Iteration:   1720, Loss function: 5.623, Average Loss: 5.641, avg. samples / sec: 930.06
Iteration:   1740, Loss function: 5.941, Average Loss: 5.643, avg. samples / sec: 929.45
Iteration:   1760, Loss function: 5.577, Average Loss: 5.645, avg. samples / sec: 969.52
Iteration:   1780, Loss function: 5.726, Average Loss: 5.646, avg. samples / sec: 932.94
Iteration:   1800, Loss function: 5.818, Average Loss: 5.648, avg. samples / sec: 1018.03
Iteration:   1820, Loss function: 5.860, Average Loss: 5.650, avg. samples / sec: 995.92
Iteration:   1840, Loss function: 5.898, Average Loss: 5.650, avg. samples / sec: 983.46
Iteration:   1860, Loss function: 5.600, Average Loss: 5.650, avg. samples / sec: 990.45
Iteration:   1880, Loss function: 5.804, Average Loss: 5.651, avg. samples / sec: 950.99
Iteration:   1900, Loss function: 5.853, Average Loss: 5.651, avg. samples / sec: 966.60
Iteration:   1920, Loss function: 5.848, Average Loss: 5.651, avg. samples / sec: 992.27
Iteration:   1940, Loss function: 5.736, Average Loss: 5.652, avg. samples / sec: 1006.47
Iteration:   1960, Loss function: 5.502, Average Loss: 5.651, avg. samples / sec: 986.12
Iteration:   1980, Loss function: 5.670, Average Loss: 5.650, avg. samples / sec: 939.33
Iteration:   2000, Loss function: 5.601, Average Loss: 5.650, avg. samples / sec: 1003.01
Iteration:   2020, Loss function: 5.553, Average Loss: 5.648, avg. samples / sec: 962.42
Iteration:   2040, Loss function: 5.657, Average Loss: 5.647, avg. samples / sec: 969.43
:::MLLOG {"namespace": "", "time_ms": 1639752722404, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639752722406, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.331, Average Loss: 5.645, avg. samples / sec: 1044.62
Iteration:   2080, Loss function: 5.180, Average Loss: 5.642, avg. samples / sec: 1001.47
Iteration:   2100, Loss function: 5.517, Average Loss: 5.640, avg. samples / sec: 978.69
Iteration:   2120, Loss function: 5.357, Average Loss: 5.637, avg. samples / sec: 1015.63
Iteration:   2140, Loss function: 5.483, Average Loss: 5.634, avg. samples / sec: 1046.90
Iteration:   2160, Loss function: 5.445, Average Loss: 5.631, avg. samples / sec: 998.84
Iteration:   2180, Loss function: 5.407, Average Loss: 5.629, avg. samples / sec: 945.21
Iteration:   2200, Loss function: 5.423, Average Loss: 5.625, avg. samples / sec: 1010.52
Iteration:   2220, Loss function: 5.543, Average Loss: 5.623, avg. samples / sec: 1008.49
Iteration:   2240, Loss function: 5.487, Average Loss: 5.620, avg. samples / sec: 1032.37
Iteration:   2260, Loss function: 5.345, Average Loss: 5.616, avg. samples / sec: 978.81
Iteration:   2280, Loss function: 5.307, Average Loss: 5.613, avg. samples / sec: 1038.99
Iteration:   2300, Loss function: 5.147, Average Loss: 5.609, avg. samples / sec: 997.46
Iteration:   2320, Loss function: 5.134, Average Loss: 5.606, avg. samples / sec: 876.44
Iteration:   2340, Loss function: 5.419, Average Loss: 5.602, avg. samples / sec: 1004.18
Iteration:   2360, Loss function: 5.425, Average Loss: 5.598, avg. samples / sec: 1041.29
Iteration:   2380, Loss function: 5.254, Average Loss: 5.594, avg. samples / sec: 1045.16
Iteration:   2400, Loss function: 5.694, Average Loss: 5.590, avg. samples / sec: 1015.40
Iteration:   2420, Loss function: 5.470, Average Loss: 5.587, avg. samples / sec: 979.22
Iteration:   2440, Loss function: 5.480, Average Loss: 5.585, avg. samples / sec: 1018.78
Iteration:   2460, Loss function: 5.295, Average Loss: 5.582, avg. samples / sec: 1014.22
Iteration:   2480, Loss function: 5.364, Average Loss: 5.578, avg. samples / sec: 1050.37
Iteration:   2500, Loss function: 5.418, Average Loss: 5.574, avg. samples / sec: 1045.92
Iteration:   2520, Loss function: 5.368, Average Loss: 5.569, avg. samples / sec: 967.16
Iteration:   2540, Loss function: 5.359, Average Loss: 5.565, avg. samples / sec: 1074.56
Iteration:   2560, Loss function: 5.354, Average Loss: 5.561, avg. samples / sec: 1003.94
Iteration:   2580, Loss function: 5.254, Average Loss: 5.558, avg. samples / sec: 954.37
Iteration:   2600, Loss function: 5.548, Average Loss: 5.556, avg. samples / sec: 984.62
Iteration:   2620, Loss function: 5.425, Average Loss: 5.550, avg. samples / sec: 1054.62
Iteration:   2640, Loss function: 5.185, Average Loss: 5.546, avg. samples / sec: 1019.82
Iteration:   2660, Loss function: 5.454, Average Loss: 5.543, avg. samples / sec: 970.69
Iteration:   2680, Loss function: 5.192, Average Loss: 5.539, avg. samples / sec: 1049.99
Iteration:   2700, Loss function: 5.227, Average Loss: 5.533, avg. samples / sec: 1079.39
Iteration:   2720, Loss function: 5.393, Average Loss: 5.529, avg. samples / sec: 1003.24
Iteration:   2740, Loss function: 5.188, Average Loss: 5.526, avg. samples / sec: 1003.10
Iteration:   2760, Loss function: 4.959, Average Loss: 5.521, avg. samples / sec: 925.70
Iteration:   2780, Loss function: 5.363, Average Loss: 5.517, avg. samples / sec: 1017.40
Iteration:   2800, Loss function: 5.290, Average Loss: 5.512, avg. samples / sec: 971.77
Iteration:   2820, Loss function: 5.389, Average Loss: 5.507, avg. samples / sec: 1054.45
Iteration:   2840, Loss function: 4.989, Average Loss: 5.503, avg. samples / sec: 972.40
Iteration:   2860, Loss function: 5.187, Average Loss: 5.497, avg. samples / sec: 1048.49
Iteration:   2880, Loss function: 5.172, Average Loss: 5.493, avg. samples / sec: 1019.43
Iteration:   2900, Loss function: 5.113, Average Loss: 5.488, avg. samples / sec: 983.61
Iteration:   2920, Loss function: 5.281, Average Loss: 5.482, avg. samples / sec: 1011.89
Iteration:   2940, Loss function: 4.891, Average Loss: 5.478, avg. samples / sec: 999.41
Iteration:   2960, Loss function: 5.347, Average Loss: 5.474, avg. samples / sec: 911.21
Iteration:   2980, Loss function: 5.104, Average Loss: 5.470, avg. samples / sec: 1017.00
Iteration:   3000, Loss function: 5.214, Average Loss: 5.466, avg. samples / sec: 1038.79
Iteration:   3020, Loss function: 5.340, Average Loss: 5.459, avg. samples / sec: 1015.66
Iteration:   3040, Loss function: 5.165, Average Loss: 5.453, avg. samples / sec: 951.85
Iteration:   3060, Loss function: 5.019, Average Loss: 5.448, avg. samples / sec: 975.84
Iteration:   3080, Loss function: 4.983, Average Loss: 5.443, avg. samples / sec: 1015.56
:::MLLOG {"namespace": "", "time_ms": 1639752839184, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639752839186, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.277, Average Loss: 5.438, avg. samples / sec: 1065.92
Iteration:   3120, Loss function: 4.921, Average Loss: 5.431, avg. samples / sec: 997.00
Iteration:   3140, Loss function: 5.282, Average Loss: 5.426, avg. samples / sec: 974.21
Iteration:   3160, Loss function: 5.537, Average Loss: 5.420, avg. samples / sec: 1045.45
Iteration:   3180, Loss function: 5.138, Average Loss: 5.415, avg. samples / sec: 980.85
Iteration:   3200, Loss function: 5.383, Average Loss: 5.410, avg. samples / sec: 921.21
Iteration:   3220, Loss function: 5.181, Average Loss: 5.405, avg. samples / sec: 1053.85
Iteration:   3240, Loss function: 5.192, Average Loss: 5.400, avg. samples / sec: 1015.89
Iteration:   3260, Loss function: 5.053, Average Loss: 5.394, avg. samples / sec: 972.23
Iteration:   3280, Loss function: 4.750, Average Loss: 5.388, avg. samples / sec: 961.40
Iteration:   3300, Loss function: 4.728, Average Loss: 5.382, avg. samples / sec: 1015.00
Iteration:   3320, Loss function: 4.942, Average Loss: 5.377, avg. samples / sec: 1006.07
Iteration:   3340, Loss function: 5.181, Average Loss: 5.373, avg. samples / sec: 977.93
Iteration:   3360, Loss function: 5.208, Average Loss: 5.367, avg. samples / sec: 999.22
Iteration:   3380, Loss function: 5.238, Average Loss: 5.362, avg. samples / sec: 986.66
Iteration:   3400, Loss function: 4.978, Average Loss: 5.358, avg. samples / sec: 954.37
Iteration:   3420, Loss function: 5.170, Average Loss: 5.352, avg. samples / sec: 998.57
Iteration:   3440, Loss function: 4.872, Average Loss: 5.347, avg. samples / sec: 943.91
Iteration:   3460, Loss function: 5.216, Average Loss: 5.342, avg. samples / sec: 1030.62
Iteration:   3480, Loss function: 5.170, Average Loss: 5.337, avg. samples / sec: 941.29
Iteration:   3500, Loss function: 5.110, Average Loss: 5.333, avg. samples / sec: 973.63
Iteration:   3520, Loss function: 5.128, Average Loss: 5.329, avg. samples / sec: 934.43
Iteration:   3540, Loss function: 4.923, Average Loss: 5.324, avg. samples / sec: 985.73
Iteration:   3560, Loss function: 4.842, Average Loss: 5.319, avg. samples / sec: 1031.80
Iteration:   3580, Loss function: 4.990, Average Loss: 5.314, avg. samples / sec: 959.83
Iteration:   3600, Loss function: 5.199, Average Loss: 5.308, avg. samples / sec: 1040.37
Iteration:   3620, Loss function: 4.792, Average Loss: 5.303, avg. samples / sec: 1004.63
Iteration:   3640, Loss function: 4.705, Average Loss: 5.296, avg. samples / sec: 1016.67
Iteration:   3660, Loss function: 4.982, Average Loss: 5.291, avg. samples / sec: 1037.37
Iteration:   3680, Loss function: 5.423, Average Loss: 5.286, avg. samples / sec: 979.17
Iteration:   3700, Loss function: 5.103, Average Loss: 5.281, avg. samples / sec: 1013.07
Iteration:   3720, Loss function: 4.904, Average Loss: 5.275, avg. samples / sec: 994.01
Iteration:   3740, Loss function: 5.079, Average Loss: 5.271, avg. samples / sec: 1011.80
Iteration:   3760, Loss function: 5.040, Average Loss: 5.267, avg. samples / sec: 1057.63
Iteration:   3780, Loss function: 5.051, Average Loss: 5.263, avg. samples / sec: 978.42
Iteration:   3800, Loss function: 5.096, Average Loss: 5.261, avg. samples / sec: 976.34
Iteration:   3820, Loss function: 5.186, Average Loss: 5.256, avg. samples / sec: 1020.61
Iteration:   3840, Loss function: 4.789, Average Loss: 5.251, avg. samples / sec: 970.68
Iteration:   3860, Loss function: 4.859, Average Loss: 5.246, avg. samples / sec: 912.46
Iteration:   3880, Loss function: 5.186, Average Loss: 5.241, avg. samples / sec: 947.89
Iteration:   3900, Loss function: 5.004, Average Loss: 5.236, avg. samples / sec: 963.14
Iteration:   3920, Loss function: 5.067, Average Loss: 5.230, avg. samples / sec: 1018.94
Iteration:   3940, Loss function: 5.038, Average Loss: 5.224, avg. samples / sec: 1068.56
Iteration:   3960, Loss function: 4.892, Average Loss: 5.220, avg. samples / sec: 1033.02
Iteration:   3980, Loss function: 4.747, Average Loss: 5.216, avg. samples / sec: 915.67
Iteration:   4000, Loss function: 5.238, Average Loss: 5.211, avg. samples / sec: 957.60
Iteration:   4020, Loss function: 4.947, Average Loss: 5.207, avg. samples / sec: 1064.42
Iteration:   4040, Loss function: 4.903, Average Loss: 5.203, avg. samples / sec: 1016.90
Iteration:   4060, Loss function: 5.151, Average Loss: 5.199, avg. samples / sec: 992.38
Iteration:   4080, Loss function: 5.210, Average Loss: 5.196, avg. samples / sec: 985.67
Iteration:   4100, Loss function: 5.080, Average Loss: 5.193, avg. samples / sec: 978.95
:::MLLOG {"namespace": "", "time_ms": 1639752957607, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639752957609, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.104, Average Loss: 5.188, avg. samples / sec: 935.88
Iteration:   4140, Loss function: 4.832, Average Loss: 5.183, avg. samples / sec: 1042.56
Iteration:   4160, Loss function: 4.931, Average Loss: 5.177, avg. samples / sec: 925.05
Iteration:   4180, Loss function: 4.970, Average Loss: 5.171, avg. samples / sec: 1018.62
Iteration:   4200, Loss function: 4.910, Average Loss: 5.166, avg. samples / sec: 964.20
Iteration:   4220, Loss function: 4.678, Average Loss: 5.161, avg. samples / sec: 980.22
Iteration:   4240, Loss function: 5.016, Average Loss: 5.157, avg. samples / sec: 956.79
Iteration:   4260, Loss function: 5.198, Average Loss: 5.153, avg. samples / sec: 992.03
Iteration:   4280, Loss function: 5.033, Average Loss: 5.147, avg. samples / sec: 983.84
Iteration:   4300, Loss function: 4.761, Average Loss: 5.140, avg. samples / sec: 918.20
Iteration:   4320, Loss function: 4.967, Average Loss: 5.136, avg. samples / sec: 1081.91
Iteration:   4340, Loss function: 4.800, Average Loss: 5.130, avg. samples / sec: 1000.56
Iteration:   4360, Loss function: 4.908, Average Loss: 5.126, avg. samples / sec: 964.68
Iteration:   4380, Loss function: 4.925, Average Loss: 5.121, avg. samples / sec: 971.81
Iteration:   4400, Loss function: 4.820, Average Loss: 5.118, avg. samples / sec: 1103.07
Iteration:   4420, Loss function: 4.821, Average Loss: 5.112, avg. samples / sec: 1007.87
Iteration:   4440, Loss function: 4.929, Average Loss: 5.107, avg. samples / sec: 969.97
Iteration:   4460, Loss function: 5.209, Average Loss: 5.103, avg. samples / sec: 1023.86
Iteration:   4480, Loss function: 4.963, Average Loss: 5.099, avg. samples / sec: 988.57
Iteration:   4500, Loss function: 4.900, Average Loss: 5.095, avg. samples / sec: 1005.05
Iteration:   4520, Loss function: 4.752, Average Loss: 5.091, avg. samples / sec: 1013.51
Iteration:   4540, Loss function: 5.081, Average Loss: 5.087, avg. samples / sec: 1021.16
Iteration:   4560, Loss function: 4.716, Average Loss: 5.083, avg. samples / sec: 1083.36
Iteration:   4580, Loss function: 4.629, Average Loss: 5.080, avg. samples / sec: 984.04
Iteration:   4600, Loss function: 4.728, Average Loss: 5.077, avg. samples / sec: 990.89
Iteration:   4620, Loss function: 4.759, Average Loss: 5.072, avg. samples / sec: 991.13
Iteration:   4640, Loss function: 4.900, Average Loss: 5.067, avg. samples / sec: 1031.36
Iteration:   4660, Loss function: 4.747, Average Loss: 5.063, avg. samples / sec: 1042.38
Iteration:   4680, Loss function: 5.138, Average Loss: 5.059, avg. samples / sec: 1079.20
Iteration:   4700, Loss function: 4.817, Average Loss: 5.055, avg. samples / sec: 960.01
Iteration:   4720, Loss function: 4.769, Average Loss: 5.050, avg. samples / sec: 1044.35
Iteration:   4740, Loss function: 4.706, Average Loss: 5.045, avg. samples / sec: 1015.83
Iteration:   4760, Loss function: 4.626, Average Loss: 5.041, avg. samples / sec: 1052.47
Iteration:   4780, Loss function: 5.108, Average Loss: 5.037, avg. samples / sec: 1030.22
Iteration:   4800, Loss function: 4.843, Average Loss: 5.033, avg. samples / sec: 1035.27
Iteration:   4820, Loss function: 4.761, Average Loss: 5.030, avg. samples / sec: 962.16
Iteration:   4840, Loss function: 5.099, Average Loss: 5.027, avg. samples / sec: 960.75
Iteration:   4860, Loss function: 4.842, Average Loss: 5.022, avg. samples / sec: 1015.97
Iteration:   4880, Loss function: 5.153, Average Loss: 5.019, avg. samples / sec: 958.40
Iteration:   4900, Loss function: 4.780, Average Loss: 5.014, avg. samples / sec: 1076.53
Iteration:   4920, Loss function: 4.788, Average Loss: 5.011, avg. samples / sec: 1043.99
Iteration:   4940, Loss function: 4.857, Average Loss: 5.008, avg. samples / sec: 978.59
Iteration:   4960, Loss function: 4.661, Average Loss: 5.005, avg. samples / sec: 1040.98
Iteration:   4980, Loss function: 4.561, Average Loss: 5.000, avg. samples / sec: 971.00
Iteration:   5000, Loss function: 4.936, Average Loss: 4.996, avg. samples / sec: 1035.99
Iteration:   5020, Loss function: 5.016, Average Loss: 4.994, avg. samples / sec: 1072.51
Iteration:   5040, Loss function: 4.817, Average Loss: 4.991, avg. samples / sec: 991.53
Iteration:   5060, Loss function: 4.878, Average Loss: 4.987, avg. samples / sec: 1013.54
Iteration:   5080, Loss function: 4.583, Average Loss: 4.983, avg. samples / sec: 1019.04
Iteration:   5100, Loss function: 4.795, Average Loss: 4.980, avg. samples / sec: 1014.47
Iteration:   5120, Loss function: 4.629, Average Loss: 4.977, avg. samples / sec: 1049.82
Iteration:   5140, Loss function: 4.777, Average Loss: 4.973, avg. samples / sec: 1151.78
:::MLLOG {"namespace": "", "time_ms": 1639753073709, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.78 s
:::MLLOG {"namespace": "", "time_ms": 1639753106580, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639753106687, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753106687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.03s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.126, Average Loss: 4.970, avg. samples / sec: 64.81
Iteration:   5180, Loss function: 4.831, Average Loss: 4.966, avg. samples / sec: 1033.98
DONE (t=4.62s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10659
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21800
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09363
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19041
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13759
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20242
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21419
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10659 AP goal: 0.10000
Iteration:   5200, Loss function: 4.680, Average Loss: 4.963, avg. samples / sec: 1218.81
:::MLLOG {"namespace": "", "time_ms": 1639753112655, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112656, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10659182288839261, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112656, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639753112844, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639753114
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 02:58:34 PM'
START TIMING RUN WAS 2021-12-17 02:47:29 PM
+ echo 'START TIMING RUN WAS 2021-12-17 02:47:29 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 02:58:34 PM'
ENDING TIMING RUN AT 2021-12-17 02:58:34 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
+ result=665
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,665,nvidia,2021-12-17 02:47:29 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,665,nvidia,2021-12-17 02:47:29 PM'
+ echo 'ALL FINISHED GPU: 1 x full x 8 Pods'
ALL FINISHED GPU: 1 x full x 8 Pods
