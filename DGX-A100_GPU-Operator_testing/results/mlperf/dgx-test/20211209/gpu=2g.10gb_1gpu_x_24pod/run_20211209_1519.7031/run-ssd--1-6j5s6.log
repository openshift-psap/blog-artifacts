+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-6j5s6.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-6j5s6.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-6j5s6.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-496ca377-45b5-53f0-96f5-35d0f05e0494
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494'
Found 1 MIG instances: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
Running in parallel mode.
Patching 'bind_launch.py' to err-exit on failure ...
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-6j5s6 to the sync file ...
run-ssd--1-6j5s6 Found 20 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
    14	run-ssd--1-wbth6
    15	run-ssd--1-4jg6j
    16	run-ssd--1-9qdbc
    17	run-ssd--1-6gxt2
    18	run-ssd--1-jx4zc
    19	run-ssd--1-d4qds
    20	run-ssd--1-6j5s6
Thu Dec  9 20:09:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585641, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586167, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3283000823, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3283000823
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080590278, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590279, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693495, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693496, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080700156, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080700157, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700500, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700501, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700502, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.127, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.036, Average Loss: 0.460, avg. samples / sec: 178.64
Iteration:     40, Loss function: 20.695, Average Loss: 0.862, avg. samples / sec: 251.89
Iteration:     60, Loss function: 20.271, Average Loss: 1.251, avg. samples / sec: 223.25
Iteration:     80, Loss function: 19.509, Average Loss: 1.622, avg. samples / sec: 252.86
Iteration:    100, Loss function: 14.174, Average Loss: 1.929, avg. samples / sec: 243.06
Iteration:    120, Loss function: 10.838, Average Loss: 2.121, avg. samples / sec: 245.81
Iteration:    140, Loss function: 9.547, Average Loss: 2.276, avg. samples / sec: 261.24
Iteration:    160, Loss function: 9.228, Average Loss: 2.415, avg. samples / sec: 276.16
Iteration:    180, Loss function: 9.023, Average Loss: 2.544, avg. samples / sec: 271.35
Iteration:    200, Loss function: 8.645, Average Loss: 2.669, avg. samples / sec: 296.03
Iteration:    220, Loss function: 8.753, Average Loss: 2.791, avg. samples / sec: 275.84
Iteration:    240, Loss function: 8.934, Average Loss: 2.913, avg. samples / sec: 272.84
Iteration:    260, Loss function: 8.451, Average Loss: 3.026, avg. samples / sec: 240.64
Iteration:    280, Loss function: 8.424, Average Loss: 3.135, avg. samples / sec: 315.56
Iteration:    300, Loss function: 8.305, Average Loss: 3.237, avg. samples / sec: 335.23
Iteration:    320, Loss function: 8.363, Average Loss: 3.338, avg. samples / sec: 322.74
Iteration:    340, Loss function: 8.172, Average Loss: 3.434, avg. samples / sec: 303.94
Iteration:    360, Loss function: 7.943, Average Loss: 3.527, avg. samples / sec: 321.55
Iteration:    380, Loss function: 7.882, Average Loss: 3.617, avg. samples / sec: 311.09
Iteration:    400, Loss function: 8.123, Average Loss: 3.702, avg. samples / sec: 308.16
Iteration:    420, Loss function: 7.721, Average Loss: 3.788, avg. samples / sec: 309.91
Iteration:    440, Loss function: 7.739, Average Loss: 3.866, avg. samples / sec: 304.31
Iteration:    460, Loss function: 7.726, Average Loss: 3.942, avg. samples / sec: 306.70
Iteration:    480, Loss function: 7.525, Average Loss: 4.017, avg. samples / sec: 255.65
Iteration:    500, Loss function: 7.550, Average Loss: 4.089, avg. samples / sec: 330.23
Iteration:    520, Loss function: 7.565, Average Loss: 4.157, avg. samples / sec: 315.92
Iteration:    540, Loss function: 7.361, Average Loss: 4.223, avg. samples / sec: 335.25
Iteration:    560, Loss function: 7.193, Average Loss: 4.285, avg. samples / sec: 313.03
Iteration:    580, Loss function: 7.167, Average Loss: 4.348, avg. samples / sec: 282.49
Iteration:    600, Loss function: 7.281, Average Loss: 4.408, avg. samples / sec: 308.72
Iteration:    620, Loss function: 7.022, Average Loss: 4.463, avg. samples / sec: 281.83
Iteration:    640, Loss function: 6.808, Average Loss: 4.517, avg. samples / sec: 325.91
Iteration:    660, Loss function: 7.101, Average Loss: 4.569, avg. samples / sec: 279.04
Iteration:    680, Loss function: 7.597, Average Loss: 4.622, avg. samples / sec: 323.44
Iteration:    700, Loss function: 6.737, Average Loss: 4.672, avg. samples / sec: 337.88
Iteration:    720, Loss function: 7.063, Average Loss: 4.720, avg. samples / sec: 330.62
Iteration:    740, Loss function: 6.846, Average Loss: 4.765, avg. samples / sec: 323.67
Iteration:    760, Loss function: 6.992, Average Loss: 4.808, avg. samples / sec: 336.55
Iteration:    780, Loss function: 6.849, Average Loss: 4.851, avg. samples / sec: 321.70
Iteration:    800, Loss function: 7.124, Average Loss: 4.890, avg. samples / sec: 321.69
Iteration:    820, Loss function: 6.679, Average Loss: 4.929, avg. samples / sec: 307.39
Iteration:    840, Loss function: 6.818, Average Loss: 4.964, avg. samples / sec: 332.86
Iteration:    860, Loss function: 6.775, Average Loss: 4.999, avg. samples / sec: 332.82
Iteration:    880, Loss function: 6.701, Average Loss: 5.031, avg. samples / sec: 323.03
Iteration:    900, Loss function: 6.941, Average Loss: 5.062, avg. samples / sec: 329.07
Iteration:    920, Loss function: 6.701, Average Loss: 5.091, avg. samples / sec: 319.87
Iteration:    940, Loss function: 6.598, Average Loss: 5.119, avg. samples / sec: 317.55
Iteration:    960, Loss function: 6.376, Average Loss: 5.147, avg. samples / sec: 293.35
Iteration:    980, Loss function: 6.527, Average Loss: 5.175, avg. samples / sec: 314.34
Iteration:   1000, Loss function: 6.613, Average Loss: 5.202, avg. samples / sec: 326.02
Iteration:   1020, Loss function: 6.163, Average Loss: 5.226, avg. samples / sec: 342.89
:::MLLOG {"namespace": "", "time_ms": 1639081100057, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081100060, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.259, Average Loss: 5.249, avg. samples / sec: 311.43
Iteration:   1060, Loss function: 6.324, Average Loss: 5.273, avg. samples / sec: 262.58
Iteration:   1080, Loss function: 6.480, Average Loss: 5.294, avg. samples / sec: 281.79
Iteration:   1100, Loss function: 6.156, Average Loss: 5.314, avg. samples / sec: 307.62
Iteration:   1120, Loss function: 6.157, Average Loss: 5.333, avg. samples / sec: 328.02
Iteration:   1140, Loss function: 6.421, Average Loss: 5.351, avg. samples / sec: 242.03
Iteration:   1160, Loss function: 6.177, Average Loss: 5.369, avg. samples / sec: 281.57
Iteration:   1180, Loss function: 6.297, Average Loss: 5.386, avg. samples / sec: 301.28
Iteration:   1200, Loss function: 6.315, Average Loss: 5.403, avg. samples / sec: 265.50
Iteration:   1220, Loss function: 6.162, Average Loss: 5.419, avg. samples / sec: 268.32
Iteration:   1240, Loss function: 5.931, Average Loss: 5.432, avg. samples / sec: 328.61
Iteration:   1260, Loss function: 5.940, Average Loss: 5.444, avg. samples / sec: 320.60
Iteration:   1280, Loss function: 5.915, Average Loss: 5.457, avg. samples / sec: 319.63
Iteration:   1300, Loss function: 6.157, Average Loss: 5.469, avg. samples / sec: 313.46
Iteration:   1320, Loss function: 6.201, Average Loss: 5.483, avg. samples / sec: 330.23
Iteration:   1340, Loss function: 5.858, Average Loss: 5.493, avg. samples / sec: 327.68
Iteration:   1360, Loss function: 6.085, Average Loss: 5.504, avg. samples / sec: 287.20
Iteration:   1380, Loss function: 6.128, Average Loss: 5.514, avg. samples / sec: 297.09
Iteration:   1400, Loss function: 6.067, Average Loss: 5.523, avg. samples / sec: 282.87
Iteration:   1420, Loss function: 5.900, Average Loss: 5.531, avg. samples / sec: 294.23
Iteration:   1440, Loss function: 6.319, Average Loss: 5.539, avg. samples / sec: 296.24
Iteration:   1460, Loss function: 6.226, Average Loss: 5.548, avg. samples / sec: 192.56
Iteration:   1480, Loss function: 5.764, Average Loss: 5.556, avg. samples / sec: 298.38
Iteration:   1500, Loss function: 5.985, Average Loss: 5.564, avg. samples / sec: 324.76
Iteration:   1520, Loss function: 5.977, Average Loss: 5.570, avg. samples / sec: 304.85
Iteration:   1540, Loss function: 5.964, Average Loss: 5.575, avg. samples / sec: 267.98
Iteration:   1560, Loss function: 5.453, Average Loss: 5.580, avg. samples / sec: 298.29
Iteration:   1580, Loss function: 5.621, Average Loss: 5.586, avg. samples / sec: 332.32
Iteration:   1600, Loss function: 6.049, Average Loss: 5.591, avg. samples / sec: 320.96
Iteration:   1620, Loss function: 5.744, Average Loss: 5.596, avg. samples / sec: 333.28
Iteration:   1640, Loss function: 5.838, Average Loss: 5.600, avg. samples / sec: 288.11
Iteration:   1660, Loss function: 5.876, Average Loss: 5.604, avg. samples / sec: 316.02
Iteration:   1680, Loss function: 5.607, Average Loss: 5.607, avg. samples / sec: 327.61
Iteration:   1700, Loss function: 5.528, Average Loss: 5.611, avg. samples / sec: 325.08
Iteration:   1720, Loss function: 5.590, Average Loss: 5.614, avg. samples / sec: 240.89
Iteration:   1740, Loss function: 5.866, Average Loss: 5.617, avg. samples / sec: 199.18
Iteration:   1760, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 236.64
Iteration:   1780, Loss function: 5.827, Average Loss: 5.620, avg. samples / sec: 224.57
Iteration:   1800, Loss function: 5.471, Average Loss: 5.621, avg. samples / sec: 194.02
Iteration:   1820, Loss function: 6.122, Average Loss: 5.623, avg. samples / sec: 202.26
Iteration:   1840, Loss function: 5.958, Average Loss: 5.625, avg. samples / sec: 322.91
Iteration:   1860, Loss function: 5.680, Average Loss: 5.624, avg. samples / sec: 336.40
Iteration:   1880, Loss function: 5.821, Average Loss: 5.626, avg. samples / sec: 329.28
Iteration:   1900, Loss function: 5.759, Average Loss: 5.627, avg. samples / sec: 325.16
Iteration:   1920, Loss function: 5.645, Average Loss: 5.626, avg. samples / sec: 329.98
Iteration:   1940, Loss function: 5.656, Average Loss: 5.626, avg. samples / sec: 274.03
Iteration:   1960, Loss function: 5.573, Average Loss: 5.625, avg. samples / sec: 218.49
Iteration:   1980, Loss function: 5.815, Average Loss: 5.626, avg. samples / sec: 250.61
Iteration:   2000, Loss function: 5.591, Average Loss: 5.625, avg. samples / sec: 184.34
Iteration:   2020, Loss function: 5.477, Average Loss: 5.623, avg. samples / sec: 333.04
Iteration:   2040, Loss function: 5.820, Average Loss: 5.624, avg. samples / sec: 331.00
:::MLLOG {"namespace": "", "time_ms": 1639081517488, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081517491, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.366, Average Loss: 5.622, avg. samples / sec: 332.90
Iteration:   2080, Loss function: 5.151, Average Loss: 5.621, avg. samples / sec: 313.57
Iteration:   2100, Loss function: 5.560, Average Loss: 5.619, avg. samples / sec: 334.55
Iteration:   2120, Loss function: 5.289, Average Loss: 5.616, avg. samples / sec: 190.26
Iteration:   2140, Loss function: 5.370, Average Loss: 5.613, avg. samples / sec: 294.67
Iteration:   2160, Loss function: 5.454, Average Loss: 5.610, avg. samples / sec: 341.32
Iteration:   2180, Loss function: 5.421, Average Loss: 5.609, avg. samples / sec: 327.01
Iteration:   2200, Loss function: 5.572, Average Loss: 5.605, avg. samples / sec: 268.87
Iteration:   2220, Loss function: 5.496, Average Loss: 5.602, avg. samples / sec: 277.58
Iteration:   2240, Loss function: 5.335, Average Loss: 5.599, avg. samples / sec: 336.93
Iteration:   2260, Loss function: 5.411, Average Loss: 5.596, avg. samples / sec: 305.47
Iteration:   2280, Loss function: 5.375, Average Loss: 5.593, avg. samples / sec: 307.78
Iteration:   2300, Loss function: 5.244, Average Loss: 5.591, avg. samples / sec: 318.74
Iteration:   2320, Loss function: 5.352, Average Loss: 5.589, avg. samples / sec: 307.33
Iteration:   2340, Loss function: 5.364, Average Loss: 5.586, avg. samples / sec: 331.96
Iteration:   2360, Loss function: 5.333, Average Loss: 5.581, avg. samples / sec: 330.59
Iteration:   2380, Loss function: 5.302, Average Loss: 5.579, avg. samples / sec: 311.35
Iteration:   2400, Loss function: 5.585, Average Loss: 5.574, avg. samples / sec: 313.72
Iteration:   2420, Loss function: 5.514, Average Loss: 5.571, avg. samples / sec: 330.48
Iteration:   2440, Loss function: 5.420, Average Loss: 5.567, avg. samples / sec: 336.78
Iteration:   2460, Loss function: 5.119, Average Loss: 5.564, avg. samples / sec: 315.79
Iteration:   2480, Loss function: 5.315, Average Loss: 5.560, avg. samples / sec: 326.35
Iteration:   2500, Loss function: 5.498, Average Loss: 5.556, avg. samples / sec: 312.29
Iteration:   2520, Loss function: 5.415, Average Loss: 5.550, avg. samples / sec: 268.81
Iteration:   2540, Loss function: 5.409, Average Loss: 5.546, avg. samples / sec: 294.94
Iteration:   2560, Loss function: 5.367, Average Loss: 5.543, avg. samples / sec: 301.88
Iteration:   2580, Loss function: 5.379, Average Loss: 5.539, avg. samples / sec: 292.84
Iteration:   2600, Loss function: 5.588, Average Loss: 5.537, avg. samples / sec: 278.19
Iteration:   2620, Loss function: 5.442, Average Loss: 5.533, avg. samples / sec: 295.59
Iteration:   2640, Loss function: 5.292, Average Loss: 5.530, avg. samples / sec: 319.48
Iteration:   2660, Loss function: 5.077, Average Loss: 5.526, avg. samples / sec: 312.05
Iteration:   2680, Loss function: 5.236, Average Loss: 5.523, avg. samples / sec: 263.84
Iteration:   2700, Loss function: 5.182, Average Loss: 5.518, avg. samples / sec: 278.83
Iteration:   2720, Loss function: 5.349, Average Loss: 5.514, avg. samples / sec: 286.08
Iteration:   2740, Loss function: 5.029, Average Loss: 5.510, avg. samples / sec: 301.30
Iteration:   2760, Loss function: 4.961, Average Loss: 5.504, avg. samples / sec: 295.83
Iteration:   2780, Loss function: 5.548, Average Loss: 5.501, avg. samples / sec: 322.81
Iteration:   2800, Loss function: 5.285, Average Loss: 5.496, avg. samples / sec: 299.98
Iteration:   2820, Loss function: 5.297, Average Loss: 5.491, avg. samples / sec: 293.47
Iteration:   2840, Loss function: 5.147, Average Loss: 5.487, avg. samples / sec: 275.97
Iteration:   2860, Loss function: 5.157, Average Loss: 5.482, avg. samples / sec: 329.22
Iteration:   2880, Loss function: 5.269, Average Loss: 5.476, avg. samples / sec: 325.69
Iteration:   2900, Loss function: 5.156, Average Loss: 5.472, avg. samples / sec: 327.61
Iteration:   2920, Loss function: 5.095, Average Loss: 5.466, avg. samples / sec: 321.92
Iteration:   2940, Loss function: 4.978, Average Loss: 5.462, avg. samples / sec: 323.11
Iteration:   2960, Loss function: 5.336, Average Loss: 5.458, avg. samples / sec: 312.90
Iteration:   2980, Loss function: 5.238, Average Loss: 5.453, avg. samples / sec: 324.20
Iteration:   3000, Loss function: 5.372, Average Loss: 5.449, avg. samples / sec: 272.70
Iteration:   3020, Loss function: 5.221, Average Loss: 5.444, avg. samples / sec: 316.98
Iteration:   3040, Loss function: 5.182, Average Loss: 5.440, avg. samples / sec: 290.54
Iteration:   3060, Loss function: 5.019, Average Loss: 5.434, avg. samples / sec: 330.81
Iteration:   3080, Loss function: 4.891, Average Loss: 5.428, avg. samples / sec: 319.15
:::MLLOG {"namespace": "", "time_ms": 1639081903658, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081903660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.179, Average Loss: 5.424, avg. samples / sec: 320.16
Iteration:   3120, Loss function: 5.020, Average Loss: 5.418, avg. samples / sec: 309.69
Iteration:   3140, Loss function: 5.132, Average Loss: 5.414, avg. samples / sec: 300.88
Iteration:   3160, Loss function: 5.424, Average Loss: 5.408, avg. samples / sec: 311.50
Iteration:   3180, Loss function: 5.003, Average Loss: 5.404, avg. samples / sec: 240.88
Iteration:   3200, Loss function: 5.378, Average Loss: 5.399, avg. samples / sec: 214.92
Iteration:   3220, Loss function: 5.228, Average Loss: 5.394, avg. samples / sec: 270.37
Iteration:   3240, Loss function: 5.146, Average Loss: 5.389, avg. samples / sec: 247.95
Iteration:   3260, Loss function: 5.060, Average Loss: 5.384, avg. samples / sec: 284.89
Iteration:   3280, Loss function: 4.822, Average Loss: 5.378, avg. samples / sec: 219.18
Iteration:   3300, Loss function: 4.774, Average Loss: 5.372, avg. samples / sec: 305.44
Iteration:   3320, Loss function: 5.067, Average Loss: 5.367, avg. samples / sec: 316.85
Iteration:   3340, Loss function: 4.988, Average Loss: 5.363, avg. samples / sec: 332.93
Iteration:   3360, Loss function: 5.261, Average Loss: 5.356, avg. samples / sec: 307.36
Iteration:   3380, Loss function: 5.268, Average Loss: 5.349, avg. samples / sec: 188.43
Iteration:   3400, Loss function: 4.855, Average Loss: 5.344, avg. samples / sec: 318.86
Iteration:   3420, Loss function: 5.020, Average Loss: 5.339, avg. samples / sec: 315.53
Iteration:   3440, Loss function: 4.900, Average Loss: 5.334, avg. samples / sec: 320.23
Iteration:   3460, Loss function: 5.176, Average Loss: 5.330, avg. samples / sec: 322.28
Iteration:   3480, Loss function: 5.133, Average Loss: 5.325, avg. samples / sec: 326.48
Iteration:   3500, Loss function: 5.142, Average Loss: 5.319, avg. samples / sec: 318.67
Iteration:   3520, Loss function: 5.156, Average Loss: 5.316, avg. samples / sec: 317.80
Iteration:   3540, Loss function: 4.888, Average Loss: 5.311, avg. samples / sec: 310.00
Iteration:   3560, Loss function: 5.010, Average Loss: 5.308, avg. samples / sec: 314.17
Iteration:   3580, Loss function: 5.154, Average Loss: 5.303, avg. samples / sec: 316.93
Iteration:   3600, Loss function: 5.042, Average Loss: 5.298, avg. samples / sec: 312.22
Iteration:   3620, Loss function: 4.835, Average Loss: 5.292, avg. samples / sec: 316.22
Iteration:   3640, Loss function: 4.707, Average Loss: 5.287, avg. samples / sec: 326.73
Iteration:   3660, Loss function: 4.931, Average Loss: 5.282, avg. samples / sec: 333.30
Iteration:   3680, Loss function: 5.133, Average Loss: 5.276, avg. samples / sec: 336.34
Iteration:   3700, Loss function: 4.927, Average Loss: 5.271, avg. samples / sec: 296.88
Iteration:   3720, Loss function: 5.055, Average Loss: 5.265, avg. samples / sec: 297.20
Iteration:   3740, Loss function: 5.211, Average Loss: 5.262, avg. samples / sec: 334.66
Iteration:   3760, Loss function: 5.095, Average Loss: 5.258, avg. samples / sec: 330.22
Iteration:   3780, Loss function: 5.107, Average Loss: 5.252, avg. samples / sec: 327.36
Iteration:   3800, Loss function: 5.116, Average Loss: 5.249, avg. samples / sec: 323.30
Iteration:   3820, Loss function: 5.120, Average Loss: 5.245, avg. samples / sec: 333.28
Iteration:   3840, Loss function: 4.818, Average Loss: 5.240, avg. samples / sec: 301.51
Iteration:   3860, Loss function: 4.784, Average Loss: 5.235, avg. samples / sec: 282.61
Iteration:   3880, Loss function: 4.878, Average Loss: 5.230, avg. samples / sec: 315.12
Iteration:   3900, Loss function: 5.176, Average Loss: 5.225, avg. samples / sec: 286.17
Iteration:   3920, Loss function: 5.031, Average Loss: 5.220, avg. samples / sec: 271.61
Iteration:   3940, Loss function: 5.056, Average Loss: 5.215, avg. samples / sec: 228.27
Iteration:   3960, Loss function: 4.674, Average Loss: 5.211, avg. samples / sec: 283.57
Iteration:   3980, Loss function: 4.829, Average Loss: 5.206, avg. samples / sec: 299.78
Iteration:   4000, Loss function: 5.245, Average Loss: 5.203, avg. samples / sec: 309.77
Iteration:   4020, Loss function: 5.080, Average Loss: 5.199, avg. samples / sec: 298.16
Iteration:   4040, Loss function: 4.995, Average Loss: 5.196, avg. samples / sec: 324.39
Iteration:   4060, Loss function: 5.093, Average Loss: 5.193, avg. samples / sec: 320.59
Iteration:   4080, Loss function: 4.962, Average Loss: 5.188, avg. samples / sec: 309.49
Iteration:   4100, Loss function: 5.058, Average Loss: 5.185, avg. samples / sec: 309.50
:::MLLOG {"namespace": "", "time_ms": 1639082298900, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082298958, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.002, Average Loss: 5.182, avg. samples / sec: 326.93
Iteration:   4140, Loss function: 5.028, Average Loss: 5.177, avg. samples / sec: 340.33
Iteration:   4160, Loss function: 4.913, Average Loss: 5.170, avg. samples / sec: 296.66
Iteration:   4180, Loss function: 4.837, Average Loss: 5.164, avg. samples / sec: 302.30
Iteration:   4200, Loss function: 4.750, Average Loss: 5.159, avg. samples / sec: 327.76
Iteration:   4220, Loss function: 4.754, Average Loss: 5.154, avg. samples / sec: 273.26
Iteration:   4240, Loss function: 5.007, Average Loss: 5.150, avg. samples / sec: 297.60
Iteration:   4260, Loss function: 5.128, Average Loss: 5.145, avg. samples / sec: 321.04
Iteration:   4280, Loss function: 4.934, Average Loss: 5.140, avg. samples / sec: 261.44
Iteration:   4300, Loss function: 4.874, Average Loss: 5.134, avg. samples / sec: 290.04
Iteration:   4320, Loss function: 4.831, Average Loss: 5.129, avg. samples / sec: 184.35
Iteration:   4340, Loss function: 4.924, Average Loss: 5.125, avg. samples / sec: 301.13
Iteration:   4360, Loss function: 4.855, Average Loss: 5.120, avg. samples / sec: 240.31
Iteration:   4380, Loss function: 5.135, Average Loss: 5.116, avg. samples / sec: 235.60
Iteration:   4400, Loss function: 4.870, Average Loss: 5.111, avg. samples / sec: 306.76
Iteration:   4420, Loss function: 4.908, Average Loss: 5.106, avg. samples / sec: 286.95
Iteration:   4440, Loss function: 5.001, Average Loss: 5.101, avg. samples / sec: 313.36
Iteration:   4460, Loss function: 5.060, Average Loss: 5.097, avg. samples / sec: 320.70
Iteration:   4480, Loss function: 5.089, Average Loss: 5.094, avg. samples / sec: 286.14
Iteration:   4500, Loss function: 4.760, Average Loss: 5.089, avg. samples / sec: 288.49
Iteration:   4520, Loss function: 4.699, Average Loss: 5.085, avg. samples / sec: 269.16
Iteration:   4540, Loss function: 5.089, Average Loss: 5.080, avg. samples / sec: 268.60
Iteration:   4560, Loss function: 4.639, Average Loss: 5.077, avg. samples / sec: 278.76
Iteration:   4580, Loss function: 4.793, Average Loss: 5.074, avg. samples / sec: 238.20
Iteration:   4600, Loss function: 4.863, Average Loss: 5.071, avg. samples / sec: 214.48
Iteration:   4620, Loss function: 4.789, Average Loss: 5.066, avg. samples / sec: 307.71
Iteration:   4640, Loss function: 4.633, Average Loss: 5.062, avg. samples / sec: 267.90
Iteration:   4660, Loss function: 4.668, Average Loss: 5.058, avg. samples / sec: 276.65
Iteration:   4680, Loss function: 5.303, Average Loss: 5.053, avg. samples / sec: 311.61
Iteration:   4700, Loss function: 4.692, Average Loss: 5.050, avg. samples / sec: 266.83
Iteration:   4720, Loss function: 4.773, Average Loss: 5.045, avg. samples / sec: 270.00
Iteration:   4740, Loss function: 4.716, Average Loss: 5.041, avg. samples / sec: 304.62
Iteration:   4760, Loss function: 4.584, Average Loss: 5.037, avg. samples / sec: 301.42
Iteration:   4780, Loss function: 4.941, Average Loss: 5.033, avg. samples / sec: 268.13
Iteration:   4800, Loss function: 4.849, Average Loss: 5.030, avg. samples / sec: 333.95
Iteration:   4820, Loss function: 4.689, Average Loss: 5.026, avg. samples / sec: 323.26
Iteration:   4840, Loss function: 5.214, Average Loss: 5.022, avg. samples / sec: 292.81
Iteration:   4860, Loss function: 4.717, Average Loss: 5.017, avg. samples / sec: 277.72
Iteration:   4880, Loss function: 5.084, Average Loss: 5.014, avg. samples / sec: 206.07
Iteration:   4900, Loss function: 4.597, Average Loss: 5.010, avg. samples / sec: 276.17
Iteration:   4920, Loss function: 4.936, Average Loss: 5.006, avg. samples / sec: 325.11
Iteration:   4940, Loss function: 4.877, Average Loss: 5.001, avg. samples / sec: 335.34
Iteration:   4960, Loss function: 4.704, Average Loss: 4.998, avg. samples / sec: 321.93
Iteration:   4980, Loss function: 4.601, Average Loss: 4.994, avg. samples / sec: 321.91
Iteration:   5000, Loss function: 4.740, Average Loss: 4.992, avg. samples / sec: 289.97
Iteration:   5020, Loss function: 5.067, Average Loss: 4.989, avg. samples / sec: 278.06
Iteration:   5040, Loss function: 4.801, Average Loss: 4.986, avg. samples / sec: 330.17
Iteration:   5060, Loss function: 4.760, Average Loss: 4.982, avg. samples / sec: 327.77
Iteration:   5080, Loss function: 4.508, Average Loss: 4.978, avg. samples / sec: 327.61
Iteration:   5100, Loss function: 4.804, Average Loss: 4.975, avg. samples / sec: 334.91
Iteration:   5120, Loss function: 4.714, Average Loss: 4.972, avg. samples / sec: 320.81
Iteration:   5140, Loss function: 4.857, Average Loss: 4.968, avg. samples / sec: 321.82
:::MLLOG {"namespace": "", "time_ms": 1639082707745, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.42 s
:::MLLOG {"namespace": "", "time_ms": 1639082803268, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082803375, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082803376, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=5.41s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10569
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21464
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09475
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18520
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10569 AP goal: 0.10000
Iteration:   5160, Loss function: 4.808, Average Loss: 4.965, avg. samples / sec: 21.97
:::MLLOG {"namespace": "", "time_ms": 1639082810482, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810483, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10568921740513665, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810483, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813436, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585641, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586167, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3283000823, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3283000823
:::MLLOG {"namespace": "", "time_ms": 1639080590278, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590279, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590286, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590287, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693495, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693496, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080700156, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080700157, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700500, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700501, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700502, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.127, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.036, Average Loss: 0.460, avg. samples / sec: 178.64
Iteration:     40, Loss function: 20.695, Average Loss: 0.862, avg. samples / sec: 251.89
Iteration:     60, Loss function: 20.271, Average Loss: 1.251, avg. samples / sec: 223.25
Iteration:     80, Loss function: 19.509, Average Loss: 1.622, avg. samples / sec: 252.86
Iteration:    100, Loss function: 14.174, Average Loss: 1.929, avg. samples / sec: 243.06
Iteration:    120, Loss function: 10.838, Average Loss: 2.121, avg. samples / sec: 245.81
Iteration:    140, Loss function: 9.547, Average Loss: 2.276, avg. samples / sec: 261.24
Iteration:    160, Loss function: 9.228, Average Loss: 2.415, avg. samples / sec: 276.16
Iteration:    180, Loss function: 9.023, Average Loss: 2.544, avg. samples / sec: 271.35
Iteration:    200, Loss function: 8.645, Average Loss: 2.669, avg. samples / sec: 296.03
Iteration:    220, Loss function: 8.753, Average Loss: 2.791, avg. samples / sec: 275.84
Iteration:    240, Loss function: 8.934, Average Loss: 2.913, avg. samples / sec: 272.84
Iteration:    260, Loss function: 8.451, Average Loss: 3.026, avg. samples / sec: 240.64
Iteration:    280, Loss function: 8.424, Average Loss: 3.135, avg. samples / sec: 315.56
Iteration:    300, Loss function: 8.305, Average Loss: 3.237, avg. samples / sec: 335.23
Iteration:    320, Loss function: 8.363, Average Loss: 3.338, avg. samples / sec: 322.74
Iteration:    340, Loss function: 8.172, Average Loss: 3.434, avg. samples / sec: 303.94
Iteration:    360, Loss function: 7.943, Average Loss: 3.527, avg. samples / sec: 321.55
Iteration:    380, Loss function: 7.882, Average Loss: 3.617, avg. samples / sec: 311.09
Iteration:    400, Loss function: 8.123, Average Loss: 3.702, avg. samples / sec: 308.16
Iteration:    420, Loss function: 7.721, Average Loss: 3.788, avg. samples / sec: 309.91
Iteration:    440, Loss function: 7.739, Average Loss: 3.866, avg. samples / sec: 304.31
Iteration:    460, Loss function: 7.726, Average Loss: 3.942, avg. samples / sec: 306.70
Iteration:    480, Loss function: 7.525, Average Loss: 4.017, avg. samples / sec: 255.65
Iteration:    500, Loss function: 7.550, Average Loss: 4.089, avg. samples / sec: 330.23
Iteration:    520, Loss function: 7.565, Average Loss: 4.157, avg. samples / sec: 315.92
Iteration:    540, Loss function: 7.361, Average Loss: 4.223, avg. samples / sec: 335.25
Iteration:    560, Loss function: 7.193, Average Loss: 4.285, avg. samples / sec: 313.03
Iteration:    580, Loss function: 7.167, Average Loss: 4.348, avg. samples / sec: 282.49
Iteration:    600, Loss function: 7.281, Average Loss: 4.408, avg. samples / sec: 308.72
Iteration:    620, Loss function: 7.022, Average Loss: 4.463, avg. samples / sec: 281.83
Iteration:    640, Loss function: 6.808, Average Loss: 4.517, avg. samples / sec: 325.91
Iteration:    660, Loss function: 7.101, Average Loss: 4.569, avg. samples / sec: 279.04
Iteration:    680, Loss function: 7.597, Average Loss: 4.622, avg. samples / sec: 323.44
Iteration:    700, Loss function: 6.737, Average Loss: 4.672, avg. samples / sec: 337.88
Iteration:    720, Loss function: 7.063, Average Loss: 4.720, avg. samples / sec: 330.62
Iteration:    740, Loss function: 6.846, Average Loss: 4.765, avg. samples / sec: 323.67
Iteration:    760, Loss function: 6.992, Average Loss: 4.808, avg. samples / sec: 336.55
Iteration:    780, Loss function: 6.849, Average Loss: 4.851, avg. samples / sec: 321.70
Iteration:    800, Loss function: 7.124, Average Loss: 4.890, avg. samples / sec: 321.69
Iteration:    820, Loss function: 6.679, Average Loss: 4.929, avg. samples / sec: 307.39
Iteration:    840, Loss function: 6.818, Average Loss: 4.964, avg. samples / sec: 332.86
Iteration:    860, Loss function: 6.775, Average Loss: 4.999, avg. samples / sec: 332.82
Iteration:    880, Loss function: 6.701, Average Loss: 5.031, avg. samples / sec: 323.03
Iteration:    900, Loss function: 6.941, Average Loss: 5.062, avg. samples / sec: 329.07
Iteration:    920, Loss function: 6.701, Average Loss: 5.091, avg. samples / sec: 319.87
Iteration:    940, Loss function: 6.598, Average Loss: 5.119, avg. samples / sec: 317.55
Iteration:    960, Loss function: 6.376, Average Loss: 5.147, avg. samples / sec: 293.35
Iteration:    980, Loss function: 6.527, Average Loss: 5.175, avg. samples / sec: 314.34
Iteration:   1000, Loss function: 6.613, Average Loss: 5.202, avg. samples / sec: 326.02
Iteration:   1020, Loss function: 6.163, Average Loss: 5.226, avg. samples / sec: 342.89
:::MLLOG {"namespace": "", "time_ms": 1639081100057, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081100060, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.259, Average Loss: 5.249, avg. samples / sec: 311.43
Iteration:   1060, Loss function: 6.324, Average Loss: 5.273, avg. samples / sec: 262.58
Iteration:   1080, Loss function: 6.480, Average Loss: 5.294, avg. samples / sec: 281.79
Iteration:   1100, Loss function: 6.156, Average Loss: 5.314, avg. samples / sec: 307.62
Iteration:   1120, Loss function: 6.157, Average Loss: 5.333, avg. samples / sec: 328.02
Iteration:   1140, Loss function: 6.421, Average Loss: 5.351, avg. samples / sec: 242.03
Iteration:   1160, Loss function: 6.177, Average Loss: 5.369, avg. samples / sec: 281.57
Iteration:   1180, Loss function: 6.297, Average Loss: 5.386, avg. samples / sec: 301.28
Iteration:   1200, Loss function: 6.315, Average Loss: 5.403, avg. samples / sec: 265.50
Iteration:   1220, Loss function: 6.162, Average Loss: 5.419, avg. samples / sec: 268.32
Iteration:   1240, Loss function: 5.931, Average Loss: 5.432, avg. samples / sec: 328.61
Iteration:   1260, Loss function: 5.940, Average Loss: 5.444, avg. samples / sec: 320.60
Iteration:   1280, Loss function: 5.915, Average Loss: 5.457, avg. samples / sec: 319.63
Iteration:   1300, Loss function: 6.157, Average Loss: 5.469, avg. samples / sec: 313.46
Iteration:   1320, Loss function: 6.201, Average Loss: 5.483, avg. samples / sec: 330.23
Iteration:   1340, Loss function: 5.858, Average Loss: 5.493, avg. samples / sec: 327.68
Iteration:   1360, Loss function: 6.085, Average Loss: 5.504, avg. samples / sec: 287.20
Iteration:   1380, Loss function: 6.128, Average Loss: 5.514, avg. samples / sec: 297.09
Iteration:   1400, Loss function: 6.067, Average Loss: 5.523, avg. samples / sec: 282.87
Iteration:   1420, Loss function: 5.900, Average Loss: 5.531, avg. samples / sec: 294.23
Iteration:   1440, Loss function: 6.319, Average Loss: 5.539, avg. samples / sec: 296.24
Iteration:   1460, Loss function: 6.226, Average Loss: 5.548, avg. samples / sec: 192.56
Iteration:   1480, Loss function: 5.764, Average Loss: 5.556, avg. samples / sec: 298.38
Iteration:   1500, Loss function: 5.985, Average Loss: 5.564, avg. samples / sec: 324.76
Iteration:   1520, Loss function: 5.977, Average Loss: 5.570, avg. samples / sec: 304.85
Iteration:   1540, Loss function: 5.964, Average Loss: 5.575, avg. samples / sec: 267.98
Iteration:   1560, Loss function: 5.453, Average Loss: 5.580, avg. samples / sec: 298.29
Iteration:   1580, Loss function: 5.621, Average Loss: 5.586, avg. samples / sec: 332.32
Iteration:   1600, Loss function: 6.049, Average Loss: 5.591, avg. samples / sec: 320.96
Iteration:   1620, Loss function: 5.744, Average Loss: 5.596, avg. samples / sec: 333.28
Iteration:   1640, Loss function: 5.838, Average Loss: 5.600, avg. samples / sec: 288.11
Iteration:   1660, Loss function: 5.876, Average Loss: 5.604, avg. samples / sec: 316.02
Iteration:   1680, Loss function: 5.607, Average Loss: 5.607, avg. samples / sec: 327.61
Iteration:   1700, Loss function: 5.528, Average Loss: 5.611, avg. samples / sec: 325.08
Iteration:   1720, Loss function: 5.590, Average Loss: 5.614, avg. samples / sec: 240.89
Iteration:   1740, Loss function: 5.866, Average Loss: 5.617, avg. samples / sec: 199.18
Iteration:   1760, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 236.64
Iteration:   1780, Loss function: 5.827, Average Loss: 5.620, avg. samples / sec: 224.57
Iteration:   1800, Loss function: 5.471, Average Loss: 5.621, avg. samples / sec: 194.02
Iteration:   1820, Loss function: 6.122, Average Loss: 5.623, avg. samples / sec: 202.26
Iteration:   1840, Loss function: 5.958, Average Loss: 5.625, avg. samples / sec: 322.91
Iteration:   1860, Loss function: 5.680, Average Loss: 5.624, avg. samples / sec: 336.40
Iteration:   1880, Loss function: 5.821, Average Loss: 5.626, avg. samples / sec: 329.28
Iteration:   1900, Loss function: 5.759, Average Loss: 5.627, avg. samples / sec: 325.16
Iteration:   1920, Loss function: 5.645, Average Loss: 5.626, avg. samples / sec: 329.98
Iteration:   1940, Loss function: 5.656, Average Loss: 5.626, avg. samples / sec: 274.03
Iteration:   1960, Loss function: 5.573, Average Loss: 5.625, avg. samples / sec: 218.49
Iteration:   1980, Loss function: 5.815, Average Loss: 5.626, avg. samples / sec: 250.61
Iteration:   2000, Loss function: 5.591, Average Loss: 5.625, avg. samples / sec: 184.34
Iteration:   2020, Loss function: 5.477, Average Loss: 5.623, avg. samples / sec: 333.04
Iteration:   2040, Loss function: 5.820, Average Loss: 5.624, avg. samples / sec: 331.00
:::MLLOG {"namespace": "", "time_ms": 1639081517488, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081517491, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.366, Average Loss: 5.622, avg. samples / sec: 332.90
Iteration:   2080, Loss function: 5.151, Average Loss: 5.621, avg. samples / sec: 313.57
Iteration:   2100, Loss function: 5.560, Average Loss: 5.619, avg. samples / sec: 334.55
Iteration:   2120, Loss function: 5.289, Average Loss: 5.616, avg. samples / sec: 190.26
Iteration:   2140, Loss function: 5.370, Average Loss: 5.613, avg. samples / sec: 294.67
Iteration:   2160, Loss function: 5.454, Average Loss: 5.610, avg. samples / sec: 341.32
Iteration:   2180, Loss function: 5.421, Average Loss: 5.609, avg. samples / sec: 327.01
Iteration:   2200, Loss function: 5.572, Average Loss: 5.605, avg. samples / sec: 268.87
Iteration:   2220, Loss function: 5.496, Average Loss: 5.602, avg. samples / sec: 277.58
Iteration:   2240, Loss function: 5.335, Average Loss: 5.599, avg. samples / sec: 336.93
Iteration:   2260, Loss function: 5.411, Average Loss: 5.596, avg. samples / sec: 305.47
Iteration:   2280, Loss function: 5.375, Average Loss: 5.593, avg. samples / sec: 307.78
Iteration:   2300, Loss function: 5.244, Average Loss: 5.591, avg. samples / sec: 318.74
Iteration:   2320, Loss function: 5.352, Average Loss: 5.589, avg. samples / sec: 307.33
Iteration:   2340, Loss function: 5.364, Average Loss: 5.586, avg. samples / sec: 331.96
Iteration:   2360, Loss function: 5.333, Average Loss: 5.581, avg. samples / sec: 330.59
Iteration:   2380, Loss function: 5.302, Average Loss: 5.579, avg. samples / sec: 311.35
Iteration:   2400, Loss function: 5.585, Average Loss: 5.574, avg. samples / sec: 313.72
Iteration:   2420, Loss function: 5.514, Average Loss: 5.571, avg. samples / sec: 330.48
Iteration:   2440, Loss function: 5.420, Average Loss: 5.567, avg. samples / sec: 336.78
Iteration:   2460, Loss function: 5.119, Average Loss: 5.564, avg. samples / sec: 315.79
Iteration:   2480, Loss function: 5.315, Average Loss: 5.560, avg. samples / sec: 326.35
Iteration:   2500, Loss function: 5.498, Average Loss: 5.556, avg. samples / sec: 312.29
Iteration:   2520, Loss function: 5.415, Average Loss: 5.550, avg. samples / sec: 268.81
Iteration:   2540, Loss function: 5.409, Average Loss: 5.546, avg. samples / sec: 294.94
Iteration:   2560, Loss function: 5.367, Average Loss: 5.543, avg. samples / sec: 301.88
Iteration:   2580, Loss function: 5.379, Average Loss: 5.539, avg. samples / sec: 292.84
Iteration:   2600, Loss function: 5.588, Average Loss: 5.537, avg. samples / sec: 278.19
Iteration:   2620, Loss function: 5.442, Average Loss: 5.533, avg. samples / sec: 295.59
Iteration:   2640, Loss function: 5.292, Average Loss: 5.530, avg. samples / sec: 319.48
Iteration:   2660, Loss function: 5.077, Average Loss: 5.526, avg. samples / sec: 312.05
Iteration:   2680, Loss function: 5.236, Average Loss: 5.523, avg. samples / sec: 263.84
Iteration:   2700, Loss function: 5.182, Average Loss: 5.518, avg. samples / sec: 278.83
Iteration:   2720, Loss function: 5.349, Average Loss: 5.514, avg. samples / sec: 286.08
Iteration:   2740, Loss function: 5.029, Average Loss: 5.510, avg. samples / sec: 301.30
Iteration:   2760, Loss function: 4.961, Average Loss: 5.504, avg. samples / sec: 295.83
Iteration:   2780, Loss function: 5.548, Average Loss: 5.501, avg. samples / sec: 322.81
Iteration:   2800, Loss function: 5.285, Average Loss: 5.496, avg. samples / sec: 299.98
Iteration:   2820, Loss function: 5.297, Average Loss: 5.491, avg. samples / sec: 293.47
Iteration:   2840, Loss function: 5.147, Average Loss: 5.487, avg. samples / sec: 275.97
Iteration:   2860, Loss function: 5.157, Average Loss: 5.482, avg. samples / sec: 329.22
Iteration:   2880, Loss function: 5.269, Average Loss: 5.476, avg. samples / sec: 325.69
Iteration:   2900, Loss function: 5.156, Average Loss: 5.472, avg. samples / sec: 327.61
Iteration:   2920, Loss function: 5.095, Average Loss: 5.466, avg. samples / sec: 321.92
Iteration:   2940, Loss function: 4.978, Average Loss: 5.462, avg. samples / sec: 323.11
Iteration:   2960, Loss function: 5.336, Average Loss: 5.458, avg. samples / sec: 312.90
Iteration:   2980, Loss function: 5.238, Average Loss: 5.453, avg. samples / sec: 324.20
Iteration:   3000, Loss function: 5.372, Average Loss: 5.449, avg. samples / sec: 272.70
Iteration:   3020, Loss function: 5.221, Average Loss: 5.444, avg. samples / sec: 316.98
Iteration:   3040, Loss function: 5.182, Average Loss: 5.440, avg. samples / sec: 290.54
Iteration:   3060, Loss function: 5.019, Average Loss: 5.434, avg. samples / sec: 330.81
Iteration:   3080, Loss function: 4.891, Average Loss: 5.428, avg. samples / sec: 319.15
:::MLLOG {"namespace": "", "time_ms": 1639081903658, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081903660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.179, Average Loss: 5.424, avg. samples / sec: 320.16
Iteration:   3120, Loss function: 5.020, Average Loss: 5.418, avg. samples / sec: 309.69
Iteration:   3140, Loss function: 5.132, Average Loss: 5.414, avg. samples / sec: 300.88
Iteration:   3160, Loss function: 5.424, Average Loss: 5.408, avg. samples / sec: 311.50
Iteration:   3180, Loss function: 5.003, Average Loss: 5.404, avg. samples / sec: 240.88
Iteration:   3200, Loss function: 5.378, Average Loss: 5.399, avg. samples / sec: 214.92
Iteration:   3220, Loss function: 5.228, Average Loss: 5.394, avg. samples / sec: 270.37
Iteration:   3240, Loss function: 5.146, Average Loss: 5.389, avg. samples / sec: 247.95
Iteration:   3260, Loss function: 5.060, Average Loss: 5.384, avg. samples / sec: 284.89
Iteration:   3280, Loss function: 4.822, Average Loss: 5.378, avg. samples / sec: 219.18
Iteration:   3300, Loss function: 4.774, Average Loss: 5.372, avg. samples / sec: 305.44
Iteration:   3320, Loss function: 5.067, Average Loss: 5.367, avg. samples / sec: 316.85
Iteration:   3340, Loss function: 4.988, Average Loss: 5.363, avg. samples / sec: 332.93
Iteration:   3360, Loss function: 5.261, Average Loss: 5.356, avg. samples / sec: 307.36
Iteration:   3380, Loss function: 5.268, Average Loss: 5.349, avg. samples / sec: 188.43
Iteration:   3400, Loss function: 4.855, Average Loss: 5.344, avg. samples / sec: 318.86
Iteration:   3420, Loss function: 5.020, Average Loss: 5.339, avg. samples / sec: 315.53
Iteration:   3440, Loss function: 4.900, Average Loss: 5.334, avg. samples / sec: 320.23
Iteration:   3460, Loss function: 5.176, Average Loss: 5.330, avg. samples / sec: 322.28
Iteration:   3480, Loss function: 5.133, Average Loss: 5.325, avg. samples / sec: 326.48
Iteration:   3500, Loss function: 5.142, Average Loss: 5.319, avg. samples / sec: 318.67
Iteration:   3520, Loss function: 5.156, Average Loss: 5.316, avg. samples / sec: 317.80
Iteration:   3540, Loss function: 4.888, Average Loss: 5.311, avg. samples / sec: 310.00
Iteration:   3560, Loss function: 5.010, Average Loss: 5.308, avg. samples / sec: 314.17
Iteration:   3580, Loss function: 5.154, Average Loss: 5.303, avg. samples / sec: 316.93
Iteration:   3600, Loss function: 5.042, Average Loss: 5.298, avg. samples / sec: 312.22
Iteration:   3620, Loss function: 4.835, Average Loss: 5.292, avg. samples / sec: 316.22
Iteration:   3640, Loss function: 4.707, Average Loss: 5.287, avg. samples / sec: 326.73
Iteration:   3660, Loss function: 4.931, Average Loss: 5.282, avg. samples / sec: 333.30
Iteration:   3680, Loss function: 5.133, Average Loss: 5.276, avg. samples / sec: 336.34
Iteration:   3700, Loss function: 4.927, Average Loss: 5.271, avg. samples / sec: 296.88
Iteration:   3720, Loss function: 5.055, Average Loss: 5.265, avg. samples / sec: 297.20
Iteration:   3740, Loss function: 5.211, Average Loss: 5.262, avg. samples / sec: 334.66
Iteration:   3760, Loss function: 5.095, Average Loss: 5.258, avg. samples / sec: 330.22
Iteration:   3780, Loss function: 5.107, Average Loss: 5.252, avg. samples / sec: 327.36
Iteration:   3800, Loss function: 5.116, Average Loss: 5.249, avg. samples / sec: 323.30
Iteration:   3820, Loss function: 5.120, Average Loss: 5.245, avg. samples / sec: 333.28
Iteration:   3840, Loss function: 4.818, Average Loss: 5.240, avg. samples / sec: 301.51
Iteration:   3860, Loss function: 4.784, Average Loss: 5.235, avg. samples / sec: 282.61
Iteration:   3880, Loss function: 4.878, Average Loss: 5.230, avg. samples / sec: 315.12
Iteration:   3900, Loss function: 5.176, Average Loss: 5.225, avg. samples / sec: 286.17
Iteration:   3920, Loss function: 5.031, Average Loss: 5.220, avg. samples / sec: 271.61
Iteration:   3940, Loss function: 5.056, Average Loss: 5.215, avg. samples / sec: 228.27
Iteration:   3960, Loss function: 4.674, Average Loss: 5.211, avg. samples / sec: 283.57
Iteration:   3980, Loss function: 4.829, Average Loss: 5.206, avg. samples / sec: 299.78
Iteration:   4000, Loss function: 5.245, Average Loss: 5.203, avg. samples / sec: 309.77
Iteration:   4020, Loss function: 5.080, Average Loss: 5.199, avg. samples / sec: 298.16
Iteration:   4040, Loss function: 4.995, Average Loss: 5.196, avg. samples / sec: 324.39
Iteration:   4060, Loss function: 5.093, Average Loss: 5.193, avg. samples / sec: 320.59
Iteration:   4080, Loss function: 4.962, Average Loss: 5.188, avg. samples / sec: 309.49
Iteration:   4100, Loss function: 5.058, Average Loss: 5.185, avg. samples / sec: 309.50
:::MLLOG {"namespace": "", "time_ms": 1639082298900, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082298958, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.002, Average Loss: 5.182, avg. samples / sec: 326.93
Iteration:   4140, Loss function: 5.028, Average Loss: 5.177, avg. samples / sec: 340.33
Iteration:   4160, Loss function: 4.913, Average Loss: 5.170, avg. samples / sec: 296.66
Iteration:   4180, Loss function: 4.837, Average Loss: 5.164, avg. samples / sec: 302.30
Iteration:   4200, Loss function: 4.750, Average Loss: 5.159, avg. samples / sec: 327.76
Iteration:   4220, Loss function: 4.754, Average Loss: 5.154, avg. samples / sec: 273.26
Iteration:   4240, Loss function: 5.007, Average Loss: 5.150, avg. samples / sec: 297.60
Iteration:   4260, Loss function: 5.128, Average Loss: 5.145, avg. samples / sec: 321.04
Iteration:   4280, Loss function: 4.934, Average Loss: 5.140, avg. samples / sec: 261.44
Iteration:   4300, Loss function: 4.874, Average Loss: 5.134, avg. samples / sec: 290.04
Iteration:   4320, Loss function: 4.831, Average Loss: 5.129, avg. samples / sec: 184.35
Iteration:   4340, Loss function: 4.924, Average Loss: 5.125, avg. samples / sec: 301.13
Iteration:   4360, Loss function: 4.855, Average Loss: 5.120, avg. samples / sec: 240.31
Iteration:   4380, Loss function: 5.135, Average Loss: 5.116, avg. samples / sec: 235.60
Iteration:   4400, Loss function: 4.870, Average Loss: 5.111, avg. samples / sec: 306.76
Iteration:   4420, Loss function: 4.908, Average Loss: 5.106, avg. samples / sec: 286.95
Iteration:   4440, Loss function: 5.001, Average Loss: 5.101, avg. samples / sec: 313.36
Iteration:   4460, Loss function: 5.060, Average Loss: 5.097, avg. samples / sec: 320.70
Iteration:   4480, Loss function: 5.089, Average Loss: 5.094, avg. samples / sec: 286.14
Iteration:   4500, Loss function: 4.760, Average Loss: 5.089, avg. samples / sec: 288.49
Iteration:   4520, Loss function: 4.699, Average Loss: 5.085, avg. samples / sec: 269.16
Iteration:   4540, Loss function: 5.089, Average Loss: 5.080, avg. samples / sec: 268.60
Iteration:   4560, Loss function: 4.639, Average Loss: 5.077, avg. samples / sec: 278.76
Iteration:   4580, Loss function: 4.793, Average Loss: 5.074, avg. samples / sec: 238.20
Iteration:   4600, Loss function: 4.863, Average Loss: 5.071, avg. samples / sec: 214.48
Iteration:   4620, Loss function: 4.789, Average Loss: 5.066, avg. samples / sec: 307.71
Iteration:   4640, Loss function: 4.633, Average Loss: 5.062, avg. samples / sec: 267.90
Iteration:   4660, Loss function: 4.668, Average Loss: 5.058, avg. samples / sec: 276.65
Iteration:   4680, Loss function: 5.303, Average Loss: 5.053, avg. samples / sec: 311.61
Iteration:   4700, Loss function: 4.692, Average Loss: 5.050, avg. samples / sec: 266.83
Iteration:   4720, Loss function: 4.773, Average Loss: 5.045, avg. samples / sec: 270.00
Iteration:   4740, Loss function: 4.716, Average Loss: 5.041, avg. samples / sec: 304.62
Iteration:   4760, Loss function: 4.584, Average Loss: 5.037, avg. samples / sec: 301.42
Iteration:   4780, Loss function: 4.941, Average Loss: 5.033, avg. samples / sec: 268.13
Iteration:   4800, Loss function: 4.849, Average Loss: 5.030, avg. samples / sec: 333.95
Iteration:   4820, Loss function: 4.689, Average Loss: 5.026, avg. samples / sec: 323.26
Iteration:   4840, Loss function: 5.214, Average Loss: 5.022, avg. samples / sec: 292.81
Iteration:   4860, Loss function: 4.717, Average Loss: 5.017, avg. samples / sec: 277.72
Iteration:   4880, Loss function: 5.084, Average Loss: 5.014, avg. samples / sec: 206.07
Iteration:   4900, Loss function: 4.597, Average Loss: 5.010, avg. samples / sec: 276.17
Iteration:   4920, Loss function: 4.936, Average Loss: 5.006, avg. samples / sec: 325.11
Iteration:   4940, Loss function: 4.877, Average Loss: 5.001, avg. samples / sec: 335.34
Iteration:   4960, Loss function: 4.704, Average Loss: 4.998, avg. samples / sec: 321.93
Iteration:   4980, Loss function: 4.601, Average Loss: 4.994, avg. samples / sec: 321.91
Iteration:   5000, Loss function: 4.740, Average Loss: 4.992, avg. samples / sec: 289.97
Iteration:   5020, Loss function: 5.067, Average Loss: 4.989, avg. samples / sec: 278.06
Iteration:   5040, Loss function: 4.801, Average Loss: 4.986, avg. samples / sec: 330.17
Iteration:   5060, Loss function: 4.760, Average Loss: 4.982, avg. samples / sec: 327.77
Iteration:   5080, Loss function: 4.508, Average Loss: 4.978, avg. samples / sec: 327.61
Iteration:   5100, Loss function: 4.804, Average Loss: 4.975, avg. samples / sec: 334.91
Iteration:   5120, Loss function: 4.714, Average Loss: 4.972, avg. samples / sec: 320.81
Iteration:   5140, Loss function: 4.857, Average Loss: 4.968, avg. samples / sec: 321.82
:::MLLOG {"namespace": "", "time_ms": 1639082707745, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.42 s
:::MLLOG {"namespace": "", "time_ms": 1639082803268, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082803375, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082803376, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=5.41s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10569
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21464
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09475
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18520
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20615
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10569 AP goal: 0.10000
Iteration:   5160, Loss function: 4.808, Average Loss: 4.965, avg. samples / sec: 21.97
:::MLLOG {"namespace": "", "time_ms": 1639082810482, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810483, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10568921740513665, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810483, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813436, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082816
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:56 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:46:56 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:56 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
+ result=2239
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
