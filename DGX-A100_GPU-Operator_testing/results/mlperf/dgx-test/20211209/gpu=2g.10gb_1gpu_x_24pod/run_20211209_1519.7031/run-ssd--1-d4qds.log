+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-d4qds.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-d4qds.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-d4qds.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8
+ echo 'Found 1 MIG instances: MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-d4qds to the sync file ...
run-ssd--1-d4qds Found 19 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
    14	run-ssd--1-wbth6
    15	run-ssd--1-4jg6j
    16	run-ssd--1-9qdbc
    17	run-ssd--1-6gxt2
    18	run-ssd--1-jx4zc
    19	run-ssd--1-d4qds
Thu Dec  9 20:09:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585648, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586272, "event_type": "POINT_IN_TIME", "key": "seed", "value": 903344598, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 903344598
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080590135, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590135, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590141, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590142, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590144, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693199, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693199, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080699664, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080699665, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700105, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700106, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700107, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.824, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.197, Average Loss: 0.458, avg. samples / sec: 177.02
Iteration:     40, Loss function: 20.738, Average Loss: 0.859, avg. samples / sec: 242.89
Iteration:     60, Loss function: 20.396, Average Loss: 1.249, avg. samples / sec: 269.94
Iteration:     80, Loss function: 19.993, Average Loss: 1.624, avg. samples / sec: 245.98
Iteration:    100, Loss function: 16.210, Average Loss: 1.958, avg. samples / sec: 263.88
Iteration:    120, Loss function: 12.036, Average Loss: 2.175, avg. samples / sec: 259.04
Iteration:    140, Loss function: 9.618, Average Loss: 2.337, avg. samples / sec: 260.13
Iteration:    160, Loss function: 9.181, Average Loss: 2.480, avg. samples / sec: 274.15
Iteration:    180, Loss function: 8.895, Average Loss: 2.610, avg. samples / sec: 271.28
Iteration:    200, Loss function: 8.588, Average Loss: 2.735, avg. samples / sec: 293.06
Iteration:    220, Loss function: 8.580, Average Loss: 2.855, avg. samples / sec: 299.73
Iteration:    240, Loss function: 8.663, Average Loss: 2.970, avg. samples / sec: 275.70
Iteration:    260, Loss function: 8.731, Average Loss: 3.083, avg. samples / sec: 281.15
Iteration:    280, Loss function: 8.572, Average Loss: 3.193, avg. samples / sec: 265.58
Iteration:    300, Loss function: 8.396, Average Loss: 3.296, avg. samples / sec: 273.46
Iteration:    320, Loss function: 8.275, Average Loss: 3.396, avg. samples / sec: 253.75
Iteration:    340, Loss function: 8.376, Average Loss: 3.495, avg. samples / sec: 302.96
Iteration:    360, Loss function: 8.130, Average Loss: 3.587, avg. samples / sec: 329.61
Iteration:    380, Loss function: 7.991, Average Loss: 3.675, avg. samples / sec: 312.15
Iteration:    400, Loss function: 7.892, Average Loss: 3.758, avg. samples / sec: 310.43
Iteration:    420, Loss function: 7.596, Average Loss: 3.838, avg. samples / sec: 248.47
Iteration:    440, Loss function: 7.953, Average Loss: 3.916, avg. samples / sec: 247.02
Iteration:    460, Loss function: 7.848, Average Loss: 3.993, avg. samples / sec: 311.95
Iteration:    480, Loss function: 7.498, Average Loss: 4.065, avg. samples / sec: 310.46
Iteration:    500, Loss function: 7.489, Average Loss: 4.135, avg. samples / sec: 293.28
Iteration:    520, Loss function: 7.442, Average Loss: 4.203, avg. samples / sec: 308.63
Iteration:    540, Loss function: 7.445, Average Loss: 4.268, avg. samples / sec: 326.83
Iteration:    560, Loss function: 7.211, Average Loss: 4.328, avg. samples / sec: 324.30
Iteration:    580, Loss function: 7.243, Average Loss: 4.388, avg. samples / sec: 295.42
Iteration:    600, Loss function: 7.305, Average Loss: 4.447, avg. samples / sec: 287.19
Iteration:    620, Loss function: 7.126, Average Loss: 4.501, avg. samples / sec: 292.24
Iteration:    640, Loss function: 6.842, Average Loss: 4.555, avg. samples / sec: 299.87
Iteration:    660, Loss function: 6.887, Average Loss: 4.606, avg. samples / sec: 251.80
Iteration:    680, Loss function: 7.348, Average Loss: 4.657, avg. samples / sec: 298.08
Iteration:    700, Loss function: 6.804, Average Loss: 4.707, avg. samples / sec: 292.85
Iteration:    720, Loss function: 6.959, Average Loss: 4.755, avg. samples / sec: 235.39
Iteration:    740, Loss function: 6.999, Average Loss: 4.800, avg. samples / sec: 304.27
Iteration:    760, Loss function: 7.076, Average Loss: 4.843, avg. samples / sec: 270.96
Iteration:    780, Loss function: 6.754, Average Loss: 4.885, avg. samples / sec: 217.57
Iteration:    800, Loss function: 7.131, Average Loss: 4.925, avg. samples / sec: 219.91
Iteration:    820, Loss function: 6.798, Average Loss: 4.962, avg. samples / sec: 319.69
Iteration:    840, Loss function: 6.877, Average Loss: 4.998, avg. samples / sec: 308.33
Iteration:    860, Loss function: 6.769, Average Loss: 5.032, avg. samples / sec: 261.81
Iteration:    880, Loss function: 6.600, Average Loss: 5.065, avg. samples / sec: 189.35
Iteration:    900, Loss function: 6.812, Average Loss: 5.096, avg. samples / sec: 212.76
Iteration:    920, Loss function: 6.708, Average Loss: 5.126, avg. samples / sec: 238.85
Iteration:    940, Loss function: 6.791, Average Loss: 5.156, avg. samples / sec: 271.54
Iteration:    960, Loss function: 6.391, Average Loss: 5.183, avg. samples / sec: 332.57
Iteration:    980, Loss function: 6.452, Average Loss: 5.211, avg. samples / sec: 285.10
Iteration:   1000, Loss function: 6.613, Average Loss: 5.236, avg. samples / sec: 247.34
Iteration:   1020, Loss function: 6.372, Average Loss: 5.260, avg. samples / sec: 324.84
:::MLLOG {"namespace": "", "time_ms": 1639081134102, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081134104, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.565, Average Loss: 5.284, avg. samples / sec: 310.29
Iteration:   1060, Loss function: 6.232, Average Loss: 5.307, avg. samples / sec: 320.20
Iteration:   1080, Loss function: 6.218, Average Loss: 5.328, avg. samples / sec: 316.17
Iteration:   1100, Loss function: 6.117, Average Loss: 5.348, avg. samples / sec: 332.10
Iteration:   1120, Loss function: 6.306, Average Loss: 5.367, avg. samples / sec: 331.20
Iteration:   1140, Loss function: 6.505, Average Loss: 5.386, avg. samples / sec: 282.93
Iteration:   1160, Loss function: 6.124, Average Loss: 5.403, avg. samples / sec: 311.83
Iteration:   1180, Loss function: 6.069, Average Loss: 5.419, avg. samples / sec: 265.60
Iteration:   1200, Loss function: 6.148, Average Loss: 5.435, avg. samples / sec: 284.29
Iteration:   1220, Loss function: 6.121, Average Loss: 5.449, avg. samples / sec: 267.49
Iteration:   1240, Loss function: 6.112, Average Loss: 5.462, avg. samples / sec: 253.26
Iteration:   1260, Loss function: 5.956, Average Loss: 5.474, avg. samples / sec: 323.02
Iteration:   1280, Loss function: 5.915, Average Loss: 5.486, avg. samples / sec: 311.62
Iteration:   1300, Loss function: 5.974, Average Loss: 5.498, avg. samples / sec: 295.45
Iteration:   1320, Loss function: 6.082, Average Loss: 5.510, avg. samples / sec: 321.51
Iteration:   1340, Loss function: 5.862, Average Loss: 5.519, avg. samples / sec: 313.76
Iteration:   1360, Loss function: 6.017, Average Loss: 5.529, avg. samples / sec: 273.05
Iteration:   1380, Loss function: 6.212, Average Loss: 5.539, avg. samples / sec: 330.32
Iteration:   1400, Loss function: 5.928, Average Loss: 5.547, avg. samples / sec: 289.16
Iteration:   1420, Loss function: 5.787, Average Loss: 5.555, avg. samples / sec: 331.17
Iteration:   1440, Loss function: 6.314, Average Loss: 5.563, avg. samples / sec: 341.12
Iteration:   1460, Loss function: 6.144, Average Loss: 5.572, avg. samples / sec: 317.01
Iteration:   1480, Loss function: 5.773, Average Loss: 5.579, avg. samples / sec: 334.38
Iteration:   1500, Loss function: 6.075, Average Loss: 5.588, avg. samples / sec: 320.44
Iteration:   1520, Loss function: 5.979, Average Loss: 5.594, avg. samples / sec: 326.11
Iteration:   1540, Loss function: 6.133, Average Loss: 5.598, avg. samples / sec: 303.44
Iteration:   1560, Loss function: 5.724, Average Loss: 5.603, avg. samples / sec: 302.13
Iteration:   1580, Loss function: 5.491, Average Loss: 5.607, avg. samples / sec: 341.66
Iteration:   1600, Loss function: 6.262, Average Loss: 5.613, avg. samples / sec: 320.49
Iteration:   1620, Loss function: 5.858, Average Loss: 5.619, avg. samples / sec: 256.42
Iteration:   1640, Loss function: 5.982, Average Loss: 5.622, avg. samples / sec: 277.04
Iteration:   1660, Loss function: 5.808, Average Loss: 5.626, avg. samples / sec: 312.21
Iteration:   1680, Loss function: 5.763, Average Loss: 5.628, avg. samples / sec: 296.65
Iteration:   1700, Loss function: 5.342, Average Loss: 5.631, avg. samples / sec: 315.13
Iteration:   1720, Loss function: 5.607, Average Loss: 5.632, avg. samples / sec: 332.08
Iteration:   1740, Loss function: 5.900, Average Loss: 5.635, avg. samples / sec: 330.33
Iteration:   1760, Loss function: 5.322, Average Loss: 5.636, avg. samples / sec: 329.63
Iteration:   1780, Loss function: 5.787, Average Loss: 5.638, avg. samples / sec: 332.91
Iteration:   1800, Loss function: 5.617, Average Loss: 5.640, avg. samples / sec: 334.22
Iteration:   1820, Loss function: 6.026, Average Loss: 5.641, avg. samples / sec: 288.87
Iteration:   1840, Loss function: 6.014, Average Loss: 5.641, avg. samples / sec: 293.03
Iteration:   1860, Loss function: 5.533, Average Loss: 5.640, avg. samples / sec: 316.44
Iteration:   1880, Loss function: 5.901, Average Loss: 5.642, avg. samples / sec: 313.51
Iteration:   1900, Loss function: 5.761, Average Loss: 5.642, avg. samples / sec: 314.36
Iteration:   1920, Loss function: 5.870, Average Loss: 5.641, avg. samples / sec: 334.55
Iteration:   1940, Loss function: 5.833, Average Loss: 5.640, avg. samples / sec: 312.02
Iteration:   1960, Loss function: 5.639, Average Loss: 5.640, avg. samples / sec: 335.69
Iteration:   1980, Loss function: 5.815, Average Loss: 5.639, avg. samples / sec: 329.47
Iteration:   2000, Loss function: 5.683, Average Loss: 5.639, avg. samples / sec: 324.51
Iteration:   2020, Loss function: 5.479, Average Loss: 5.638, avg. samples / sec: 302.88
Iteration:   2040, Loss function: 5.665, Average Loss: 5.637, avg. samples / sec: 307.77
:::MLLOG {"namespace": "", "time_ms": 1639081514857, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081514859, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.651, Average Loss: 5.635, avg. samples / sec: 257.78
Iteration:   2080, Loss function: 5.133, Average Loss: 5.633, avg. samples / sec: 252.20
Iteration:   2100, Loss function: 5.675, Average Loss: 5.632, avg. samples / sec: 295.03
Iteration:   2120, Loss function: 5.247, Average Loss: 5.628, avg. samples / sec: 286.33
Iteration:   2140, Loss function: 5.308, Average Loss: 5.624, avg. samples / sec: 329.05
Iteration:   2160, Loss function: 5.374, Average Loss: 5.622, avg. samples / sec: 321.48
Iteration:   2180, Loss function: 5.466, Average Loss: 5.618, avg. samples / sec: 323.19
Iteration:   2200, Loss function: 5.671, Average Loss: 5.615, avg. samples / sec: 327.18
Iteration:   2220, Loss function: 5.761, Average Loss: 5.613, avg. samples / sec: 333.88
Iteration:   2240, Loss function: 5.415, Average Loss: 5.610, avg. samples / sec: 294.38
Iteration:   2260, Loss function: 5.406, Average Loss: 5.607, avg. samples / sec: 250.87
Iteration:   2280, Loss function: 5.273, Average Loss: 5.605, avg. samples / sec: 263.99
Iteration:   2300, Loss function: 5.303, Average Loss: 5.602, avg. samples / sec: 252.28
Iteration:   2320, Loss function: 5.142, Average Loss: 5.599, avg. samples / sec: 303.22
Iteration:   2340, Loss function: 5.554, Average Loss: 5.596, avg. samples / sec: 203.54
Iteration:   2360, Loss function: 5.190, Average Loss: 5.591, avg. samples / sec: 274.08
Iteration:   2380, Loss function: 5.361, Average Loss: 5.588, avg. samples / sec: 252.54
Iteration:   2400, Loss function: 5.633, Average Loss: 5.584, avg. samples / sec: 262.67
Iteration:   2420, Loss function: 5.677, Average Loss: 5.581, avg. samples / sec: 304.69
Iteration:   2440, Loss function: 5.462, Average Loss: 5.577, avg. samples / sec: 298.57
Iteration:   2460, Loss function: 5.311, Average Loss: 5.573, avg. samples / sec: 308.02
Iteration:   2480, Loss function: 5.398, Average Loss: 5.569, avg. samples / sec: 332.44
Iteration:   2500, Loss function: 5.297, Average Loss: 5.565, avg. samples / sec: 321.02
Iteration:   2520, Loss function: 5.128, Average Loss: 5.559, avg. samples / sec: 267.98
Iteration:   2540, Loss function: 5.383, Average Loss: 5.555, avg. samples / sec: 333.27
Iteration:   2560, Loss function: 5.211, Average Loss: 5.551, avg. samples / sec: 299.33
Iteration:   2580, Loss function: 5.275, Average Loss: 5.548, avg. samples / sec: 336.84
Iteration:   2600, Loss function: 5.497, Average Loss: 5.545, avg. samples / sec: 323.48
Iteration:   2620, Loss function: 5.485, Average Loss: 5.540, avg. samples / sec: 321.61
Iteration:   2640, Loss function: 5.321, Average Loss: 5.537, avg. samples / sec: 314.70
Iteration:   2660, Loss function: 5.072, Average Loss: 5.533, avg. samples / sec: 294.54
Iteration:   2680, Loss function: 5.187, Average Loss: 5.530, avg. samples / sec: 318.97
Iteration:   2700, Loss function: 5.199, Average Loss: 5.525, avg. samples / sec: 286.50
Iteration:   2720, Loss function: 5.285, Average Loss: 5.521, avg. samples / sec: 300.20
Iteration:   2740, Loss function: 4.998, Average Loss: 5.517, avg. samples / sec: 330.66
Iteration:   2760, Loss function: 4.972, Average Loss: 5.512, avg. samples / sec: 332.76
Iteration:   2780, Loss function: 5.469, Average Loss: 5.509, avg. samples / sec: 318.24
Iteration:   2800, Loss function: 5.311, Average Loss: 5.504, avg. samples / sec: 316.18
Iteration:   2820, Loss function: 5.342, Average Loss: 5.499, avg. samples / sec: 320.42
Iteration:   2840, Loss function: 5.145, Average Loss: 5.494, avg. samples / sec: 336.63
Iteration:   2860, Loss function: 5.144, Average Loss: 5.489, avg. samples / sec: 319.42
Iteration:   2880, Loss function: 5.223, Average Loss: 5.484, avg. samples / sec: 299.66
Iteration:   2900, Loss function: 5.013, Average Loss: 5.479, avg. samples / sec: 323.90
Iteration:   2920, Loss function: 5.315, Average Loss: 5.473, avg. samples / sec: 326.97
Iteration:   2940, Loss function: 5.113, Average Loss: 5.468, avg. samples / sec: 249.73
Iteration:   2960, Loss function: 5.495, Average Loss: 5.464, avg. samples / sec: 264.59
Iteration:   2980, Loss function: 5.286, Average Loss: 5.461, avg. samples / sec: 312.61
Iteration:   3000, Loss function: 5.144, Average Loss: 5.455, avg. samples / sec: 213.84
Iteration:   3020, Loss function: 5.172, Average Loss: 5.449, avg. samples / sec: 327.42
Iteration:   3040, Loss function: 5.133, Average Loss: 5.443, avg. samples / sec: 307.53
Iteration:   3060, Loss function: 4.979, Average Loss: 5.438, avg. samples / sec: 324.00
Iteration:   3080, Loss function: 4.827, Average Loss: 5.432, avg. samples / sec: 287.38
:::MLLOG {"namespace": "", "time_ms": 1639081910848, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081910850, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.188, Average Loss: 5.426, avg. samples / sec: 319.13
Iteration:   3120, Loss function: 5.151, Average Loss: 5.420, avg. samples / sec: 317.42
Iteration:   3140, Loss function: 5.212, Average Loss: 5.415, avg. samples / sec: 324.21
Iteration:   3160, Loss function: 5.761, Average Loss: 5.410, avg. samples / sec: 221.69
Iteration:   3180, Loss function: 5.049, Average Loss: 5.405, avg. samples / sec: 237.24
Iteration:   3200, Loss function: 5.160, Average Loss: 5.400, avg. samples / sec: 283.84
Iteration:   3220, Loss function: 5.152, Average Loss: 5.396, avg. samples / sec: 289.55
Iteration:   3240, Loss function: 5.169, Average Loss: 5.391, avg. samples / sec: 293.78
Iteration:   3260, Loss function: 5.008, Average Loss: 5.386, avg. samples / sec: 238.20
Iteration:   3280, Loss function: 4.720, Average Loss: 5.380, avg. samples / sec: 254.90
Iteration:   3300, Loss function: 4.765, Average Loss: 5.375, avg. samples / sec: 329.65
Iteration:   3320, Loss function: 5.038, Average Loss: 5.370, avg. samples / sec: 336.92
Iteration:   3340, Loss function: 5.118, Average Loss: 5.365, avg. samples / sec: 328.24
Iteration:   3360, Loss function: 5.203, Average Loss: 5.357, avg. samples / sec: 219.00
Iteration:   3380, Loss function: 5.355, Average Loss: 5.351, avg. samples / sec: 240.48
Iteration:   3400, Loss function: 4.841, Average Loss: 5.345, avg. samples / sec: 334.30
Iteration:   3420, Loss function: 5.149, Average Loss: 5.340, avg. samples / sec: 313.33
Iteration:   3440, Loss function: 4.958, Average Loss: 5.335, avg. samples / sec: 331.14
Iteration:   3460, Loss function: 5.346, Average Loss: 5.331, avg. samples / sec: 320.62
Iteration:   3480, Loss function: 5.326, Average Loss: 5.327, avg. samples / sec: 327.89
Iteration:   3500, Loss function: 5.198, Average Loss: 5.323, avg. samples / sec: 319.49
Iteration:   3520, Loss function: 4.996, Average Loss: 5.319, avg. samples / sec: 299.24
Iteration:   3540, Loss function: 5.077, Average Loss: 5.314, avg. samples / sec: 220.61
Iteration:   3560, Loss function: 4.910, Average Loss: 5.310, avg. samples / sec: 282.98
Iteration:   3580, Loss function: 5.064, Average Loss: 5.306, avg. samples / sec: 274.28
Iteration:   3600, Loss function: 5.115, Average Loss: 5.300, avg. samples / sec: 316.73
Iteration:   3620, Loss function: 4.720, Average Loss: 5.295, avg. samples / sec: 239.41
Iteration:   3640, Loss function: 4.763, Average Loss: 5.289, avg. samples / sec: 275.89
Iteration:   3660, Loss function: 5.161, Average Loss: 5.284, avg. samples / sec: 319.67
Iteration:   3680, Loss function: 5.126, Average Loss: 5.279, avg. samples / sec: 301.28
Iteration:   3700, Loss function: 4.925, Average Loss: 5.274, avg. samples / sec: 331.76
Iteration:   3720, Loss function: 5.024, Average Loss: 5.268, avg. samples / sec: 321.26
Iteration:   3740, Loss function: 5.090, Average Loss: 5.264, avg. samples / sec: 333.33
Iteration:   3760, Loss function: 4.987, Average Loss: 5.259, avg. samples / sec: 335.87
Iteration:   3780, Loss function: 5.081, Average Loss: 5.254, avg. samples / sec: 326.96
Iteration:   3800, Loss function: 5.110, Average Loss: 5.252, avg. samples / sec: 320.87
Iteration:   3820, Loss function: 5.228, Average Loss: 5.247, avg. samples / sec: 313.36
Iteration:   3840, Loss function: 4.835, Average Loss: 5.242, avg. samples / sec: 290.34
Iteration:   3860, Loss function: 4.854, Average Loss: 5.238, avg. samples / sec: 291.09
Iteration:   3880, Loss function: 5.026, Average Loss: 5.232, avg. samples / sec: 333.62
Iteration:   3900, Loss function: 5.322, Average Loss: 5.227, avg. samples / sec: 336.97
Iteration:   3920, Loss function: 5.183, Average Loss: 5.221, avg. samples / sec: 326.83
Iteration:   3940, Loss function: 5.104, Average Loss: 5.217, avg. samples / sec: 224.38
Iteration:   3960, Loss function: 4.881, Average Loss: 5.213, avg. samples / sec: 311.95
Iteration:   3980, Loss function: 4.613, Average Loss: 5.207, avg. samples / sec: 318.84
Iteration:   4000, Loss function: 5.197, Average Loss: 5.203, avg. samples / sec: 332.17
Iteration:   4020, Loss function: 4.878, Average Loss: 5.198, avg. samples / sec: 335.20
Iteration:   4040, Loss function: 5.062, Average Loss: 5.195, avg. samples / sec: 310.94
Iteration:   4060, Loss function: 5.208, Average Loss: 5.191, avg. samples / sec: 326.18
Iteration:   4080, Loss function: 5.138, Average Loss: 5.185, avg. samples / sec: 325.40
Iteration:   4100, Loss function: 5.107, Average Loss: 5.183, avg. samples / sec: 320.39
:::MLLOG {"namespace": "", "time_ms": 1639082306214, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082306216, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.129, Average Loss: 5.181, avg. samples / sec: 299.92
Iteration:   4140, Loss function: 4.977, Average Loss: 5.177, avg. samples / sec: 269.74
Iteration:   4160, Loss function: 4.905, Average Loss: 5.170, avg. samples / sec: 280.20
Iteration:   4180, Loss function: 5.210, Average Loss: 5.164, avg. samples / sec: 220.58
Iteration:   4200, Loss function: 4.926, Average Loss: 5.159, avg. samples / sec: 309.62
Iteration:   4220, Loss function: 4.738, Average Loss: 5.153, avg. samples / sec: 317.18
Iteration:   4240, Loss function: 5.055, Average Loss: 5.147, avg. samples / sec: 334.21
Iteration:   4260, Loss function: 5.065, Average Loss: 5.143, avg. samples / sec: 242.40
Iteration:   4280, Loss function: 4.999, Average Loss: 5.137, avg. samples / sec: 329.29
Iteration:   4300, Loss function: 4.763, Average Loss: 5.131, avg. samples / sec: 322.02
Iteration:   4320, Loss function: 4.873, Average Loss: 5.127, avg. samples / sec: 321.00
Iteration:   4340, Loss function: 4.726, Average Loss: 5.122, avg. samples / sec: 311.00
Iteration:   4360, Loss function: 4.930, Average Loss: 5.118, avg. samples / sec: 264.10
Iteration:   4380, Loss function: 5.022, Average Loss: 5.115, avg. samples / sec: 280.85
Iteration:   4400, Loss function: 4.927, Average Loss: 5.111, avg. samples / sec: 272.67
Iteration:   4420, Loss function: 5.016, Average Loss: 5.106, avg. samples / sec: 307.52
Iteration:   4440, Loss function: 4.824, Average Loss: 5.101, avg. samples / sec: 323.56
Iteration:   4460, Loss function: 4.981, Average Loss: 5.095, avg. samples / sec: 322.51
Iteration:   4480, Loss function: 4.959, Average Loss: 5.093, avg. samples / sec: 298.70
Iteration:   4500, Loss function: 4.879, Average Loss: 5.090, avg. samples / sec: 291.85
Iteration:   4520, Loss function: 4.734, Average Loss: 5.086, avg. samples / sec: 180.41
Iteration:   4540, Loss function: 5.161, Average Loss: 5.081, avg. samples / sec: 151.59
Iteration:   4560, Loss function: 4.716, Average Loss: 5.077, avg. samples / sec: 211.34
Iteration:   4580, Loss function: 4.843, Average Loss: 5.076, avg. samples / sec: 273.05
Iteration:   4600, Loss function: 4.859, Average Loss: 5.071, avg. samples / sec: 307.83
Iteration:   4620, Loss function: 4.924, Average Loss: 5.067, avg. samples / sec: 317.11
Iteration:   4640, Loss function: 4.657, Average Loss: 5.061, avg. samples / sec: 313.07
Iteration:   4660, Loss function: 4.615, Average Loss: 5.058, avg. samples / sec: 287.65
Iteration:   4680, Loss function: 5.191, Average Loss: 5.053, avg. samples / sec: 310.37
Iteration:   4700, Loss function: 4.749, Average Loss: 5.049, avg. samples / sec: 329.66
Iteration:   4720, Loss function: 4.719, Average Loss: 5.045, avg. samples / sec: 331.70
Iteration:   4740, Loss function: 4.858, Average Loss: 5.040, avg. samples / sec: 324.40
Iteration:   4760, Loss function: 4.606, Average Loss: 5.037, avg. samples / sec: 330.12
Iteration:   4780, Loss function: 5.176, Average Loss: 5.033, avg. samples / sec: 282.09
Iteration:   4800, Loss function: 4.874, Average Loss: 5.030, avg. samples / sec: 250.02
Iteration:   4820, Loss function: 4.982, Average Loss: 5.027, avg. samples / sec: 278.15
Iteration:   4840, Loss function: 4.955, Average Loss: 5.023, avg. samples / sec: 320.78
Iteration:   4860, Loss function: 4.705, Average Loss: 5.018, avg. samples / sec: 331.90
Iteration:   4880, Loss function: 5.141, Average Loss: 5.015, avg. samples / sec: 326.07
Iteration:   4900, Loss function: 4.436, Average Loss: 5.011, avg. samples / sec: 330.02
Iteration:   4920, Loss function: 4.740, Average Loss: 5.007, avg. samples / sec: 326.04
Iteration:   4940, Loss function: 4.746, Average Loss: 5.003, avg. samples / sec: 317.27
Iteration:   4960, Loss function: 4.422, Average Loss: 5.000, avg. samples / sec: 316.54
Iteration:   4980, Loss function: 4.717, Average Loss: 4.996, avg. samples / sec: 322.99
Iteration:   5000, Loss function: 4.945, Average Loss: 4.993, avg. samples / sec: 259.49
Iteration:   5020, Loss function: 5.168, Average Loss: 4.990, avg. samples / sec: 328.11
Iteration:   5040, Loss function: 4.797, Average Loss: 4.987, avg. samples / sec: 331.19
Iteration:   5060, Loss function: 4.752, Average Loss: 4.983, avg. samples / sec: 331.81
Iteration:   5080, Loss function: 4.460, Average Loss: 4.979, avg. samples / sec: 327.48
Iteration:   5100, Loss function: 4.809, Average Loss: 4.977, avg. samples / sec: 314.12
Iteration:   5120, Loss function: 4.647, Average Loss: 4.974, avg. samples / sec: 324.29
Iteration:   5140, Loss function: 4.963, Average Loss: 4.971, avg. samples / sec: 323.34
:::MLLOG {"namespace": "", "time_ms": 1639082709292, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 96.57 s
:::MLLOG {"namespace": "", "time_ms": 1639082805993, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082806168, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.17s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.815, Average Loss: 4.966, avg. samples / sec: 21.62
DONE (t=5.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11027
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10187
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21104
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22401
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22401
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11027 AP goal: 0.10000
Iteration:   5180, Loss function: 4.947, Average Loss: 4.962, avg. samples / sec: 349.03
:::MLLOG {"namespace": "", "time_ms": 1639082820128, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820129, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1102722065358463, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820129, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820605, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:47:02 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:47:02 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585648, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586272, "event_type": "POINT_IN_TIME", "key": "seed", "value": 903344598, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 903344598
:::MLLOG {"namespace": "", "time_ms": 1639080590135, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590135, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590141, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590142, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590143, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590144, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693199, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693199, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080699664, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080699665, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700105, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700106, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700107, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.824, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.197, Average Loss: 0.458, avg. samples / sec: 177.02
Iteration:     40, Loss function: 20.738, Average Loss: 0.859, avg. samples / sec: 242.89
Iteration:     60, Loss function: 20.396, Average Loss: 1.249, avg. samples / sec: 269.94
Iteration:     80, Loss function: 19.993, Average Loss: 1.624, avg. samples / sec: 245.98
Iteration:    100, Loss function: 16.210, Average Loss: 1.958, avg. samples / sec: 263.88
Iteration:    120, Loss function: 12.036, Average Loss: 2.175, avg. samples / sec: 259.04
Iteration:    140, Loss function: 9.618, Average Loss: 2.337, avg. samples / sec: 260.13
Iteration:    160, Loss function: 9.181, Average Loss: 2.480, avg. samples / sec: 274.15
Iteration:    180, Loss function: 8.895, Average Loss: 2.610, avg. samples / sec: 271.28
Iteration:    200, Loss function: 8.588, Average Loss: 2.735, avg. samples / sec: 293.06
Iteration:    220, Loss function: 8.580, Average Loss: 2.855, avg. samples / sec: 299.73
Iteration:    240, Loss function: 8.663, Average Loss: 2.970, avg. samples / sec: 275.70
Iteration:    260, Loss function: 8.731, Average Loss: 3.083, avg. samples / sec: 281.15
Iteration:    280, Loss function: 8.572, Average Loss: 3.193, avg. samples / sec: 265.58
Iteration:    300, Loss function: 8.396, Average Loss: 3.296, avg. samples / sec: 273.46
Iteration:    320, Loss function: 8.275, Average Loss: 3.396, avg. samples / sec: 253.75
Iteration:    340, Loss function: 8.376, Average Loss: 3.495, avg. samples / sec: 302.96
Iteration:    360, Loss function: 8.130, Average Loss: 3.587, avg. samples / sec: 329.61
Iteration:    380, Loss function: 7.991, Average Loss: 3.675, avg. samples / sec: 312.15
Iteration:    400, Loss function: 7.892, Average Loss: 3.758, avg. samples / sec: 310.43
Iteration:    420, Loss function: 7.596, Average Loss: 3.838, avg. samples / sec: 248.47
Iteration:    440, Loss function: 7.953, Average Loss: 3.916, avg. samples / sec: 247.02
Iteration:    460, Loss function: 7.848, Average Loss: 3.993, avg. samples / sec: 311.95
Iteration:    480, Loss function: 7.498, Average Loss: 4.065, avg. samples / sec: 310.46
Iteration:    500, Loss function: 7.489, Average Loss: 4.135, avg. samples / sec: 293.28
Iteration:    520, Loss function: 7.442, Average Loss: 4.203, avg. samples / sec: 308.63
Iteration:    540, Loss function: 7.445, Average Loss: 4.268, avg. samples / sec: 326.83
Iteration:    560, Loss function: 7.211, Average Loss: 4.328, avg. samples / sec: 324.30
Iteration:    580, Loss function: 7.243, Average Loss: 4.388, avg. samples / sec: 295.42
Iteration:    600, Loss function: 7.305, Average Loss: 4.447, avg. samples / sec: 287.19
Iteration:    620, Loss function: 7.126, Average Loss: 4.501, avg. samples / sec: 292.24
Iteration:    640, Loss function: 6.842, Average Loss: 4.555, avg. samples / sec: 299.87
Iteration:    660, Loss function: 6.887, Average Loss: 4.606, avg. samples / sec: 251.80
Iteration:    680, Loss function: 7.348, Average Loss: 4.657, avg. samples / sec: 298.08
Iteration:    700, Loss function: 6.804, Average Loss: 4.707, avg. samples / sec: 292.85
Iteration:    720, Loss function: 6.959, Average Loss: 4.755, avg. samples / sec: 235.39
Iteration:    740, Loss function: 6.999, Average Loss: 4.800, avg. samples / sec: 304.27
Iteration:    760, Loss function: 7.076, Average Loss: 4.843, avg. samples / sec: 270.96
Iteration:    780, Loss function: 6.754, Average Loss: 4.885, avg. samples / sec: 217.57
Iteration:    800, Loss function: 7.131, Average Loss: 4.925, avg. samples / sec: 219.91
Iteration:    820, Loss function: 6.798, Average Loss: 4.962, avg. samples / sec: 319.69
Iteration:    840, Loss function: 6.877, Average Loss: 4.998, avg. samples / sec: 308.33
Iteration:    860, Loss function: 6.769, Average Loss: 5.032, avg. samples / sec: 261.81
Iteration:    880, Loss function: 6.600, Average Loss: 5.065, avg. samples / sec: 189.35
Iteration:    900, Loss function: 6.812, Average Loss: 5.096, avg. samples / sec: 212.76
Iteration:    920, Loss function: 6.708, Average Loss: 5.126, avg. samples / sec: 238.85
Iteration:    940, Loss function: 6.791, Average Loss: 5.156, avg. samples / sec: 271.54
Iteration:    960, Loss function: 6.391, Average Loss: 5.183, avg. samples / sec: 332.57
Iteration:    980, Loss function: 6.452, Average Loss: 5.211, avg. samples / sec: 285.10
Iteration:   1000, Loss function: 6.613, Average Loss: 5.236, avg. samples / sec: 247.34
Iteration:   1020, Loss function: 6.372, Average Loss: 5.260, avg. samples / sec: 324.84
:::MLLOG {"namespace": "", "time_ms": 1639081134102, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081134104, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.565, Average Loss: 5.284, avg. samples / sec: 310.29
Iteration:   1060, Loss function: 6.232, Average Loss: 5.307, avg. samples / sec: 320.20
Iteration:   1080, Loss function: 6.218, Average Loss: 5.328, avg. samples / sec: 316.17
Iteration:   1100, Loss function: 6.117, Average Loss: 5.348, avg. samples / sec: 332.10
Iteration:   1120, Loss function: 6.306, Average Loss: 5.367, avg. samples / sec: 331.20
Iteration:   1140, Loss function: 6.505, Average Loss: 5.386, avg. samples / sec: 282.93
Iteration:   1160, Loss function: 6.124, Average Loss: 5.403, avg. samples / sec: 311.83
Iteration:   1180, Loss function: 6.069, Average Loss: 5.419, avg. samples / sec: 265.60
Iteration:   1200, Loss function: 6.148, Average Loss: 5.435, avg. samples / sec: 284.29
Iteration:   1220, Loss function: 6.121, Average Loss: 5.449, avg. samples / sec: 267.49
Iteration:   1240, Loss function: 6.112, Average Loss: 5.462, avg. samples / sec: 253.26
Iteration:   1260, Loss function: 5.956, Average Loss: 5.474, avg. samples / sec: 323.02
Iteration:   1280, Loss function: 5.915, Average Loss: 5.486, avg. samples / sec: 311.62
Iteration:   1300, Loss function: 5.974, Average Loss: 5.498, avg. samples / sec: 295.45
Iteration:   1320, Loss function: 6.082, Average Loss: 5.510, avg. samples / sec: 321.51
Iteration:   1340, Loss function: 5.862, Average Loss: 5.519, avg. samples / sec: 313.76
Iteration:   1360, Loss function: 6.017, Average Loss: 5.529, avg. samples / sec: 273.05
Iteration:   1380, Loss function: 6.212, Average Loss: 5.539, avg. samples / sec: 330.32
Iteration:   1400, Loss function: 5.928, Average Loss: 5.547, avg. samples / sec: 289.16
Iteration:   1420, Loss function: 5.787, Average Loss: 5.555, avg. samples / sec: 331.17
Iteration:   1440, Loss function: 6.314, Average Loss: 5.563, avg. samples / sec: 341.12
Iteration:   1460, Loss function: 6.144, Average Loss: 5.572, avg. samples / sec: 317.01
Iteration:   1480, Loss function: 5.773, Average Loss: 5.579, avg. samples / sec: 334.38
Iteration:   1500, Loss function: 6.075, Average Loss: 5.588, avg. samples / sec: 320.44
Iteration:   1520, Loss function: 5.979, Average Loss: 5.594, avg. samples / sec: 326.11
Iteration:   1540, Loss function: 6.133, Average Loss: 5.598, avg. samples / sec: 303.44
Iteration:   1560, Loss function: 5.724, Average Loss: 5.603, avg. samples / sec: 302.13
Iteration:   1580, Loss function: 5.491, Average Loss: 5.607, avg. samples / sec: 341.66
Iteration:   1600, Loss function: 6.262, Average Loss: 5.613, avg. samples / sec: 320.49
Iteration:   1620, Loss function: 5.858, Average Loss: 5.619, avg. samples / sec: 256.42
Iteration:   1640, Loss function: 5.982, Average Loss: 5.622, avg. samples / sec: 277.04
Iteration:   1660, Loss function: 5.808, Average Loss: 5.626, avg. samples / sec: 312.21
Iteration:   1680, Loss function: 5.763, Average Loss: 5.628, avg. samples / sec: 296.65
Iteration:   1700, Loss function: 5.342, Average Loss: 5.631, avg. samples / sec: 315.13
Iteration:   1720, Loss function: 5.607, Average Loss: 5.632, avg. samples / sec: 332.08
Iteration:   1740, Loss function: 5.900, Average Loss: 5.635, avg. samples / sec: 330.33
Iteration:   1760, Loss function: 5.322, Average Loss: 5.636, avg. samples / sec: 329.63
Iteration:   1780, Loss function: 5.787, Average Loss: 5.638, avg. samples / sec: 332.91
Iteration:   1800, Loss function: 5.617, Average Loss: 5.640, avg. samples / sec: 334.22
Iteration:   1820, Loss function: 6.026, Average Loss: 5.641, avg. samples / sec: 288.87
Iteration:   1840, Loss function: 6.014, Average Loss: 5.641, avg. samples / sec: 293.03
Iteration:   1860, Loss function: 5.533, Average Loss: 5.640, avg. samples / sec: 316.44
Iteration:   1880, Loss function: 5.901, Average Loss: 5.642, avg. samples / sec: 313.51
Iteration:   1900, Loss function: 5.761, Average Loss: 5.642, avg. samples / sec: 314.36
Iteration:   1920, Loss function: 5.870, Average Loss: 5.641, avg. samples / sec: 334.55
Iteration:   1940, Loss function: 5.833, Average Loss: 5.640, avg. samples / sec: 312.02
Iteration:   1960, Loss function: 5.639, Average Loss: 5.640, avg. samples / sec: 335.69
Iteration:   1980, Loss function: 5.815, Average Loss: 5.639, avg. samples / sec: 329.47
Iteration:   2000, Loss function: 5.683, Average Loss: 5.639, avg. samples / sec: 324.51
Iteration:   2020, Loss function: 5.479, Average Loss: 5.638, avg. samples / sec: 302.88
Iteration:   2040, Loss function: 5.665, Average Loss: 5.637, avg. samples / sec: 307.77
:::MLLOG {"namespace": "", "time_ms": 1639081514857, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081514859, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.651, Average Loss: 5.635, avg. samples / sec: 257.78
Iteration:   2080, Loss function: 5.133, Average Loss: 5.633, avg. samples / sec: 252.20
Iteration:   2100, Loss function: 5.675, Average Loss: 5.632, avg. samples / sec: 295.03
Iteration:   2120, Loss function: 5.247, Average Loss: 5.628, avg. samples / sec: 286.33
Iteration:   2140, Loss function: 5.308, Average Loss: 5.624, avg. samples / sec: 329.05
Iteration:   2160, Loss function: 5.374, Average Loss: 5.622, avg. samples / sec: 321.48
Iteration:   2180, Loss function: 5.466, Average Loss: 5.618, avg. samples / sec: 323.19
Iteration:   2200, Loss function: 5.671, Average Loss: 5.615, avg. samples / sec: 327.18
Iteration:   2220, Loss function: 5.761, Average Loss: 5.613, avg. samples / sec: 333.88
Iteration:   2240, Loss function: 5.415, Average Loss: 5.610, avg. samples / sec: 294.38
Iteration:   2260, Loss function: 5.406, Average Loss: 5.607, avg. samples / sec: 250.87
Iteration:   2280, Loss function: 5.273, Average Loss: 5.605, avg. samples / sec: 263.99
Iteration:   2300, Loss function: 5.303, Average Loss: 5.602, avg. samples / sec: 252.28
Iteration:   2320, Loss function: 5.142, Average Loss: 5.599, avg. samples / sec: 303.22
Iteration:   2340, Loss function: 5.554, Average Loss: 5.596, avg. samples / sec: 203.54
Iteration:   2360, Loss function: 5.190, Average Loss: 5.591, avg. samples / sec: 274.08
Iteration:   2380, Loss function: 5.361, Average Loss: 5.588, avg. samples / sec: 252.54
Iteration:   2400, Loss function: 5.633, Average Loss: 5.584, avg. samples / sec: 262.67
Iteration:   2420, Loss function: 5.677, Average Loss: 5.581, avg. samples / sec: 304.69
Iteration:   2440, Loss function: 5.462, Average Loss: 5.577, avg. samples / sec: 298.57
Iteration:   2460, Loss function: 5.311, Average Loss: 5.573, avg. samples / sec: 308.02
Iteration:   2480, Loss function: 5.398, Average Loss: 5.569, avg. samples / sec: 332.44
Iteration:   2500, Loss function: 5.297, Average Loss: 5.565, avg. samples / sec: 321.02
Iteration:   2520, Loss function: 5.128, Average Loss: 5.559, avg. samples / sec: 267.98
Iteration:   2540, Loss function: 5.383, Average Loss: 5.555, avg. samples / sec: 333.27
Iteration:   2560, Loss function: 5.211, Average Loss: 5.551, avg. samples / sec: 299.33
Iteration:   2580, Loss function: 5.275, Average Loss: 5.548, avg. samples / sec: 336.84
Iteration:   2600, Loss function: 5.497, Average Loss: 5.545, avg. samples / sec: 323.48
Iteration:   2620, Loss function: 5.485, Average Loss: 5.540, avg. samples / sec: 321.61
Iteration:   2640, Loss function: 5.321, Average Loss: 5.537, avg. samples / sec: 314.70
Iteration:   2660, Loss function: 5.072, Average Loss: 5.533, avg. samples / sec: 294.54
Iteration:   2680, Loss function: 5.187, Average Loss: 5.530, avg. samples / sec: 318.97
Iteration:   2700, Loss function: 5.199, Average Loss: 5.525, avg. samples / sec: 286.50
Iteration:   2720, Loss function: 5.285, Average Loss: 5.521, avg. samples / sec: 300.20
Iteration:   2740, Loss function: 4.998, Average Loss: 5.517, avg. samples / sec: 330.66
Iteration:   2760, Loss function: 4.972, Average Loss: 5.512, avg. samples / sec: 332.76
Iteration:   2780, Loss function: 5.469, Average Loss: 5.509, avg. samples / sec: 318.24
Iteration:   2800, Loss function: 5.311, Average Loss: 5.504, avg. samples / sec: 316.18
Iteration:   2820, Loss function: 5.342, Average Loss: 5.499, avg. samples / sec: 320.42
Iteration:   2840, Loss function: 5.145, Average Loss: 5.494, avg. samples / sec: 336.63
Iteration:   2860, Loss function: 5.144, Average Loss: 5.489, avg. samples / sec: 319.42
Iteration:   2880, Loss function: 5.223, Average Loss: 5.484, avg. samples / sec: 299.66
Iteration:   2900, Loss function: 5.013, Average Loss: 5.479, avg. samples / sec: 323.90
Iteration:   2920, Loss function: 5.315, Average Loss: 5.473, avg. samples / sec: 326.97
Iteration:   2940, Loss function: 5.113, Average Loss: 5.468, avg. samples / sec: 249.73
Iteration:   2960, Loss function: 5.495, Average Loss: 5.464, avg. samples / sec: 264.59
Iteration:   2980, Loss function: 5.286, Average Loss: 5.461, avg. samples / sec: 312.61
Iteration:   3000, Loss function: 5.144, Average Loss: 5.455, avg. samples / sec: 213.84
Iteration:   3020, Loss function: 5.172, Average Loss: 5.449, avg. samples / sec: 327.42
Iteration:   3040, Loss function: 5.133, Average Loss: 5.443, avg. samples / sec: 307.53
Iteration:   3060, Loss function: 4.979, Average Loss: 5.438, avg. samples / sec: 324.00
Iteration:   3080, Loss function: 4.827, Average Loss: 5.432, avg. samples / sec: 287.38
:::MLLOG {"namespace": "", "time_ms": 1639081910848, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081910850, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.188, Average Loss: 5.426, avg. samples / sec: 319.13
Iteration:   3120, Loss function: 5.151, Average Loss: 5.420, avg. samples / sec: 317.42
Iteration:   3140, Loss function: 5.212, Average Loss: 5.415, avg. samples / sec: 324.21
Iteration:   3160, Loss function: 5.761, Average Loss: 5.410, avg. samples / sec: 221.69
Iteration:   3180, Loss function: 5.049, Average Loss: 5.405, avg. samples / sec: 237.24
Iteration:   3200, Loss function: 5.160, Average Loss: 5.400, avg. samples / sec: 283.84
Iteration:   3220, Loss function: 5.152, Average Loss: 5.396, avg. samples / sec: 289.55
Iteration:   3240, Loss function: 5.169, Average Loss: 5.391, avg. samples / sec: 293.78
Iteration:   3260, Loss function: 5.008, Average Loss: 5.386, avg. samples / sec: 238.20
Iteration:   3280, Loss function: 4.720, Average Loss: 5.380, avg. samples / sec: 254.90
Iteration:   3300, Loss function: 4.765, Average Loss: 5.375, avg. samples / sec: 329.65
Iteration:   3320, Loss function: 5.038, Average Loss: 5.370, avg. samples / sec: 336.92
Iteration:   3340, Loss function: 5.118, Average Loss: 5.365, avg. samples / sec: 328.24
Iteration:   3360, Loss function: 5.203, Average Loss: 5.357, avg. samples / sec: 219.00
Iteration:   3380, Loss function: 5.355, Average Loss: 5.351, avg. samples / sec: 240.48
Iteration:   3400, Loss function: 4.841, Average Loss: 5.345, avg. samples / sec: 334.30
Iteration:   3420, Loss function: 5.149, Average Loss: 5.340, avg. samples / sec: 313.33
Iteration:   3440, Loss function: 4.958, Average Loss: 5.335, avg. samples / sec: 331.14
Iteration:   3460, Loss function: 5.346, Average Loss: 5.331, avg. samples / sec: 320.62
Iteration:   3480, Loss function: 5.326, Average Loss: 5.327, avg. samples / sec: 327.89
Iteration:   3500, Loss function: 5.198, Average Loss: 5.323, avg. samples / sec: 319.49
Iteration:   3520, Loss function: 4.996, Average Loss: 5.319, avg. samples / sec: 299.24
Iteration:   3540, Loss function: 5.077, Average Loss: 5.314, avg. samples / sec: 220.61
Iteration:   3560, Loss function: 4.910, Average Loss: 5.310, avg. samples / sec: 282.98
Iteration:   3580, Loss function: 5.064, Average Loss: 5.306, avg. samples / sec: 274.28
Iteration:   3600, Loss function: 5.115, Average Loss: 5.300, avg. samples / sec: 316.73
Iteration:   3620, Loss function: 4.720, Average Loss: 5.295, avg. samples / sec: 239.41
Iteration:   3640, Loss function: 4.763, Average Loss: 5.289, avg. samples / sec: 275.89
Iteration:   3660, Loss function: 5.161, Average Loss: 5.284, avg. samples / sec: 319.67
Iteration:   3680, Loss function: 5.126, Average Loss: 5.279, avg. samples / sec: 301.28
Iteration:   3700, Loss function: 4.925, Average Loss: 5.274, avg. samples / sec: 331.76
Iteration:   3720, Loss function: 5.024, Average Loss: 5.268, avg. samples / sec: 321.26
Iteration:   3740, Loss function: 5.090, Average Loss: 5.264, avg. samples / sec: 333.33
Iteration:   3760, Loss function: 4.987, Average Loss: 5.259, avg. samples / sec: 335.87
Iteration:   3780, Loss function: 5.081, Average Loss: 5.254, avg. samples / sec: 326.96
Iteration:   3800, Loss function: 5.110, Average Loss: 5.252, avg. samples / sec: 320.87
Iteration:   3820, Loss function: 5.228, Average Loss: 5.247, avg. samples / sec: 313.36
Iteration:   3840, Loss function: 4.835, Average Loss: 5.242, avg. samples / sec: 290.34
Iteration:   3860, Loss function: 4.854, Average Loss: 5.238, avg. samples / sec: 291.09
Iteration:   3880, Loss function: 5.026, Average Loss: 5.232, avg. samples / sec: 333.62
Iteration:   3900, Loss function: 5.322, Average Loss: 5.227, avg. samples / sec: 336.97
Iteration:   3920, Loss function: 5.183, Average Loss: 5.221, avg. samples / sec: 326.83
Iteration:   3940, Loss function: 5.104, Average Loss: 5.217, avg. samples / sec: 224.38
Iteration:   3960, Loss function: 4.881, Average Loss: 5.213, avg. samples / sec: 311.95
Iteration:   3980, Loss function: 4.613, Average Loss: 5.207, avg. samples / sec: 318.84
Iteration:   4000, Loss function: 5.197, Average Loss: 5.203, avg. samples / sec: 332.17
Iteration:   4020, Loss function: 4.878, Average Loss: 5.198, avg. samples / sec: 335.20
Iteration:   4040, Loss function: 5.062, Average Loss: 5.195, avg. samples / sec: 310.94
Iteration:   4060, Loss function: 5.208, Average Loss: 5.191, avg. samples / sec: 326.18
Iteration:   4080, Loss function: 5.138, Average Loss: 5.185, avg. samples / sec: 325.40
Iteration:   4100, Loss function: 5.107, Average Loss: 5.183, avg. samples / sec: 320.39
:::MLLOG {"namespace": "", "time_ms": 1639082306214, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082306216, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.129, Average Loss: 5.181, avg. samples / sec: 299.92
Iteration:   4140, Loss function: 4.977, Average Loss: 5.177, avg. samples / sec: 269.74
Iteration:   4160, Loss function: 4.905, Average Loss: 5.170, avg. samples / sec: 280.20
Iteration:   4180, Loss function: 5.210, Average Loss: 5.164, avg. samples / sec: 220.58
Iteration:   4200, Loss function: 4.926, Average Loss: 5.159, avg. samples / sec: 309.62
Iteration:   4220, Loss function: 4.738, Average Loss: 5.153, avg. samples / sec: 317.18
Iteration:   4240, Loss function: 5.055, Average Loss: 5.147, avg. samples / sec: 334.21
Iteration:   4260, Loss function: 5.065, Average Loss: 5.143, avg. samples / sec: 242.40
Iteration:   4280, Loss function: 4.999, Average Loss: 5.137, avg. samples / sec: 329.29
Iteration:   4300, Loss function: 4.763, Average Loss: 5.131, avg. samples / sec: 322.02
Iteration:   4320, Loss function: 4.873, Average Loss: 5.127, avg. samples / sec: 321.00
Iteration:   4340, Loss function: 4.726, Average Loss: 5.122, avg. samples / sec: 311.00
Iteration:   4360, Loss function: 4.930, Average Loss: 5.118, avg. samples / sec: 264.10
Iteration:   4380, Loss function: 5.022, Average Loss: 5.115, avg. samples / sec: 280.85
Iteration:   4400, Loss function: 4.927, Average Loss: 5.111, avg. samples / sec: 272.67
Iteration:   4420, Loss function: 5.016, Average Loss: 5.106, avg. samples / sec: 307.52
Iteration:   4440, Loss function: 4.824, Average Loss: 5.101, avg. samples / sec: 323.56
Iteration:   4460, Loss function: 4.981, Average Loss: 5.095, avg. samples / sec: 322.51
Iteration:   4480, Loss function: 4.959, Average Loss: 5.093, avg. samples / sec: 298.70
Iteration:   4500, Loss function: 4.879, Average Loss: 5.090, avg. samples / sec: 291.85
Iteration:   4520, Loss function: 4.734, Average Loss: 5.086, avg. samples / sec: 180.41
Iteration:   4540, Loss function: 5.161, Average Loss: 5.081, avg. samples / sec: 151.59
Iteration:   4560, Loss function: 4.716, Average Loss: 5.077, avg. samples / sec: 211.34
Iteration:   4580, Loss function: 4.843, Average Loss: 5.076, avg. samples / sec: 273.05
Iteration:   4600, Loss function: 4.859, Average Loss: 5.071, avg. samples / sec: 307.83
Iteration:   4620, Loss function: 4.924, Average Loss: 5.067, avg. samples / sec: 317.11
Iteration:   4640, Loss function: 4.657, Average Loss: 5.061, avg. samples / sec: 313.07
Iteration:   4660, Loss function: 4.615, Average Loss: 5.058, avg. samples / sec: 287.65
Iteration:   4680, Loss function: 5.191, Average Loss: 5.053, avg. samples / sec: 310.37
Iteration:   4700, Loss function: 4.749, Average Loss: 5.049, avg. samples / sec: 329.66
Iteration:   4720, Loss function: 4.719, Average Loss: 5.045, avg. samples / sec: 331.70
Iteration:   4740, Loss function: 4.858, Average Loss: 5.040, avg. samples / sec: 324.40
Iteration:   4760, Loss function: 4.606, Average Loss: 5.037, avg. samples / sec: 330.12
Iteration:   4780, Loss function: 5.176, Average Loss: 5.033, avg. samples / sec: 282.09
Iteration:   4800, Loss function: 4.874, Average Loss: 5.030, avg. samples / sec: 250.02
Iteration:   4820, Loss function: 4.982, Average Loss: 5.027, avg. samples / sec: 278.15
Iteration:   4840, Loss function: 4.955, Average Loss: 5.023, avg. samples / sec: 320.78
Iteration:   4860, Loss function: 4.705, Average Loss: 5.018, avg. samples / sec: 331.90
Iteration:   4880, Loss function: 5.141, Average Loss: 5.015, avg. samples / sec: 326.07
Iteration:   4900, Loss function: 4.436, Average Loss: 5.011, avg. samples / sec: 330.02
Iteration:   4920, Loss function: 4.740, Average Loss: 5.007, avg. samples / sec: 326.04
Iteration:   4940, Loss function: 4.746, Average Loss: 5.003, avg. samples / sec: 317.27
Iteration:   4960, Loss function: 4.422, Average Loss: 5.000, avg. samples / sec: 316.54
Iteration:   4980, Loss function: 4.717, Average Loss: 4.996, avg. samples / sec: 322.99
Iteration:   5000, Loss function: 4.945, Average Loss: 4.993, avg. samples / sec: 259.49
Iteration:   5020, Loss function: 5.168, Average Loss: 4.990, avg. samples / sec: 328.11
Iteration:   5040, Loss function: 4.797, Average Loss: 4.987, avg. samples / sec: 331.19
Iteration:   5060, Loss function: 4.752, Average Loss: 4.983, avg. samples / sec: 331.81
Iteration:   5080, Loss function: 4.460, Average Loss: 4.979, avg. samples / sec: 327.48
Iteration:   5100, Loss function: 4.809, Average Loss: 4.977, avg. samples / sec: 314.12
Iteration:   5120, Loss function: 4.647, Average Loss: 4.974, avg. samples / sec: 324.29
Iteration:   5140, Loss function: 4.963, Average Loss: 4.971, avg. samples / sec: 323.34
:::MLLOG {"namespace": "", "time_ms": 1639082709292, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 96.57 s
:::MLLOG {"namespace": "", "time_ms": 1639082805993, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082806168, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.17s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.815, Average Loss: 4.966, avg. samples / sec: 21.62
DONE (t=5.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11027
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21958
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10187
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20005
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21104
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22401
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22401
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11027 AP goal: 0.10000
Iteration:   5180, Loss function: 4.947, Average Loss: 4.962, avg. samples / sec: 349.03
:::MLLOG {"namespace": "", "time_ms": 1639082820128, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820129, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1102722065358463, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820129, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082820605, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082822
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:47:02 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:47:02 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:47:02 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-3725f00f-ea29-50a3-bd07-e08f5b01f3b8)
+ result=2245
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2245,nvidia,2021-12-09 08:09:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2245,nvidia,2021-12-09 08:09:37 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
