+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-99zg7.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-99zg7.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-99zg7.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ echo 'Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080570
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:30 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:30 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:30 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_14-02-01 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ rm -f /data/coco2017/sync/2021-12-09_14-02-01
+ set +x
Thu Dec  9 20:09:30 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-99zg7 to the sync file ...
run-ssd--1-99zg7 Found 1 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
run-ssd--1-99zg7 Found 12 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
Thu Dec  9 20:09:40 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080583504, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080583725, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1266037678, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1266037678
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080587022, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080587023, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080587028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080690346, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080690346, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080692258, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080692259, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080692760, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080692761, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080692763, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.035, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.114, Average Loss: 0.456, avg. samples / sec: 241.31
Iteration:     40, Loss function: 20.735, Average Loss: 0.858, avg. samples / sec: 258.73
Iteration:     60, Loss function: 20.467, Average Loss: 1.248, avg. samples / sec: 253.01
Iteration:     80, Loss function: 20.205, Average Loss: 1.624, avg. samples / sec: 218.26
Iteration:    100, Loss function: 16.918, Average Loss: 1.965, avg. samples / sec: 261.75
Iteration:    120, Loss function: 11.479, Average Loss: 2.189, avg. samples / sec: 268.34
Iteration:    140, Loss function: 9.869, Average Loss: 2.357, avg. samples / sec: 239.49
Iteration:    160, Loss function: 9.270, Average Loss: 2.498, avg. samples / sec: 272.95
Iteration:    180, Loss function: 8.998, Average Loss: 2.626, avg. samples / sec: 250.17
Iteration:    200, Loss function: 8.563, Average Loss: 2.750, avg. samples / sec: 299.05
Iteration:    220, Loss function: 8.610, Average Loss: 2.870, avg. samples / sec: 269.89
Iteration:    240, Loss function: 8.664, Average Loss: 2.987, avg. samples / sec: 285.73
Iteration:    260, Loss function: 8.856, Average Loss: 3.100, avg. samples / sec: 273.92
Iteration:    280, Loss function: 8.498, Average Loss: 3.210, avg. samples / sec: 310.29
Iteration:    300, Loss function: 8.263, Average Loss: 3.314, avg. samples / sec: 315.76
Iteration:    320, Loss function: 8.403, Average Loss: 3.413, avg. samples / sec: 310.25
Iteration:    340, Loss function: 8.417, Average Loss: 3.510, avg. samples / sec: 312.74
Iteration:    360, Loss function: 8.373, Average Loss: 3.606, avg. samples / sec: 286.00
Iteration:    380, Loss function: 7.951, Average Loss: 3.697, avg. samples / sec: 216.20
Iteration:    400, Loss function: 7.991, Average Loss: 3.781, avg. samples / sec: 318.04
Iteration:    420, Loss function: 7.684, Average Loss: 3.862, avg. samples / sec: 204.03
Iteration:    440, Loss function: 7.766, Average Loss: 3.940, avg. samples / sec: 312.68
Iteration:    460, Loss function: 7.914, Average Loss: 4.016, avg. samples / sec: 293.89
Iteration:    480, Loss function: 7.735, Average Loss: 4.091, avg. samples / sec: 325.17
Iteration:    500, Loss function: 7.718, Average Loss: 4.162, avg. samples / sec: 334.35
Iteration:    520, Loss function: 7.611, Average Loss: 4.230, avg. samples / sec: 292.81
Iteration:    540, Loss function: 7.627, Average Loss: 4.296, avg. samples / sec: 264.72
Iteration:    560, Loss function: 7.144, Average Loss: 4.358, avg. samples / sec: 251.93
Iteration:    580, Loss function: 7.272, Average Loss: 4.419, avg. samples / sec: 329.28
Iteration:    600, Loss function: 7.415, Average Loss: 4.477, avg. samples / sec: 331.99
Iteration:    620, Loss function: 7.143, Average Loss: 4.535, avg. samples / sec: 319.03
Iteration:    640, Loss function: 6.905, Average Loss: 4.589, avg. samples / sec: 317.85
Iteration:    660, Loss function: 7.222, Average Loss: 4.640, avg. samples / sec: 322.44
Iteration:    680, Loss function: 7.421, Average Loss: 4.691, avg. samples / sec: 331.90
Iteration:    700, Loss function: 6.841, Average Loss: 4.739, avg. samples / sec: 285.92
Iteration:    720, Loss function: 6.962, Average Loss: 4.787, avg. samples / sec: 308.98
Iteration:    740, Loss function: 6.917, Average Loss: 4.831, avg. samples / sec: 310.92
Iteration:    760, Loss function: 7.135, Average Loss: 4.874, avg. samples / sec: 319.43
Iteration:    780, Loss function: 6.822, Average Loss: 4.916, avg. samples / sec: 332.62
Iteration:    800, Loss function: 7.248, Average Loss: 4.956, avg. samples / sec: 334.98
Iteration:    820, Loss function: 6.733, Average Loss: 4.993, avg. samples / sec: 324.85
Iteration:    840, Loss function: 6.849, Average Loss: 5.030, avg. samples / sec: 311.02
Iteration:    860, Loss function: 6.881, Average Loss: 5.064, avg. samples / sec: 318.87
Iteration:    880, Loss function: 6.786, Average Loss: 5.097, avg. samples / sec: 272.58
Iteration:    900, Loss function: 6.511, Average Loss: 5.127, avg. samples / sec: 195.28
Iteration:    920, Loss function: 6.466, Average Loss: 5.156, avg. samples / sec: 304.78
Iteration:    940, Loss function: 6.845, Average Loss: 5.185, avg. samples / sec: 312.88
Iteration:    960, Loss function: 6.471, Average Loss: 5.212, avg. samples / sec: 330.78
Iteration:    980, Loss function: 6.428, Average Loss: 5.239, avg. samples / sec: 302.66
Iteration:   1000, Loss function: 6.745, Average Loss: 5.265, avg. samples / sec: 278.92
Iteration:   1020, Loss function: 6.362, Average Loss: 5.289, avg. samples / sec: 326.18
:::MLLOG {"namespace": "", "time_ms": 1639081102377, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081102379, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.486, Average Loss: 5.312, avg. samples / sec: 296.06
Iteration:   1060, Loss function: 6.259, Average Loss: 5.334, avg. samples / sec: 237.88
Iteration:   1080, Loss function: 6.408, Average Loss: 5.355, avg. samples / sec: 266.60
Iteration:   1100, Loss function: 6.209, Average Loss: 5.374, avg. samples / sec: 338.16
Iteration:   1120, Loss function: 6.175, Average Loss: 5.393, avg. samples / sec: 317.11
Iteration:   1140, Loss function: 6.378, Average Loss: 5.411, avg. samples / sec: 311.77
Iteration:   1160, Loss function: 6.182, Average Loss: 5.428, avg. samples / sec: 273.66
Iteration:   1180, Loss function: 6.296, Average Loss: 5.445, avg. samples / sec: 234.47
Iteration:   1200, Loss function: 6.044, Average Loss: 5.461, avg. samples / sec: 246.63
Iteration:   1220, Loss function: 6.146, Average Loss: 5.475, avg. samples / sec: 245.23
Iteration:   1240, Loss function: 6.194, Average Loss: 5.488, avg. samples / sec: 308.44
Iteration:   1260, Loss function: 6.126, Average Loss: 5.500, avg. samples / sec: 318.23
Iteration:   1280, Loss function: 5.788, Average Loss: 5.512, avg. samples / sec: 328.00
Iteration:   1300, Loss function: 6.173, Average Loss: 5.524, avg. samples / sec: 333.03
Iteration:   1320, Loss function: 6.231, Average Loss: 5.536, avg. samples / sec: 309.27
Iteration:   1340, Loss function: 5.739, Average Loss: 5.546, avg. samples / sec: 302.84
Iteration:   1360, Loss function: 5.942, Average Loss: 5.555, avg. samples / sec: 270.86
Iteration:   1380, Loss function: 6.176, Average Loss: 5.566, avg. samples / sec: 317.37
Iteration:   1400, Loss function: 6.069, Average Loss: 5.573, avg. samples / sec: 324.80
Iteration:   1420, Loss function: 6.048, Average Loss: 5.581, avg. samples / sec: 276.99
Iteration:   1440, Loss function: 6.265, Average Loss: 5.589, avg. samples / sec: 331.30
Iteration:   1460, Loss function: 6.119, Average Loss: 5.596, avg. samples / sec: 290.68
Iteration:   1480, Loss function: 6.024, Average Loss: 5.604, avg. samples / sec: 338.77
Iteration:   1500, Loss function: 5.949, Average Loss: 5.611, avg. samples / sec: 331.25
Iteration:   1520, Loss function: 5.973, Average Loss: 5.617, avg. samples / sec: 337.60
Iteration:   1540, Loss function: 6.108, Average Loss: 5.621, avg. samples / sec: 316.98
Iteration:   1560, Loss function: 5.628, Average Loss: 5.625, avg. samples / sec: 310.68
Iteration:   1580, Loss function: 5.705, Average Loss: 5.630, avg. samples / sec: 341.53
Iteration:   1600, Loss function: 6.140, Average Loss: 5.635, avg. samples / sec: 208.67
Iteration:   1620, Loss function: 5.868, Average Loss: 5.640, avg. samples / sec: 255.28
Iteration:   1640, Loss function: 5.918, Average Loss: 5.643, avg. samples / sec: 338.57
Iteration:   1660, Loss function: 5.830, Average Loss: 5.646, avg. samples / sec: 326.63
Iteration:   1680, Loss function: 5.607, Average Loss: 5.649, avg. samples / sec: 331.60
Iteration:   1700, Loss function: 5.261, Average Loss: 5.651, avg. samples / sec: 317.32
Iteration:   1720, Loss function: 5.712, Average Loss: 5.653, avg. samples / sec: 278.80
Iteration:   1740, Loss function: 5.924, Average Loss: 5.656, avg. samples / sec: 245.70
Iteration:   1760, Loss function: 5.382, Average Loss: 5.657, avg. samples / sec: 251.44
Iteration:   1780, Loss function: 5.747, Average Loss: 5.658, avg. samples / sec: 156.28
Iteration:   1800, Loss function: 5.614, Average Loss: 5.660, avg. samples / sec: 200.26
Iteration:   1820, Loss function: 5.930, Average Loss: 5.661, avg. samples / sec: 203.61
Iteration:   1840, Loss function: 5.938, Average Loss: 5.662, avg. samples / sec: 321.51
Iteration:   1860, Loss function: 5.420, Average Loss: 5.661, avg. samples / sec: 334.06
Iteration:   1880, Loss function: 5.988, Average Loss: 5.662, avg. samples / sec: 328.91
Iteration:   1900, Loss function: 5.876, Average Loss: 5.662, avg. samples / sec: 330.00
Iteration:   1920, Loss function: 5.676, Average Loss: 5.660, avg. samples / sec: 329.16
Iteration:   1940, Loss function: 5.787, Average Loss: 5.660, avg. samples / sec: 326.21
Iteration:   1960, Loss function: 5.616, Average Loss: 5.660, avg. samples / sec: 321.46
Iteration:   1980, Loss function: 5.712, Average Loss: 5.659, avg. samples / sec: 263.08
Iteration:   2000, Loss function: 5.591, Average Loss: 5.658, avg. samples / sec: 276.42
Iteration:   2020, Loss function: 5.538, Average Loss: 5.656, avg. samples / sec: 213.31
Iteration:   2040, Loss function: 5.607, Average Loss: 5.655, avg. samples / sec: 267.39
:::MLLOG {"namespace": "", "time_ms": 1639081517685, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081517696, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.428, Average Loss: 5.652, avg. samples / sec: 258.65
Iteration:   2080, Loss function: 5.023, Average Loss: 5.649, avg. samples / sec: 261.86
Iteration:   2100, Loss function: 5.480, Average Loss: 5.646, avg. samples / sec: 274.90
Iteration:   2120, Loss function: 5.282, Average Loss: 5.643, avg. samples / sec: 280.40
Iteration:   2140, Loss function: 5.424, Average Loss: 5.639, avg. samples / sec: 274.44
Iteration:   2160, Loss function: 5.390, Average Loss: 5.637, avg. samples / sec: 324.74
Iteration:   2180, Loss function: 5.394, Average Loss: 5.634, avg. samples / sec: 332.25
Iteration:   2200, Loss function: 5.277, Average Loss: 5.630, avg. samples / sec: 331.90
Iteration:   2220, Loss function: 5.584, Average Loss: 5.628, avg. samples / sec: 311.18
Iteration:   2240, Loss function: 5.462, Average Loss: 5.626, avg. samples / sec: 247.48
Iteration:   2260, Loss function: 5.354, Average Loss: 5.621, avg. samples / sec: 285.13
Iteration:   2280, Loss function: 5.451, Average Loss: 5.618, avg. samples / sec: 234.06
Iteration:   2300, Loss function: 5.354, Average Loss: 5.614, avg. samples / sec: 292.39
Iteration:   2320, Loss function: 5.334, Average Loss: 5.611, avg. samples / sec: 273.97
Iteration:   2340, Loss function: 5.454, Average Loss: 5.609, avg. samples / sec: 313.20
Iteration:   2360, Loss function: 5.268, Average Loss: 5.605, avg. samples / sec: 326.28
Iteration:   2380, Loss function: 5.476, Average Loss: 5.601, avg. samples / sec: 264.71
Iteration:   2400, Loss function: 5.686, Average Loss: 5.597, avg. samples / sec: 206.68
Iteration:   2420, Loss function: 5.342, Average Loss: 5.592, avg. samples / sec: 288.28
Iteration:   2440, Loss function: 5.409, Average Loss: 5.588, avg. samples / sec: 318.17
Iteration:   2460, Loss function: 4.978, Average Loss: 5.585, avg. samples / sec: 328.21
Iteration:   2480, Loss function: 5.255, Average Loss: 5.582, avg. samples / sec: 309.60
Iteration:   2500, Loss function: 5.308, Average Loss: 5.578, avg. samples / sec: 271.64
Iteration:   2520, Loss function: 5.316, Average Loss: 5.572, avg. samples / sec: 260.93
Iteration:   2540, Loss function: 5.332, Average Loss: 5.569, avg. samples / sec: 320.41
Iteration:   2560, Loss function: 5.375, Average Loss: 5.565, avg. samples / sec: 332.92
Iteration:   2580, Loss function: 5.375, Average Loss: 5.562, avg. samples / sec: 322.12
Iteration:   2600, Loss function: 5.598, Average Loss: 5.559, avg. samples / sec: 333.01
Iteration:   2620, Loss function: 5.556, Average Loss: 5.554, avg. samples / sec: 316.58
Iteration:   2640, Loss function: 5.114, Average Loss: 5.551, avg. samples / sec: 319.36
Iteration:   2660, Loss function: 5.273, Average Loss: 5.547, avg. samples / sec: 330.93
Iteration:   2680, Loss function: 5.058, Average Loss: 5.543, avg. samples / sec: 288.33
Iteration:   2700, Loss function: 5.246, Average Loss: 5.538, avg. samples / sec: 276.24
Iteration:   2720, Loss function: 5.363, Average Loss: 5.533, avg. samples / sec: 333.06
Iteration:   2740, Loss function: 5.008, Average Loss: 5.529, avg. samples / sec: 318.83
Iteration:   2760, Loss function: 5.002, Average Loss: 5.524, avg. samples / sec: 325.16
Iteration:   2780, Loss function: 5.558, Average Loss: 5.520, avg. samples / sec: 333.54
Iteration:   2800, Loss function: 5.290, Average Loss: 5.516, avg. samples / sec: 320.48
Iteration:   2820, Loss function: 5.343, Average Loss: 5.511, avg. samples / sec: 320.76
Iteration:   2840, Loss function: 5.084, Average Loss: 5.506, avg. samples / sec: 231.43
Iteration:   2860, Loss function: 5.151, Average Loss: 5.501, avg. samples / sec: 299.27
Iteration:   2880, Loss function: 5.173, Average Loss: 5.496, avg. samples / sec: 265.51
Iteration:   2900, Loss function: 5.107, Average Loss: 5.491, avg. samples / sec: 296.25
Iteration:   2920, Loss function: 5.117, Average Loss: 5.485, avg. samples / sec: 277.85
Iteration:   2940, Loss function: 5.016, Average Loss: 5.480, avg. samples / sec: 330.31
Iteration:   2960, Loss function: 5.238, Average Loss: 5.475, avg. samples / sec: 328.66
Iteration:   2980, Loss function: 5.248, Average Loss: 5.470, avg. samples / sec: 300.04
Iteration:   3000, Loss function: 5.281, Average Loss: 5.465, avg. samples / sec: 299.94
Iteration:   3020, Loss function: 5.330, Average Loss: 5.458, avg. samples / sec: 313.16
Iteration:   3040, Loss function: 5.074, Average Loss: 5.453, avg. samples / sec: 266.20
Iteration:   3060, Loss function: 4.975, Average Loss: 5.448, avg. samples / sec: 254.42
Iteration:   3080, Loss function: 4.997, Average Loss: 5.442, avg. samples / sec: 314.88
:::MLLOG {"namespace": "", "time_ms": 1639081917434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081917437, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.035, Average Loss: 5.437, avg. samples / sec: 274.19
Iteration:   3120, Loss function: 4.976, Average Loss: 5.430, avg. samples / sec: 328.29
Iteration:   3140, Loss function: 4.998, Average Loss: 5.425, avg. samples / sec: 327.53
Iteration:   3160, Loss function: 5.551, Average Loss: 5.419, avg. samples / sec: 317.55
Iteration:   3180, Loss function: 4.946, Average Loss: 5.414, avg. samples / sec: 328.43
Iteration:   3200, Loss function: 5.155, Average Loss: 5.409, avg. samples / sec: 280.33
Iteration:   3220, Loss function: 5.055, Average Loss: 5.403, avg. samples / sec: 317.15
Iteration:   3240, Loss function: 5.125, Average Loss: 5.398, avg. samples / sec: 257.00
Iteration:   3260, Loss function: 5.094, Average Loss: 5.392, avg. samples / sec: 213.70
Iteration:   3280, Loss function: 4.851, Average Loss: 5.386, avg. samples / sec: 289.75
Iteration:   3300, Loss function: 4.760, Average Loss: 5.380, avg. samples / sec: 327.38
Iteration:   3320, Loss function: 4.933, Average Loss: 5.376, avg. samples / sec: 313.68
Iteration:   3340, Loss function: 5.104, Average Loss: 5.372, avg. samples / sec: 325.81
Iteration:   3360, Loss function: 5.044, Average Loss: 5.365, avg. samples / sec: 284.62
Iteration:   3380, Loss function: 5.131, Average Loss: 5.358, avg. samples / sec: 324.24
Iteration:   3400, Loss function: 4.959, Average Loss: 5.353, avg. samples / sec: 295.16
Iteration:   3420, Loss function: 5.117, Average Loss: 5.348, avg. samples / sec: 338.23
Iteration:   3440, Loss function: 5.120, Average Loss: 5.344, avg. samples / sec: 289.97
Iteration:   3460, Loss function: 5.078, Average Loss: 5.340, avg. samples / sec: 251.07
Iteration:   3480, Loss function: 5.150, Average Loss: 5.335, avg. samples / sec: 303.80
Iteration:   3500, Loss function: 5.242, Average Loss: 5.331, avg. samples / sec: 299.48
Iteration:   3520, Loss function: 5.001, Average Loss: 5.327, avg. samples / sec: 317.72
Iteration:   3540, Loss function: 5.036, Average Loss: 5.323, avg. samples / sec: 328.96
Iteration:   3560, Loss function: 4.927, Average Loss: 5.319, avg. samples / sec: 316.65
Iteration:   3580, Loss function: 5.181, Average Loss: 5.314, avg. samples / sec: 326.68
Iteration:   3600, Loss function: 5.258, Average Loss: 5.308, avg. samples / sec: 315.84
Iteration:   3620, Loss function: 4.953, Average Loss: 5.304, avg. samples / sec: 274.23
Iteration:   3640, Loss function: 4.698, Average Loss: 5.297, avg. samples / sec: 311.50
Iteration:   3660, Loss function: 4.942, Average Loss: 5.293, avg. samples / sec: 280.79
Iteration:   3680, Loss function: 5.002, Average Loss: 5.287, avg. samples / sec: 299.33
Iteration:   3700, Loss function: 4.974, Average Loss: 5.282, avg. samples / sec: 263.85
Iteration:   3720, Loss function: 4.878, Average Loss: 5.276, avg. samples / sec: 264.86
Iteration:   3740, Loss function: 5.263, Average Loss: 5.272, avg. samples / sec: 262.80
Iteration:   3760, Loss function: 5.067, Average Loss: 5.268, avg. samples / sec: 228.76
Iteration:   3780, Loss function: 5.208, Average Loss: 5.262, avg. samples / sec: 208.41
Iteration:   3800, Loss function: 5.133, Average Loss: 5.259, avg. samples / sec: 325.57
Iteration:   3820, Loss function: 5.189, Average Loss: 5.254, avg. samples / sec: 300.41
Iteration:   3840, Loss function: 4.603, Average Loss: 5.249, avg. samples / sec: 296.50
Iteration:   3860, Loss function: 4.807, Average Loss: 5.243, avg. samples / sec: 307.91
Iteration:   3880, Loss function: 4.982, Average Loss: 5.237, avg. samples / sec: 324.18
Iteration:   3900, Loss function: 5.220, Average Loss: 5.232, avg. samples / sec: 289.78
Iteration:   3920, Loss function: 5.121, Average Loss: 5.227, avg. samples / sec: 267.84
Iteration:   3940, Loss function: 5.172, Average Loss: 5.223, avg. samples / sec: 311.90
Iteration:   3960, Loss function: 4.896, Average Loss: 5.219, avg. samples / sec: 322.58
Iteration:   3980, Loss function: 4.771, Average Loss: 5.213, avg. samples / sec: 311.51
Iteration:   4000, Loss function: 5.169, Average Loss: 5.210, avg. samples / sec: 243.84
Iteration:   4020, Loss function: 5.034, Average Loss: 5.205, avg. samples / sec: 230.46
Iteration:   4040, Loss function: 5.061, Average Loss: 5.202, avg. samples / sec: 254.70
Iteration:   4060, Loss function: 5.032, Average Loss: 5.197, avg. samples / sec: 310.85
Iteration:   4080, Loss function: 5.076, Average Loss: 5.192, avg. samples / sec: 269.41
Iteration:   4100, Loss function: 5.112, Average Loss: 5.189, avg. samples / sec: 253.79
:::MLLOG {"namespace": "", "time_ms": 1639082324334, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082324345, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.912, Average Loss: 5.184, avg. samples / sec: 254.56
Iteration:   4140, Loss function: 4.998, Average Loss: 5.180, avg. samples / sec: 244.92
Iteration:   4160, Loss function: 4.995, Average Loss: 5.173, avg. samples / sec: 285.14
Iteration:   4180, Loss function: 5.020, Average Loss: 5.167, avg. samples / sec: 289.62
Iteration:   4200, Loss function: 4.895, Average Loss: 5.164, avg. samples / sec: 329.40
Iteration:   4220, Loss function: 4.756, Average Loss: 5.158, avg. samples / sec: 269.84
Iteration:   4240, Loss function: 4.861, Average Loss: 5.153, avg. samples / sec: 159.02
Iteration:   4260, Loss function: 5.067, Average Loss: 5.148, avg. samples / sec: 304.38
Iteration:   4280, Loss function: 5.030, Average Loss: 5.142, avg. samples / sec: 302.60
Iteration:   4300, Loss function: 4.839, Average Loss: 5.136, avg. samples / sec: 325.81
Iteration:   4320, Loss function: 4.918, Average Loss: 5.130, avg. samples / sec: 313.46
Iteration:   4340, Loss function: 4.808, Average Loss: 5.124, avg. samples / sec: 311.17
Iteration:   4360, Loss function: 4.928, Average Loss: 5.121, avg. samples / sec: 306.75
Iteration:   4380, Loss function: 4.885, Average Loss: 5.116, avg. samples / sec: 311.40
Iteration:   4400, Loss function: 4.933, Average Loss: 5.113, avg. samples / sec: 326.09
Iteration:   4420, Loss function: 4.700, Average Loss: 5.109, avg. samples / sec: 323.16
Iteration:   4440, Loss function: 4.722, Average Loss: 5.103, avg. samples / sec: 304.94
Iteration:   4460, Loss function: 5.073, Average Loss: 5.099, avg. samples / sec: 332.77
Iteration:   4480, Loss function: 4.945, Average Loss: 5.096, avg. samples / sec: 328.12
Iteration:   4500, Loss function: 5.029, Average Loss: 5.093, avg. samples / sec: 330.31
Iteration:   4520, Loss function: 4.593, Average Loss: 5.089, avg. samples / sec: 318.11
Iteration:   4540, Loss function: 5.125, Average Loss: 5.085, avg. samples / sec: 302.51
Iteration:   4560, Loss function: 4.858, Average Loss: 5.081, avg. samples / sec: 329.82
Iteration:   4580, Loss function: 4.848, Average Loss: 5.079, avg. samples / sec: 312.25
Iteration:   4600, Loss function: 4.744, Average Loss: 5.074, avg. samples / sec: 316.24
Iteration:   4620, Loss function: 4.784, Average Loss: 5.069, avg. samples / sec: 307.28
Iteration:   4640, Loss function: 4.721, Average Loss: 5.065, avg. samples / sec: 299.40
Iteration:   4660, Loss function: 4.924, Average Loss: 5.061, avg. samples / sec: 267.82
Iteration:   4680, Loss function: 5.205, Average Loss: 5.057, avg. samples / sec: 333.56
Iteration:   4700, Loss function: 4.849, Average Loss: 5.053, avg. samples / sec: 303.94
Iteration:   4720, Loss function: 4.894, Average Loss: 5.049, avg. samples / sec: 274.33
Iteration:   4740, Loss function: 4.711, Average Loss: 5.045, avg. samples / sec: 277.16
Iteration:   4760, Loss function: 4.705, Average Loss: 5.041, avg. samples / sec: 298.23
Iteration:   4780, Loss function: 5.133, Average Loss: 5.037, avg. samples / sec: 317.80
Iteration:   4800, Loss function: 4.968, Average Loss: 5.034, avg. samples / sec: 311.74
Iteration:   4820, Loss function: 4.734, Average Loss: 5.031, avg. samples / sec: 265.98
Iteration:   4840, Loss function: 5.023, Average Loss: 5.027, avg. samples / sec: 296.96
Iteration:   4860, Loss function: 4.692, Average Loss: 5.023, avg. samples / sec: 278.43
Iteration:   4880, Loss function: 5.225, Average Loss: 5.019, avg. samples / sec: 312.23
Iteration:   4900, Loss function: 4.646, Average Loss: 5.015, avg. samples / sec: 298.36
Iteration:   4920, Loss function: 4.895, Average Loss: 5.012, avg. samples / sec: 253.94
Iteration:   4940, Loss function: 4.676, Average Loss: 5.008, avg. samples / sec: 322.38
Iteration:   4960, Loss function: 4.741, Average Loss: 5.004, avg. samples / sec: 338.72
Iteration:   4980, Loss function: 4.617, Average Loss: 5.001, avg. samples / sec: 311.52
Iteration:   5000, Loss function: 4.915, Average Loss: 4.997, avg. samples / sec: 311.80
Iteration:   5020, Loss function: 5.046, Average Loss: 4.993, avg. samples / sec: 297.84
Iteration:   5040, Loss function: 4.803, Average Loss: 4.991, avg. samples / sec: 334.72
Iteration:   5060, Loss function: 4.671, Average Loss: 4.987, avg. samples / sec: 327.68
Iteration:   5080, Loss function: 4.513, Average Loss: 4.982, avg. samples / sec: 305.60
Iteration:   5100, Loss function: 4.667, Average Loss: 4.980, avg. samples / sec: 316.52
Iteration:   5120, Loss function: 4.599, Average Loss: 4.977, avg. samples / sec: 294.84
Iteration:   5140, Loss function: 5.139, Average Loss: 4.973, avg. samples / sec: 321.97
:::MLLOG {"namespace": "", "time_ms": 1639082717050, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 93.74 s
:::MLLOG {"namespace": "", "time_ms": 1639082811006, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082811106, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082811107, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.95s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10790
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21666
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09728
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19583
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13958
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20618
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10790 AP goal: 0.10000
Iteration:   5160, Loss function: 4.944, Average Loss: 4.968, avg. samples / sec: 22.28
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10790322809823805, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082818372, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:47:00 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:47:00 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080583504, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080583725, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1266037678, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1266037678
:::MLLOG {"namespace": "", "time_ms": 1639080587022, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080587023, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080587027, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080587028, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080690346, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080690346, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080692258, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080692259, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080692760, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080692761, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080692763, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.035, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.114, Average Loss: 0.456, avg. samples / sec: 241.31
Iteration:     40, Loss function: 20.735, Average Loss: 0.858, avg. samples / sec: 258.73
Iteration:     60, Loss function: 20.467, Average Loss: 1.248, avg. samples / sec: 253.01
Iteration:     80, Loss function: 20.205, Average Loss: 1.624, avg. samples / sec: 218.26
Iteration:    100, Loss function: 16.918, Average Loss: 1.965, avg. samples / sec: 261.75
Iteration:    120, Loss function: 11.479, Average Loss: 2.189, avg. samples / sec: 268.34
Iteration:    140, Loss function: 9.869, Average Loss: 2.357, avg. samples / sec: 239.49
Iteration:    160, Loss function: 9.270, Average Loss: 2.498, avg. samples / sec: 272.95
Iteration:    180, Loss function: 8.998, Average Loss: 2.626, avg. samples / sec: 250.17
Iteration:    200, Loss function: 8.563, Average Loss: 2.750, avg. samples / sec: 299.05
Iteration:    220, Loss function: 8.610, Average Loss: 2.870, avg. samples / sec: 269.89
Iteration:    240, Loss function: 8.664, Average Loss: 2.987, avg. samples / sec: 285.73
Iteration:    260, Loss function: 8.856, Average Loss: 3.100, avg. samples / sec: 273.92
Iteration:    280, Loss function: 8.498, Average Loss: 3.210, avg. samples / sec: 310.29
Iteration:    300, Loss function: 8.263, Average Loss: 3.314, avg. samples / sec: 315.76
Iteration:    320, Loss function: 8.403, Average Loss: 3.413, avg. samples / sec: 310.25
Iteration:    340, Loss function: 8.417, Average Loss: 3.510, avg. samples / sec: 312.74
Iteration:    360, Loss function: 8.373, Average Loss: 3.606, avg. samples / sec: 286.00
Iteration:    380, Loss function: 7.951, Average Loss: 3.697, avg. samples / sec: 216.20
Iteration:    400, Loss function: 7.991, Average Loss: 3.781, avg. samples / sec: 318.04
Iteration:    420, Loss function: 7.684, Average Loss: 3.862, avg. samples / sec: 204.03
Iteration:    440, Loss function: 7.766, Average Loss: 3.940, avg. samples / sec: 312.68
Iteration:    460, Loss function: 7.914, Average Loss: 4.016, avg. samples / sec: 293.89
Iteration:    480, Loss function: 7.735, Average Loss: 4.091, avg. samples / sec: 325.17
Iteration:    500, Loss function: 7.718, Average Loss: 4.162, avg. samples / sec: 334.35
Iteration:    520, Loss function: 7.611, Average Loss: 4.230, avg. samples / sec: 292.81
Iteration:    540, Loss function: 7.627, Average Loss: 4.296, avg. samples / sec: 264.72
Iteration:    560, Loss function: 7.144, Average Loss: 4.358, avg. samples / sec: 251.93
Iteration:    580, Loss function: 7.272, Average Loss: 4.419, avg. samples / sec: 329.28
Iteration:    600, Loss function: 7.415, Average Loss: 4.477, avg. samples / sec: 331.99
Iteration:    620, Loss function: 7.143, Average Loss: 4.535, avg. samples / sec: 319.03
Iteration:    640, Loss function: 6.905, Average Loss: 4.589, avg. samples / sec: 317.85
Iteration:    660, Loss function: 7.222, Average Loss: 4.640, avg. samples / sec: 322.44
Iteration:    680, Loss function: 7.421, Average Loss: 4.691, avg. samples / sec: 331.90
Iteration:    700, Loss function: 6.841, Average Loss: 4.739, avg. samples / sec: 285.92
Iteration:    720, Loss function: 6.962, Average Loss: 4.787, avg. samples / sec: 308.98
Iteration:    740, Loss function: 6.917, Average Loss: 4.831, avg. samples / sec: 310.92
Iteration:    760, Loss function: 7.135, Average Loss: 4.874, avg. samples / sec: 319.43
Iteration:    780, Loss function: 6.822, Average Loss: 4.916, avg. samples / sec: 332.62
Iteration:    800, Loss function: 7.248, Average Loss: 4.956, avg. samples / sec: 334.98
Iteration:    820, Loss function: 6.733, Average Loss: 4.993, avg. samples / sec: 324.85
Iteration:    840, Loss function: 6.849, Average Loss: 5.030, avg. samples / sec: 311.02
Iteration:    860, Loss function: 6.881, Average Loss: 5.064, avg. samples / sec: 318.87
Iteration:    880, Loss function: 6.786, Average Loss: 5.097, avg. samples / sec: 272.58
Iteration:    900, Loss function: 6.511, Average Loss: 5.127, avg. samples / sec: 195.28
Iteration:    920, Loss function: 6.466, Average Loss: 5.156, avg. samples / sec: 304.78
Iteration:    940, Loss function: 6.845, Average Loss: 5.185, avg. samples / sec: 312.88
Iteration:    960, Loss function: 6.471, Average Loss: 5.212, avg. samples / sec: 330.78
Iteration:    980, Loss function: 6.428, Average Loss: 5.239, avg. samples / sec: 302.66
Iteration:   1000, Loss function: 6.745, Average Loss: 5.265, avg. samples / sec: 278.92
Iteration:   1020, Loss function: 6.362, Average Loss: 5.289, avg. samples / sec: 326.18
:::MLLOG {"namespace": "", "time_ms": 1639081102377, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081102379, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.486, Average Loss: 5.312, avg. samples / sec: 296.06
Iteration:   1060, Loss function: 6.259, Average Loss: 5.334, avg. samples / sec: 237.88
Iteration:   1080, Loss function: 6.408, Average Loss: 5.355, avg. samples / sec: 266.60
Iteration:   1100, Loss function: 6.209, Average Loss: 5.374, avg. samples / sec: 338.16
Iteration:   1120, Loss function: 6.175, Average Loss: 5.393, avg. samples / sec: 317.11
Iteration:   1140, Loss function: 6.378, Average Loss: 5.411, avg. samples / sec: 311.77
Iteration:   1160, Loss function: 6.182, Average Loss: 5.428, avg. samples / sec: 273.66
Iteration:   1180, Loss function: 6.296, Average Loss: 5.445, avg. samples / sec: 234.47
Iteration:   1200, Loss function: 6.044, Average Loss: 5.461, avg. samples / sec: 246.63
Iteration:   1220, Loss function: 6.146, Average Loss: 5.475, avg. samples / sec: 245.23
Iteration:   1240, Loss function: 6.194, Average Loss: 5.488, avg. samples / sec: 308.44
Iteration:   1260, Loss function: 6.126, Average Loss: 5.500, avg. samples / sec: 318.23
Iteration:   1280, Loss function: 5.788, Average Loss: 5.512, avg. samples / sec: 328.00
Iteration:   1300, Loss function: 6.173, Average Loss: 5.524, avg. samples / sec: 333.03
Iteration:   1320, Loss function: 6.231, Average Loss: 5.536, avg. samples / sec: 309.27
Iteration:   1340, Loss function: 5.739, Average Loss: 5.546, avg. samples / sec: 302.84
Iteration:   1360, Loss function: 5.942, Average Loss: 5.555, avg. samples / sec: 270.86
Iteration:   1380, Loss function: 6.176, Average Loss: 5.566, avg. samples / sec: 317.37
Iteration:   1400, Loss function: 6.069, Average Loss: 5.573, avg. samples / sec: 324.80
Iteration:   1420, Loss function: 6.048, Average Loss: 5.581, avg. samples / sec: 276.99
Iteration:   1440, Loss function: 6.265, Average Loss: 5.589, avg. samples / sec: 331.30
Iteration:   1460, Loss function: 6.119, Average Loss: 5.596, avg. samples / sec: 290.68
Iteration:   1480, Loss function: 6.024, Average Loss: 5.604, avg. samples / sec: 338.77
Iteration:   1500, Loss function: 5.949, Average Loss: 5.611, avg. samples / sec: 331.25
Iteration:   1520, Loss function: 5.973, Average Loss: 5.617, avg. samples / sec: 337.60
Iteration:   1540, Loss function: 6.108, Average Loss: 5.621, avg. samples / sec: 316.98
Iteration:   1560, Loss function: 5.628, Average Loss: 5.625, avg. samples / sec: 310.68
Iteration:   1580, Loss function: 5.705, Average Loss: 5.630, avg. samples / sec: 341.53
Iteration:   1600, Loss function: 6.140, Average Loss: 5.635, avg. samples / sec: 208.67
Iteration:   1620, Loss function: 5.868, Average Loss: 5.640, avg. samples / sec: 255.28
Iteration:   1640, Loss function: 5.918, Average Loss: 5.643, avg. samples / sec: 338.57
Iteration:   1660, Loss function: 5.830, Average Loss: 5.646, avg. samples / sec: 326.63
Iteration:   1680, Loss function: 5.607, Average Loss: 5.649, avg. samples / sec: 331.60
Iteration:   1700, Loss function: 5.261, Average Loss: 5.651, avg. samples / sec: 317.32
Iteration:   1720, Loss function: 5.712, Average Loss: 5.653, avg. samples / sec: 278.80
Iteration:   1740, Loss function: 5.924, Average Loss: 5.656, avg. samples / sec: 245.70
Iteration:   1760, Loss function: 5.382, Average Loss: 5.657, avg. samples / sec: 251.44
Iteration:   1780, Loss function: 5.747, Average Loss: 5.658, avg. samples / sec: 156.28
Iteration:   1800, Loss function: 5.614, Average Loss: 5.660, avg. samples / sec: 200.26
Iteration:   1820, Loss function: 5.930, Average Loss: 5.661, avg. samples / sec: 203.61
Iteration:   1840, Loss function: 5.938, Average Loss: 5.662, avg. samples / sec: 321.51
Iteration:   1860, Loss function: 5.420, Average Loss: 5.661, avg. samples / sec: 334.06
Iteration:   1880, Loss function: 5.988, Average Loss: 5.662, avg. samples / sec: 328.91
Iteration:   1900, Loss function: 5.876, Average Loss: 5.662, avg. samples / sec: 330.00
Iteration:   1920, Loss function: 5.676, Average Loss: 5.660, avg. samples / sec: 329.16
Iteration:   1940, Loss function: 5.787, Average Loss: 5.660, avg. samples / sec: 326.21
Iteration:   1960, Loss function: 5.616, Average Loss: 5.660, avg. samples / sec: 321.46
Iteration:   1980, Loss function: 5.712, Average Loss: 5.659, avg. samples / sec: 263.08
Iteration:   2000, Loss function: 5.591, Average Loss: 5.658, avg. samples / sec: 276.42
Iteration:   2020, Loss function: 5.538, Average Loss: 5.656, avg. samples / sec: 213.31
Iteration:   2040, Loss function: 5.607, Average Loss: 5.655, avg. samples / sec: 267.39
:::MLLOG {"namespace": "", "time_ms": 1639081517685, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081517696, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.428, Average Loss: 5.652, avg. samples / sec: 258.65
Iteration:   2080, Loss function: 5.023, Average Loss: 5.649, avg. samples / sec: 261.86
Iteration:   2100, Loss function: 5.480, Average Loss: 5.646, avg. samples / sec: 274.90
Iteration:   2120, Loss function: 5.282, Average Loss: 5.643, avg. samples / sec: 280.40
Iteration:   2140, Loss function: 5.424, Average Loss: 5.639, avg. samples / sec: 274.44
Iteration:   2160, Loss function: 5.390, Average Loss: 5.637, avg. samples / sec: 324.74
Iteration:   2180, Loss function: 5.394, Average Loss: 5.634, avg. samples / sec: 332.25
Iteration:   2200, Loss function: 5.277, Average Loss: 5.630, avg. samples / sec: 331.90
Iteration:   2220, Loss function: 5.584, Average Loss: 5.628, avg. samples / sec: 311.18
Iteration:   2240, Loss function: 5.462, Average Loss: 5.626, avg. samples / sec: 247.48
Iteration:   2260, Loss function: 5.354, Average Loss: 5.621, avg. samples / sec: 285.13
Iteration:   2280, Loss function: 5.451, Average Loss: 5.618, avg. samples / sec: 234.06
Iteration:   2300, Loss function: 5.354, Average Loss: 5.614, avg. samples / sec: 292.39
Iteration:   2320, Loss function: 5.334, Average Loss: 5.611, avg. samples / sec: 273.97
Iteration:   2340, Loss function: 5.454, Average Loss: 5.609, avg. samples / sec: 313.20
Iteration:   2360, Loss function: 5.268, Average Loss: 5.605, avg. samples / sec: 326.28
Iteration:   2380, Loss function: 5.476, Average Loss: 5.601, avg. samples / sec: 264.71
Iteration:   2400, Loss function: 5.686, Average Loss: 5.597, avg. samples / sec: 206.68
Iteration:   2420, Loss function: 5.342, Average Loss: 5.592, avg. samples / sec: 288.28
Iteration:   2440, Loss function: 5.409, Average Loss: 5.588, avg. samples / sec: 318.17
Iteration:   2460, Loss function: 4.978, Average Loss: 5.585, avg. samples / sec: 328.21
Iteration:   2480, Loss function: 5.255, Average Loss: 5.582, avg. samples / sec: 309.60
Iteration:   2500, Loss function: 5.308, Average Loss: 5.578, avg. samples / sec: 271.64
Iteration:   2520, Loss function: 5.316, Average Loss: 5.572, avg. samples / sec: 260.93
Iteration:   2540, Loss function: 5.332, Average Loss: 5.569, avg. samples / sec: 320.41
Iteration:   2560, Loss function: 5.375, Average Loss: 5.565, avg. samples / sec: 332.92
Iteration:   2580, Loss function: 5.375, Average Loss: 5.562, avg. samples / sec: 322.12
Iteration:   2600, Loss function: 5.598, Average Loss: 5.559, avg. samples / sec: 333.01
Iteration:   2620, Loss function: 5.556, Average Loss: 5.554, avg. samples / sec: 316.58
Iteration:   2640, Loss function: 5.114, Average Loss: 5.551, avg. samples / sec: 319.36
Iteration:   2660, Loss function: 5.273, Average Loss: 5.547, avg. samples / sec: 330.93
Iteration:   2680, Loss function: 5.058, Average Loss: 5.543, avg. samples / sec: 288.33
Iteration:   2700, Loss function: 5.246, Average Loss: 5.538, avg. samples / sec: 276.24
Iteration:   2720, Loss function: 5.363, Average Loss: 5.533, avg. samples / sec: 333.06
Iteration:   2740, Loss function: 5.008, Average Loss: 5.529, avg. samples / sec: 318.83
Iteration:   2760, Loss function: 5.002, Average Loss: 5.524, avg. samples / sec: 325.16
Iteration:   2780, Loss function: 5.558, Average Loss: 5.520, avg. samples / sec: 333.54
Iteration:   2800, Loss function: 5.290, Average Loss: 5.516, avg. samples / sec: 320.48
Iteration:   2820, Loss function: 5.343, Average Loss: 5.511, avg. samples / sec: 320.76
Iteration:   2840, Loss function: 5.084, Average Loss: 5.506, avg. samples / sec: 231.43
Iteration:   2860, Loss function: 5.151, Average Loss: 5.501, avg. samples / sec: 299.27
Iteration:   2880, Loss function: 5.173, Average Loss: 5.496, avg. samples / sec: 265.51
Iteration:   2900, Loss function: 5.107, Average Loss: 5.491, avg. samples / sec: 296.25
Iteration:   2920, Loss function: 5.117, Average Loss: 5.485, avg. samples / sec: 277.85
Iteration:   2940, Loss function: 5.016, Average Loss: 5.480, avg. samples / sec: 330.31
Iteration:   2960, Loss function: 5.238, Average Loss: 5.475, avg. samples / sec: 328.66
Iteration:   2980, Loss function: 5.248, Average Loss: 5.470, avg. samples / sec: 300.04
Iteration:   3000, Loss function: 5.281, Average Loss: 5.465, avg. samples / sec: 299.94
Iteration:   3020, Loss function: 5.330, Average Loss: 5.458, avg. samples / sec: 313.16
Iteration:   3040, Loss function: 5.074, Average Loss: 5.453, avg. samples / sec: 266.20
Iteration:   3060, Loss function: 4.975, Average Loss: 5.448, avg. samples / sec: 254.42
Iteration:   3080, Loss function: 4.997, Average Loss: 5.442, avg. samples / sec: 314.88
:::MLLOG {"namespace": "", "time_ms": 1639081917434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081917437, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.035, Average Loss: 5.437, avg. samples / sec: 274.19
Iteration:   3120, Loss function: 4.976, Average Loss: 5.430, avg. samples / sec: 328.29
Iteration:   3140, Loss function: 4.998, Average Loss: 5.425, avg. samples / sec: 327.53
Iteration:   3160, Loss function: 5.551, Average Loss: 5.419, avg. samples / sec: 317.55
Iteration:   3180, Loss function: 4.946, Average Loss: 5.414, avg. samples / sec: 328.43
Iteration:   3200, Loss function: 5.155, Average Loss: 5.409, avg. samples / sec: 280.33
Iteration:   3220, Loss function: 5.055, Average Loss: 5.403, avg. samples / sec: 317.15
Iteration:   3240, Loss function: 5.125, Average Loss: 5.398, avg. samples / sec: 257.00
Iteration:   3260, Loss function: 5.094, Average Loss: 5.392, avg. samples / sec: 213.70
Iteration:   3280, Loss function: 4.851, Average Loss: 5.386, avg. samples / sec: 289.75
Iteration:   3300, Loss function: 4.760, Average Loss: 5.380, avg. samples / sec: 327.38
Iteration:   3320, Loss function: 4.933, Average Loss: 5.376, avg. samples / sec: 313.68
Iteration:   3340, Loss function: 5.104, Average Loss: 5.372, avg. samples / sec: 325.81
Iteration:   3360, Loss function: 5.044, Average Loss: 5.365, avg. samples / sec: 284.62
Iteration:   3380, Loss function: 5.131, Average Loss: 5.358, avg. samples / sec: 324.24
Iteration:   3400, Loss function: 4.959, Average Loss: 5.353, avg. samples / sec: 295.16
Iteration:   3420, Loss function: 5.117, Average Loss: 5.348, avg. samples / sec: 338.23
Iteration:   3440, Loss function: 5.120, Average Loss: 5.344, avg. samples / sec: 289.97
Iteration:   3460, Loss function: 5.078, Average Loss: 5.340, avg. samples / sec: 251.07
Iteration:   3480, Loss function: 5.150, Average Loss: 5.335, avg. samples / sec: 303.80
Iteration:   3500, Loss function: 5.242, Average Loss: 5.331, avg. samples / sec: 299.48
Iteration:   3520, Loss function: 5.001, Average Loss: 5.327, avg. samples / sec: 317.72
Iteration:   3540, Loss function: 5.036, Average Loss: 5.323, avg. samples / sec: 328.96
Iteration:   3560, Loss function: 4.927, Average Loss: 5.319, avg. samples / sec: 316.65
Iteration:   3580, Loss function: 5.181, Average Loss: 5.314, avg. samples / sec: 326.68
Iteration:   3600, Loss function: 5.258, Average Loss: 5.308, avg. samples / sec: 315.84
Iteration:   3620, Loss function: 4.953, Average Loss: 5.304, avg. samples / sec: 274.23
Iteration:   3640, Loss function: 4.698, Average Loss: 5.297, avg. samples / sec: 311.50
Iteration:   3660, Loss function: 4.942, Average Loss: 5.293, avg. samples / sec: 280.79
Iteration:   3680, Loss function: 5.002, Average Loss: 5.287, avg. samples / sec: 299.33
Iteration:   3700, Loss function: 4.974, Average Loss: 5.282, avg. samples / sec: 263.85
Iteration:   3720, Loss function: 4.878, Average Loss: 5.276, avg. samples / sec: 264.86
Iteration:   3740, Loss function: 5.263, Average Loss: 5.272, avg. samples / sec: 262.80
Iteration:   3760, Loss function: 5.067, Average Loss: 5.268, avg. samples / sec: 228.76
Iteration:   3780, Loss function: 5.208, Average Loss: 5.262, avg. samples / sec: 208.41
Iteration:   3800, Loss function: 5.133, Average Loss: 5.259, avg. samples / sec: 325.57
Iteration:   3820, Loss function: 5.189, Average Loss: 5.254, avg. samples / sec: 300.41
Iteration:   3840, Loss function: 4.603, Average Loss: 5.249, avg. samples / sec: 296.50
Iteration:   3860, Loss function: 4.807, Average Loss: 5.243, avg. samples / sec: 307.91
Iteration:   3880, Loss function: 4.982, Average Loss: 5.237, avg. samples / sec: 324.18
Iteration:   3900, Loss function: 5.220, Average Loss: 5.232, avg. samples / sec: 289.78
Iteration:   3920, Loss function: 5.121, Average Loss: 5.227, avg. samples / sec: 267.84
Iteration:   3940, Loss function: 5.172, Average Loss: 5.223, avg. samples / sec: 311.90
Iteration:   3960, Loss function: 4.896, Average Loss: 5.219, avg. samples / sec: 322.58
Iteration:   3980, Loss function: 4.771, Average Loss: 5.213, avg. samples / sec: 311.51
Iteration:   4000, Loss function: 5.169, Average Loss: 5.210, avg. samples / sec: 243.84
Iteration:   4020, Loss function: 5.034, Average Loss: 5.205, avg. samples / sec: 230.46
Iteration:   4040, Loss function: 5.061, Average Loss: 5.202, avg. samples / sec: 254.70
Iteration:   4060, Loss function: 5.032, Average Loss: 5.197, avg. samples / sec: 310.85
Iteration:   4080, Loss function: 5.076, Average Loss: 5.192, avg. samples / sec: 269.41
Iteration:   4100, Loss function: 5.112, Average Loss: 5.189, avg. samples / sec: 253.79
:::MLLOG {"namespace": "", "time_ms": 1639082324334, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082324345, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.912, Average Loss: 5.184, avg. samples / sec: 254.56
Iteration:   4140, Loss function: 4.998, Average Loss: 5.180, avg. samples / sec: 244.92
Iteration:   4160, Loss function: 4.995, Average Loss: 5.173, avg. samples / sec: 285.14
Iteration:   4180, Loss function: 5.020, Average Loss: 5.167, avg. samples / sec: 289.62
Iteration:   4200, Loss function: 4.895, Average Loss: 5.164, avg. samples / sec: 329.40
Iteration:   4220, Loss function: 4.756, Average Loss: 5.158, avg. samples / sec: 269.84
Iteration:   4240, Loss function: 4.861, Average Loss: 5.153, avg. samples / sec: 159.02
Iteration:   4260, Loss function: 5.067, Average Loss: 5.148, avg. samples / sec: 304.38
Iteration:   4280, Loss function: 5.030, Average Loss: 5.142, avg. samples / sec: 302.60
Iteration:   4300, Loss function: 4.839, Average Loss: 5.136, avg. samples / sec: 325.81
Iteration:   4320, Loss function: 4.918, Average Loss: 5.130, avg. samples / sec: 313.46
Iteration:   4340, Loss function: 4.808, Average Loss: 5.124, avg. samples / sec: 311.17
Iteration:   4360, Loss function: 4.928, Average Loss: 5.121, avg. samples / sec: 306.75
Iteration:   4380, Loss function: 4.885, Average Loss: 5.116, avg. samples / sec: 311.40
Iteration:   4400, Loss function: 4.933, Average Loss: 5.113, avg. samples / sec: 326.09
Iteration:   4420, Loss function: 4.700, Average Loss: 5.109, avg. samples / sec: 323.16
Iteration:   4440, Loss function: 4.722, Average Loss: 5.103, avg. samples / sec: 304.94
Iteration:   4460, Loss function: 5.073, Average Loss: 5.099, avg. samples / sec: 332.77
Iteration:   4480, Loss function: 4.945, Average Loss: 5.096, avg. samples / sec: 328.12
Iteration:   4500, Loss function: 5.029, Average Loss: 5.093, avg. samples / sec: 330.31
Iteration:   4520, Loss function: 4.593, Average Loss: 5.089, avg. samples / sec: 318.11
Iteration:   4540, Loss function: 5.125, Average Loss: 5.085, avg. samples / sec: 302.51
Iteration:   4560, Loss function: 4.858, Average Loss: 5.081, avg. samples / sec: 329.82
Iteration:   4580, Loss function: 4.848, Average Loss: 5.079, avg. samples / sec: 312.25
Iteration:   4600, Loss function: 4.744, Average Loss: 5.074, avg. samples / sec: 316.24
Iteration:   4620, Loss function: 4.784, Average Loss: 5.069, avg. samples / sec: 307.28
Iteration:   4640, Loss function: 4.721, Average Loss: 5.065, avg. samples / sec: 299.40
Iteration:   4660, Loss function: 4.924, Average Loss: 5.061, avg. samples / sec: 267.82
Iteration:   4680, Loss function: 5.205, Average Loss: 5.057, avg. samples / sec: 333.56
Iteration:   4700, Loss function: 4.849, Average Loss: 5.053, avg. samples / sec: 303.94
Iteration:   4720, Loss function: 4.894, Average Loss: 5.049, avg. samples / sec: 274.33
Iteration:   4740, Loss function: 4.711, Average Loss: 5.045, avg. samples / sec: 277.16
Iteration:   4760, Loss function: 4.705, Average Loss: 5.041, avg. samples / sec: 298.23
Iteration:   4780, Loss function: 5.133, Average Loss: 5.037, avg. samples / sec: 317.80
Iteration:   4800, Loss function: 4.968, Average Loss: 5.034, avg. samples / sec: 311.74
Iteration:   4820, Loss function: 4.734, Average Loss: 5.031, avg. samples / sec: 265.98
Iteration:   4840, Loss function: 5.023, Average Loss: 5.027, avg. samples / sec: 296.96
Iteration:   4860, Loss function: 4.692, Average Loss: 5.023, avg. samples / sec: 278.43
Iteration:   4880, Loss function: 5.225, Average Loss: 5.019, avg. samples / sec: 312.23
Iteration:   4900, Loss function: 4.646, Average Loss: 5.015, avg. samples / sec: 298.36
Iteration:   4920, Loss function: 4.895, Average Loss: 5.012, avg. samples / sec: 253.94
Iteration:   4940, Loss function: 4.676, Average Loss: 5.008, avg. samples / sec: 322.38
Iteration:   4960, Loss function: 4.741, Average Loss: 5.004, avg. samples / sec: 338.72
Iteration:   4980, Loss function: 4.617, Average Loss: 5.001, avg. samples / sec: 311.52
Iteration:   5000, Loss function: 4.915, Average Loss: 4.997, avg. samples / sec: 311.80
Iteration:   5020, Loss function: 5.046, Average Loss: 4.993, avg. samples / sec: 297.84
Iteration:   5040, Loss function: 4.803, Average Loss: 4.991, avg. samples / sec: 334.72
Iteration:   5060, Loss function: 4.671, Average Loss: 4.987, avg. samples / sec: 327.68
Iteration:   5080, Loss function: 4.513, Average Loss: 4.982, avg. samples / sec: 305.60
Iteration:   5100, Loss function: 4.667, Average Loss: 4.980, avg. samples / sec: 316.52
Iteration:   5120, Loss function: 4.599, Average Loss: 4.977, avg. samples / sec: 294.84
Iteration:   5140, Loss function: 5.139, Average Loss: 4.973, avg. samples / sec: 321.97
:::MLLOG {"namespace": "", "time_ms": 1639082717050, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 93.74 s
:::MLLOG {"namespace": "", "time_ms": 1639082811006, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082811106, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082811107, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.95s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10790
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21666
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09728
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19583
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13958
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20618
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21871
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10790 AP goal: 0.10000
Iteration:   5160, Loss function: 4.944, Average Loss: 4.968, avg. samples / sec: 22.28
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10790322809823805, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817977, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082818372, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082820
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:47:00 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:30 PM'
START TIMING RUN WAS 2021-12-09 08:09:30 PM
ENDING TIMING RUN AT 2021-12-09 08:47:00 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:47:00 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ result=2250
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2250,nvidia,2021-12-09 08:09:30 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2250,nvidia,2021-12-09 08:09:30 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
