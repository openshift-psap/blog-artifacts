+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-d6nlf.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-d6nlf.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-d6nlf.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-34155c66-9d5a-5286-8dfe-04d8901072bf
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf'
Found 1 MIG instances: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-d6nlf to the sync file ...
run-ssd--1-d6nlf Found 22 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
    14	run-ssd--1-wbth6
    15	run-ssd--1-4jg6j
    16	run-ssd--1-9qdbc
    17	run-ssd--1-6gxt2
    18	run-ssd--1-jx4zc
    19	run-ssd--1-d4qds
    20	run-ssd--1-6j5s6
    21	run-ssd--1-z4jtv
    22	run-ssd--1-d6nlf
Thu Dec  9 20:09:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585692, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586481, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2780050373, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2780050373
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080590447, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590448, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693671, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693671, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080700427, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080700428, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700872, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700873, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700874, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.687, Average Loss: 0.023, avg. samples / sec: 1.01
Iteration:     20, Loss function: 21.127, Average Loss: 0.458, avg. samples / sec: 182.26
Iteration:     40, Loss function: 20.755, Average Loss: 0.860, avg. samples / sec: 243.85
Iteration:     60, Loss function: 20.378, Average Loss: 1.250, avg. samples / sec: 241.43
Iteration:     80, Loss function: 20.178, Average Loss: 1.624, avg. samples / sec: 233.16
Iteration:    100, Loss function: 16.464, Average Loss: 1.960, avg. samples / sec: 267.90
Iteration:    120, Loss function: 11.274, Average Loss: 2.174, avg. samples / sec: 231.73
Iteration:    140, Loss function: 9.801, Average Loss: 2.340, avg. samples / sec: 242.94
Iteration:    160, Loss function: 9.459, Average Loss: 2.483, avg. samples / sec: 233.90
Iteration:    180, Loss function: 9.102, Average Loss: 2.614, avg. samples / sec: 294.94
Iteration:    200, Loss function: 8.622, Average Loss: 2.739, avg. samples / sec: 228.81
Iteration:    220, Loss function: 8.670, Average Loss: 2.859, avg. samples / sec: 292.32
Iteration:    240, Loss function: 8.882, Average Loss: 2.978, avg. samples / sec: 292.78
Iteration:    260, Loss function: 8.738, Average Loss: 3.094, avg. samples / sec: 268.69
Iteration:    280, Loss function: 8.548, Average Loss: 3.204, avg. samples / sec: 296.86
Iteration:    300, Loss function: 8.381, Average Loss: 3.307, avg. samples / sec: 243.87
Iteration:    320, Loss function: 8.358, Average Loss: 3.406, avg. samples / sec: 270.40
Iteration:    340, Loss function: 8.253, Average Loss: 3.502, avg. samples / sec: 322.23
Iteration:    360, Loss function: 8.028, Average Loss: 3.593, avg. samples / sec: 321.27
Iteration:    380, Loss function: 7.984, Average Loss: 3.683, avg. samples / sec: 333.66
Iteration:    400, Loss function: 7.962, Average Loss: 3.767, avg. samples / sec: 303.24
Iteration:    420, Loss function: 7.733, Average Loss: 3.847, avg. samples / sec: 252.05
Iteration:    440, Loss function: 7.757, Average Loss: 3.924, avg. samples / sec: 274.40
Iteration:    460, Loss function: 7.726, Average Loss: 3.999, avg. samples / sec: 327.83
Iteration:    480, Loss function: 7.478, Average Loss: 4.072, avg. samples / sec: 311.20
Iteration:    500, Loss function: 7.586, Average Loss: 4.143, avg. samples / sec: 326.43
Iteration:    520, Loss function: 7.546, Average Loss: 4.210, avg. samples / sec: 318.12
Iteration:    540, Loss function: 7.595, Average Loss: 4.276, avg. samples / sec: 318.58
Iteration:    560, Loss function: 7.153, Average Loss: 4.339, avg. samples / sec: 309.51
Iteration:    580, Loss function: 7.167, Average Loss: 4.400, avg. samples / sec: 275.18
Iteration:    600, Loss function: 7.333, Average Loss: 4.458, avg. samples / sec: 242.31
Iteration:    620, Loss function: 7.094, Average Loss: 4.513, avg. samples / sec: 313.11
Iteration:    640, Loss function: 6.841, Average Loss: 4.567, avg. samples / sec: 254.91
Iteration:    660, Loss function: 7.245, Average Loss: 4.618, avg. samples / sec: 323.02
Iteration:    680, Loss function: 7.308, Average Loss: 4.669, avg. samples / sec: 318.22
Iteration:    700, Loss function: 6.722, Average Loss: 4.717, avg. samples / sec: 303.61
Iteration:    720, Loss function: 6.861, Average Loss: 4.765, avg. samples / sec: 305.60
Iteration:    740, Loss function: 6.923, Average Loss: 4.809, avg. samples / sec: 323.73
Iteration:    760, Loss function: 6.975, Average Loss: 4.851, avg. samples / sec: 247.21
Iteration:    780, Loss function: 6.873, Average Loss: 4.892, avg. samples / sec: 181.94
Iteration:    800, Loss function: 7.092, Average Loss: 4.931, avg. samples / sec: 289.18
Iteration:    820, Loss function: 6.849, Average Loss: 4.968, avg. samples / sec: 309.00
Iteration:    840, Loss function: 6.849, Average Loss: 5.004, avg. samples / sec: 328.92
Iteration:    860, Loss function: 6.802, Average Loss: 5.037, avg. samples / sec: 327.42
Iteration:    880, Loss function: 6.759, Average Loss: 5.070, avg. samples / sec: 335.13
Iteration:    900, Loss function: 6.918, Average Loss: 5.102, avg. samples / sec: 331.57
Iteration:    920, Loss function: 6.757, Average Loss: 5.131, avg. samples / sec: 292.98
Iteration:    940, Loss function: 6.880, Average Loss: 5.161, avg. samples / sec: 254.63
Iteration:    960, Loss function: 6.425, Average Loss: 5.188, avg. samples / sec: 293.91
Iteration:    980, Loss function: 6.518, Average Loss: 5.215, avg. samples / sec: 332.59
Iteration:   1000, Loss function: 6.524, Average Loss: 5.240, avg. samples / sec: 328.23
Iteration:   1020, Loss function: 6.320, Average Loss: 5.263, avg. samples / sec: 320.67
:::MLLOG {"namespace": "", "time_ms": 1639081121134, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081121136, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.407, Average Loss: 5.287, avg. samples / sec: 325.49
Iteration:   1060, Loss function: 6.410, Average Loss: 5.310, avg. samples / sec: 324.89
Iteration:   1080, Loss function: 6.295, Average Loss: 5.331, avg. samples / sec: 307.35
Iteration:   1100, Loss function: 6.198, Average Loss: 5.349, avg. samples / sec: 310.42
Iteration:   1120, Loss function: 6.227, Average Loss: 5.368, avg. samples / sec: 286.41
Iteration:   1140, Loss function: 6.393, Average Loss: 5.387, avg. samples / sec: 250.86
Iteration:   1160, Loss function: 6.159, Average Loss: 5.404, avg. samples / sec: 282.26
Iteration:   1180, Loss function: 6.300, Average Loss: 5.421, avg. samples / sec: 299.52
Iteration:   1200, Loss function: 6.253, Average Loss: 5.438, avg. samples / sec: 304.02
Iteration:   1220, Loss function: 6.147, Average Loss: 5.453, avg. samples / sec: 329.09
Iteration:   1240, Loss function: 5.973, Average Loss: 5.467, avg. samples / sec: 321.46
Iteration:   1260, Loss function: 6.043, Average Loss: 5.479, avg. samples / sec: 338.94
Iteration:   1280, Loss function: 5.885, Average Loss: 5.491, avg. samples / sec: 333.83
Iteration:   1300, Loss function: 6.061, Average Loss: 5.503, avg. samples / sec: 296.26
Iteration:   1320, Loss function: 6.206, Average Loss: 5.514, avg. samples / sec: 339.08
Iteration:   1340, Loss function: 6.012, Average Loss: 5.524, avg. samples / sec: 292.10
Iteration:   1360, Loss function: 5.947, Average Loss: 5.534, avg. samples / sec: 317.95
Iteration:   1380, Loss function: 6.095, Average Loss: 5.544, avg. samples / sec: 326.08
Iteration:   1400, Loss function: 6.197, Average Loss: 5.552, avg. samples / sec: 312.83
Iteration:   1420, Loss function: 5.824, Average Loss: 5.559, avg. samples / sec: 189.34
Iteration:   1440, Loss function: 6.410, Average Loss: 5.568, avg. samples / sec: 316.14
Iteration:   1460, Loss function: 6.141, Average Loss: 5.576, avg. samples / sec: 318.70
Iteration:   1480, Loss function: 6.000, Average Loss: 5.585, avg. samples / sec: 341.52
Iteration:   1500, Loss function: 6.060, Average Loss: 5.593, avg. samples / sec: 335.46
Iteration:   1520, Loss function: 6.061, Average Loss: 5.598, avg. samples / sec: 326.61
Iteration:   1540, Loss function: 5.978, Average Loss: 5.602, avg. samples / sec: 339.68
Iteration:   1560, Loss function: 5.645, Average Loss: 5.607, avg. samples / sec: 334.65
Iteration:   1580, Loss function: 5.440, Average Loss: 5.610, avg. samples / sec: 329.92
Iteration:   1600, Loss function: 6.151, Average Loss: 5.616, avg. samples / sec: 316.44
Iteration:   1620, Loss function: 5.826, Average Loss: 5.621, avg. samples / sec: 257.59
Iteration:   1640, Loss function: 5.923, Average Loss: 5.624, avg. samples / sec: 324.09
Iteration:   1660, Loss function: 5.802, Average Loss: 5.628, avg. samples / sec: 334.73
Iteration:   1680, Loss function: 5.726, Average Loss: 5.631, avg. samples / sec: 317.87
Iteration:   1700, Loss function: 5.420, Average Loss: 5.633, avg. samples / sec: 266.53
Iteration:   1720, Loss function: 5.727, Average Loss: 5.636, avg. samples / sec: 240.55
Iteration:   1740, Loss function: 5.735, Average Loss: 5.637, avg. samples / sec: 282.12
Iteration:   1760, Loss function: 5.584, Average Loss: 5.638, avg. samples / sec: 177.46
Iteration:   1780, Loss function: 5.755, Average Loss: 5.641, avg. samples / sec: 212.01
Iteration:   1800, Loss function: 5.568, Average Loss: 5.644, avg. samples / sec: 312.03
Iteration:   1820, Loss function: 6.019, Average Loss: 5.646, avg. samples / sec: 317.77
Iteration:   1840, Loss function: 5.832, Average Loss: 5.646, avg. samples / sec: 323.32
Iteration:   1860, Loss function: 5.590, Average Loss: 5.645, avg. samples / sec: 336.23
Iteration:   1880, Loss function: 5.813, Average Loss: 5.646, avg. samples / sec: 303.32
Iteration:   1900, Loss function: 5.966, Average Loss: 5.647, avg. samples / sec: 294.09
Iteration:   1920, Loss function: 5.572, Average Loss: 5.647, avg. samples / sec: 295.67
Iteration:   1940, Loss function: 5.830, Average Loss: 5.647, avg. samples / sec: 254.53
Iteration:   1960, Loss function: 5.518, Average Loss: 5.646, avg. samples / sec: 288.47
Iteration:   1980, Loss function: 5.577, Average Loss: 5.645, avg. samples / sec: 195.68
Iteration:   2000, Loss function: 5.753, Average Loss: 5.645, avg. samples / sec: 182.47
Iteration:   2020, Loss function: 5.536, Average Loss: 5.643, avg. samples / sec: 246.64
Iteration:   2040, Loss function: 5.582, Average Loss: 5.643, avg. samples / sec: 293.20
:::MLLOG {"namespace": "", "time_ms": 1639081528263, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081528274, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.595, Average Loss: 5.640, avg. samples / sec: 308.85
Iteration:   2080, Loss function: 5.183, Average Loss: 5.638, avg. samples / sec: 289.67
Iteration:   2100, Loss function: 5.463, Average Loss: 5.635, avg. samples / sec: 329.43
Iteration:   2120, Loss function: 5.301, Average Loss: 5.633, avg. samples / sec: 312.84
Iteration:   2140, Loss function: 5.213, Average Loss: 5.630, avg. samples / sec: 230.14
Iteration:   2160, Loss function: 5.344, Average Loss: 5.628, avg. samples / sec: 243.91
Iteration:   2180, Loss function: 5.335, Average Loss: 5.625, avg. samples / sec: 330.82
Iteration:   2200, Loss function: 5.396, Average Loss: 5.621, avg. samples / sec: 323.88
Iteration:   2220, Loss function: 5.577, Average Loss: 5.618, avg. samples / sec: 329.08
Iteration:   2240, Loss function: 5.542, Average Loss: 5.616, avg. samples / sec: 327.73
Iteration:   2260, Loss function: 5.347, Average Loss: 5.612, avg. samples / sec: 308.12
Iteration:   2280, Loss function: 5.279, Average Loss: 5.608, avg. samples / sec: 301.33
Iteration:   2300, Loss function: 5.173, Average Loss: 5.605, avg. samples / sec: 331.85
Iteration:   2320, Loss function: 5.292, Average Loss: 5.603, avg. samples / sec: 336.04
Iteration:   2340, Loss function: 5.519, Average Loss: 5.600, avg. samples / sec: 330.37
Iteration:   2360, Loss function: 5.337, Average Loss: 5.596, avg. samples / sec: 332.25
Iteration:   2380, Loss function: 5.429, Average Loss: 5.593, avg. samples / sec: 289.37
Iteration:   2400, Loss function: 5.528, Average Loss: 5.588, avg. samples / sec: 252.63
Iteration:   2420, Loss function: 5.548, Average Loss: 5.583, avg. samples / sec: 283.80
Iteration:   2440, Loss function: 5.452, Average Loss: 5.580, avg. samples / sec: 307.12
Iteration:   2460, Loss function: 5.149, Average Loss: 5.576, avg. samples / sec: 287.22
Iteration:   2480, Loss function: 5.279, Average Loss: 5.572, avg. samples / sec: 339.04
Iteration:   2500, Loss function: 5.457, Average Loss: 5.568, avg. samples / sec: 314.95
Iteration:   2520, Loss function: 5.242, Average Loss: 5.563, avg. samples / sec: 324.80
Iteration:   2540, Loss function: 5.474, Average Loss: 5.559, avg. samples / sec: 317.98
Iteration:   2560, Loss function: 5.248, Average Loss: 5.555, avg. samples / sec: 329.24
Iteration:   2580, Loss function: 5.239, Average Loss: 5.551, avg. samples / sec: 327.47
Iteration:   2600, Loss function: 5.592, Average Loss: 5.548, avg. samples / sec: 326.59
Iteration:   2620, Loss function: 5.601, Average Loss: 5.543, avg. samples / sec: 316.66
Iteration:   2640, Loss function: 5.373, Average Loss: 5.541, avg. samples / sec: 298.80
Iteration:   2660, Loss function: 5.161, Average Loss: 5.537, avg. samples / sec: 285.03
Iteration:   2680, Loss function: 5.168, Average Loss: 5.534, avg. samples / sec: 334.07
Iteration:   2700, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 321.21
Iteration:   2720, Loss function: 5.464, Average Loss: 5.525, avg. samples / sec: 271.17
Iteration:   2740, Loss function: 5.018, Average Loss: 5.522, avg. samples / sec: 271.73
Iteration:   2760, Loss function: 5.008, Average Loss: 5.516, avg. samples / sec: 237.48
Iteration:   2780, Loss function: 5.495, Average Loss: 5.511, avg. samples / sec: 262.89
Iteration:   2800, Loss function: 5.489, Average Loss: 5.507, avg. samples / sec: 266.79
Iteration:   2820, Loss function: 5.489, Average Loss: 5.503, avg. samples / sec: 329.15
Iteration:   2840, Loss function: 5.190, Average Loss: 5.499, avg. samples / sec: 331.22
Iteration:   2860, Loss function: 5.213, Average Loss: 5.494, avg. samples / sec: 335.45
Iteration:   2880, Loss function: 5.300, Average Loss: 5.489, avg. samples / sec: 296.75
Iteration:   2900, Loss function: 5.067, Average Loss: 5.485, avg. samples / sec: 326.90
Iteration:   2920, Loss function: 5.239, Average Loss: 5.479, avg. samples / sec: 316.63
Iteration:   2940, Loss function: 5.028, Average Loss: 5.474, avg. samples / sec: 331.14
Iteration:   2960, Loss function: 5.394, Average Loss: 5.470, avg. samples / sec: 308.49
Iteration:   2980, Loss function: 5.111, Average Loss: 5.466, avg. samples / sec: 294.40
Iteration:   3000, Loss function: 5.335, Average Loss: 5.460, avg. samples / sec: 311.04
Iteration:   3020, Loss function: 5.358, Average Loss: 5.454, avg. samples / sec: 331.02
Iteration:   3040, Loss function: 5.113, Average Loss: 5.449, avg. samples / sec: 329.26
Iteration:   3060, Loss function: 5.162, Average Loss: 5.444, avg. samples / sec: 329.91
Iteration:   3080, Loss function: 4.920, Average Loss: 5.438, avg. samples / sec: 337.01
:::MLLOG {"namespace": "", "time_ms": 1639081911871, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081911873, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.155, Average Loss: 5.434, avg. samples / sec: 330.52
Iteration:   3120, Loss function: 5.039, Average Loss: 5.428, avg. samples / sec: 321.27
Iteration:   3140, Loss function: 5.131, Average Loss: 5.423, avg. samples / sec: 330.19
Iteration:   3160, Loss function: 5.307, Average Loss: 5.418, avg. samples / sec: 290.57
Iteration:   3180, Loss function: 4.960, Average Loss: 5.412, avg. samples / sec: 271.20
Iteration:   3200, Loss function: 5.409, Average Loss: 5.407, avg. samples / sec: 255.39
Iteration:   3220, Loss function: 5.370, Average Loss: 5.402, avg. samples / sec: 264.29
Iteration:   3240, Loss function: 5.200, Average Loss: 5.397, avg. samples / sec: 231.99
Iteration:   3260, Loss function: 5.056, Average Loss: 5.390, avg. samples / sec: 214.17
Iteration:   3280, Loss function: 4.936, Average Loss: 5.384, avg. samples / sec: 320.01
Iteration:   3300, Loss function: 4.852, Average Loss: 5.378, avg. samples / sec: 315.81
Iteration:   3320, Loss function: 5.013, Average Loss: 5.373, avg. samples / sec: 311.80
Iteration:   3340, Loss function: 4.994, Average Loss: 5.369, avg. samples / sec: 286.20
Iteration:   3360, Loss function: 5.036, Average Loss: 5.363, avg. samples / sec: 322.35
Iteration:   3380, Loss function: 5.355, Average Loss: 5.357, avg. samples / sec: 327.71
Iteration:   3400, Loss function: 4.890, Average Loss: 5.352, avg. samples / sec: 328.90
Iteration:   3420, Loss function: 5.092, Average Loss: 5.347, avg. samples / sec: 334.94
Iteration:   3440, Loss function: 4.799, Average Loss: 5.342, avg. samples / sec: 323.70
Iteration:   3460, Loss function: 5.118, Average Loss: 5.336, avg. samples / sec: 279.19
Iteration:   3480, Loss function: 5.177, Average Loss: 5.331, avg. samples / sec: 220.50
Iteration:   3500, Loss function: 5.278, Average Loss: 5.328, avg. samples / sec: 286.20
Iteration:   3520, Loss function: 4.991, Average Loss: 5.325, avg. samples / sec: 237.93
Iteration:   3540, Loss function: 5.144, Average Loss: 5.320, avg. samples / sec: 286.72
Iteration:   3560, Loss function: 5.092, Average Loss: 5.316, avg. samples / sec: 239.50
Iteration:   3580, Loss function: 5.134, Average Loss: 5.311, avg. samples / sec: 268.89
Iteration:   3600, Loss function: 5.310, Average Loss: 5.306, avg. samples / sec: 315.73
Iteration:   3620, Loss function: 4.746, Average Loss: 5.301, avg. samples / sec: 336.17
Iteration:   3640, Loss function: 4.850, Average Loss: 5.296, avg. samples / sec: 338.58
Iteration:   3660, Loss function: 5.019, Average Loss: 5.290, avg. samples / sec: 313.47
Iteration:   3680, Loss function: 5.182, Average Loss: 5.285, avg. samples / sec: 319.33
Iteration:   3700, Loss function: 4.943, Average Loss: 5.280, avg. samples / sec: 327.83
Iteration:   3720, Loss function: 4.954, Average Loss: 5.273, avg. samples / sec: 314.88
Iteration:   3740, Loss function: 5.283, Average Loss: 5.270, avg. samples / sec: 327.39
Iteration:   3760, Loss function: 5.108, Average Loss: 5.266, avg. samples / sec: 332.83
Iteration:   3780, Loss function: 4.998, Average Loss: 5.261, avg. samples / sec: 292.02
Iteration:   3800, Loss function: 5.040, Average Loss: 5.257, avg. samples / sec: 312.32
Iteration:   3820, Loss function: 5.226, Average Loss: 5.252, avg. samples / sec: 317.61
Iteration:   3840, Loss function: 4.827, Average Loss: 5.247, avg. samples / sec: 328.34
Iteration:   3860, Loss function: 4.775, Average Loss: 5.242, avg. samples / sec: 334.09
Iteration:   3880, Loss function: 4.898, Average Loss: 5.236, avg. samples / sec: 305.64
Iteration:   3900, Loss function: 5.161, Average Loss: 5.231, avg. samples / sec: 325.72
Iteration:   3920, Loss function: 5.151, Average Loss: 5.226, avg. samples / sec: 275.64
Iteration:   3940, Loss function: 4.860, Average Loss: 5.221, avg. samples / sec: 230.81
Iteration:   3960, Loss function: 4.867, Average Loss: 5.216, avg. samples / sec: 332.60
Iteration:   3980, Loss function: 4.842, Average Loss: 5.212, avg. samples / sec: 283.81
Iteration:   4000, Loss function: 5.053, Average Loss: 5.207, avg. samples / sec: 288.29
Iteration:   4020, Loss function: 5.024, Average Loss: 5.202, avg. samples / sec: 328.12
Iteration:   4040, Loss function: 5.043, Average Loss: 5.199, avg. samples / sec: 327.57
Iteration:   4060, Loss function: 5.094, Average Loss: 5.196, avg. samples / sec: 320.40
Iteration:   4080, Loss function: 5.106, Average Loss: 5.192, avg. samples / sec: 235.49
Iteration:   4100, Loss function: 5.149, Average Loss: 5.189, avg. samples / sec: 302.37
:::MLLOG {"namespace": "", "time_ms": 1639082310155, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082310156, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.893, Average Loss: 5.186, avg. samples / sec: 284.74
Iteration:   4140, Loss function: 4.775, Average Loss: 5.180, avg. samples / sec: 315.68
Iteration:   4160, Loss function: 4.959, Average Loss: 5.174, avg. samples / sec: 300.53
Iteration:   4180, Loss function: 4.890, Average Loss: 5.168, avg. samples / sec: 310.08
Iteration:   4200, Loss function: 4.859, Average Loss: 5.163, avg. samples / sec: 312.64
Iteration:   4220, Loss function: 4.765, Average Loss: 5.158, avg. samples / sec: 184.34
Iteration:   4240, Loss function: 4.943, Average Loss: 5.153, avg. samples / sec: 308.41
Iteration:   4260, Loss function: 5.038, Average Loss: 5.148, avg. samples / sec: 324.94
Iteration:   4280, Loss function: 5.012, Average Loss: 5.142, avg. samples / sec: 328.45
Iteration:   4300, Loss function: 4.905, Average Loss: 5.137, avg. samples / sec: 319.54
Iteration:   4320, Loss function: 4.687, Average Loss: 5.132, avg. samples / sec: 332.76
Iteration:   4340, Loss function: 4.674, Average Loss: 5.126, avg. samples / sec: 334.18
Iteration:   4360, Loss function: 4.875, Average Loss: 5.122, avg. samples / sec: 303.53
Iteration:   4380, Loss function: 4.929, Average Loss: 5.117, avg. samples / sec: 308.50
Iteration:   4400, Loss function: 4.746, Average Loss: 5.112, avg. samples / sec: 315.18
Iteration:   4420, Loss function: 4.780, Average Loss: 5.106, avg. samples / sec: 299.65
Iteration:   4440, Loss function: 4.876, Average Loss: 5.101, avg. samples / sec: 301.96
Iteration:   4460, Loss function: 5.074, Average Loss: 5.097, avg. samples / sec: 314.66
Iteration:   4480, Loss function: 4.819, Average Loss: 5.093, avg. samples / sec: 305.76
Iteration:   4500, Loss function: 4.893, Average Loss: 5.090, avg. samples / sec: 300.47
Iteration:   4520, Loss function: 4.566, Average Loss: 5.086, avg. samples / sec: 304.25
Iteration:   4540, Loss function: 4.932, Average Loss: 5.081, avg. samples / sec: 269.67
Iteration:   4560, Loss function: 4.785, Average Loss: 5.078, avg. samples / sec: 279.48
Iteration:   4580, Loss function: 4.756, Average Loss: 5.075, avg. samples / sec: 318.56
Iteration:   4600, Loss function: 4.842, Average Loss: 5.071, avg. samples / sec: 311.03
Iteration:   4620, Loss function: 4.709, Average Loss: 5.066, avg. samples / sec: 252.22
Iteration:   4640, Loss function: 4.969, Average Loss: 5.061, avg. samples / sec: 291.98
Iteration:   4660, Loss function: 4.824, Average Loss: 5.057, avg. samples / sec: 232.44
Iteration:   4680, Loss function: 5.377, Average Loss: 5.053, avg. samples / sec: 254.39
Iteration:   4700, Loss function: 4.718, Average Loss: 5.049, avg. samples / sec: 276.67
Iteration:   4720, Loss function: 4.750, Average Loss: 5.043, avg. samples / sec: 227.70
Iteration:   4740, Loss function: 4.801, Average Loss: 5.039, avg. samples / sec: 284.36
Iteration:   4760, Loss function: 4.670, Average Loss: 5.035, avg. samples / sec: 305.84
Iteration:   4780, Loss function: 4.937, Average Loss: 5.030, avg. samples / sec: 273.33
Iteration:   4800, Loss function: 4.948, Average Loss: 5.028, avg. samples / sec: 327.43
Iteration:   4820, Loss function: 4.927, Average Loss: 5.024, avg. samples / sec: 297.70
Iteration:   4840, Loss function: 4.984, Average Loss: 5.020, avg. samples / sec: 336.30
Iteration:   4860, Loss function: 4.738, Average Loss: 5.016, avg. samples / sec: 327.46
Iteration:   4880, Loss function: 5.151, Average Loss: 5.012, avg. samples / sec: 323.66
Iteration:   4900, Loss function: 4.673, Average Loss: 5.009, avg. samples / sec: 337.85
Iteration:   4920, Loss function: 4.712, Average Loss: 5.005, avg. samples / sec: 269.16
Iteration:   4940, Loss function: 4.783, Average Loss: 5.001, avg. samples / sec: 331.38
Iteration:   4960, Loss function: 4.664, Average Loss: 4.997, avg. samples / sec: 344.54
Iteration:   4980, Loss function: 4.454, Average Loss: 4.993, avg. samples / sec: 322.41
Iteration:   5000, Loss function: 5.011, Average Loss: 4.990, avg. samples / sec: 286.15
Iteration:   5020, Loss function: 5.049, Average Loss: 4.987, avg. samples / sec: 297.83
Iteration:   5040, Loss function: 4.839, Average Loss: 4.984, avg. samples / sec: 269.02
Iteration:   5060, Loss function: 4.737, Average Loss: 4.980, avg. samples / sec: 313.23
Iteration:   5080, Loss function: 4.342, Average Loss: 4.975, avg. samples / sec: 325.06
Iteration:   5100, Loss function: 4.723, Average Loss: 4.973, avg. samples / sec: 323.17
Iteration:   5120, Loss function: 4.594, Average Loss: 4.969, avg. samples / sec: 317.27
Iteration:   5140, Loss function: 4.935, Average Loss: 4.965, avg. samples / sec: 331.22
:::MLLOG {"namespace": "", "time_ms": 1639082704846, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 94.96 s
:::MLLOG {"namespace": "", "time_ms": 1639082799970, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082799975, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082799976, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.810, Average Loss: 4.960, avg. samples / sec: 21.99
DONE (t=5.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10745
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21768
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09431
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19113
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13779
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20075
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21326
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21326
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10745 AP goal: 0.10000
Iteration:   5180, Loss function: 4.947, Average Loss: 4.955, avg. samples / sec: 346.48
:::MLLOG {"namespace": "", "time_ms": 1639082813440, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813441, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1074521085146195, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813441, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082814399, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:57 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:57 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585692, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080586481, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2780050373, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2780050373
:::MLLOG {"namespace": "", "time_ms": 1639080590447, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590448, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590454, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590455, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080693671, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080693671, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080700427, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080700428, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080700872, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080700873, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080700874, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.687, Average Loss: 0.023, avg. samples / sec: 1.01
Iteration:     20, Loss function: 21.127, Average Loss: 0.458, avg. samples / sec: 182.26
Iteration:     40, Loss function: 20.755, Average Loss: 0.860, avg. samples / sec: 243.85
Iteration:     60, Loss function: 20.378, Average Loss: 1.250, avg. samples / sec: 241.43
Iteration:     80, Loss function: 20.178, Average Loss: 1.624, avg. samples / sec: 233.16
Iteration:    100, Loss function: 16.464, Average Loss: 1.960, avg. samples / sec: 267.90
Iteration:    120, Loss function: 11.274, Average Loss: 2.174, avg. samples / sec: 231.73
Iteration:    140, Loss function: 9.801, Average Loss: 2.340, avg. samples / sec: 242.94
Iteration:    160, Loss function: 9.459, Average Loss: 2.483, avg. samples / sec: 233.90
Iteration:    180, Loss function: 9.102, Average Loss: 2.614, avg. samples / sec: 294.94
Iteration:    200, Loss function: 8.622, Average Loss: 2.739, avg. samples / sec: 228.81
Iteration:    220, Loss function: 8.670, Average Loss: 2.859, avg. samples / sec: 292.32
Iteration:    240, Loss function: 8.882, Average Loss: 2.978, avg. samples / sec: 292.78
Iteration:    260, Loss function: 8.738, Average Loss: 3.094, avg. samples / sec: 268.69
Iteration:    280, Loss function: 8.548, Average Loss: 3.204, avg. samples / sec: 296.86
Iteration:    300, Loss function: 8.381, Average Loss: 3.307, avg. samples / sec: 243.87
Iteration:    320, Loss function: 8.358, Average Loss: 3.406, avg. samples / sec: 270.40
Iteration:    340, Loss function: 8.253, Average Loss: 3.502, avg. samples / sec: 322.23
Iteration:    360, Loss function: 8.028, Average Loss: 3.593, avg. samples / sec: 321.27
Iteration:    380, Loss function: 7.984, Average Loss: 3.683, avg. samples / sec: 333.66
Iteration:    400, Loss function: 7.962, Average Loss: 3.767, avg. samples / sec: 303.24
Iteration:    420, Loss function: 7.733, Average Loss: 3.847, avg. samples / sec: 252.05
Iteration:    440, Loss function: 7.757, Average Loss: 3.924, avg. samples / sec: 274.40
Iteration:    460, Loss function: 7.726, Average Loss: 3.999, avg. samples / sec: 327.83
Iteration:    480, Loss function: 7.478, Average Loss: 4.072, avg. samples / sec: 311.20
Iteration:    500, Loss function: 7.586, Average Loss: 4.143, avg. samples / sec: 326.43
Iteration:    520, Loss function: 7.546, Average Loss: 4.210, avg. samples / sec: 318.12
Iteration:    540, Loss function: 7.595, Average Loss: 4.276, avg. samples / sec: 318.58
Iteration:    560, Loss function: 7.153, Average Loss: 4.339, avg. samples / sec: 309.51
Iteration:    580, Loss function: 7.167, Average Loss: 4.400, avg. samples / sec: 275.18
Iteration:    600, Loss function: 7.333, Average Loss: 4.458, avg. samples / sec: 242.31
Iteration:    620, Loss function: 7.094, Average Loss: 4.513, avg. samples / sec: 313.11
Iteration:    640, Loss function: 6.841, Average Loss: 4.567, avg. samples / sec: 254.91
Iteration:    660, Loss function: 7.245, Average Loss: 4.618, avg. samples / sec: 323.02
Iteration:    680, Loss function: 7.308, Average Loss: 4.669, avg. samples / sec: 318.22
Iteration:    700, Loss function: 6.722, Average Loss: 4.717, avg. samples / sec: 303.61
Iteration:    720, Loss function: 6.861, Average Loss: 4.765, avg. samples / sec: 305.60
Iteration:    740, Loss function: 6.923, Average Loss: 4.809, avg. samples / sec: 323.73
Iteration:    760, Loss function: 6.975, Average Loss: 4.851, avg. samples / sec: 247.21
Iteration:    780, Loss function: 6.873, Average Loss: 4.892, avg. samples / sec: 181.94
Iteration:    800, Loss function: 7.092, Average Loss: 4.931, avg. samples / sec: 289.18
Iteration:    820, Loss function: 6.849, Average Loss: 4.968, avg. samples / sec: 309.00
Iteration:    840, Loss function: 6.849, Average Loss: 5.004, avg. samples / sec: 328.92
Iteration:    860, Loss function: 6.802, Average Loss: 5.037, avg. samples / sec: 327.42
Iteration:    880, Loss function: 6.759, Average Loss: 5.070, avg. samples / sec: 335.13
Iteration:    900, Loss function: 6.918, Average Loss: 5.102, avg. samples / sec: 331.57
Iteration:    920, Loss function: 6.757, Average Loss: 5.131, avg. samples / sec: 292.98
Iteration:    940, Loss function: 6.880, Average Loss: 5.161, avg. samples / sec: 254.63
Iteration:    960, Loss function: 6.425, Average Loss: 5.188, avg. samples / sec: 293.91
Iteration:    980, Loss function: 6.518, Average Loss: 5.215, avg. samples / sec: 332.59
Iteration:   1000, Loss function: 6.524, Average Loss: 5.240, avg. samples / sec: 328.23
Iteration:   1020, Loss function: 6.320, Average Loss: 5.263, avg. samples / sec: 320.67
:::MLLOG {"namespace": "", "time_ms": 1639081121134, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081121136, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.407, Average Loss: 5.287, avg. samples / sec: 325.49
Iteration:   1060, Loss function: 6.410, Average Loss: 5.310, avg. samples / sec: 324.89
Iteration:   1080, Loss function: 6.295, Average Loss: 5.331, avg. samples / sec: 307.35
Iteration:   1100, Loss function: 6.198, Average Loss: 5.349, avg. samples / sec: 310.42
Iteration:   1120, Loss function: 6.227, Average Loss: 5.368, avg. samples / sec: 286.41
Iteration:   1140, Loss function: 6.393, Average Loss: 5.387, avg. samples / sec: 250.86
Iteration:   1160, Loss function: 6.159, Average Loss: 5.404, avg. samples / sec: 282.26
Iteration:   1180, Loss function: 6.300, Average Loss: 5.421, avg. samples / sec: 299.52
Iteration:   1200, Loss function: 6.253, Average Loss: 5.438, avg. samples / sec: 304.02
Iteration:   1220, Loss function: 6.147, Average Loss: 5.453, avg. samples / sec: 329.09
Iteration:   1240, Loss function: 5.973, Average Loss: 5.467, avg. samples / sec: 321.46
Iteration:   1260, Loss function: 6.043, Average Loss: 5.479, avg. samples / sec: 338.94
Iteration:   1280, Loss function: 5.885, Average Loss: 5.491, avg. samples / sec: 333.83
Iteration:   1300, Loss function: 6.061, Average Loss: 5.503, avg. samples / sec: 296.26
Iteration:   1320, Loss function: 6.206, Average Loss: 5.514, avg. samples / sec: 339.08
Iteration:   1340, Loss function: 6.012, Average Loss: 5.524, avg. samples / sec: 292.10
Iteration:   1360, Loss function: 5.947, Average Loss: 5.534, avg. samples / sec: 317.95
Iteration:   1380, Loss function: 6.095, Average Loss: 5.544, avg. samples / sec: 326.08
Iteration:   1400, Loss function: 6.197, Average Loss: 5.552, avg. samples / sec: 312.83
Iteration:   1420, Loss function: 5.824, Average Loss: 5.559, avg. samples / sec: 189.34
Iteration:   1440, Loss function: 6.410, Average Loss: 5.568, avg. samples / sec: 316.14
Iteration:   1460, Loss function: 6.141, Average Loss: 5.576, avg. samples / sec: 318.70
Iteration:   1480, Loss function: 6.000, Average Loss: 5.585, avg. samples / sec: 341.52
Iteration:   1500, Loss function: 6.060, Average Loss: 5.593, avg. samples / sec: 335.46
Iteration:   1520, Loss function: 6.061, Average Loss: 5.598, avg. samples / sec: 326.61
Iteration:   1540, Loss function: 5.978, Average Loss: 5.602, avg. samples / sec: 339.68
Iteration:   1560, Loss function: 5.645, Average Loss: 5.607, avg. samples / sec: 334.65
Iteration:   1580, Loss function: 5.440, Average Loss: 5.610, avg. samples / sec: 329.92
Iteration:   1600, Loss function: 6.151, Average Loss: 5.616, avg. samples / sec: 316.44
Iteration:   1620, Loss function: 5.826, Average Loss: 5.621, avg. samples / sec: 257.59
Iteration:   1640, Loss function: 5.923, Average Loss: 5.624, avg. samples / sec: 324.09
Iteration:   1660, Loss function: 5.802, Average Loss: 5.628, avg. samples / sec: 334.73
Iteration:   1680, Loss function: 5.726, Average Loss: 5.631, avg. samples / sec: 317.87
Iteration:   1700, Loss function: 5.420, Average Loss: 5.633, avg. samples / sec: 266.53
Iteration:   1720, Loss function: 5.727, Average Loss: 5.636, avg. samples / sec: 240.55
Iteration:   1740, Loss function: 5.735, Average Loss: 5.637, avg. samples / sec: 282.12
Iteration:   1760, Loss function: 5.584, Average Loss: 5.638, avg. samples / sec: 177.46
Iteration:   1780, Loss function: 5.755, Average Loss: 5.641, avg. samples / sec: 212.01
Iteration:   1800, Loss function: 5.568, Average Loss: 5.644, avg. samples / sec: 312.03
Iteration:   1820, Loss function: 6.019, Average Loss: 5.646, avg. samples / sec: 317.77
Iteration:   1840, Loss function: 5.832, Average Loss: 5.646, avg. samples / sec: 323.32
Iteration:   1860, Loss function: 5.590, Average Loss: 5.645, avg. samples / sec: 336.23
Iteration:   1880, Loss function: 5.813, Average Loss: 5.646, avg. samples / sec: 303.32
Iteration:   1900, Loss function: 5.966, Average Loss: 5.647, avg. samples / sec: 294.09
Iteration:   1920, Loss function: 5.572, Average Loss: 5.647, avg. samples / sec: 295.67
Iteration:   1940, Loss function: 5.830, Average Loss: 5.647, avg. samples / sec: 254.53
Iteration:   1960, Loss function: 5.518, Average Loss: 5.646, avg. samples / sec: 288.47
Iteration:   1980, Loss function: 5.577, Average Loss: 5.645, avg. samples / sec: 195.68
Iteration:   2000, Loss function: 5.753, Average Loss: 5.645, avg. samples / sec: 182.47
Iteration:   2020, Loss function: 5.536, Average Loss: 5.643, avg. samples / sec: 246.64
Iteration:   2040, Loss function: 5.582, Average Loss: 5.643, avg. samples / sec: 293.20
:::MLLOG {"namespace": "", "time_ms": 1639081528263, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081528274, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.595, Average Loss: 5.640, avg. samples / sec: 308.85
Iteration:   2080, Loss function: 5.183, Average Loss: 5.638, avg. samples / sec: 289.67
Iteration:   2100, Loss function: 5.463, Average Loss: 5.635, avg. samples / sec: 329.43
Iteration:   2120, Loss function: 5.301, Average Loss: 5.633, avg. samples / sec: 312.84
Iteration:   2140, Loss function: 5.213, Average Loss: 5.630, avg. samples / sec: 230.14
Iteration:   2160, Loss function: 5.344, Average Loss: 5.628, avg. samples / sec: 243.91
Iteration:   2180, Loss function: 5.335, Average Loss: 5.625, avg. samples / sec: 330.82
Iteration:   2200, Loss function: 5.396, Average Loss: 5.621, avg. samples / sec: 323.88
Iteration:   2220, Loss function: 5.577, Average Loss: 5.618, avg. samples / sec: 329.08
Iteration:   2240, Loss function: 5.542, Average Loss: 5.616, avg. samples / sec: 327.73
Iteration:   2260, Loss function: 5.347, Average Loss: 5.612, avg. samples / sec: 308.12
Iteration:   2280, Loss function: 5.279, Average Loss: 5.608, avg. samples / sec: 301.33
Iteration:   2300, Loss function: 5.173, Average Loss: 5.605, avg. samples / sec: 331.85
Iteration:   2320, Loss function: 5.292, Average Loss: 5.603, avg. samples / sec: 336.04
Iteration:   2340, Loss function: 5.519, Average Loss: 5.600, avg. samples / sec: 330.37
Iteration:   2360, Loss function: 5.337, Average Loss: 5.596, avg. samples / sec: 332.25
Iteration:   2380, Loss function: 5.429, Average Loss: 5.593, avg. samples / sec: 289.37
Iteration:   2400, Loss function: 5.528, Average Loss: 5.588, avg. samples / sec: 252.63
Iteration:   2420, Loss function: 5.548, Average Loss: 5.583, avg. samples / sec: 283.80
Iteration:   2440, Loss function: 5.452, Average Loss: 5.580, avg. samples / sec: 307.12
Iteration:   2460, Loss function: 5.149, Average Loss: 5.576, avg. samples / sec: 287.22
Iteration:   2480, Loss function: 5.279, Average Loss: 5.572, avg. samples / sec: 339.04
Iteration:   2500, Loss function: 5.457, Average Loss: 5.568, avg. samples / sec: 314.95
Iteration:   2520, Loss function: 5.242, Average Loss: 5.563, avg. samples / sec: 324.80
Iteration:   2540, Loss function: 5.474, Average Loss: 5.559, avg. samples / sec: 317.98
Iteration:   2560, Loss function: 5.248, Average Loss: 5.555, avg. samples / sec: 329.24
Iteration:   2580, Loss function: 5.239, Average Loss: 5.551, avg. samples / sec: 327.47
Iteration:   2600, Loss function: 5.592, Average Loss: 5.548, avg. samples / sec: 326.59
Iteration:   2620, Loss function: 5.601, Average Loss: 5.543, avg. samples / sec: 316.66
Iteration:   2640, Loss function: 5.373, Average Loss: 5.541, avg. samples / sec: 298.80
Iteration:   2660, Loss function: 5.161, Average Loss: 5.537, avg. samples / sec: 285.03
Iteration:   2680, Loss function: 5.168, Average Loss: 5.534, avg. samples / sec: 334.07
Iteration:   2700, Loss function: 5.206, Average Loss: 5.529, avg. samples / sec: 321.21
Iteration:   2720, Loss function: 5.464, Average Loss: 5.525, avg. samples / sec: 271.17
Iteration:   2740, Loss function: 5.018, Average Loss: 5.522, avg. samples / sec: 271.73
Iteration:   2760, Loss function: 5.008, Average Loss: 5.516, avg. samples / sec: 237.48
Iteration:   2780, Loss function: 5.495, Average Loss: 5.511, avg. samples / sec: 262.89
Iteration:   2800, Loss function: 5.489, Average Loss: 5.507, avg. samples / sec: 266.79
Iteration:   2820, Loss function: 5.489, Average Loss: 5.503, avg. samples / sec: 329.15
Iteration:   2840, Loss function: 5.190, Average Loss: 5.499, avg. samples / sec: 331.22
Iteration:   2860, Loss function: 5.213, Average Loss: 5.494, avg. samples / sec: 335.45
Iteration:   2880, Loss function: 5.300, Average Loss: 5.489, avg. samples / sec: 296.75
Iteration:   2900, Loss function: 5.067, Average Loss: 5.485, avg. samples / sec: 326.90
Iteration:   2920, Loss function: 5.239, Average Loss: 5.479, avg. samples / sec: 316.63
Iteration:   2940, Loss function: 5.028, Average Loss: 5.474, avg. samples / sec: 331.14
Iteration:   2960, Loss function: 5.394, Average Loss: 5.470, avg. samples / sec: 308.49
Iteration:   2980, Loss function: 5.111, Average Loss: 5.466, avg. samples / sec: 294.40
Iteration:   3000, Loss function: 5.335, Average Loss: 5.460, avg. samples / sec: 311.04
Iteration:   3020, Loss function: 5.358, Average Loss: 5.454, avg. samples / sec: 331.02
Iteration:   3040, Loss function: 5.113, Average Loss: 5.449, avg. samples / sec: 329.26
Iteration:   3060, Loss function: 5.162, Average Loss: 5.444, avg. samples / sec: 329.91
Iteration:   3080, Loss function: 4.920, Average Loss: 5.438, avg. samples / sec: 337.01
:::MLLOG {"namespace": "", "time_ms": 1639081911871, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081911873, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.155, Average Loss: 5.434, avg. samples / sec: 330.52
Iteration:   3120, Loss function: 5.039, Average Loss: 5.428, avg. samples / sec: 321.27
Iteration:   3140, Loss function: 5.131, Average Loss: 5.423, avg. samples / sec: 330.19
Iteration:   3160, Loss function: 5.307, Average Loss: 5.418, avg. samples / sec: 290.57
Iteration:   3180, Loss function: 4.960, Average Loss: 5.412, avg. samples / sec: 271.20
Iteration:   3200, Loss function: 5.409, Average Loss: 5.407, avg. samples / sec: 255.39
Iteration:   3220, Loss function: 5.370, Average Loss: 5.402, avg. samples / sec: 264.29
Iteration:   3240, Loss function: 5.200, Average Loss: 5.397, avg. samples / sec: 231.99
Iteration:   3260, Loss function: 5.056, Average Loss: 5.390, avg. samples / sec: 214.17
Iteration:   3280, Loss function: 4.936, Average Loss: 5.384, avg. samples / sec: 320.01
Iteration:   3300, Loss function: 4.852, Average Loss: 5.378, avg. samples / sec: 315.81
Iteration:   3320, Loss function: 5.013, Average Loss: 5.373, avg. samples / sec: 311.80
Iteration:   3340, Loss function: 4.994, Average Loss: 5.369, avg. samples / sec: 286.20
Iteration:   3360, Loss function: 5.036, Average Loss: 5.363, avg. samples / sec: 322.35
Iteration:   3380, Loss function: 5.355, Average Loss: 5.357, avg. samples / sec: 327.71
Iteration:   3400, Loss function: 4.890, Average Loss: 5.352, avg. samples / sec: 328.90
Iteration:   3420, Loss function: 5.092, Average Loss: 5.347, avg. samples / sec: 334.94
Iteration:   3440, Loss function: 4.799, Average Loss: 5.342, avg. samples / sec: 323.70
Iteration:   3460, Loss function: 5.118, Average Loss: 5.336, avg. samples / sec: 279.19
Iteration:   3480, Loss function: 5.177, Average Loss: 5.331, avg. samples / sec: 220.50
Iteration:   3500, Loss function: 5.278, Average Loss: 5.328, avg. samples / sec: 286.20
Iteration:   3520, Loss function: 4.991, Average Loss: 5.325, avg. samples / sec: 237.93
Iteration:   3540, Loss function: 5.144, Average Loss: 5.320, avg. samples / sec: 286.72
Iteration:   3560, Loss function: 5.092, Average Loss: 5.316, avg. samples / sec: 239.50
Iteration:   3580, Loss function: 5.134, Average Loss: 5.311, avg. samples / sec: 268.89
Iteration:   3600, Loss function: 5.310, Average Loss: 5.306, avg. samples / sec: 315.73
Iteration:   3620, Loss function: 4.746, Average Loss: 5.301, avg. samples / sec: 336.17
Iteration:   3640, Loss function: 4.850, Average Loss: 5.296, avg. samples / sec: 338.58
Iteration:   3660, Loss function: 5.019, Average Loss: 5.290, avg. samples / sec: 313.47
Iteration:   3680, Loss function: 5.182, Average Loss: 5.285, avg. samples / sec: 319.33
Iteration:   3700, Loss function: 4.943, Average Loss: 5.280, avg. samples / sec: 327.83
Iteration:   3720, Loss function: 4.954, Average Loss: 5.273, avg. samples / sec: 314.88
Iteration:   3740, Loss function: 5.283, Average Loss: 5.270, avg. samples / sec: 327.39
Iteration:   3760, Loss function: 5.108, Average Loss: 5.266, avg. samples / sec: 332.83
Iteration:   3780, Loss function: 4.998, Average Loss: 5.261, avg. samples / sec: 292.02
Iteration:   3800, Loss function: 5.040, Average Loss: 5.257, avg. samples / sec: 312.32
Iteration:   3820, Loss function: 5.226, Average Loss: 5.252, avg. samples / sec: 317.61
Iteration:   3840, Loss function: 4.827, Average Loss: 5.247, avg. samples / sec: 328.34
Iteration:   3860, Loss function: 4.775, Average Loss: 5.242, avg. samples / sec: 334.09
Iteration:   3880, Loss function: 4.898, Average Loss: 5.236, avg. samples / sec: 305.64
Iteration:   3900, Loss function: 5.161, Average Loss: 5.231, avg. samples / sec: 325.72
Iteration:   3920, Loss function: 5.151, Average Loss: 5.226, avg. samples / sec: 275.64
Iteration:   3940, Loss function: 4.860, Average Loss: 5.221, avg. samples / sec: 230.81
Iteration:   3960, Loss function: 4.867, Average Loss: 5.216, avg. samples / sec: 332.60
Iteration:   3980, Loss function: 4.842, Average Loss: 5.212, avg. samples / sec: 283.81
Iteration:   4000, Loss function: 5.053, Average Loss: 5.207, avg. samples / sec: 288.29
Iteration:   4020, Loss function: 5.024, Average Loss: 5.202, avg. samples / sec: 328.12
Iteration:   4040, Loss function: 5.043, Average Loss: 5.199, avg. samples / sec: 327.57
Iteration:   4060, Loss function: 5.094, Average Loss: 5.196, avg. samples / sec: 320.40
Iteration:   4080, Loss function: 5.106, Average Loss: 5.192, avg. samples / sec: 235.49
Iteration:   4100, Loss function: 5.149, Average Loss: 5.189, avg. samples / sec: 302.37
:::MLLOG {"namespace": "", "time_ms": 1639082310155, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082310156, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.893, Average Loss: 5.186, avg. samples / sec: 284.74
Iteration:   4140, Loss function: 4.775, Average Loss: 5.180, avg. samples / sec: 315.68
Iteration:   4160, Loss function: 4.959, Average Loss: 5.174, avg. samples / sec: 300.53
Iteration:   4180, Loss function: 4.890, Average Loss: 5.168, avg. samples / sec: 310.08
Iteration:   4200, Loss function: 4.859, Average Loss: 5.163, avg. samples / sec: 312.64
Iteration:   4220, Loss function: 4.765, Average Loss: 5.158, avg. samples / sec: 184.34
Iteration:   4240, Loss function: 4.943, Average Loss: 5.153, avg. samples / sec: 308.41
Iteration:   4260, Loss function: 5.038, Average Loss: 5.148, avg. samples / sec: 324.94
Iteration:   4280, Loss function: 5.012, Average Loss: 5.142, avg. samples / sec: 328.45
Iteration:   4300, Loss function: 4.905, Average Loss: 5.137, avg. samples / sec: 319.54
Iteration:   4320, Loss function: 4.687, Average Loss: 5.132, avg. samples / sec: 332.76
Iteration:   4340, Loss function: 4.674, Average Loss: 5.126, avg. samples / sec: 334.18
Iteration:   4360, Loss function: 4.875, Average Loss: 5.122, avg. samples / sec: 303.53
Iteration:   4380, Loss function: 4.929, Average Loss: 5.117, avg. samples / sec: 308.50
Iteration:   4400, Loss function: 4.746, Average Loss: 5.112, avg. samples / sec: 315.18
Iteration:   4420, Loss function: 4.780, Average Loss: 5.106, avg. samples / sec: 299.65
Iteration:   4440, Loss function: 4.876, Average Loss: 5.101, avg. samples / sec: 301.96
Iteration:   4460, Loss function: 5.074, Average Loss: 5.097, avg. samples / sec: 314.66
Iteration:   4480, Loss function: 4.819, Average Loss: 5.093, avg. samples / sec: 305.76
Iteration:   4500, Loss function: 4.893, Average Loss: 5.090, avg. samples / sec: 300.47
Iteration:   4520, Loss function: 4.566, Average Loss: 5.086, avg. samples / sec: 304.25
Iteration:   4540, Loss function: 4.932, Average Loss: 5.081, avg. samples / sec: 269.67
Iteration:   4560, Loss function: 4.785, Average Loss: 5.078, avg. samples / sec: 279.48
Iteration:   4580, Loss function: 4.756, Average Loss: 5.075, avg. samples / sec: 318.56
Iteration:   4600, Loss function: 4.842, Average Loss: 5.071, avg. samples / sec: 311.03
Iteration:   4620, Loss function: 4.709, Average Loss: 5.066, avg. samples / sec: 252.22
Iteration:   4640, Loss function: 4.969, Average Loss: 5.061, avg. samples / sec: 291.98
Iteration:   4660, Loss function: 4.824, Average Loss: 5.057, avg. samples / sec: 232.44
Iteration:   4680, Loss function: 5.377, Average Loss: 5.053, avg. samples / sec: 254.39
Iteration:   4700, Loss function: 4.718, Average Loss: 5.049, avg. samples / sec: 276.67
Iteration:   4720, Loss function: 4.750, Average Loss: 5.043, avg. samples / sec: 227.70
Iteration:   4740, Loss function: 4.801, Average Loss: 5.039, avg. samples / sec: 284.36
Iteration:   4760, Loss function: 4.670, Average Loss: 5.035, avg. samples / sec: 305.84
Iteration:   4780, Loss function: 4.937, Average Loss: 5.030, avg. samples / sec: 273.33
Iteration:   4800, Loss function: 4.948, Average Loss: 5.028, avg. samples / sec: 327.43
Iteration:   4820, Loss function: 4.927, Average Loss: 5.024, avg. samples / sec: 297.70
Iteration:   4840, Loss function: 4.984, Average Loss: 5.020, avg. samples / sec: 336.30
Iteration:   4860, Loss function: 4.738, Average Loss: 5.016, avg. samples / sec: 327.46
Iteration:   4880, Loss function: 5.151, Average Loss: 5.012, avg. samples / sec: 323.66
Iteration:   4900, Loss function: 4.673, Average Loss: 5.009, avg. samples / sec: 337.85
Iteration:   4920, Loss function: 4.712, Average Loss: 5.005, avg. samples / sec: 269.16
Iteration:   4940, Loss function: 4.783, Average Loss: 5.001, avg. samples / sec: 331.38
Iteration:   4960, Loss function: 4.664, Average Loss: 4.997, avg. samples / sec: 344.54
Iteration:   4980, Loss function: 4.454, Average Loss: 4.993, avg. samples / sec: 322.41
Iteration:   5000, Loss function: 5.011, Average Loss: 4.990, avg. samples / sec: 286.15
Iteration:   5020, Loss function: 5.049, Average Loss: 4.987, avg. samples / sec: 297.83
Iteration:   5040, Loss function: 4.839, Average Loss: 4.984, avg. samples / sec: 269.02
Iteration:   5060, Loss function: 4.737, Average Loss: 4.980, avg. samples / sec: 313.23
Iteration:   5080, Loss function: 4.342, Average Loss: 4.975, avg. samples / sec: 325.06
Iteration:   5100, Loss function: 4.723, Average Loss: 4.973, avg. samples / sec: 323.17
Iteration:   5120, Loss function: 4.594, Average Loss: 4.969, avg. samples / sec: 317.27
Iteration:   5140, Loss function: 4.935, Average Loss: 4.965, avg. samples / sec: 331.22
:::MLLOG {"namespace": "", "time_ms": 1639082704846, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 94.96 s
:::MLLOG {"namespace": "", "time_ms": 1639082799970, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082799975, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082799976, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.96s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.810, Average Loss: 4.960, avg. samples / sec: 21.99
DONE (t=5.65s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10745
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21768
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09431
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19113
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13779
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20075
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21326
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21326
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10745 AP goal: 0.10000
Iteration:   5180, Loss function: 4.947, Average Loss: 4.955, avg. samples / sec: 346.48
:::MLLOG {"namespace": "", "time_ms": 1639082813440, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813441, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1074521085146195, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813441, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082814399, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082817
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:57 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:46:57 PM
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:57 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
+ result=2240
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-09 08:09:37 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-09 08:09:37 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
