+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-jbm57.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-jbm57.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-jbm57.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-89d05d6f-212a-5e57-8253-60f252e63667)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-89d05d6f-212a-5e57-8253-60f252e63667
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-89d05d6f-212a-5e57-8253-60f252e63667'
Found 1 MIG instances: MIG-89d05d6f-212a-5e57-8253-60f252e63667
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-jbm57 to the sync file ...
run-ssd--1-jbm57 Found 23 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
    14	run-ssd--1-wbth6
    15	run-ssd--1-4jg6j
    16	run-ssd--1-9qdbc
    17	run-ssd--1-6gxt2
    18	run-ssd--1-jx4zc
    19	run-ssd--1-d4qds
    20	run-ssd--1-6j5s6
    21	run-ssd--1-z4jtv
    22	run-ssd--1-d6nlf
    23	run-ssd--1-jbm57
Thu Dec  9 20:09:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-89d05d6f-212a-5e57-8253-60f252e63667)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585623, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080585999, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2320498621, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2320498621
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080590324, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590325, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590335, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692528, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692529, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080698744, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080698745, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080699128, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080699129, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080699130, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.328, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.210, Average Loss: 0.461, avg. samples / sec: 192.57
Iteration:     40, Loss function: 20.834, Average Loss: 0.864, avg. samples / sec: 258.32
Iteration:     60, Loss function: 20.345, Average Loss: 1.254, avg. samples / sec: 252.36
Iteration:     80, Loss function: 20.263, Average Loss: 1.630, avg. samples / sec: 240.22
Iteration:    100, Loss function: 17.003, Average Loss: 1.971, avg. samples / sec: 272.29
Iteration:    120, Loss function: 12.572, Average Loss: 2.198, avg. samples / sec: 254.81
Iteration:    140, Loss function: 9.777, Average Loss: 2.366, avg. samples / sec: 245.67
Iteration:    160, Loss function: 9.390, Average Loss: 2.509, avg. samples / sec: 260.26
Iteration:    180, Loss function: 9.104, Average Loss: 2.640, avg. samples / sec: 274.55
Iteration:    200, Loss function: 8.769, Average Loss: 2.766, avg. samples / sec: 264.10
Iteration:    220, Loss function: 8.634, Average Loss: 2.886, avg. samples / sec: 311.09
Iteration:    240, Loss function: 8.727, Average Loss: 3.003, avg. samples / sec: 284.00
Iteration:    260, Loss function: 8.759, Average Loss: 3.115, avg. samples / sec: 328.33
Iteration:    280, Loss function: 8.605, Average Loss: 3.224, avg. samples / sec: 273.03
Iteration:    300, Loss function: 8.312, Average Loss: 3.329, avg. samples / sec: 211.96
Iteration:    320, Loss function: 8.382, Average Loss: 3.429, avg. samples / sec: 286.06
Iteration:    340, Loss function: 8.354, Average Loss: 3.526, avg. samples / sec: 318.99
Iteration:    360, Loss function: 8.019, Average Loss: 3.619, avg. samples / sec: 314.30
Iteration:    380, Loss function: 7.988, Average Loss: 3.710, avg. samples / sec: 319.09
Iteration:    400, Loss function: 7.900, Average Loss: 3.796, avg. samples / sec: 317.66
Iteration:    420, Loss function: 7.710, Average Loss: 3.877, avg. samples / sec: 278.58
Iteration:    440, Loss function: 7.812, Average Loss: 3.956, avg. samples / sec: 313.21
Iteration:    460, Loss function: 7.825, Average Loss: 4.031, avg. samples / sec: 245.25
Iteration:    480, Loss function: 7.484, Average Loss: 4.105, avg. samples / sec: 227.66
Iteration:    500, Loss function: 7.470, Average Loss: 4.176, avg. samples / sec: 262.95
Iteration:    520, Loss function: 7.681, Average Loss: 4.245, avg. samples / sec: 332.95
Iteration:    540, Loss function: 7.591, Average Loss: 4.310, avg. samples / sec: 330.47
Iteration:    560, Loss function: 7.201, Average Loss: 4.372, avg. samples / sec: 329.02
Iteration:    580, Loss function: 7.350, Average Loss: 4.433, avg. samples / sec: 248.13
Iteration:    600, Loss function: 7.593, Average Loss: 4.491, avg. samples / sec: 286.44
Iteration:    620, Loss function: 7.206, Average Loss: 4.548, avg. samples / sec: 220.89
Iteration:    640, Loss function: 6.927, Average Loss: 4.603, avg. samples / sec: 317.21
Iteration:    660, Loss function: 7.201, Average Loss: 4.655, avg. samples / sec: 323.94
Iteration:    680, Loss function: 7.248, Average Loss: 4.705, avg. samples / sec: 295.83
Iteration:    700, Loss function: 6.955, Average Loss: 4.753, avg. samples / sec: 252.78
Iteration:    720, Loss function: 6.905, Average Loss: 4.799, avg. samples / sec: 315.72
Iteration:    740, Loss function: 6.839, Average Loss: 4.843, avg. samples / sec: 298.18
Iteration:    760, Loss function: 7.063, Average Loss: 4.886, avg. samples / sec: 321.54
Iteration:    780, Loss function: 6.737, Average Loss: 4.928, avg. samples / sec: 321.33
Iteration:    800, Loss function: 6.903, Average Loss: 4.966, avg. samples / sec: 337.87
Iteration:    820, Loss function: 6.792, Average Loss: 5.003, avg. samples / sec: 312.33
Iteration:    840, Loss function: 6.835, Average Loss: 5.039, avg. samples / sec: 291.99
Iteration:    860, Loss function: 6.775, Average Loss: 5.074, avg. samples / sec: 302.09
Iteration:    880, Loss function: 6.875, Average Loss: 5.106, avg. samples / sec: 326.11
Iteration:    900, Loss function: 7.012, Average Loss: 5.138, avg. samples / sec: 333.70
Iteration:    920, Loss function: 6.770, Average Loss: 5.167, avg. samples / sec: 313.86
Iteration:    940, Loss function: 6.721, Average Loss: 5.197, avg. samples / sec: 300.05
Iteration:    960, Loss function: 6.365, Average Loss: 5.225, avg. samples / sec: 318.57
Iteration:    980, Loss function: 6.457, Average Loss: 5.252, avg. samples / sec: 294.10
Iteration:   1000, Loss function: 6.562, Average Loss: 5.277, avg. samples / sec: 251.82
Iteration:   1020, Loss function: 6.501, Average Loss: 5.300, avg. samples / sec: 297.28
:::MLLOG {"namespace": "", "time_ms": 1639081115299, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081115303, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.416, Average Loss: 5.324, avg. samples / sec: 333.04
Iteration:   1060, Loss function: 6.431, Average Loss: 5.347, avg. samples / sec: 325.86
Iteration:   1080, Loss function: 6.236, Average Loss: 5.368, avg. samples / sec: 327.23
Iteration:   1100, Loss function: 6.323, Average Loss: 5.387, avg. samples / sec: 330.29
Iteration:   1120, Loss function: 6.228, Average Loss: 5.406, avg. samples / sec: 297.33
Iteration:   1140, Loss function: 6.425, Average Loss: 5.424, avg. samples / sec: 325.21
Iteration:   1160, Loss function: 6.083, Average Loss: 5.441, avg. samples / sec: 342.48
Iteration:   1180, Loss function: 6.347, Average Loss: 5.458, avg. samples / sec: 337.19
Iteration:   1200, Loss function: 6.225, Average Loss: 5.475, avg. samples / sec: 332.49
Iteration:   1220, Loss function: 6.179, Average Loss: 5.490, avg. samples / sec: 328.27
Iteration:   1240, Loss function: 6.217, Average Loss: 5.503, avg. samples / sec: 337.01
Iteration:   1260, Loss function: 6.015, Average Loss: 5.515, avg. samples / sec: 332.75
Iteration:   1280, Loss function: 5.918, Average Loss: 5.526, avg. samples / sec: 331.32
Iteration:   1300, Loss function: 6.095, Average Loss: 5.538, avg. samples / sec: 326.89
Iteration:   1320, Loss function: 5.988, Average Loss: 5.550, avg. samples / sec: 328.47
Iteration:   1340, Loss function: 5.849, Average Loss: 5.559, avg. samples / sec: 334.17
Iteration:   1360, Loss function: 6.084, Average Loss: 5.569, avg. samples / sec: 315.01
Iteration:   1380, Loss function: 6.202, Average Loss: 5.579, avg. samples / sec: 333.96
Iteration:   1400, Loss function: 6.083, Average Loss: 5.587, avg. samples / sec: 301.22
Iteration:   1420, Loss function: 5.817, Average Loss: 5.594, avg. samples / sec: 250.94
Iteration:   1440, Loss function: 6.338, Average Loss: 5.602, avg. samples / sec: 322.99
Iteration:   1460, Loss function: 6.258, Average Loss: 5.610, avg. samples / sec: 332.04
Iteration:   1480, Loss function: 5.888, Average Loss: 5.617, avg. samples / sec: 323.05
Iteration:   1500, Loss function: 6.114, Average Loss: 5.625, avg. samples / sec: 343.46
Iteration:   1520, Loss function: 5.966, Average Loss: 5.631, avg. samples / sec: 321.75
Iteration:   1540, Loss function: 5.975, Average Loss: 5.635, avg. samples / sec: 277.96
Iteration:   1560, Loss function: 5.755, Average Loss: 5.639, avg. samples / sec: 301.43
Iteration:   1580, Loss function: 5.792, Average Loss: 5.642, avg. samples / sec: 270.11
Iteration:   1600, Loss function: 6.092, Average Loss: 5.647, avg. samples / sec: 322.11
Iteration:   1620, Loss function: 5.903, Average Loss: 5.651, avg. samples / sec: 233.85
Iteration:   1640, Loss function: 6.108, Average Loss: 5.654, avg. samples / sec: 305.66
Iteration:   1660, Loss function: 5.992, Average Loss: 5.658, avg. samples / sec: 292.53
Iteration:   1680, Loss function: 5.684, Average Loss: 5.660, avg. samples / sec: 305.78
Iteration:   1700, Loss function: 5.542, Average Loss: 5.664, avg. samples / sec: 236.83
Iteration:   1720, Loss function: 5.824, Average Loss: 5.666, avg. samples / sec: 265.73
Iteration:   1740, Loss function: 5.841, Average Loss: 5.669, avg. samples / sec: 325.86
Iteration:   1760, Loss function: 5.406, Average Loss: 5.670, avg. samples / sec: 333.16
Iteration:   1780, Loss function: 5.653, Average Loss: 5.671, avg. samples / sec: 297.16
Iteration:   1800, Loss function: 5.549, Average Loss: 5.673, avg. samples / sec: 320.82
Iteration:   1820, Loss function: 5.969, Average Loss: 5.674, avg. samples / sec: 334.38
Iteration:   1840, Loss function: 5.866, Average Loss: 5.675, avg. samples / sec: 323.17
Iteration:   1860, Loss function: 5.701, Average Loss: 5.673, avg. samples / sec: 288.78
Iteration:   1880, Loss function: 5.942, Average Loss: 5.674, avg. samples / sec: 261.12
Iteration:   1900, Loss function: 5.834, Average Loss: 5.675, avg. samples / sec: 227.29
Iteration:   1920, Loss function: 5.761, Average Loss: 5.674, avg. samples / sec: 273.41
Iteration:   1940, Loss function: 5.865, Average Loss: 5.673, avg. samples / sec: 261.18
Iteration:   1960, Loss function: 5.499, Average Loss: 5.673, avg. samples / sec: 261.11
Iteration:   1980, Loss function: 5.731, Average Loss: 5.672, avg. samples / sec: 306.48
Iteration:   2000, Loss function: 5.765, Average Loss: 5.672, avg. samples / sec: 300.68
Iteration:   2020, Loss function: 5.675, Average Loss: 5.670, avg. samples / sec: 252.38
Iteration:   2040, Loss function: 5.605, Average Loss: 5.669, avg. samples / sec: 233.56
:::MLLOG {"namespace": "", "time_ms": 1639081507176, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081507178, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.305, Average Loss: 5.667, avg. samples / sec: 264.76
Iteration:   2080, Loss function: 5.061, Average Loss: 5.663, avg. samples / sec: 291.84
Iteration:   2100, Loss function: 5.379, Average Loss: 5.660, avg. samples / sec: 302.78
Iteration:   2120, Loss function: 5.560, Average Loss: 5.657, avg. samples / sec: 319.24
Iteration:   2140, Loss function: 5.360, Average Loss: 5.654, avg. samples / sec: 297.22
Iteration:   2160, Loss function: 5.461, Average Loss: 5.651, avg. samples / sec: 321.54
Iteration:   2180, Loss function: 5.449, Average Loss: 5.649, avg. samples / sec: 259.99
Iteration:   2200, Loss function: 5.497, Average Loss: 5.644, avg. samples / sec: 240.34
Iteration:   2220, Loss function: 5.583, Average Loss: 5.641, avg. samples / sec: 298.36
Iteration:   2240, Loss function: 5.406, Average Loss: 5.639, avg. samples / sec: 304.86
Iteration:   2260, Loss function: 5.341, Average Loss: 5.635, avg. samples / sec: 336.91
Iteration:   2280, Loss function: 5.199, Average Loss: 5.632, avg. samples / sec: 325.55
Iteration:   2300, Loss function: 5.131, Average Loss: 5.629, avg. samples / sec: 331.47
Iteration:   2320, Loss function: 5.341, Average Loss: 5.626, avg. samples / sec: 331.60
Iteration:   2340, Loss function: 5.387, Average Loss: 5.622, avg. samples / sec: 328.60
Iteration:   2360, Loss function: 5.341, Average Loss: 5.617, avg. samples / sec: 239.69
Iteration:   2380, Loss function: 5.239, Average Loss: 5.614, avg. samples / sec: 317.25
Iteration:   2400, Loss function: 5.507, Average Loss: 5.608, avg. samples / sec: 320.92
Iteration:   2420, Loss function: 5.704, Average Loss: 5.605, avg. samples / sec: 315.64
Iteration:   2440, Loss function: 5.431, Average Loss: 5.601, avg. samples / sec: 326.41
Iteration:   2460, Loss function: 5.097, Average Loss: 5.596, avg. samples / sec: 338.35
Iteration:   2480, Loss function: 5.379, Average Loss: 5.592, avg. samples / sec: 340.97
Iteration:   2500, Loss function: 5.355, Average Loss: 5.588, avg. samples / sec: 326.88
Iteration:   2520, Loss function: 5.517, Average Loss: 5.583, avg. samples / sec: 315.42
Iteration:   2540, Loss function: 5.494, Average Loss: 5.580, avg. samples / sec: 313.27
Iteration:   2560, Loss function: 5.366, Average Loss: 5.576, avg. samples / sec: 328.16
Iteration:   2580, Loss function: 5.090, Average Loss: 5.573, avg. samples / sec: 326.67
Iteration:   2600, Loss function: 5.433, Average Loss: 5.571, avg. samples / sec: 332.24
Iteration:   2620, Loss function: 5.554, Average Loss: 5.566, avg. samples / sec: 341.99
Iteration:   2640, Loss function: 5.270, Average Loss: 5.563, avg. samples / sec: 252.50
Iteration:   2660, Loss function: 5.073, Average Loss: 5.558, avg. samples / sec: 286.49
Iteration:   2680, Loss function: 5.098, Average Loss: 5.554, avg. samples / sec: 297.26
Iteration:   2700, Loss function: 5.193, Average Loss: 5.549, avg. samples / sec: 324.71
Iteration:   2720, Loss function: 5.383, Average Loss: 5.545, avg. samples / sec: 319.11
Iteration:   2740, Loss function: 4.898, Average Loss: 5.540, avg. samples / sec: 330.44
Iteration:   2760, Loss function: 5.141, Average Loss: 5.535, avg. samples / sec: 327.78
Iteration:   2780, Loss function: 5.495, Average Loss: 5.530, avg. samples / sec: 272.66
Iteration:   2800, Loss function: 5.206, Average Loss: 5.525, avg. samples / sec: 218.15
Iteration:   2820, Loss function: 5.359, Average Loss: 5.521, avg. samples / sec: 235.75
Iteration:   2840, Loss function: 5.190, Average Loss: 5.517, avg. samples / sec: 310.00
Iteration:   2860, Loss function: 5.105, Average Loss: 5.512, avg. samples / sec: 308.57
Iteration:   2880, Loss function: 5.166, Average Loss: 5.507, avg. samples / sec: 303.57
Iteration:   2900, Loss function: 5.056, Average Loss: 5.502, avg. samples / sec: 331.58
Iteration:   2920, Loss function: 5.276, Average Loss: 5.497, avg. samples / sec: 265.42
Iteration:   2940, Loss function: 5.192, Average Loss: 5.492, avg. samples / sec: 259.23
Iteration:   2960, Loss function: 5.405, Average Loss: 5.488, avg. samples / sec: 280.29
Iteration:   2980, Loss function: 5.073, Average Loss: 5.484, avg. samples / sec: 323.83
Iteration:   3000, Loss function: 5.330, Average Loss: 5.478, avg. samples / sec: 332.46
Iteration:   3020, Loss function: 5.401, Average Loss: 5.472, avg. samples / sec: 234.96
Iteration:   3040, Loss function: 5.155, Average Loss: 5.466, avg. samples / sec: 317.84
Iteration:   3060, Loss function: 5.074, Average Loss: 5.460, avg. samples / sec: 257.02
Iteration:   3080, Loss function: 5.039, Average Loss: 5.455, avg. samples / sec: 317.62
:::MLLOG {"namespace": "", "time_ms": 1639081898255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081898256, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.416, Average Loss: 5.449, avg. samples / sec: 317.33
Iteration:   3120, Loss function: 5.161, Average Loss: 5.444, avg. samples / sec: 329.20
Iteration:   3140, Loss function: 5.220, Average Loss: 5.439, avg. samples / sec: 331.10
Iteration:   3160, Loss function: 5.637, Average Loss: 5.433, avg. samples / sec: 309.00
Iteration:   3180, Loss function: 4.995, Average Loss: 5.428, avg. samples / sec: 325.40
Iteration:   3200, Loss function: 5.206, Average Loss: 5.422, avg. samples / sec: 331.16
Iteration:   3220, Loss function: 5.121, Average Loss: 5.417, avg. samples / sec: 276.78
Iteration:   3240, Loss function: 5.150, Average Loss: 5.412, avg. samples / sec: 334.09
Iteration:   3260, Loss function: 4.961, Average Loss: 5.406, avg. samples / sec: 321.38
Iteration:   3280, Loss function: 4.929, Average Loss: 5.400, avg. samples / sec: 305.04
Iteration:   3300, Loss function: 4.741, Average Loss: 5.393, avg. samples / sec: 332.23
Iteration:   3320, Loss function: 4.954, Average Loss: 5.388, avg. samples / sec: 311.73
Iteration:   3340, Loss function: 5.073, Average Loss: 5.384, avg. samples / sec: 331.07
Iteration:   3360, Loss function: 5.065, Average Loss: 5.377, avg. samples / sec: 328.33
Iteration:   3380, Loss function: 5.125, Average Loss: 5.370, avg. samples / sec: 320.40
Iteration:   3400, Loss function: 4.771, Average Loss: 5.365, avg. samples / sec: 260.79
Iteration:   3420, Loss function: 5.092, Average Loss: 5.359, avg. samples / sec: 196.33
Iteration:   3440, Loss function: 4.859, Average Loss: 5.354, avg. samples / sec: 283.33
Iteration:   3460, Loss function: 5.311, Average Loss: 5.349, avg. samples / sec: 318.67
Iteration:   3480, Loss function: 5.282, Average Loss: 5.345, avg. samples / sec: 331.26
Iteration:   3500, Loss function: 5.248, Average Loss: 5.340, avg. samples / sec: 320.24
Iteration:   3520, Loss function: 5.052, Average Loss: 5.336, avg. samples / sec: 289.86
Iteration:   3540, Loss function: 5.187, Average Loss: 5.332, avg. samples / sec: 251.46
Iteration:   3560, Loss function: 4.912, Average Loss: 5.328, avg. samples / sec: 280.78
Iteration:   3580, Loss function: 5.171, Average Loss: 5.324, avg. samples / sec: 308.90
Iteration:   3600, Loss function: 5.138, Average Loss: 5.318, avg. samples / sec: 249.03
Iteration:   3620, Loss function: 4.748, Average Loss: 5.313, avg. samples / sec: 267.05
Iteration:   3640, Loss function: 4.884, Average Loss: 5.307, avg. samples / sec: 277.95
Iteration:   3660, Loss function: 5.018, Average Loss: 5.302, avg. samples / sec: 282.28
Iteration:   3680, Loss function: 5.379, Average Loss: 5.296, avg. samples / sec: 335.74
Iteration:   3700, Loss function: 5.233, Average Loss: 5.292, avg. samples / sec: 338.13
Iteration:   3720, Loss function: 4.928, Average Loss: 5.285, avg. samples / sec: 324.75
Iteration:   3740, Loss function: 5.128, Average Loss: 5.281, avg. samples / sec: 320.54
Iteration:   3760, Loss function: 5.070, Average Loss: 5.277, avg. samples / sec: 334.26
Iteration:   3780, Loss function: 5.019, Average Loss: 5.272, avg. samples / sec: 267.59
Iteration:   3800, Loss function: 5.217, Average Loss: 5.269, avg. samples / sec: 199.48
Iteration:   3820, Loss function: 5.059, Average Loss: 5.264, avg. samples / sec: 311.41
Iteration:   3840, Loss function: 4.808, Average Loss: 5.259, avg. samples / sec: 218.65
Iteration:   3860, Loss function: 4.844, Average Loss: 5.254, avg. samples / sec: 293.16
Iteration:   3880, Loss function: 4.893, Average Loss: 5.248, avg. samples / sec: 323.78
Iteration:   3900, Loss function: 5.006, Average Loss: 5.244, avg. samples / sec: 321.14
Iteration:   3920, Loss function: 5.212, Average Loss: 5.237, avg. samples / sec: 322.76
Iteration:   3940, Loss function: 4.914, Average Loss: 5.232, avg. samples / sec: 318.31
Iteration:   3960, Loss function: 4.939, Average Loss: 5.228, avg. samples / sec: 317.35
Iteration:   3980, Loss function: 4.989, Average Loss: 5.223, avg. samples / sec: 265.22
Iteration:   4000, Loss function: 5.026, Average Loss: 5.218, avg. samples / sec: 319.29
Iteration:   4020, Loss function: 5.011, Average Loss: 5.214, avg. samples / sec: 311.72
Iteration:   4040, Loss function: 5.142, Average Loss: 5.210, avg. samples / sec: 322.48
Iteration:   4060, Loss function: 5.071, Average Loss: 5.206, avg. samples / sec: 305.47
Iteration:   4080, Loss function: 5.093, Average Loss: 5.201, avg. samples / sec: 271.74
Iteration:   4100, Loss function: 5.225, Average Loss: 5.198, avg. samples / sec: 248.13
:::MLLOG {"namespace": "", "time_ms": 1639082296630, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082296632, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.880, Average Loss: 5.194, avg. samples / sec: 252.88
Iteration:   4140, Loss function: 4.973, Average Loss: 5.188, avg. samples / sec: 254.59
Iteration:   4160, Loss function: 4.845, Average Loss: 5.181, avg. samples / sec: 283.02
Iteration:   4180, Loss function: 5.160, Average Loss: 5.175, avg. samples / sec: 271.82
Iteration:   4200, Loss function: 4.817, Average Loss: 5.171, avg. samples / sec: 307.71
Iteration:   4220, Loss function: 4.990, Average Loss: 5.166, avg. samples / sec: 314.53
Iteration:   4240, Loss function: 4.907, Average Loss: 5.160, avg. samples / sec: 304.39
Iteration:   4260, Loss function: 5.122, Average Loss: 5.156, avg. samples / sec: 332.32
Iteration:   4280, Loss function: 4.967, Average Loss: 5.150, avg. samples / sec: 328.26
Iteration:   4300, Loss function: 4.849, Average Loss: 5.144, avg. samples / sec: 326.73
Iteration:   4320, Loss function: 4.743, Average Loss: 5.139, avg. samples / sec: 334.26
Iteration:   4340, Loss function: 4.881, Average Loss: 5.134, avg. samples / sec: 331.06
Iteration:   4360, Loss function: 4.807, Average Loss: 5.129, avg. samples / sec: 323.16
Iteration:   4380, Loss function: 5.068, Average Loss: 5.125, avg. samples / sec: 311.46
Iteration:   4400, Loss function: 4.851, Average Loss: 5.119, avg. samples / sec: 307.78
Iteration:   4420, Loss function: 4.764, Average Loss: 5.114, avg. samples / sec: 247.93
Iteration:   4440, Loss function: 4.789, Average Loss: 5.109, avg. samples / sec: 303.90
Iteration:   4460, Loss function: 5.174, Average Loss: 5.106, avg. samples / sec: 286.56
Iteration:   4480, Loss function: 4.995, Average Loss: 5.103, avg. samples / sec: 294.83
Iteration:   4500, Loss function: 4.831, Average Loss: 5.099, avg. samples / sec: 316.92
Iteration:   4520, Loss function: 4.792, Average Loss: 5.095, avg. samples / sec: 263.71
Iteration:   4540, Loss function: 5.041, Average Loss: 5.089, avg. samples / sec: 315.07
Iteration:   4560, Loss function: 4.836, Average Loss: 5.086, avg. samples / sec: 325.28
Iteration:   4580, Loss function: 4.750, Average Loss: 5.083, avg. samples / sec: 328.83
Iteration:   4600, Loss function: 4.964, Average Loss: 5.080, avg. samples / sec: 321.42
Iteration:   4620, Loss function: 4.733, Average Loss: 5.075, avg. samples / sec: 330.62
Iteration:   4640, Loss function: 4.785, Average Loss: 5.070, avg. samples / sec: 310.70
Iteration:   4660, Loss function: 4.739, Average Loss: 5.067, avg. samples / sec: 328.59
Iteration:   4680, Loss function: 5.220, Average Loss: 5.062, avg. samples / sec: 307.21
Iteration:   4700, Loss function: 4.776, Average Loss: 5.059, avg. samples / sec: 295.73
Iteration:   4720, Loss function: 5.032, Average Loss: 5.054, avg. samples / sec: 309.68
Iteration:   4740, Loss function: 4.847, Average Loss: 5.049, avg. samples / sec: 293.26
Iteration:   4760, Loss function: 4.582, Average Loss: 5.046, avg. samples / sec: 268.71
Iteration:   4780, Loss function: 4.954, Average Loss: 5.043, avg. samples / sec: 314.78
Iteration:   4800, Loss function: 5.009, Average Loss: 5.041, avg. samples / sec: 268.10
Iteration:   4820, Loss function: 4.597, Average Loss: 5.037, avg. samples / sec: 319.64
Iteration:   4840, Loss function: 5.046, Average Loss: 5.033, avg. samples / sec: 317.03
Iteration:   4860, Loss function: 4.764, Average Loss: 5.028, avg. samples / sec: 331.95
Iteration:   4880, Loss function: 5.245, Average Loss: 5.024, avg. samples / sec: 319.18
Iteration:   4900, Loss function: 4.581, Average Loss: 5.020, avg. samples / sec: 319.54
Iteration:   4920, Loss function: 4.882, Average Loss: 5.016, avg. samples / sec: 320.34
Iteration:   4940, Loss function: 4.872, Average Loss: 5.012, avg. samples / sec: 305.38
Iteration:   4960, Loss function: 4.659, Average Loss: 5.009, avg. samples / sec: 292.35
Iteration:   4980, Loss function: 4.513, Average Loss: 5.005, avg. samples / sec: 319.47
Iteration:   5000, Loss function: 4.854, Average Loss: 5.001, avg. samples / sec: 332.57
Iteration:   5020, Loss function: 4.914, Average Loss: 4.997, avg. samples / sec: 325.44
Iteration:   5040, Loss function: 4.782, Average Loss: 4.995, avg. samples / sec: 278.84
Iteration:   5060, Loss function: 4.662, Average Loss: 4.992, avg. samples / sec: 330.47
Iteration:   5080, Loss function: 4.431, Average Loss: 4.988, avg. samples / sec: 326.08
Iteration:   5100, Loss function: 4.712, Average Loss: 4.985, avg. samples / sec: 310.41
Iteration:   5120, Loss function: 4.705, Average Loss: 4.982, avg. samples / sec: 315.83
Iteration:   5140, Loss function: 4.943, Average Loss: 4.978, avg. samples / sec: 288.08
:::MLLOG {"namespace": "", "time_ms": 1639082679772, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 84.51 s
:::MLLOG {"namespace": "", "time_ms": 1639082764469, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082764505, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082764506, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.754, Average Loss: 4.972, avg. samples / sec: 24.50
DONE (t=10.36s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10951
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22446
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09578
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19720
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13996
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20620
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21932
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21932
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10951 AP goal: 0.10000
Iteration:   5180, Loss function: 4.797, Average Loss: 4.967, avg. samples / sec: 227.85
:::MLLOG {"namespace": "", "time_ms": 1639082781547, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082781548, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10951119844366541, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082781548, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782586, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Thu Dec  9 20:46:29 UTC 2021: done waiting for 1 executions
+ echo 'Thu Dec  9 20:46:29 UTC 2021: done waiting for 1 executions'
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080585623, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080585999, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2320498621, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2320498621
:::MLLOG {"namespace": "", "time_ms": 1639080590324, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590325, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590335, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590336, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692528, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692529, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080698744, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080698745, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080699128, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080699129, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080699130, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.328, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.210, Average Loss: 0.461, avg. samples / sec: 192.57
Iteration:     40, Loss function: 20.834, Average Loss: 0.864, avg. samples / sec: 258.32
Iteration:     60, Loss function: 20.345, Average Loss: 1.254, avg. samples / sec: 252.36
Iteration:     80, Loss function: 20.263, Average Loss: 1.630, avg. samples / sec: 240.22
Iteration:    100, Loss function: 17.003, Average Loss: 1.971, avg. samples / sec: 272.29
Iteration:    120, Loss function: 12.572, Average Loss: 2.198, avg. samples / sec: 254.81
Iteration:    140, Loss function: 9.777, Average Loss: 2.366, avg. samples / sec: 245.67
Iteration:    160, Loss function: 9.390, Average Loss: 2.509, avg. samples / sec: 260.26
Iteration:    180, Loss function: 9.104, Average Loss: 2.640, avg. samples / sec: 274.55
Iteration:    200, Loss function: 8.769, Average Loss: 2.766, avg. samples / sec: 264.10
Iteration:    220, Loss function: 8.634, Average Loss: 2.886, avg. samples / sec: 311.09
Iteration:    240, Loss function: 8.727, Average Loss: 3.003, avg. samples / sec: 284.00
Iteration:    260, Loss function: 8.759, Average Loss: 3.115, avg. samples / sec: 328.33
Iteration:    280, Loss function: 8.605, Average Loss: 3.224, avg. samples / sec: 273.03
Iteration:    300, Loss function: 8.312, Average Loss: 3.329, avg. samples / sec: 211.96
Iteration:    320, Loss function: 8.382, Average Loss: 3.429, avg. samples / sec: 286.06
Iteration:    340, Loss function: 8.354, Average Loss: 3.526, avg. samples / sec: 318.99
Iteration:    360, Loss function: 8.019, Average Loss: 3.619, avg. samples / sec: 314.30
Iteration:    380, Loss function: 7.988, Average Loss: 3.710, avg. samples / sec: 319.09
Iteration:    400, Loss function: 7.900, Average Loss: 3.796, avg. samples / sec: 317.66
Iteration:    420, Loss function: 7.710, Average Loss: 3.877, avg. samples / sec: 278.58
Iteration:    440, Loss function: 7.812, Average Loss: 3.956, avg. samples / sec: 313.21
Iteration:    460, Loss function: 7.825, Average Loss: 4.031, avg. samples / sec: 245.25
Iteration:    480, Loss function: 7.484, Average Loss: 4.105, avg. samples / sec: 227.66
Iteration:    500, Loss function: 7.470, Average Loss: 4.176, avg. samples / sec: 262.95
Iteration:    520, Loss function: 7.681, Average Loss: 4.245, avg. samples / sec: 332.95
Iteration:    540, Loss function: 7.591, Average Loss: 4.310, avg. samples / sec: 330.47
Iteration:    560, Loss function: 7.201, Average Loss: 4.372, avg. samples / sec: 329.02
Iteration:    580, Loss function: 7.350, Average Loss: 4.433, avg. samples / sec: 248.13
Iteration:    600, Loss function: 7.593, Average Loss: 4.491, avg. samples / sec: 286.44
Iteration:    620, Loss function: 7.206, Average Loss: 4.548, avg. samples / sec: 220.89
Iteration:    640, Loss function: 6.927, Average Loss: 4.603, avg. samples / sec: 317.21
Iteration:    660, Loss function: 7.201, Average Loss: 4.655, avg. samples / sec: 323.94
Iteration:    680, Loss function: 7.248, Average Loss: 4.705, avg. samples / sec: 295.83
Iteration:    700, Loss function: 6.955, Average Loss: 4.753, avg. samples / sec: 252.78
Iteration:    720, Loss function: 6.905, Average Loss: 4.799, avg. samples / sec: 315.72
Iteration:    740, Loss function: 6.839, Average Loss: 4.843, avg. samples / sec: 298.18
Iteration:    760, Loss function: 7.063, Average Loss: 4.886, avg. samples / sec: 321.54
Iteration:    780, Loss function: 6.737, Average Loss: 4.928, avg. samples / sec: 321.33
Iteration:    800, Loss function: 6.903, Average Loss: 4.966, avg. samples / sec: 337.87
Iteration:    820, Loss function: 6.792, Average Loss: 5.003, avg. samples / sec: 312.33
Iteration:    840, Loss function: 6.835, Average Loss: 5.039, avg. samples / sec: 291.99
Iteration:    860, Loss function: 6.775, Average Loss: 5.074, avg. samples / sec: 302.09
Iteration:    880, Loss function: 6.875, Average Loss: 5.106, avg. samples / sec: 326.11
Iteration:    900, Loss function: 7.012, Average Loss: 5.138, avg. samples / sec: 333.70
Iteration:    920, Loss function: 6.770, Average Loss: 5.167, avg. samples / sec: 313.86
Iteration:    940, Loss function: 6.721, Average Loss: 5.197, avg. samples / sec: 300.05
Iteration:    960, Loss function: 6.365, Average Loss: 5.225, avg. samples / sec: 318.57
Iteration:    980, Loss function: 6.457, Average Loss: 5.252, avg. samples / sec: 294.10
Iteration:   1000, Loss function: 6.562, Average Loss: 5.277, avg. samples / sec: 251.82
Iteration:   1020, Loss function: 6.501, Average Loss: 5.300, avg. samples / sec: 297.28
:::MLLOG {"namespace": "", "time_ms": 1639081115299, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081115303, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.416, Average Loss: 5.324, avg. samples / sec: 333.04
Iteration:   1060, Loss function: 6.431, Average Loss: 5.347, avg. samples / sec: 325.86
Iteration:   1080, Loss function: 6.236, Average Loss: 5.368, avg. samples / sec: 327.23
Iteration:   1100, Loss function: 6.323, Average Loss: 5.387, avg. samples / sec: 330.29
Iteration:   1120, Loss function: 6.228, Average Loss: 5.406, avg. samples / sec: 297.33
Iteration:   1140, Loss function: 6.425, Average Loss: 5.424, avg. samples / sec: 325.21
Iteration:   1160, Loss function: 6.083, Average Loss: 5.441, avg. samples / sec: 342.48
Iteration:   1180, Loss function: 6.347, Average Loss: 5.458, avg. samples / sec: 337.19
Iteration:   1200, Loss function: 6.225, Average Loss: 5.475, avg. samples / sec: 332.49
Iteration:   1220, Loss function: 6.179, Average Loss: 5.490, avg. samples / sec: 328.27
Iteration:   1240, Loss function: 6.217, Average Loss: 5.503, avg. samples / sec: 337.01
Iteration:   1260, Loss function: 6.015, Average Loss: 5.515, avg. samples / sec: 332.75
Iteration:   1280, Loss function: 5.918, Average Loss: 5.526, avg. samples / sec: 331.32
Iteration:   1300, Loss function: 6.095, Average Loss: 5.538, avg. samples / sec: 326.89
Iteration:   1320, Loss function: 5.988, Average Loss: 5.550, avg. samples / sec: 328.47
Iteration:   1340, Loss function: 5.849, Average Loss: 5.559, avg. samples / sec: 334.17
Iteration:   1360, Loss function: 6.084, Average Loss: 5.569, avg. samples / sec: 315.01
Iteration:   1380, Loss function: 6.202, Average Loss: 5.579, avg. samples / sec: 333.96
Iteration:   1400, Loss function: 6.083, Average Loss: 5.587, avg. samples / sec: 301.22
Iteration:   1420, Loss function: 5.817, Average Loss: 5.594, avg. samples / sec: 250.94
Iteration:   1440, Loss function: 6.338, Average Loss: 5.602, avg. samples / sec: 322.99
Iteration:   1460, Loss function: 6.258, Average Loss: 5.610, avg. samples / sec: 332.04
Iteration:   1480, Loss function: 5.888, Average Loss: 5.617, avg. samples / sec: 323.05
Iteration:   1500, Loss function: 6.114, Average Loss: 5.625, avg. samples / sec: 343.46
Iteration:   1520, Loss function: 5.966, Average Loss: 5.631, avg. samples / sec: 321.75
Iteration:   1540, Loss function: 5.975, Average Loss: 5.635, avg. samples / sec: 277.96
Iteration:   1560, Loss function: 5.755, Average Loss: 5.639, avg. samples / sec: 301.43
Iteration:   1580, Loss function: 5.792, Average Loss: 5.642, avg. samples / sec: 270.11
Iteration:   1600, Loss function: 6.092, Average Loss: 5.647, avg. samples / sec: 322.11
Iteration:   1620, Loss function: 5.903, Average Loss: 5.651, avg. samples / sec: 233.85
Iteration:   1640, Loss function: 6.108, Average Loss: 5.654, avg. samples / sec: 305.66
Iteration:   1660, Loss function: 5.992, Average Loss: 5.658, avg. samples / sec: 292.53
Iteration:   1680, Loss function: 5.684, Average Loss: 5.660, avg. samples / sec: 305.78
Iteration:   1700, Loss function: 5.542, Average Loss: 5.664, avg. samples / sec: 236.83
Iteration:   1720, Loss function: 5.824, Average Loss: 5.666, avg. samples / sec: 265.73
Iteration:   1740, Loss function: 5.841, Average Loss: 5.669, avg. samples / sec: 325.86
Iteration:   1760, Loss function: 5.406, Average Loss: 5.670, avg. samples / sec: 333.16
Iteration:   1780, Loss function: 5.653, Average Loss: 5.671, avg. samples / sec: 297.16
Iteration:   1800, Loss function: 5.549, Average Loss: 5.673, avg. samples / sec: 320.82
Iteration:   1820, Loss function: 5.969, Average Loss: 5.674, avg. samples / sec: 334.38
Iteration:   1840, Loss function: 5.866, Average Loss: 5.675, avg. samples / sec: 323.17
Iteration:   1860, Loss function: 5.701, Average Loss: 5.673, avg. samples / sec: 288.78
Iteration:   1880, Loss function: 5.942, Average Loss: 5.674, avg. samples / sec: 261.12
Iteration:   1900, Loss function: 5.834, Average Loss: 5.675, avg. samples / sec: 227.29
Iteration:   1920, Loss function: 5.761, Average Loss: 5.674, avg. samples / sec: 273.41
Iteration:   1940, Loss function: 5.865, Average Loss: 5.673, avg. samples / sec: 261.18
Iteration:   1960, Loss function: 5.499, Average Loss: 5.673, avg. samples / sec: 261.11
Iteration:   1980, Loss function: 5.731, Average Loss: 5.672, avg. samples / sec: 306.48
Iteration:   2000, Loss function: 5.765, Average Loss: 5.672, avg. samples / sec: 300.68
Iteration:   2020, Loss function: 5.675, Average Loss: 5.670, avg. samples / sec: 252.38
Iteration:   2040, Loss function: 5.605, Average Loss: 5.669, avg. samples / sec: 233.56
:::MLLOG {"namespace": "", "time_ms": 1639081507176, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081507178, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.305, Average Loss: 5.667, avg. samples / sec: 264.76
Iteration:   2080, Loss function: 5.061, Average Loss: 5.663, avg. samples / sec: 291.84
Iteration:   2100, Loss function: 5.379, Average Loss: 5.660, avg. samples / sec: 302.78
Iteration:   2120, Loss function: 5.560, Average Loss: 5.657, avg. samples / sec: 319.24
Iteration:   2140, Loss function: 5.360, Average Loss: 5.654, avg. samples / sec: 297.22
Iteration:   2160, Loss function: 5.461, Average Loss: 5.651, avg. samples / sec: 321.54
Iteration:   2180, Loss function: 5.449, Average Loss: 5.649, avg. samples / sec: 259.99
Iteration:   2200, Loss function: 5.497, Average Loss: 5.644, avg. samples / sec: 240.34
Iteration:   2220, Loss function: 5.583, Average Loss: 5.641, avg. samples / sec: 298.36
Iteration:   2240, Loss function: 5.406, Average Loss: 5.639, avg. samples / sec: 304.86
Iteration:   2260, Loss function: 5.341, Average Loss: 5.635, avg. samples / sec: 336.91
Iteration:   2280, Loss function: 5.199, Average Loss: 5.632, avg. samples / sec: 325.55
Iteration:   2300, Loss function: 5.131, Average Loss: 5.629, avg. samples / sec: 331.47
Iteration:   2320, Loss function: 5.341, Average Loss: 5.626, avg. samples / sec: 331.60
Iteration:   2340, Loss function: 5.387, Average Loss: 5.622, avg. samples / sec: 328.60
Iteration:   2360, Loss function: 5.341, Average Loss: 5.617, avg. samples / sec: 239.69
Iteration:   2380, Loss function: 5.239, Average Loss: 5.614, avg. samples / sec: 317.25
Iteration:   2400, Loss function: 5.507, Average Loss: 5.608, avg. samples / sec: 320.92
Iteration:   2420, Loss function: 5.704, Average Loss: 5.605, avg. samples / sec: 315.64
Iteration:   2440, Loss function: 5.431, Average Loss: 5.601, avg. samples / sec: 326.41
Iteration:   2460, Loss function: 5.097, Average Loss: 5.596, avg. samples / sec: 338.35
Iteration:   2480, Loss function: 5.379, Average Loss: 5.592, avg. samples / sec: 340.97
Iteration:   2500, Loss function: 5.355, Average Loss: 5.588, avg. samples / sec: 326.88
Iteration:   2520, Loss function: 5.517, Average Loss: 5.583, avg. samples / sec: 315.42
Iteration:   2540, Loss function: 5.494, Average Loss: 5.580, avg. samples / sec: 313.27
Iteration:   2560, Loss function: 5.366, Average Loss: 5.576, avg. samples / sec: 328.16
Iteration:   2580, Loss function: 5.090, Average Loss: 5.573, avg. samples / sec: 326.67
Iteration:   2600, Loss function: 5.433, Average Loss: 5.571, avg. samples / sec: 332.24
Iteration:   2620, Loss function: 5.554, Average Loss: 5.566, avg. samples / sec: 341.99
Iteration:   2640, Loss function: 5.270, Average Loss: 5.563, avg. samples / sec: 252.50
Iteration:   2660, Loss function: 5.073, Average Loss: 5.558, avg. samples / sec: 286.49
Iteration:   2680, Loss function: 5.098, Average Loss: 5.554, avg. samples / sec: 297.26
Iteration:   2700, Loss function: 5.193, Average Loss: 5.549, avg. samples / sec: 324.71
Iteration:   2720, Loss function: 5.383, Average Loss: 5.545, avg. samples / sec: 319.11
Iteration:   2740, Loss function: 4.898, Average Loss: 5.540, avg. samples / sec: 330.44
Iteration:   2760, Loss function: 5.141, Average Loss: 5.535, avg. samples / sec: 327.78
Iteration:   2780, Loss function: 5.495, Average Loss: 5.530, avg. samples / sec: 272.66
Iteration:   2800, Loss function: 5.206, Average Loss: 5.525, avg. samples / sec: 218.15
Iteration:   2820, Loss function: 5.359, Average Loss: 5.521, avg. samples / sec: 235.75
Iteration:   2840, Loss function: 5.190, Average Loss: 5.517, avg. samples / sec: 310.00
Iteration:   2860, Loss function: 5.105, Average Loss: 5.512, avg. samples / sec: 308.57
Iteration:   2880, Loss function: 5.166, Average Loss: 5.507, avg. samples / sec: 303.57
Iteration:   2900, Loss function: 5.056, Average Loss: 5.502, avg. samples / sec: 331.58
Iteration:   2920, Loss function: 5.276, Average Loss: 5.497, avg. samples / sec: 265.42
Iteration:   2940, Loss function: 5.192, Average Loss: 5.492, avg. samples / sec: 259.23
Iteration:   2960, Loss function: 5.405, Average Loss: 5.488, avg. samples / sec: 280.29
Iteration:   2980, Loss function: 5.073, Average Loss: 5.484, avg. samples / sec: 323.83
Iteration:   3000, Loss function: 5.330, Average Loss: 5.478, avg. samples / sec: 332.46
Iteration:   3020, Loss function: 5.401, Average Loss: 5.472, avg. samples / sec: 234.96
Iteration:   3040, Loss function: 5.155, Average Loss: 5.466, avg. samples / sec: 317.84
Iteration:   3060, Loss function: 5.074, Average Loss: 5.460, avg. samples / sec: 257.02
Iteration:   3080, Loss function: 5.039, Average Loss: 5.455, avg. samples / sec: 317.62
:::MLLOG {"namespace": "", "time_ms": 1639081898255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081898256, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.416, Average Loss: 5.449, avg. samples / sec: 317.33
Iteration:   3120, Loss function: 5.161, Average Loss: 5.444, avg. samples / sec: 329.20
Iteration:   3140, Loss function: 5.220, Average Loss: 5.439, avg. samples / sec: 331.10
Iteration:   3160, Loss function: 5.637, Average Loss: 5.433, avg. samples / sec: 309.00
Iteration:   3180, Loss function: 4.995, Average Loss: 5.428, avg. samples / sec: 325.40
Iteration:   3200, Loss function: 5.206, Average Loss: 5.422, avg. samples / sec: 331.16
Iteration:   3220, Loss function: 5.121, Average Loss: 5.417, avg. samples / sec: 276.78
Iteration:   3240, Loss function: 5.150, Average Loss: 5.412, avg. samples / sec: 334.09
Iteration:   3260, Loss function: 4.961, Average Loss: 5.406, avg. samples / sec: 321.38
Iteration:   3280, Loss function: 4.929, Average Loss: 5.400, avg. samples / sec: 305.04
Iteration:   3300, Loss function: 4.741, Average Loss: 5.393, avg. samples / sec: 332.23
Iteration:   3320, Loss function: 4.954, Average Loss: 5.388, avg. samples / sec: 311.73
Iteration:   3340, Loss function: 5.073, Average Loss: 5.384, avg. samples / sec: 331.07
Iteration:   3360, Loss function: 5.065, Average Loss: 5.377, avg. samples / sec: 328.33
Iteration:   3380, Loss function: 5.125, Average Loss: 5.370, avg. samples / sec: 320.40
Iteration:   3400, Loss function: 4.771, Average Loss: 5.365, avg. samples / sec: 260.79
Iteration:   3420, Loss function: 5.092, Average Loss: 5.359, avg. samples / sec: 196.33
Iteration:   3440, Loss function: 4.859, Average Loss: 5.354, avg. samples / sec: 283.33
Iteration:   3460, Loss function: 5.311, Average Loss: 5.349, avg. samples / sec: 318.67
Iteration:   3480, Loss function: 5.282, Average Loss: 5.345, avg. samples / sec: 331.26
Iteration:   3500, Loss function: 5.248, Average Loss: 5.340, avg. samples / sec: 320.24
Iteration:   3520, Loss function: 5.052, Average Loss: 5.336, avg. samples / sec: 289.86
Iteration:   3540, Loss function: 5.187, Average Loss: 5.332, avg. samples / sec: 251.46
Iteration:   3560, Loss function: 4.912, Average Loss: 5.328, avg. samples / sec: 280.78
Iteration:   3580, Loss function: 5.171, Average Loss: 5.324, avg. samples / sec: 308.90
Iteration:   3600, Loss function: 5.138, Average Loss: 5.318, avg. samples / sec: 249.03
Iteration:   3620, Loss function: 4.748, Average Loss: 5.313, avg. samples / sec: 267.05
Iteration:   3640, Loss function: 4.884, Average Loss: 5.307, avg. samples / sec: 277.95
Iteration:   3660, Loss function: 5.018, Average Loss: 5.302, avg. samples / sec: 282.28
Iteration:   3680, Loss function: 5.379, Average Loss: 5.296, avg. samples / sec: 335.74
Iteration:   3700, Loss function: 5.233, Average Loss: 5.292, avg. samples / sec: 338.13
Iteration:   3720, Loss function: 4.928, Average Loss: 5.285, avg. samples / sec: 324.75
Iteration:   3740, Loss function: 5.128, Average Loss: 5.281, avg. samples / sec: 320.54
Iteration:   3760, Loss function: 5.070, Average Loss: 5.277, avg. samples / sec: 334.26
Iteration:   3780, Loss function: 5.019, Average Loss: 5.272, avg. samples / sec: 267.59
Iteration:   3800, Loss function: 5.217, Average Loss: 5.269, avg. samples / sec: 199.48
Iteration:   3820, Loss function: 5.059, Average Loss: 5.264, avg. samples / sec: 311.41
Iteration:   3840, Loss function: 4.808, Average Loss: 5.259, avg. samples / sec: 218.65
Iteration:   3860, Loss function: 4.844, Average Loss: 5.254, avg. samples / sec: 293.16
Iteration:   3880, Loss function: 4.893, Average Loss: 5.248, avg. samples / sec: 323.78
Iteration:   3900, Loss function: 5.006, Average Loss: 5.244, avg. samples / sec: 321.14
Iteration:   3920, Loss function: 5.212, Average Loss: 5.237, avg. samples / sec: 322.76
Iteration:   3940, Loss function: 4.914, Average Loss: 5.232, avg. samples / sec: 318.31
Iteration:   3960, Loss function: 4.939, Average Loss: 5.228, avg. samples / sec: 317.35
Iteration:   3980, Loss function: 4.989, Average Loss: 5.223, avg. samples / sec: 265.22
Iteration:   4000, Loss function: 5.026, Average Loss: 5.218, avg. samples / sec: 319.29
Iteration:   4020, Loss function: 5.011, Average Loss: 5.214, avg. samples / sec: 311.72
Iteration:   4040, Loss function: 5.142, Average Loss: 5.210, avg. samples / sec: 322.48
Iteration:   4060, Loss function: 5.071, Average Loss: 5.206, avg. samples / sec: 305.47
Iteration:   4080, Loss function: 5.093, Average Loss: 5.201, avg. samples / sec: 271.74
Iteration:   4100, Loss function: 5.225, Average Loss: 5.198, avg. samples / sec: 248.13
:::MLLOG {"namespace": "", "time_ms": 1639082296630, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082296632, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.880, Average Loss: 5.194, avg. samples / sec: 252.88
Iteration:   4140, Loss function: 4.973, Average Loss: 5.188, avg. samples / sec: 254.59
Iteration:   4160, Loss function: 4.845, Average Loss: 5.181, avg. samples / sec: 283.02
Iteration:   4180, Loss function: 5.160, Average Loss: 5.175, avg. samples / sec: 271.82
Iteration:   4200, Loss function: 4.817, Average Loss: 5.171, avg. samples / sec: 307.71
Iteration:   4220, Loss function: 4.990, Average Loss: 5.166, avg. samples / sec: 314.53
Iteration:   4240, Loss function: 4.907, Average Loss: 5.160, avg. samples / sec: 304.39
Iteration:   4260, Loss function: 5.122, Average Loss: 5.156, avg. samples / sec: 332.32
Iteration:   4280, Loss function: 4.967, Average Loss: 5.150, avg. samples / sec: 328.26
Iteration:   4300, Loss function: 4.849, Average Loss: 5.144, avg. samples / sec: 326.73
Iteration:   4320, Loss function: 4.743, Average Loss: 5.139, avg. samples / sec: 334.26
Iteration:   4340, Loss function: 4.881, Average Loss: 5.134, avg. samples / sec: 331.06
Iteration:   4360, Loss function: 4.807, Average Loss: 5.129, avg. samples / sec: 323.16
Iteration:   4380, Loss function: 5.068, Average Loss: 5.125, avg. samples / sec: 311.46
Iteration:   4400, Loss function: 4.851, Average Loss: 5.119, avg. samples / sec: 307.78
Iteration:   4420, Loss function: 4.764, Average Loss: 5.114, avg. samples / sec: 247.93
Iteration:   4440, Loss function: 4.789, Average Loss: 5.109, avg. samples / sec: 303.90
Iteration:   4460, Loss function: 5.174, Average Loss: 5.106, avg. samples / sec: 286.56
Iteration:   4480, Loss function: 4.995, Average Loss: 5.103, avg. samples / sec: 294.83
Iteration:   4500, Loss function: 4.831, Average Loss: 5.099, avg. samples / sec: 316.92
Iteration:   4520, Loss function: 4.792, Average Loss: 5.095, avg. samples / sec: 263.71
Iteration:   4540, Loss function: 5.041, Average Loss: 5.089, avg. samples / sec: 315.07
Iteration:   4560, Loss function: 4.836, Average Loss: 5.086, avg. samples / sec: 325.28
Iteration:   4580, Loss function: 4.750, Average Loss: 5.083, avg. samples / sec: 328.83
Iteration:   4600, Loss function: 4.964, Average Loss: 5.080, avg. samples / sec: 321.42
Iteration:   4620, Loss function: 4.733, Average Loss: 5.075, avg. samples / sec: 330.62
Iteration:   4640, Loss function: 4.785, Average Loss: 5.070, avg. samples / sec: 310.70
Iteration:   4660, Loss function: 4.739, Average Loss: 5.067, avg. samples / sec: 328.59
Iteration:   4680, Loss function: 5.220, Average Loss: 5.062, avg. samples / sec: 307.21
Iteration:   4700, Loss function: 4.776, Average Loss: 5.059, avg. samples / sec: 295.73
Iteration:   4720, Loss function: 5.032, Average Loss: 5.054, avg. samples / sec: 309.68
Iteration:   4740, Loss function: 4.847, Average Loss: 5.049, avg. samples / sec: 293.26
Iteration:   4760, Loss function: 4.582, Average Loss: 5.046, avg. samples / sec: 268.71
Iteration:   4780, Loss function: 4.954, Average Loss: 5.043, avg. samples / sec: 314.78
Iteration:   4800, Loss function: 5.009, Average Loss: 5.041, avg. samples / sec: 268.10
Iteration:   4820, Loss function: 4.597, Average Loss: 5.037, avg. samples / sec: 319.64
Iteration:   4840, Loss function: 5.046, Average Loss: 5.033, avg. samples / sec: 317.03
Iteration:   4860, Loss function: 4.764, Average Loss: 5.028, avg. samples / sec: 331.95
Iteration:   4880, Loss function: 5.245, Average Loss: 5.024, avg. samples / sec: 319.18
Iteration:   4900, Loss function: 4.581, Average Loss: 5.020, avg. samples / sec: 319.54
Iteration:   4920, Loss function: 4.882, Average Loss: 5.016, avg. samples / sec: 320.34
Iteration:   4940, Loss function: 4.872, Average Loss: 5.012, avg. samples / sec: 305.38
Iteration:   4960, Loss function: 4.659, Average Loss: 5.009, avg. samples / sec: 292.35
Iteration:   4980, Loss function: 4.513, Average Loss: 5.005, avg. samples / sec: 319.47
Iteration:   5000, Loss function: 4.854, Average Loss: 5.001, avg. samples / sec: 332.57
Iteration:   5020, Loss function: 4.914, Average Loss: 4.997, avg. samples / sec: 325.44
Iteration:   5040, Loss function: 4.782, Average Loss: 4.995, avg. samples / sec: 278.84
Iteration:   5060, Loss function: 4.662, Average Loss: 4.992, avg. samples / sec: 330.47
Iteration:   5080, Loss function: 4.431, Average Loss: 4.988, avg. samples / sec: 326.08
Iteration:   5100, Loss function: 4.712, Average Loss: 4.985, avg. samples / sec: 310.41
Iteration:   5120, Loss function: 4.705, Average Loss: 4.982, avg. samples / sec: 315.83
Iteration:   5140, Loss function: 4.943, Average Loss: 4.978, avg. samples / sec: 288.08
:::MLLOG {"namespace": "", "time_ms": 1639082679772, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 84.51 s
:::MLLOG {"namespace": "", "time_ms": 1639082764469, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082764505, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082764506, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.754, Average Loss: 4.972, avg. samples / sec: 24.50
DONE (t=10.36s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10951
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22446
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09578
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19720
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13996
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20620
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21932
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21932
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10951 AP goal: 0.10000
Iteration:   5180, Loss function: 4.797, Average Loss: 4.967, avg. samples / sec: 227.85
:::MLLOG {"namespace": "", "time_ms": 1639082781547, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082781548, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10951119844366541, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082781548, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782586, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082789
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:29 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:46:29 PM
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:29 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-89d05d6f-212a-5e57-8253-60f252e63667)
+ result=2212
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2212,nvidia,2021-12-09 08:09:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2212,nvidia,2021-12-09 08:09:37 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
