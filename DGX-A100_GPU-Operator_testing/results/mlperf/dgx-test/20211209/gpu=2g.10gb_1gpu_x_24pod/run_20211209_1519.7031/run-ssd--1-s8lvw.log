+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-s8lvw.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-s8lvw.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-s8lvw.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95
+ MIG_MODE=1
Found 1 MIG instances: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080573
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:33 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:33 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-s8lvw to the sync file ...
run-ssd--1-s8lvw Found 7 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
Thu Dec  9 20:09:38 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580567, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580732, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2078833810, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2078833810
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080583093, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080583093, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080583097, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687576, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687576, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080689317, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689319, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689613, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689614, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689615, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.529, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.003, Average Loss: 0.452, avg. samples / sec: 302.34
Iteration:     40, Loss function: 20.663, Average Loss: 0.853, avg. samples / sec: 297.65
Iteration:     60, Loss function: 20.438, Average Loss: 1.243, avg. samples / sec: 256.97
Iteration:     80, Loss function: 19.730, Average Loss: 1.615, avg. samples / sec: 271.49
Iteration:    100, Loss function: 14.527, Average Loss: 1.930, avg. samples / sec: 281.20
Iteration:    120, Loss function: 10.664, Average Loss: 2.129, avg. samples / sec: 256.07
Iteration:    140, Loss function: 9.494, Average Loss: 2.281, avg. samples / sec: 264.16
Iteration:    160, Loss function: 9.109, Average Loss: 2.419, avg. samples / sec: 260.43
Iteration:    180, Loss function: 8.818, Average Loss: 2.548, avg. samples / sec: 250.52
Iteration:    200, Loss function: 8.550, Average Loss: 2.672, avg. samples / sec: 280.18
Iteration:    220, Loss function: 8.523, Average Loss: 2.793, avg. samples / sec: 292.00
Iteration:    240, Loss function: 8.469, Average Loss: 2.910, avg. samples / sec: 280.04
Iteration:    260, Loss function: 8.983, Average Loss: 3.026, avg. samples / sec: 312.52
Iteration:    280, Loss function: 8.950, Average Loss: 3.143, avg. samples / sec: 256.57
Iteration:    300, Loss function: 8.500, Average Loss: 3.251, avg. samples / sec: 333.59
Iteration:    320, Loss function: 8.236, Average Loss: 3.353, avg. samples / sec: 298.78
Iteration:    340, Loss function: 8.289, Average Loss: 3.451, avg. samples / sec: 255.53
Iteration:    360, Loss function: 8.142, Average Loss: 3.545, avg. samples / sec: 301.97
Iteration:    380, Loss function: 7.997, Average Loss: 3.636, avg. samples / sec: 309.82
Iteration:    400, Loss function: 8.022, Average Loss: 3.723, avg. samples / sec: 291.18
Iteration:    420, Loss function: 7.725, Average Loss: 3.807, avg. samples / sec: 307.14
Iteration:    440, Loss function: 7.908, Average Loss: 3.887, avg. samples / sec: 323.19
Iteration:    460, Loss function: 7.819, Average Loss: 3.966, avg. samples / sec: 318.70
Iteration:    480, Loss function: 7.587, Average Loss: 4.041, avg. samples / sec: 293.56
Iteration:    500, Loss function: 7.547, Average Loss: 4.112, avg. samples / sec: 307.81
Iteration:    520, Loss function: 7.606, Average Loss: 4.181, avg. samples / sec: 297.17
Iteration:    540, Loss function: 7.583, Average Loss: 4.249, avg. samples / sec: 229.80
Iteration:    560, Loss function: 7.310, Average Loss: 4.313, avg. samples / sec: 311.48
Iteration:    580, Loss function: 7.402, Average Loss: 4.376, avg. samples / sec: 310.55
Iteration:    600, Loss function: 7.511, Average Loss: 4.437, avg. samples / sec: 331.13
Iteration:    620, Loss function: 7.173, Average Loss: 4.494, avg. samples / sec: 317.53
Iteration:    640, Loss function: 6.996, Average Loss: 4.550, avg. samples / sec: 231.60
Iteration:    660, Loss function: 7.129, Average Loss: 4.604, avg. samples / sec: 243.85
Iteration:    680, Loss function: 7.248, Average Loss: 4.656, avg. samples / sec: 280.45
Iteration:    700, Loss function: 6.824, Average Loss: 4.703, avg. samples / sec: 225.64
Iteration:    720, Loss function: 7.019, Average Loss: 4.752, avg. samples / sec: 317.12
Iteration:    740, Loss function: 7.029, Average Loss: 4.797, avg. samples / sec: 322.06
Iteration:    760, Loss function: 7.170, Average Loss: 4.841, avg. samples / sec: 329.03
Iteration:    780, Loss function: 6.827, Average Loss: 4.883, avg. samples / sec: 331.02
Iteration:    800, Loss function: 7.184, Average Loss: 4.923, avg. samples / sec: 334.39
Iteration:    820, Loss function: 6.746, Average Loss: 4.961, avg. samples / sec: 322.53
Iteration:    840, Loss function: 6.932, Average Loss: 4.997, avg. samples / sec: 310.23
Iteration:    860, Loss function: 6.830, Average Loss: 5.031, avg. samples / sec: 338.82
Iteration:    880, Loss function: 6.605, Average Loss: 5.064, avg. samples / sec: 286.23
Iteration:    900, Loss function: 6.848, Average Loss: 5.096, avg. samples / sec: 277.00
Iteration:    920, Loss function: 6.438, Average Loss: 5.125, avg. samples / sec: 295.96
Iteration:    940, Loss function: 6.826, Average Loss: 5.155, avg. samples / sec: 311.83
Iteration:    960, Loss function: 6.609, Average Loss: 5.184, avg. samples / sec: 324.21
Iteration:    980, Loss function: 6.535, Average Loss: 5.212, avg. samples / sec: 319.30
Iteration:   1000, Loss function: 6.706, Average Loss: 5.238, avg. samples / sec: 277.84
Iteration:   1020, Loss function: 6.351, Average Loss: 5.262, avg. samples / sec: 264.49
:::MLLOG {"namespace": "", "time_ms": 1639081094111, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081094113, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.544, Average Loss: 5.286, avg. samples / sec: 309.92
Iteration:   1060, Loss function: 6.479, Average Loss: 5.309, avg. samples / sec: 305.65
Iteration:   1080, Loss function: 6.363, Average Loss: 5.331, avg. samples / sec: 330.44
Iteration:   1100, Loss function: 6.144, Average Loss: 5.351, avg. samples / sec: 334.71
Iteration:   1120, Loss function: 6.287, Average Loss: 5.370, avg. samples / sec: 295.62
Iteration:   1140, Loss function: 6.467, Average Loss: 5.390, avg. samples / sec: 312.31
Iteration:   1160, Loss function: 6.162, Average Loss: 5.407, avg. samples / sec: 284.57
Iteration:   1180, Loss function: 6.252, Average Loss: 5.425, avg. samples / sec: 319.91
Iteration:   1200, Loss function: 6.277, Average Loss: 5.441, avg. samples / sec: 240.75
Iteration:   1220, Loss function: 6.068, Average Loss: 5.456, avg. samples / sec: 242.78
Iteration:   1240, Loss function: 6.165, Average Loss: 5.470, avg. samples / sec: 237.71
Iteration:   1260, Loss function: 6.051, Average Loss: 5.482, avg. samples / sec: 302.76
Iteration:   1280, Loss function: 5.953, Average Loss: 5.494, avg. samples / sec: 324.17
Iteration:   1300, Loss function: 6.188, Average Loss: 5.508, avg. samples / sec: 314.67
Iteration:   1320, Loss function: 6.004, Average Loss: 5.519, avg. samples / sec: 325.55
Iteration:   1340, Loss function: 5.931, Average Loss: 5.529, avg. samples / sec: 323.44
Iteration:   1360, Loss function: 5.910, Average Loss: 5.539, avg. samples / sec: 304.47
Iteration:   1380, Loss function: 6.165, Average Loss: 5.548, avg. samples / sec: 310.40
Iteration:   1400, Loss function: 6.100, Average Loss: 5.556, avg. samples / sec: 309.89
Iteration:   1420, Loss function: 5.724, Average Loss: 5.564, avg. samples / sec: 291.68
Iteration:   1440, Loss function: 6.309, Average Loss: 5.572, avg. samples / sec: 308.44
Iteration:   1460, Loss function: 5.815, Average Loss: 5.580, avg. samples / sec: 315.68
Iteration:   1480, Loss function: 5.820, Average Loss: 5.587, avg. samples / sec: 323.79
Iteration:   1500, Loss function: 6.025, Average Loss: 5.596, avg. samples / sec: 329.89
Iteration:   1520, Loss function: 5.926, Average Loss: 5.602, avg. samples / sec: 332.82
Iteration:   1540, Loss function: 6.176, Average Loss: 5.606, avg. samples / sec: 326.58
Iteration:   1560, Loss function: 5.776, Average Loss: 5.611, avg. samples / sec: 274.35
Iteration:   1580, Loss function: 5.478, Average Loss: 5.617, avg. samples / sec: 313.49
Iteration:   1600, Loss function: 6.025, Average Loss: 5.622, avg. samples / sec: 293.71
Iteration:   1620, Loss function: 5.618, Average Loss: 5.628, avg. samples / sec: 216.55
Iteration:   1640, Loss function: 5.943, Average Loss: 5.631, avg. samples / sec: 313.52
Iteration:   1660, Loss function: 5.770, Average Loss: 5.635, avg. samples / sec: 289.34
Iteration:   1680, Loss function: 5.726, Average Loss: 5.638, avg. samples / sec: 280.17
Iteration:   1700, Loss function: 5.383, Average Loss: 5.642, avg. samples / sec: 296.79
Iteration:   1720, Loss function: 5.728, Average Loss: 5.644, avg. samples / sec: 338.77
Iteration:   1740, Loss function: 5.915, Average Loss: 5.647, avg. samples / sec: 267.10
Iteration:   1760, Loss function: 5.486, Average Loss: 5.648, avg. samples / sec: 306.15
Iteration:   1780, Loss function: 5.612, Average Loss: 5.649, avg. samples / sec: 308.19
Iteration:   1800, Loss function: 5.461, Average Loss: 5.652, avg. samples / sec: 306.94
Iteration:   1820, Loss function: 5.914, Average Loss: 5.652, avg. samples / sec: 321.94
Iteration:   1840, Loss function: 5.932, Average Loss: 5.653, avg. samples / sec: 333.91
Iteration:   1860, Loss function: 5.652, Average Loss: 5.653, avg. samples / sec: 332.04
Iteration:   1880, Loss function: 6.016, Average Loss: 5.654, avg. samples / sec: 317.58
Iteration:   1900, Loss function: 5.808, Average Loss: 5.656, avg. samples / sec: 334.72
Iteration:   1920, Loss function: 5.798, Average Loss: 5.656, avg. samples / sec: 341.49
Iteration:   1940, Loss function: 6.083, Average Loss: 5.656, avg. samples / sec: 326.10
Iteration:   1960, Loss function: 5.420, Average Loss: 5.655, avg. samples / sec: 282.05
Iteration:   1980, Loss function: 5.779, Average Loss: 5.654, avg. samples / sec: 320.33
Iteration:   2000, Loss function: 5.696, Average Loss: 5.654, avg. samples / sec: 314.47
Iteration:   2020, Loss function: 5.470, Average Loss: 5.652, avg. samples / sec: 333.64
Iteration:   2040, Loss function: 5.603, Average Loss: 5.651, avg. samples / sec: 266.46
:::MLLOG {"namespace": "", "time_ms": 1639081481288, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081481290, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.524, Average Loss: 5.649, avg. samples / sec: 311.38
Iteration:   2080, Loss function: 5.094, Average Loss: 5.646, avg. samples / sec: 327.93
Iteration:   2100, Loss function: 5.412, Average Loss: 5.643, avg. samples / sec: 338.97
Iteration:   2120, Loss function: 5.403, Average Loss: 5.640, avg. samples / sec: 331.83
Iteration:   2140, Loss function: 5.421, Average Loss: 5.636, avg. samples / sec: 320.82
Iteration:   2160, Loss function: 5.644, Average Loss: 5.635, avg. samples / sec: 262.65
Iteration:   2180, Loss function: 5.504, Average Loss: 5.632, avg. samples / sec: 310.73
Iteration:   2200, Loss function: 5.617, Average Loss: 5.629, avg. samples / sec: 275.87
Iteration:   2220, Loss function: 5.593, Average Loss: 5.626, avg. samples / sec: 326.37
Iteration:   2240, Loss function: 5.555, Average Loss: 5.625, avg. samples / sec: 311.20
Iteration:   2260, Loss function: 5.271, Average Loss: 5.621, avg. samples / sec: 315.84
Iteration:   2280, Loss function: 5.311, Average Loss: 5.618, avg. samples / sec: 335.64
Iteration:   2300, Loss function: 5.085, Average Loss: 5.615, avg. samples / sec: 297.09
Iteration:   2320, Loss function: 5.219, Average Loss: 5.612, avg. samples / sec: 266.08
Iteration:   2340, Loss function: 5.472, Average Loss: 5.608, avg. samples / sec: 293.54
Iteration:   2360, Loss function: 5.370, Average Loss: 5.604, avg. samples / sec: 291.49
Iteration:   2380, Loss function: 5.356, Average Loss: 5.600, avg. samples / sec: 332.21
Iteration:   2400, Loss function: 5.647, Average Loss: 5.596, avg. samples / sec: 324.70
Iteration:   2420, Loss function: 5.368, Average Loss: 5.591, avg. samples / sec: 321.36
Iteration:   2440, Loss function: 5.281, Average Loss: 5.588, avg. samples / sec: 288.60
Iteration:   2460, Loss function: 5.047, Average Loss: 5.584, avg. samples / sec: 234.73
Iteration:   2480, Loss function: 5.430, Average Loss: 5.581, avg. samples / sec: 297.99
Iteration:   2500, Loss function: 5.433, Average Loss: 5.578, avg. samples / sec: 320.61
Iteration:   2520, Loss function: 5.406, Average Loss: 5.573, avg. samples / sec: 308.34
Iteration:   2540, Loss function: 5.344, Average Loss: 5.570, avg. samples / sec: 245.25
Iteration:   2560, Loss function: 5.342, Average Loss: 5.566, avg. samples / sec: 235.73
Iteration:   2580, Loss function: 5.298, Average Loss: 5.562, avg. samples / sec: 306.45
Iteration:   2600, Loss function: 5.447, Average Loss: 5.559, avg. samples / sec: 304.30
Iteration:   2620, Loss function: 5.457, Average Loss: 5.554, avg. samples / sec: 307.27
Iteration:   2640, Loss function: 5.067, Average Loss: 5.551, avg. samples / sec: 304.57
Iteration:   2660, Loss function: 5.042, Average Loss: 5.547, avg. samples / sec: 324.82
Iteration:   2680, Loss function: 5.274, Average Loss: 5.543, avg. samples / sec: 297.94
Iteration:   2700, Loss function: 5.136, Average Loss: 5.537, avg. samples / sec: 320.49
Iteration:   2720, Loss function: 5.313, Average Loss: 5.533, avg. samples / sec: 328.82
Iteration:   2740, Loss function: 5.104, Average Loss: 5.529, avg. samples / sec: 316.87
Iteration:   2760, Loss function: 4.843, Average Loss: 5.524, avg. samples / sec: 319.30
Iteration:   2780, Loss function: 5.556, Average Loss: 5.519, avg. samples / sec: 276.78
Iteration:   2800, Loss function: 5.116, Average Loss: 5.514, avg. samples / sec: 307.20
Iteration:   2820, Loss function: 5.489, Average Loss: 5.510, avg. samples / sec: 258.87
Iteration:   2840, Loss function: 4.962, Average Loss: 5.504, avg. samples / sec: 275.51
Iteration:   2860, Loss function: 5.127, Average Loss: 5.500, avg. samples / sec: 273.54
Iteration:   2880, Loss function: 5.354, Average Loss: 5.495, avg. samples / sec: 265.05
Iteration:   2900, Loss function: 5.081, Average Loss: 5.491, avg. samples / sec: 302.06
Iteration:   2920, Loss function: 5.242, Average Loss: 5.486, avg. samples / sec: 330.17
Iteration:   2940, Loss function: 4.978, Average Loss: 5.483, avg. samples / sec: 332.15
Iteration:   2960, Loss function: 5.460, Average Loss: 5.479, avg. samples / sec: 332.48
Iteration:   2980, Loss function: 5.204, Average Loss: 5.475, avg. samples / sec: 318.80
Iteration:   3000, Loss function: 5.256, Average Loss: 5.469, avg. samples / sec: 319.87
Iteration:   3020, Loss function: 5.360, Average Loss: 5.463, avg. samples / sec: 222.26
Iteration:   3040, Loss function: 5.213, Average Loss: 5.458, avg. samples / sec: 297.35
Iteration:   3060, Loss function: 5.184, Average Loss: 5.452, avg. samples / sec: 279.07
Iteration:   3080, Loss function: 4.932, Average Loss: 5.446, avg. samples / sec: 314.74
:::MLLOG {"namespace": "", "time_ms": 1639081874518, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081874534, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.255, Average Loss: 5.441, avg. samples / sec: 291.85
Iteration:   3120, Loss function: 4.925, Average Loss: 5.435, avg. samples / sec: 292.03
Iteration:   3140, Loss function: 5.106, Average Loss: 5.429, avg. samples / sec: 303.38
Iteration:   3160, Loss function: 5.452, Average Loss: 5.423, avg. samples / sec: 313.73
Iteration:   3180, Loss function: 4.865, Average Loss: 5.418, avg. samples / sec: 326.77
Iteration:   3200, Loss function: 5.274, Average Loss: 5.413, avg. samples / sec: 281.47
Iteration:   3220, Loss function: 5.277, Average Loss: 5.408, avg. samples / sec: 249.08
Iteration:   3240, Loss function: 5.074, Average Loss: 5.402, avg. samples / sec: 282.15
Iteration:   3260, Loss function: 5.205, Average Loss: 5.397, avg. samples / sec: 317.60
Iteration:   3280, Loss function: 4.800, Average Loss: 5.391, avg. samples / sec: 322.49
Iteration:   3300, Loss function: 4.890, Average Loss: 5.385, avg. samples / sec: 287.78
Iteration:   3320, Loss function: 4.946, Average Loss: 5.381, avg. samples / sec: 324.64
Iteration:   3340, Loss function: 5.316, Average Loss: 5.378, avg. samples / sec: 312.30
Iteration:   3360, Loss function: 5.205, Average Loss: 5.371, avg. samples / sec: 328.39
Iteration:   3380, Loss function: 5.357, Average Loss: 5.364, avg. samples / sec: 314.25
Iteration:   3400, Loss function: 4.777, Average Loss: 5.359, avg. samples / sec: 331.68
Iteration:   3420, Loss function: 5.177, Average Loss: 5.354, avg. samples / sec: 326.01
Iteration:   3440, Loss function: 4.908, Average Loss: 5.349, avg. samples / sec: 279.45
Iteration:   3460, Loss function: 5.144, Average Loss: 5.344, avg. samples / sec: 312.95
Iteration:   3480, Loss function: 5.077, Average Loss: 5.339, avg. samples / sec: 265.58
Iteration:   3500, Loss function: 5.222, Average Loss: 5.334, avg. samples / sec: 285.65
Iteration:   3520, Loss function: 4.900, Average Loss: 5.329, avg. samples / sec: 314.97
Iteration:   3540, Loss function: 4.968, Average Loss: 5.324, avg. samples / sec: 330.08
Iteration:   3560, Loss function: 4.919, Average Loss: 5.321, avg. samples / sec: 323.86
Iteration:   3580, Loss function: 5.082, Average Loss: 5.317, avg. samples / sec: 265.01
Iteration:   3600, Loss function: 5.167, Average Loss: 5.311, avg. samples / sec: 246.15
Iteration:   3620, Loss function: 5.041, Average Loss: 5.307, avg. samples / sec: 284.81
Iteration:   3640, Loss function: 4.826, Average Loss: 5.301, avg. samples / sec: 306.13
Iteration:   3660, Loss function: 5.024, Average Loss: 5.295, avg. samples / sec: 332.14
Iteration:   3680, Loss function: 5.160, Average Loss: 5.290, avg. samples / sec: 278.04
Iteration:   3700, Loss function: 5.099, Average Loss: 5.285, avg. samples / sec: 304.82
Iteration:   3720, Loss function: 5.066, Average Loss: 5.278, avg. samples / sec: 272.11
Iteration:   3740, Loss function: 5.178, Average Loss: 5.274, avg. samples / sec: 194.26
Iteration:   3760, Loss function: 5.011, Average Loss: 5.269, avg. samples / sec: 189.67
Iteration:   3780, Loss function: 4.838, Average Loss: 5.265, avg. samples / sec: 193.98
Iteration:   3800, Loss function: 5.181, Average Loss: 5.262, avg. samples / sec: 169.81
Iteration:   3820, Loss function: 5.197, Average Loss: 5.257, avg. samples / sec: 314.30
Iteration:   3840, Loss function: 4.804, Average Loss: 5.253, avg. samples / sec: 335.03
Iteration:   3860, Loss function: 4.917, Average Loss: 5.248, avg. samples / sec: 337.82
Iteration:   3880, Loss function: 5.073, Average Loss: 5.242, avg. samples / sec: 305.58
Iteration:   3900, Loss function: 4.967, Average Loss: 5.238, avg. samples / sec: 323.93
Iteration:   3920, Loss function: 5.116, Average Loss: 5.232, avg. samples / sec: 324.38
Iteration:   3940, Loss function: 4.972, Average Loss: 5.227, avg. samples / sec: 320.17
Iteration:   3960, Loss function: 4.890, Average Loss: 5.223, avg. samples / sec: 277.55
Iteration:   3980, Loss function: 4.981, Average Loss: 5.218, avg. samples / sec: 293.41
Iteration:   4000, Loss function: 5.263, Average Loss: 5.214, avg. samples / sec: 277.90
Iteration:   4020, Loss function: 4.891, Average Loss: 5.208, avg. samples / sec: 311.83
Iteration:   4040, Loss function: 5.020, Average Loss: 5.205, avg. samples / sec: 240.09
Iteration:   4060, Loss function: 5.051, Average Loss: 5.201, avg. samples / sec: 294.29
Iteration:   4080, Loss function: 5.201, Average Loss: 5.196, avg. samples / sec: 265.75
Iteration:   4100, Loss function: 5.199, Average Loss: 5.192, avg. samples / sec: 293.91
:::MLLOG {"namespace": "", "time_ms": 1639082287419, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082287422, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.977, Average Loss: 5.188, avg. samples / sec: 268.53
Iteration:   4140, Loss function: 5.157, Average Loss: 5.184, avg. samples / sec: 292.32
Iteration:   4160, Loss function: 4.913, Average Loss: 5.177, avg. samples / sec: 283.75
Iteration:   4180, Loss function: 4.963, Average Loss: 5.171, avg. samples / sec: 268.54
Iteration:   4200, Loss function: 4.780, Average Loss: 5.166, avg. samples / sec: 267.07
Iteration:   4220, Loss function: 4.809, Average Loss: 5.161, avg. samples / sec: 269.97
Iteration:   4240, Loss function: 4.965, Average Loss: 5.156, avg. samples / sec: 236.87
Iteration:   4260, Loss function: 5.069, Average Loss: 5.152, avg. samples / sec: 303.22
Iteration:   4280, Loss function: 5.022, Average Loss: 5.147, avg. samples / sec: 259.40
Iteration:   4300, Loss function: 4.861, Average Loss: 5.141, avg. samples / sec: 303.56
Iteration:   4320, Loss function: 4.711, Average Loss: 5.136, avg. samples / sec: 233.11
Iteration:   4340, Loss function: 4.750, Average Loss: 5.131, avg. samples / sec: 277.28
Iteration:   4360, Loss function: 4.766, Average Loss: 5.127, avg. samples / sec: 292.01
Iteration:   4380, Loss function: 4.996, Average Loss: 5.122, avg. samples / sec: 237.76
Iteration:   4400, Loss function: 4.905, Average Loss: 5.118, avg. samples / sec: 311.88
Iteration:   4420, Loss function: 4.823, Average Loss: 5.113, avg. samples / sec: 273.62
Iteration:   4440, Loss function: 4.771, Average Loss: 5.108, avg. samples / sec: 270.62
Iteration:   4460, Loss function: 5.140, Average Loss: 5.104, avg. samples / sec: 319.10
Iteration:   4480, Loss function: 5.099, Average Loss: 5.101, avg. samples / sec: 323.01
Iteration:   4500, Loss function: 4.801, Average Loss: 5.098, avg. samples / sec: 319.18
Iteration:   4520, Loss function: 4.826, Average Loss: 5.094, avg. samples / sec: 267.38
Iteration:   4540, Loss function: 5.061, Average Loss: 5.090, avg. samples / sec: 326.78
Iteration:   4560, Loss function: 4.609, Average Loss: 5.085, avg. samples / sec: 312.77
Iteration:   4580, Loss function: 4.742, Average Loss: 5.083, avg. samples / sec: 331.07
Iteration:   4600, Loss function: 4.777, Average Loss: 5.078, avg. samples / sec: 333.49
Iteration:   4620, Loss function: 4.798, Average Loss: 5.074, avg. samples / sec: 325.73
Iteration:   4640, Loss function: 4.840, Average Loss: 5.069, avg. samples / sec: 310.50
Iteration:   4660, Loss function: 4.904, Average Loss: 5.064, avg. samples / sec: 327.56
Iteration:   4680, Loss function: 5.189, Average Loss: 5.060, avg. samples / sec: 277.38
Iteration:   4700, Loss function: 4.813, Average Loss: 5.057, avg. samples / sec: 286.27
Iteration:   4720, Loss function: 4.778, Average Loss: 5.052, avg. samples / sec: 254.71
Iteration:   4740, Loss function: 4.722, Average Loss: 5.048, avg. samples / sec: 293.62
Iteration:   4760, Loss function: 4.713, Average Loss: 5.045, avg. samples / sec: 231.05
Iteration:   4780, Loss function: 4.997, Average Loss: 5.041, avg. samples / sec: 287.40
Iteration:   4800, Loss function: 4.843, Average Loss: 5.039, avg. samples / sec: 305.74
Iteration:   4820, Loss function: 4.735, Average Loss: 5.035, avg. samples / sec: 299.78
Iteration:   4840, Loss function: 4.760, Average Loss: 5.031, avg. samples / sec: 287.44
Iteration:   4860, Loss function: 4.688, Average Loss: 5.028, avg. samples / sec: 263.11
Iteration:   4880, Loss function: 5.226, Average Loss: 5.024, avg. samples / sec: 257.78
Iteration:   4900, Loss function: 4.684, Average Loss: 5.020, avg. samples / sec: 265.42
Iteration:   4920, Loss function: 4.711, Average Loss: 5.016, avg. samples / sec: 194.39
Iteration:   4940, Loss function: 4.724, Average Loss: 5.012, avg. samples / sec: 308.23
Iteration:   4960, Loss function: 4.877, Average Loss: 5.008, avg. samples / sec: 302.98
Iteration:   4980, Loss function: 4.662, Average Loss: 5.005, avg. samples / sec: 317.37
Iteration:   5000, Loss function: 4.888, Average Loss: 5.002, avg. samples / sec: 330.70
Iteration:   5020, Loss function: 5.050, Average Loss: 4.998, avg. samples / sec: 252.45
Iteration:   5040, Loss function: 4.973, Average Loss: 4.994, avg. samples / sec: 313.74
Iteration:   5060, Loss function: 4.913, Average Loss: 4.990, avg. samples / sec: 334.04
Iteration:   5080, Loss function: 4.560, Average Loss: 4.987, avg. samples / sec: 293.91
Iteration:   5100, Loss function: 5.119, Average Loss: 4.985, avg. samples / sec: 310.65
Iteration:   5120, Loss function: 4.696, Average Loss: 4.982, avg. samples / sec: 327.58
Iteration:   5140, Loss function: 4.858, Average Loss: 4.978, avg. samples / sec: 321.47
:::MLLOG {"namespace": "", "time_ms": 1639082696712, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 77.23 s
:::MLLOG {"namespace": "", "time_ms": 1639082774103, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082774110, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082774111, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.35s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.037, Average Loss: 4.973, avg. samples / sec: 26.44
DONE (t=8.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11034
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22229
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09933
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19796
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14058
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11034 AP goal: 0.10000
Iteration:   5180, Loss function: 4.735, Average Loss: 4.968, avg. samples / sec: 306.64
:::MLLOG {"namespace": "", "time_ms": 1639082789359, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082789360, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11034333271941037, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082789360, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082791093, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:33 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:33 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580567, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580732, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2078833810, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2078833810
:::MLLOG {"namespace": "", "time_ms": 1639080583093, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080583093, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080583097, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080583098, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687576, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687576, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080689317, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689319, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.15s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689613, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689614, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689615, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.529, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.003, Average Loss: 0.452, avg. samples / sec: 302.34
Iteration:     40, Loss function: 20.663, Average Loss: 0.853, avg. samples / sec: 297.65
Iteration:     60, Loss function: 20.438, Average Loss: 1.243, avg. samples / sec: 256.97
Iteration:     80, Loss function: 19.730, Average Loss: 1.615, avg. samples / sec: 271.49
Iteration:    100, Loss function: 14.527, Average Loss: 1.930, avg. samples / sec: 281.20
Iteration:    120, Loss function: 10.664, Average Loss: 2.129, avg. samples / sec: 256.07
Iteration:    140, Loss function: 9.494, Average Loss: 2.281, avg. samples / sec: 264.16
Iteration:    160, Loss function: 9.109, Average Loss: 2.419, avg. samples / sec: 260.43
Iteration:    180, Loss function: 8.818, Average Loss: 2.548, avg. samples / sec: 250.52
Iteration:    200, Loss function: 8.550, Average Loss: 2.672, avg. samples / sec: 280.18
Iteration:    220, Loss function: 8.523, Average Loss: 2.793, avg. samples / sec: 292.00
Iteration:    240, Loss function: 8.469, Average Loss: 2.910, avg. samples / sec: 280.04
Iteration:    260, Loss function: 8.983, Average Loss: 3.026, avg. samples / sec: 312.52
Iteration:    280, Loss function: 8.950, Average Loss: 3.143, avg. samples / sec: 256.57
Iteration:    300, Loss function: 8.500, Average Loss: 3.251, avg. samples / sec: 333.59
Iteration:    320, Loss function: 8.236, Average Loss: 3.353, avg. samples / sec: 298.78
Iteration:    340, Loss function: 8.289, Average Loss: 3.451, avg. samples / sec: 255.53
Iteration:    360, Loss function: 8.142, Average Loss: 3.545, avg. samples / sec: 301.97
Iteration:    380, Loss function: 7.997, Average Loss: 3.636, avg. samples / sec: 309.82
Iteration:    400, Loss function: 8.022, Average Loss: 3.723, avg. samples / sec: 291.18
Iteration:    420, Loss function: 7.725, Average Loss: 3.807, avg. samples / sec: 307.14
Iteration:    440, Loss function: 7.908, Average Loss: 3.887, avg. samples / sec: 323.19
Iteration:    460, Loss function: 7.819, Average Loss: 3.966, avg. samples / sec: 318.70
Iteration:    480, Loss function: 7.587, Average Loss: 4.041, avg. samples / sec: 293.56
Iteration:    500, Loss function: 7.547, Average Loss: 4.112, avg. samples / sec: 307.81
Iteration:    520, Loss function: 7.606, Average Loss: 4.181, avg. samples / sec: 297.17
Iteration:    540, Loss function: 7.583, Average Loss: 4.249, avg. samples / sec: 229.80
Iteration:    560, Loss function: 7.310, Average Loss: 4.313, avg. samples / sec: 311.48
Iteration:    580, Loss function: 7.402, Average Loss: 4.376, avg. samples / sec: 310.55
Iteration:    600, Loss function: 7.511, Average Loss: 4.437, avg. samples / sec: 331.13
Iteration:    620, Loss function: 7.173, Average Loss: 4.494, avg. samples / sec: 317.53
Iteration:    640, Loss function: 6.996, Average Loss: 4.550, avg. samples / sec: 231.60
Iteration:    660, Loss function: 7.129, Average Loss: 4.604, avg. samples / sec: 243.85
Iteration:    680, Loss function: 7.248, Average Loss: 4.656, avg. samples / sec: 280.45
Iteration:    700, Loss function: 6.824, Average Loss: 4.703, avg. samples / sec: 225.64
Iteration:    720, Loss function: 7.019, Average Loss: 4.752, avg. samples / sec: 317.12
Iteration:    740, Loss function: 7.029, Average Loss: 4.797, avg. samples / sec: 322.06
Iteration:    760, Loss function: 7.170, Average Loss: 4.841, avg. samples / sec: 329.03
Iteration:    780, Loss function: 6.827, Average Loss: 4.883, avg. samples / sec: 331.02
Iteration:    800, Loss function: 7.184, Average Loss: 4.923, avg. samples / sec: 334.39
Iteration:    820, Loss function: 6.746, Average Loss: 4.961, avg. samples / sec: 322.53
Iteration:    840, Loss function: 6.932, Average Loss: 4.997, avg. samples / sec: 310.23
Iteration:    860, Loss function: 6.830, Average Loss: 5.031, avg. samples / sec: 338.82
Iteration:    880, Loss function: 6.605, Average Loss: 5.064, avg. samples / sec: 286.23
Iteration:    900, Loss function: 6.848, Average Loss: 5.096, avg. samples / sec: 277.00
Iteration:    920, Loss function: 6.438, Average Loss: 5.125, avg. samples / sec: 295.96
Iteration:    940, Loss function: 6.826, Average Loss: 5.155, avg. samples / sec: 311.83
Iteration:    960, Loss function: 6.609, Average Loss: 5.184, avg. samples / sec: 324.21
Iteration:    980, Loss function: 6.535, Average Loss: 5.212, avg. samples / sec: 319.30
Iteration:   1000, Loss function: 6.706, Average Loss: 5.238, avg. samples / sec: 277.84
Iteration:   1020, Loss function: 6.351, Average Loss: 5.262, avg. samples / sec: 264.49
:::MLLOG {"namespace": "", "time_ms": 1639081094111, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081094113, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.544, Average Loss: 5.286, avg. samples / sec: 309.92
Iteration:   1060, Loss function: 6.479, Average Loss: 5.309, avg. samples / sec: 305.65
Iteration:   1080, Loss function: 6.363, Average Loss: 5.331, avg. samples / sec: 330.44
Iteration:   1100, Loss function: 6.144, Average Loss: 5.351, avg. samples / sec: 334.71
Iteration:   1120, Loss function: 6.287, Average Loss: 5.370, avg. samples / sec: 295.62
Iteration:   1140, Loss function: 6.467, Average Loss: 5.390, avg. samples / sec: 312.31
Iteration:   1160, Loss function: 6.162, Average Loss: 5.407, avg. samples / sec: 284.57
Iteration:   1180, Loss function: 6.252, Average Loss: 5.425, avg. samples / sec: 319.91
Iteration:   1200, Loss function: 6.277, Average Loss: 5.441, avg. samples / sec: 240.75
Iteration:   1220, Loss function: 6.068, Average Loss: 5.456, avg. samples / sec: 242.78
Iteration:   1240, Loss function: 6.165, Average Loss: 5.470, avg. samples / sec: 237.71
Iteration:   1260, Loss function: 6.051, Average Loss: 5.482, avg. samples / sec: 302.76
Iteration:   1280, Loss function: 5.953, Average Loss: 5.494, avg. samples / sec: 324.17
Iteration:   1300, Loss function: 6.188, Average Loss: 5.508, avg. samples / sec: 314.67
Iteration:   1320, Loss function: 6.004, Average Loss: 5.519, avg. samples / sec: 325.55
Iteration:   1340, Loss function: 5.931, Average Loss: 5.529, avg. samples / sec: 323.44
Iteration:   1360, Loss function: 5.910, Average Loss: 5.539, avg. samples / sec: 304.47
Iteration:   1380, Loss function: 6.165, Average Loss: 5.548, avg. samples / sec: 310.40
Iteration:   1400, Loss function: 6.100, Average Loss: 5.556, avg. samples / sec: 309.89
Iteration:   1420, Loss function: 5.724, Average Loss: 5.564, avg. samples / sec: 291.68
Iteration:   1440, Loss function: 6.309, Average Loss: 5.572, avg. samples / sec: 308.44
Iteration:   1460, Loss function: 5.815, Average Loss: 5.580, avg. samples / sec: 315.68
Iteration:   1480, Loss function: 5.820, Average Loss: 5.587, avg. samples / sec: 323.79
Iteration:   1500, Loss function: 6.025, Average Loss: 5.596, avg. samples / sec: 329.89
Iteration:   1520, Loss function: 5.926, Average Loss: 5.602, avg. samples / sec: 332.82
Iteration:   1540, Loss function: 6.176, Average Loss: 5.606, avg. samples / sec: 326.58
Iteration:   1560, Loss function: 5.776, Average Loss: 5.611, avg. samples / sec: 274.35
Iteration:   1580, Loss function: 5.478, Average Loss: 5.617, avg. samples / sec: 313.49
Iteration:   1600, Loss function: 6.025, Average Loss: 5.622, avg. samples / sec: 293.71
Iteration:   1620, Loss function: 5.618, Average Loss: 5.628, avg. samples / sec: 216.55
Iteration:   1640, Loss function: 5.943, Average Loss: 5.631, avg. samples / sec: 313.52
Iteration:   1660, Loss function: 5.770, Average Loss: 5.635, avg. samples / sec: 289.34
Iteration:   1680, Loss function: 5.726, Average Loss: 5.638, avg. samples / sec: 280.17
Iteration:   1700, Loss function: 5.383, Average Loss: 5.642, avg. samples / sec: 296.79
Iteration:   1720, Loss function: 5.728, Average Loss: 5.644, avg. samples / sec: 338.77
Iteration:   1740, Loss function: 5.915, Average Loss: 5.647, avg. samples / sec: 267.10
Iteration:   1760, Loss function: 5.486, Average Loss: 5.648, avg. samples / sec: 306.15
Iteration:   1780, Loss function: 5.612, Average Loss: 5.649, avg. samples / sec: 308.19
Iteration:   1800, Loss function: 5.461, Average Loss: 5.652, avg. samples / sec: 306.94
Iteration:   1820, Loss function: 5.914, Average Loss: 5.652, avg. samples / sec: 321.94
Iteration:   1840, Loss function: 5.932, Average Loss: 5.653, avg. samples / sec: 333.91
Iteration:   1860, Loss function: 5.652, Average Loss: 5.653, avg. samples / sec: 332.04
Iteration:   1880, Loss function: 6.016, Average Loss: 5.654, avg. samples / sec: 317.58
Iteration:   1900, Loss function: 5.808, Average Loss: 5.656, avg. samples / sec: 334.72
Iteration:   1920, Loss function: 5.798, Average Loss: 5.656, avg. samples / sec: 341.49
Iteration:   1940, Loss function: 6.083, Average Loss: 5.656, avg. samples / sec: 326.10
Iteration:   1960, Loss function: 5.420, Average Loss: 5.655, avg. samples / sec: 282.05
Iteration:   1980, Loss function: 5.779, Average Loss: 5.654, avg. samples / sec: 320.33
Iteration:   2000, Loss function: 5.696, Average Loss: 5.654, avg. samples / sec: 314.47
Iteration:   2020, Loss function: 5.470, Average Loss: 5.652, avg. samples / sec: 333.64
Iteration:   2040, Loss function: 5.603, Average Loss: 5.651, avg. samples / sec: 266.46
:::MLLOG {"namespace": "", "time_ms": 1639081481288, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081481290, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.524, Average Loss: 5.649, avg. samples / sec: 311.38
Iteration:   2080, Loss function: 5.094, Average Loss: 5.646, avg. samples / sec: 327.93
Iteration:   2100, Loss function: 5.412, Average Loss: 5.643, avg. samples / sec: 338.97
Iteration:   2120, Loss function: 5.403, Average Loss: 5.640, avg. samples / sec: 331.83
Iteration:   2140, Loss function: 5.421, Average Loss: 5.636, avg. samples / sec: 320.82
Iteration:   2160, Loss function: 5.644, Average Loss: 5.635, avg. samples / sec: 262.65
Iteration:   2180, Loss function: 5.504, Average Loss: 5.632, avg. samples / sec: 310.73
Iteration:   2200, Loss function: 5.617, Average Loss: 5.629, avg. samples / sec: 275.87
Iteration:   2220, Loss function: 5.593, Average Loss: 5.626, avg. samples / sec: 326.37
Iteration:   2240, Loss function: 5.555, Average Loss: 5.625, avg. samples / sec: 311.20
Iteration:   2260, Loss function: 5.271, Average Loss: 5.621, avg. samples / sec: 315.84
Iteration:   2280, Loss function: 5.311, Average Loss: 5.618, avg. samples / sec: 335.64
Iteration:   2300, Loss function: 5.085, Average Loss: 5.615, avg. samples / sec: 297.09
Iteration:   2320, Loss function: 5.219, Average Loss: 5.612, avg. samples / sec: 266.08
Iteration:   2340, Loss function: 5.472, Average Loss: 5.608, avg. samples / sec: 293.54
Iteration:   2360, Loss function: 5.370, Average Loss: 5.604, avg. samples / sec: 291.49
Iteration:   2380, Loss function: 5.356, Average Loss: 5.600, avg. samples / sec: 332.21
Iteration:   2400, Loss function: 5.647, Average Loss: 5.596, avg. samples / sec: 324.70
Iteration:   2420, Loss function: 5.368, Average Loss: 5.591, avg. samples / sec: 321.36
Iteration:   2440, Loss function: 5.281, Average Loss: 5.588, avg. samples / sec: 288.60
Iteration:   2460, Loss function: 5.047, Average Loss: 5.584, avg. samples / sec: 234.73
Iteration:   2480, Loss function: 5.430, Average Loss: 5.581, avg. samples / sec: 297.99
Iteration:   2500, Loss function: 5.433, Average Loss: 5.578, avg. samples / sec: 320.61
Iteration:   2520, Loss function: 5.406, Average Loss: 5.573, avg. samples / sec: 308.34
Iteration:   2540, Loss function: 5.344, Average Loss: 5.570, avg. samples / sec: 245.25
Iteration:   2560, Loss function: 5.342, Average Loss: 5.566, avg. samples / sec: 235.73
Iteration:   2580, Loss function: 5.298, Average Loss: 5.562, avg. samples / sec: 306.45
Iteration:   2600, Loss function: 5.447, Average Loss: 5.559, avg. samples / sec: 304.30
Iteration:   2620, Loss function: 5.457, Average Loss: 5.554, avg. samples / sec: 307.27
Iteration:   2640, Loss function: 5.067, Average Loss: 5.551, avg. samples / sec: 304.57
Iteration:   2660, Loss function: 5.042, Average Loss: 5.547, avg. samples / sec: 324.82
Iteration:   2680, Loss function: 5.274, Average Loss: 5.543, avg. samples / sec: 297.94
Iteration:   2700, Loss function: 5.136, Average Loss: 5.537, avg. samples / sec: 320.49
Iteration:   2720, Loss function: 5.313, Average Loss: 5.533, avg. samples / sec: 328.82
Iteration:   2740, Loss function: 5.104, Average Loss: 5.529, avg. samples / sec: 316.87
Iteration:   2760, Loss function: 4.843, Average Loss: 5.524, avg. samples / sec: 319.30
Iteration:   2780, Loss function: 5.556, Average Loss: 5.519, avg. samples / sec: 276.78
Iteration:   2800, Loss function: 5.116, Average Loss: 5.514, avg. samples / sec: 307.20
Iteration:   2820, Loss function: 5.489, Average Loss: 5.510, avg. samples / sec: 258.87
Iteration:   2840, Loss function: 4.962, Average Loss: 5.504, avg. samples / sec: 275.51
Iteration:   2860, Loss function: 5.127, Average Loss: 5.500, avg. samples / sec: 273.54
Iteration:   2880, Loss function: 5.354, Average Loss: 5.495, avg. samples / sec: 265.05
Iteration:   2900, Loss function: 5.081, Average Loss: 5.491, avg. samples / sec: 302.06
Iteration:   2920, Loss function: 5.242, Average Loss: 5.486, avg. samples / sec: 330.17
Iteration:   2940, Loss function: 4.978, Average Loss: 5.483, avg. samples / sec: 332.15
Iteration:   2960, Loss function: 5.460, Average Loss: 5.479, avg. samples / sec: 332.48
Iteration:   2980, Loss function: 5.204, Average Loss: 5.475, avg. samples / sec: 318.80
Iteration:   3000, Loss function: 5.256, Average Loss: 5.469, avg. samples / sec: 319.87
Iteration:   3020, Loss function: 5.360, Average Loss: 5.463, avg. samples / sec: 222.26
Iteration:   3040, Loss function: 5.213, Average Loss: 5.458, avg. samples / sec: 297.35
Iteration:   3060, Loss function: 5.184, Average Loss: 5.452, avg. samples / sec: 279.07
Iteration:   3080, Loss function: 4.932, Average Loss: 5.446, avg. samples / sec: 314.74
:::MLLOG {"namespace": "", "time_ms": 1639081874518, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081874534, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.255, Average Loss: 5.441, avg. samples / sec: 291.85
Iteration:   3120, Loss function: 4.925, Average Loss: 5.435, avg. samples / sec: 292.03
Iteration:   3140, Loss function: 5.106, Average Loss: 5.429, avg. samples / sec: 303.38
Iteration:   3160, Loss function: 5.452, Average Loss: 5.423, avg. samples / sec: 313.73
Iteration:   3180, Loss function: 4.865, Average Loss: 5.418, avg. samples / sec: 326.77
Iteration:   3200, Loss function: 5.274, Average Loss: 5.413, avg. samples / sec: 281.47
Iteration:   3220, Loss function: 5.277, Average Loss: 5.408, avg. samples / sec: 249.08
Iteration:   3240, Loss function: 5.074, Average Loss: 5.402, avg. samples / sec: 282.15
Iteration:   3260, Loss function: 5.205, Average Loss: 5.397, avg. samples / sec: 317.60
Iteration:   3280, Loss function: 4.800, Average Loss: 5.391, avg. samples / sec: 322.49
Iteration:   3300, Loss function: 4.890, Average Loss: 5.385, avg. samples / sec: 287.78
Iteration:   3320, Loss function: 4.946, Average Loss: 5.381, avg. samples / sec: 324.64
Iteration:   3340, Loss function: 5.316, Average Loss: 5.378, avg. samples / sec: 312.30
Iteration:   3360, Loss function: 5.205, Average Loss: 5.371, avg. samples / sec: 328.39
Iteration:   3380, Loss function: 5.357, Average Loss: 5.364, avg. samples / sec: 314.25
Iteration:   3400, Loss function: 4.777, Average Loss: 5.359, avg. samples / sec: 331.68
Iteration:   3420, Loss function: 5.177, Average Loss: 5.354, avg. samples / sec: 326.01
Iteration:   3440, Loss function: 4.908, Average Loss: 5.349, avg. samples / sec: 279.45
Iteration:   3460, Loss function: 5.144, Average Loss: 5.344, avg. samples / sec: 312.95
Iteration:   3480, Loss function: 5.077, Average Loss: 5.339, avg. samples / sec: 265.58
Iteration:   3500, Loss function: 5.222, Average Loss: 5.334, avg. samples / sec: 285.65
Iteration:   3520, Loss function: 4.900, Average Loss: 5.329, avg. samples / sec: 314.97
Iteration:   3540, Loss function: 4.968, Average Loss: 5.324, avg. samples / sec: 330.08
Iteration:   3560, Loss function: 4.919, Average Loss: 5.321, avg. samples / sec: 323.86
Iteration:   3580, Loss function: 5.082, Average Loss: 5.317, avg. samples / sec: 265.01
Iteration:   3600, Loss function: 5.167, Average Loss: 5.311, avg. samples / sec: 246.15
Iteration:   3620, Loss function: 5.041, Average Loss: 5.307, avg. samples / sec: 284.81
Iteration:   3640, Loss function: 4.826, Average Loss: 5.301, avg. samples / sec: 306.13
Iteration:   3660, Loss function: 5.024, Average Loss: 5.295, avg. samples / sec: 332.14
Iteration:   3680, Loss function: 5.160, Average Loss: 5.290, avg. samples / sec: 278.04
Iteration:   3700, Loss function: 5.099, Average Loss: 5.285, avg. samples / sec: 304.82
Iteration:   3720, Loss function: 5.066, Average Loss: 5.278, avg. samples / sec: 272.11
Iteration:   3740, Loss function: 5.178, Average Loss: 5.274, avg. samples / sec: 194.26
Iteration:   3760, Loss function: 5.011, Average Loss: 5.269, avg. samples / sec: 189.67
Iteration:   3780, Loss function: 4.838, Average Loss: 5.265, avg. samples / sec: 193.98
Iteration:   3800, Loss function: 5.181, Average Loss: 5.262, avg. samples / sec: 169.81
Iteration:   3820, Loss function: 5.197, Average Loss: 5.257, avg. samples / sec: 314.30
Iteration:   3840, Loss function: 4.804, Average Loss: 5.253, avg. samples / sec: 335.03
Iteration:   3860, Loss function: 4.917, Average Loss: 5.248, avg. samples / sec: 337.82
Iteration:   3880, Loss function: 5.073, Average Loss: 5.242, avg. samples / sec: 305.58
Iteration:   3900, Loss function: 4.967, Average Loss: 5.238, avg. samples / sec: 323.93
Iteration:   3920, Loss function: 5.116, Average Loss: 5.232, avg. samples / sec: 324.38
Iteration:   3940, Loss function: 4.972, Average Loss: 5.227, avg. samples / sec: 320.17
Iteration:   3960, Loss function: 4.890, Average Loss: 5.223, avg. samples / sec: 277.55
Iteration:   3980, Loss function: 4.981, Average Loss: 5.218, avg. samples / sec: 293.41
Iteration:   4000, Loss function: 5.263, Average Loss: 5.214, avg. samples / sec: 277.90
Iteration:   4020, Loss function: 4.891, Average Loss: 5.208, avg. samples / sec: 311.83
Iteration:   4040, Loss function: 5.020, Average Loss: 5.205, avg. samples / sec: 240.09
Iteration:   4060, Loss function: 5.051, Average Loss: 5.201, avg. samples / sec: 294.29
Iteration:   4080, Loss function: 5.201, Average Loss: 5.196, avg. samples / sec: 265.75
Iteration:   4100, Loss function: 5.199, Average Loss: 5.192, avg. samples / sec: 293.91
:::MLLOG {"namespace": "", "time_ms": 1639082287419, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082287422, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.977, Average Loss: 5.188, avg. samples / sec: 268.53
Iteration:   4140, Loss function: 5.157, Average Loss: 5.184, avg. samples / sec: 292.32
Iteration:   4160, Loss function: 4.913, Average Loss: 5.177, avg. samples / sec: 283.75
Iteration:   4180, Loss function: 4.963, Average Loss: 5.171, avg. samples / sec: 268.54
Iteration:   4200, Loss function: 4.780, Average Loss: 5.166, avg. samples / sec: 267.07
Iteration:   4220, Loss function: 4.809, Average Loss: 5.161, avg. samples / sec: 269.97
Iteration:   4240, Loss function: 4.965, Average Loss: 5.156, avg. samples / sec: 236.87
Iteration:   4260, Loss function: 5.069, Average Loss: 5.152, avg. samples / sec: 303.22
Iteration:   4280, Loss function: 5.022, Average Loss: 5.147, avg. samples / sec: 259.40
Iteration:   4300, Loss function: 4.861, Average Loss: 5.141, avg. samples / sec: 303.56
Iteration:   4320, Loss function: 4.711, Average Loss: 5.136, avg. samples / sec: 233.11
Iteration:   4340, Loss function: 4.750, Average Loss: 5.131, avg. samples / sec: 277.28
Iteration:   4360, Loss function: 4.766, Average Loss: 5.127, avg. samples / sec: 292.01
Iteration:   4380, Loss function: 4.996, Average Loss: 5.122, avg. samples / sec: 237.76
Iteration:   4400, Loss function: 4.905, Average Loss: 5.118, avg. samples / sec: 311.88
Iteration:   4420, Loss function: 4.823, Average Loss: 5.113, avg. samples / sec: 273.62
Iteration:   4440, Loss function: 4.771, Average Loss: 5.108, avg. samples / sec: 270.62
Iteration:   4460, Loss function: 5.140, Average Loss: 5.104, avg. samples / sec: 319.10
Iteration:   4480, Loss function: 5.099, Average Loss: 5.101, avg. samples / sec: 323.01
Iteration:   4500, Loss function: 4.801, Average Loss: 5.098, avg. samples / sec: 319.18
Iteration:   4520, Loss function: 4.826, Average Loss: 5.094, avg. samples / sec: 267.38
Iteration:   4540, Loss function: 5.061, Average Loss: 5.090, avg. samples / sec: 326.78
Iteration:   4560, Loss function: 4.609, Average Loss: 5.085, avg. samples / sec: 312.77
Iteration:   4580, Loss function: 4.742, Average Loss: 5.083, avg. samples / sec: 331.07
Iteration:   4600, Loss function: 4.777, Average Loss: 5.078, avg. samples / sec: 333.49
Iteration:   4620, Loss function: 4.798, Average Loss: 5.074, avg. samples / sec: 325.73
Iteration:   4640, Loss function: 4.840, Average Loss: 5.069, avg. samples / sec: 310.50
Iteration:   4660, Loss function: 4.904, Average Loss: 5.064, avg. samples / sec: 327.56
Iteration:   4680, Loss function: 5.189, Average Loss: 5.060, avg. samples / sec: 277.38
Iteration:   4700, Loss function: 4.813, Average Loss: 5.057, avg. samples / sec: 286.27
Iteration:   4720, Loss function: 4.778, Average Loss: 5.052, avg. samples / sec: 254.71
Iteration:   4740, Loss function: 4.722, Average Loss: 5.048, avg. samples / sec: 293.62
Iteration:   4760, Loss function: 4.713, Average Loss: 5.045, avg. samples / sec: 231.05
Iteration:   4780, Loss function: 4.997, Average Loss: 5.041, avg. samples / sec: 287.40
Iteration:   4800, Loss function: 4.843, Average Loss: 5.039, avg. samples / sec: 305.74
Iteration:   4820, Loss function: 4.735, Average Loss: 5.035, avg. samples / sec: 299.78
Iteration:   4840, Loss function: 4.760, Average Loss: 5.031, avg. samples / sec: 287.44
Iteration:   4860, Loss function: 4.688, Average Loss: 5.028, avg. samples / sec: 263.11
Iteration:   4880, Loss function: 5.226, Average Loss: 5.024, avg. samples / sec: 257.78
Iteration:   4900, Loss function: 4.684, Average Loss: 5.020, avg. samples / sec: 265.42
Iteration:   4920, Loss function: 4.711, Average Loss: 5.016, avg. samples / sec: 194.39
Iteration:   4940, Loss function: 4.724, Average Loss: 5.012, avg. samples / sec: 308.23
Iteration:   4960, Loss function: 4.877, Average Loss: 5.008, avg. samples / sec: 302.98
Iteration:   4980, Loss function: 4.662, Average Loss: 5.005, avg. samples / sec: 317.37
Iteration:   5000, Loss function: 4.888, Average Loss: 5.002, avg. samples / sec: 330.70
Iteration:   5020, Loss function: 5.050, Average Loss: 4.998, avg. samples / sec: 252.45
Iteration:   5040, Loss function: 4.973, Average Loss: 4.994, avg. samples / sec: 313.74
Iteration:   5060, Loss function: 4.913, Average Loss: 4.990, avg. samples / sec: 334.04
Iteration:   5080, Loss function: 4.560, Average Loss: 4.987, avg. samples / sec: 293.91
Iteration:   5100, Loss function: 5.119, Average Loss: 4.985, avg. samples / sec: 310.65
Iteration:   5120, Loss function: 4.696, Average Loss: 4.982, avg. samples / sec: 327.58
Iteration:   5140, Loss function: 4.858, Average Loss: 4.978, avg. samples / sec: 321.47
:::MLLOG {"namespace": "", "time_ms": 1639082696712, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 77.23 s
:::MLLOG {"namespace": "", "time_ms": 1639082774103, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082774110, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082774111, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.35s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.037, Average Loss: 4.973, avg. samples / sec: 26.44
DONE (t=8.49s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11034
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22229
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09933
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19796
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14058
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20695
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21966
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11034 AP goal: 0.10000
Iteration:   5180, Loss function: 4.735, Average Loss: 4.968, avg. samples / sec: 306.64
:::MLLOG {"namespace": "", "time_ms": 1639082789359, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082789360, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11034333271941037, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082789360, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082791093, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082793
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:33 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:33 PM'
START TIMING RUN WAS 2021-12-09 08:09:33 PM
ENDING TIMING RUN AT 2021-12-09 08:46:33 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:33 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
+ result=2220
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2220,nvidia,2021-12-09 08:09:33 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2220,nvidia,2021-12-09 08:09:33 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
