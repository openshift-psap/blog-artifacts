+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-ldvqs.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-ldvqs.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-ldvqs.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-7eb1ef48-2696-5f97-9617-584bccffd046)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7eb1ef48-2696-5f97-9617-584bccffd046
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-7eb1ef48-2696-5f97-9617-584bccffd046'
Found 1 MIG instances: MIG-7eb1ef48-2696-5f97-9617-584bccffd046
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-ldvqs to the sync file ...
Thu Dec  9 20:09:37 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-7eb1ef48-2696-5f97-9617-584bccffd046)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080579927, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580052, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3462267768, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3462267768
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080582071, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582071, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582075, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582075, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080686382, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080686383, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080688002, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080688002, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080688505, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080688506, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080688509, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.497, Average Loss: 0.022, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.061, Average Loss: 0.453, avg. samples / sec: 310.71
Iteration:     40, Loss function: 20.863, Average Loss: 0.856, avg. samples / sec: 298.39
Iteration:     60, Loss function: 20.414, Average Loss: 1.246, avg. samples / sec: 263.43
Iteration:     80, Loss function: 19.918, Average Loss: 1.620, avg. samples / sec: 234.70
Iteration:    100, Loss function: 15.221, Average Loss: 1.940, avg. samples / sec: 256.55
Iteration:    120, Loss function: 11.379, Average Loss: 2.147, avg. samples / sec: 268.46
Iteration:    140, Loss function: 9.735, Average Loss: 2.306, avg. samples / sec: 264.00
Iteration:    160, Loss function: 9.256, Average Loss: 2.447, avg. samples / sec: 272.97
Iteration:    180, Loss function: 9.171, Average Loss: 2.579, avg. samples / sec: 288.06
Iteration:    200, Loss function: 8.853, Average Loss: 2.705, avg. samples / sec: 271.20
Iteration:    220, Loss function: 8.704, Average Loss: 2.825, avg. samples / sec: 299.45
Iteration:    240, Loss function: 8.890, Average Loss: 2.946, avg. samples / sec: 272.47
Iteration:    260, Loss function: 8.859, Average Loss: 3.063, avg. samples / sec: 222.22
Iteration:    280, Loss function: 8.472, Average Loss: 3.173, avg. samples / sec: 275.13
Iteration:    300, Loss function: 8.391, Average Loss: 3.277, avg. samples / sec: 303.87
Iteration:    320, Loss function: 8.350, Average Loss: 3.376, avg. samples / sec: 320.01
Iteration:    340, Loss function: 8.100, Average Loss: 3.474, avg. samples / sec: 220.59
Iteration:    360, Loss function: 7.796, Average Loss: 3.566, avg. samples / sec: 226.70
Iteration:    380, Loss function: 7.976, Average Loss: 3.654, avg. samples / sec: 318.52
Iteration:    400, Loss function: 7.938, Average Loss: 3.738, avg. samples / sec: 257.63
Iteration:    420, Loss function: 7.626, Average Loss: 3.819, avg. samples / sec: 259.97
Iteration:    440, Loss function: 7.881, Average Loss: 3.899, avg. samples / sec: 287.86
Iteration:    460, Loss function: 7.779, Average Loss: 3.976, avg. samples / sec: 330.31
Iteration:    480, Loss function: 7.391, Average Loss: 4.049, avg. samples / sec: 294.89
Iteration:    500, Loss function: 7.474, Average Loss: 4.119, avg. samples / sec: 309.43
Iteration:    520, Loss function: 7.715, Average Loss: 4.187, avg. samples / sec: 317.00
Iteration:    540, Loss function: 7.334, Average Loss: 4.252, avg. samples / sec: 284.26
Iteration:    560, Loss function: 7.308, Average Loss: 4.314, avg. samples / sec: 192.93
Iteration:    580, Loss function: 7.055, Average Loss: 4.374, avg. samples / sec: 261.98
Iteration:    600, Loss function: 7.433, Average Loss: 4.432, avg. samples / sec: 284.14
Iteration:    620, Loss function: 6.997, Average Loss: 4.488, avg. samples / sec: 256.82
Iteration:    640, Loss function: 6.785, Average Loss: 4.542, avg. samples / sec: 311.96
Iteration:    660, Loss function: 7.258, Average Loss: 4.594, avg. samples / sec: 331.71
Iteration:    680, Loss function: 7.266, Average Loss: 4.645, avg. samples / sec: 320.58
Iteration:    700, Loss function: 6.909, Average Loss: 4.692, avg. samples / sec: 261.45
Iteration:    720, Loss function: 6.975, Average Loss: 4.742, avg. samples / sec: 267.83
Iteration:    740, Loss function: 6.959, Average Loss: 4.786, avg. samples / sec: 304.36
Iteration:    760, Loss function: 7.119, Average Loss: 4.830, avg. samples / sec: 325.36
Iteration:    780, Loss function: 6.795, Average Loss: 4.872, avg. samples / sec: 327.35
Iteration:    800, Loss function: 7.146, Average Loss: 4.911, avg. samples / sec: 262.42
Iteration:    820, Loss function: 7.018, Average Loss: 4.949, avg. samples / sec: 326.53
Iteration:    840, Loss function: 6.664, Average Loss: 4.985, avg. samples / sec: 327.25
Iteration:    860, Loss function: 6.807, Average Loss: 5.018, avg. samples / sec: 304.69
Iteration:    880, Loss function: 6.768, Average Loss: 5.050, avg. samples / sec: 183.55
Iteration:    900, Loss function: 6.737, Average Loss: 5.081, avg. samples / sec: 289.58
Iteration:    920, Loss function: 6.694, Average Loss: 5.110, avg. samples / sec: 326.47
Iteration:    940, Loss function: 6.825, Average Loss: 5.140, avg. samples / sec: 311.23
Iteration:    960, Loss function: 6.244, Average Loss: 5.168, avg. samples / sec: 286.02
Iteration:    980, Loss function: 6.377, Average Loss: 5.195, avg. samples / sec: 294.53
Iteration:   1000, Loss function: 6.567, Average Loss: 5.221, avg. samples / sec: 294.33
Iteration:   1020, Loss function: 6.356, Average Loss: 5.246, avg. samples / sec: 310.20
:::MLLOG {"namespace": "", "time_ms": 1639081108251, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081108253, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.441, Average Loss: 5.269, avg. samples / sec: 239.18
Iteration:   1060, Loss function: 6.252, Average Loss: 5.292, avg. samples / sec: 306.95
Iteration:   1080, Loss function: 6.252, Average Loss: 5.313, avg. samples / sec: 332.70
Iteration:   1100, Loss function: 6.183, Average Loss: 5.333, avg. samples / sec: 330.57
Iteration:   1120, Loss function: 6.175, Average Loss: 5.352, avg. samples / sec: 327.96
Iteration:   1140, Loss function: 6.617, Average Loss: 5.370, avg. samples / sec: 335.24
Iteration:   1160, Loss function: 6.182, Average Loss: 5.389, avg. samples / sec: 296.69
Iteration:   1180, Loss function: 6.173, Average Loss: 5.406, avg. samples / sec: 280.27
Iteration:   1200, Loss function: 6.185, Average Loss: 5.423, avg. samples / sec: 318.99
Iteration:   1220, Loss function: 6.150, Average Loss: 5.438, avg. samples / sec: 310.51
Iteration:   1240, Loss function: 6.207, Average Loss: 5.451, avg. samples / sec: 285.71
Iteration:   1260, Loss function: 6.001, Average Loss: 5.463, avg. samples / sec: 250.06
Iteration:   1280, Loss function: 6.014, Average Loss: 5.475, avg. samples / sec: 269.62
Iteration:   1300, Loss function: 6.102, Average Loss: 5.488, avg. samples / sec: 258.46
Iteration:   1320, Loss function: 6.050, Average Loss: 5.500, avg. samples / sec: 299.36
Iteration:   1340, Loss function: 5.802, Average Loss: 5.509, avg. samples / sec: 317.37
Iteration:   1360, Loss function: 5.906, Average Loss: 5.521, avg. samples / sec: 271.28
Iteration:   1380, Loss function: 5.969, Average Loss: 5.530, avg. samples / sec: 210.89
Iteration:   1400, Loss function: 6.065, Average Loss: 5.538, avg. samples / sec: 201.00
Iteration:   1420, Loss function: 6.010, Average Loss: 5.546, avg. samples / sec: 328.61
Iteration:   1440, Loss function: 6.328, Average Loss: 5.555, avg. samples / sec: 329.43
Iteration:   1460, Loss function: 6.117, Average Loss: 5.562, avg. samples / sec: 327.23
Iteration:   1480, Loss function: 5.904, Average Loss: 5.570, avg. samples / sec: 312.76
Iteration:   1500, Loss function: 5.971, Average Loss: 5.578, avg. samples / sec: 307.35
Iteration:   1520, Loss function: 5.885, Average Loss: 5.582, avg. samples / sec: 324.49
Iteration:   1540, Loss function: 5.876, Average Loss: 5.587, avg. samples / sec: 186.23
Iteration:   1560, Loss function: 5.735, Average Loss: 5.591, avg. samples / sec: 260.36
Iteration:   1580, Loss function: 5.517, Average Loss: 5.597, avg. samples / sec: 315.54
Iteration:   1600, Loss function: 6.279, Average Loss: 5.603, avg. samples / sec: 304.09
Iteration:   1620, Loss function: 5.690, Average Loss: 5.608, avg. samples / sec: 283.34
Iteration:   1640, Loss function: 6.050, Average Loss: 5.612, avg. samples / sec: 285.53
Iteration:   1660, Loss function: 6.058, Average Loss: 5.618, avg. samples / sec: 273.31
Iteration:   1680, Loss function: 5.635, Average Loss: 5.620, avg. samples / sec: 260.12
Iteration:   1700, Loss function: 5.482, Average Loss: 5.625, avg. samples / sec: 254.31
Iteration:   1720, Loss function: 5.657, Average Loss: 5.627, avg. samples / sec: 207.88
Iteration:   1740, Loss function: 5.897, Average Loss: 5.629, avg. samples / sec: 319.26
Iteration:   1760, Loss function: 5.672, Average Loss: 5.632, avg. samples / sec: 303.80
Iteration:   1780, Loss function: 5.810, Average Loss: 5.633, avg. samples / sec: 223.36
Iteration:   1800, Loss function: 5.542, Average Loss: 5.635, avg. samples / sec: 267.89
Iteration:   1820, Loss function: 5.912, Average Loss: 5.636, avg. samples / sec: 308.97
Iteration:   1840, Loss function: 5.990, Average Loss: 5.637, avg. samples / sec: 323.22
Iteration:   1860, Loss function: 5.641, Average Loss: 5.636, avg. samples / sec: 306.20
Iteration:   1880, Loss function: 5.934, Average Loss: 5.637, avg. samples / sec: 323.99
Iteration:   1900, Loss function: 5.960, Average Loss: 5.638, avg. samples / sec: 334.33
Iteration:   1920, Loss function: 5.754, Average Loss: 5.638, avg. samples / sec: 332.28
Iteration:   1940, Loss function: 5.590, Average Loss: 5.638, avg. samples / sec: 331.54
Iteration:   1960, Loss function: 5.703, Average Loss: 5.638, avg. samples / sec: 331.50
Iteration:   1980, Loss function: 5.589, Average Loss: 5.636, avg. samples / sec: 329.62
Iteration:   2000, Loss function: 5.540, Average Loss: 5.636, avg. samples / sec: 322.61
Iteration:   2020, Loss function: 5.600, Average Loss: 5.635, avg. samples / sec: 340.14
Iteration:   2040, Loss function: 5.672, Average Loss: 5.635, avg. samples / sec: 332.41
:::MLLOG {"namespace": "", "time_ms": 1639081514190, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081514206, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.525, Average Loss: 5.633, avg. samples / sec: 329.29
Iteration:   2080, Loss function: 5.033, Average Loss: 5.631, avg. samples / sec: 291.50
Iteration:   2100, Loss function: 5.586, Average Loss: 5.629, avg. samples / sec: 332.68
Iteration:   2120, Loss function: 5.252, Average Loss: 5.626, avg. samples / sec: 313.17
Iteration:   2140, Loss function: 5.312, Average Loss: 5.623, avg. samples / sec: 312.61
Iteration:   2160, Loss function: 5.520, Average Loss: 5.621, avg. samples / sec: 296.63
Iteration:   2180, Loss function: 5.518, Average Loss: 5.619, avg. samples / sec: 288.36
Iteration:   2200, Loss function: 5.484, Average Loss: 5.614, avg. samples / sec: 335.26
Iteration:   2220, Loss function: 5.548, Average Loss: 5.613, avg. samples / sec: 321.98
Iteration:   2240, Loss function: 5.264, Average Loss: 5.610, avg. samples / sec: 275.73
Iteration:   2260, Loss function: 5.333, Average Loss: 5.606, avg. samples / sec: 206.44
Iteration:   2280, Loss function: 5.252, Average Loss: 5.603, avg. samples / sec: 162.40
Iteration:   2300, Loss function: 5.099, Average Loss: 5.599, avg. samples / sec: 239.50
Iteration:   2320, Loss function: 5.284, Average Loss: 5.596, avg. samples / sec: 306.91
Iteration:   2340, Loss function: 5.558, Average Loss: 5.593, avg. samples / sec: 316.61
Iteration:   2360, Loss function: 5.353, Average Loss: 5.590, avg. samples / sec: 261.68
Iteration:   2380, Loss function: 5.418, Average Loss: 5.586, avg. samples / sec: 324.05
Iteration:   2400, Loss function: 5.541, Average Loss: 5.581, avg. samples / sec: 295.47
Iteration:   2420, Loss function: 5.315, Average Loss: 5.578, avg. samples / sec: 259.03
Iteration:   2440, Loss function: 5.289, Average Loss: 5.575, avg. samples / sec: 258.46
Iteration:   2460, Loss function: 5.312, Average Loss: 5.572, avg. samples / sec: 315.51
Iteration:   2480, Loss function: 5.297, Average Loss: 5.567, avg. samples / sec: 306.52
Iteration:   2500, Loss function: 5.244, Average Loss: 5.562, avg. samples / sec: 290.40
Iteration:   2520, Loss function: 5.377, Average Loss: 5.556, avg. samples / sec: 248.94
Iteration:   2540, Loss function: 5.496, Average Loss: 5.553, avg. samples / sec: 320.68
Iteration:   2560, Loss function: 5.451, Average Loss: 5.550, avg. samples / sec: 283.79
Iteration:   2580, Loss function: 5.134, Average Loss: 5.546, avg. samples / sec: 313.56
Iteration:   2600, Loss function: 5.371, Average Loss: 5.543, avg. samples / sec: 330.96
Iteration:   2620, Loss function: 5.524, Average Loss: 5.538, avg. samples / sec: 318.14
Iteration:   2640, Loss function: 5.226, Average Loss: 5.536, avg. samples / sec: 268.69
Iteration:   2660, Loss function: 5.256, Average Loss: 5.533, avg. samples / sec: 322.34
Iteration:   2680, Loss function: 5.075, Average Loss: 5.528, avg. samples / sec: 321.05
Iteration:   2700, Loss function: 5.212, Average Loss: 5.523, avg. samples / sec: 307.24
Iteration:   2720, Loss function: 5.367, Average Loss: 5.519, avg. samples / sec: 335.10
Iteration:   2740, Loss function: 5.077, Average Loss: 5.515, avg. samples / sec: 323.10
Iteration:   2760, Loss function: 4.828, Average Loss: 5.509, avg. samples / sec: 280.77
Iteration:   2780, Loss function: 5.397, Average Loss: 5.505, avg. samples / sec: 340.22
Iteration:   2800, Loss function: 5.339, Average Loss: 5.500, avg. samples / sec: 308.89
Iteration:   2820, Loss function: 5.259, Average Loss: 5.495, avg. samples / sec: 286.23
Iteration:   2840, Loss function: 5.238, Average Loss: 5.492, avg. samples / sec: 326.25
Iteration:   2860, Loss function: 5.042, Average Loss: 5.486, avg. samples / sec: 303.60
Iteration:   2880, Loss function: 5.406, Average Loss: 5.483, avg. samples / sec: 222.35
Iteration:   2900, Loss function: 5.053, Average Loss: 5.478, avg. samples / sec: 319.92
Iteration:   2920, Loss function: 5.165, Average Loss: 5.471, avg. samples / sec: 322.99
Iteration:   2940, Loss function: 5.003, Average Loss: 5.467, avg. samples / sec: 316.02
Iteration:   2960, Loss function: 5.337, Average Loss: 5.462, avg. samples / sec: 331.99
Iteration:   2980, Loss function: 5.272, Average Loss: 5.457, avg. samples / sec: 320.76
Iteration:   3000, Loss function: 5.314, Average Loss: 5.452, avg. samples / sec: 305.73
Iteration:   3020, Loss function: 5.306, Average Loss: 5.446, avg. samples / sec: 271.78
Iteration:   3040, Loss function: 5.205, Average Loss: 5.441, avg. samples / sec: 310.20
Iteration:   3060, Loss function: 5.015, Average Loss: 5.435, avg. samples / sec: 277.97
Iteration:   3080, Loss function: 4.884, Average Loss: 5.429, avg. samples / sec: 277.65
:::MLLOG {"namespace": "", "time_ms": 1639081917262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081917265, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.061, Average Loss: 5.424, avg. samples / sec: 267.10
Iteration:   3120, Loss function: 5.097, Average Loss: 5.417, avg. samples / sec: 275.10
Iteration:   3140, Loss function: 5.107, Average Loss: 5.413, avg. samples / sec: 340.18
Iteration:   3160, Loss function: 5.442, Average Loss: 5.408, avg. samples / sec: 329.69
Iteration:   3180, Loss function: 5.149, Average Loss: 5.404, avg. samples / sec: 295.33
Iteration:   3200, Loss function: 5.405, Average Loss: 5.400, avg. samples / sec: 302.56
Iteration:   3220, Loss function: 5.053, Average Loss: 5.395, avg. samples / sec: 324.39
Iteration:   3240, Loss function: 5.299, Average Loss: 5.390, avg. samples / sec: 322.50
Iteration:   3260, Loss function: 5.041, Average Loss: 5.385, avg. samples / sec: 325.77
Iteration:   3280, Loss function: 4.724, Average Loss: 5.377, avg. samples / sec: 301.21
Iteration:   3300, Loss function: 4.966, Average Loss: 5.371, avg. samples / sec: 328.63
Iteration:   3320, Loss function: 4.999, Average Loss: 5.367, avg. samples / sec: 339.01
Iteration:   3340, Loss function: 5.017, Average Loss: 5.362, avg. samples / sec: 318.02
Iteration:   3360, Loss function: 5.113, Average Loss: 5.354, avg. samples / sec: 289.25
Iteration:   3380, Loss function: 5.295, Average Loss: 5.348, avg. samples / sec: 332.07
Iteration:   3400, Loss function: 4.965, Average Loss: 5.343, avg. samples / sec: 331.86
Iteration:   3420, Loss function: 5.104, Average Loss: 5.337, avg. samples / sec: 270.19
Iteration:   3440, Loss function: 4.970, Average Loss: 5.332, avg. samples / sec: 304.74
Iteration:   3460, Loss function: 5.017, Average Loss: 5.327, avg. samples / sec: 282.94
Iteration:   3480, Loss function: 5.296, Average Loss: 5.322, avg. samples / sec: 246.58
Iteration:   3500, Loss function: 5.096, Average Loss: 5.318, avg. samples / sec: 263.21
Iteration:   3520, Loss function: 5.074, Average Loss: 5.314, avg. samples / sec: 261.59
Iteration:   3540, Loss function: 5.150, Average Loss: 5.310, avg. samples / sec: 304.38
Iteration:   3560, Loss function: 5.091, Average Loss: 5.305, avg. samples / sec: 329.37
Iteration:   3580, Loss function: 5.040, Average Loss: 5.301, avg. samples / sec: 326.24
Iteration:   3600, Loss function: 5.151, Average Loss: 5.296, avg. samples / sec: 313.38
Iteration:   3620, Loss function: 4.996, Average Loss: 5.292, avg. samples / sec: 310.29
Iteration:   3640, Loss function: 4.840, Average Loss: 5.287, avg. samples / sec: 283.21
Iteration:   3660, Loss function: 5.135, Average Loss: 5.281, avg. samples / sec: 303.88
Iteration:   3680, Loss function: 5.006, Average Loss: 5.275, avg. samples / sec: 272.24
Iteration:   3700, Loss function: 4.857, Average Loss: 5.270, avg. samples / sec: 293.05
Iteration:   3720, Loss function: 4.920, Average Loss: 5.263, avg. samples / sec: 229.58
Iteration:   3740, Loss function: 5.068, Average Loss: 5.260, avg. samples / sec: 265.29
Iteration:   3760, Loss function: 5.049, Average Loss: 5.256, avg. samples / sec: 199.22
Iteration:   3780, Loss function: 4.938, Average Loss: 5.251, avg. samples / sec: 195.09
Iteration:   3800, Loss function: 4.938, Average Loss: 5.247, avg. samples / sec: 258.98
Iteration:   3820, Loss function: 5.304, Average Loss: 5.242, avg. samples / sec: 298.16
Iteration:   3840, Loss function: 4.673, Average Loss: 5.237, avg. samples / sec: 322.78
Iteration:   3860, Loss function: 4.797, Average Loss: 5.231, avg. samples / sec: 277.64
Iteration:   3880, Loss function: 5.104, Average Loss: 5.227, avg. samples / sec: 255.64
Iteration:   3900, Loss function: 5.245, Average Loss: 5.222, avg. samples / sec: 316.19
Iteration:   3920, Loss function: 4.979, Average Loss: 5.217, avg. samples / sec: 325.10
Iteration:   3940, Loss function: 5.086, Average Loss: 5.212, avg. samples / sec: 269.18
Iteration:   3960, Loss function: 4.888, Average Loss: 5.209, avg. samples / sec: 238.04
Iteration:   3980, Loss function: 4.863, Average Loss: 5.203, avg. samples / sec: 251.13
Iteration:   4000, Loss function: 5.100, Average Loss: 5.199, avg. samples / sec: 259.16
Iteration:   4020, Loss function: 4.908, Average Loss: 5.194, avg. samples / sec: 299.71
Iteration:   4040, Loss function: 4.974, Average Loss: 5.191, avg. samples / sec: 321.85
Iteration:   4060, Loss function: 5.203, Average Loss: 5.186, avg. samples / sec: 306.60
Iteration:   4080, Loss function: 5.118, Average Loss: 5.182, avg. samples / sec: 308.63
Iteration:   4100, Loss function: 5.080, Average Loss: 5.179, avg. samples / sec: 258.00
:::MLLOG {"namespace": "", "time_ms": 1639082325744, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082325746, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.086, Average Loss: 5.176, avg. samples / sec: 315.75
Iteration:   4140, Loss function: 4.941, Average Loss: 5.171, avg. samples / sec: 309.40
Iteration:   4160, Loss function: 5.029, Average Loss: 5.164, avg. samples / sec: 299.38
Iteration:   4180, Loss function: 5.056, Average Loss: 5.158, avg. samples / sec: 318.19
Iteration:   4200, Loss function: 4.659, Average Loss: 5.152, avg. samples / sec: 331.48
Iteration:   4220, Loss function: 4.768, Average Loss: 5.147, avg. samples / sec: 298.52
Iteration:   4240, Loss function: 4.987, Average Loss: 5.142, avg. samples / sec: 325.38
Iteration:   4260, Loss function: 4.767, Average Loss: 5.137, avg. samples / sec: 335.47
Iteration:   4280, Loss function: 4.809, Average Loss: 5.131, avg. samples / sec: 328.04
Iteration:   4300, Loss function: 4.735, Average Loss: 5.125, avg. samples / sec: 321.64
Iteration:   4320, Loss function: 4.867, Average Loss: 5.121, avg. samples / sec: 322.65
Iteration:   4340, Loss function: 4.780, Average Loss: 5.116, avg. samples / sec: 274.83
Iteration:   4360, Loss function: 4.886, Average Loss: 5.111, avg. samples / sec: 291.60
Iteration:   4380, Loss function: 4.936, Average Loss: 5.106, avg. samples / sec: 325.25
Iteration:   4400, Loss function: 4.868, Average Loss: 5.103, avg. samples / sec: 317.31
Iteration:   4420, Loss function: 4.829, Average Loss: 5.098, avg. samples / sec: 325.83
Iteration:   4440, Loss function: 4.972, Average Loss: 5.093, avg. samples / sec: 275.66
Iteration:   4460, Loss function: 5.052, Average Loss: 5.088, avg. samples / sec: 291.13
Iteration:   4480, Loss function: 5.085, Average Loss: 5.085, avg. samples / sec: 326.20
Iteration:   4500, Loss function: 4.984, Average Loss: 5.082, avg. samples / sec: 312.00
Iteration:   4520, Loss function: 4.911, Average Loss: 5.079, avg. samples / sec: 333.14
Iteration:   4540, Loss function: 5.168, Average Loss: 5.074, avg. samples / sec: 329.51
Iteration:   4560, Loss function: 4.615, Average Loss: 5.070, avg. samples / sec: 325.21
Iteration:   4580, Loss function: 4.798, Average Loss: 5.068, avg. samples / sec: 327.00
Iteration:   4600, Loss function: 4.881, Average Loss: 5.064, avg. samples / sec: 323.95
Iteration:   4620, Loss function: 4.792, Average Loss: 5.060, avg. samples / sec: 295.75
Iteration:   4640, Loss function: 4.843, Average Loss: 5.056, avg. samples / sec: 303.81
Iteration:   4660, Loss function: 4.640, Average Loss: 5.052, avg. samples / sec: 297.90
Iteration:   4680, Loss function: 5.206, Average Loss: 5.048, avg. samples / sec: 308.13
Iteration:   4700, Loss function: 4.754, Average Loss: 5.044, avg. samples / sec: 250.70
Iteration:   4720, Loss function: 4.710, Average Loss: 5.039, avg. samples / sec: 311.01
Iteration:   4740, Loss function: 4.647, Average Loss: 5.036, avg. samples / sec: 308.67
Iteration:   4760, Loss function: 4.668, Average Loss: 5.033, avg. samples / sec: 296.48
Iteration:   4780, Loss function: 5.056, Average Loss: 5.029, avg. samples / sec: 303.83
Iteration:   4800, Loss function: 4.921, Average Loss: 5.026, avg. samples / sec: 248.80
Iteration:   4820, Loss function: 4.709, Average Loss: 5.023, avg. samples / sec: 262.56
Iteration:   4840, Loss function: 5.077, Average Loss: 5.020, avg. samples / sec: 326.57
Iteration:   4860, Loss function: 4.814, Average Loss: 5.015, avg. samples / sec: 337.66
Iteration:   4880, Loss function: 5.253, Average Loss: 5.012, avg. samples / sec: 338.63
Iteration:   4900, Loss function: 4.698, Average Loss: 5.009, avg. samples / sec: 327.11
Iteration:   4920, Loss function: 4.760, Average Loss: 5.007, avg. samples / sec: 327.41
Iteration:   4940, Loss function: 4.801, Average Loss: 5.003, avg. samples / sec: 260.41
Iteration:   4960, Loss function: 4.552, Average Loss: 4.999, avg. samples / sec: 310.27
Iteration:   4980, Loss function: 4.573, Average Loss: 4.996, avg. samples / sec: 272.94
Iteration:   5000, Loss function: 4.932, Average Loss: 4.992, avg. samples / sec: 307.43
Iteration:   5020, Loss function: 5.157, Average Loss: 4.990, avg. samples / sec: 316.96
Iteration:   5040, Loss function: 4.798, Average Loss: 4.988, avg. samples / sec: 323.05
Iteration:   5060, Loss function: 4.800, Average Loss: 4.985, avg. samples / sec: 309.78
Iteration:   5080, Loss function: 4.724, Average Loss: 4.982, avg. samples / sec: 316.11
Iteration:   5100, Loss function: 4.896, Average Loss: 4.979, avg. samples / sec: 337.29
Iteration:   5120, Loss function: 4.845, Average Loss: 4.976, avg. samples / sec: 319.34
Iteration:   5140, Loss function: 4.837, Average Loss: 4.972, avg. samples / sec: 334.51
:::MLLOG {"namespace": "", "time_ms": 1639082705958, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 90.20 s
:::MLLOG {"namespace": "", "time_ms": 1639082796281, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082796423, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082796424, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.857, Average Loss: 4.967, avg. samples / sec: 23.19
DONE (t=6.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10645
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22105
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09256
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19564
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13723
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20381
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10645 AP goal: 0.10000
Iteration:   5180, Loss function: 4.731, Average Loss: 4.962, avg. samples / sec: 333.44
:::MLLOG {"namespace": "", "time_ms": 1639082810118, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810119, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10644977898825597, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810119, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813218, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080579927, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580052, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3462267768, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3462267768
:::MLLOG {"namespace": "", "time_ms": 1639080582071, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582071, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582075, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582075, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080686382, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080686383, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080688002, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080688002, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080688505, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080688506, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080688509, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.497, Average Loss: 0.022, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.061, Average Loss: 0.453, avg. samples / sec: 310.71
Iteration:     40, Loss function: 20.863, Average Loss: 0.856, avg. samples / sec: 298.39
Iteration:     60, Loss function: 20.414, Average Loss: 1.246, avg. samples / sec: 263.43
Iteration:     80, Loss function: 19.918, Average Loss: 1.620, avg. samples / sec: 234.70
Iteration:    100, Loss function: 15.221, Average Loss: 1.940, avg. samples / sec: 256.55
Iteration:    120, Loss function: 11.379, Average Loss: 2.147, avg. samples / sec: 268.46
Iteration:    140, Loss function: 9.735, Average Loss: 2.306, avg. samples / sec: 264.00
Iteration:    160, Loss function: 9.256, Average Loss: 2.447, avg. samples / sec: 272.97
Iteration:    180, Loss function: 9.171, Average Loss: 2.579, avg. samples / sec: 288.06
Iteration:    200, Loss function: 8.853, Average Loss: 2.705, avg. samples / sec: 271.20
Iteration:    220, Loss function: 8.704, Average Loss: 2.825, avg. samples / sec: 299.45
Iteration:    240, Loss function: 8.890, Average Loss: 2.946, avg. samples / sec: 272.47
Iteration:    260, Loss function: 8.859, Average Loss: 3.063, avg. samples / sec: 222.22
Iteration:    280, Loss function: 8.472, Average Loss: 3.173, avg. samples / sec: 275.13
Iteration:    300, Loss function: 8.391, Average Loss: 3.277, avg. samples / sec: 303.87
Iteration:    320, Loss function: 8.350, Average Loss: 3.376, avg. samples / sec: 320.01
Iteration:    340, Loss function: 8.100, Average Loss: 3.474, avg. samples / sec: 220.59
Iteration:    360, Loss function: 7.796, Average Loss: 3.566, avg. samples / sec: 226.70
Iteration:    380, Loss function: 7.976, Average Loss: 3.654, avg. samples / sec: 318.52
Iteration:    400, Loss function: 7.938, Average Loss: 3.738, avg. samples / sec: 257.63
Iteration:    420, Loss function: 7.626, Average Loss: 3.819, avg. samples / sec: 259.97
Iteration:    440, Loss function: 7.881, Average Loss: 3.899, avg. samples / sec: 287.86
Iteration:    460, Loss function: 7.779, Average Loss: 3.976, avg. samples / sec: 330.31
Iteration:    480, Loss function: 7.391, Average Loss: 4.049, avg. samples / sec: 294.89
Iteration:    500, Loss function: 7.474, Average Loss: 4.119, avg. samples / sec: 309.43
Iteration:    520, Loss function: 7.715, Average Loss: 4.187, avg. samples / sec: 317.00
Iteration:    540, Loss function: 7.334, Average Loss: 4.252, avg. samples / sec: 284.26
Iteration:    560, Loss function: 7.308, Average Loss: 4.314, avg. samples / sec: 192.93
Iteration:    580, Loss function: 7.055, Average Loss: 4.374, avg. samples / sec: 261.98
Iteration:    600, Loss function: 7.433, Average Loss: 4.432, avg. samples / sec: 284.14
Iteration:    620, Loss function: 6.997, Average Loss: 4.488, avg. samples / sec: 256.82
Iteration:    640, Loss function: 6.785, Average Loss: 4.542, avg. samples / sec: 311.96
Iteration:    660, Loss function: 7.258, Average Loss: 4.594, avg. samples / sec: 331.71
Iteration:    680, Loss function: 7.266, Average Loss: 4.645, avg. samples / sec: 320.58
Iteration:    700, Loss function: 6.909, Average Loss: 4.692, avg. samples / sec: 261.45
Iteration:    720, Loss function: 6.975, Average Loss: 4.742, avg. samples / sec: 267.83
Iteration:    740, Loss function: 6.959, Average Loss: 4.786, avg. samples / sec: 304.36
Iteration:    760, Loss function: 7.119, Average Loss: 4.830, avg. samples / sec: 325.36
Iteration:    780, Loss function: 6.795, Average Loss: 4.872, avg. samples / sec: 327.35
Iteration:    800, Loss function: 7.146, Average Loss: 4.911, avg. samples / sec: 262.42
Iteration:    820, Loss function: 7.018, Average Loss: 4.949, avg. samples / sec: 326.53
Iteration:    840, Loss function: 6.664, Average Loss: 4.985, avg. samples / sec: 327.25
Iteration:    860, Loss function: 6.807, Average Loss: 5.018, avg. samples / sec: 304.69
Iteration:    880, Loss function: 6.768, Average Loss: 5.050, avg. samples / sec: 183.55
Iteration:    900, Loss function: 6.737, Average Loss: 5.081, avg. samples / sec: 289.58
Iteration:    920, Loss function: 6.694, Average Loss: 5.110, avg. samples / sec: 326.47
Iteration:    940, Loss function: 6.825, Average Loss: 5.140, avg. samples / sec: 311.23
Iteration:    960, Loss function: 6.244, Average Loss: 5.168, avg. samples / sec: 286.02
Iteration:    980, Loss function: 6.377, Average Loss: 5.195, avg. samples / sec: 294.53
Iteration:   1000, Loss function: 6.567, Average Loss: 5.221, avg. samples / sec: 294.33
Iteration:   1020, Loss function: 6.356, Average Loss: 5.246, avg. samples / sec: 310.20
:::MLLOG {"namespace": "", "time_ms": 1639081108251, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081108253, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.441, Average Loss: 5.269, avg. samples / sec: 239.18
Iteration:   1060, Loss function: 6.252, Average Loss: 5.292, avg. samples / sec: 306.95
Iteration:   1080, Loss function: 6.252, Average Loss: 5.313, avg. samples / sec: 332.70
Iteration:   1100, Loss function: 6.183, Average Loss: 5.333, avg. samples / sec: 330.57
Iteration:   1120, Loss function: 6.175, Average Loss: 5.352, avg. samples / sec: 327.96
Iteration:   1140, Loss function: 6.617, Average Loss: 5.370, avg. samples / sec: 335.24
Iteration:   1160, Loss function: 6.182, Average Loss: 5.389, avg. samples / sec: 296.69
Iteration:   1180, Loss function: 6.173, Average Loss: 5.406, avg. samples / sec: 280.27
Iteration:   1200, Loss function: 6.185, Average Loss: 5.423, avg. samples / sec: 318.99
Iteration:   1220, Loss function: 6.150, Average Loss: 5.438, avg. samples / sec: 310.51
Iteration:   1240, Loss function: 6.207, Average Loss: 5.451, avg. samples / sec: 285.71
Iteration:   1260, Loss function: 6.001, Average Loss: 5.463, avg. samples / sec: 250.06
Iteration:   1280, Loss function: 6.014, Average Loss: 5.475, avg. samples / sec: 269.62
Iteration:   1300, Loss function: 6.102, Average Loss: 5.488, avg. samples / sec: 258.46
Iteration:   1320, Loss function: 6.050, Average Loss: 5.500, avg. samples / sec: 299.36
Iteration:   1340, Loss function: 5.802, Average Loss: 5.509, avg. samples / sec: 317.37
Iteration:   1360, Loss function: 5.906, Average Loss: 5.521, avg. samples / sec: 271.28
Iteration:   1380, Loss function: 5.969, Average Loss: 5.530, avg. samples / sec: 210.89
Iteration:   1400, Loss function: 6.065, Average Loss: 5.538, avg. samples / sec: 201.00
Iteration:   1420, Loss function: 6.010, Average Loss: 5.546, avg. samples / sec: 328.61
Iteration:   1440, Loss function: 6.328, Average Loss: 5.555, avg. samples / sec: 329.43
Iteration:   1460, Loss function: 6.117, Average Loss: 5.562, avg. samples / sec: 327.23
Iteration:   1480, Loss function: 5.904, Average Loss: 5.570, avg. samples / sec: 312.76
Iteration:   1500, Loss function: 5.971, Average Loss: 5.578, avg. samples / sec: 307.35
Iteration:   1520, Loss function: 5.885, Average Loss: 5.582, avg. samples / sec: 324.49
Iteration:   1540, Loss function: 5.876, Average Loss: 5.587, avg. samples / sec: 186.23
Iteration:   1560, Loss function: 5.735, Average Loss: 5.591, avg. samples / sec: 260.36
Iteration:   1580, Loss function: 5.517, Average Loss: 5.597, avg. samples / sec: 315.54
Iteration:   1600, Loss function: 6.279, Average Loss: 5.603, avg. samples / sec: 304.09
Iteration:   1620, Loss function: 5.690, Average Loss: 5.608, avg. samples / sec: 283.34
Iteration:   1640, Loss function: 6.050, Average Loss: 5.612, avg. samples / sec: 285.53
Iteration:   1660, Loss function: 6.058, Average Loss: 5.618, avg. samples / sec: 273.31
Iteration:   1680, Loss function: 5.635, Average Loss: 5.620, avg. samples / sec: 260.12
Iteration:   1700, Loss function: 5.482, Average Loss: 5.625, avg. samples / sec: 254.31
Iteration:   1720, Loss function: 5.657, Average Loss: 5.627, avg. samples / sec: 207.88
Iteration:   1740, Loss function: 5.897, Average Loss: 5.629, avg. samples / sec: 319.26
Iteration:   1760, Loss function: 5.672, Average Loss: 5.632, avg. samples / sec: 303.80
Iteration:   1780, Loss function: 5.810, Average Loss: 5.633, avg. samples / sec: 223.36
Iteration:   1800, Loss function: 5.542, Average Loss: 5.635, avg. samples / sec: 267.89
Iteration:   1820, Loss function: 5.912, Average Loss: 5.636, avg. samples / sec: 308.97
Iteration:   1840, Loss function: 5.990, Average Loss: 5.637, avg. samples / sec: 323.22
Iteration:   1860, Loss function: 5.641, Average Loss: 5.636, avg. samples / sec: 306.20
Iteration:   1880, Loss function: 5.934, Average Loss: 5.637, avg. samples / sec: 323.99
Iteration:   1900, Loss function: 5.960, Average Loss: 5.638, avg. samples / sec: 334.33
Iteration:   1920, Loss function: 5.754, Average Loss: 5.638, avg. samples / sec: 332.28
Iteration:   1940, Loss function: 5.590, Average Loss: 5.638, avg. samples / sec: 331.54
Iteration:   1960, Loss function: 5.703, Average Loss: 5.638, avg. samples / sec: 331.50
Iteration:   1980, Loss function: 5.589, Average Loss: 5.636, avg. samples / sec: 329.62
Iteration:   2000, Loss function: 5.540, Average Loss: 5.636, avg. samples / sec: 322.61
Iteration:   2020, Loss function: 5.600, Average Loss: 5.635, avg. samples / sec: 340.14
Iteration:   2040, Loss function: 5.672, Average Loss: 5.635, avg. samples / sec: 332.41
:::MLLOG {"namespace": "", "time_ms": 1639081514190, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081514206, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.525, Average Loss: 5.633, avg. samples / sec: 329.29
Iteration:   2080, Loss function: 5.033, Average Loss: 5.631, avg. samples / sec: 291.50
Iteration:   2100, Loss function: 5.586, Average Loss: 5.629, avg. samples / sec: 332.68
Iteration:   2120, Loss function: 5.252, Average Loss: 5.626, avg. samples / sec: 313.17
Iteration:   2140, Loss function: 5.312, Average Loss: 5.623, avg. samples / sec: 312.61
Iteration:   2160, Loss function: 5.520, Average Loss: 5.621, avg. samples / sec: 296.63
Iteration:   2180, Loss function: 5.518, Average Loss: 5.619, avg. samples / sec: 288.36
Iteration:   2200, Loss function: 5.484, Average Loss: 5.614, avg. samples / sec: 335.26
Iteration:   2220, Loss function: 5.548, Average Loss: 5.613, avg. samples / sec: 321.98
Iteration:   2240, Loss function: 5.264, Average Loss: 5.610, avg. samples / sec: 275.73
Iteration:   2260, Loss function: 5.333, Average Loss: 5.606, avg. samples / sec: 206.44
Iteration:   2280, Loss function: 5.252, Average Loss: 5.603, avg. samples / sec: 162.40
Iteration:   2300, Loss function: 5.099, Average Loss: 5.599, avg. samples / sec: 239.50
Iteration:   2320, Loss function: 5.284, Average Loss: 5.596, avg. samples / sec: 306.91
Iteration:   2340, Loss function: 5.558, Average Loss: 5.593, avg. samples / sec: 316.61
Iteration:   2360, Loss function: 5.353, Average Loss: 5.590, avg. samples / sec: 261.68
Iteration:   2380, Loss function: 5.418, Average Loss: 5.586, avg. samples / sec: 324.05
Iteration:   2400, Loss function: 5.541, Average Loss: 5.581, avg. samples / sec: 295.47
Iteration:   2420, Loss function: 5.315, Average Loss: 5.578, avg. samples / sec: 259.03
Iteration:   2440, Loss function: 5.289, Average Loss: 5.575, avg. samples / sec: 258.46
Iteration:   2460, Loss function: 5.312, Average Loss: 5.572, avg. samples / sec: 315.51
Iteration:   2480, Loss function: 5.297, Average Loss: 5.567, avg. samples / sec: 306.52
Iteration:   2500, Loss function: 5.244, Average Loss: 5.562, avg. samples / sec: 290.40
Iteration:   2520, Loss function: 5.377, Average Loss: 5.556, avg. samples / sec: 248.94
Iteration:   2540, Loss function: 5.496, Average Loss: 5.553, avg. samples / sec: 320.68
Iteration:   2560, Loss function: 5.451, Average Loss: 5.550, avg. samples / sec: 283.79
Iteration:   2580, Loss function: 5.134, Average Loss: 5.546, avg. samples / sec: 313.56
Iteration:   2600, Loss function: 5.371, Average Loss: 5.543, avg. samples / sec: 330.96
Iteration:   2620, Loss function: 5.524, Average Loss: 5.538, avg. samples / sec: 318.14
Iteration:   2640, Loss function: 5.226, Average Loss: 5.536, avg. samples / sec: 268.69
Iteration:   2660, Loss function: 5.256, Average Loss: 5.533, avg. samples / sec: 322.34
Iteration:   2680, Loss function: 5.075, Average Loss: 5.528, avg. samples / sec: 321.05
Iteration:   2700, Loss function: 5.212, Average Loss: 5.523, avg. samples / sec: 307.24
Iteration:   2720, Loss function: 5.367, Average Loss: 5.519, avg. samples / sec: 335.10
Iteration:   2740, Loss function: 5.077, Average Loss: 5.515, avg. samples / sec: 323.10
Iteration:   2760, Loss function: 4.828, Average Loss: 5.509, avg. samples / sec: 280.77
Iteration:   2780, Loss function: 5.397, Average Loss: 5.505, avg. samples / sec: 340.22
Iteration:   2800, Loss function: 5.339, Average Loss: 5.500, avg. samples / sec: 308.89
Iteration:   2820, Loss function: 5.259, Average Loss: 5.495, avg. samples / sec: 286.23
Iteration:   2840, Loss function: 5.238, Average Loss: 5.492, avg. samples / sec: 326.25
Iteration:   2860, Loss function: 5.042, Average Loss: 5.486, avg. samples / sec: 303.60
Iteration:   2880, Loss function: 5.406, Average Loss: 5.483, avg. samples / sec: 222.35
Iteration:   2900, Loss function: 5.053, Average Loss: 5.478, avg. samples / sec: 319.92
Iteration:   2920, Loss function: 5.165, Average Loss: 5.471, avg. samples / sec: 322.99
Iteration:   2940, Loss function: 5.003, Average Loss: 5.467, avg. samples / sec: 316.02
Iteration:   2960, Loss function: 5.337, Average Loss: 5.462, avg. samples / sec: 331.99
Iteration:   2980, Loss function: 5.272, Average Loss: 5.457, avg. samples / sec: 320.76
Iteration:   3000, Loss function: 5.314, Average Loss: 5.452, avg. samples / sec: 305.73
Iteration:   3020, Loss function: 5.306, Average Loss: 5.446, avg. samples / sec: 271.78
Iteration:   3040, Loss function: 5.205, Average Loss: 5.441, avg. samples / sec: 310.20
Iteration:   3060, Loss function: 5.015, Average Loss: 5.435, avg. samples / sec: 277.97
Iteration:   3080, Loss function: 4.884, Average Loss: 5.429, avg. samples / sec: 277.65
:::MLLOG {"namespace": "", "time_ms": 1639081917262, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081917265, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.061, Average Loss: 5.424, avg. samples / sec: 267.10
Iteration:   3120, Loss function: 5.097, Average Loss: 5.417, avg. samples / sec: 275.10
Iteration:   3140, Loss function: 5.107, Average Loss: 5.413, avg. samples / sec: 340.18
Iteration:   3160, Loss function: 5.442, Average Loss: 5.408, avg. samples / sec: 329.69
Iteration:   3180, Loss function: 5.149, Average Loss: 5.404, avg. samples / sec: 295.33
Iteration:   3200, Loss function: 5.405, Average Loss: 5.400, avg. samples / sec: 302.56
Iteration:   3220, Loss function: 5.053, Average Loss: 5.395, avg. samples / sec: 324.39
Iteration:   3240, Loss function: 5.299, Average Loss: 5.390, avg. samples / sec: 322.50
Iteration:   3260, Loss function: 5.041, Average Loss: 5.385, avg. samples / sec: 325.77
Iteration:   3280, Loss function: 4.724, Average Loss: 5.377, avg. samples / sec: 301.21
Iteration:   3300, Loss function: 4.966, Average Loss: 5.371, avg. samples / sec: 328.63
Iteration:   3320, Loss function: 4.999, Average Loss: 5.367, avg. samples / sec: 339.01
Iteration:   3340, Loss function: 5.017, Average Loss: 5.362, avg. samples / sec: 318.02
Iteration:   3360, Loss function: 5.113, Average Loss: 5.354, avg. samples / sec: 289.25
Iteration:   3380, Loss function: 5.295, Average Loss: 5.348, avg. samples / sec: 332.07
Iteration:   3400, Loss function: 4.965, Average Loss: 5.343, avg. samples / sec: 331.86
Iteration:   3420, Loss function: 5.104, Average Loss: 5.337, avg. samples / sec: 270.19
Iteration:   3440, Loss function: 4.970, Average Loss: 5.332, avg. samples / sec: 304.74
Iteration:   3460, Loss function: 5.017, Average Loss: 5.327, avg. samples / sec: 282.94
Iteration:   3480, Loss function: 5.296, Average Loss: 5.322, avg. samples / sec: 246.58
Iteration:   3500, Loss function: 5.096, Average Loss: 5.318, avg. samples / sec: 263.21
Iteration:   3520, Loss function: 5.074, Average Loss: 5.314, avg. samples / sec: 261.59
Iteration:   3540, Loss function: 5.150, Average Loss: 5.310, avg. samples / sec: 304.38
Iteration:   3560, Loss function: 5.091, Average Loss: 5.305, avg. samples / sec: 329.37
Iteration:   3580, Loss function: 5.040, Average Loss: 5.301, avg. samples / sec: 326.24
Iteration:   3600, Loss function: 5.151, Average Loss: 5.296, avg. samples / sec: 313.38
Iteration:   3620, Loss function: 4.996, Average Loss: 5.292, avg. samples / sec: 310.29
Iteration:   3640, Loss function: 4.840, Average Loss: 5.287, avg. samples / sec: 283.21
Iteration:   3660, Loss function: 5.135, Average Loss: 5.281, avg. samples / sec: 303.88
Iteration:   3680, Loss function: 5.006, Average Loss: 5.275, avg. samples / sec: 272.24
Iteration:   3700, Loss function: 4.857, Average Loss: 5.270, avg. samples / sec: 293.05
Iteration:   3720, Loss function: 4.920, Average Loss: 5.263, avg. samples / sec: 229.58
Iteration:   3740, Loss function: 5.068, Average Loss: 5.260, avg. samples / sec: 265.29
Iteration:   3760, Loss function: 5.049, Average Loss: 5.256, avg. samples / sec: 199.22
Iteration:   3780, Loss function: 4.938, Average Loss: 5.251, avg. samples / sec: 195.09
Iteration:   3800, Loss function: 4.938, Average Loss: 5.247, avg. samples / sec: 258.98
Iteration:   3820, Loss function: 5.304, Average Loss: 5.242, avg. samples / sec: 298.16
Iteration:   3840, Loss function: 4.673, Average Loss: 5.237, avg. samples / sec: 322.78
Iteration:   3860, Loss function: 4.797, Average Loss: 5.231, avg. samples / sec: 277.64
Iteration:   3880, Loss function: 5.104, Average Loss: 5.227, avg. samples / sec: 255.64
Iteration:   3900, Loss function: 5.245, Average Loss: 5.222, avg. samples / sec: 316.19
Iteration:   3920, Loss function: 4.979, Average Loss: 5.217, avg. samples / sec: 325.10
Iteration:   3940, Loss function: 5.086, Average Loss: 5.212, avg. samples / sec: 269.18
Iteration:   3960, Loss function: 4.888, Average Loss: 5.209, avg. samples / sec: 238.04
Iteration:   3980, Loss function: 4.863, Average Loss: 5.203, avg. samples / sec: 251.13
Iteration:   4000, Loss function: 5.100, Average Loss: 5.199, avg. samples / sec: 259.16
Iteration:   4020, Loss function: 4.908, Average Loss: 5.194, avg. samples / sec: 299.71
Iteration:   4040, Loss function: 4.974, Average Loss: 5.191, avg. samples / sec: 321.85
Iteration:   4060, Loss function: 5.203, Average Loss: 5.186, avg. samples / sec: 306.60
Iteration:   4080, Loss function: 5.118, Average Loss: 5.182, avg. samples / sec: 308.63
Iteration:   4100, Loss function: 5.080, Average Loss: 5.179, avg. samples / sec: 258.00
:::MLLOG {"namespace": "", "time_ms": 1639082325744, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082325746, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.086, Average Loss: 5.176, avg. samples / sec: 315.75
Iteration:   4140, Loss function: 4.941, Average Loss: 5.171, avg. samples / sec: 309.40
Iteration:   4160, Loss function: 5.029, Average Loss: 5.164, avg. samples / sec: 299.38
Iteration:   4180, Loss function: 5.056, Average Loss: 5.158, avg. samples / sec: 318.19
Iteration:   4200, Loss function: 4.659, Average Loss: 5.152, avg. samples / sec: 331.48
Iteration:   4220, Loss function: 4.768, Average Loss: 5.147, avg. samples / sec: 298.52
Iteration:   4240, Loss function: 4.987, Average Loss: 5.142, avg. samples / sec: 325.38
Iteration:   4260, Loss function: 4.767, Average Loss: 5.137, avg. samples / sec: 335.47
Iteration:   4280, Loss function: 4.809, Average Loss: 5.131, avg. samples / sec: 328.04
Iteration:   4300, Loss function: 4.735, Average Loss: 5.125, avg. samples / sec: 321.64
Iteration:   4320, Loss function: 4.867, Average Loss: 5.121, avg. samples / sec: 322.65
Iteration:   4340, Loss function: 4.780, Average Loss: 5.116, avg. samples / sec: 274.83
Iteration:   4360, Loss function: 4.886, Average Loss: 5.111, avg. samples / sec: 291.60
Iteration:   4380, Loss function: 4.936, Average Loss: 5.106, avg. samples / sec: 325.25
Iteration:   4400, Loss function: 4.868, Average Loss: 5.103, avg. samples / sec: 317.31
Iteration:   4420, Loss function: 4.829, Average Loss: 5.098, avg. samples / sec: 325.83
Iteration:   4440, Loss function: 4.972, Average Loss: 5.093, avg. samples / sec: 275.66
Iteration:   4460, Loss function: 5.052, Average Loss: 5.088, avg. samples / sec: 291.13
Iteration:   4480, Loss function: 5.085, Average Loss: 5.085, avg. samples / sec: 326.20
Iteration:   4500, Loss function: 4.984, Average Loss: 5.082, avg. samples / sec: 312.00
Iteration:   4520, Loss function: 4.911, Average Loss: 5.079, avg. samples / sec: 333.14
Iteration:   4540, Loss function: 5.168, Average Loss: 5.074, avg. samples / sec: 329.51
Iteration:   4560, Loss function: 4.615, Average Loss: 5.070, avg. samples / sec: 325.21
Iteration:   4580, Loss function: 4.798, Average Loss: 5.068, avg. samples / sec: 327.00
Iteration:   4600, Loss function: 4.881, Average Loss: 5.064, avg. samples / sec: 323.95
Iteration:   4620, Loss function: 4.792, Average Loss: 5.060, avg. samples / sec: 295.75
Iteration:   4640, Loss function: 4.843, Average Loss: 5.056, avg. samples / sec: 303.81
Iteration:   4660, Loss function: 4.640, Average Loss: 5.052, avg. samples / sec: 297.90
Iteration:   4680, Loss function: 5.206, Average Loss: 5.048, avg. samples / sec: 308.13
Iteration:   4700, Loss function: 4.754, Average Loss: 5.044, avg. samples / sec: 250.70
Iteration:   4720, Loss function: 4.710, Average Loss: 5.039, avg. samples / sec: 311.01
Iteration:   4740, Loss function: 4.647, Average Loss: 5.036, avg. samples / sec: 308.67
Iteration:   4760, Loss function: 4.668, Average Loss: 5.033, avg. samples / sec: 296.48
Iteration:   4780, Loss function: 5.056, Average Loss: 5.029, avg. samples / sec: 303.83
Iteration:   4800, Loss function: 4.921, Average Loss: 5.026, avg. samples / sec: 248.80
Iteration:   4820, Loss function: 4.709, Average Loss: 5.023, avg. samples / sec: 262.56
Iteration:   4840, Loss function: 5.077, Average Loss: 5.020, avg. samples / sec: 326.57
Iteration:   4860, Loss function: 4.814, Average Loss: 5.015, avg. samples / sec: 337.66
Iteration:   4880, Loss function: 5.253, Average Loss: 5.012, avg. samples / sec: 338.63
Iteration:   4900, Loss function: 4.698, Average Loss: 5.009, avg. samples / sec: 327.11
Iteration:   4920, Loss function: 4.760, Average Loss: 5.007, avg. samples / sec: 327.41
Iteration:   4940, Loss function: 4.801, Average Loss: 5.003, avg. samples / sec: 260.41
Iteration:   4960, Loss function: 4.552, Average Loss: 4.999, avg. samples / sec: 310.27
Iteration:   4980, Loss function: 4.573, Average Loss: 4.996, avg. samples / sec: 272.94
Iteration:   5000, Loss function: 4.932, Average Loss: 4.992, avg. samples / sec: 307.43
Iteration:   5020, Loss function: 5.157, Average Loss: 4.990, avg. samples / sec: 316.96
Iteration:   5040, Loss function: 4.798, Average Loss: 4.988, avg. samples / sec: 323.05
Iteration:   5060, Loss function: 4.800, Average Loss: 4.985, avg. samples / sec: 309.78
Iteration:   5080, Loss function: 4.724, Average Loss: 4.982, avg. samples / sec: 316.11
Iteration:   5100, Loss function: 4.896, Average Loss: 4.979, avg. samples / sec: 337.29
Iteration:   5120, Loss function: 4.845, Average Loss: 4.976, avg. samples / sec: 319.34
Iteration:   5140, Loss function: 4.837, Average Loss: 4.972, avg. samples / sec: 334.51
:::MLLOG {"namespace": "", "time_ms": 1639082705958, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 90.20 s
:::MLLOG {"namespace": "", "time_ms": 1639082796281, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082796423, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082796424, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.857, Average Loss: 4.967, avg. samples / sec: 23.19
DONE (t=6.54s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10645
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22105
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09256
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19564
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13723
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20381
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10645 AP goal: 0.10000
Iteration:   5180, Loss function: 4.731, Average Loss: 4.962, avg. samples / sec: 333.44
:::MLLOG {"namespace": "", "time_ms": 1639082810118, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810119, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10644977898825597, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082810119, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813218, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082816
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:56 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:46:56 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:56 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-7eb1ef48-2696-5f97-9617-584bccffd046)
+ result=2239
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
