+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-9mr75.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-9mr75.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-9mr75.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ MIG_MODE=1
Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080573
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:33 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:33 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-9mr75 to the sync file ...
run-ssd--1-9mr75 Found 3 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
Thu Dec  9 20:09:38 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580091, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580198, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3645248002, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3645248002
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080582167, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582168, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080686289, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080686289, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080687976, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080687978, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080688400, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080688401, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080688403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.567, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 20.972, Average Loss: 0.452, avg. samples / sec: 303.49
Iteration:     40, Loss function: 20.666, Average Loss: 0.854, avg. samples / sec: 283.81
Iteration:     60, Loss function: 20.438, Average Loss: 1.244, avg. samples / sec: 244.70
Iteration:     80, Loss function: 20.109, Average Loss: 1.619, avg. samples / sec: 225.91
Iteration:    100, Loss function: 16.764, Average Loss: 1.959, avg. samples / sec: 228.75
Iteration:    120, Loss function: 11.995, Average Loss: 2.185, avg. samples / sec: 266.69
Iteration:    140, Loss function: 10.094, Average Loss: 2.349, avg. samples / sec: 255.53
Iteration:    160, Loss function: 9.447, Average Loss: 2.491, avg. samples / sec: 261.71
Iteration:    180, Loss function: 9.080, Average Loss: 2.621, avg. samples / sec: 259.81
Iteration:    200, Loss function: 8.659, Average Loss: 2.746, avg. samples / sec: 274.35
Iteration:    220, Loss function: 8.525, Average Loss: 2.865, avg. samples / sec: 281.85
Iteration:    240, Loss function: 8.529, Average Loss: 2.981, avg. samples / sec: 279.61
Iteration:    260, Loss function: 8.846, Average Loss: 3.093, avg. samples / sec: 295.33
Iteration:    280, Loss function: 8.777, Average Loss: 3.204, avg. samples / sec: 278.92
Iteration:    300, Loss function: 8.478, Average Loss: 3.311, avg. samples / sec: 321.18
Iteration:    320, Loss function: 8.354, Average Loss: 3.413, avg. samples / sec: 290.91
Iteration:    340, Loss function: 8.245, Average Loss: 3.510, avg. samples / sec: 331.49
Iteration:    360, Loss function: 8.263, Average Loss: 3.604, avg. samples / sec: 319.91
Iteration:    380, Loss function: 7.809, Average Loss: 3.694, avg. samples / sec: 309.67
Iteration:    400, Loss function: 7.967, Average Loss: 3.778, avg. samples / sec: 314.32
Iteration:    420, Loss function: 7.804, Average Loss: 3.859, avg. samples / sec: 258.44
Iteration:    440, Loss function: 7.943, Average Loss: 3.938, avg. samples / sec: 225.59
Iteration:    460, Loss function: 7.688, Average Loss: 4.013, avg. samples / sec: 284.54
Iteration:    480, Loss function: 7.606, Average Loss: 4.086, avg. samples / sec: 283.58
Iteration:    500, Loss function: 7.586, Average Loss: 4.157, avg. samples / sec: 269.66
Iteration:    520, Loss function: 7.368, Average Loss: 4.224, avg. samples / sec: 289.50
Iteration:    540, Loss function: 7.507, Average Loss: 4.289, avg. samples / sec: 200.44
Iteration:    560, Loss function: 7.430, Average Loss: 4.350, avg. samples / sec: 218.11
Iteration:    580, Loss function: 7.134, Average Loss: 4.411, avg. samples / sec: 236.11
Iteration:    600, Loss function: 7.289, Average Loss: 4.469, avg. samples / sec: 333.50
Iteration:    620, Loss function: 7.040, Average Loss: 4.524, avg. samples / sec: 320.15
Iteration:    640, Loss function: 6.743, Average Loss: 4.577, avg. samples / sec: 328.73
Iteration:    660, Loss function: 7.148, Average Loss: 4.628, avg. samples / sec: 323.91
Iteration:    680, Loss function: 7.249, Average Loss: 4.679, avg. samples / sec: 325.25
Iteration:    700, Loss function: 6.904, Average Loss: 4.728, avg. samples / sec: 272.67
Iteration:    720, Loss function: 6.945, Average Loss: 4.776, avg. samples / sec: 239.88
Iteration:    740, Loss function: 6.857, Average Loss: 4.820, avg. samples / sec: 312.65
Iteration:    760, Loss function: 6.897, Average Loss: 4.862, avg. samples / sec: 266.23
Iteration:    780, Loss function: 6.710, Average Loss: 4.903, avg. samples / sec: 308.38
Iteration:    800, Loss function: 7.100, Average Loss: 4.943, avg. samples / sec: 289.59
Iteration:    820, Loss function: 6.863, Average Loss: 4.980, avg. samples / sec: 332.40
Iteration:    840, Loss function: 6.710, Average Loss: 5.015, avg. samples / sec: 315.36
Iteration:    860, Loss function: 6.820, Average Loss: 5.048, avg. samples / sec: 330.66
Iteration:    880, Loss function: 6.685, Average Loss: 5.081, avg. samples / sec: 311.15
Iteration:    900, Loss function: 6.761, Average Loss: 5.112, avg. samples / sec: 319.57
Iteration:    920, Loss function: 6.502, Average Loss: 5.140, avg. samples / sec: 315.33
Iteration:    940, Loss function: 6.734, Average Loss: 5.169, avg. samples / sec: 324.71
Iteration:    960, Loss function: 6.308, Average Loss: 5.197, avg. samples / sec: 271.62
Iteration:    980, Loss function: 6.338, Average Loss: 5.223, avg. samples / sec: 313.18
Iteration:   1000, Loss function: 6.386, Average Loss: 5.248, avg. samples / sec: 332.20
Iteration:   1020, Loss function: 6.331, Average Loss: 5.271, avg. samples / sec: 204.91
:::MLLOG {"namespace": "", "time_ms": 1639081105453, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081105454, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.460, Average Loss: 5.295, avg. samples / sec: 305.88
Iteration:   1060, Loss function: 6.406, Average Loss: 5.317, avg. samples / sec: 329.16
Iteration:   1080, Loss function: 6.367, Average Loss: 5.338, avg. samples / sec: 318.17
Iteration:   1100, Loss function: 6.287, Average Loss: 5.358, avg. samples / sec: 227.58
Iteration:   1120, Loss function: 6.237, Average Loss: 5.377, avg. samples / sec: 319.90
Iteration:   1140, Loss function: 6.556, Average Loss: 5.396, avg. samples / sec: 320.81
Iteration:   1160, Loss function: 6.301, Average Loss: 5.412, avg. samples / sec: 276.50
Iteration:   1180, Loss function: 6.241, Average Loss: 5.428, avg. samples / sec: 281.07
Iteration:   1200, Loss function: 6.228, Average Loss: 5.443, avg. samples / sec: 336.29
Iteration:   1220, Loss function: 6.238, Average Loss: 5.459, avg. samples / sec: 336.52
Iteration:   1240, Loss function: 6.069, Average Loss: 5.472, avg. samples / sec: 338.60
Iteration:   1260, Loss function: 6.068, Average Loss: 5.485, avg. samples / sec: 330.01
Iteration:   1280, Loss function: 5.910, Average Loss: 5.495, avg. samples / sec: 318.17
Iteration:   1300, Loss function: 6.181, Average Loss: 5.508, avg. samples / sec: 287.92
Iteration:   1320, Loss function: 6.038, Average Loss: 5.520, avg. samples / sec: 324.20
Iteration:   1340, Loss function: 5.848, Average Loss: 5.529, avg. samples / sec: 272.18
Iteration:   1360, Loss function: 6.033, Average Loss: 5.539, avg. samples / sec: 323.85
Iteration:   1380, Loss function: 6.081, Average Loss: 5.548, avg. samples / sec: 320.04
Iteration:   1400, Loss function: 5.936, Average Loss: 5.556, avg. samples / sec: 294.21
Iteration:   1420, Loss function: 5.686, Average Loss: 5.563, avg. samples / sec: 328.62
Iteration:   1440, Loss function: 6.355, Average Loss: 5.570, avg. samples / sec: 290.91
Iteration:   1460, Loss function: 6.120, Average Loss: 5.579, avg. samples / sec: 240.46
Iteration:   1480, Loss function: 5.928, Average Loss: 5.586, avg. samples / sec: 296.21
Iteration:   1500, Loss function: 5.893, Average Loss: 5.595, avg. samples / sec: 329.99
Iteration:   1520, Loss function: 5.902, Average Loss: 5.600, avg. samples / sec: 292.16
Iteration:   1540, Loss function: 6.193, Average Loss: 5.604, avg. samples / sec: 328.79
Iteration:   1560, Loss function: 5.803, Average Loss: 5.609, avg. samples / sec: 326.23
Iteration:   1580, Loss function: 5.674, Average Loss: 5.613, avg. samples / sec: 311.24
Iteration:   1600, Loss function: 6.066, Average Loss: 5.618, avg. samples / sec: 320.57
Iteration:   1620, Loss function: 5.866, Average Loss: 5.623, avg. samples / sec: 295.62
Iteration:   1640, Loss function: 5.898, Average Loss: 5.627, avg. samples / sec: 182.88
Iteration:   1660, Loss function: 5.886, Average Loss: 5.631, avg. samples / sec: 196.25
Iteration:   1680, Loss function: 5.738, Average Loss: 5.633, avg. samples / sec: 295.29
Iteration:   1700, Loss function: 5.305, Average Loss: 5.637, avg. samples / sec: 336.18
Iteration:   1720, Loss function: 5.617, Average Loss: 5.638, avg. samples / sec: 336.11
Iteration:   1740, Loss function: 5.934, Average Loss: 5.641, avg. samples / sec: 333.17
Iteration:   1760, Loss function: 5.302, Average Loss: 5.642, avg. samples / sec: 299.30
Iteration:   1780, Loss function: 5.845, Average Loss: 5.643, avg. samples / sec: 325.95
Iteration:   1800, Loss function: 5.557, Average Loss: 5.645, avg. samples / sec: 318.51
Iteration:   1820, Loss function: 5.876, Average Loss: 5.647, avg. samples / sec: 318.44
Iteration:   1840, Loss function: 5.946, Average Loss: 5.647, avg. samples / sec: 289.13
Iteration:   1860, Loss function: 5.753, Average Loss: 5.646, avg. samples / sec: 210.62
Iteration:   1880, Loss function: 5.846, Average Loss: 5.648, avg. samples / sec: 328.99
Iteration:   1900, Loss function: 5.795, Average Loss: 5.648, avg. samples / sec: 281.61
Iteration:   1920, Loss function: 5.614, Average Loss: 5.648, avg. samples / sec: 322.79
Iteration:   1940, Loss function: 5.830, Average Loss: 5.648, avg. samples / sec: 330.44
Iteration:   1960, Loss function: 5.582, Average Loss: 5.646, avg. samples / sec: 334.07
Iteration:   1980, Loss function: 5.570, Average Loss: 5.645, avg. samples / sec: 301.82
Iteration:   2000, Loss function: 5.587, Average Loss: 5.645, avg. samples / sec: 315.88
Iteration:   2020, Loss function: 5.593, Average Loss: 5.643, avg. samples / sec: 319.79
Iteration:   2040, Loss function: 5.707, Average Loss: 5.642, avg. samples / sec: 328.21
:::MLLOG {"namespace": "", "time_ms": 1639081497358, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081497360, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.457, Average Loss: 5.640, avg. samples / sec: 337.89
Iteration:   2080, Loss function: 5.252, Average Loss: 5.639, avg. samples / sec: 295.29
Iteration:   2100, Loss function: 5.544, Average Loss: 5.637, avg. samples / sec: 333.97
Iteration:   2120, Loss function: 5.531, Average Loss: 5.634, avg. samples / sec: 313.27
Iteration:   2140, Loss function: 5.448, Average Loss: 5.632, avg. samples / sec: 308.60
Iteration:   2160, Loss function: 5.428, Average Loss: 5.630, avg. samples / sec: 314.59
Iteration:   2180, Loss function: 5.329, Average Loss: 5.627, avg. samples / sec: 280.71
Iteration:   2200, Loss function: 5.432, Average Loss: 5.623, avg. samples / sec: 257.66
Iteration:   2220, Loss function: 5.729, Average Loss: 5.621, avg. samples / sec: 333.17
Iteration:   2240, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 324.04
Iteration:   2260, Loss function: 5.492, Average Loss: 5.615, avg. samples / sec: 219.18
Iteration:   2280, Loss function: 5.364, Average Loss: 5.613, avg. samples / sec: 310.07
Iteration:   2300, Loss function: 5.155, Average Loss: 5.610, avg. samples / sec: 320.54
Iteration:   2320, Loss function: 5.302, Average Loss: 5.607, avg. samples / sec: 330.12
Iteration:   2340, Loss function: 5.589, Average Loss: 5.603, avg. samples / sec: 326.33
Iteration:   2360, Loss function: 5.412, Average Loss: 5.599, avg. samples / sec: 333.83
Iteration:   2380, Loss function: 5.381, Average Loss: 5.596, avg. samples / sec: 284.44
Iteration:   2400, Loss function: 5.536, Average Loss: 5.591, avg. samples / sec: 223.86
Iteration:   2420, Loss function: 5.397, Average Loss: 5.587, avg. samples / sec: 274.50
Iteration:   2440, Loss function: 5.398, Average Loss: 5.584, avg. samples / sec: 272.77
Iteration:   2460, Loss function: 5.247, Average Loss: 5.581, avg. samples / sec: 284.74
Iteration:   2480, Loss function: 5.262, Average Loss: 5.578, avg. samples / sec: 328.98
Iteration:   2500, Loss function: 5.297, Average Loss: 5.574, avg. samples / sec: 313.79
Iteration:   2520, Loss function: 5.436, Average Loss: 5.569, avg. samples / sec: 319.32
Iteration:   2540, Loss function: 5.446, Average Loss: 5.566, avg. samples / sec: 312.33
Iteration:   2560, Loss function: 5.272, Average Loss: 5.562, avg. samples / sec: 287.39
Iteration:   2580, Loss function: 5.281, Average Loss: 5.559, avg. samples / sec: 286.21
Iteration:   2600, Loss function: 5.397, Average Loss: 5.556, avg. samples / sec: 338.06
Iteration:   2620, Loss function: 5.524, Average Loss: 5.550, avg. samples / sec: 313.53
Iteration:   2640, Loss function: 5.220, Average Loss: 5.547, avg. samples / sec: 329.30
Iteration:   2660, Loss function: 5.219, Average Loss: 5.543, avg. samples / sec: 310.50
Iteration:   2680, Loss function: 5.115, Average Loss: 5.540, avg. samples / sec: 309.30
Iteration:   2700, Loss function: 4.996, Average Loss: 5.534, avg. samples / sec: 324.92
Iteration:   2720, Loss function: 5.235, Average Loss: 5.530, avg. samples / sec: 257.24
Iteration:   2740, Loss function: 5.066, Average Loss: 5.526, avg. samples / sec: 327.66
Iteration:   2760, Loss function: 5.072, Average Loss: 5.520, avg. samples / sec: 299.87
Iteration:   2780, Loss function: 5.540, Average Loss: 5.516, avg. samples / sec: 329.98
Iteration:   2800, Loss function: 5.292, Average Loss: 5.512, avg. samples / sec: 334.58
Iteration:   2820, Loss function: 5.303, Average Loss: 5.507, avg. samples / sec: 320.19
Iteration:   2840, Loss function: 5.216, Average Loss: 5.503, avg. samples / sec: 320.59
Iteration:   2860, Loss function: 5.210, Average Loss: 5.498, avg. samples / sec: 333.40
Iteration:   2880, Loss function: 5.280, Average Loss: 5.494, avg. samples / sec: 316.23
Iteration:   2900, Loss function: 5.045, Average Loss: 5.490, avg. samples / sec: 233.14
Iteration:   2920, Loss function: 5.209, Average Loss: 5.484, avg. samples / sec: 289.14
Iteration:   2940, Loss function: 4.924, Average Loss: 5.479, avg. samples / sec: 253.18
Iteration:   2960, Loss function: 5.492, Average Loss: 5.474, avg. samples / sec: 305.10
Iteration:   2980, Loss function: 5.163, Average Loss: 5.470, avg. samples / sec: 314.44
Iteration:   3000, Loss function: 5.389, Average Loss: 5.465, avg. samples / sec: 310.58
Iteration:   3020, Loss function: 5.235, Average Loss: 5.459, avg. samples / sec: 336.02
Iteration:   3040, Loss function: 5.250, Average Loss: 5.454, avg. samples / sec: 208.32
Iteration:   3060, Loss function: 5.126, Average Loss: 5.448, avg. samples / sec: 269.68
Iteration:   3080, Loss function: 4.879, Average Loss: 5.442, avg. samples / sec: 274.28
:::MLLOG {"namespace": "", "time_ms": 1639081892166, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081892168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.352, Average Loss: 5.438, avg. samples / sec: 287.62
Iteration:   3120, Loss function: 5.003, Average Loss: 5.433, avg. samples / sec: 305.42
Iteration:   3140, Loss function: 5.169, Average Loss: 5.429, avg. samples / sec: 315.30
Iteration:   3160, Loss function: 5.439, Average Loss: 5.423, avg. samples / sec: 289.86
Iteration:   3180, Loss function: 4.997, Average Loss: 5.418, avg. samples / sec: 303.42
Iteration:   3200, Loss function: 5.199, Average Loss: 5.413, avg. samples / sec: 330.45
Iteration:   3220, Loss function: 5.074, Average Loss: 5.407, avg. samples / sec: 299.11
Iteration:   3240, Loss function: 5.094, Average Loss: 5.402, avg. samples / sec: 323.90
Iteration:   3260, Loss function: 5.033, Average Loss: 5.396, avg. samples / sec: 253.54
Iteration:   3280, Loss function: 4.799, Average Loss: 5.390, avg. samples / sec: 315.47
Iteration:   3300, Loss function: 4.852, Average Loss: 5.384, avg. samples / sec: 331.44
Iteration:   3320, Loss function: 4.849, Average Loss: 5.378, avg. samples / sec: 325.94
Iteration:   3340, Loss function: 5.074, Average Loss: 5.373, avg. samples / sec: 317.38
Iteration:   3360, Loss function: 5.162, Average Loss: 5.367, avg. samples / sec: 305.93
Iteration:   3380, Loss function: 5.044, Average Loss: 5.360, avg. samples / sec: 315.55
Iteration:   3400, Loss function: 4.963, Average Loss: 5.354, avg. samples / sec: 310.99
Iteration:   3420, Loss function: 5.144, Average Loss: 5.349, avg. samples / sec: 328.82
Iteration:   3440, Loss function: 4.954, Average Loss: 5.344, avg. samples / sec: 323.23
Iteration:   3460, Loss function: 5.247, Average Loss: 5.338, avg. samples / sec: 231.77
Iteration:   3480, Loss function: 5.085, Average Loss: 5.333, avg. samples / sec: 329.16
Iteration:   3500, Loss function: 5.136, Average Loss: 5.329, avg. samples / sec: 307.34
Iteration:   3520, Loss function: 5.216, Average Loss: 5.325, avg. samples / sec: 230.51
Iteration:   3540, Loss function: 5.143, Average Loss: 5.321, avg. samples / sec: 275.77
Iteration:   3560, Loss function: 5.026, Average Loss: 5.317, avg. samples / sec: 305.00
Iteration:   3580, Loss function: 4.969, Average Loss: 5.314, avg. samples / sec: 257.37
Iteration:   3600, Loss function: 5.269, Average Loss: 5.307, avg. samples / sec: 302.58
Iteration:   3620, Loss function: 4.863, Average Loss: 5.302, avg. samples / sec: 334.79
Iteration:   3640, Loss function: 4.712, Average Loss: 5.296, avg. samples / sec: 314.53
Iteration:   3660, Loss function: 5.032, Average Loss: 5.291, avg. samples / sec: 314.05
Iteration:   3680, Loss function: 5.068, Average Loss: 5.285, avg. samples / sec: 267.46
Iteration:   3700, Loss function: 5.007, Average Loss: 5.280, avg. samples / sec: 199.45
Iteration:   3720, Loss function: 5.166, Average Loss: 5.274, avg. samples / sec: 316.02
Iteration:   3740, Loss function: 5.235, Average Loss: 5.270, avg. samples / sec: 314.21
Iteration:   3760, Loss function: 5.081, Average Loss: 5.265, avg. samples / sec: 255.78
Iteration:   3780, Loss function: 5.095, Average Loss: 5.261, avg. samples / sec: 326.77
Iteration:   3800, Loss function: 5.059, Average Loss: 5.258, avg. samples / sec: 329.15
Iteration:   3820, Loss function: 5.258, Average Loss: 5.253, avg. samples / sec: 327.18
Iteration:   3840, Loss function: 4.921, Average Loss: 5.249, avg. samples / sec: 237.95
Iteration:   3860, Loss function: 4.924, Average Loss: 5.244, avg. samples / sec: 235.51
Iteration:   3880, Loss function: 4.999, Average Loss: 5.238, avg. samples / sec: 230.78
Iteration:   3900, Loss function: 4.974, Average Loss: 5.233, avg. samples / sec: 221.93
Iteration:   3920, Loss function: 5.037, Average Loss: 5.227, avg. samples / sec: 271.59
Iteration:   3940, Loss function: 5.080, Average Loss: 5.222, avg. samples / sec: 284.19
Iteration:   3960, Loss function: 4.702, Average Loss: 5.218, avg. samples / sec: 337.59
Iteration:   3980, Loss function: 4.821, Average Loss: 5.213, avg. samples / sec: 329.16
Iteration:   4000, Loss function: 5.092, Average Loss: 5.209, avg. samples / sec: 275.09
Iteration:   4020, Loss function: 5.089, Average Loss: 5.204, avg. samples / sec: 281.46
Iteration:   4040, Loss function: 5.171, Average Loss: 5.201, avg. samples / sec: 302.06
Iteration:   4060, Loss function: 4.981, Average Loss: 5.197, avg. samples / sec: 283.89
Iteration:   4080, Loss function: 5.050, Average Loss: 5.193, avg. samples / sec: 240.36
Iteration:   4100, Loss function: 5.004, Average Loss: 5.190, avg. samples / sec: 285.42
:::MLLOG {"namespace": "", "time_ms": 1639082298837, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082298839, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.099, Average Loss: 5.187, avg. samples / sec: 315.46
Iteration:   4140, Loss function: 4.851, Average Loss: 5.182, avg. samples / sec: 326.85
Iteration:   4160, Loss function: 4.945, Average Loss: 5.176, avg. samples / sec: 337.60
Iteration:   4180, Loss function: 5.011, Average Loss: 5.170, avg. samples / sec: 329.06
Iteration:   4200, Loss function: 4.860, Average Loss: 5.165, avg. samples / sec: 316.18
Iteration:   4220, Loss function: 4.746, Average Loss: 5.160, avg. samples / sec: 286.96
Iteration:   4240, Loss function: 4.976, Average Loss: 5.155, avg. samples / sec: 309.18
Iteration:   4260, Loss function: 5.051, Average Loss: 5.150, avg. samples / sec: 320.31
Iteration:   4280, Loss function: 5.128, Average Loss: 5.144, avg. samples / sec: 238.69
Iteration:   4300, Loss function: 4.898, Average Loss: 5.137, avg. samples / sec: 274.52
Iteration:   4320, Loss function: 4.925, Average Loss: 5.132, avg. samples / sec: 190.94
Iteration:   4340, Loss function: 4.742, Average Loss: 5.127, avg. samples / sec: 229.46
Iteration:   4360, Loss function: 4.849, Average Loss: 5.123, avg. samples / sec: 295.63
Iteration:   4380, Loss function: 5.109, Average Loss: 5.118, avg. samples / sec: 295.34
Iteration:   4400, Loss function: 4.947, Average Loss: 5.114, avg. samples / sec: 321.36
Iteration:   4420, Loss function: 5.115, Average Loss: 5.110, avg. samples / sec: 289.91
Iteration:   4440, Loss function: 4.892, Average Loss: 5.105, avg. samples / sec: 263.98
Iteration:   4460, Loss function: 5.043, Average Loss: 5.101, avg. samples / sec: 323.70
Iteration:   4480, Loss function: 4.920, Average Loss: 5.097, avg. samples / sec: 342.68
Iteration:   4500, Loss function: 4.779, Average Loss: 5.093, avg. samples / sec: 305.14
Iteration:   4520, Loss function: 4.799, Average Loss: 5.089, avg. samples / sec: 269.13
Iteration:   4540, Loss function: 5.047, Average Loss: 5.085, avg. samples / sec: 267.26
Iteration:   4560, Loss function: 4.807, Average Loss: 5.082, avg. samples / sec: 239.68
Iteration:   4580, Loss function: 4.757, Average Loss: 5.079, avg. samples / sec: 240.83
Iteration:   4600, Loss function: 4.927, Average Loss: 5.076, avg. samples / sec: 216.55
Iteration:   4620, Loss function: 4.815, Average Loss: 5.071, avg. samples / sec: 261.92
Iteration:   4640, Loss function: 4.769, Average Loss: 5.067, avg. samples / sec: 311.69
Iteration:   4660, Loss function: 4.897, Average Loss: 5.064, avg. samples / sec: 289.29
Iteration:   4680, Loss function: 5.236, Average Loss: 5.059, avg. samples / sec: 333.35
Iteration:   4700, Loss function: 4.579, Average Loss: 5.055, avg. samples / sec: 322.21
Iteration:   4720, Loss function: 4.790, Average Loss: 5.051, avg. samples / sec: 320.58
Iteration:   4740, Loss function: 4.794, Average Loss: 5.046, avg. samples / sec: 324.34
Iteration:   4760, Loss function: 4.691, Average Loss: 5.042, avg. samples / sec: 327.87
Iteration:   4780, Loss function: 5.129, Average Loss: 5.038, avg. samples / sec: 334.68
Iteration:   4800, Loss function: 4.888, Average Loss: 5.035, avg. samples / sec: 273.61
Iteration:   4820, Loss function: 4.776, Average Loss: 5.030, avg. samples / sec: 278.96
Iteration:   4840, Loss function: 5.097, Average Loss: 5.028, avg. samples / sec: 288.78
Iteration:   4860, Loss function: 4.737, Average Loss: 5.022, avg. samples / sec: 267.92
Iteration:   4880, Loss function: 5.260, Average Loss: 5.019, avg. samples / sec: 257.39
Iteration:   4900, Loss function: 4.506, Average Loss: 5.015, avg. samples / sec: 281.50
Iteration:   4920, Loss function: 4.759, Average Loss: 5.013, avg. samples / sec: 216.66
Iteration:   4940, Loss function: 4.764, Average Loss: 5.009, avg. samples / sec: 208.48
Iteration:   4960, Loss function: 4.616, Average Loss: 5.005, avg. samples / sec: 276.66
Iteration:   4980, Loss function: 4.660, Average Loss: 5.002, avg. samples / sec: 190.62
Iteration:   5000, Loss function: 4.953, Average Loss: 4.998, avg. samples / sec: 315.03
Iteration:   5020, Loss function: 5.131, Average Loss: 4.995, avg. samples / sec: 306.76
Iteration:   5040, Loss function: 4.694, Average Loss: 4.992, avg. samples / sec: 317.31
Iteration:   5060, Loss function: 4.891, Average Loss: 4.988, avg. samples / sec: 320.60
Iteration:   5080, Loss function: 4.479, Average Loss: 4.984, avg. samples / sec: 328.69
Iteration:   5100, Loss function: 4.743, Average Loss: 4.981, avg. samples / sec: 319.23
Iteration:   5120, Loss function: 4.530, Average Loss: 4.977, avg. samples / sec: 328.52
Iteration:   5140, Loss function: 4.811, Average Loss: 4.973, avg. samples / sec: 329.13
:::MLLOG {"namespace": "", "time_ms": 1639082712910, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.98 s
:::MLLOG {"namespace": "", "time_ms": 1639082809069, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082809073, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082809111, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.15s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.16s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10413
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21170
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09396
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18317
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20768
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20768
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10413 AP goal: 0.10000
Iteration:   5160, Loss function: 4.862, Average Loss: 4.969, avg. samples / sec: 21.72
:::MLLOG {"namespace": "", "time_ms": 1639082816789, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082816790, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10412969195416479, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082816790, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082818002, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:59 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:59 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580091, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580198, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3645248002, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3645248002
:::MLLOG {"namespace": "", "time_ms": 1639080582167, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582168, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582172, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080686289, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080686289, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080687976, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080687978, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080688400, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080688401, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080688403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.567, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 20.972, Average Loss: 0.452, avg. samples / sec: 303.49
Iteration:     40, Loss function: 20.666, Average Loss: 0.854, avg. samples / sec: 283.81
Iteration:     60, Loss function: 20.438, Average Loss: 1.244, avg. samples / sec: 244.70
Iteration:     80, Loss function: 20.109, Average Loss: 1.619, avg. samples / sec: 225.91
Iteration:    100, Loss function: 16.764, Average Loss: 1.959, avg. samples / sec: 228.75
Iteration:    120, Loss function: 11.995, Average Loss: 2.185, avg. samples / sec: 266.69
Iteration:    140, Loss function: 10.094, Average Loss: 2.349, avg. samples / sec: 255.53
Iteration:    160, Loss function: 9.447, Average Loss: 2.491, avg. samples / sec: 261.71
Iteration:    180, Loss function: 9.080, Average Loss: 2.621, avg. samples / sec: 259.81
Iteration:    200, Loss function: 8.659, Average Loss: 2.746, avg. samples / sec: 274.35
Iteration:    220, Loss function: 8.525, Average Loss: 2.865, avg. samples / sec: 281.85
Iteration:    240, Loss function: 8.529, Average Loss: 2.981, avg. samples / sec: 279.61
Iteration:    260, Loss function: 8.846, Average Loss: 3.093, avg. samples / sec: 295.33
Iteration:    280, Loss function: 8.777, Average Loss: 3.204, avg. samples / sec: 278.92
Iteration:    300, Loss function: 8.478, Average Loss: 3.311, avg. samples / sec: 321.18
Iteration:    320, Loss function: 8.354, Average Loss: 3.413, avg. samples / sec: 290.91
Iteration:    340, Loss function: 8.245, Average Loss: 3.510, avg. samples / sec: 331.49
Iteration:    360, Loss function: 8.263, Average Loss: 3.604, avg. samples / sec: 319.91
Iteration:    380, Loss function: 7.809, Average Loss: 3.694, avg. samples / sec: 309.67
Iteration:    400, Loss function: 7.967, Average Loss: 3.778, avg. samples / sec: 314.32
Iteration:    420, Loss function: 7.804, Average Loss: 3.859, avg. samples / sec: 258.44
Iteration:    440, Loss function: 7.943, Average Loss: 3.938, avg. samples / sec: 225.59
Iteration:    460, Loss function: 7.688, Average Loss: 4.013, avg. samples / sec: 284.54
Iteration:    480, Loss function: 7.606, Average Loss: 4.086, avg. samples / sec: 283.58
Iteration:    500, Loss function: 7.586, Average Loss: 4.157, avg. samples / sec: 269.66
Iteration:    520, Loss function: 7.368, Average Loss: 4.224, avg. samples / sec: 289.50
Iteration:    540, Loss function: 7.507, Average Loss: 4.289, avg. samples / sec: 200.44
Iteration:    560, Loss function: 7.430, Average Loss: 4.350, avg. samples / sec: 218.11
Iteration:    580, Loss function: 7.134, Average Loss: 4.411, avg. samples / sec: 236.11
Iteration:    600, Loss function: 7.289, Average Loss: 4.469, avg. samples / sec: 333.50
Iteration:    620, Loss function: 7.040, Average Loss: 4.524, avg. samples / sec: 320.15
Iteration:    640, Loss function: 6.743, Average Loss: 4.577, avg. samples / sec: 328.73
Iteration:    660, Loss function: 7.148, Average Loss: 4.628, avg. samples / sec: 323.91
Iteration:    680, Loss function: 7.249, Average Loss: 4.679, avg. samples / sec: 325.25
Iteration:    700, Loss function: 6.904, Average Loss: 4.728, avg. samples / sec: 272.67
Iteration:    720, Loss function: 6.945, Average Loss: 4.776, avg. samples / sec: 239.88
Iteration:    740, Loss function: 6.857, Average Loss: 4.820, avg. samples / sec: 312.65
Iteration:    760, Loss function: 6.897, Average Loss: 4.862, avg. samples / sec: 266.23
Iteration:    780, Loss function: 6.710, Average Loss: 4.903, avg. samples / sec: 308.38
Iteration:    800, Loss function: 7.100, Average Loss: 4.943, avg. samples / sec: 289.59
Iteration:    820, Loss function: 6.863, Average Loss: 4.980, avg. samples / sec: 332.40
Iteration:    840, Loss function: 6.710, Average Loss: 5.015, avg. samples / sec: 315.36
Iteration:    860, Loss function: 6.820, Average Loss: 5.048, avg. samples / sec: 330.66
Iteration:    880, Loss function: 6.685, Average Loss: 5.081, avg. samples / sec: 311.15
Iteration:    900, Loss function: 6.761, Average Loss: 5.112, avg. samples / sec: 319.57
Iteration:    920, Loss function: 6.502, Average Loss: 5.140, avg. samples / sec: 315.33
Iteration:    940, Loss function: 6.734, Average Loss: 5.169, avg. samples / sec: 324.71
Iteration:    960, Loss function: 6.308, Average Loss: 5.197, avg. samples / sec: 271.62
Iteration:    980, Loss function: 6.338, Average Loss: 5.223, avg. samples / sec: 313.18
Iteration:   1000, Loss function: 6.386, Average Loss: 5.248, avg. samples / sec: 332.20
Iteration:   1020, Loss function: 6.331, Average Loss: 5.271, avg. samples / sec: 204.91
:::MLLOG {"namespace": "", "time_ms": 1639081105453, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081105454, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.460, Average Loss: 5.295, avg. samples / sec: 305.88
Iteration:   1060, Loss function: 6.406, Average Loss: 5.317, avg. samples / sec: 329.16
Iteration:   1080, Loss function: 6.367, Average Loss: 5.338, avg. samples / sec: 318.17
Iteration:   1100, Loss function: 6.287, Average Loss: 5.358, avg. samples / sec: 227.58
Iteration:   1120, Loss function: 6.237, Average Loss: 5.377, avg. samples / sec: 319.90
Iteration:   1140, Loss function: 6.556, Average Loss: 5.396, avg. samples / sec: 320.81
Iteration:   1160, Loss function: 6.301, Average Loss: 5.412, avg. samples / sec: 276.50
Iteration:   1180, Loss function: 6.241, Average Loss: 5.428, avg. samples / sec: 281.07
Iteration:   1200, Loss function: 6.228, Average Loss: 5.443, avg. samples / sec: 336.29
Iteration:   1220, Loss function: 6.238, Average Loss: 5.459, avg. samples / sec: 336.52
Iteration:   1240, Loss function: 6.069, Average Loss: 5.472, avg. samples / sec: 338.60
Iteration:   1260, Loss function: 6.068, Average Loss: 5.485, avg. samples / sec: 330.01
Iteration:   1280, Loss function: 5.910, Average Loss: 5.495, avg. samples / sec: 318.17
Iteration:   1300, Loss function: 6.181, Average Loss: 5.508, avg. samples / sec: 287.92
Iteration:   1320, Loss function: 6.038, Average Loss: 5.520, avg. samples / sec: 324.20
Iteration:   1340, Loss function: 5.848, Average Loss: 5.529, avg. samples / sec: 272.18
Iteration:   1360, Loss function: 6.033, Average Loss: 5.539, avg. samples / sec: 323.85
Iteration:   1380, Loss function: 6.081, Average Loss: 5.548, avg. samples / sec: 320.04
Iteration:   1400, Loss function: 5.936, Average Loss: 5.556, avg. samples / sec: 294.21
Iteration:   1420, Loss function: 5.686, Average Loss: 5.563, avg. samples / sec: 328.62
Iteration:   1440, Loss function: 6.355, Average Loss: 5.570, avg. samples / sec: 290.91
Iteration:   1460, Loss function: 6.120, Average Loss: 5.579, avg. samples / sec: 240.46
Iteration:   1480, Loss function: 5.928, Average Loss: 5.586, avg. samples / sec: 296.21
Iteration:   1500, Loss function: 5.893, Average Loss: 5.595, avg. samples / sec: 329.99
Iteration:   1520, Loss function: 5.902, Average Loss: 5.600, avg. samples / sec: 292.16
Iteration:   1540, Loss function: 6.193, Average Loss: 5.604, avg. samples / sec: 328.79
Iteration:   1560, Loss function: 5.803, Average Loss: 5.609, avg. samples / sec: 326.23
Iteration:   1580, Loss function: 5.674, Average Loss: 5.613, avg. samples / sec: 311.24
Iteration:   1600, Loss function: 6.066, Average Loss: 5.618, avg. samples / sec: 320.57
Iteration:   1620, Loss function: 5.866, Average Loss: 5.623, avg. samples / sec: 295.62
Iteration:   1640, Loss function: 5.898, Average Loss: 5.627, avg. samples / sec: 182.88
Iteration:   1660, Loss function: 5.886, Average Loss: 5.631, avg. samples / sec: 196.25
Iteration:   1680, Loss function: 5.738, Average Loss: 5.633, avg. samples / sec: 295.29
Iteration:   1700, Loss function: 5.305, Average Loss: 5.637, avg. samples / sec: 336.18
Iteration:   1720, Loss function: 5.617, Average Loss: 5.638, avg. samples / sec: 336.11
Iteration:   1740, Loss function: 5.934, Average Loss: 5.641, avg. samples / sec: 333.17
Iteration:   1760, Loss function: 5.302, Average Loss: 5.642, avg. samples / sec: 299.30
Iteration:   1780, Loss function: 5.845, Average Loss: 5.643, avg. samples / sec: 325.95
Iteration:   1800, Loss function: 5.557, Average Loss: 5.645, avg. samples / sec: 318.51
Iteration:   1820, Loss function: 5.876, Average Loss: 5.647, avg. samples / sec: 318.44
Iteration:   1840, Loss function: 5.946, Average Loss: 5.647, avg. samples / sec: 289.13
Iteration:   1860, Loss function: 5.753, Average Loss: 5.646, avg. samples / sec: 210.62
Iteration:   1880, Loss function: 5.846, Average Loss: 5.648, avg. samples / sec: 328.99
Iteration:   1900, Loss function: 5.795, Average Loss: 5.648, avg. samples / sec: 281.61
Iteration:   1920, Loss function: 5.614, Average Loss: 5.648, avg. samples / sec: 322.79
Iteration:   1940, Loss function: 5.830, Average Loss: 5.648, avg. samples / sec: 330.44
Iteration:   1960, Loss function: 5.582, Average Loss: 5.646, avg. samples / sec: 334.07
Iteration:   1980, Loss function: 5.570, Average Loss: 5.645, avg. samples / sec: 301.82
Iteration:   2000, Loss function: 5.587, Average Loss: 5.645, avg. samples / sec: 315.88
Iteration:   2020, Loss function: 5.593, Average Loss: 5.643, avg. samples / sec: 319.79
Iteration:   2040, Loss function: 5.707, Average Loss: 5.642, avg. samples / sec: 328.21
:::MLLOG {"namespace": "", "time_ms": 1639081497358, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081497360, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.457, Average Loss: 5.640, avg. samples / sec: 337.89
Iteration:   2080, Loss function: 5.252, Average Loss: 5.639, avg. samples / sec: 295.29
Iteration:   2100, Loss function: 5.544, Average Loss: 5.637, avg. samples / sec: 333.97
Iteration:   2120, Loss function: 5.531, Average Loss: 5.634, avg. samples / sec: 313.27
Iteration:   2140, Loss function: 5.448, Average Loss: 5.632, avg. samples / sec: 308.60
Iteration:   2160, Loss function: 5.428, Average Loss: 5.630, avg. samples / sec: 314.59
Iteration:   2180, Loss function: 5.329, Average Loss: 5.627, avg. samples / sec: 280.71
Iteration:   2200, Loss function: 5.432, Average Loss: 5.623, avg. samples / sec: 257.66
Iteration:   2220, Loss function: 5.729, Average Loss: 5.621, avg. samples / sec: 333.17
Iteration:   2240, Loss function: 5.401, Average Loss: 5.618, avg. samples / sec: 324.04
Iteration:   2260, Loss function: 5.492, Average Loss: 5.615, avg. samples / sec: 219.18
Iteration:   2280, Loss function: 5.364, Average Loss: 5.613, avg. samples / sec: 310.07
Iteration:   2300, Loss function: 5.155, Average Loss: 5.610, avg. samples / sec: 320.54
Iteration:   2320, Loss function: 5.302, Average Loss: 5.607, avg. samples / sec: 330.12
Iteration:   2340, Loss function: 5.589, Average Loss: 5.603, avg. samples / sec: 326.33
Iteration:   2360, Loss function: 5.412, Average Loss: 5.599, avg. samples / sec: 333.83
Iteration:   2380, Loss function: 5.381, Average Loss: 5.596, avg. samples / sec: 284.44
Iteration:   2400, Loss function: 5.536, Average Loss: 5.591, avg. samples / sec: 223.86
Iteration:   2420, Loss function: 5.397, Average Loss: 5.587, avg. samples / sec: 274.50
Iteration:   2440, Loss function: 5.398, Average Loss: 5.584, avg. samples / sec: 272.77
Iteration:   2460, Loss function: 5.247, Average Loss: 5.581, avg. samples / sec: 284.74
Iteration:   2480, Loss function: 5.262, Average Loss: 5.578, avg. samples / sec: 328.98
Iteration:   2500, Loss function: 5.297, Average Loss: 5.574, avg. samples / sec: 313.79
Iteration:   2520, Loss function: 5.436, Average Loss: 5.569, avg. samples / sec: 319.32
Iteration:   2540, Loss function: 5.446, Average Loss: 5.566, avg. samples / sec: 312.33
Iteration:   2560, Loss function: 5.272, Average Loss: 5.562, avg. samples / sec: 287.39
Iteration:   2580, Loss function: 5.281, Average Loss: 5.559, avg. samples / sec: 286.21
Iteration:   2600, Loss function: 5.397, Average Loss: 5.556, avg. samples / sec: 338.06
Iteration:   2620, Loss function: 5.524, Average Loss: 5.550, avg. samples / sec: 313.53
Iteration:   2640, Loss function: 5.220, Average Loss: 5.547, avg. samples / sec: 329.30
Iteration:   2660, Loss function: 5.219, Average Loss: 5.543, avg. samples / sec: 310.50
Iteration:   2680, Loss function: 5.115, Average Loss: 5.540, avg. samples / sec: 309.30
Iteration:   2700, Loss function: 4.996, Average Loss: 5.534, avg. samples / sec: 324.92
Iteration:   2720, Loss function: 5.235, Average Loss: 5.530, avg. samples / sec: 257.24
Iteration:   2740, Loss function: 5.066, Average Loss: 5.526, avg. samples / sec: 327.66
Iteration:   2760, Loss function: 5.072, Average Loss: 5.520, avg. samples / sec: 299.87
Iteration:   2780, Loss function: 5.540, Average Loss: 5.516, avg. samples / sec: 329.98
Iteration:   2800, Loss function: 5.292, Average Loss: 5.512, avg. samples / sec: 334.58
Iteration:   2820, Loss function: 5.303, Average Loss: 5.507, avg. samples / sec: 320.19
Iteration:   2840, Loss function: 5.216, Average Loss: 5.503, avg. samples / sec: 320.59
Iteration:   2860, Loss function: 5.210, Average Loss: 5.498, avg. samples / sec: 333.40
Iteration:   2880, Loss function: 5.280, Average Loss: 5.494, avg. samples / sec: 316.23
Iteration:   2900, Loss function: 5.045, Average Loss: 5.490, avg. samples / sec: 233.14
Iteration:   2920, Loss function: 5.209, Average Loss: 5.484, avg. samples / sec: 289.14
Iteration:   2940, Loss function: 4.924, Average Loss: 5.479, avg. samples / sec: 253.18
Iteration:   2960, Loss function: 5.492, Average Loss: 5.474, avg. samples / sec: 305.10
Iteration:   2980, Loss function: 5.163, Average Loss: 5.470, avg. samples / sec: 314.44
Iteration:   3000, Loss function: 5.389, Average Loss: 5.465, avg. samples / sec: 310.58
Iteration:   3020, Loss function: 5.235, Average Loss: 5.459, avg. samples / sec: 336.02
Iteration:   3040, Loss function: 5.250, Average Loss: 5.454, avg. samples / sec: 208.32
Iteration:   3060, Loss function: 5.126, Average Loss: 5.448, avg. samples / sec: 269.68
Iteration:   3080, Loss function: 4.879, Average Loss: 5.442, avg. samples / sec: 274.28
:::MLLOG {"namespace": "", "time_ms": 1639081892166, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081892168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.352, Average Loss: 5.438, avg. samples / sec: 287.62
Iteration:   3120, Loss function: 5.003, Average Loss: 5.433, avg. samples / sec: 305.42
Iteration:   3140, Loss function: 5.169, Average Loss: 5.429, avg. samples / sec: 315.30
Iteration:   3160, Loss function: 5.439, Average Loss: 5.423, avg. samples / sec: 289.86
Iteration:   3180, Loss function: 4.997, Average Loss: 5.418, avg. samples / sec: 303.42
Iteration:   3200, Loss function: 5.199, Average Loss: 5.413, avg. samples / sec: 330.45
Iteration:   3220, Loss function: 5.074, Average Loss: 5.407, avg. samples / sec: 299.11
Iteration:   3240, Loss function: 5.094, Average Loss: 5.402, avg. samples / sec: 323.90
Iteration:   3260, Loss function: 5.033, Average Loss: 5.396, avg. samples / sec: 253.54
Iteration:   3280, Loss function: 4.799, Average Loss: 5.390, avg. samples / sec: 315.47
Iteration:   3300, Loss function: 4.852, Average Loss: 5.384, avg. samples / sec: 331.44
Iteration:   3320, Loss function: 4.849, Average Loss: 5.378, avg. samples / sec: 325.94
Iteration:   3340, Loss function: 5.074, Average Loss: 5.373, avg. samples / sec: 317.38
Iteration:   3360, Loss function: 5.162, Average Loss: 5.367, avg. samples / sec: 305.93
Iteration:   3380, Loss function: 5.044, Average Loss: 5.360, avg. samples / sec: 315.55
Iteration:   3400, Loss function: 4.963, Average Loss: 5.354, avg. samples / sec: 310.99
Iteration:   3420, Loss function: 5.144, Average Loss: 5.349, avg. samples / sec: 328.82
Iteration:   3440, Loss function: 4.954, Average Loss: 5.344, avg. samples / sec: 323.23
Iteration:   3460, Loss function: 5.247, Average Loss: 5.338, avg. samples / sec: 231.77
Iteration:   3480, Loss function: 5.085, Average Loss: 5.333, avg. samples / sec: 329.16
Iteration:   3500, Loss function: 5.136, Average Loss: 5.329, avg. samples / sec: 307.34
Iteration:   3520, Loss function: 5.216, Average Loss: 5.325, avg. samples / sec: 230.51
Iteration:   3540, Loss function: 5.143, Average Loss: 5.321, avg. samples / sec: 275.77
Iteration:   3560, Loss function: 5.026, Average Loss: 5.317, avg. samples / sec: 305.00
Iteration:   3580, Loss function: 4.969, Average Loss: 5.314, avg. samples / sec: 257.37
Iteration:   3600, Loss function: 5.269, Average Loss: 5.307, avg. samples / sec: 302.58
Iteration:   3620, Loss function: 4.863, Average Loss: 5.302, avg. samples / sec: 334.79
Iteration:   3640, Loss function: 4.712, Average Loss: 5.296, avg. samples / sec: 314.53
Iteration:   3660, Loss function: 5.032, Average Loss: 5.291, avg. samples / sec: 314.05
Iteration:   3680, Loss function: 5.068, Average Loss: 5.285, avg. samples / sec: 267.46
Iteration:   3700, Loss function: 5.007, Average Loss: 5.280, avg. samples / sec: 199.45
Iteration:   3720, Loss function: 5.166, Average Loss: 5.274, avg. samples / sec: 316.02
Iteration:   3740, Loss function: 5.235, Average Loss: 5.270, avg. samples / sec: 314.21
Iteration:   3760, Loss function: 5.081, Average Loss: 5.265, avg. samples / sec: 255.78
Iteration:   3780, Loss function: 5.095, Average Loss: 5.261, avg. samples / sec: 326.77
Iteration:   3800, Loss function: 5.059, Average Loss: 5.258, avg. samples / sec: 329.15
Iteration:   3820, Loss function: 5.258, Average Loss: 5.253, avg. samples / sec: 327.18
Iteration:   3840, Loss function: 4.921, Average Loss: 5.249, avg. samples / sec: 237.95
Iteration:   3860, Loss function: 4.924, Average Loss: 5.244, avg. samples / sec: 235.51
Iteration:   3880, Loss function: 4.999, Average Loss: 5.238, avg. samples / sec: 230.78
Iteration:   3900, Loss function: 4.974, Average Loss: 5.233, avg. samples / sec: 221.93
Iteration:   3920, Loss function: 5.037, Average Loss: 5.227, avg. samples / sec: 271.59
Iteration:   3940, Loss function: 5.080, Average Loss: 5.222, avg. samples / sec: 284.19
Iteration:   3960, Loss function: 4.702, Average Loss: 5.218, avg. samples / sec: 337.59
Iteration:   3980, Loss function: 4.821, Average Loss: 5.213, avg. samples / sec: 329.16
Iteration:   4000, Loss function: 5.092, Average Loss: 5.209, avg. samples / sec: 275.09
Iteration:   4020, Loss function: 5.089, Average Loss: 5.204, avg. samples / sec: 281.46
Iteration:   4040, Loss function: 5.171, Average Loss: 5.201, avg. samples / sec: 302.06
Iteration:   4060, Loss function: 4.981, Average Loss: 5.197, avg. samples / sec: 283.89
Iteration:   4080, Loss function: 5.050, Average Loss: 5.193, avg. samples / sec: 240.36
Iteration:   4100, Loss function: 5.004, Average Loss: 5.190, avg. samples / sec: 285.42
:::MLLOG {"namespace": "", "time_ms": 1639082298837, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082298839, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.099, Average Loss: 5.187, avg. samples / sec: 315.46
Iteration:   4140, Loss function: 4.851, Average Loss: 5.182, avg. samples / sec: 326.85
Iteration:   4160, Loss function: 4.945, Average Loss: 5.176, avg. samples / sec: 337.60
Iteration:   4180, Loss function: 5.011, Average Loss: 5.170, avg. samples / sec: 329.06
Iteration:   4200, Loss function: 4.860, Average Loss: 5.165, avg. samples / sec: 316.18
Iteration:   4220, Loss function: 4.746, Average Loss: 5.160, avg. samples / sec: 286.96
Iteration:   4240, Loss function: 4.976, Average Loss: 5.155, avg. samples / sec: 309.18
Iteration:   4260, Loss function: 5.051, Average Loss: 5.150, avg. samples / sec: 320.31
Iteration:   4280, Loss function: 5.128, Average Loss: 5.144, avg. samples / sec: 238.69
Iteration:   4300, Loss function: 4.898, Average Loss: 5.137, avg. samples / sec: 274.52
Iteration:   4320, Loss function: 4.925, Average Loss: 5.132, avg. samples / sec: 190.94
Iteration:   4340, Loss function: 4.742, Average Loss: 5.127, avg. samples / sec: 229.46
Iteration:   4360, Loss function: 4.849, Average Loss: 5.123, avg. samples / sec: 295.63
Iteration:   4380, Loss function: 5.109, Average Loss: 5.118, avg. samples / sec: 295.34
Iteration:   4400, Loss function: 4.947, Average Loss: 5.114, avg. samples / sec: 321.36
Iteration:   4420, Loss function: 5.115, Average Loss: 5.110, avg. samples / sec: 289.91
Iteration:   4440, Loss function: 4.892, Average Loss: 5.105, avg. samples / sec: 263.98
Iteration:   4460, Loss function: 5.043, Average Loss: 5.101, avg. samples / sec: 323.70
Iteration:   4480, Loss function: 4.920, Average Loss: 5.097, avg. samples / sec: 342.68
Iteration:   4500, Loss function: 4.779, Average Loss: 5.093, avg. samples / sec: 305.14
Iteration:   4520, Loss function: 4.799, Average Loss: 5.089, avg. samples / sec: 269.13
Iteration:   4540, Loss function: 5.047, Average Loss: 5.085, avg. samples / sec: 267.26
Iteration:   4560, Loss function: 4.807, Average Loss: 5.082, avg. samples / sec: 239.68
Iteration:   4580, Loss function: 4.757, Average Loss: 5.079, avg. samples / sec: 240.83
Iteration:   4600, Loss function: 4.927, Average Loss: 5.076, avg. samples / sec: 216.55
Iteration:   4620, Loss function: 4.815, Average Loss: 5.071, avg. samples / sec: 261.92
Iteration:   4640, Loss function: 4.769, Average Loss: 5.067, avg. samples / sec: 311.69
Iteration:   4660, Loss function: 4.897, Average Loss: 5.064, avg. samples / sec: 289.29
Iteration:   4680, Loss function: 5.236, Average Loss: 5.059, avg. samples / sec: 333.35
Iteration:   4700, Loss function: 4.579, Average Loss: 5.055, avg. samples / sec: 322.21
Iteration:   4720, Loss function: 4.790, Average Loss: 5.051, avg. samples / sec: 320.58
Iteration:   4740, Loss function: 4.794, Average Loss: 5.046, avg. samples / sec: 324.34
Iteration:   4760, Loss function: 4.691, Average Loss: 5.042, avg. samples / sec: 327.87
Iteration:   4780, Loss function: 5.129, Average Loss: 5.038, avg. samples / sec: 334.68
Iteration:   4800, Loss function: 4.888, Average Loss: 5.035, avg. samples / sec: 273.61
Iteration:   4820, Loss function: 4.776, Average Loss: 5.030, avg. samples / sec: 278.96
Iteration:   4840, Loss function: 5.097, Average Loss: 5.028, avg. samples / sec: 288.78
Iteration:   4860, Loss function: 4.737, Average Loss: 5.022, avg. samples / sec: 267.92
Iteration:   4880, Loss function: 5.260, Average Loss: 5.019, avg. samples / sec: 257.39
Iteration:   4900, Loss function: 4.506, Average Loss: 5.015, avg. samples / sec: 281.50
Iteration:   4920, Loss function: 4.759, Average Loss: 5.013, avg. samples / sec: 216.66
Iteration:   4940, Loss function: 4.764, Average Loss: 5.009, avg. samples / sec: 208.48
Iteration:   4960, Loss function: 4.616, Average Loss: 5.005, avg. samples / sec: 276.66
Iteration:   4980, Loss function: 4.660, Average Loss: 5.002, avg. samples / sec: 190.62
Iteration:   5000, Loss function: 4.953, Average Loss: 4.998, avg. samples / sec: 315.03
Iteration:   5020, Loss function: 5.131, Average Loss: 4.995, avg. samples / sec: 306.76
Iteration:   5040, Loss function: 4.694, Average Loss: 4.992, avg. samples / sec: 317.31
Iteration:   5060, Loss function: 4.891, Average Loss: 4.988, avg. samples / sec: 320.60
Iteration:   5080, Loss function: 4.479, Average Loss: 4.984, avg. samples / sec: 328.69
Iteration:   5100, Loss function: 4.743, Average Loss: 4.981, avg. samples / sec: 319.23
Iteration:   5120, Loss function: 4.530, Average Loss: 4.977, avg. samples / sec: 328.52
Iteration:   5140, Loss function: 4.811, Average Loss: 4.973, avg. samples / sec: 329.13
:::MLLOG {"namespace": "", "time_ms": 1639082712910, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.98 s
:::MLLOG {"namespace": "", "time_ms": 1639082809069, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082809073, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082809111, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.15s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.16s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10413
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21170
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09396
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18317
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13362
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20768
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20768
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10413 AP goal: 0.10000
Iteration:   5160, Loss function: 4.862, Average Loss: 4.969, avg. samples / sec: 21.72
:::MLLOG {"namespace": "", "time_ms": 1639082816789, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082816790, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10412969195416479, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082816790, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082818002, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082819
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:59 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:33 PM'
START TIMING RUN WAS 2021-12-09 08:09:33 PM
ENDING TIMING RUN AT 2021-12-09 08:46:59 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:59 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ result=2246
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2246,nvidia,2021-12-09 08:09:33 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2246,nvidia,2021-12-09 08:09:33 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
