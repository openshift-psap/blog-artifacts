+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-7qs8t.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-7qs8t.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-7qs8t.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-03038366-f352-51a7-83a4-3b3a43744912)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-03038366-f352-51a7-83a4-3b3a43744912
+ MIG_MODE=1
Found 1 MIG instances: MIG-03038366-f352-51a7-83a4-3b3a43744912
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-03038366-f352-51a7-83a4-3b3a43744912'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080574
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:34 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:34 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:34 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:34 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-7qs8t to the sync file ...
run-ssd--1-7qs8t Found 10 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
Thu Dec  9 20:09:39 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-03038366-f352-51a7-83a4-3b3a43744912)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080582097, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080582299, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1127561241, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1127561241
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080585001, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080585002, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080585007, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080689430, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080689430, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080691326, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080691327, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080691779, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080691780, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080691781, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.928, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.074, Average Loss: 0.457, avg. samples / sec: 247.71
Iteration:     40, Loss function: 20.820, Average Loss: 0.859, avg. samples / sec: 255.58
Iteration:     60, Loss function: 20.434, Average Loss: 1.249, avg. samples / sec: 255.10
Iteration:     80, Loss function: 19.965, Average Loss: 1.625, avg. samples / sec: 256.31
Iteration:    100, Loss function: 16.467, Average Loss: 1.962, avg. samples / sec: 244.26
Iteration:    120, Loss function: 12.387, Average Loss: 2.183, avg. samples / sec: 273.28
Iteration:    140, Loss function: 9.906, Average Loss: 2.352, avg. samples / sec: 259.42
Iteration:    160, Loss function: 9.383, Average Loss: 2.496, avg. samples / sec: 263.30
Iteration:    180, Loss function: 9.063, Average Loss: 2.627, avg. samples / sec: 289.95
Iteration:    200, Loss function: 8.624, Average Loss: 2.752, avg. samples / sec: 275.34
Iteration:    220, Loss function: 8.635, Average Loss: 2.872, avg. samples / sec: 279.55
Iteration:    240, Loss function: 8.479, Average Loss: 2.989, avg. samples / sec: 290.22
Iteration:    260, Loss function: 8.759, Average Loss: 3.102, avg. samples / sec: 303.89
Iteration:    280, Loss function: 8.520, Average Loss: 3.210, avg. samples / sec: 265.91
Iteration:    300, Loss function: 8.404, Average Loss: 3.313, avg. samples / sec: 265.23
Iteration:    320, Loss function: 8.462, Average Loss: 3.413, avg. samples / sec: 248.61
Iteration:    340, Loss function: 8.364, Average Loss: 3.511, avg. samples / sec: 228.53
Iteration:    360, Loss function: 8.070, Average Loss: 3.604, avg. samples / sec: 321.28
Iteration:    380, Loss function: 7.943, Average Loss: 3.693, avg. samples / sec: 234.10
Iteration:    400, Loss function: 8.081, Average Loss: 3.777, avg. samples / sec: 301.44
Iteration:    420, Loss function: 7.614, Average Loss: 3.858, avg. samples / sec: 227.97
Iteration:    440, Loss function: 7.808, Average Loss: 3.936, avg. samples / sec: 271.06
Iteration:    460, Loss function: 7.763, Average Loss: 4.011, avg. samples / sec: 319.09
Iteration:    480, Loss function: 7.520, Average Loss: 4.084, avg. samples / sec: 192.80
Iteration:    500, Loss function: 7.561, Average Loss: 4.154, avg. samples / sec: 283.34
Iteration:    520, Loss function: 7.555, Average Loss: 4.221, avg. samples / sec: 329.84
Iteration:    540, Loss function: 7.620, Average Loss: 4.286, avg. samples / sec: 330.17
Iteration:    560, Loss function: 7.344, Average Loss: 4.349, avg. samples / sec: 337.15
Iteration:    580, Loss function: 6.983, Average Loss: 4.409, avg. samples / sec: 330.05
Iteration:    600, Loss function: 7.143, Average Loss: 4.468, avg. samples / sec: 299.37
Iteration:    620, Loss function: 7.134, Average Loss: 4.522, avg. samples / sec: 296.04
Iteration:    640, Loss function: 6.938, Average Loss: 4.576, avg. samples / sec: 276.28
Iteration:    660, Loss function: 7.180, Average Loss: 4.628, avg. samples / sec: 327.52
Iteration:    680, Loss function: 7.095, Average Loss: 4.679, avg. samples / sec: 310.39
Iteration:    700, Loss function: 6.916, Average Loss: 4.727, avg. samples / sec: 296.58
Iteration:    720, Loss function: 7.024, Average Loss: 4.776, avg. samples / sec: 286.75
Iteration:    740, Loss function: 6.988, Average Loss: 4.819, avg. samples / sec: 283.12
Iteration:    760, Loss function: 6.963, Average Loss: 4.863, avg. samples / sec: 327.21
Iteration:    780, Loss function: 6.997, Average Loss: 4.905, avg. samples / sec: 300.40
Iteration:    800, Loss function: 7.183, Average Loss: 4.946, avg. samples / sec: 262.26
Iteration:    820, Loss function: 6.739, Average Loss: 4.984, avg. samples / sec: 319.39
Iteration:    840, Loss function: 6.647, Average Loss: 5.019, avg. samples / sec: 271.02
Iteration:    860, Loss function: 6.911, Average Loss: 5.053, avg. samples / sec: 309.81
Iteration:    880, Loss function: 6.595, Average Loss: 5.085, avg. samples / sec: 330.50
Iteration:    900, Loss function: 6.807, Average Loss: 5.115, avg. samples / sec: 254.98
Iteration:    920, Loss function: 6.650, Average Loss: 5.144, avg. samples / sec: 304.98
Iteration:    940, Loss function: 6.840, Average Loss: 5.173, avg. samples / sec: 322.10
Iteration:    960, Loss function: 6.212, Average Loss: 5.200, avg. samples / sec: 292.81
Iteration:    980, Loss function: 6.539, Average Loss: 5.227, avg. samples / sec: 271.55
Iteration:   1000, Loss function: 6.553, Average Loss: 5.253, avg. samples / sec: 308.98
Iteration:   1020, Loss function: 6.386, Average Loss: 5.276, avg. samples / sec: 324.82
:::MLLOG {"namespace": "", "time_ms": 1639081108142, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081108144, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.419, Average Loss: 5.299, avg. samples / sec: 291.89
Iteration:   1060, Loss function: 6.387, Average Loss: 5.322, avg. samples / sec: 294.00
Iteration:   1080, Loss function: 6.386, Average Loss: 5.343, avg. samples / sec: 235.10
Iteration:   1100, Loss function: 6.137, Average Loss: 5.363, avg. samples / sec: 285.30
Iteration:   1120, Loss function: 6.145, Average Loss: 5.381, avg. samples / sec: 321.87
Iteration:   1140, Loss function: 6.484, Average Loss: 5.400, avg. samples / sec: 328.82
Iteration:   1160, Loss function: 6.293, Average Loss: 5.416, avg. samples / sec: 312.68
Iteration:   1180, Loss function: 6.258, Average Loss: 5.433, avg. samples / sec: 286.20
Iteration:   1200, Loss function: 6.172, Average Loss: 5.448, avg. samples / sec: 328.09
Iteration:   1220, Loss function: 6.175, Average Loss: 5.463, avg. samples / sec: 305.49
Iteration:   1240, Loss function: 5.962, Average Loss: 5.476, avg. samples / sec: 258.86
Iteration:   1260, Loss function: 6.023, Average Loss: 5.487, avg. samples / sec: 256.71
Iteration:   1280, Loss function: 5.793, Average Loss: 5.499, avg. samples / sec: 270.22
Iteration:   1300, Loss function: 6.185, Average Loss: 5.512, avg. samples / sec: 264.69
Iteration:   1320, Loss function: 5.997, Average Loss: 5.523, avg. samples / sec: 292.28
Iteration:   1340, Loss function: 5.938, Average Loss: 5.533, avg. samples / sec: 333.60
Iteration:   1360, Loss function: 6.032, Average Loss: 5.543, avg. samples / sec: 327.15
Iteration:   1380, Loss function: 6.115, Average Loss: 5.553, avg. samples / sec: 284.95
Iteration:   1400, Loss function: 6.292, Average Loss: 5.562, avg. samples / sec: 307.57
Iteration:   1420, Loss function: 5.823, Average Loss: 5.569, avg. samples / sec: 326.01
Iteration:   1440, Loss function: 6.398, Average Loss: 5.577, avg. samples / sec: 336.69
Iteration:   1460, Loss function: 6.043, Average Loss: 5.585, avg. samples / sec: 335.67
Iteration:   1480, Loss function: 6.028, Average Loss: 5.592, avg. samples / sec: 259.42
Iteration:   1500, Loss function: 6.036, Average Loss: 5.599, avg. samples / sec: 330.38
Iteration:   1520, Loss function: 5.913, Average Loss: 5.604, avg. samples / sec: 343.01
Iteration:   1540, Loss function: 6.061, Average Loss: 5.608, avg. samples / sec: 313.29
Iteration:   1560, Loss function: 5.653, Average Loss: 5.612, avg. samples / sec: 258.52
Iteration:   1580, Loss function: 5.573, Average Loss: 5.617, avg. samples / sec: 293.55
Iteration:   1600, Loss function: 6.092, Average Loss: 5.623, avg. samples / sec: 301.56
Iteration:   1620, Loss function: 5.689, Average Loss: 5.627, avg. samples / sec: 336.09
Iteration:   1640, Loss function: 6.069, Average Loss: 5.630, avg. samples / sec: 329.02
Iteration:   1660, Loss function: 5.695, Average Loss: 5.635, avg. samples / sec: 270.55
Iteration:   1680, Loss function: 5.722, Average Loss: 5.638, avg. samples / sec: 217.50
Iteration:   1700, Loss function: 5.420, Average Loss: 5.641, avg. samples / sec: 298.08
Iteration:   1720, Loss function: 5.819, Average Loss: 5.644, avg. samples / sec: 323.90
Iteration:   1740, Loss function: 5.900, Average Loss: 5.647, avg. samples / sec: 328.91
Iteration:   1760, Loss function: 5.511, Average Loss: 5.648, avg. samples / sec: 328.00
Iteration:   1780, Loss function: 5.751, Average Loss: 5.650, avg. samples / sec: 332.44
Iteration:   1800, Loss function: 5.958, Average Loss: 5.652, avg. samples / sec: 336.86
Iteration:   1820, Loss function: 5.792, Average Loss: 5.653, avg. samples / sec: 331.35
Iteration:   1840, Loss function: 6.053, Average Loss: 5.654, avg. samples / sec: 306.81
Iteration:   1860, Loss function: 5.619, Average Loss: 5.653, avg. samples / sec: 310.53
Iteration:   1880, Loss function: 5.701, Average Loss: 5.654, avg. samples / sec: 325.75
Iteration:   1900, Loss function: 5.818, Average Loss: 5.655, avg. samples / sec: 309.45
Iteration:   1920, Loss function: 5.867, Average Loss: 5.656, avg. samples / sec: 311.92
Iteration:   1940, Loss function: 5.686, Average Loss: 5.655, avg. samples / sec: 338.54
Iteration:   1960, Loss function: 5.525, Average Loss: 5.654, avg. samples / sec: 323.22
Iteration:   1980, Loss function: 5.756, Average Loss: 5.653, avg. samples / sec: 330.00
Iteration:   2000, Loss function: 5.470, Average Loss: 5.652, avg. samples / sec: 327.15
Iteration:   2020, Loss function: 5.750, Average Loss: 5.651, avg. samples / sec: 333.48
Iteration:   2040, Loss function: 5.733, Average Loss: 5.650, avg. samples / sec: 321.38
:::MLLOG {"namespace": "", "time_ms": 1639081493820, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081493834, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.486, Average Loss: 5.648, avg. samples / sec: 325.84
Iteration:   2080, Loss function: 5.136, Average Loss: 5.646, avg. samples / sec: 312.10
Iteration:   2100, Loss function: 5.534, Average Loss: 5.644, avg. samples / sec: 292.59
Iteration:   2120, Loss function: 5.260, Average Loss: 5.640, avg. samples / sec: 271.31
Iteration:   2140, Loss function: 5.524, Average Loss: 5.637, avg. samples / sec: 289.61
Iteration:   2160, Loss function: 5.328, Average Loss: 5.634, avg. samples / sec: 247.73
Iteration:   2180, Loss function: 5.528, Average Loss: 5.632, avg. samples / sec: 298.49
Iteration:   2200, Loss function: 5.473, Average Loss: 5.629, avg. samples / sec: 304.14
Iteration:   2220, Loss function: 5.471, Average Loss: 5.626, avg. samples / sec: 325.20
Iteration:   2240, Loss function: 5.416, Average Loss: 5.623, avg. samples / sec: 317.52
Iteration:   2260, Loss function: 5.354, Average Loss: 5.620, avg. samples / sec: 322.36
Iteration:   2280, Loss function: 5.225, Average Loss: 5.617, avg. samples / sec: 336.07
Iteration:   2300, Loss function: 4.987, Average Loss: 5.613, avg. samples / sec: 327.18
Iteration:   2320, Loss function: 5.288, Average Loss: 5.612, avg. samples / sec: 330.44
Iteration:   2340, Loss function: 5.518, Average Loss: 5.608, avg. samples / sec: 314.73
Iteration:   2360, Loss function: 5.394, Average Loss: 5.604, avg. samples / sec: 309.44
Iteration:   2380, Loss function: 5.594, Average Loss: 5.600, avg. samples / sec: 309.88
Iteration:   2400, Loss function: 5.660, Average Loss: 5.594, avg. samples / sec: 304.80
Iteration:   2420, Loss function: 5.378, Average Loss: 5.590, avg. samples / sec: 330.89
Iteration:   2440, Loss function: 5.394, Average Loss: 5.587, avg. samples / sec: 323.29
Iteration:   2460, Loss function: 5.212, Average Loss: 5.583, avg. samples / sec: 300.95
Iteration:   2480, Loss function: 5.401, Average Loss: 5.579, avg. samples / sec: 216.54
Iteration:   2500, Loss function: 5.331, Average Loss: 5.575, avg. samples / sec: 304.13
Iteration:   2520, Loss function: 5.454, Average Loss: 5.570, avg. samples / sec: 320.24
Iteration:   2540, Loss function: 5.501, Average Loss: 5.567, avg. samples / sec: 309.64
Iteration:   2560, Loss function: 5.277, Average Loss: 5.563, avg. samples / sec: 262.64
Iteration:   2580, Loss function: 5.381, Average Loss: 5.559, avg. samples / sec: 195.18
Iteration:   2600, Loss function: 5.482, Average Loss: 5.555, avg. samples / sec: 191.97
Iteration:   2620, Loss function: 5.511, Average Loss: 5.551, avg. samples / sec: 204.47
Iteration:   2640, Loss function: 5.355, Average Loss: 5.548, avg. samples / sec: 274.69
Iteration:   2660, Loss function: 5.163, Average Loss: 5.545, avg. samples / sec: 268.29
Iteration:   2680, Loss function: 5.114, Average Loss: 5.541, avg. samples / sec: 285.25
Iteration:   2700, Loss function: 5.121, Average Loss: 5.536, avg. samples / sec: 312.80
Iteration:   2720, Loss function: 5.235, Average Loss: 5.531, avg. samples / sec: 252.04
Iteration:   2740, Loss function: 5.141, Average Loss: 5.527, avg. samples / sec: 315.38
Iteration:   2760, Loss function: 5.105, Average Loss: 5.521, avg. samples / sec: 323.61
Iteration:   2780, Loss function: 5.471, Average Loss: 5.518, avg. samples / sec: 326.04
Iteration:   2800, Loss function: 5.374, Average Loss: 5.513, avg. samples / sec: 328.34
Iteration:   2820, Loss function: 5.388, Average Loss: 5.507, avg. samples / sec: 329.54
Iteration:   2840, Loss function: 5.198, Average Loss: 5.503, avg. samples / sec: 240.03
Iteration:   2860, Loss function: 5.221, Average Loss: 5.499, avg. samples / sec: 283.20
Iteration:   2880, Loss function: 5.212, Average Loss: 5.495, avg. samples / sec: 280.84
Iteration:   2900, Loss function: 5.005, Average Loss: 5.491, avg. samples / sec: 278.15
Iteration:   2920, Loss function: 5.167, Average Loss: 5.486, avg. samples / sec: 325.00
Iteration:   2940, Loss function: 4.939, Average Loss: 5.481, avg. samples / sec: 285.75
Iteration:   2960, Loss function: 5.416, Average Loss: 5.477, avg. samples / sec: 321.09
Iteration:   2980, Loss function: 5.200, Average Loss: 5.473, avg. samples / sec: 252.26
Iteration:   3000, Loss function: 5.277, Average Loss: 5.468, avg. samples / sec: 282.84
Iteration:   3020, Loss function: 5.105, Average Loss: 5.462, avg. samples / sec: 326.71
Iteration:   3040, Loss function: 5.134, Average Loss: 5.457, avg. samples / sec: 322.23
Iteration:   3060, Loss function: 5.076, Average Loss: 5.451, avg. samples / sec: 312.66
Iteration:   3080, Loss function: 4.846, Average Loss: 5.445, avg. samples / sec: 278.48
:::MLLOG {"namespace": "", "time_ms": 1639081900220, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081900223, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.194, Average Loss: 5.440, avg. samples / sec: 319.51
Iteration:   3120, Loss function: 4.982, Average Loss: 5.434, avg. samples / sec: 320.71
Iteration:   3140, Loss function: 5.052, Average Loss: 5.428, avg. samples / sec: 331.14
Iteration:   3160, Loss function: 5.461, Average Loss: 5.422, avg. samples / sec: 322.90
Iteration:   3180, Loss function: 4.982, Average Loss: 5.418, avg. samples / sec: 297.45
Iteration:   3200, Loss function: 5.212, Average Loss: 5.412, avg. samples / sec: 315.94
Iteration:   3220, Loss function: 5.151, Average Loss: 5.407, avg. samples / sec: 304.34
Iteration:   3240, Loss function: 5.311, Average Loss: 5.402, avg. samples / sec: 327.29
Iteration:   3260, Loss function: 5.062, Average Loss: 5.396, avg. samples / sec: 329.13
Iteration:   3280, Loss function: 4.793, Average Loss: 5.389, avg. samples / sec: 319.58
Iteration:   3300, Loss function: 4.845, Average Loss: 5.383, avg. samples / sec: 308.91
Iteration:   3320, Loss function: 5.164, Average Loss: 5.378, avg. samples / sec: 308.35
Iteration:   3340, Loss function: 5.006, Average Loss: 5.373, avg. samples / sec: 301.50
Iteration:   3360, Loss function: 5.197, Average Loss: 5.366, avg. samples / sec: 285.51
Iteration:   3380, Loss function: 5.375, Average Loss: 5.361, avg. samples / sec: 322.27
Iteration:   3400, Loss function: 5.003, Average Loss: 5.356, avg. samples / sec: 333.96
Iteration:   3420, Loss function: 5.254, Average Loss: 5.351, avg. samples / sec: 334.80
Iteration:   3440, Loss function: 4.874, Average Loss: 5.346, avg. samples / sec: 291.92
Iteration:   3460, Loss function: 5.173, Average Loss: 5.341, avg. samples / sec: 324.13
Iteration:   3480, Loss function: 5.337, Average Loss: 5.337, avg. samples / sec: 333.56
Iteration:   3500, Loss function: 5.144, Average Loss: 5.334, avg. samples / sec: 329.52
Iteration:   3520, Loss function: 4.989, Average Loss: 5.330, avg. samples / sec: 303.72
Iteration:   3540, Loss function: 4.905, Average Loss: 5.325, avg. samples / sec: 326.26
Iteration:   3560, Loss function: 5.067, Average Loss: 5.321, avg. samples / sec: 316.84
Iteration:   3580, Loss function: 4.946, Average Loss: 5.317, avg. samples / sec: 291.60
Iteration:   3600, Loss function: 5.156, Average Loss: 5.311, avg. samples / sec: 327.66
Iteration:   3620, Loss function: 4.975, Average Loss: 5.307, avg. samples / sec: 322.49
Iteration:   3640, Loss function: 4.458, Average Loss: 5.301, avg. samples / sec: 323.77
Iteration:   3660, Loss function: 5.085, Average Loss: 5.296, avg. samples / sec: 299.17
Iteration:   3680, Loss function: 5.163, Average Loss: 5.291, avg. samples / sec: 273.32
Iteration:   3700, Loss function: 5.045, Average Loss: 5.286, avg. samples / sec: 321.33
Iteration:   3720, Loss function: 5.006, Average Loss: 5.280, avg. samples / sec: 335.22
Iteration:   3740, Loss function: 5.044, Average Loss: 5.276, avg. samples / sec: 308.16
Iteration:   3760, Loss function: 4.915, Average Loss: 5.271, avg. samples / sec: 308.34
Iteration:   3780, Loss function: 5.239, Average Loss: 5.266, avg. samples / sec: 305.71
Iteration:   3800, Loss function: 5.093, Average Loss: 5.262, avg. samples / sec: 339.07
Iteration:   3820, Loss function: 5.164, Average Loss: 5.257, avg. samples / sec: 291.20
Iteration:   3840, Loss function: 4.975, Average Loss: 5.252, avg. samples / sec: 290.40
Iteration:   3860, Loss function: 4.861, Average Loss: 5.247, avg. samples / sec: 333.14
Iteration:   3880, Loss function: 4.912, Average Loss: 5.241, avg. samples / sec: 303.18
Iteration:   3900, Loss function: 5.077, Average Loss: 5.237, avg. samples / sec: 263.20
Iteration:   3920, Loss function: 5.092, Average Loss: 5.231, avg. samples / sec: 314.19
Iteration:   3940, Loss function: 5.066, Average Loss: 5.227, avg. samples / sec: 334.50
Iteration:   3960, Loss function: 4.756, Average Loss: 5.223, avg. samples / sec: 315.56
Iteration:   3980, Loss function: 4.883, Average Loss: 5.218, avg. samples / sec: 290.56
Iteration:   4000, Loss function: 5.051, Average Loss: 5.213, avg. samples / sec: 271.68
Iteration:   4020, Loss function: 4.890, Average Loss: 5.209, avg. samples / sec: 297.36
Iteration:   4040, Loss function: 5.160, Average Loss: 5.207, avg. samples / sec: 293.63
Iteration:   4060, Loss function: 5.184, Average Loss: 5.203, avg. samples / sec: 268.97
Iteration:   4080, Loss function: 5.297, Average Loss: 5.199, avg. samples / sec: 254.04
Iteration:   4100, Loss function: 5.051, Average Loss: 5.195, avg. samples / sec: 283.99
:::MLLOG {"namespace": "", "time_ms": 1639082282574, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082282576, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.991, Average Loss: 5.191, avg. samples / sec: 242.87
Iteration:   4140, Loss function: 4.946, Average Loss: 5.186, avg. samples / sec: 266.57
Iteration:   4160, Loss function: 4.941, Average Loss: 5.180, avg. samples / sec: 329.46
Iteration:   4180, Loss function: 4.914, Average Loss: 5.174, avg. samples / sec: 317.64
Iteration:   4200, Loss function: 4.800, Average Loss: 5.169, avg. samples / sec: 317.30
Iteration:   4220, Loss function: 4.941, Average Loss: 5.164, avg. samples / sec: 312.92
Iteration:   4240, Loss function: 5.129, Average Loss: 5.158, avg. samples / sec: 280.25
Iteration:   4260, Loss function: 5.107, Average Loss: 5.153, avg. samples / sec: 308.44
Iteration:   4280, Loss function: 4.950, Average Loss: 5.147, avg. samples / sec: 229.63
Iteration:   4300, Loss function: 4.788, Average Loss: 5.141, avg. samples / sec: 238.02
Iteration:   4320, Loss function: 4.478, Average Loss: 5.136, avg. samples / sec: 320.95
Iteration:   4340, Loss function: 4.748, Average Loss: 5.130, avg. samples / sec: 327.18
Iteration:   4360, Loss function: 4.880, Average Loss: 5.126, avg. samples / sec: 325.40
Iteration:   4380, Loss function: 4.922, Average Loss: 5.121, avg. samples / sec: 324.80
Iteration:   4400, Loss function: 4.920, Average Loss: 5.117, avg. samples / sec: 338.01
Iteration:   4420, Loss function: 4.824, Average Loss: 5.112, avg. samples / sec: 324.37
Iteration:   4440, Loss function: 4.824, Average Loss: 5.108, avg. samples / sec: 305.18
Iteration:   4460, Loss function: 5.255, Average Loss: 5.104, avg. samples / sec: 317.27
Iteration:   4480, Loss function: 4.974, Average Loss: 5.100, avg. samples / sec: 328.71
Iteration:   4500, Loss function: 4.851, Average Loss: 5.097, avg. samples / sec: 325.55
Iteration:   4520, Loss function: 4.586, Average Loss: 5.093, avg. samples / sec: 300.58
Iteration:   4540, Loss function: 5.125, Average Loss: 5.089, avg. samples / sec: 252.34
Iteration:   4560, Loss function: 4.862, Average Loss: 5.084, avg. samples / sec: 297.99
Iteration:   4580, Loss function: 4.727, Average Loss: 5.082, avg. samples / sec: 317.72
Iteration:   4600, Loss function: 4.787, Average Loss: 5.077, avg. samples / sec: 310.81
Iteration:   4620, Loss function: 4.880, Average Loss: 5.074, avg. samples / sec: 299.88
Iteration:   4640, Loss function: 4.761, Average Loss: 5.068, avg. samples / sec: 328.23
Iteration:   4660, Loss function: 4.676, Average Loss: 5.064, avg. samples / sec: 293.66
Iteration:   4680, Loss function: 5.323, Average Loss: 5.059, avg. samples / sec: 285.20
Iteration:   4700, Loss function: 4.658, Average Loss: 5.056, avg. samples / sec: 309.46
Iteration:   4720, Loss function: 4.808, Average Loss: 5.051, avg. samples / sec: 289.77
Iteration:   4740, Loss function: 4.798, Average Loss: 5.047, avg. samples / sec: 313.00
Iteration:   4760, Loss function: 4.767, Average Loss: 5.044, avg. samples / sec: 223.18
Iteration:   4780, Loss function: 4.949, Average Loss: 5.039, avg. samples / sec: 314.34
Iteration:   4800, Loss function: 4.815, Average Loss: 5.036, avg. samples / sec: 267.26
Iteration:   4820, Loss function: 5.000, Average Loss: 5.033, avg. samples / sec: 268.22
Iteration:   4840, Loss function: 5.068, Average Loss: 5.030, avg. samples / sec: 337.21
Iteration:   4860, Loss function: 4.720, Average Loss: 5.025, avg. samples / sec: 332.62
Iteration:   4880, Loss function: 5.003, Average Loss: 5.022, avg. samples / sec: 312.57
Iteration:   4900, Loss function: 4.428, Average Loss: 5.018, avg. samples / sec: 243.49
Iteration:   4920, Loss function: 4.908, Average Loss: 5.015, avg. samples / sec: 297.31
Iteration:   4940, Loss function: 4.675, Average Loss: 5.012, avg. samples / sec: 327.78
Iteration:   4960, Loss function: 4.696, Average Loss: 5.008, avg. samples / sec: 319.42
Iteration:   4980, Loss function: 4.551, Average Loss: 5.004, avg. samples / sec: 313.07
Iteration:   5000, Loss function: 4.942, Average Loss: 5.001, avg. samples / sec: 211.83
Iteration:   5020, Loss function: 5.130, Average Loss: 4.998, avg. samples / sec: 277.45
Iteration:   5040, Loss function: 4.857, Average Loss: 4.996, avg. samples / sec: 274.45
Iteration:   5060, Loss function: 4.868, Average Loss: 4.993, avg. samples / sec: 218.44
Iteration:   5080, Loss function: 4.515, Average Loss: 4.989, avg. samples / sec: 298.68
Iteration:   5100, Loss function: 4.862, Average Loss: 4.986, avg. samples / sec: 274.50
Iteration:   5120, Loss function: 4.686, Average Loss: 4.983, avg. samples / sec: 315.58
Iteration:   5140, Loss function: 4.935, Average Loss: 4.979, avg. samples / sec: 331.85
:::MLLOG {"namespace": "", "time_ms": 1639082682297, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 105.53 s
:::MLLOG {"namespace": "", "time_ms": 1639082787968, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082788001, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082788002, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.18s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.077, Average Loss: 4.975, avg. samples / sec: 19.87
DONE (t=7.22s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10935
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21997
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09828
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19414
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13840
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20289
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10935 AP goal: 0.10000
Iteration:   5180, Loss function: 4.790, Average Loss: 4.970, avg. samples / sec: 342.66
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1093521991219621, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082805099, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:54 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:54 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080582097, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080582299, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1127561241, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1127561241
:::MLLOG {"namespace": "", "time_ms": 1639080585001, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080585002, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080585006, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080585007, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080689430, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080689430, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080691326, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080691327, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080691779, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080691780, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080691781, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.928, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.074, Average Loss: 0.457, avg. samples / sec: 247.71
Iteration:     40, Loss function: 20.820, Average Loss: 0.859, avg. samples / sec: 255.58
Iteration:     60, Loss function: 20.434, Average Loss: 1.249, avg. samples / sec: 255.10
Iteration:     80, Loss function: 19.965, Average Loss: 1.625, avg. samples / sec: 256.31
Iteration:    100, Loss function: 16.467, Average Loss: 1.962, avg. samples / sec: 244.26
Iteration:    120, Loss function: 12.387, Average Loss: 2.183, avg. samples / sec: 273.28
Iteration:    140, Loss function: 9.906, Average Loss: 2.352, avg. samples / sec: 259.42
Iteration:    160, Loss function: 9.383, Average Loss: 2.496, avg. samples / sec: 263.30
Iteration:    180, Loss function: 9.063, Average Loss: 2.627, avg. samples / sec: 289.95
Iteration:    200, Loss function: 8.624, Average Loss: 2.752, avg. samples / sec: 275.34
Iteration:    220, Loss function: 8.635, Average Loss: 2.872, avg. samples / sec: 279.55
Iteration:    240, Loss function: 8.479, Average Loss: 2.989, avg. samples / sec: 290.22
Iteration:    260, Loss function: 8.759, Average Loss: 3.102, avg. samples / sec: 303.89
Iteration:    280, Loss function: 8.520, Average Loss: 3.210, avg. samples / sec: 265.91
Iteration:    300, Loss function: 8.404, Average Loss: 3.313, avg. samples / sec: 265.23
Iteration:    320, Loss function: 8.462, Average Loss: 3.413, avg. samples / sec: 248.61
Iteration:    340, Loss function: 8.364, Average Loss: 3.511, avg. samples / sec: 228.53
Iteration:    360, Loss function: 8.070, Average Loss: 3.604, avg. samples / sec: 321.28
Iteration:    380, Loss function: 7.943, Average Loss: 3.693, avg. samples / sec: 234.10
Iteration:    400, Loss function: 8.081, Average Loss: 3.777, avg. samples / sec: 301.44
Iteration:    420, Loss function: 7.614, Average Loss: 3.858, avg. samples / sec: 227.97
Iteration:    440, Loss function: 7.808, Average Loss: 3.936, avg. samples / sec: 271.06
Iteration:    460, Loss function: 7.763, Average Loss: 4.011, avg. samples / sec: 319.09
Iteration:    480, Loss function: 7.520, Average Loss: 4.084, avg. samples / sec: 192.80
Iteration:    500, Loss function: 7.561, Average Loss: 4.154, avg. samples / sec: 283.34
Iteration:    520, Loss function: 7.555, Average Loss: 4.221, avg. samples / sec: 329.84
Iteration:    540, Loss function: 7.620, Average Loss: 4.286, avg. samples / sec: 330.17
Iteration:    560, Loss function: 7.344, Average Loss: 4.349, avg. samples / sec: 337.15
Iteration:    580, Loss function: 6.983, Average Loss: 4.409, avg. samples / sec: 330.05
Iteration:    600, Loss function: 7.143, Average Loss: 4.468, avg. samples / sec: 299.37
Iteration:    620, Loss function: 7.134, Average Loss: 4.522, avg. samples / sec: 296.04
Iteration:    640, Loss function: 6.938, Average Loss: 4.576, avg. samples / sec: 276.28
Iteration:    660, Loss function: 7.180, Average Loss: 4.628, avg. samples / sec: 327.52
Iteration:    680, Loss function: 7.095, Average Loss: 4.679, avg. samples / sec: 310.39
Iteration:    700, Loss function: 6.916, Average Loss: 4.727, avg. samples / sec: 296.58
Iteration:    720, Loss function: 7.024, Average Loss: 4.776, avg. samples / sec: 286.75
Iteration:    740, Loss function: 6.988, Average Loss: 4.819, avg. samples / sec: 283.12
Iteration:    760, Loss function: 6.963, Average Loss: 4.863, avg. samples / sec: 327.21
Iteration:    780, Loss function: 6.997, Average Loss: 4.905, avg. samples / sec: 300.40
Iteration:    800, Loss function: 7.183, Average Loss: 4.946, avg. samples / sec: 262.26
Iteration:    820, Loss function: 6.739, Average Loss: 4.984, avg. samples / sec: 319.39
Iteration:    840, Loss function: 6.647, Average Loss: 5.019, avg. samples / sec: 271.02
Iteration:    860, Loss function: 6.911, Average Loss: 5.053, avg. samples / sec: 309.81
Iteration:    880, Loss function: 6.595, Average Loss: 5.085, avg. samples / sec: 330.50
Iteration:    900, Loss function: 6.807, Average Loss: 5.115, avg. samples / sec: 254.98
Iteration:    920, Loss function: 6.650, Average Loss: 5.144, avg. samples / sec: 304.98
Iteration:    940, Loss function: 6.840, Average Loss: 5.173, avg. samples / sec: 322.10
Iteration:    960, Loss function: 6.212, Average Loss: 5.200, avg. samples / sec: 292.81
Iteration:    980, Loss function: 6.539, Average Loss: 5.227, avg. samples / sec: 271.55
Iteration:   1000, Loss function: 6.553, Average Loss: 5.253, avg. samples / sec: 308.98
Iteration:   1020, Loss function: 6.386, Average Loss: 5.276, avg. samples / sec: 324.82
:::MLLOG {"namespace": "", "time_ms": 1639081108142, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081108144, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.419, Average Loss: 5.299, avg. samples / sec: 291.89
Iteration:   1060, Loss function: 6.387, Average Loss: 5.322, avg. samples / sec: 294.00
Iteration:   1080, Loss function: 6.386, Average Loss: 5.343, avg. samples / sec: 235.10
Iteration:   1100, Loss function: 6.137, Average Loss: 5.363, avg. samples / sec: 285.30
Iteration:   1120, Loss function: 6.145, Average Loss: 5.381, avg. samples / sec: 321.87
Iteration:   1140, Loss function: 6.484, Average Loss: 5.400, avg. samples / sec: 328.82
Iteration:   1160, Loss function: 6.293, Average Loss: 5.416, avg. samples / sec: 312.68
Iteration:   1180, Loss function: 6.258, Average Loss: 5.433, avg. samples / sec: 286.20
Iteration:   1200, Loss function: 6.172, Average Loss: 5.448, avg. samples / sec: 328.09
Iteration:   1220, Loss function: 6.175, Average Loss: 5.463, avg. samples / sec: 305.49
Iteration:   1240, Loss function: 5.962, Average Loss: 5.476, avg. samples / sec: 258.86
Iteration:   1260, Loss function: 6.023, Average Loss: 5.487, avg. samples / sec: 256.71
Iteration:   1280, Loss function: 5.793, Average Loss: 5.499, avg. samples / sec: 270.22
Iteration:   1300, Loss function: 6.185, Average Loss: 5.512, avg. samples / sec: 264.69
Iteration:   1320, Loss function: 5.997, Average Loss: 5.523, avg. samples / sec: 292.28
Iteration:   1340, Loss function: 5.938, Average Loss: 5.533, avg. samples / sec: 333.60
Iteration:   1360, Loss function: 6.032, Average Loss: 5.543, avg. samples / sec: 327.15
Iteration:   1380, Loss function: 6.115, Average Loss: 5.553, avg. samples / sec: 284.95
Iteration:   1400, Loss function: 6.292, Average Loss: 5.562, avg. samples / sec: 307.57
Iteration:   1420, Loss function: 5.823, Average Loss: 5.569, avg. samples / sec: 326.01
Iteration:   1440, Loss function: 6.398, Average Loss: 5.577, avg. samples / sec: 336.69
Iteration:   1460, Loss function: 6.043, Average Loss: 5.585, avg. samples / sec: 335.67
Iteration:   1480, Loss function: 6.028, Average Loss: 5.592, avg. samples / sec: 259.42
Iteration:   1500, Loss function: 6.036, Average Loss: 5.599, avg. samples / sec: 330.38
Iteration:   1520, Loss function: 5.913, Average Loss: 5.604, avg. samples / sec: 343.01
Iteration:   1540, Loss function: 6.061, Average Loss: 5.608, avg. samples / sec: 313.29
Iteration:   1560, Loss function: 5.653, Average Loss: 5.612, avg. samples / sec: 258.52
Iteration:   1580, Loss function: 5.573, Average Loss: 5.617, avg. samples / sec: 293.55
Iteration:   1600, Loss function: 6.092, Average Loss: 5.623, avg. samples / sec: 301.56
Iteration:   1620, Loss function: 5.689, Average Loss: 5.627, avg. samples / sec: 336.09
Iteration:   1640, Loss function: 6.069, Average Loss: 5.630, avg. samples / sec: 329.02
Iteration:   1660, Loss function: 5.695, Average Loss: 5.635, avg. samples / sec: 270.55
Iteration:   1680, Loss function: 5.722, Average Loss: 5.638, avg. samples / sec: 217.50
Iteration:   1700, Loss function: 5.420, Average Loss: 5.641, avg. samples / sec: 298.08
Iteration:   1720, Loss function: 5.819, Average Loss: 5.644, avg. samples / sec: 323.90
Iteration:   1740, Loss function: 5.900, Average Loss: 5.647, avg. samples / sec: 328.91
Iteration:   1760, Loss function: 5.511, Average Loss: 5.648, avg. samples / sec: 328.00
Iteration:   1780, Loss function: 5.751, Average Loss: 5.650, avg. samples / sec: 332.44
Iteration:   1800, Loss function: 5.958, Average Loss: 5.652, avg. samples / sec: 336.86
Iteration:   1820, Loss function: 5.792, Average Loss: 5.653, avg. samples / sec: 331.35
Iteration:   1840, Loss function: 6.053, Average Loss: 5.654, avg. samples / sec: 306.81
Iteration:   1860, Loss function: 5.619, Average Loss: 5.653, avg. samples / sec: 310.53
Iteration:   1880, Loss function: 5.701, Average Loss: 5.654, avg. samples / sec: 325.75
Iteration:   1900, Loss function: 5.818, Average Loss: 5.655, avg. samples / sec: 309.45
Iteration:   1920, Loss function: 5.867, Average Loss: 5.656, avg. samples / sec: 311.92
Iteration:   1940, Loss function: 5.686, Average Loss: 5.655, avg. samples / sec: 338.54
Iteration:   1960, Loss function: 5.525, Average Loss: 5.654, avg. samples / sec: 323.22
Iteration:   1980, Loss function: 5.756, Average Loss: 5.653, avg. samples / sec: 330.00
Iteration:   2000, Loss function: 5.470, Average Loss: 5.652, avg. samples / sec: 327.15
Iteration:   2020, Loss function: 5.750, Average Loss: 5.651, avg. samples / sec: 333.48
Iteration:   2040, Loss function: 5.733, Average Loss: 5.650, avg. samples / sec: 321.38
:::MLLOG {"namespace": "", "time_ms": 1639081493820, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081493834, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.486, Average Loss: 5.648, avg. samples / sec: 325.84
Iteration:   2080, Loss function: 5.136, Average Loss: 5.646, avg. samples / sec: 312.10
Iteration:   2100, Loss function: 5.534, Average Loss: 5.644, avg. samples / sec: 292.59
Iteration:   2120, Loss function: 5.260, Average Loss: 5.640, avg. samples / sec: 271.31
Iteration:   2140, Loss function: 5.524, Average Loss: 5.637, avg. samples / sec: 289.61
Iteration:   2160, Loss function: 5.328, Average Loss: 5.634, avg. samples / sec: 247.73
Iteration:   2180, Loss function: 5.528, Average Loss: 5.632, avg. samples / sec: 298.49
Iteration:   2200, Loss function: 5.473, Average Loss: 5.629, avg. samples / sec: 304.14
Iteration:   2220, Loss function: 5.471, Average Loss: 5.626, avg. samples / sec: 325.20
Iteration:   2240, Loss function: 5.416, Average Loss: 5.623, avg. samples / sec: 317.52
Iteration:   2260, Loss function: 5.354, Average Loss: 5.620, avg. samples / sec: 322.36
Iteration:   2280, Loss function: 5.225, Average Loss: 5.617, avg. samples / sec: 336.07
Iteration:   2300, Loss function: 4.987, Average Loss: 5.613, avg. samples / sec: 327.18
Iteration:   2320, Loss function: 5.288, Average Loss: 5.612, avg. samples / sec: 330.44
Iteration:   2340, Loss function: 5.518, Average Loss: 5.608, avg. samples / sec: 314.73
Iteration:   2360, Loss function: 5.394, Average Loss: 5.604, avg. samples / sec: 309.44
Iteration:   2380, Loss function: 5.594, Average Loss: 5.600, avg. samples / sec: 309.88
Iteration:   2400, Loss function: 5.660, Average Loss: 5.594, avg. samples / sec: 304.80
Iteration:   2420, Loss function: 5.378, Average Loss: 5.590, avg. samples / sec: 330.89
Iteration:   2440, Loss function: 5.394, Average Loss: 5.587, avg. samples / sec: 323.29
Iteration:   2460, Loss function: 5.212, Average Loss: 5.583, avg. samples / sec: 300.95
Iteration:   2480, Loss function: 5.401, Average Loss: 5.579, avg. samples / sec: 216.54
Iteration:   2500, Loss function: 5.331, Average Loss: 5.575, avg. samples / sec: 304.13
Iteration:   2520, Loss function: 5.454, Average Loss: 5.570, avg. samples / sec: 320.24
Iteration:   2540, Loss function: 5.501, Average Loss: 5.567, avg. samples / sec: 309.64
Iteration:   2560, Loss function: 5.277, Average Loss: 5.563, avg. samples / sec: 262.64
Iteration:   2580, Loss function: 5.381, Average Loss: 5.559, avg. samples / sec: 195.18
Iteration:   2600, Loss function: 5.482, Average Loss: 5.555, avg. samples / sec: 191.97
Iteration:   2620, Loss function: 5.511, Average Loss: 5.551, avg. samples / sec: 204.47
Iteration:   2640, Loss function: 5.355, Average Loss: 5.548, avg. samples / sec: 274.69
Iteration:   2660, Loss function: 5.163, Average Loss: 5.545, avg. samples / sec: 268.29
Iteration:   2680, Loss function: 5.114, Average Loss: 5.541, avg. samples / sec: 285.25
Iteration:   2700, Loss function: 5.121, Average Loss: 5.536, avg. samples / sec: 312.80
Iteration:   2720, Loss function: 5.235, Average Loss: 5.531, avg. samples / sec: 252.04
Iteration:   2740, Loss function: 5.141, Average Loss: 5.527, avg. samples / sec: 315.38
Iteration:   2760, Loss function: 5.105, Average Loss: 5.521, avg. samples / sec: 323.61
Iteration:   2780, Loss function: 5.471, Average Loss: 5.518, avg. samples / sec: 326.04
Iteration:   2800, Loss function: 5.374, Average Loss: 5.513, avg. samples / sec: 328.34
Iteration:   2820, Loss function: 5.388, Average Loss: 5.507, avg. samples / sec: 329.54
Iteration:   2840, Loss function: 5.198, Average Loss: 5.503, avg. samples / sec: 240.03
Iteration:   2860, Loss function: 5.221, Average Loss: 5.499, avg. samples / sec: 283.20
Iteration:   2880, Loss function: 5.212, Average Loss: 5.495, avg. samples / sec: 280.84
Iteration:   2900, Loss function: 5.005, Average Loss: 5.491, avg. samples / sec: 278.15
Iteration:   2920, Loss function: 5.167, Average Loss: 5.486, avg. samples / sec: 325.00
Iteration:   2940, Loss function: 4.939, Average Loss: 5.481, avg. samples / sec: 285.75
Iteration:   2960, Loss function: 5.416, Average Loss: 5.477, avg. samples / sec: 321.09
Iteration:   2980, Loss function: 5.200, Average Loss: 5.473, avg. samples / sec: 252.26
Iteration:   3000, Loss function: 5.277, Average Loss: 5.468, avg. samples / sec: 282.84
Iteration:   3020, Loss function: 5.105, Average Loss: 5.462, avg. samples / sec: 326.71
Iteration:   3040, Loss function: 5.134, Average Loss: 5.457, avg. samples / sec: 322.23
Iteration:   3060, Loss function: 5.076, Average Loss: 5.451, avg. samples / sec: 312.66
Iteration:   3080, Loss function: 4.846, Average Loss: 5.445, avg. samples / sec: 278.48
:::MLLOG {"namespace": "", "time_ms": 1639081900220, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081900223, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.194, Average Loss: 5.440, avg. samples / sec: 319.51
Iteration:   3120, Loss function: 4.982, Average Loss: 5.434, avg. samples / sec: 320.71
Iteration:   3140, Loss function: 5.052, Average Loss: 5.428, avg. samples / sec: 331.14
Iteration:   3160, Loss function: 5.461, Average Loss: 5.422, avg. samples / sec: 322.90
Iteration:   3180, Loss function: 4.982, Average Loss: 5.418, avg. samples / sec: 297.45
Iteration:   3200, Loss function: 5.212, Average Loss: 5.412, avg. samples / sec: 315.94
Iteration:   3220, Loss function: 5.151, Average Loss: 5.407, avg. samples / sec: 304.34
Iteration:   3240, Loss function: 5.311, Average Loss: 5.402, avg. samples / sec: 327.29
Iteration:   3260, Loss function: 5.062, Average Loss: 5.396, avg. samples / sec: 329.13
Iteration:   3280, Loss function: 4.793, Average Loss: 5.389, avg. samples / sec: 319.58
Iteration:   3300, Loss function: 4.845, Average Loss: 5.383, avg. samples / sec: 308.91
Iteration:   3320, Loss function: 5.164, Average Loss: 5.378, avg. samples / sec: 308.35
Iteration:   3340, Loss function: 5.006, Average Loss: 5.373, avg. samples / sec: 301.50
Iteration:   3360, Loss function: 5.197, Average Loss: 5.366, avg. samples / sec: 285.51
Iteration:   3380, Loss function: 5.375, Average Loss: 5.361, avg. samples / sec: 322.27
Iteration:   3400, Loss function: 5.003, Average Loss: 5.356, avg. samples / sec: 333.96
Iteration:   3420, Loss function: 5.254, Average Loss: 5.351, avg. samples / sec: 334.80
Iteration:   3440, Loss function: 4.874, Average Loss: 5.346, avg. samples / sec: 291.92
Iteration:   3460, Loss function: 5.173, Average Loss: 5.341, avg. samples / sec: 324.13
Iteration:   3480, Loss function: 5.337, Average Loss: 5.337, avg. samples / sec: 333.56
Iteration:   3500, Loss function: 5.144, Average Loss: 5.334, avg. samples / sec: 329.52
Iteration:   3520, Loss function: 4.989, Average Loss: 5.330, avg. samples / sec: 303.72
Iteration:   3540, Loss function: 4.905, Average Loss: 5.325, avg. samples / sec: 326.26
Iteration:   3560, Loss function: 5.067, Average Loss: 5.321, avg. samples / sec: 316.84
Iteration:   3580, Loss function: 4.946, Average Loss: 5.317, avg. samples / sec: 291.60
Iteration:   3600, Loss function: 5.156, Average Loss: 5.311, avg. samples / sec: 327.66
Iteration:   3620, Loss function: 4.975, Average Loss: 5.307, avg. samples / sec: 322.49
Iteration:   3640, Loss function: 4.458, Average Loss: 5.301, avg. samples / sec: 323.77
Iteration:   3660, Loss function: 5.085, Average Loss: 5.296, avg. samples / sec: 299.17
Iteration:   3680, Loss function: 5.163, Average Loss: 5.291, avg. samples / sec: 273.32
Iteration:   3700, Loss function: 5.045, Average Loss: 5.286, avg. samples / sec: 321.33
Iteration:   3720, Loss function: 5.006, Average Loss: 5.280, avg. samples / sec: 335.22
Iteration:   3740, Loss function: 5.044, Average Loss: 5.276, avg. samples / sec: 308.16
Iteration:   3760, Loss function: 4.915, Average Loss: 5.271, avg. samples / sec: 308.34
Iteration:   3780, Loss function: 5.239, Average Loss: 5.266, avg. samples / sec: 305.71
Iteration:   3800, Loss function: 5.093, Average Loss: 5.262, avg. samples / sec: 339.07
Iteration:   3820, Loss function: 5.164, Average Loss: 5.257, avg. samples / sec: 291.20
Iteration:   3840, Loss function: 4.975, Average Loss: 5.252, avg. samples / sec: 290.40
Iteration:   3860, Loss function: 4.861, Average Loss: 5.247, avg. samples / sec: 333.14
Iteration:   3880, Loss function: 4.912, Average Loss: 5.241, avg. samples / sec: 303.18
Iteration:   3900, Loss function: 5.077, Average Loss: 5.237, avg. samples / sec: 263.20
Iteration:   3920, Loss function: 5.092, Average Loss: 5.231, avg. samples / sec: 314.19
Iteration:   3940, Loss function: 5.066, Average Loss: 5.227, avg. samples / sec: 334.50
Iteration:   3960, Loss function: 4.756, Average Loss: 5.223, avg. samples / sec: 315.56
Iteration:   3980, Loss function: 4.883, Average Loss: 5.218, avg. samples / sec: 290.56
Iteration:   4000, Loss function: 5.051, Average Loss: 5.213, avg. samples / sec: 271.68
Iteration:   4020, Loss function: 4.890, Average Loss: 5.209, avg. samples / sec: 297.36
Iteration:   4040, Loss function: 5.160, Average Loss: 5.207, avg. samples / sec: 293.63
Iteration:   4060, Loss function: 5.184, Average Loss: 5.203, avg. samples / sec: 268.97
Iteration:   4080, Loss function: 5.297, Average Loss: 5.199, avg. samples / sec: 254.04
Iteration:   4100, Loss function: 5.051, Average Loss: 5.195, avg. samples / sec: 283.99
:::MLLOG {"namespace": "", "time_ms": 1639082282574, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082282576, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.991, Average Loss: 5.191, avg. samples / sec: 242.87
Iteration:   4140, Loss function: 4.946, Average Loss: 5.186, avg. samples / sec: 266.57
Iteration:   4160, Loss function: 4.941, Average Loss: 5.180, avg. samples / sec: 329.46
Iteration:   4180, Loss function: 4.914, Average Loss: 5.174, avg. samples / sec: 317.64
Iteration:   4200, Loss function: 4.800, Average Loss: 5.169, avg. samples / sec: 317.30
Iteration:   4220, Loss function: 4.941, Average Loss: 5.164, avg. samples / sec: 312.92
Iteration:   4240, Loss function: 5.129, Average Loss: 5.158, avg. samples / sec: 280.25
Iteration:   4260, Loss function: 5.107, Average Loss: 5.153, avg. samples / sec: 308.44
Iteration:   4280, Loss function: 4.950, Average Loss: 5.147, avg. samples / sec: 229.63
Iteration:   4300, Loss function: 4.788, Average Loss: 5.141, avg. samples / sec: 238.02
Iteration:   4320, Loss function: 4.478, Average Loss: 5.136, avg. samples / sec: 320.95
Iteration:   4340, Loss function: 4.748, Average Loss: 5.130, avg. samples / sec: 327.18
Iteration:   4360, Loss function: 4.880, Average Loss: 5.126, avg. samples / sec: 325.40
Iteration:   4380, Loss function: 4.922, Average Loss: 5.121, avg. samples / sec: 324.80
Iteration:   4400, Loss function: 4.920, Average Loss: 5.117, avg. samples / sec: 338.01
Iteration:   4420, Loss function: 4.824, Average Loss: 5.112, avg. samples / sec: 324.37
Iteration:   4440, Loss function: 4.824, Average Loss: 5.108, avg. samples / sec: 305.18
Iteration:   4460, Loss function: 5.255, Average Loss: 5.104, avg. samples / sec: 317.27
Iteration:   4480, Loss function: 4.974, Average Loss: 5.100, avg. samples / sec: 328.71
Iteration:   4500, Loss function: 4.851, Average Loss: 5.097, avg. samples / sec: 325.55
Iteration:   4520, Loss function: 4.586, Average Loss: 5.093, avg. samples / sec: 300.58
Iteration:   4540, Loss function: 5.125, Average Loss: 5.089, avg. samples / sec: 252.34
Iteration:   4560, Loss function: 4.862, Average Loss: 5.084, avg. samples / sec: 297.99
Iteration:   4580, Loss function: 4.727, Average Loss: 5.082, avg. samples / sec: 317.72
Iteration:   4600, Loss function: 4.787, Average Loss: 5.077, avg. samples / sec: 310.81
Iteration:   4620, Loss function: 4.880, Average Loss: 5.074, avg. samples / sec: 299.88
Iteration:   4640, Loss function: 4.761, Average Loss: 5.068, avg. samples / sec: 328.23
Iteration:   4660, Loss function: 4.676, Average Loss: 5.064, avg. samples / sec: 293.66
Iteration:   4680, Loss function: 5.323, Average Loss: 5.059, avg. samples / sec: 285.20
Iteration:   4700, Loss function: 4.658, Average Loss: 5.056, avg. samples / sec: 309.46
Iteration:   4720, Loss function: 4.808, Average Loss: 5.051, avg. samples / sec: 289.77
Iteration:   4740, Loss function: 4.798, Average Loss: 5.047, avg. samples / sec: 313.00
Iteration:   4760, Loss function: 4.767, Average Loss: 5.044, avg. samples / sec: 223.18
Iteration:   4780, Loss function: 4.949, Average Loss: 5.039, avg. samples / sec: 314.34
Iteration:   4800, Loss function: 4.815, Average Loss: 5.036, avg. samples / sec: 267.26
Iteration:   4820, Loss function: 5.000, Average Loss: 5.033, avg. samples / sec: 268.22
Iteration:   4840, Loss function: 5.068, Average Loss: 5.030, avg. samples / sec: 337.21
Iteration:   4860, Loss function: 4.720, Average Loss: 5.025, avg. samples / sec: 332.62
Iteration:   4880, Loss function: 5.003, Average Loss: 5.022, avg. samples / sec: 312.57
Iteration:   4900, Loss function: 4.428, Average Loss: 5.018, avg. samples / sec: 243.49
Iteration:   4920, Loss function: 4.908, Average Loss: 5.015, avg. samples / sec: 297.31
Iteration:   4940, Loss function: 4.675, Average Loss: 5.012, avg. samples / sec: 327.78
Iteration:   4960, Loss function: 4.696, Average Loss: 5.008, avg. samples / sec: 319.42
Iteration:   4980, Loss function: 4.551, Average Loss: 5.004, avg. samples / sec: 313.07
Iteration:   5000, Loss function: 4.942, Average Loss: 5.001, avg. samples / sec: 211.83
Iteration:   5020, Loss function: 5.130, Average Loss: 4.998, avg. samples / sec: 277.45
Iteration:   5040, Loss function: 4.857, Average Loss: 4.996, avg. samples / sec: 274.45
Iteration:   5060, Loss function: 4.868, Average Loss: 4.993, avg. samples / sec: 218.44
Iteration:   5080, Loss function: 4.515, Average Loss: 4.989, avg. samples / sec: 298.68
Iteration:   5100, Loss function: 4.862, Average Loss: 4.986, avg. samples / sec: 274.50
Iteration:   5120, Loss function: 4.686, Average Loss: 4.983, avg. samples / sec: 315.58
Iteration:   5140, Loss function: 4.935, Average Loss: 4.979, avg. samples / sec: 331.85
:::MLLOG {"namespace": "", "time_ms": 1639082682297, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 105.53 s
:::MLLOG {"namespace": "", "time_ms": 1639082787968, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082788001, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082788002, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.18s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.077, Average Loss: 4.975, avg. samples / sec: 19.87
DONE (t=7.22s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10935
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21997
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09828
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19414
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13840
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20289
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21519
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10935 AP goal: 0.10000
Iteration:   5180, Loss function: 4.790, Average Loss: 4.970, avg. samples / sec: 342.66
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1093521991219621, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082802709, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082805099, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082814
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:54 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:34 PM'
START TIMING RUN WAS 2021-12-09 08:09:34 PM
ENDING TIMING RUN AT 2021-12-09 08:46:54 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:54 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-03038366-f352-51a7-83a4-3b3a43744912)
+ result=2240
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-09 08:09:34 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-09 08:09:34 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
