+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-xzjmg.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-xzjmg.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-xzjmg.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f
+ MIG_MODE=1
Found 1 MIG instances: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080573
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:33 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:33 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-xzjmg to the sync file ...
run-ssd--1-xzjmg Found 6 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
Thu Dec  9 20:09:38 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580330, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580485, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1035585762, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1035585762
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080582552, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582552, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687515, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687515, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080689302, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689304, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689608, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689609, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689610, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.792, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.290, Average Loss: 0.457, avg. samples / sec: 288.92
Iteration:     40, Loss function: 20.823, Average Loss: 0.859, avg. samples / sec: 289.55
Iteration:     60, Loss function: 20.390, Average Loss: 1.249, avg. samples / sec: 269.32
Iteration:     80, Loss function: 20.164, Average Loss: 1.625, avg. samples / sec: 235.85
Iteration:    100, Loss function: 18.114, Average Loss: 1.976, avg. samples / sec: 266.71
Iteration:    120, Loss function: 12.449, Average Loss: 2.220, avg. samples / sec: 257.70
Iteration:    140, Loss function: 10.073, Average Loss: 2.391, avg. samples / sec: 256.02
Iteration:    160, Loss function: 9.485, Average Loss: 2.534, avg. samples / sec: 252.33
Iteration:    180, Loss function: 9.200, Average Loss: 2.665, avg. samples / sec: 285.58
Iteration:    200, Loss function: 8.780, Average Loss: 2.790, avg. samples / sec: 278.22
Iteration:    220, Loss function: 8.570, Average Loss: 2.909, avg. samples / sec: 252.26
Iteration:    240, Loss function: 8.675, Average Loss: 3.025, avg. samples / sec: 249.95
Iteration:    260, Loss function: 8.604, Average Loss: 3.138, avg. samples / sec: 234.98
Iteration:    280, Loss function: 8.389, Average Loss: 3.247, avg. samples / sec: 273.35
Iteration:    300, Loss function: 8.290, Average Loss: 3.349, avg. samples / sec: 289.00
Iteration:    320, Loss function: 8.423, Average Loss: 3.447, avg. samples / sec: 259.84
Iteration:    340, Loss function: 8.539, Average Loss: 3.546, avg. samples / sec: 271.10
Iteration:    360, Loss function: 8.037, Average Loss: 3.638, avg. samples / sec: 277.02
Iteration:    380, Loss function: 7.977, Average Loss: 3.726, avg. samples / sec: 197.80
Iteration:    400, Loss function: 7.965, Average Loss: 3.809, avg. samples / sec: 223.91
Iteration:    420, Loss function: 7.598, Average Loss: 3.889, avg. samples / sec: 290.54
Iteration:    440, Loss function: 7.909, Average Loss: 3.969, avg. samples / sec: 316.16
Iteration:    460, Loss function: 7.791, Average Loss: 4.044, avg. samples / sec: 254.33
Iteration:    480, Loss function: 7.551, Average Loss: 4.115, avg. samples / sec: 299.79
Iteration:    500, Loss function: 7.523, Average Loss: 4.183, avg. samples / sec: 292.24
Iteration:    520, Loss function: 7.464, Average Loss: 4.250, avg. samples / sec: 303.84
Iteration:    540, Loss function: 7.746, Average Loss: 4.314, avg. samples / sec: 322.46
Iteration:    560, Loss function: 7.295, Average Loss: 4.375, avg. samples / sec: 334.12
Iteration:    580, Loss function: 7.275, Average Loss: 4.435, avg. samples / sec: 307.11
Iteration:    600, Loss function: 7.306, Average Loss: 4.492, avg. samples / sec: 280.72
Iteration:    620, Loss function: 7.280, Average Loss: 4.547, avg. samples / sec: 323.02
Iteration:    640, Loss function: 6.821, Average Loss: 4.601, avg. samples / sec: 333.76
Iteration:    660, Loss function: 6.987, Average Loss: 4.652, avg. samples / sec: 310.47
Iteration:    680, Loss function: 7.284, Average Loss: 4.702, avg. samples / sec: 324.51
Iteration:    700, Loss function: 6.823, Average Loss: 4.748, avg. samples / sec: 331.67
Iteration:    720, Loss function: 7.020, Average Loss: 4.797, avg. samples / sec: 300.43
Iteration:    740, Loss function: 6.913, Average Loss: 4.840, avg. samples / sec: 280.83
Iteration:    760, Loss function: 7.061, Average Loss: 4.882, avg. samples / sec: 310.96
Iteration:    780, Loss function: 6.755, Average Loss: 4.924, avg. samples / sec: 282.77
Iteration:    800, Loss function: 7.260, Average Loss: 4.962, avg. samples / sec: 306.21
Iteration:    820, Loss function: 6.725, Average Loss: 4.998, avg. samples / sec: 327.08
Iteration:    840, Loss function: 6.716, Average Loss: 5.035, avg. samples / sec: 328.97
Iteration:    860, Loss function: 6.870, Average Loss: 5.068, avg. samples / sec: 319.49
Iteration:    880, Loss function: 6.751, Average Loss: 5.100, avg. samples / sec: 317.33
Iteration:    900, Loss function: 6.884, Average Loss: 5.130, avg. samples / sec: 255.61
Iteration:    920, Loss function: 6.694, Average Loss: 5.158, avg. samples / sec: 321.55
Iteration:    940, Loss function: 6.597, Average Loss: 5.187, avg. samples / sec: 323.69
Iteration:    960, Loss function: 6.320, Average Loss: 5.213, avg. samples / sec: 305.26
Iteration:    980, Loss function: 6.565, Average Loss: 5.240, avg. samples / sec: 201.60
Iteration:   1000, Loss function: 6.576, Average Loss: 5.265, avg. samples / sec: 264.54
Iteration:   1020, Loss function: 6.538, Average Loss: 5.288, avg. samples / sec: 215.69
:::MLLOG {"namespace": "", "time_ms": 1639081109713, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081109715, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.526, Average Loss: 5.312, avg. samples / sec: 276.70
Iteration:   1060, Loss function: 6.291, Average Loss: 5.334, avg. samples / sec: 317.39
Iteration:   1080, Loss function: 6.453, Average Loss: 5.354, avg. samples / sec: 297.18
Iteration:   1100, Loss function: 6.103, Average Loss: 5.374, avg. samples / sec: 287.63
Iteration:   1120, Loss function: 6.213, Average Loss: 5.391, avg. samples / sec: 295.40
Iteration:   1140, Loss function: 6.417, Average Loss: 5.409, avg. samples / sec: 284.39
Iteration:   1160, Loss function: 6.258, Average Loss: 5.426, avg. samples / sec: 328.98
Iteration:   1180, Loss function: 6.397, Average Loss: 5.442, avg. samples / sec: 317.78
Iteration:   1200, Loss function: 6.191, Average Loss: 5.458, avg. samples / sec: 306.71
Iteration:   1220, Loss function: 6.081, Average Loss: 5.473, avg. samples / sec: 313.32
Iteration:   1240, Loss function: 6.089, Average Loss: 5.485, avg. samples / sec: 292.98
Iteration:   1260, Loss function: 6.107, Average Loss: 5.497, avg. samples / sec: 268.75
Iteration:   1280, Loss function: 5.938, Average Loss: 5.507, avg. samples / sec: 268.27
Iteration:   1300, Loss function: 6.122, Average Loss: 5.519, avg. samples / sec: 268.66
Iteration:   1320, Loss function: 6.161, Average Loss: 5.531, avg. samples / sec: 232.07
Iteration:   1340, Loss function: 5.828, Average Loss: 5.540, avg. samples / sec: 298.08
Iteration:   1360, Loss function: 6.095, Average Loss: 5.550, avg. samples / sec: 265.14
Iteration:   1380, Loss function: 6.141, Average Loss: 5.560, avg. samples / sec: 323.61
Iteration:   1400, Loss function: 6.063, Average Loss: 5.568, avg. samples / sec: 328.44
Iteration:   1420, Loss function: 6.012, Average Loss: 5.576, avg. samples / sec: 259.47
Iteration:   1440, Loss function: 6.324, Average Loss: 5.584, avg. samples / sec: 298.60
Iteration:   1460, Loss function: 6.170, Average Loss: 5.592, avg. samples / sec: 243.02
Iteration:   1480, Loss function: 5.870, Average Loss: 5.599, avg. samples / sec: 325.38
Iteration:   1500, Loss function: 5.983, Average Loss: 5.606, avg. samples / sec: 333.80
Iteration:   1520, Loss function: 6.012, Average Loss: 5.611, avg. samples / sec: 316.93
Iteration:   1540, Loss function: 5.988, Average Loss: 5.615, avg. samples / sec: 331.65
Iteration:   1560, Loss function: 5.837, Average Loss: 5.620, avg. samples / sec: 216.53
Iteration:   1580, Loss function: 5.736, Average Loss: 5.624, avg. samples / sec: 174.72
Iteration:   1600, Loss function: 5.996, Average Loss: 5.630, avg. samples / sec: 279.36
Iteration:   1620, Loss function: 5.685, Average Loss: 5.634, avg. samples / sec: 268.84
Iteration:   1640, Loss function: 5.952, Average Loss: 5.636, avg. samples / sec: 269.52
Iteration:   1660, Loss function: 5.921, Average Loss: 5.639, avg. samples / sec: 287.38
Iteration:   1680, Loss function: 5.788, Average Loss: 5.642, avg. samples / sec: 325.16
Iteration:   1700, Loss function: 5.289, Average Loss: 5.645, avg. samples / sec: 324.55
Iteration:   1720, Loss function: 5.540, Average Loss: 5.646, avg. samples / sec: 331.27
Iteration:   1740, Loss function: 5.751, Average Loss: 5.649, avg. samples / sec: 331.75
Iteration:   1760, Loss function: 5.529, Average Loss: 5.650, avg. samples / sec: 337.94
Iteration:   1780, Loss function: 5.565, Average Loss: 5.651, avg. samples / sec: 326.98
Iteration:   1800, Loss function: 5.537, Average Loss: 5.652, avg. samples / sec: 325.58
Iteration:   1820, Loss function: 5.886, Average Loss: 5.653, avg. samples / sec: 289.29
Iteration:   1840, Loss function: 5.861, Average Loss: 5.653, avg. samples / sec: 232.46
Iteration:   1860, Loss function: 5.796, Average Loss: 5.653, avg. samples / sec: 177.03
Iteration:   1880, Loss function: 6.052, Average Loss: 5.654, avg. samples / sec: 298.89
Iteration:   1900, Loss function: 5.813, Average Loss: 5.655, avg. samples / sec: 299.92
Iteration:   1920, Loss function: 5.765, Average Loss: 5.654, avg. samples / sec: 269.75
Iteration:   1940, Loss function: 5.797, Average Loss: 5.653, avg. samples / sec: 286.28
Iteration:   1960, Loss function: 5.736, Average Loss: 5.652, avg. samples / sec: 311.39
Iteration:   1980, Loss function: 5.725, Average Loss: 5.651, avg. samples / sec: 331.52
Iteration:   2000, Loss function: 5.648, Average Loss: 5.650, avg. samples / sec: 330.98
Iteration:   2020, Loss function: 5.551, Average Loss: 5.649, avg. samples / sec: 324.77
Iteration:   2040, Loss function: 5.595, Average Loss: 5.648, avg. samples / sec: 331.19
:::MLLOG {"namespace": "", "time_ms": 1639081516683, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081516685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.435, Average Loss: 5.646, avg. samples / sec: 330.49
Iteration:   2080, Loss function: 5.182, Average Loss: 5.644, avg. samples / sec: 312.56
Iteration:   2100, Loss function: 5.517, Average Loss: 5.641, avg. samples / sec: 330.92
Iteration:   2120, Loss function: 5.246, Average Loss: 5.639, avg. samples / sec: 325.06
Iteration:   2140, Loss function: 5.373, Average Loss: 5.635, avg. samples / sec: 297.19
Iteration:   2160, Loss function: 5.400, Average Loss: 5.632, avg. samples / sec: 322.40
Iteration:   2180, Loss function: 5.343, Average Loss: 5.630, avg. samples / sec: 331.09
Iteration:   2200, Loss function: 5.521, Average Loss: 5.626, avg. samples / sec: 326.08
Iteration:   2220, Loss function: 5.636, Average Loss: 5.623, avg. samples / sec: 321.44
Iteration:   2240, Loss function: 5.293, Average Loss: 5.621, avg. samples / sec: 238.87
Iteration:   2260, Loss function: 5.286, Average Loss: 5.618, avg. samples / sec: 229.33
Iteration:   2280, Loss function: 5.205, Average Loss: 5.615, avg. samples / sec: 270.69
Iteration:   2300, Loss function: 5.096, Average Loss: 5.611, avg. samples / sec: 319.86
Iteration:   2320, Loss function: 5.419, Average Loss: 5.609, avg. samples / sec: 331.71
Iteration:   2340, Loss function: 5.516, Average Loss: 5.606, avg. samples / sec: 331.41
Iteration:   2360, Loss function: 5.326, Average Loss: 5.602, avg. samples / sec: 330.41
Iteration:   2380, Loss function: 5.357, Average Loss: 5.598, avg. samples / sec: 328.15
Iteration:   2400, Loss function: 5.512, Average Loss: 5.594, avg. samples / sec: 291.98
Iteration:   2420, Loss function: 5.531, Average Loss: 5.590, avg. samples / sec: 317.13
Iteration:   2440, Loss function: 5.536, Average Loss: 5.586, avg. samples / sec: 267.80
Iteration:   2460, Loss function: 5.227, Average Loss: 5.582, avg. samples / sec: 287.34
Iteration:   2480, Loss function: 5.368, Average Loss: 5.577, avg. samples / sec: 287.77
Iteration:   2500, Loss function: 5.302, Average Loss: 5.572, avg. samples / sec: 310.11
Iteration:   2520, Loss function: 5.427, Average Loss: 5.568, avg. samples / sec: 319.27
Iteration:   2540, Loss function: 5.351, Average Loss: 5.565, avg. samples / sec: 313.70
Iteration:   2560, Loss function: 5.322, Average Loss: 5.562, avg. samples / sec: 261.09
Iteration:   2580, Loss function: 5.309, Average Loss: 5.558, avg. samples / sec: 321.44
Iteration:   2600, Loss function: 5.523, Average Loss: 5.555, avg. samples / sec: 290.79
Iteration:   2620, Loss function: 5.536, Average Loss: 5.550, avg. samples / sec: 339.08
Iteration:   2640, Loss function: 5.290, Average Loss: 5.547, avg. samples / sec: 328.18
Iteration:   2660, Loss function: 5.093, Average Loss: 5.544, avg. samples / sec: 318.37
Iteration:   2680, Loss function: 5.115, Average Loss: 5.540, avg. samples / sec: 328.49
Iteration:   2700, Loss function: 5.235, Average Loss: 5.536, avg. samples / sec: 315.50
Iteration:   2720, Loss function: 5.206, Average Loss: 5.532, avg. samples / sec: 316.16
Iteration:   2740, Loss function: 4.953, Average Loss: 5.527, avg. samples / sec: 329.75
Iteration:   2760, Loss function: 5.040, Average Loss: 5.522, avg. samples / sec: 321.19
Iteration:   2780, Loss function: 5.599, Average Loss: 5.519, avg. samples / sec: 307.50
Iteration:   2800, Loss function: 5.430, Average Loss: 5.514, avg. samples / sec: 293.48
Iteration:   2820, Loss function: 5.488, Average Loss: 5.511, avg. samples / sec: 266.33
Iteration:   2840, Loss function: 5.175, Average Loss: 5.507, avg. samples / sec: 224.42
Iteration:   2860, Loss function: 5.108, Average Loss: 5.501, avg. samples / sec: 279.03
Iteration:   2880, Loss function: 5.310, Average Loss: 5.497, avg. samples / sec: 291.41
Iteration:   2900, Loss function: 5.174, Average Loss: 5.492, avg. samples / sec: 229.21
Iteration:   2920, Loss function: 5.136, Average Loss: 5.486, avg. samples / sec: 257.84
Iteration:   2940, Loss function: 4.954, Average Loss: 5.482, avg. samples / sec: 270.50
Iteration:   2960, Loss function: 5.317, Average Loss: 5.477, avg. samples / sec: 278.47
Iteration:   2980, Loss function: 5.191, Average Loss: 5.473, avg. samples / sec: 278.74
Iteration:   3000, Loss function: 5.207, Average Loss: 5.468, avg. samples / sec: 326.97
Iteration:   3020, Loss function: 5.166, Average Loss: 5.462, avg. samples / sec: 331.61
Iteration:   3040, Loss function: 5.186, Average Loss: 5.456, avg. samples / sec: 330.10
Iteration:   3060, Loss function: 5.052, Average Loss: 5.450, avg. samples / sec: 304.92
Iteration:   3080, Loss function: 4.982, Average Loss: 5.445, avg. samples / sec: 317.56
:::MLLOG {"namespace": "", "time_ms": 1639081908924, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081908926, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.202, Average Loss: 5.439, avg. samples / sec: 272.56
Iteration:   3120, Loss function: 4.892, Average Loss: 5.432, avg. samples / sec: 299.69
Iteration:   3140, Loss function: 5.061, Average Loss: 5.428, avg. samples / sec: 326.98
Iteration:   3160, Loss function: 5.476, Average Loss: 5.421, avg. samples / sec: 278.22
Iteration:   3180, Loss function: 4.943, Average Loss: 5.416, avg. samples / sec: 314.69
Iteration:   3200, Loss function: 5.259, Average Loss: 5.411, avg. samples / sec: 283.97
Iteration:   3220, Loss function: 5.197, Average Loss: 5.405, avg. samples / sec: 281.85
Iteration:   3240, Loss function: 5.103, Average Loss: 5.400, avg. samples / sec: 240.63
Iteration:   3260, Loss function: 4.983, Average Loss: 5.394, avg. samples / sec: 292.47
Iteration:   3280, Loss function: 4.765, Average Loss: 5.387, avg. samples / sec: 312.39
Iteration:   3300, Loss function: 4.781, Average Loss: 5.382, avg. samples / sec: 286.14
Iteration:   3320, Loss function: 4.889, Average Loss: 5.377, avg. samples / sec: 201.37
Iteration:   3340, Loss function: 5.231, Average Loss: 5.372, avg. samples / sec: 281.49
Iteration:   3360, Loss function: 5.186, Average Loss: 5.366, avg. samples / sec: 294.79
Iteration:   3380, Loss function: 5.448, Average Loss: 5.360, avg. samples / sec: 320.65
Iteration:   3400, Loss function: 4.807, Average Loss: 5.354, avg. samples / sec: 292.99
Iteration:   3420, Loss function: 5.233, Average Loss: 5.349, avg. samples / sec: 292.76
Iteration:   3440, Loss function: 4.735, Average Loss: 5.344, avg. samples / sec: 239.57
Iteration:   3460, Loss function: 5.122, Average Loss: 5.338, avg. samples / sec: 303.01
Iteration:   3480, Loss function: 5.273, Average Loss: 5.334, avg. samples / sec: 200.44
Iteration:   3500, Loss function: 5.196, Average Loss: 5.330, avg. samples / sec: 310.01
Iteration:   3520, Loss function: 4.860, Average Loss: 5.327, avg. samples / sec: 297.22
Iteration:   3540, Loss function: 5.053, Average Loss: 5.323, avg. samples / sec: 316.27
Iteration:   3560, Loss function: 4.792, Average Loss: 5.318, avg. samples / sec: 280.79
Iteration:   3580, Loss function: 5.064, Average Loss: 5.314, avg. samples / sec: 265.38
Iteration:   3600, Loss function: 5.189, Average Loss: 5.307, avg. samples / sec: 313.53
Iteration:   3620, Loss function: 4.942, Average Loss: 5.301, avg. samples / sec: 327.42
Iteration:   3640, Loss function: 4.666, Average Loss: 5.296, avg. samples / sec: 333.73
Iteration:   3660, Loss function: 4.934, Average Loss: 5.290, avg. samples / sec: 335.80
Iteration:   3680, Loss function: 5.097, Average Loss: 5.284, avg. samples / sec: 324.81
Iteration:   3700, Loss function: 5.009, Average Loss: 5.279, avg. samples / sec: 324.87
Iteration:   3720, Loss function: 4.959, Average Loss: 5.273, avg. samples / sec: 308.90
Iteration:   3740, Loss function: 5.222, Average Loss: 5.268, avg. samples / sec: 326.85
Iteration:   3760, Loss function: 5.120, Average Loss: 5.264, avg. samples / sec: 325.53
Iteration:   3780, Loss function: 5.297, Average Loss: 5.259, avg. samples / sec: 330.42
Iteration:   3800, Loss function: 5.342, Average Loss: 5.256, avg. samples / sec: 328.66
Iteration:   3820, Loss function: 5.317, Average Loss: 5.251, avg. samples / sec: 313.91
Iteration:   3840, Loss function: 5.013, Average Loss: 5.247, avg. samples / sec: 306.19
Iteration:   3860, Loss function: 4.943, Average Loss: 5.242, avg. samples / sec: 263.42
Iteration:   3880, Loss function: 4.949, Average Loss: 5.237, avg. samples / sec: 328.19
Iteration:   3900, Loss function: 5.050, Average Loss: 5.232, avg. samples / sec: 323.85
Iteration:   3920, Loss function: 4.867, Average Loss: 5.226, avg. samples / sec: 297.70
Iteration:   3940, Loss function: 5.140, Average Loss: 5.220, avg. samples / sec: 254.21
Iteration:   3960, Loss function: 5.132, Average Loss: 5.217, avg. samples / sec: 334.41
Iteration:   3980, Loss function: 4.898, Average Loss: 5.212, avg. samples / sec: 322.78
Iteration:   4000, Loss function: 5.103, Average Loss: 5.209, avg. samples / sec: 304.14
Iteration:   4020, Loss function: 4.938, Average Loss: 5.204, avg. samples / sec: 303.26
Iteration:   4040, Loss function: 5.186, Average Loss: 5.200, avg. samples / sec: 303.12
Iteration:   4060, Loss function: 5.126, Average Loss: 5.196, avg. samples / sec: 270.72
Iteration:   4080, Loss function: 5.020, Average Loss: 5.192, avg. samples / sec: 330.23
Iteration:   4100, Loss function: 5.014, Average Loss: 5.188, avg. samples / sec: 269.96
:::MLLOG {"namespace": "", "time_ms": 1639082308368, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082308370, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.050, Average Loss: 5.184, avg. samples / sec: 283.84
Iteration:   4140, Loss function: 4.951, Average Loss: 5.179, avg. samples / sec: 294.50
Iteration:   4160, Loss function: 4.793, Average Loss: 5.172, avg. samples / sec: 271.48
Iteration:   4180, Loss function: 5.003, Average Loss: 5.165, avg. samples / sec: 304.40
Iteration:   4200, Loss function: 4.929, Average Loss: 5.161, avg. samples / sec: 274.32
Iteration:   4220, Loss function: 4.801, Average Loss: 5.155, avg. samples / sec: 328.12
Iteration:   4240, Loss function: 4.873, Average Loss: 5.150, avg. samples / sec: 323.22
Iteration:   4260, Loss function: 4.910, Average Loss: 5.145, avg. samples / sec: 259.70
Iteration:   4280, Loss function: 4.916, Average Loss: 5.140, avg. samples / sec: 270.60
Iteration:   4300, Loss function: 4.875, Average Loss: 5.133, avg. samples / sec: 238.70
Iteration:   4320, Loss function: 4.828, Average Loss: 5.128, avg. samples / sec: 256.13
Iteration:   4340, Loss function: 4.826, Average Loss: 5.124, avg. samples / sec: 310.77
Iteration:   4360, Loss function: 4.917, Average Loss: 5.121, avg. samples / sec: 242.84
Iteration:   4380, Loss function: 5.215, Average Loss: 5.117, avg. samples / sec: 255.24
Iteration:   4400, Loss function: 5.075, Average Loss: 5.113, avg. samples / sec: 241.05
Iteration:   4420, Loss function: 5.105, Average Loss: 5.109, avg. samples / sec: 280.24
Iteration:   4440, Loss function: 4.866, Average Loss: 5.104, avg. samples / sec: 323.08
Iteration:   4460, Loss function: 5.228, Average Loss: 5.100, avg. samples / sec: 316.93
Iteration:   4480, Loss function: 5.061, Average Loss: 5.097, avg. samples / sec: 309.79
Iteration:   4500, Loss function: 4.797, Average Loss: 5.094, avg. samples / sec: 331.14
Iteration:   4520, Loss function: 4.688, Average Loss: 5.090, avg. samples / sec: 325.11
Iteration:   4540, Loss function: 5.004, Average Loss: 5.086, avg. samples / sec: 330.20
Iteration:   4560, Loss function: 4.776, Average Loss: 5.083, avg. samples / sec: 331.81
Iteration:   4580, Loss function: 4.755, Average Loss: 5.080, avg. samples / sec: 313.12
Iteration:   4600, Loss function: 4.777, Average Loss: 5.076, avg. samples / sec: 333.23
Iteration:   4620, Loss function: 4.854, Average Loss: 5.072, avg. samples / sec: 312.31
Iteration:   4640, Loss function: 4.720, Average Loss: 5.067, avg. samples / sec: 291.72
Iteration:   4660, Loss function: 4.905, Average Loss: 5.064, avg. samples / sec: 307.69
Iteration:   4680, Loss function: 5.221, Average Loss: 5.058, avg. samples / sec: 321.22
Iteration:   4700, Loss function: 4.715, Average Loss: 5.055, avg. samples / sec: 258.75
Iteration:   4720, Loss function: 4.657, Average Loss: 5.050, avg. samples / sec: 327.77
Iteration:   4740, Loss function: 4.773, Average Loss: 5.045, avg. samples / sec: 321.29
Iteration:   4760, Loss function: 4.823, Average Loss: 5.042, avg. samples / sec: 259.56
Iteration:   4780, Loss function: 4.899, Average Loss: 5.038, avg. samples / sec: 240.59
Iteration:   4800, Loss function: 4.911, Average Loss: 5.035, avg. samples / sec: 310.39
Iteration:   4820, Loss function: 4.833, Average Loss: 5.031, avg. samples / sec: 323.16
Iteration:   4840, Loss function: 4.990, Average Loss: 5.028, avg. samples / sec: 320.25
Iteration:   4860, Loss function: 4.749, Average Loss: 5.023, avg. samples / sec: 314.05
Iteration:   4880, Loss function: 5.063, Average Loss: 5.020, avg. samples / sec: 326.68
Iteration:   4900, Loss function: 4.607, Average Loss: 5.016, avg. samples / sec: 325.69
Iteration:   4920, Loss function: 4.876, Average Loss: 5.013, avg. samples / sec: 324.37
Iteration:   4940, Loss function: 4.800, Average Loss: 5.009, avg. samples / sec: 292.39
Iteration:   4960, Loss function: 4.891, Average Loss: 5.006, avg. samples / sec: 314.59
Iteration:   4980, Loss function: 4.635, Average Loss: 5.002, avg. samples / sec: 334.32
Iteration:   5000, Loss function: 5.070, Average Loss: 4.999, avg. samples / sec: 329.68
Iteration:   5020, Loss function: 5.096, Average Loss: 4.996, avg. samples / sec: 328.03
Iteration:   5040, Loss function: 4.795, Average Loss: 4.993, avg. samples / sec: 330.68
Iteration:   5060, Loss function: 4.682, Average Loss: 4.989, avg. samples / sec: 282.19
Iteration:   5080, Loss function: 4.435, Average Loss: 4.985, avg. samples / sec: 262.98
Iteration:   5100, Loss function: 4.696, Average Loss: 4.982, avg. samples / sec: 252.31
Iteration:   5120, Loss function: 4.627, Average Loss: 4.979, avg. samples / sec: 263.97
Iteration:   5140, Loss function: 4.928, Average Loss: 4.975, avg. samples / sec: 201.13
:::MLLOG {"namespace": "", "time_ms": 1639082709478, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 90.12 s
:::MLLOG {"namespace": "", "time_ms": 1639082799758, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082799761, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082799761, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.17s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.003, Average Loss: 4.971, avg. samples / sec: 23.14
DONE (t=6.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10771
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22122
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19282
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13869
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10771 AP goal: 0.10000
Iteration:   5180, Loss function: 4.834, Average Loss: 4.968, avg. samples / sec: 334.89
:::MLLOG {"namespace": "", "time_ms": 1639082813324, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813325, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10770516075807372, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813325, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082814137, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:57 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:57 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580330, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580485, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1035585762, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1035585762
:::MLLOG {"namespace": "", "time_ms": 1639080582552, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080582552, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080582557, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687515, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687515, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080689302, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689304, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689608, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689609, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689610, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.792, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.290, Average Loss: 0.457, avg. samples / sec: 288.92
Iteration:     40, Loss function: 20.823, Average Loss: 0.859, avg. samples / sec: 289.55
Iteration:     60, Loss function: 20.390, Average Loss: 1.249, avg. samples / sec: 269.32
Iteration:     80, Loss function: 20.164, Average Loss: 1.625, avg. samples / sec: 235.85
Iteration:    100, Loss function: 18.114, Average Loss: 1.976, avg. samples / sec: 266.71
Iteration:    120, Loss function: 12.449, Average Loss: 2.220, avg. samples / sec: 257.70
Iteration:    140, Loss function: 10.073, Average Loss: 2.391, avg. samples / sec: 256.02
Iteration:    160, Loss function: 9.485, Average Loss: 2.534, avg. samples / sec: 252.33
Iteration:    180, Loss function: 9.200, Average Loss: 2.665, avg. samples / sec: 285.58
Iteration:    200, Loss function: 8.780, Average Loss: 2.790, avg. samples / sec: 278.22
Iteration:    220, Loss function: 8.570, Average Loss: 2.909, avg. samples / sec: 252.26
Iteration:    240, Loss function: 8.675, Average Loss: 3.025, avg. samples / sec: 249.95
Iteration:    260, Loss function: 8.604, Average Loss: 3.138, avg. samples / sec: 234.98
Iteration:    280, Loss function: 8.389, Average Loss: 3.247, avg. samples / sec: 273.35
Iteration:    300, Loss function: 8.290, Average Loss: 3.349, avg. samples / sec: 289.00
Iteration:    320, Loss function: 8.423, Average Loss: 3.447, avg. samples / sec: 259.84
Iteration:    340, Loss function: 8.539, Average Loss: 3.546, avg. samples / sec: 271.10
Iteration:    360, Loss function: 8.037, Average Loss: 3.638, avg. samples / sec: 277.02
Iteration:    380, Loss function: 7.977, Average Loss: 3.726, avg. samples / sec: 197.80
Iteration:    400, Loss function: 7.965, Average Loss: 3.809, avg. samples / sec: 223.91
Iteration:    420, Loss function: 7.598, Average Loss: 3.889, avg. samples / sec: 290.54
Iteration:    440, Loss function: 7.909, Average Loss: 3.969, avg. samples / sec: 316.16
Iteration:    460, Loss function: 7.791, Average Loss: 4.044, avg. samples / sec: 254.33
Iteration:    480, Loss function: 7.551, Average Loss: 4.115, avg. samples / sec: 299.79
Iteration:    500, Loss function: 7.523, Average Loss: 4.183, avg. samples / sec: 292.24
Iteration:    520, Loss function: 7.464, Average Loss: 4.250, avg. samples / sec: 303.84
Iteration:    540, Loss function: 7.746, Average Loss: 4.314, avg. samples / sec: 322.46
Iteration:    560, Loss function: 7.295, Average Loss: 4.375, avg. samples / sec: 334.12
Iteration:    580, Loss function: 7.275, Average Loss: 4.435, avg. samples / sec: 307.11
Iteration:    600, Loss function: 7.306, Average Loss: 4.492, avg. samples / sec: 280.72
Iteration:    620, Loss function: 7.280, Average Loss: 4.547, avg. samples / sec: 323.02
Iteration:    640, Loss function: 6.821, Average Loss: 4.601, avg. samples / sec: 333.76
Iteration:    660, Loss function: 6.987, Average Loss: 4.652, avg. samples / sec: 310.47
Iteration:    680, Loss function: 7.284, Average Loss: 4.702, avg. samples / sec: 324.51
Iteration:    700, Loss function: 6.823, Average Loss: 4.748, avg. samples / sec: 331.67
Iteration:    720, Loss function: 7.020, Average Loss: 4.797, avg. samples / sec: 300.43
Iteration:    740, Loss function: 6.913, Average Loss: 4.840, avg. samples / sec: 280.83
Iteration:    760, Loss function: 7.061, Average Loss: 4.882, avg. samples / sec: 310.96
Iteration:    780, Loss function: 6.755, Average Loss: 4.924, avg. samples / sec: 282.77
Iteration:    800, Loss function: 7.260, Average Loss: 4.962, avg. samples / sec: 306.21
Iteration:    820, Loss function: 6.725, Average Loss: 4.998, avg. samples / sec: 327.08
Iteration:    840, Loss function: 6.716, Average Loss: 5.035, avg. samples / sec: 328.97
Iteration:    860, Loss function: 6.870, Average Loss: 5.068, avg. samples / sec: 319.49
Iteration:    880, Loss function: 6.751, Average Loss: 5.100, avg. samples / sec: 317.33
Iteration:    900, Loss function: 6.884, Average Loss: 5.130, avg. samples / sec: 255.61
Iteration:    920, Loss function: 6.694, Average Loss: 5.158, avg. samples / sec: 321.55
Iteration:    940, Loss function: 6.597, Average Loss: 5.187, avg. samples / sec: 323.69
Iteration:    960, Loss function: 6.320, Average Loss: 5.213, avg. samples / sec: 305.26
Iteration:    980, Loss function: 6.565, Average Loss: 5.240, avg. samples / sec: 201.60
Iteration:   1000, Loss function: 6.576, Average Loss: 5.265, avg. samples / sec: 264.54
Iteration:   1020, Loss function: 6.538, Average Loss: 5.288, avg. samples / sec: 215.69
:::MLLOG {"namespace": "", "time_ms": 1639081109713, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081109715, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.526, Average Loss: 5.312, avg. samples / sec: 276.70
Iteration:   1060, Loss function: 6.291, Average Loss: 5.334, avg. samples / sec: 317.39
Iteration:   1080, Loss function: 6.453, Average Loss: 5.354, avg. samples / sec: 297.18
Iteration:   1100, Loss function: 6.103, Average Loss: 5.374, avg. samples / sec: 287.63
Iteration:   1120, Loss function: 6.213, Average Loss: 5.391, avg. samples / sec: 295.40
Iteration:   1140, Loss function: 6.417, Average Loss: 5.409, avg. samples / sec: 284.39
Iteration:   1160, Loss function: 6.258, Average Loss: 5.426, avg. samples / sec: 328.98
Iteration:   1180, Loss function: 6.397, Average Loss: 5.442, avg. samples / sec: 317.78
Iteration:   1200, Loss function: 6.191, Average Loss: 5.458, avg. samples / sec: 306.71
Iteration:   1220, Loss function: 6.081, Average Loss: 5.473, avg. samples / sec: 313.32
Iteration:   1240, Loss function: 6.089, Average Loss: 5.485, avg. samples / sec: 292.98
Iteration:   1260, Loss function: 6.107, Average Loss: 5.497, avg. samples / sec: 268.75
Iteration:   1280, Loss function: 5.938, Average Loss: 5.507, avg. samples / sec: 268.27
Iteration:   1300, Loss function: 6.122, Average Loss: 5.519, avg. samples / sec: 268.66
Iteration:   1320, Loss function: 6.161, Average Loss: 5.531, avg. samples / sec: 232.07
Iteration:   1340, Loss function: 5.828, Average Loss: 5.540, avg. samples / sec: 298.08
Iteration:   1360, Loss function: 6.095, Average Loss: 5.550, avg. samples / sec: 265.14
Iteration:   1380, Loss function: 6.141, Average Loss: 5.560, avg. samples / sec: 323.61
Iteration:   1400, Loss function: 6.063, Average Loss: 5.568, avg. samples / sec: 328.44
Iteration:   1420, Loss function: 6.012, Average Loss: 5.576, avg. samples / sec: 259.47
Iteration:   1440, Loss function: 6.324, Average Loss: 5.584, avg. samples / sec: 298.60
Iteration:   1460, Loss function: 6.170, Average Loss: 5.592, avg. samples / sec: 243.02
Iteration:   1480, Loss function: 5.870, Average Loss: 5.599, avg. samples / sec: 325.38
Iteration:   1500, Loss function: 5.983, Average Loss: 5.606, avg. samples / sec: 333.80
Iteration:   1520, Loss function: 6.012, Average Loss: 5.611, avg. samples / sec: 316.93
Iteration:   1540, Loss function: 5.988, Average Loss: 5.615, avg. samples / sec: 331.65
Iteration:   1560, Loss function: 5.837, Average Loss: 5.620, avg. samples / sec: 216.53
Iteration:   1580, Loss function: 5.736, Average Loss: 5.624, avg. samples / sec: 174.72
Iteration:   1600, Loss function: 5.996, Average Loss: 5.630, avg. samples / sec: 279.36
Iteration:   1620, Loss function: 5.685, Average Loss: 5.634, avg. samples / sec: 268.84
Iteration:   1640, Loss function: 5.952, Average Loss: 5.636, avg. samples / sec: 269.52
Iteration:   1660, Loss function: 5.921, Average Loss: 5.639, avg. samples / sec: 287.38
Iteration:   1680, Loss function: 5.788, Average Loss: 5.642, avg. samples / sec: 325.16
Iteration:   1700, Loss function: 5.289, Average Loss: 5.645, avg. samples / sec: 324.55
Iteration:   1720, Loss function: 5.540, Average Loss: 5.646, avg. samples / sec: 331.27
Iteration:   1740, Loss function: 5.751, Average Loss: 5.649, avg. samples / sec: 331.75
Iteration:   1760, Loss function: 5.529, Average Loss: 5.650, avg. samples / sec: 337.94
Iteration:   1780, Loss function: 5.565, Average Loss: 5.651, avg. samples / sec: 326.98
Iteration:   1800, Loss function: 5.537, Average Loss: 5.652, avg. samples / sec: 325.58
Iteration:   1820, Loss function: 5.886, Average Loss: 5.653, avg. samples / sec: 289.29
Iteration:   1840, Loss function: 5.861, Average Loss: 5.653, avg. samples / sec: 232.46
Iteration:   1860, Loss function: 5.796, Average Loss: 5.653, avg. samples / sec: 177.03
Iteration:   1880, Loss function: 6.052, Average Loss: 5.654, avg. samples / sec: 298.89
Iteration:   1900, Loss function: 5.813, Average Loss: 5.655, avg. samples / sec: 299.92
Iteration:   1920, Loss function: 5.765, Average Loss: 5.654, avg. samples / sec: 269.75
Iteration:   1940, Loss function: 5.797, Average Loss: 5.653, avg. samples / sec: 286.28
Iteration:   1960, Loss function: 5.736, Average Loss: 5.652, avg. samples / sec: 311.39
Iteration:   1980, Loss function: 5.725, Average Loss: 5.651, avg. samples / sec: 331.52
Iteration:   2000, Loss function: 5.648, Average Loss: 5.650, avg. samples / sec: 330.98
Iteration:   2020, Loss function: 5.551, Average Loss: 5.649, avg. samples / sec: 324.77
Iteration:   2040, Loss function: 5.595, Average Loss: 5.648, avg. samples / sec: 331.19
:::MLLOG {"namespace": "", "time_ms": 1639081516683, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081516685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.435, Average Loss: 5.646, avg. samples / sec: 330.49
Iteration:   2080, Loss function: 5.182, Average Loss: 5.644, avg. samples / sec: 312.56
Iteration:   2100, Loss function: 5.517, Average Loss: 5.641, avg. samples / sec: 330.92
Iteration:   2120, Loss function: 5.246, Average Loss: 5.639, avg. samples / sec: 325.06
Iteration:   2140, Loss function: 5.373, Average Loss: 5.635, avg. samples / sec: 297.19
Iteration:   2160, Loss function: 5.400, Average Loss: 5.632, avg. samples / sec: 322.40
Iteration:   2180, Loss function: 5.343, Average Loss: 5.630, avg. samples / sec: 331.09
Iteration:   2200, Loss function: 5.521, Average Loss: 5.626, avg. samples / sec: 326.08
Iteration:   2220, Loss function: 5.636, Average Loss: 5.623, avg. samples / sec: 321.44
Iteration:   2240, Loss function: 5.293, Average Loss: 5.621, avg. samples / sec: 238.87
Iteration:   2260, Loss function: 5.286, Average Loss: 5.618, avg. samples / sec: 229.33
Iteration:   2280, Loss function: 5.205, Average Loss: 5.615, avg. samples / sec: 270.69
Iteration:   2300, Loss function: 5.096, Average Loss: 5.611, avg. samples / sec: 319.86
Iteration:   2320, Loss function: 5.419, Average Loss: 5.609, avg. samples / sec: 331.71
Iteration:   2340, Loss function: 5.516, Average Loss: 5.606, avg. samples / sec: 331.41
Iteration:   2360, Loss function: 5.326, Average Loss: 5.602, avg. samples / sec: 330.41
Iteration:   2380, Loss function: 5.357, Average Loss: 5.598, avg. samples / sec: 328.15
Iteration:   2400, Loss function: 5.512, Average Loss: 5.594, avg. samples / sec: 291.98
Iteration:   2420, Loss function: 5.531, Average Loss: 5.590, avg. samples / sec: 317.13
Iteration:   2440, Loss function: 5.536, Average Loss: 5.586, avg. samples / sec: 267.80
Iteration:   2460, Loss function: 5.227, Average Loss: 5.582, avg. samples / sec: 287.34
Iteration:   2480, Loss function: 5.368, Average Loss: 5.577, avg. samples / sec: 287.77
Iteration:   2500, Loss function: 5.302, Average Loss: 5.572, avg. samples / sec: 310.11
Iteration:   2520, Loss function: 5.427, Average Loss: 5.568, avg. samples / sec: 319.27
Iteration:   2540, Loss function: 5.351, Average Loss: 5.565, avg. samples / sec: 313.70
Iteration:   2560, Loss function: 5.322, Average Loss: 5.562, avg. samples / sec: 261.09
Iteration:   2580, Loss function: 5.309, Average Loss: 5.558, avg. samples / sec: 321.44
Iteration:   2600, Loss function: 5.523, Average Loss: 5.555, avg. samples / sec: 290.79
Iteration:   2620, Loss function: 5.536, Average Loss: 5.550, avg. samples / sec: 339.08
Iteration:   2640, Loss function: 5.290, Average Loss: 5.547, avg. samples / sec: 328.18
Iteration:   2660, Loss function: 5.093, Average Loss: 5.544, avg. samples / sec: 318.37
Iteration:   2680, Loss function: 5.115, Average Loss: 5.540, avg. samples / sec: 328.49
Iteration:   2700, Loss function: 5.235, Average Loss: 5.536, avg. samples / sec: 315.50
Iteration:   2720, Loss function: 5.206, Average Loss: 5.532, avg. samples / sec: 316.16
Iteration:   2740, Loss function: 4.953, Average Loss: 5.527, avg. samples / sec: 329.75
Iteration:   2760, Loss function: 5.040, Average Loss: 5.522, avg. samples / sec: 321.19
Iteration:   2780, Loss function: 5.599, Average Loss: 5.519, avg. samples / sec: 307.50
Iteration:   2800, Loss function: 5.430, Average Loss: 5.514, avg. samples / sec: 293.48
Iteration:   2820, Loss function: 5.488, Average Loss: 5.511, avg. samples / sec: 266.33
Iteration:   2840, Loss function: 5.175, Average Loss: 5.507, avg. samples / sec: 224.42
Iteration:   2860, Loss function: 5.108, Average Loss: 5.501, avg. samples / sec: 279.03
Iteration:   2880, Loss function: 5.310, Average Loss: 5.497, avg. samples / sec: 291.41
Iteration:   2900, Loss function: 5.174, Average Loss: 5.492, avg. samples / sec: 229.21
Iteration:   2920, Loss function: 5.136, Average Loss: 5.486, avg. samples / sec: 257.84
Iteration:   2940, Loss function: 4.954, Average Loss: 5.482, avg. samples / sec: 270.50
Iteration:   2960, Loss function: 5.317, Average Loss: 5.477, avg. samples / sec: 278.47
Iteration:   2980, Loss function: 5.191, Average Loss: 5.473, avg. samples / sec: 278.74
Iteration:   3000, Loss function: 5.207, Average Loss: 5.468, avg. samples / sec: 326.97
Iteration:   3020, Loss function: 5.166, Average Loss: 5.462, avg. samples / sec: 331.61
Iteration:   3040, Loss function: 5.186, Average Loss: 5.456, avg. samples / sec: 330.10
Iteration:   3060, Loss function: 5.052, Average Loss: 5.450, avg. samples / sec: 304.92
Iteration:   3080, Loss function: 4.982, Average Loss: 5.445, avg. samples / sec: 317.56
:::MLLOG {"namespace": "", "time_ms": 1639081908924, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081908926, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.202, Average Loss: 5.439, avg. samples / sec: 272.56
Iteration:   3120, Loss function: 4.892, Average Loss: 5.432, avg. samples / sec: 299.69
Iteration:   3140, Loss function: 5.061, Average Loss: 5.428, avg. samples / sec: 326.98
Iteration:   3160, Loss function: 5.476, Average Loss: 5.421, avg. samples / sec: 278.22
Iteration:   3180, Loss function: 4.943, Average Loss: 5.416, avg. samples / sec: 314.69
Iteration:   3200, Loss function: 5.259, Average Loss: 5.411, avg. samples / sec: 283.97
Iteration:   3220, Loss function: 5.197, Average Loss: 5.405, avg. samples / sec: 281.85
Iteration:   3240, Loss function: 5.103, Average Loss: 5.400, avg. samples / sec: 240.63
Iteration:   3260, Loss function: 4.983, Average Loss: 5.394, avg. samples / sec: 292.47
Iteration:   3280, Loss function: 4.765, Average Loss: 5.387, avg. samples / sec: 312.39
Iteration:   3300, Loss function: 4.781, Average Loss: 5.382, avg. samples / sec: 286.14
Iteration:   3320, Loss function: 4.889, Average Loss: 5.377, avg. samples / sec: 201.37
Iteration:   3340, Loss function: 5.231, Average Loss: 5.372, avg. samples / sec: 281.49
Iteration:   3360, Loss function: 5.186, Average Loss: 5.366, avg. samples / sec: 294.79
Iteration:   3380, Loss function: 5.448, Average Loss: 5.360, avg. samples / sec: 320.65
Iteration:   3400, Loss function: 4.807, Average Loss: 5.354, avg. samples / sec: 292.99
Iteration:   3420, Loss function: 5.233, Average Loss: 5.349, avg. samples / sec: 292.76
Iteration:   3440, Loss function: 4.735, Average Loss: 5.344, avg. samples / sec: 239.57
Iteration:   3460, Loss function: 5.122, Average Loss: 5.338, avg. samples / sec: 303.01
Iteration:   3480, Loss function: 5.273, Average Loss: 5.334, avg. samples / sec: 200.44
Iteration:   3500, Loss function: 5.196, Average Loss: 5.330, avg. samples / sec: 310.01
Iteration:   3520, Loss function: 4.860, Average Loss: 5.327, avg. samples / sec: 297.22
Iteration:   3540, Loss function: 5.053, Average Loss: 5.323, avg. samples / sec: 316.27
Iteration:   3560, Loss function: 4.792, Average Loss: 5.318, avg. samples / sec: 280.79
Iteration:   3580, Loss function: 5.064, Average Loss: 5.314, avg. samples / sec: 265.38
Iteration:   3600, Loss function: 5.189, Average Loss: 5.307, avg. samples / sec: 313.53
Iteration:   3620, Loss function: 4.942, Average Loss: 5.301, avg. samples / sec: 327.42
Iteration:   3640, Loss function: 4.666, Average Loss: 5.296, avg. samples / sec: 333.73
Iteration:   3660, Loss function: 4.934, Average Loss: 5.290, avg. samples / sec: 335.80
Iteration:   3680, Loss function: 5.097, Average Loss: 5.284, avg. samples / sec: 324.81
Iteration:   3700, Loss function: 5.009, Average Loss: 5.279, avg. samples / sec: 324.87
Iteration:   3720, Loss function: 4.959, Average Loss: 5.273, avg. samples / sec: 308.90
Iteration:   3740, Loss function: 5.222, Average Loss: 5.268, avg. samples / sec: 326.85
Iteration:   3760, Loss function: 5.120, Average Loss: 5.264, avg. samples / sec: 325.53
Iteration:   3780, Loss function: 5.297, Average Loss: 5.259, avg. samples / sec: 330.42
Iteration:   3800, Loss function: 5.342, Average Loss: 5.256, avg. samples / sec: 328.66
Iteration:   3820, Loss function: 5.317, Average Loss: 5.251, avg. samples / sec: 313.91
Iteration:   3840, Loss function: 5.013, Average Loss: 5.247, avg. samples / sec: 306.19
Iteration:   3860, Loss function: 4.943, Average Loss: 5.242, avg. samples / sec: 263.42
Iteration:   3880, Loss function: 4.949, Average Loss: 5.237, avg. samples / sec: 328.19
Iteration:   3900, Loss function: 5.050, Average Loss: 5.232, avg. samples / sec: 323.85
Iteration:   3920, Loss function: 4.867, Average Loss: 5.226, avg. samples / sec: 297.70
Iteration:   3940, Loss function: 5.140, Average Loss: 5.220, avg. samples / sec: 254.21
Iteration:   3960, Loss function: 5.132, Average Loss: 5.217, avg. samples / sec: 334.41
Iteration:   3980, Loss function: 4.898, Average Loss: 5.212, avg. samples / sec: 322.78
Iteration:   4000, Loss function: 5.103, Average Loss: 5.209, avg. samples / sec: 304.14
Iteration:   4020, Loss function: 4.938, Average Loss: 5.204, avg. samples / sec: 303.26
Iteration:   4040, Loss function: 5.186, Average Loss: 5.200, avg. samples / sec: 303.12
Iteration:   4060, Loss function: 5.126, Average Loss: 5.196, avg. samples / sec: 270.72
Iteration:   4080, Loss function: 5.020, Average Loss: 5.192, avg. samples / sec: 330.23
Iteration:   4100, Loss function: 5.014, Average Loss: 5.188, avg. samples / sec: 269.96
:::MLLOG {"namespace": "", "time_ms": 1639082308368, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082308370, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.050, Average Loss: 5.184, avg. samples / sec: 283.84
Iteration:   4140, Loss function: 4.951, Average Loss: 5.179, avg. samples / sec: 294.50
Iteration:   4160, Loss function: 4.793, Average Loss: 5.172, avg. samples / sec: 271.48
Iteration:   4180, Loss function: 5.003, Average Loss: 5.165, avg. samples / sec: 304.40
Iteration:   4200, Loss function: 4.929, Average Loss: 5.161, avg. samples / sec: 274.32
Iteration:   4220, Loss function: 4.801, Average Loss: 5.155, avg. samples / sec: 328.12
Iteration:   4240, Loss function: 4.873, Average Loss: 5.150, avg. samples / sec: 323.22
Iteration:   4260, Loss function: 4.910, Average Loss: 5.145, avg. samples / sec: 259.70
Iteration:   4280, Loss function: 4.916, Average Loss: 5.140, avg. samples / sec: 270.60
Iteration:   4300, Loss function: 4.875, Average Loss: 5.133, avg. samples / sec: 238.70
Iteration:   4320, Loss function: 4.828, Average Loss: 5.128, avg. samples / sec: 256.13
Iteration:   4340, Loss function: 4.826, Average Loss: 5.124, avg. samples / sec: 310.77
Iteration:   4360, Loss function: 4.917, Average Loss: 5.121, avg. samples / sec: 242.84
Iteration:   4380, Loss function: 5.215, Average Loss: 5.117, avg. samples / sec: 255.24
Iteration:   4400, Loss function: 5.075, Average Loss: 5.113, avg. samples / sec: 241.05
Iteration:   4420, Loss function: 5.105, Average Loss: 5.109, avg. samples / sec: 280.24
Iteration:   4440, Loss function: 4.866, Average Loss: 5.104, avg. samples / sec: 323.08
Iteration:   4460, Loss function: 5.228, Average Loss: 5.100, avg. samples / sec: 316.93
Iteration:   4480, Loss function: 5.061, Average Loss: 5.097, avg. samples / sec: 309.79
Iteration:   4500, Loss function: 4.797, Average Loss: 5.094, avg. samples / sec: 331.14
Iteration:   4520, Loss function: 4.688, Average Loss: 5.090, avg. samples / sec: 325.11
Iteration:   4540, Loss function: 5.004, Average Loss: 5.086, avg. samples / sec: 330.20
Iteration:   4560, Loss function: 4.776, Average Loss: 5.083, avg. samples / sec: 331.81
Iteration:   4580, Loss function: 4.755, Average Loss: 5.080, avg. samples / sec: 313.12
Iteration:   4600, Loss function: 4.777, Average Loss: 5.076, avg. samples / sec: 333.23
Iteration:   4620, Loss function: 4.854, Average Loss: 5.072, avg. samples / sec: 312.31
Iteration:   4640, Loss function: 4.720, Average Loss: 5.067, avg. samples / sec: 291.72
Iteration:   4660, Loss function: 4.905, Average Loss: 5.064, avg. samples / sec: 307.69
Iteration:   4680, Loss function: 5.221, Average Loss: 5.058, avg. samples / sec: 321.22
Iteration:   4700, Loss function: 4.715, Average Loss: 5.055, avg. samples / sec: 258.75
Iteration:   4720, Loss function: 4.657, Average Loss: 5.050, avg. samples / sec: 327.77
Iteration:   4740, Loss function: 4.773, Average Loss: 5.045, avg. samples / sec: 321.29
Iteration:   4760, Loss function: 4.823, Average Loss: 5.042, avg. samples / sec: 259.56
Iteration:   4780, Loss function: 4.899, Average Loss: 5.038, avg. samples / sec: 240.59
Iteration:   4800, Loss function: 4.911, Average Loss: 5.035, avg. samples / sec: 310.39
Iteration:   4820, Loss function: 4.833, Average Loss: 5.031, avg. samples / sec: 323.16
Iteration:   4840, Loss function: 4.990, Average Loss: 5.028, avg. samples / sec: 320.25
Iteration:   4860, Loss function: 4.749, Average Loss: 5.023, avg. samples / sec: 314.05
Iteration:   4880, Loss function: 5.063, Average Loss: 5.020, avg. samples / sec: 326.68
Iteration:   4900, Loss function: 4.607, Average Loss: 5.016, avg. samples / sec: 325.69
Iteration:   4920, Loss function: 4.876, Average Loss: 5.013, avg. samples / sec: 324.37
Iteration:   4940, Loss function: 4.800, Average Loss: 5.009, avg. samples / sec: 292.39
Iteration:   4960, Loss function: 4.891, Average Loss: 5.006, avg. samples / sec: 314.59
Iteration:   4980, Loss function: 4.635, Average Loss: 5.002, avg. samples / sec: 334.32
Iteration:   5000, Loss function: 5.070, Average Loss: 4.999, avg. samples / sec: 329.68
Iteration:   5020, Loss function: 5.096, Average Loss: 4.996, avg. samples / sec: 328.03
Iteration:   5040, Loss function: 4.795, Average Loss: 4.993, avg. samples / sec: 330.68
Iteration:   5060, Loss function: 4.682, Average Loss: 4.989, avg. samples / sec: 282.19
Iteration:   5080, Loss function: 4.435, Average Loss: 4.985, avg. samples / sec: 262.98
Iteration:   5100, Loss function: 4.696, Average Loss: 4.982, avg. samples / sec: 252.31
Iteration:   5120, Loss function: 4.627, Average Loss: 4.979, avg. samples / sec: 263.97
Iteration:   5140, Loss function: 4.928, Average Loss: 4.975, avg. samples / sec: 201.13
:::MLLOG {"namespace": "", "time_ms": 1639082709478, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 90.12 s
:::MLLOG {"namespace": "", "time_ms": 1639082799758, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082799761, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082799761, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.17s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.003, Average Loss: 4.971, avg. samples / sec: 23.14
DONE (t=6.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10771
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22122
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19282
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13869
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21736
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10771 AP goal: 0.10000
Iteration:   5180, Loss function: 4.834, Average Loss: 4.968, avg. samples / sec: 334.89
:::MLLOG {"namespace": "", "time_ms": 1639082813324, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813325, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10770516075807372, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082813325, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082814137, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082817
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:57 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:33 PM'
START TIMING RUN WAS 2021-12-09 08:09:33 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:57 PM'
ENDING TIMING RUN AT 2021-12-09 08:46:57 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
+ result=2244
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-09 08:09:33 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-09 08:09:33 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
