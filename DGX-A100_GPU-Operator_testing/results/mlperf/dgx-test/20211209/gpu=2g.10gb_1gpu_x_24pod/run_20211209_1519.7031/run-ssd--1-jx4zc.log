+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-jx4zc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-jx4zc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-jx4zc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36
+ MIG_MODE=1
Found 1 MIG instances: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080577
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-jx4zc to the sync file ...
run-ssd--1-jx4zc Found 18 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
    14	run-ssd--1-wbth6
    15	run-ssd--1-4jg6j
    16	run-ssd--1-9qdbc
    17	run-ssd--1-6gxt2
    18	run-ssd--1-jx4zc
Thu Dec  9 20:09:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080584980, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080585460, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3907377660, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3907377660
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080590023, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590024, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692364, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692365, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080698582, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080698583, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080698927, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080698928, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080698932, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.548, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.000, Average Loss: 0.454, avg. samples / sec: 187.19
Iteration:     40, Loss function: 20.823, Average Loss: 0.855, avg. samples / sec: 231.24
Iteration:     60, Loss function: 20.558, Average Loss: 1.245, avg. samples / sec: 230.84
Iteration:     80, Loss function: 20.149, Average Loss: 1.620, avg. samples / sec: 254.66
Iteration:    100, Loss function: 16.820, Average Loss: 1.960, avg. samples / sec: 256.80
Iteration:    120, Loss function: 10.989, Average Loss: 2.181, avg. samples / sec: 252.31
Iteration:    140, Loss function: 9.645, Average Loss: 2.339, avg. samples / sec: 257.34
Iteration:    160, Loss function: 9.135, Average Loss: 2.477, avg. samples / sec: 270.63
Iteration:    180, Loss function: 9.061, Average Loss: 2.605, avg. samples / sec: 268.41
Iteration:    200, Loss function: 8.667, Average Loss: 2.729, avg. samples / sec: 311.44
Iteration:    220, Loss function: 8.658, Average Loss: 2.848, avg. samples / sec: 309.13
Iteration:    240, Loss function: 8.553, Average Loss: 2.965, avg. samples / sec: 291.07
Iteration:    260, Loss function: 8.709, Average Loss: 3.077, avg. samples / sec: 307.17
Iteration:    280, Loss function: 8.624, Average Loss: 3.187, avg. samples / sec: 299.76
Iteration:    300, Loss function: 8.395, Average Loss: 3.291, avg. samples / sec: 329.92
Iteration:    320, Loss function: 8.267, Average Loss: 3.389, avg. samples / sec: 308.38
Iteration:    340, Loss function: 8.238, Average Loss: 3.487, avg. samples / sec: 286.63
Iteration:    360, Loss function: 7.880, Average Loss: 3.578, avg. samples / sec: 309.04
Iteration:    380, Loss function: 7.840, Average Loss: 3.664, avg. samples / sec: 313.95
Iteration:    400, Loss function: 7.901, Average Loss: 3.747, avg. samples / sec: 311.13
Iteration:    420, Loss function: 7.713, Average Loss: 3.828, avg. samples / sec: 264.76
Iteration:    440, Loss function: 7.807, Average Loss: 3.908, avg. samples / sec: 284.99
Iteration:    460, Loss function: 7.639, Average Loss: 3.983, avg. samples / sec: 322.91
Iteration:    480, Loss function: 7.426, Average Loss: 4.055, avg. samples / sec: 318.53
Iteration:    500, Loss function: 7.186, Average Loss: 4.125, avg. samples / sec: 323.50
Iteration:    520, Loss function: 7.563, Average Loss: 4.192, avg. samples / sec: 321.31
Iteration:    540, Loss function: 7.363, Average Loss: 4.257, avg. samples / sec: 323.42
Iteration:    560, Loss function: 7.264, Average Loss: 4.320, avg. samples / sec: 313.38
Iteration:    580, Loss function: 7.031, Average Loss: 4.380, avg. samples / sec: 329.18
Iteration:    600, Loss function: 7.334, Average Loss: 4.438, avg. samples / sec: 319.35
Iteration:    620, Loss function: 6.919, Average Loss: 4.492, avg. samples / sec: 330.50
Iteration:    640, Loss function: 6.968, Average Loss: 4.544, avg. samples / sec: 312.10
Iteration:    660, Loss function: 7.131, Average Loss: 4.596, avg. samples / sec: 287.04
Iteration:    680, Loss function: 7.381, Average Loss: 4.648, avg. samples / sec: 310.36
Iteration:    700, Loss function: 6.756, Average Loss: 4.696, avg. samples / sec: 298.55
Iteration:    720, Loss function: 7.122, Average Loss: 4.745, avg. samples / sec: 308.94
Iteration:    740, Loss function: 6.949, Average Loss: 4.789, avg. samples / sec: 306.62
Iteration:    760, Loss function: 7.031, Average Loss: 4.833, avg. samples / sec: 319.81
Iteration:    780, Loss function: 6.761, Average Loss: 4.875, avg. samples / sec: 299.91
Iteration:    800, Loss function: 7.187, Average Loss: 4.914, avg. samples / sec: 322.19
Iteration:    820, Loss function: 6.847, Average Loss: 4.951, avg. samples / sec: 327.79
Iteration:    840, Loss function: 6.696, Average Loss: 4.987, avg. samples / sec: 324.18
Iteration:    860, Loss function: 6.787, Average Loss: 5.021, avg. samples / sec: 284.76
Iteration:    880, Loss function: 6.673, Average Loss: 5.053, avg. samples / sec: 203.12
Iteration:    900, Loss function: 6.719, Average Loss: 5.084, avg. samples / sec: 297.21
Iteration:    920, Loss function: 6.676, Average Loss: 5.113, avg. samples / sec: 334.84
Iteration:    940, Loss function: 6.678, Average Loss: 5.141, avg. samples / sec: 324.47
Iteration:    960, Loss function: 6.403, Average Loss: 5.169, avg. samples / sec: 319.97
Iteration:    980, Loss function: 6.466, Average Loss: 5.195, avg. samples / sec: 327.85
Iteration:   1000, Loss function: 6.573, Average Loss: 5.220, avg. samples / sec: 332.36
Iteration:   1020, Loss function: 6.372, Average Loss: 5.243, avg. samples / sec: 335.76
:::MLLOG {"namespace": "", "time_ms": 1639081100274, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081100275, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.664, Average Loss: 5.266, avg. samples / sec: 327.23
Iteration:   1060, Loss function: 6.381, Average Loss: 5.289, avg. samples / sec: 332.63
Iteration:   1080, Loss function: 6.292, Average Loss: 5.309, avg. samples / sec: 181.22
Iteration:   1100, Loss function: 6.144, Average Loss: 5.329, avg. samples / sec: 269.11
Iteration:   1120, Loss function: 6.052, Average Loss: 5.348, avg. samples / sec: 241.95
Iteration:   1140, Loss function: 6.444, Average Loss: 5.367, avg. samples / sec: 329.15
Iteration:   1160, Loss function: 6.277, Average Loss: 5.384, avg. samples / sec: 289.97
Iteration:   1180, Loss function: 6.305, Average Loss: 5.400, avg. samples / sec: 282.11
Iteration:   1200, Loss function: 6.307, Average Loss: 5.416, avg. samples / sec: 331.83
Iteration:   1220, Loss function: 6.176, Average Loss: 5.431, avg. samples / sec: 343.03
Iteration:   1240, Loss function: 6.092, Average Loss: 5.444, avg. samples / sec: 337.18
Iteration:   1260, Loss function: 5.951, Average Loss: 5.456, avg. samples / sec: 340.82
Iteration:   1280, Loss function: 5.994, Average Loss: 5.468, avg. samples / sec: 314.65
Iteration:   1300, Loss function: 6.100, Average Loss: 5.480, avg. samples / sec: 321.82
Iteration:   1320, Loss function: 6.216, Average Loss: 5.494, avg. samples / sec: 334.78
Iteration:   1340, Loss function: 5.871, Average Loss: 5.504, avg. samples / sec: 315.16
Iteration:   1360, Loss function: 6.043, Average Loss: 5.514, avg. samples / sec: 255.25
Iteration:   1380, Loss function: 6.163, Average Loss: 5.525, avg. samples / sec: 289.16
Iteration:   1400, Loss function: 6.116, Average Loss: 5.533, avg. samples / sec: 320.72
Iteration:   1420, Loss function: 5.982, Average Loss: 5.541, avg. samples / sec: 325.31
Iteration:   1440, Loss function: 6.401, Average Loss: 5.549, avg. samples / sec: 314.28
Iteration:   1460, Loss function: 6.017, Average Loss: 5.557, avg. samples / sec: 312.15
Iteration:   1480, Loss function: 5.867, Average Loss: 5.566, avg. samples / sec: 329.10
Iteration:   1500, Loss function: 5.887, Average Loss: 5.573, avg. samples / sec: 340.50
Iteration:   1520, Loss function: 6.001, Average Loss: 5.579, avg. samples / sec: 333.52
Iteration:   1540, Loss function: 6.034, Average Loss: 5.582, avg. samples / sec: 315.15
Iteration:   1560, Loss function: 5.757, Average Loss: 5.587, avg. samples / sec: 326.09
Iteration:   1580, Loss function: 5.555, Average Loss: 5.592, avg. samples / sec: 330.07
Iteration:   1600, Loss function: 6.053, Average Loss: 5.597, avg. samples / sec: 329.24
Iteration:   1620, Loss function: 5.669, Average Loss: 5.602, avg. samples / sec: 300.98
Iteration:   1640, Loss function: 5.984, Average Loss: 5.605, avg. samples / sec: 325.52
Iteration:   1660, Loss function: 5.821, Average Loss: 5.609, avg. samples / sec: 319.57
Iteration:   1680, Loss function: 5.799, Average Loss: 5.612, avg. samples / sec: 332.18
Iteration:   1700, Loss function: 5.465, Average Loss: 5.616, avg. samples / sec: 261.81
Iteration:   1720, Loss function: 5.516, Average Loss: 5.618, avg. samples / sec: 251.00
Iteration:   1740, Loss function: 5.833, Average Loss: 5.621, avg. samples / sec: 325.08
Iteration:   1760, Loss function: 5.613, Average Loss: 5.623, avg. samples / sec: 337.76
Iteration:   1780, Loss function: 5.676, Average Loss: 5.623, avg. samples / sec: 336.69
Iteration:   1800, Loss function: 5.565, Average Loss: 5.625, avg. samples / sec: 332.91
Iteration:   1820, Loss function: 5.911, Average Loss: 5.627, avg. samples / sec: 317.01
Iteration:   1840, Loss function: 5.918, Average Loss: 5.628, avg. samples / sec: 301.52
Iteration:   1860, Loss function: 5.800, Average Loss: 5.628, avg. samples / sec: 275.25
Iteration:   1880, Loss function: 5.818, Average Loss: 5.628, avg. samples / sec: 280.82
Iteration:   1900, Loss function: 5.816, Average Loss: 5.629, avg. samples / sec: 326.68
Iteration:   1920, Loss function: 5.710, Average Loss: 5.628, avg. samples / sec: 336.04
Iteration:   1940, Loss function: 5.718, Average Loss: 5.627, avg. samples / sec: 330.92
Iteration:   1960, Loss function: 5.631, Average Loss: 5.627, avg. samples / sec: 334.03
Iteration:   1980, Loss function: 5.556, Average Loss: 5.626, avg. samples / sec: 290.00
Iteration:   2000, Loss function: 5.609, Average Loss: 5.625, avg. samples / sec: 310.24
Iteration:   2020, Loss function: 5.719, Average Loss: 5.624, avg. samples / sec: 254.93
Iteration:   2040, Loss function: 5.670, Average Loss: 5.624, avg. samples / sec: 214.70
:::MLLOG {"namespace": "", "time_ms": 1639081487859, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081487893, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.513, Average Loss: 5.622, avg. samples / sec: 283.24
Iteration:   2080, Loss function: 5.035, Average Loss: 5.619, avg. samples / sec: 278.04
Iteration:   2100, Loss function: 5.380, Average Loss: 5.617, avg. samples / sec: 285.40
Iteration:   2120, Loss function: 5.295, Average Loss: 5.614, avg. samples / sec: 194.87
Iteration:   2140, Loss function: 5.424, Average Loss: 5.611, avg. samples / sec: 268.41
Iteration:   2160, Loss function: 5.443, Average Loss: 5.609, avg. samples / sec: 251.59
Iteration:   2180, Loss function: 5.332, Average Loss: 5.606, avg. samples / sec: 197.49
Iteration:   2200, Loss function: 5.603, Average Loss: 5.602, avg. samples / sec: 206.16
Iteration:   2220, Loss function: 5.445, Average Loss: 5.600, avg. samples / sec: 274.61
Iteration:   2240, Loss function: 5.353, Average Loss: 5.597, avg. samples / sec: 319.75
Iteration:   2260, Loss function: 5.250, Average Loss: 5.593, avg. samples / sec: 295.98
Iteration:   2280, Loss function: 5.299, Average Loss: 5.590, avg. samples / sec: 320.34
Iteration:   2300, Loss function: 5.235, Average Loss: 5.587, avg. samples / sec: 320.85
Iteration:   2320, Loss function: 5.321, Average Loss: 5.584, avg. samples / sec: 301.96
Iteration:   2340, Loss function: 5.486, Average Loss: 5.581, avg. samples / sec: 305.64
Iteration:   2360, Loss function: 5.469, Average Loss: 5.577, avg. samples / sec: 305.86
Iteration:   2380, Loss function: 5.295, Average Loss: 5.574, avg. samples / sec: 332.73
Iteration:   2400, Loss function: 5.599, Average Loss: 5.570, avg. samples / sec: 308.39
Iteration:   2420, Loss function: 5.406, Average Loss: 5.567, avg. samples / sec: 332.64
Iteration:   2440, Loss function: 5.467, Average Loss: 5.565, avg. samples / sec: 216.83
Iteration:   2460, Loss function: 5.274, Average Loss: 5.562, avg. samples / sec: 270.13
Iteration:   2480, Loss function: 5.363, Average Loss: 5.558, avg. samples / sec: 282.57
Iteration:   2500, Loss function: 5.451, Average Loss: 5.555, avg. samples / sec: 272.10
Iteration:   2520, Loss function: 5.313, Average Loss: 5.550, avg. samples / sec: 319.68
Iteration:   2540, Loss function: 5.366, Average Loss: 5.546, avg. samples / sec: 312.60
Iteration:   2560, Loss function: 5.262, Average Loss: 5.542, avg. samples / sec: 309.59
Iteration:   2580, Loss function: 5.359, Average Loss: 5.540, avg. samples / sec: 277.76
Iteration:   2600, Loss function: 5.428, Average Loss: 5.537, avg. samples / sec: 326.86
Iteration:   2620, Loss function: 5.528, Average Loss: 5.532, avg. samples / sec: 299.59
Iteration:   2640, Loss function: 5.243, Average Loss: 5.529, avg. samples / sec: 334.10
Iteration:   2660, Loss function: 5.051, Average Loss: 5.525, avg. samples / sec: 302.10
Iteration:   2680, Loss function: 5.185, Average Loss: 5.521, avg. samples / sec: 336.56
Iteration:   2700, Loss function: 5.141, Average Loss: 5.516, avg. samples / sec: 275.07
Iteration:   2720, Loss function: 5.353, Average Loss: 5.512, avg. samples / sec: 291.54
Iteration:   2740, Loss function: 5.058, Average Loss: 5.508, avg. samples / sec: 301.26
Iteration:   2760, Loss function: 4.817, Average Loss: 5.503, avg. samples / sec: 264.53
Iteration:   2780, Loss function: 5.463, Average Loss: 5.499, avg. samples / sec: 288.00
Iteration:   2800, Loss function: 5.370, Average Loss: 5.495, avg. samples / sec: 307.81
Iteration:   2820, Loss function: 5.254, Average Loss: 5.491, avg. samples / sec: 318.25
Iteration:   2840, Loss function: 5.208, Average Loss: 5.487, avg. samples / sec: 333.16
Iteration:   2860, Loss function: 5.064, Average Loss: 5.481, avg. samples / sec: 328.98
Iteration:   2880, Loss function: 5.157, Average Loss: 5.476, avg. samples / sec: 331.49
Iteration:   2900, Loss function: 5.005, Average Loss: 5.471, avg. samples / sec: 262.91
Iteration:   2920, Loss function: 5.141, Average Loss: 5.465, avg. samples / sec: 306.93
Iteration:   2940, Loss function: 4.985, Average Loss: 5.461, avg. samples / sec: 326.39
Iteration:   2960, Loss function: 5.292, Average Loss: 5.456, avg. samples / sec: 279.45
Iteration:   2980, Loss function: 5.066, Average Loss: 5.452, avg. samples / sec: 323.84
Iteration:   3000, Loss function: 5.246, Average Loss: 5.446, avg. samples / sec: 290.71
Iteration:   3020, Loss function: 5.371, Average Loss: 5.440, avg. samples / sec: 263.06
Iteration:   3040, Loss function: 5.183, Average Loss: 5.435, avg. samples / sec: 325.57
Iteration:   3060, Loss function: 5.074, Average Loss: 5.430, avg. samples / sec: 274.39
Iteration:   3080, Loss function: 4.902, Average Loss: 5.425, avg. samples / sec: 306.73
:::MLLOG {"namespace": "", "time_ms": 1639081894185, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081894187, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 4.990, Average Loss: 5.420, avg. samples / sec: 307.78
Iteration:   3120, Loss function: 4.908, Average Loss: 5.413, avg. samples / sec: 308.29
Iteration:   3140, Loss function: 4.913, Average Loss: 5.408, avg. samples / sec: 259.22
Iteration:   3160, Loss function: 5.537, Average Loss: 5.403, avg. samples / sec: 295.77
Iteration:   3180, Loss function: 4.986, Average Loss: 5.398, avg. samples / sec: 319.12
Iteration:   3200, Loss function: 5.152, Average Loss: 5.393, avg. samples / sec: 298.70
Iteration:   3220, Loss function: 5.073, Average Loss: 5.387, avg. samples / sec: 271.02
Iteration:   3240, Loss function: 5.099, Average Loss: 5.382, avg. samples / sec: 285.67
Iteration:   3260, Loss function: 5.043, Average Loss: 5.377, avg. samples / sec: 285.77
Iteration:   3280, Loss function: 4.957, Average Loss: 5.370, avg. samples / sec: 296.52
Iteration:   3300, Loss function: 4.960, Average Loss: 5.365, avg. samples / sec: 241.40
Iteration:   3320, Loss function: 5.155, Average Loss: 5.360, avg. samples / sec: 221.30
Iteration:   3340, Loss function: 5.027, Average Loss: 5.356, avg. samples / sec: 329.77
Iteration:   3360, Loss function: 4.952, Average Loss: 5.349, avg. samples / sec: 328.26
Iteration:   3380, Loss function: 5.308, Average Loss: 5.343, avg. samples / sec: 312.77
Iteration:   3400, Loss function: 4.867, Average Loss: 5.339, avg. samples / sec: 309.19
Iteration:   3420, Loss function: 5.185, Average Loss: 5.334, avg. samples / sec: 313.30
Iteration:   3440, Loss function: 4.976, Average Loss: 5.328, avg. samples / sec: 312.33
Iteration:   3460, Loss function: 5.066, Average Loss: 5.323, avg. samples / sec: 302.41
Iteration:   3480, Loss function: 5.179, Average Loss: 5.318, avg. samples / sec: 313.95
Iteration:   3500, Loss function: 4.999, Average Loss: 5.314, avg. samples / sec: 287.35
Iteration:   3520, Loss function: 5.071, Average Loss: 5.310, avg. samples / sec: 331.98
Iteration:   3540, Loss function: 5.055, Average Loss: 5.306, avg. samples / sec: 328.99
Iteration:   3560, Loss function: 4.917, Average Loss: 5.303, avg. samples / sec: 327.60
Iteration:   3580, Loss function: 5.087, Average Loss: 5.299, avg. samples / sec: 326.23
Iteration:   3600, Loss function: 5.103, Average Loss: 5.293, avg. samples / sec: 232.20
Iteration:   3620, Loss function: 4.897, Average Loss: 5.287, avg. samples / sec: 328.25
Iteration:   3640, Loss function: 4.865, Average Loss: 5.282, avg. samples / sec: 318.79
Iteration:   3660, Loss function: 4.983, Average Loss: 5.277, avg. samples / sec: 325.02
Iteration:   3680, Loss function: 4.983, Average Loss: 5.271, avg. samples / sec: 281.34
Iteration:   3700, Loss function: 4.849, Average Loss: 5.266, avg. samples / sec: 171.83
Iteration:   3720, Loss function: 5.059, Average Loss: 5.260, avg. samples / sec: 319.32
Iteration:   3740, Loss function: 5.122, Average Loss: 5.257, avg. samples / sec: 339.73
Iteration:   3760, Loss function: 5.073, Average Loss: 5.254, avg. samples / sec: 329.24
Iteration:   3780, Loss function: 5.101, Average Loss: 5.249, avg. samples / sec: 321.83
Iteration:   3800, Loss function: 5.021, Average Loss: 5.246, avg. samples / sec: 329.19
Iteration:   3820, Loss function: 5.201, Average Loss: 5.241, avg. samples / sec: 326.43
Iteration:   3840, Loss function: 4.766, Average Loss: 5.237, avg. samples / sec: 332.97
Iteration:   3860, Loss function: 4.762, Average Loss: 5.231, avg. samples / sec: 319.34
Iteration:   3880, Loss function: 5.052, Average Loss: 5.226, avg. samples / sec: 300.51
Iteration:   3900, Loss function: 5.248, Average Loss: 5.222, avg. samples / sec: 327.96
Iteration:   3920, Loss function: 5.212, Average Loss: 5.216, avg. samples / sec: 325.12
Iteration:   3940, Loss function: 4.875, Average Loss: 5.211, avg. samples / sec: 333.99
Iteration:   3960, Loss function: 4.829, Average Loss: 5.207, avg. samples / sec: 334.04
Iteration:   3980, Loss function: 4.859, Average Loss: 5.203, avg. samples / sec: 312.09
Iteration:   4000, Loss function: 5.183, Average Loss: 5.199, avg. samples / sec: 334.12
Iteration:   4020, Loss function: 4.950, Average Loss: 5.194, avg. samples / sec: 254.81
Iteration:   4040, Loss function: 5.038, Average Loss: 5.190, avg. samples / sec: 264.89
Iteration:   4060, Loss function: 5.115, Average Loss: 5.187, avg. samples / sec: 327.56
Iteration:   4080, Loss function: 5.123, Average Loss: 5.183, avg. samples / sec: 321.87
Iteration:   4100, Loss function: 5.037, Average Loss: 5.180, avg. samples / sec: 324.36
:::MLLOG {"namespace": "", "time_ms": 1639082284860, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082284862, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.177, avg. samples / sec: 324.50
Iteration:   4140, Loss function: 4.885, Average Loss: 5.171, avg. samples / sec: 307.17
Iteration:   4160, Loss function: 4.821, Average Loss: 5.164, avg. samples / sec: 334.47
Iteration:   4180, Loss function: 4.770, Average Loss: 5.158, avg. samples / sec: 342.27
Iteration:   4200, Loss function: 4.926, Average Loss: 5.154, avg. samples / sec: 335.11
Iteration:   4220, Loss function: 4.758, Average Loss: 5.149, avg. samples / sec: 328.81
Iteration:   4240, Loss function: 4.823, Average Loss: 5.144, avg. samples / sec: 330.40
Iteration:   4260, Loss function: 4.940, Average Loss: 5.139, avg. samples / sec: 297.01
Iteration:   4280, Loss function: 5.112, Average Loss: 5.133, avg. samples / sec: 315.74
Iteration:   4300, Loss function: 4.844, Average Loss: 5.128, avg. samples / sec: 330.72
Iteration:   4320, Loss function: 4.653, Average Loss: 5.123, avg. samples / sec: 336.66
Iteration:   4340, Loss function: 4.545, Average Loss: 5.118, avg. samples / sec: 236.96
Iteration:   4360, Loss function: 4.873, Average Loss: 5.113, avg. samples / sec: 253.97
Iteration:   4380, Loss function: 5.092, Average Loss: 5.109, avg. samples / sec: 287.55
Iteration:   4400, Loss function: 4.857, Average Loss: 5.105, avg. samples / sec: 253.37
Iteration:   4420, Loss function: 4.815, Average Loss: 5.099, avg. samples / sec: 318.39
Iteration:   4440, Loss function: 4.812, Average Loss: 5.093, avg. samples / sec: 319.36
Iteration:   4460, Loss function: 5.389, Average Loss: 5.089, avg. samples / sec: 321.24
Iteration:   4480, Loss function: 4.906, Average Loss: 5.086, avg. samples / sec: 279.54
Iteration:   4500, Loss function: 4.899, Average Loss: 5.083, avg. samples / sec: 278.05
Iteration:   4520, Loss function: 4.693, Average Loss: 5.079, avg. samples / sec: 260.15
Iteration:   4540, Loss function: 4.961, Average Loss: 5.074, avg. samples / sec: 249.03
Iteration:   4560, Loss function: 4.838, Average Loss: 5.070, avg. samples / sec: 291.95
Iteration:   4580, Loss function: 4.553, Average Loss: 5.067, avg. samples / sec: 287.41
Iteration:   4600, Loss function: 4.912, Average Loss: 5.063, avg. samples / sec: 265.71
Iteration:   4620, Loss function: 4.855, Average Loss: 5.060, avg. samples / sec: 203.33
Iteration:   4640, Loss function: 4.590, Average Loss: 5.055, avg. samples / sec: 211.05
Iteration:   4660, Loss function: 4.634, Average Loss: 5.051, avg. samples / sec: 277.02
Iteration:   4680, Loss function: 5.233, Average Loss: 5.048, avg. samples / sec: 313.12
Iteration:   4700, Loss function: 4.651, Average Loss: 5.044, avg. samples / sec: 301.84
Iteration:   4720, Loss function: 4.613, Average Loss: 5.039, avg. samples / sec: 242.35
Iteration:   4740, Loss function: 4.856, Average Loss: 5.035, avg. samples / sec: 267.41
Iteration:   4760, Loss function: 4.741, Average Loss: 5.032, avg. samples / sec: 282.39
Iteration:   4780, Loss function: 5.054, Average Loss: 5.029, avg. samples / sec: 264.81
Iteration:   4800, Loss function: 4.801, Average Loss: 5.026, avg. samples / sec: 290.67
Iteration:   4820, Loss function: 4.750, Average Loss: 5.023, avg. samples / sec: 321.65
Iteration:   4840, Loss function: 5.235, Average Loss: 5.020, avg. samples / sec: 319.33
Iteration:   4860, Loss function: 4.682, Average Loss: 5.015, avg. samples / sec: 274.59
Iteration:   4880, Loss function: 5.077, Average Loss: 5.012, avg. samples / sec: 259.79
Iteration:   4900, Loss function: 4.461, Average Loss: 5.009, avg. samples / sec: 277.27
Iteration:   4920, Loss function: 4.668, Average Loss: 5.006, avg. samples / sec: 234.16
Iteration:   4940, Loss function: 4.745, Average Loss: 5.001, avg. samples / sec: 257.30
Iteration:   4960, Loss function: 4.615, Average Loss: 4.998, avg. samples / sec: 287.00
Iteration:   4980, Loss function: 4.469, Average Loss: 4.993, avg. samples / sec: 286.50
Iteration:   5000, Loss function: 4.767, Average Loss: 4.990, avg. samples / sec: 272.19
Iteration:   5020, Loss function: 5.103, Average Loss: 4.986, avg. samples / sec: 305.43
Iteration:   5040, Loss function: 4.827, Average Loss: 4.984, avg. samples / sec: 298.82
Iteration:   5060, Loss function: 4.728, Average Loss: 4.980, avg. samples / sec: 297.98
Iteration:   5080, Loss function: 4.476, Average Loss: 4.976, avg. samples / sec: 302.78
Iteration:   5100, Loss function: 4.790, Average Loss: 4.974, avg. samples / sec: 299.70
Iteration:   5120, Loss function: 4.630, Average Loss: 4.971, avg. samples / sec: 318.30
Iteration:   5140, Loss function: 4.970, Average Loss: 4.967, avg. samples / sec: 334.54
:::MLLOG {"namespace": "", "time_ms": 1639082695485, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 97.99 s
:::MLLOG {"namespace": "", "time_ms": 1639082793621, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082793624, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082793624, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.04s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.737, Average Loss: 4.962, avg. samples / sec: 21.56
DONE (t=5.82s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11104
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22567
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09834
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19817
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22062
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22062
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11104 AP goal: 0.10000
Iteration:   5180, Loss function: 4.733, Average Loss: 4.958, avg. samples / sec: 335.78
:::MLLOG {"namespace": "", "time_ms": 1639082806928, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806962, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11104045000284979, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806962, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082812415, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:56 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080584980, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080585460, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3907377660, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3907377660
:::MLLOG {"namespace": "", "time_ms": 1639080590023, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080590024, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080590031, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080590032, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692364, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692365, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080698582, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080698583, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080698927, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080698928, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080698932, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.548, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.000, Average Loss: 0.454, avg. samples / sec: 187.19
Iteration:     40, Loss function: 20.823, Average Loss: 0.855, avg. samples / sec: 231.24
Iteration:     60, Loss function: 20.558, Average Loss: 1.245, avg. samples / sec: 230.84
Iteration:     80, Loss function: 20.149, Average Loss: 1.620, avg. samples / sec: 254.66
Iteration:    100, Loss function: 16.820, Average Loss: 1.960, avg. samples / sec: 256.80
Iteration:    120, Loss function: 10.989, Average Loss: 2.181, avg. samples / sec: 252.31
Iteration:    140, Loss function: 9.645, Average Loss: 2.339, avg. samples / sec: 257.34
Iteration:    160, Loss function: 9.135, Average Loss: 2.477, avg. samples / sec: 270.63
Iteration:    180, Loss function: 9.061, Average Loss: 2.605, avg. samples / sec: 268.41
Iteration:    200, Loss function: 8.667, Average Loss: 2.729, avg. samples / sec: 311.44
Iteration:    220, Loss function: 8.658, Average Loss: 2.848, avg. samples / sec: 309.13
Iteration:    240, Loss function: 8.553, Average Loss: 2.965, avg. samples / sec: 291.07
Iteration:    260, Loss function: 8.709, Average Loss: 3.077, avg. samples / sec: 307.17
Iteration:    280, Loss function: 8.624, Average Loss: 3.187, avg. samples / sec: 299.76
Iteration:    300, Loss function: 8.395, Average Loss: 3.291, avg. samples / sec: 329.92
Iteration:    320, Loss function: 8.267, Average Loss: 3.389, avg. samples / sec: 308.38
Iteration:    340, Loss function: 8.238, Average Loss: 3.487, avg. samples / sec: 286.63
Iteration:    360, Loss function: 7.880, Average Loss: 3.578, avg. samples / sec: 309.04
Iteration:    380, Loss function: 7.840, Average Loss: 3.664, avg. samples / sec: 313.95
Iteration:    400, Loss function: 7.901, Average Loss: 3.747, avg. samples / sec: 311.13
Iteration:    420, Loss function: 7.713, Average Loss: 3.828, avg. samples / sec: 264.76
Iteration:    440, Loss function: 7.807, Average Loss: 3.908, avg. samples / sec: 284.99
Iteration:    460, Loss function: 7.639, Average Loss: 3.983, avg. samples / sec: 322.91
Iteration:    480, Loss function: 7.426, Average Loss: 4.055, avg. samples / sec: 318.53
Iteration:    500, Loss function: 7.186, Average Loss: 4.125, avg. samples / sec: 323.50
Iteration:    520, Loss function: 7.563, Average Loss: 4.192, avg. samples / sec: 321.31
Iteration:    540, Loss function: 7.363, Average Loss: 4.257, avg. samples / sec: 323.42
Iteration:    560, Loss function: 7.264, Average Loss: 4.320, avg. samples / sec: 313.38
Iteration:    580, Loss function: 7.031, Average Loss: 4.380, avg. samples / sec: 329.18
Iteration:    600, Loss function: 7.334, Average Loss: 4.438, avg. samples / sec: 319.35
Iteration:    620, Loss function: 6.919, Average Loss: 4.492, avg. samples / sec: 330.50
Iteration:    640, Loss function: 6.968, Average Loss: 4.544, avg. samples / sec: 312.10
Iteration:    660, Loss function: 7.131, Average Loss: 4.596, avg. samples / sec: 287.04
Iteration:    680, Loss function: 7.381, Average Loss: 4.648, avg. samples / sec: 310.36
Iteration:    700, Loss function: 6.756, Average Loss: 4.696, avg. samples / sec: 298.55
Iteration:    720, Loss function: 7.122, Average Loss: 4.745, avg. samples / sec: 308.94
Iteration:    740, Loss function: 6.949, Average Loss: 4.789, avg. samples / sec: 306.62
Iteration:    760, Loss function: 7.031, Average Loss: 4.833, avg. samples / sec: 319.81
Iteration:    780, Loss function: 6.761, Average Loss: 4.875, avg. samples / sec: 299.91
Iteration:    800, Loss function: 7.187, Average Loss: 4.914, avg. samples / sec: 322.19
Iteration:    820, Loss function: 6.847, Average Loss: 4.951, avg. samples / sec: 327.79
Iteration:    840, Loss function: 6.696, Average Loss: 4.987, avg. samples / sec: 324.18
Iteration:    860, Loss function: 6.787, Average Loss: 5.021, avg. samples / sec: 284.76
Iteration:    880, Loss function: 6.673, Average Loss: 5.053, avg. samples / sec: 203.12
Iteration:    900, Loss function: 6.719, Average Loss: 5.084, avg. samples / sec: 297.21
Iteration:    920, Loss function: 6.676, Average Loss: 5.113, avg. samples / sec: 334.84
Iteration:    940, Loss function: 6.678, Average Loss: 5.141, avg. samples / sec: 324.47
Iteration:    960, Loss function: 6.403, Average Loss: 5.169, avg. samples / sec: 319.97
Iteration:    980, Loss function: 6.466, Average Loss: 5.195, avg. samples / sec: 327.85
Iteration:   1000, Loss function: 6.573, Average Loss: 5.220, avg. samples / sec: 332.36
Iteration:   1020, Loss function: 6.372, Average Loss: 5.243, avg. samples / sec: 335.76
:::MLLOG {"namespace": "", "time_ms": 1639081100274, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081100275, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.664, Average Loss: 5.266, avg. samples / sec: 327.23
Iteration:   1060, Loss function: 6.381, Average Loss: 5.289, avg. samples / sec: 332.63
Iteration:   1080, Loss function: 6.292, Average Loss: 5.309, avg. samples / sec: 181.22
Iteration:   1100, Loss function: 6.144, Average Loss: 5.329, avg. samples / sec: 269.11
Iteration:   1120, Loss function: 6.052, Average Loss: 5.348, avg. samples / sec: 241.95
Iteration:   1140, Loss function: 6.444, Average Loss: 5.367, avg. samples / sec: 329.15
Iteration:   1160, Loss function: 6.277, Average Loss: 5.384, avg. samples / sec: 289.97
Iteration:   1180, Loss function: 6.305, Average Loss: 5.400, avg. samples / sec: 282.11
Iteration:   1200, Loss function: 6.307, Average Loss: 5.416, avg. samples / sec: 331.83
Iteration:   1220, Loss function: 6.176, Average Loss: 5.431, avg. samples / sec: 343.03
Iteration:   1240, Loss function: 6.092, Average Loss: 5.444, avg. samples / sec: 337.18
Iteration:   1260, Loss function: 5.951, Average Loss: 5.456, avg. samples / sec: 340.82
Iteration:   1280, Loss function: 5.994, Average Loss: 5.468, avg. samples / sec: 314.65
Iteration:   1300, Loss function: 6.100, Average Loss: 5.480, avg. samples / sec: 321.82
Iteration:   1320, Loss function: 6.216, Average Loss: 5.494, avg. samples / sec: 334.78
Iteration:   1340, Loss function: 5.871, Average Loss: 5.504, avg. samples / sec: 315.16
Iteration:   1360, Loss function: 6.043, Average Loss: 5.514, avg. samples / sec: 255.25
Iteration:   1380, Loss function: 6.163, Average Loss: 5.525, avg. samples / sec: 289.16
Iteration:   1400, Loss function: 6.116, Average Loss: 5.533, avg. samples / sec: 320.72
Iteration:   1420, Loss function: 5.982, Average Loss: 5.541, avg. samples / sec: 325.31
Iteration:   1440, Loss function: 6.401, Average Loss: 5.549, avg. samples / sec: 314.28
Iteration:   1460, Loss function: 6.017, Average Loss: 5.557, avg. samples / sec: 312.15
Iteration:   1480, Loss function: 5.867, Average Loss: 5.566, avg. samples / sec: 329.10
Iteration:   1500, Loss function: 5.887, Average Loss: 5.573, avg. samples / sec: 340.50
Iteration:   1520, Loss function: 6.001, Average Loss: 5.579, avg. samples / sec: 333.52
Iteration:   1540, Loss function: 6.034, Average Loss: 5.582, avg. samples / sec: 315.15
Iteration:   1560, Loss function: 5.757, Average Loss: 5.587, avg. samples / sec: 326.09
Iteration:   1580, Loss function: 5.555, Average Loss: 5.592, avg. samples / sec: 330.07
Iteration:   1600, Loss function: 6.053, Average Loss: 5.597, avg. samples / sec: 329.24
Iteration:   1620, Loss function: 5.669, Average Loss: 5.602, avg. samples / sec: 300.98
Iteration:   1640, Loss function: 5.984, Average Loss: 5.605, avg. samples / sec: 325.52
Iteration:   1660, Loss function: 5.821, Average Loss: 5.609, avg. samples / sec: 319.57
Iteration:   1680, Loss function: 5.799, Average Loss: 5.612, avg. samples / sec: 332.18
Iteration:   1700, Loss function: 5.465, Average Loss: 5.616, avg. samples / sec: 261.81
Iteration:   1720, Loss function: 5.516, Average Loss: 5.618, avg. samples / sec: 251.00
Iteration:   1740, Loss function: 5.833, Average Loss: 5.621, avg. samples / sec: 325.08
Iteration:   1760, Loss function: 5.613, Average Loss: 5.623, avg. samples / sec: 337.76
Iteration:   1780, Loss function: 5.676, Average Loss: 5.623, avg. samples / sec: 336.69
Iteration:   1800, Loss function: 5.565, Average Loss: 5.625, avg. samples / sec: 332.91
Iteration:   1820, Loss function: 5.911, Average Loss: 5.627, avg. samples / sec: 317.01
Iteration:   1840, Loss function: 5.918, Average Loss: 5.628, avg. samples / sec: 301.52
Iteration:   1860, Loss function: 5.800, Average Loss: 5.628, avg. samples / sec: 275.25
Iteration:   1880, Loss function: 5.818, Average Loss: 5.628, avg. samples / sec: 280.82
Iteration:   1900, Loss function: 5.816, Average Loss: 5.629, avg. samples / sec: 326.68
Iteration:   1920, Loss function: 5.710, Average Loss: 5.628, avg. samples / sec: 336.04
Iteration:   1940, Loss function: 5.718, Average Loss: 5.627, avg. samples / sec: 330.92
Iteration:   1960, Loss function: 5.631, Average Loss: 5.627, avg. samples / sec: 334.03
Iteration:   1980, Loss function: 5.556, Average Loss: 5.626, avg. samples / sec: 290.00
Iteration:   2000, Loss function: 5.609, Average Loss: 5.625, avg. samples / sec: 310.24
Iteration:   2020, Loss function: 5.719, Average Loss: 5.624, avg. samples / sec: 254.93
Iteration:   2040, Loss function: 5.670, Average Loss: 5.624, avg. samples / sec: 214.70
:::MLLOG {"namespace": "", "time_ms": 1639081487859, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081487893, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.513, Average Loss: 5.622, avg. samples / sec: 283.24
Iteration:   2080, Loss function: 5.035, Average Loss: 5.619, avg. samples / sec: 278.04
Iteration:   2100, Loss function: 5.380, Average Loss: 5.617, avg. samples / sec: 285.40
Iteration:   2120, Loss function: 5.295, Average Loss: 5.614, avg. samples / sec: 194.87
Iteration:   2140, Loss function: 5.424, Average Loss: 5.611, avg. samples / sec: 268.41
Iteration:   2160, Loss function: 5.443, Average Loss: 5.609, avg. samples / sec: 251.59
Iteration:   2180, Loss function: 5.332, Average Loss: 5.606, avg. samples / sec: 197.49
Iteration:   2200, Loss function: 5.603, Average Loss: 5.602, avg. samples / sec: 206.16
Iteration:   2220, Loss function: 5.445, Average Loss: 5.600, avg. samples / sec: 274.61
Iteration:   2240, Loss function: 5.353, Average Loss: 5.597, avg. samples / sec: 319.75
Iteration:   2260, Loss function: 5.250, Average Loss: 5.593, avg. samples / sec: 295.98
Iteration:   2280, Loss function: 5.299, Average Loss: 5.590, avg. samples / sec: 320.34
Iteration:   2300, Loss function: 5.235, Average Loss: 5.587, avg. samples / sec: 320.85
Iteration:   2320, Loss function: 5.321, Average Loss: 5.584, avg. samples / sec: 301.96
Iteration:   2340, Loss function: 5.486, Average Loss: 5.581, avg. samples / sec: 305.64
Iteration:   2360, Loss function: 5.469, Average Loss: 5.577, avg. samples / sec: 305.86
Iteration:   2380, Loss function: 5.295, Average Loss: 5.574, avg. samples / sec: 332.73
Iteration:   2400, Loss function: 5.599, Average Loss: 5.570, avg. samples / sec: 308.39
Iteration:   2420, Loss function: 5.406, Average Loss: 5.567, avg. samples / sec: 332.64
Iteration:   2440, Loss function: 5.467, Average Loss: 5.565, avg. samples / sec: 216.83
Iteration:   2460, Loss function: 5.274, Average Loss: 5.562, avg. samples / sec: 270.13
Iteration:   2480, Loss function: 5.363, Average Loss: 5.558, avg. samples / sec: 282.57
Iteration:   2500, Loss function: 5.451, Average Loss: 5.555, avg. samples / sec: 272.10
Iteration:   2520, Loss function: 5.313, Average Loss: 5.550, avg. samples / sec: 319.68
Iteration:   2540, Loss function: 5.366, Average Loss: 5.546, avg. samples / sec: 312.60
Iteration:   2560, Loss function: 5.262, Average Loss: 5.542, avg. samples / sec: 309.59
Iteration:   2580, Loss function: 5.359, Average Loss: 5.540, avg. samples / sec: 277.76
Iteration:   2600, Loss function: 5.428, Average Loss: 5.537, avg. samples / sec: 326.86
Iteration:   2620, Loss function: 5.528, Average Loss: 5.532, avg. samples / sec: 299.59
Iteration:   2640, Loss function: 5.243, Average Loss: 5.529, avg. samples / sec: 334.10
Iteration:   2660, Loss function: 5.051, Average Loss: 5.525, avg. samples / sec: 302.10
Iteration:   2680, Loss function: 5.185, Average Loss: 5.521, avg. samples / sec: 336.56
Iteration:   2700, Loss function: 5.141, Average Loss: 5.516, avg. samples / sec: 275.07
Iteration:   2720, Loss function: 5.353, Average Loss: 5.512, avg. samples / sec: 291.54
Iteration:   2740, Loss function: 5.058, Average Loss: 5.508, avg. samples / sec: 301.26
Iteration:   2760, Loss function: 4.817, Average Loss: 5.503, avg. samples / sec: 264.53
Iteration:   2780, Loss function: 5.463, Average Loss: 5.499, avg. samples / sec: 288.00
Iteration:   2800, Loss function: 5.370, Average Loss: 5.495, avg. samples / sec: 307.81
Iteration:   2820, Loss function: 5.254, Average Loss: 5.491, avg. samples / sec: 318.25
Iteration:   2840, Loss function: 5.208, Average Loss: 5.487, avg. samples / sec: 333.16
Iteration:   2860, Loss function: 5.064, Average Loss: 5.481, avg. samples / sec: 328.98
Iteration:   2880, Loss function: 5.157, Average Loss: 5.476, avg. samples / sec: 331.49
Iteration:   2900, Loss function: 5.005, Average Loss: 5.471, avg. samples / sec: 262.91
Iteration:   2920, Loss function: 5.141, Average Loss: 5.465, avg. samples / sec: 306.93
Iteration:   2940, Loss function: 4.985, Average Loss: 5.461, avg. samples / sec: 326.39
Iteration:   2960, Loss function: 5.292, Average Loss: 5.456, avg. samples / sec: 279.45
Iteration:   2980, Loss function: 5.066, Average Loss: 5.452, avg. samples / sec: 323.84
Iteration:   3000, Loss function: 5.246, Average Loss: 5.446, avg. samples / sec: 290.71
Iteration:   3020, Loss function: 5.371, Average Loss: 5.440, avg. samples / sec: 263.06
Iteration:   3040, Loss function: 5.183, Average Loss: 5.435, avg. samples / sec: 325.57
Iteration:   3060, Loss function: 5.074, Average Loss: 5.430, avg. samples / sec: 274.39
Iteration:   3080, Loss function: 4.902, Average Loss: 5.425, avg. samples / sec: 306.73
:::MLLOG {"namespace": "", "time_ms": 1639081894185, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081894187, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 4.990, Average Loss: 5.420, avg. samples / sec: 307.78
Iteration:   3120, Loss function: 4.908, Average Loss: 5.413, avg. samples / sec: 308.29
Iteration:   3140, Loss function: 4.913, Average Loss: 5.408, avg. samples / sec: 259.22
Iteration:   3160, Loss function: 5.537, Average Loss: 5.403, avg. samples / sec: 295.77
Iteration:   3180, Loss function: 4.986, Average Loss: 5.398, avg. samples / sec: 319.12
Iteration:   3200, Loss function: 5.152, Average Loss: 5.393, avg. samples / sec: 298.70
Iteration:   3220, Loss function: 5.073, Average Loss: 5.387, avg. samples / sec: 271.02
Iteration:   3240, Loss function: 5.099, Average Loss: 5.382, avg. samples / sec: 285.67
Iteration:   3260, Loss function: 5.043, Average Loss: 5.377, avg. samples / sec: 285.77
Iteration:   3280, Loss function: 4.957, Average Loss: 5.370, avg. samples / sec: 296.52
Iteration:   3300, Loss function: 4.960, Average Loss: 5.365, avg. samples / sec: 241.40
Iteration:   3320, Loss function: 5.155, Average Loss: 5.360, avg. samples / sec: 221.30
Iteration:   3340, Loss function: 5.027, Average Loss: 5.356, avg. samples / sec: 329.77
Iteration:   3360, Loss function: 4.952, Average Loss: 5.349, avg. samples / sec: 328.26
Iteration:   3380, Loss function: 5.308, Average Loss: 5.343, avg. samples / sec: 312.77
Iteration:   3400, Loss function: 4.867, Average Loss: 5.339, avg. samples / sec: 309.19
Iteration:   3420, Loss function: 5.185, Average Loss: 5.334, avg. samples / sec: 313.30
Iteration:   3440, Loss function: 4.976, Average Loss: 5.328, avg. samples / sec: 312.33
Iteration:   3460, Loss function: 5.066, Average Loss: 5.323, avg. samples / sec: 302.41
Iteration:   3480, Loss function: 5.179, Average Loss: 5.318, avg. samples / sec: 313.95
Iteration:   3500, Loss function: 4.999, Average Loss: 5.314, avg. samples / sec: 287.35
Iteration:   3520, Loss function: 5.071, Average Loss: 5.310, avg. samples / sec: 331.98
Iteration:   3540, Loss function: 5.055, Average Loss: 5.306, avg. samples / sec: 328.99
Iteration:   3560, Loss function: 4.917, Average Loss: 5.303, avg. samples / sec: 327.60
Iteration:   3580, Loss function: 5.087, Average Loss: 5.299, avg. samples / sec: 326.23
Iteration:   3600, Loss function: 5.103, Average Loss: 5.293, avg. samples / sec: 232.20
Iteration:   3620, Loss function: 4.897, Average Loss: 5.287, avg. samples / sec: 328.25
Iteration:   3640, Loss function: 4.865, Average Loss: 5.282, avg. samples / sec: 318.79
Iteration:   3660, Loss function: 4.983, Average Loss: 5.277, avg. samples / sec: 325.02
Iteration:   3680, Loss function: 4.983, Average Loss: 5.271, avg. samples / sec: 281.34
Iteration:   3700, Loss function: 4.849, Average Loss: 5.266, avg. samples / sec: 171.83
Iteration:   3720, Loss function: 5.059, Average Loss: 5.260, avg. samples / sec: 319.32
Iteration:   3740, Loss function: 5.122, Average Loss: 5.257, avg. samples / sec: 339.73
Iteration:   3760, Loss function: 5.073, Average Loss: 5.254, avg. samples / sec: 329.24
Iteration:   3780, Loss function: 5.101, Average Loss: 5.249, avg. samples / sec: 321.83
Iteration:   3800, Loss function: 5.021, Average Loss: 5.246, avg. samples / sec: 329.19
Iteration:   3820, Loss function: 5.201, Average Loss: 5.241, avg. samples / sec: 326.43
Iteration:   3840, Loss function: 4.766, Average Loss: 5.237, avg. samples / sec: 332.97
Iteration:   3860, Loss function: 4.762, Average Loss: 5.231, avg. samples / sec: 319.34
Iteration:   3880, Loss function: 5.052, Average Loss: 5.226, avg. samples / sec: 300.51
Iteration:   3900, Loss function: 5.248, Average Loss: 5.222, avg. samples / sec: 327.96
Iteration:   3920, Loss function: 5.212, Average Loss: 5.216, avg. samples / sec: 325.12
Iteration:   3940, Loss function: 4.875, Average Loss: 5.211, avg. samples / sec: 333.99
Iteration:   3960, Loss function: 4.829, Average Loss: 5.207, avg. samples / sec: 334.04
Iteration:   3980, Loss function: 4.859, Average Loss: 5.203, avg. samples / sec: 312.09
Iteration:   4000, Loss function: 5.183, Average Loss: 5.199, avg. samples / sec: 334.12
Iteration:   4020, Loss function: 4.950, Average Loss: 5.194, avg. samples / sec: 254.81
Iteration:   4040, Loss function: 5.038, Average Loss: 5.190, avg. samples / sec: 264.89
Iteration:   4060, Loss function: 5.115, Average Loss: 5.187, avg. samples / sec: 327.56
Iteration:   4080, Loss function: 5.123, Average Loss: 5.183, avg. samples / sec: 321.87
Iteration:   4100, Loss function: 5.037, Average Loss: 5.180, avg. samples / sec: 324.36
:::MLLOG {"namespace": "", "time_ms": 1639082284860, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082284862, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.177, avg. samples / sec: 324.50
Iteration:   4140, Loss function: 4.885, Average Loss: 5.171, avg. samples / sec: 307.17
Iteration:   4160, Loss function: 4.821, Average Loss: 5.164, avg. samples / sec: 334.47
Iteration:   4180, Loss function: 4.770, Average Loss: 5.158, avg. samples / sec: 342.27
Iteration:   4200, Loss function: 4.926, Average Loss: 5.154, avg. samples / sec: 335.11
Iteration:   4220, Loss function: 4.758, Average Loss: 5.149, avg. samples / sec: 328.81
Iteration:   4240, Loss function: 4.823, Average Loss: 5.144, avg. samples / sec: 330.40
Iteration:   4260, Loss function: 4.940, Average Loss: 5.139, avg. samples / sec: 297.01
Iteration:   4280, Loss function: 5.112, Average Loss: 5.133, avg. samples / sec: 315.74
Iteration:   4300, Loss function: 4.844, Average Loss: 5.128, avg. samples / sec: 330.72
Iteration:   4320, Loss function: 4.653, Average Loss: 5.123, avg. samples / sec: 336.66
Iteration:   4340, Loss function: 4.545, Average Loss: 5.118, avg. samples / sec: 236.96
Iteration:   4360, Loss function: 4.873, Average Loss: 5.113, avg. samples / sec: 253.97
Iteration:   4380, Loss function: 5.092, Average Loss: 5.109, avg. samples / sec: 287.55
Iteration:   4400, Loss function: 4.857, Average Loss: 5.105, avg. samples / sec: 253.37
Iteration:   4420, Loss function: 4.815, Average Loss: 5.099, avg. samples / sec: 318.39
Iteration:   4440, Loss function: 4.812, Average Loss: 5.093, avg. samples / sec: 319.36
Iteration:   4460, Loss function: 5.389, Average Loss: 5.089, avg. samples / sec: 321.24
Iteration:   4480, Loss function: 4.906, Average Loss: 5.086, avg. samples / sec: 279.54
Iteration:   4500, Loss function: 4.899, Average Loss: 5.083, avg. samples / sec: 278.05
Iteration:   4520, Loss function: 4.693, Average Loss: 5.079, avg. samples / sec: 260.15
Iteration:   4540, Loss function: 4.961, Average Loss: 5.074, avg. samples / sec: 249.03
Iteration:   4560, Loss function: 4.838, Average Loss: 5.070, avg. samples / sec: 291.95
Iteration:   4580, Loss function: 4.553, Average Loss: 5.067, avg. samples / sec: 287.41
Iteration:   4600, Loss function: 4.912, Average Loss: 5.063, avg. samples / sec: 265.71
Iteration:   4620, Loss function: 4.855, Average Loss: 5.060, avg. samples / sec: 203.33
Iteration:   4640, Loss function: 4.590, Average Loss: 5.055, avg. samples / sec: 211.05
Iteration:   4660, Loss function: 4.634, Average Loss: 5.051, avg. samples / sec: 277.02
Iteration:   4680, Loss function: 5.233, Average Loss: 5.048, avg. samples / sec: 313.12
Iteration:   4700, Loss function: 4.651, Average Loss: 5.044, avg. samples / sec: 301.84
Iteration:   4720, Loss function: 4.613, Average Loss: 5.039, avg. samples / sec: 242.35
Iteration:   4740, Loss function: 4.856, Average Loss: 5.035, avg. samples / sec: 267.41
Iteration:   4760, Loss function: 4.741, Average Loss: 5.032, avg. samples / sec: 282.39
Iteration:   4780, Loss function: 5.054, Average Loss: 5.029, avg. samples / sec: 264.81
Iteration:   4800, Loss function: 4.801, Average Loss: 5.026, avg. samples / sec: 290.67
Iteration:   4820, Loss function: 4.750, Average Loss: 5.023, avg. samples / sec: 321.65
Iteration:   4840, Loss function: 5.235, Average Loss: 5.020, avg. samples / sec: 319.33
Iteration:   4860, Loss function: 4.682, Average Loss: 5.015, avg. samples / sec: 274.59
Iteration:   4880, Loss function: 5.077, Average Loss: 5.012, avg. samples / sec: 259.79
Iteration:   4900, Loss function: 4.461, Average Loss: 5.009, avg. samples / sec: 277.27
Iteration:   4920, Loss function: 4.668, Average Loss: 5.006, avg. samples / sec: 234.16
Iteration:   4940, Loss function: 4.745, Average Loss: 5.001, avg. samples / sec: 257.30
Iteration:   4960, Loss function: 4.615, Average Loss: 4.998, avg. samples / sec: 287.00
Iteration:   4980, Loss function: 4.469, Average Loss: 4.993, avg. samples / sec: 286.50
Iteration:   5000, Loss function: 4.767, Average Loss: 4.990, avg. samples / sec: 272.19
Iteration:   5020, Loss function: 5.103, Average Loss: 4.986, avg. samples / sec: 305.43
Iteration:   5040, Loss function: 4.827, Average Loss: 4.984, avg. samples / sec: 298.82
Iteration:   5060, Loss function: 4.728, Average Loss: 4.980, avg. samples / sec: 297.98
Iteration:   5080, Loss function: 4.476, Average Loss: 4.976, avg. samples / sec: 302.78
Iteration:   5100, Loss function: 4.790, Average Loss: 4.974, avg. samples / sec: 299.70
Iteration:   5120, Loss function: 4.630, Average Loss: 4.971, avg. samples / sec: 318.30
Iteration:   5140, Loss function: 4.970, Average Loss: 4.967, avg. samples / sec: 334.54
:::MLLOG {"namespace": "", "time_ms": 1639082695485, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 97.99 s
:::MLLOG {"namespace": "", "time_ms": 1639082793621, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082793624, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082793624, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.04s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.737, Average Loss: 4.962, avg. samples / sec: 21.56
DONE (t=5.82s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11104
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22567
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09834
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19817
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14133
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20836
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22062
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22062
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11104 AP goal: 0.10000
Iteration:   5180, Loss function: 4.733, Average Loss: 4.958, avg. samples / sec: 335.78
:::MLLOG {"namespace": "", "time_ms": 1639082806928, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806962, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11104045000284979, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082806962, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082812415, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082816
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:46:56 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:37 PM'
START TIMING RUN WAS 2021-12-09 08:09:37 PM
ENDING TIMING RUN AT 2021-12-09 08:46:56 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:56 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
+ result=2239
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-09 08:09:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
