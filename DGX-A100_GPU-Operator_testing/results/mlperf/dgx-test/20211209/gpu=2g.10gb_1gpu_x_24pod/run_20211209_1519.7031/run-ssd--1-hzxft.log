+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-hzxft.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-hzxft.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-hzxft.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ echo 'Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080573
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:33 PM'
STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods
running benchmark
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:33 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:33 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-hzxft to the sync file ...
run-ssd--1-hzxft Found 8 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
Thu Dec  9 20:09:38 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580619, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580790, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4260889666, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4260889666
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080583048, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080583049, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687507, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687508, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080689384, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689386, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689667, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689667, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689668, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.927, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.186, Average Loss: 0.455, avg. samples / sec: 288.99
Iteration:     40, Loss function: 20.747, Average Loss: 0.857, avg. samples / sec: 277.29
Iteration:     60, Loss function: 20.440, Average Loss: 1.248, avg. samples / sec: 234.64
Iteration:     80, Loss function: 20.265, Average Loss: 1.624, avg. samples / sec: 225.48
Iteration:    100, Loss function: 18.361, Average Loss: 1.978, avg. samples / sec: 266.74
Iteration:    120, Loss function: 12.748, Average Loss: 2.234, avg. samples / sec: 268.89
Iteration:    140, Loss function: 10.061, Average Loss: 2.410, avg. samples / sec: 278.38
Iteration:    160, Loss function: 9.531, Average Loss: 2.553, avg. samples / sec: 256.25
Iteration:    180, Loss function: 8.988, Average Loss: 2.683, avg. samples / sec: 276.21
Iteration:    200, Loss function: 8.606, Average Loss: 2.808, avg. samples / sec: 296.38
Iteration:    220, Loss function: 8.544, Average Loss: 2.926, avg. samples / sec: 248.97
Iteration:    240, Loss function: 8.851, Average Loss: 3.042, avg. samples / sec: 277.02
Iteration:    260, Loss function: 8.796, Average Loss: 3.154, avg. samples / sec: 308.75
Iteration:    280, Loss function: 8.422, Average Loss: 3.263, avg. samples / sec: 274.76
Iteration:    300, Loss function: 8.318, Average Loss: 3.366, avg. samples / sec: 292.01
Iteration:    320, Loss function: 8.478, Average Loss: 3.464, avg. samples / sec: 281.36
Iteration:    340, Loss function: 8.241, Average Loss: 3.561, avg. samples / sec: 321.74
Iteration:    360, Loss function: 7.904, Average Loss: 3.652, avg. samples / sec: 320.03
Iteration:    380, Loss function: 7.946, Average Loss: 3.740, avg. samples / sec: 255.84
Iteration:    400, Loss function: 8.097, Average Loss: 3.824, avg. samples / sec: 294.94
Iteration:    420, Loss function: 7.712, Average Loss: 3.905, avg. samples / sec: 293.55
Iteration:    440, Loss function: 7.719, Average Loss: 3.982, avg. samples / sec: 294.20
Iteration:    460, Loss function: 7.776, Average Loss: 4.057, avg. samples / sec: 283.28
Iteration:    480, Loss function: 7.363, Average Loss: 4.129, avg. samples / sec: 252.56
Iteration:    500, Loss function: 7.597, Average Loss: 4.198, avg. samples / sec: 319.73
Iteration:    520, Loss function: 7.570, Average Loss: 4.265, avg. samples / sec: 290.56
Iteration:    540, Loss function: 7.426, Average Loss: 4.328, avg. samples / sec: 260.57
Iteration:    560, Loss function: 7.102, Average Loss: 4.390, avg. samples / sec: 307.57
Iteration:    580, Loss function: 7.193, Average Loss: 4.449, avg. samples / sec: 313.71
Iteration:    600, Loss function: 7.322, Average Loss: 4.506, avg. samples / sec: 325.18
Iteration:    620, Loss function: 7.218, Average Loss: 4.561, avg. samples / sec: 272.40
Iteration:    640, Loss function: 6.930, Average Loss: 4.615, avg. samples / sec: 263.39
Iteration:    660, Loss function: 7.234, Average Loss: 4.668, avg. samples / sec: 281.31
Iteration:    680, Loss function: 7.281, Average Loss: 4.718, avg. samples / sec: 228.15
Iteration:    700, Loss function: 6.904, Average Loss: 4.764, avg. samples / sec: 301.17
Iteration:    720, Loss function: 7.115, Average Loss: 4.812, avg. samples / sec: 306.86
Iteration:    740, Loss function: 6.904, Average Loss: 4.856, avg. samples / sec: 317.65
Iteration:    760, Loss function: 7.064, Average Loss: 4.900, avg. samples / sec: 316.84
Iteration:    780, Loss function: 6.896, Average Loss: 4.941, avg. samples / sec: 299.33
Iteration:    800, Loss function: 7.162, Average Loss: 4.980, avg. samples / sec: 299.29
Iteration:    820, Loss function: 6.701, Average Loss: 5.017, avg. samples / sec: 271.93
Iteration:    840, Loss function: 6.722, Average Loss: 5.052, avg. samples / sec: 275.15
Iteration:    860, Loss function: 6.959, Average Loss: 5.087, avg. samples / sec: 269.11
Iteration:    880, Loss function: 6.746, Average Loss: 5.119, avg. samples / sec: 326.28
Iteration:    900, Loss function: 6.757, Average Loss: 5.149, avg. samples / sec: 342.29
Iteration:    920, Loss function: 6.640, Average Loss: 5.178, avg. samples / sec: 205.01
Iteration:    940, Loss function: 6.744, Average Loss: 5.206, avg. samples / sec: 202.76
Iteration:    960, Loss function: 6.428, Average Loss: 5.235, avg. samples / sec: 331.56
Iteration:    980, Loss function: 6.714, Average Loss: 5.262, avg. samples / sec: 325.50
Iteration:   1000, Loss function: 6.488, Average Loss: 5.286, avg. samples / sec: 322.18
Iteration:   1020, Loss function: 6.405, Average Loss: 5.308, avg. samples / sec: 316.92
:::MLLOG {"namespace": "", "time_ms": 1639081105606, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081105629, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.567, Average Loss: 5.332, avg. samples / sec: 273.55
Iteration:   1060, Loss function: 6.341, Average Loss: 5.354, avg. samples / sec: 259.92
Iteration:   1080, Loss function: 6.292, Average Loss: 5.375, avg. samples / sec: 244.15
Iteration:   1100, Loss function: 6.191, Average Loss: 5.394, avg. samples / sec: 271.32
Iteration:   1120, Loss function: 6.301, Average Loss: 5.412, avg. samples / sec: 326.73
Iteration:   1140, Loss function: 6.431, Average Loss: 5.431, avg. samples / sec: 308.91
Iteration:   1160, Loss function: 6.181, Average Loss: 5.447, avg. samples / sec: 314.87
Iteration:   1180, Loss function: 6.309, Average Loss: 5.463, avg. samples / sec: 303.86
Iteration:   1200, Loss function: 6.045, Average Loss: 5.478, avg. samples / sec: 321.74
Iteration:   1220, Loss function: 6.337, Average Loss: 5.493, avg. samples / sec: 324.59
Iteration:   1240, Loss function: 6.017, Average Loss: 5.505, avg. samples / sec: 331.44
Iteration:   1260, Loss function: 6.086, Average Loss: 5.516, avg. samples / sec: 327.95
Iteration:   1280, Loss function: 5.850, Average Loss: 5.528, avg. samples / sec: 326.77
Iteration:   1300, Loss function: 6.228, Average Loss: 5.540, avg. samples / sec: 337.38
Iteration:   1320, Loss function: 6.103, Average Loss: 5.551, avg. samples / sec: 335.78
Iteration:   1340, Loss function: 5.893, Average Loss: 5.562, avg. samples / sec: 338.44
Iteration:   1360, Loss function: 6.019, Average Loss: 5.572, avg. samples / sec: 305.20
Iteration:   1380, Loss function: 6.189, Average Loss: 5.581, avg. samples / sec: 250.68
Iteration:   1400, Loss function: 6.106, Average Loss: 5.589, avg. samples / sec: 247.14
Iteration:   1420, Loss function: 5.816, Average Loss: 5.596, avg. samples / sec: 268.56
Iteration:   1440, Loss function: 6.317, Average Loss: 5.604, avg. samples / sec: 325.62
Iteration:   1460, Loss function: 6.109, Average Loss: 5.612, avg. samples / sec: 322.53
Iteration:   1480, Loss function: 5.976, Average Loss: 5.619, avg. samples / sec: 287.29
Iteration:   1500, Loss function: 6.072, Average Loss: 5.625, avg. samples / sec: 227.93
Iteration:   1520, Loss function: 5.967, Average Loss: 5.631, avg. samples / sec: 288.74
Iteration:   1540, Loss function: 6.091, Average Loss: 5.635, avg. samples / sec: 269.09
Iteration:   1560, Loss function: 5.580, Average Loss: 5.639, avg. samples / sec: 321.98
Iteration:   1580, Loss function: 5.720, Average Loss: 5.644, avg. samples / sec: 330.17
Iteration:   1600, Loss function: 6.020, Average Loss: 5.649, avg. samples / sec: 338.49
Iteration:   1620, Loss function: 5.775, Average Loss: 5.654, avg. samples / sec: 328.70
Iteration:   1640, Loss function: 6.041, Average Loss: 5.657, avg. samples / sec: 258.27
Iteration:   1660, Loss function: 5.879, Average Loss: 5.660, avg. samples / sec: 266.95
Iteration:   1680, Loss function: 5.932, Average Loss: 5.664, avg. samples / sec: 260.23
Iteration:   1700, Loss function: 5.358, Average Loss: 5.668, avg. samples / sec: 333.28
Iteration:   1720, Loss function: 5.743, Average Loss: 5.669, avg. samples / sec: 331.77
Iteration:   1740, Loss function: 5.863, Average Loss: 5.672, avg. samples / sec: 337.94
Iteration:   1760, Loss function: 5.568, Average Loss: 5.672, avg. samples / sec: 296.25
Iteration:   1780, Loss function: 5.767, Average Loss: 5.672, avg. samples / sec: 211.43
Iteration:   1800, Loss function: 5.557, Average Loss: 5.674, avg. samples / sec: 244.64
Iteration:   1820, Loss function: 5.829, Average Loss: 5.675, avg. samples / sec: 312.47
Iteration:   1840, Loss function: 5.978, Average Loss: 5.676, avg. samples / sec: 311.02
Iteration:   1860, Loss function: 5.834, Average Loss: 5.675, avg. samples / sec: 309.90
Iteration:   1880, Loss function: 5.842, Average Loss: 5.676, avg. samples / sec: 332.65
Iteration:   1900, Loss function: 5.809, Average Loss: 5.677, avg. samples / sec: 297.97
Iteration:   1920, Loss function: 5.679, Average Loss: 5.675, avg. samples / sec: 297.54
Iteration:   1940, Loss function: 5.800, Average Loss: 5.674, avg. samples / sec: 225.37
Iteration:   1960, Loss function: 5.686, Average Loss: 5.673, avg. samples / sec: 319.21
Iteration:   1980, Loss function: 5.801, Average Loss: 5.672, avg. samples / sec: 333.71
Iteration:   2000, Loss function: 5.632, Average Loss: 5.672, avg. samples / sec: 324.23
Iteration:   2020, Loss function: 5.677, Average Loss: 5.669, avg. samples / sec: 313.41
Iteration:   2040, Loss function: 5.827, Average Loss: 5.668, avg. samples / sec: 330.09
:::MLLOG {"namespace": "", "time_ms": 1639081502760, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081502762, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.323, Average Loss: 5.665, avg. samples / sec: 293.39
Iteration:   2080, Loss function: 5.062, Average Loss: 5.662, avg. samples / sec: 300.99
Iteration:   2100, Loss function: 5.568, Average Loss: 5.659, avg. samples / sec: 330.50
Iteration:   2120, Loss function: 5.182, Average Loss: 5.655, avg. samples / sec: 320.10
Iteration:   2140, Loss function: 5.765, Average Loss: 5.653, avg. samples / sec: 329.68
Iteration:   2160, Loss function: 5.474, Average Loss: 5.650, avg. samples / sec: 264.27
Iteration:   2180, Loss function: 5.310, Average Loss: 5.648, avg. samples / sec: 188.05
Iteration:   2200, Loss function: 5.410, Average Loss: 5.643, avg. samples / sec: 167.27
Iteration:   2220, Loss function: 5.609, Average Loss: 5.640, avg. samples / sec: 336.75
Iteration:   2240, Loss function: 5.428, Average Loss: 5.638, avg. samples / sec: 288.19
Iteration:   2260, Loss function: 5.338, Average Loss: 5.635, avg. samples / sec: 259.60
Iteration:   2280, Loss function: 5.214, Average Loss: 5.632, avg. samples / sec: 279.21
Iteration:   2300, Loss function: 5.292, Average Loss: 5.629, avg. samples / sec: 287.15
Iteration:   2320, Loss function: 5.070, Average Loss: 5.625, avg. samples / sec: 270.60
Iteration:   2340, Loss function: 5.263, Average Loss: 5.621, avg. samples / sec: 250.73
Iteration:   2360, Loss function: 5.428, Average Loss: 5.617, avg. samples / sec: 320.29
Iteration:   2380, Loss function: 5.276, Average Loss: 5.614, avg. samples / sec: 236.93
Iteration:   2400, Loss function: 5.480, Average Loss: 5.610, avg. samples / sec: 322.89
Iteration:   2420, Loss function: 5.323, Average Loss: 5.606, avg. samples / sec: 269.71
Iteration:   2440, Loss function: 5.296, Average Loss: 5.602, avg. samples / sec: 315.96
Iteration:   2460, Loss function: 5.398, Average Loss: 5.599, avg. samples / sec: 304.87
Iteration:   2480, Loss function: 5.526, Average Loss: 5.595, avg. samples / sec: 301.05
Iteration:   2500, Loss function: 5.472, Average Loss: 5.591, avg. samples / sec: 333.18
Iteration:   2520, Loss function: 5.274, Average Loss: 5.585, avg. samples / sec: 330.60
Iteration:   2540, Loss function: 5.467, Average Loss: 5.583, avg. samples / sec: 291.90
Iteration:   2560, Loss function: 5.368, Average Loss: 5.579, avg. samples / sec: 239.99
Iteration:   2580, Loss function: 5.541, Average Loss: 5.576, avg. samples / sec: 310.00
Iteration:   2600, Loss function: 5.495, Average Loss: 5.573, avg. samples / sec: 295.23
Iteration:   2620, Loss function: 5.673, Average Loss: 5.568, avg. samples / sec: 172.36
Iteration:   2640, Loss function: 5.222, Average Loss: 5.565, avg. samples / sec: 250.20
Iteration:   2660, Loss function: 5.138, Average Loss: 5.561, avg. samples / sec: 329.24
Iteration:   2680, Loss function: 5.290, Average Loss: 5.558, avg. samples / sec: 319.30
Iteration:   2700, Loss function: 5.232, Average Loss: 5.553, avg. samples / sec: 228.14
Iteration:   2720, Loss function: 5.377, Average Loss: 5.549, avg. samples / sec: 274.19
Iteration:   2740, Loss function: 5.073, Average Loss: 5.543, avg. samples / sec: 306.47
Iteration:   2760, Loss function: 5.009, Average Loss: 5.538, avg. samples / sec: 328.20
Iteration:   2780, Loss function: 5.523, Average Loss: 5.534, avg. samples / sec: 256.47
Iteration:   2800, Loss function: 5.343, Average Loss: 5.528, avg. samples / sec: 280.86
Iteration:   2820, Loss function: 5.459, Average Loss: 5.524, avg. samples / sec: 312.05
Iteration:   2840, Loss function: 5.261, Average Loss: 5.518, avg. samples / sec: 254.42
Iteration:   2860, Loss function: 5.107, Average Loss: 5.513, avg. samples / sec: 319.34
Iteration:   2880, Loss function: 5.328, Average Loss: 5.508, avg. samples / sec: 316.25
Iteration:   2900, Loss function: 5.096, Average Loss: 5.502, avg. samples / sec: 332.32
Iteration:   2920, Loss function: 5.287, Average Loss: 5.496, avg. samples / sec: 316.04
Iteration:   2940, Loss function: 5.048, Average Loss: 5.492, avg. samples / sec: 315.27
Iteration:   2960, Loss function: 5.558, Average Loss: 5.488, avg. samples / sec: 236.76
Iteration:   2980, Loss function: 5.205, Average Loss: 5.484, avg. samples / sec: 280.58
Iteration:   3000, Loss function: 5.202, Average Loss: 5.479, avg. samples / sec: 322.81
Iteration:   3020, Loss function: 5.183, Average Loss: 5.472, avg. samples / sec: 262.73
Iteration:   3040, Loss function: 5.067, Average Loss: 5.466, avg. samples / sec: 309.98
Iteration:   3060, Loss function: 5.058, Average Loss: 5.461, avg. samples / sec: 292.49
Iteration:   3080, Loss function: 4.920, Average Loss: 5.455, avg. samples / sec: 337.50
:::MLLOG {"namespace": "", "time_ms": 1639081919785, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081919787, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.089, Average Loss: 5.450, avg. samples / sec: 336.76
Iteration:   3120, Loss function: 5.029, Average Loss: 5.443, avg. samples / sec: 316.86
Iteration:   3140, Loss function: 5.039, Average Loss: 5.438, avg. samples / sec: 325.64
Iteration:   3160, Loss function: 5.418, Average Loss: 5.432, avg. samples / sec: 315.68
Iteration:   3180, Loss function: 5.017, Average Loss: 5.427, avg. samples / sec: 324.03
Iteration:   3200, Loss function: 5.147, Average Loss: 5.421, avg. samples / sec: 296.93
Iteration:   3220, Loss function: 5.152, Average Loss: 5.416, avg. samples / sec: 338.35
Iteration:   3240, Loss function: 5.129, Average Loss: 5.411, avg. samples / sec: 318.95
Iteration:   3260, Loss function: 5.075, Average Loss: 5.406, avg. samples / sec: 332.67
Iteration:   3280, Loss function: 4.874, Average Loss: 5.399, avg. samples / sec: 315.61
Iteration:   3300, Loss function: 4.757, Average Loss: 5.394, avg. samples / sec: 263.40
Iteration:   3320, Loss function: 4.912, Average Loss: 5.388, avg. samples / sec: 196.06
Iteration:   3340, Loss function: 5.075, Average Loss: 5.384, avg. samples / sec: 324.78
Iteration:   3360, Loss function: 5.385, Average Loss: 5.379, avg. samples / sec: 311.00
Iteration:   3380, Loss function: 5.341, Average Loss: 5.372, avg. samples / sec: 336.81
Iteration:   3400, Loss function: 4.773, Average Loss: 5.367, avg. samples / sec: 291.47
Iteration:   3420, Loss function: 5.156, Average Loss: 5.363, avg. samples / sec: 309.28
Iteration:   3440, Loss function: 4.836, Average Loss: 5.357, avg. samples / sec: 312.35
Iteration:   3460, Loss function: 5.164, Average Loss: 5.351, avg. samples / sec: 321.95
Iteration:   3480, Loss function: 5.215, Average Loss: 5.347, avg. samples / sec: 315.36
Iteration:   3500, Loss function: 5.318, Average Loss: 5.343, avg. samples / sec: 337.21
Iteration:   3520, Loss function: 5.116, Average Loss: 5.339, avg. samples / sec: 313.36
Iteration:   3540, Loss function: 4.964, Average Loss: 5.334, avg. samples / sec: 314.49
Iteration:   3560, Loss function: 4.960, Average Loss: 5.330, avg. samples / sec: 308.00
Iteration:   3580, Loss function: 5.215, Average Loss: 5.324, avg. samples / sec: 319.49
Iteration:   3600, Loss function: 5.050, Average Loss: 5.318, avg. samples / sec: 333.45
Iteration:   3620, Loss function: 4.918, Average Loss: 5.312, avg. samples / sec: 334.28
Iteration:   3640, Loss function: 4.777, Average Loss: 5.307, avg. samples / sec: 317.17
Iteration:   3660, Loss function: 4.970, Average Loss: 5.301, avg. samples / sec: 326.77
Iteration:   3680, Loss function: 5.207, Average Loss: 5.295, avg. samples / sec: 325.47
Iteration:   3700, Loss function: 4.955, Average Loss: 5.289, avg. samples / sec: 328.22
Iteration:   3720, Loss function: 4.864, Average Loss: 5.283, avg. samples / sec: 326.06
Iteration:   3740, Loss function: 5.047, Average Loss: 5.278, avg. samples / sec: 328.27
Iteration:   3760, Loss function: 5.105, Average Loss: 5.275, avg. samples / sec: 335.81
Iteration:   3780, Loss function: 5.296, Average Loss: 5.270, avg. samples / sec: 328.43
Iteration:   3800, Loss function: 5.047, Average Loss: 5.266, avg. samples / sec: 320.29
Iteration:   3820, Loss function: 5.271, Average Loss: 5.261, avg. samples / sec: 335.39
Iteration:   3840, Loss function: 4.935, Average Loss: 5.256, avg. samples / sec: 294.97
Iteration:   3860, Loss function: 4.947, Average Loss: 5.251, avg. samples / sec: 272.60
Iteration:   3880, Loss function: 4.745, Average Loss: 5.245, avg. samples / sec: 332.31
Iteration:   3900, Loss function: 5.122, Average Loss: 5.241, avg. samples / sec: 330.63
Iteration:   3920, Loss function: 5.161, Average Loss: 5.235, avg. samples / sec: 317.55
Iteration:   3940, Loss function: 5.153, Average Loss: 5.231, avg. samples / sec: 296.45
Iteration:   3960, Loss function: 4.971, Average Loss: 5.227, avg. samples / sec: 333.05
Iteration:   3980, Loss function: 4.807, Average Loss: 5.222, avg. samples / sec: 328.41
Iteration:   4000, Loss function: 5.117, Average Loss: 5.217, avg. samples / sec: 318.36
Iteration:   4020, Loss function: 5.111, Average Loss: 5.211, avg. samples / sec: 316.68
Iteration:   4040, Loss function: 5.210, Average Loss: 5.207, avg. samples / sec: 323.74
Iteration:   4060, Loss function: 5.254, Average Loss: 5.203, avg. samples / sec: 333.38
Iteration:   4080, Loss function: 5.055, Average Loss: 5.198, avg. samples / sec: 317.27
Iteration:   4100, Loss function: 5.014, Average Loss: 5.194, avg. samples / sec: 328.82
:::MLLOG {"namespace": "", "time_ms": 1639082292346, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082292347, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.014, Average Loss: 5.190, avg. samples / sec: 317.92
Iteration:   4140, Loss function: 4.894, Average Loss: 5.184, avg. samples / sec: 330.63
Iteration:   4160, Loss function: 4.988, Average Loss: 5.178, avg. samples / sec: 334.99
Iteration:   4180, Loss function: 5.139, Average Loss: 5.172, avg. samples / sec: 330.80
Iteration:   4200, Loss function: 4.932, Average Loss: 5.168, avg. samples / sec: 335.06
Iteration:   4220, Loss function: 4.943, Average Loss: 5.163, avg. samples / sec: 321.13
Iteration:   4240, Loss function: 4.938, Average Loss: 5.158, avg. samples / sec: 297.74
Iteration:   4260, Loss function: 5.014, Average Loss: 5.152, avg. samples / sec: 316.70
Iteration:   4280, Loss function: 4.855, Average Loss: 5.146, avg. samples / sec: 314.87
Iteration:   4300, Loss function: 4.781, Average Loss: 5.140, avg. samples / sec: 321.96
Iteration:   4320, Loss function: 4.958, Average Loss: 5.136, avg. samples / sec: 267.96
Iteration:   4340, Loss function: 4.643, Average Loss: 5.130, avg. samples / sec: 261.85
Iteration:   4360, Loss function: 5.132, Average Loss: 5.126, avg. samples / sec: 238.43
Iteration:   4380, Loss function: 5.125, Average Loss: 5.122, avg. samples / sec: 297.89
Iteration:   4400, Loss function: 4.812, Average Loss: 5.118, avg. samples / sec: 298.32
Iteration:   4420, Loss function: 4.888, Average Loss: 5.112, avg. samples / sec: 321.35
Iteration:   4440, Loss function: 4.903, Average Loss: 5.108, avg. samples / sec: 331.57
Iteration:   4460, Loss function: 5.084, Average Loss: 5.104, avg. samples / sec: 308.30
Iteration:   4480, Loss function: 5.028, Average Loss: 5.101, avg. samples / sec: 307.75
Iteration:   4500, Loss function: 4.918, Average Loss: 5.098, avg. samples / sec: 271.38
Iteration:   4520, Loss function: 4.726, Average Loss: 5.094, avg. samples / sec: 238.64
Iteration:   4540, Loss function: 5.008, Average Loss: 5.090, avg. samples / sec: 260.55
Iteration:   4560, Loss function: 4.784, Average Loss: 5.087, avg. samples / sec: 193.11
Iteration:   4580, Loss function: 4.765, Average Loss: 5.085, avg. samples / sec: 206.54
Iteration:   4600, Loss function: 4.810, Average Loss: 5.082, avg. samples / sec: 258.82
Iteration:   4620, Loss function: 4.793, Average Loss: 5.077, avg. samples / sec: 274.51
Iteration:   4640, Loss function: 4.802, Average Loss: 5.072, avg. samples / sec: 300.24
Iteration:   4660, Loss function: 4.789, Average Loss: 5.069, avg. samples / sec: 295.81
Iteration:   4680, Loss function: 5.328, Average Loss: 5.064, avg. samples / sec: 307.84
Iteration:   4700, Loss function: 4.917, Average Loss: 5.060, avg. samples / sec: 336.26
Iteration:   4720, Loss function: 4.869, Average Loss: 5.056, avg. samples / sec: 330.81
Iteration:   4740, Loss function: 4.791, Average Loss: 5.051, avg. samples / sec: 258.44
Iteration:   4760, Loss function: 4.626, Average Loss: 5.047, avg. samples / sec: 288.87
Iteration:   4780, Loss function: 5.013, Average Loss: 5.043, avg. samples / sec: 279.32
Iteration:   4800, Loss function: 5.188, Average Loss: 5.041, avg. samples / sec: 280.54
Iteration:   4820, Loss function: 4.723, Average Loss: 5.036, avg. samples / sec: 259.11
Iteration:   4840, Loss function: 5.109, Average Loss: 5.034, avg. samples / sec: 235.99
Iteration:   4860, Loss function: 4.676, Average Loss: 5.029, avg. samples / sec: 334.64
Iteration:   4880, Loss function: 5.158, Average Loss: 5.026, avg. samples / sec: 323.19
Iteration:   4900, Loss function: 4.728, Average Loss: 5.022, avg. samples / sec: 274.12
Iteration:   4920, Loss function: 4.935, Average Loss: 5.018, avg. samples / sec: 294.21
Iteration:   4940, Loss function: 4.751, Average Loss: 5.013, avg. samples / sec: 282.94
Iteration:   4960, Loss function: 4.666, Average Loss: 5.010, avg. samples / sec: 316.31
Iteration:   4980, Loss function: 4.511, Average Loss: 5.005, avg. samples / sec: 317.63
Iteration:   5000, Loss function: 4.949, Average Loss: 5.001, avg. samples / sec: 333.10
Iteration:   5020, Loss function: 5.145, Average Loss: 4.997, avg. samples / sec: 296.65
Iteration:   5040, Loss function: 4.795, Average Loss: 4.994, avg. samples / sec: 312.99
Iteration:   5060, Loss function: 4.711, Average Loss: 4.989, avg. samples / sec: 337.27
Iteration:   5080, Loss function: 4.663, Average Loss: 4.985, avg. samples / sec: 315.19
Iteration:   5100, Loss function: 4.869, Average Loss: 4.983, avg. samples / sec: 305.92
Iteration:   5120, Loss function: 4.646, Average Loss: 4.980, avg. samples / sec: 304.73
Iteration:   5140, Loss function: 4.994, Average Loss: 4.976, avg. samples / sec: 330.17
:::MLLOG {"namespace": "", "time_ms": 1639082694594, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 75.22 s
:::MLLOG {"namespace": "", "time_ms": 1639082769985, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082769988, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082769988, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.53s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=7.88s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10367
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21113
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09191
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18837
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13554
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20016
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10367 AP goal: 0.10000
Iteration:   5160, Loss function: 4.913, Average Loss: 4.972, avg. samples / sec: 25.73
:::MLLOG {"namespace": "", "time_ms": 1639082782217, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782219, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10366557421883116, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782219, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782879, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:46:28 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:46:28 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080580619, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080580790, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4260889666, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4260889666
:::MLLOG {"namespace": "", "time_ms": 1639080583048, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080583049, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080583055, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080583056, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080687507, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080687508, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080689384, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080689386, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080689667, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080689667, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080689668, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.927, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.186, Average Loss: 0.455, avg. samples / sec: 288.99
Iteration:     40, Loss function: 20.747, Average Loss: 0.857, avg. samples / sec: 277.29
Iteration:     60, Loss function: 20.440, Average Loss: 1.248, avg. samples / sec: 234.64
Iteration:     80, Loss function: 20.265, Average Loss: 1.624, avg. samples / sec: 225.48
Iteration:    100, Loss function: 18.361, Average Loss: 1.978, avg. samples / sec: 266.74
Iteration:    120, Loss function: 12.748, Average Loss: 2.234, avg. samples / sec: 268.89
Iteration:    140, Loss function: 10.061, Average Loss: 2.410, avg. samples / sec: 278.38
Iteration:    160, Loss function: 9.531, Average Loss: 2.553, avg. samples / sec: 256.25
Iteration:    180, Loss function: 8.988, Average Loss: 2.683, avg. samples / sec: 276.21
Iteration:    200, Loss function: 8.606, Average Loss: 2.808, avg. samples / sec: 296.38
Iteration:    220, Loss function: 8.544, Average Loss: 2.926, avg. samples / sec: 248.97
Iteration:    240, Loss function: 8.851, Average Loss: 3.042, avg. samples / sec: 277.02
Iteration:    260, Loss function: 8.796, Average Loss: 3.154, avg. samples / sec: 308.75
Iteration:    280, Loss function: 8.422, Average Loss: 3.263, avg. samples / sec: 274.76
Iteration:    300, Loss function: 8.318, Average Loss: 3.366, avg. samples / sec: 292.01
Iteration:    320, Loss function: 8.478, Average Loss: 3.464, avg. samples / sec: 281.36
Iteration:    340, Loss function: 8.241, Average Loss: 3.561, avg. samples / sec: 321.74
Iteration:    360, Loss function: 7.904, Average Loss: 3.652, avg. samples / sec: 320.03
Iteration:    380, Loss function: 7.946, Average Loss: 3.740, avg. samples / sec: 255.84
Iteration:    400, Loss function: 8.097, Average Loss: 3.824, avg. samples / sec: 294.94
Iteration:    420, Loss function: 7.712, Average Loss: 3.905, avg. samples / sec: 293.55
Iteration:    440, Loss function: 7.719, Average Loss: 3.982, avg. samples / sec: 294.20
Iteration:    460, Loss function: 7.776, Average Loss: 4.057, avg. samples / sec: 283.28
Iteration:    480, Loss function: 7.363, Average Loss: 4.129, avg. samples / sec: 252.56
Iteration:    500, Loss function: 7.597, Average Loss: 4.198, avg. samples / sec: 319.73
Iteration:    520, Loss function: 7.570, Average Loss: 4.265, avg. samples / sec: 290.56
Iteration:    540, Loss function: 7.426, Average Loss: 4.328, avg. samples / sec: 260.57
Iteration:    560, Loss function: 7.102, Average Loss: 4.390, avg. samples / sec: 307.57
Iteration:    580, Loss function: 7.193, Average Loss: 4.449, avg. samples / sec: 313.71
Iteration:    600, Loss function: 7.322, Average Loss: 4.506, avg. samples / sec: 325.18
Iteration:    620, Loss function: 7.218, Average Loss: 4.561, avg. samples / sec: 272.40
Iteration:    640, Loss function: 6.930, Average Loss: 4.615, avg. samples / sec: 263.39
Iteration:    660, Loss function: 7.234, Average Loss: 4.668, avg. samples / sec: 281.31
Iteration:    680, Loss function: 7.281, Average Loss: 4.718, avg. samples / sec: 228.15
Iteration:    700, Loss function: 6.904, Average Loss: 4.764, avg. samples / sec: 301.17
Iteration:    720, Loss function: 7.115, Average Loss: 4.812, avg. samples / sec: 306.86
Iteration:    740, Loss function: 6.904, Average Loss: 4.856, avg. samples / sec: 317.65
Iteration:    760, Loss function: 7.064, Average Loss: 4.900, avg. samples / sec: 316.84
Iteration:    780, Loss function: 6.896, Average Loss: 4.941, avg. samples / sec: 299.33
Iteration:    800, Loss function: 7.162, Average Loss: 4.980, avg. samples / sec: 299.29
Iteration:    820, Loss function: 6.701, Average Loss: 5.017, avg. samples / sec: 271.93
Iteration:    840, Loss function: 6.722, Average Loss: 5.052, avg. samples / sec: 275.15
Iteration:    860, Loss function: 6.959, Average Loss: 5.087, avg. samples / sec: 269.11
Iteration:    880, Loss function: 6.746, Average Loss: 5.119, avg. samples / sec: 326.28
Iteration:    900, Loss function: 6.757, Average Loss: 5.149, avg. samples / sec: 342.29
Iteration:    920, Loss function: 6.640, Average Loss: 5.178, avg. samples / sec: 205.01
Iteration:    940, Loss function: 6.744, Average Loss: 5.206, avg. samples / sec: 202.76
Iteration:    960, Loss function: 6.428, Average Loss: 5.235, avg. samples / sec: 331.56
Iteration:    980, Loss function: 6.714, Average Loss: 5.262, avg. samples / sec: 325.50
Iteration:   1000, Loss function: 6.488, Average Loss: 5.286, avg. samples / sec: 322.18
Iteration:   1020, Loss function: 6.405, Average Loss: 5.308, avg. samples / sec: 316.92
:::MLLOG {"namespace": "", "time_ms": 1639081105606, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081105629, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.567, Average Loss: 5.332, avg. samples / sec: 273.55
Iteration:   1060, Loss function: 6.341, Average Loss: 5.354, avg. samples / sec: 259.92
Iteration:   1080, Loss function: 6.292, Average Loss: 5.375, avg. samples / sec: 244.15
Iteration:   1100, Loss function: 6.191, Average Loss: 5.394, avg. samples / sec: 271.32
Iteration:   1120, Loss function: 6.301, Average Loss: 5.412, avg. samples / sec: 326.73
Iteration:   1140, Loss function: 6.431, Average Loss: 5.431, avg. samples / sec: 308.91
Iteration:   1160, Loss function: 6.181, Average Loss: 5.447, avg. samples / sec: 314.87
Iteration:   1180, Loss function: 6.309, Average Loss: 5.463, avg. samples / sec: 303.86
Iteration:   1200, Loss function: 6.045, Average Loss: 5.478, avg. samples / sec: 321.74
Iteration:   1220, Loss function: 6.337, Average Loss: 5.493, avg. samples / sec: 324.59
Iteration:   1240, Loss function: 6.017, Average Loss: 5.505, avg. samples / sec: 331.44
Iteration:   1260, Loss function: 6.086, Average Loss: 5.516, avg. samples / sec: 327.95
Iteration:   1280, Loss function: 5.850, Average Loss: 5.528, avg. samples / sec: 326.77
Iteration:   1300, Loss function: 6.228, Average Loss: 5.540, avg. samples / sec: 337.38
Iteration:   1320, Loss function: 6.103, Average Loss: 5.551, avg. samples / sec: 335.78
Iteration:   1340, Loss function: 5.893, Average Loss: 5.562, avg. samples / sec: 338.44
Iteration:   1360, Loss function: 6.019, Average Loss: 5.572, avg. samples / sec: 305.20
Iteration:   1380, Loss function: 6.189, Average Loss: 5.581, avg. samples / sec: 250.68
Iteration:   1400, Loss function: 6.106, Average Loss: 5.589, avg. samples / sec: 247.14
Iteration:   1420, Loss function: 5.816, Average Loss: 5.596, avg. samples / sec: 268.56
Iteration:   1440, Loss function: 6.317, Average Loss: 5.604, avg. samples / sec: 325.62
Iteration:   1460, Loss function: 6.109, Average Loss: 5.612, avg. samples / sec: 322.53
Iteration:   1480, Loss function: 5.976, Average Loss: 5.619, avg. samples / sec: 287.29
Iteration:   1500, Loss function: 6.072, Average Loss: 5.625, avg. samples / sec: 227.93
Iteration:   1520, Loss function: 5.967, Average Loss: 5.631, avg. samples / sec: 288.74
Iteration:   1540, Loss function: 6.091, Average Loss: 5.635, avg. samples / sec: 269.09
Iteration:   1560, Loss function: 5.580, Average Loss: 5.639, avg. samples / sec: 321.98
Iteration:   1580, Loss function: 5.720, Average Loss: 5.644, avg. samples / sec: 330.17
Iteration:   1600, Loss function: 6.020, Average Loss: 5.649, avg. samples / sec: 338.49
Iteration:   1620, Loss function: 5.775, Average Loss: 5.654, avg. samples / sec: 328.70
Iteration:   1640, Loss function: 6.041, Average Loss: 5.657, avg. samples / sec: 258.27
Iteration:   1660, Loss function: 5.879, Average Loss: 5.660, avg. samples / sec: 266.95
Iteration:   1680, Loss function: 5.932, Average Loss: 5.664, avg. samples / sec: 260.23
Iteration:   1700, Loss function: 5.358, Average Loss: 5.668, avg. samples / sec: 333.28
Iteration:   1720, Loss function: 5.743, Average Loss: 5.669, avg. samples / sec: 331.77
Iteration:   1740, Loss function: 5.863, Average Loss: 5.672, avg. samples / sec: 337.94
Iteration:   1760, Loss function: 5.568, Average Loss: 5.672, avg. samples / sec: 296.25
Iteration:   1780, Loss function: 5.767, Average Loss: 5.672, avg. samples / sec: 211.43
Iteration:   1800, Loss function: 5.557, Average Loss: 5.674, avg. samples / sec: 244.64
Iteration:   1820, Loss function: 5.829, Average Loss: 5.675, avg. samples / sec: 312.47
Iteration:   1840, Loss function: 5.978, Average Loss: 5.676, avg. samples / sec: 311.02
Iteration:   1860, Loss function: 5.834, Average Loss: 5.675, avg. samples / sec: 309.90
Iteration:   1880, Loss function: 5.842, Average Loss: 5.676, avg. samples / sec: 332.65
Iteration:   1900, Loss function: 5.809, Average Loss: 5.677, avg. samples / sec: 297.97
Iteration:   1920, Loss function: 5.679, Average Loss: 5.675, avg. samples / sec: 297.54
Iteration:   1940, Loss function: 5.800, Average Loss: 5.674, avg. samples / sec: 225.37
Iteration:   1960, Loss function: 5.686, Average Loss: 5.673, avg. samples / sec: 319.21
Iteration:   1980, Loss function: 5.801, Average Loss: 5.672, avg. samples / sec: 333.71
Iteration:   2000, Loss function: 5.632, Average Loss: 5.672, avg. samples / sec: 324.23
Iteration:   2020, Loss function: 5.677, Average Loss: 5.669, avg. samples / sec: 313.41
Iteration:   2040, Loss function: 5.827, Average Loss: 5.668, avg. samples / sec: 330.09
:::MLLOG {"namespace": "", "time_ms": 1639081502760, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081502762, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.323, Average Loss: 5.665, avg. samples / sec: 293.39
Iteration:   2080, Loss function: 5.062, Average Loss: 5.662, avg. samples / sec: 300.99
Iteration:   2100, Loss function: 5.568, Average Loss: 5.659, avg. samples / sec: 330.50
Iteration:   2120, Loss function: 5.182, Average Loss: 5.655, avg. samples / sec: 320.10
Iteration:   2140, Loss function: 5.765, Average Loss: 5.653, avg. samples / sec: 329.68
Iteration:   2160, Loss function: 5.474, Average Loss: 5.650, avg. samples / sec: 264.27
Iteration:   2180, Loss function: 5.310, Average Loss: 5.648, avg. samples / sec: 188.05
Iteration:   2200, Loss function: 5.410, Average Loss: 5.643, avg. samples / sec: 167.27
Iteration:   2220, Loss function: 5.609, Average Loss: 5.640, avg. samples / sec: 336.75
Iteration:   2240, Loss function: 5.428, Average Loss: 5.638, avg. samples / sec: 288.19
Iteration:   2260, Loss function: 5.338, Average Loss: 5.635, avg. samples / sec: 259.60
Iteration:   2280, Loss function: 5.214, Average Loss: 5.632, avg. samples / sec: 279.21
Iteration:   2300, Loss function: 5.292, Average Loss: 5.629, avg. samples / sec: 287.15
Iteration:   2320, Loss function: 5.070, Average Loss: 5.625, avg. samples / sec: 270.60
Iteration:   2340, Loss function: 5.263, Average Loss: 5.621, avg. samples / sec: 250.73
Iteration:   2360, Loss function: 5.428, Average Loss: 5.617, avg. samples / sec: 320.29
Iteration:   2380, Loss function: 5.276, Average Loss: 5.614, avg. samples / sec: 236.93
Iteration:   2400, Loss function: 5.480, Average Loss: 5.610, avg. samples / sec: 322.89
Iteration:   2420, Loss function: 5.323, Average Loss: 5.606, avg. samples / sec: 269.71
Iteration:   2440, Loss function: 5.296, Average Loss: 5.602, avg. samples / sec: 315.96
Iteration:   2460, Loss function: 5.398, Average Loss: 5.599, avg. samples / sec: 304.87
Iteration:   2480, Loss function: 5.526, Average Loss: 5.595, avg. samples / sec: 301.05
Iteration:   2500, Loss function: 5.472, Average Loss: 5.591, avg. samples / sec: 333.18
Iteration:   2520, Loss function: 5.274, Average Loss: 5.585, avg. samples / sec: 330.60
Iteration:   2540, Loss function: 5.467, Average Loss: 5.583, avg. samples / sec: 291.90
Iteration:   2560, Loss function: 5.368, Average Loss: 5.579, avg. samples / sec: 239.99
Iteration:   2580, Loss function: 5.541, Average Loss: 5.576, avg. samples / sec: 310.00
Iteration:   2600, Loss function: 5.495, Average Loss: 5.573, avg. samples / sec: 295.23
Iteration:   2620, Loss function: 5.673, Average Loss: 5.568, avg. samples / sec: 172.36
Iteration:   2640, Loss function: 5.222, Average Loss: 5.565, avg. samples / sec: 250.20
Iteration:   2660, Loss function: 5.138, Average Loss: 5.561, avg. samples / sec: 329.24
Iteration:   2680, Loss function: 5.290, Average Loss: 5.558, avg. samples / sec: 319.30
Iteration:   2700, Loss function: 5.232, Average Loss: 5.553, avg. samples / sec: 228.14
Iteration:   2720, Loss function: 5.377, Average Loss: 5.549, avg. samples / sec: 274.19
Iteration:   2740, Loss function: 5.073, Average Loss: 5.543, avg. samples / sec: 306.47
Iteration:   2760, Loss function: 5.009, Average Loss: 5.538, avg. samples / sec: 328.20
Iteration:   2780, Loss function: 5.523, Average Loss: 5.534, avg. samples / sec: 256.47
Iteration:   2800, Loss function: 5.343, Average Loss: 5.528, avg. samples / sec: 280.86
Iteration:   2820, Loss function: 5.459, Average Loss: 5.524, avg. samples / sec: 312.05
Iteration:   2840, Loss function: 5.261, Average Loss: 5.518, avg. samples / sec: 254.42
Iteration:   2860, Loss function: 5.107, Average Loss: 5.513, avg. samples / sec: 319.34
Iteration:   2880, Loss function: 5.328, Average Loss: 5.508, avg. samples / sec: 316.25
Iteration:   2900, Loss function: 5.096, Average Loss: 5.502, avg. samples / sec: 332.32
Iteration:   2920, Loss function: 5.287, Average Loss: 5.496, avg. samples / sec: 316.04
Iteration:   2940, Loss function: 5.048, Average Loss: 5.492, avg. samples / sec: 315.27
Iteration:   2960, Loss function: 5.558, Average Loss: 5.488, avg. samples / sec: 236.76
Iteration:   2980, Loss function: 5.205, Average Loss: 5.484, avg. samples / sec: 280.58
Iteration:   3000, Loss function: 5.202, Average Loss: 5.479, avg. samples / sec: 322.81
Iteration:   3020, Loss function: 5.183, Average Loss: 5.472, avg. samples / sec: 262.73
Iteration:   3040, Loss function: 5.067, Average Loss: 5.466, avg. samples / sec: 309.98
Iteration:   3060, Loss function: 5.058, Average Loss: 5.461, avg. samples / sec: 292.49
Iteration:   3080, Loss function: 4.920, Average Loss: 5.455, avg. samples / sec: 337.50
:::MLLOG {"namespace": "", "time_ms": 1639081919785, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081919787, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.089, Average Loss: 5.450, avg. samples / sec: 336.76
Iteration:   3120, Loss function: 5.029, Average Loss: 5.443, avg. samples / sec: 316.86
Iteration:   3140, Loss function: 5.039, Average Loss: 5.438, avg. samples / sec: 325.64
Iteration:   3160, Loss function: 5.418, Average Loss: 5.432, avg. samples / sec: 315.68
Iteration:   3180, Loss function: 5.017, Average Loss: 5.427, avg. samples / sec: 324.03
Iteration:   3200, Loss function: 5.147, Average Loss: 5.421, avg. samples / sec: 296.93
Iteration:   3220, Loss function: 5.152, Average Loss: 5.416, avg. samples / sec: 338.35
Iteration:   3240, Loss function: 5.129, Average Loss: 5.411, avg. samples / sec: 318.95
Iteration:   3260, Loss function: 5.075, Average Loss: 5.406, avg. samples / sec: 332.67
Iteration:   3280, Loss function: 4.874, Average Loss: 5.399, avg. samples / sec: 315.61
Iteration:   3300, Loss function: 4.757, Average Loss: 5.394, avg. samples / sec: 263.40
Iteration:   3320, Loss function: 4.912, Average Loss: 5.388, avg. samples / sec: 196.06
Iteration:   3340, Loss function: 5.075, Average Loss: 5.384, avg. samples / sec: 324.78
Iteration:   3360, Loss function: 5.385, Average Loss: 5.379, avg. samples / sec: 311.00
Iteration:   3380, Loss function: 5.341, Average Loss: 5.372, avg. samples / sec: 336.81
Iteration:   3400, Loss function: 4.773, Average Loss: 5.367, avg. samples / sec: 291.47
Iteration:   3420, Loss function: 5.156, Average Loss: 5.363, avg. samples / sec: 309.28
Iteration:   3440, Loss function: 4.836, Average Loss: 5.357, avg. samples / sec: 312.35
Iteration:   3460, Loss function: 5.164, Average Loss: 5.351, avg. samples / sec: 321.95
Iteration:   3480, Loss function: 5.215, Average Loss: 5.347, avg. samples / sec: 315.36
Iteration:   3500, Loss function: 5.318, Average Loss: 5.343, avg. samples / sec: 337.21
Iteration:   3520, Loss function: 5.116, Average Loss: 5.339, avg. samples / sec: 313.36
Iteration:   3540, Loss function: 4.964, Average Loss: 5.334, avg. samples / sec: 314.49
Iteration:   3560, Loss function: 4.960, Average Loss: 5.330, avg. samples / sec: 308.00
Iteration:   3580, Loss function: 5.215, Average Loss: 5.324, avg. samples / sec: 319.49
Iteration:   3600, Loss function: 5.050, Average Loss: 5.318, avg. samples / sec: 333.45
Iteration:   3620, Loss function: 4.918, Average Loss: 5.312, avg. samples / sec: 334.28
Iteration:   3640, Loss function: 4.777, Average Loss: 5.307, avg. samples / sec: 317.17
Iteration:   3660, Loss function: 4.970, Average Loss: 5.301, avg. samples / sec: 326.77
Iteration:   3680, Loss function: 5.207, Average Loss: 5.295, avg. samples / sec: 325.47
Iteration:   3700, Loss function: 4.955, Average Loss: 5.289, avg. samples / sec: 328.22
Iteration:   3720, Loss function: 4.864, Average Loss: 5.283, avg. samples / sec: 326.06
Iteration:   3740, Loss function: 5.047, Average Loss: 5.278, avg. samples / sec: 328.27
Iteration:   3760, Loss function: 5.105, Average Loss: 5.275, avg. samples / sec: 335.81
Iteration:   3780, Loss function: 5.296, Average Loss: 5.270, avg. samples / sec: 328.43
Iteration:   3800, Loss function: 5.047, Average Loss: 5.266, avg. samples / sec: 320.29
Iteration:   3820, Loss function: 5.271, Average Loss: 5.261, avg. samples / sec: 335.39
Iteration:   3840, Loss function: 4.935, Average Loss: 5.256, avg. samples / sec: 294.97
Iteration:   3860, Loss function: 4.947, Average Loss: 5.251, avg. samples / sec: 272.60
Iteration:   3880, Loss function: 4.745, Average Loss: 5.245, avg. samples / sec: 332.31
Iteration:   3900, Loss function: 5.122, Average Loss: 5.241, avg. samples / sec: 330.63
Iteration:   3920, Loss function: 5.161, Average Loss: 5.235, avg. samples / sec: 317.55
Iteration:   3940, Loss function: 5.153, Average Loss: 5.231, avg. samples / sec: 296.45
Iteration:   3960, Loss function: 4.971, Average Loss: 5.227, avg. samples / sec: 333.05
Iteration:   3980, Loss function: 4.807, Average Loss: 5.222, avg. samples / sec: 328.41
Iteration:   4000, Loss function: 5.117, Average Loss: 5.217, avg. samples / sec: 318.36
Iteration:   4020, Loss function: 5.111, Average Loss: 5.211, avg. samples / sec: 316.68
Iteration:   4040, Loss function: 5.210, Average Loss: 5.207, avg. samples / sec: 323.74
Iteration:   4060, Loss function: 5.254, Average Loss: 5.203, avg. samples / sec: 333.38
Iteration:   4080, Loss function: 5.055, Average Loss: 5.198, avg. samples / sec: 317.27
Iteration:   4100, Loss function: 5.014, Average Loss: 5.194, avg. samples / sec: 328.82
:::MLLOG {"namespace": "", "time_ms": 1639082292346, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082292347, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.014, Average Loss: 5.190, avg. samples / sec: 317.92
Iteration:   4140, Loss function: 4.894, Average Loss: 5.184, avg. samples / sec: 330.63
Iteration:   4160, Loss function: 4.988, Average Loss: 5.178, avg. samples / sec: 334.99
Iteration:   4180, Loss function: 5.139, Average Loss: 5.172, avg. samples / sec: 330.80
Iteration:   4200, Loss function: 4.932, Average Loss: 5.168, avg. samples / sec: 335.06
Iteration:   4220, Loss function: 4.943, Average Loss: 5.163, avg. samples / sec: 321.13
Iteration:   4240, Loss function: 4.938, Average Loss: 5.158, avg. samples / sec: 297.74
Iteration:   4260, Loss function: 5.014, Average Loss: 5.152, avg. samples / sec: 316.70
Iteration:   4280, Loss function: 4.855, Average Loss: 5.146, avg. samples / sec: 314.87
Iteration:   4300, Loss function: 4.781, Average Loss: 5.140, avg. samples / sec: 321.96
Iteration:   4320, Loss function: 4.958, Average Loss: 5.136, avg. samples / sec: 267.96
Iteration:   4340, Loss function: 4.643, Average Loss: 5.130, avg. samples / sec: 261.85
Iteration:   4360, Loss function: 5.132, Average Loss: 5.126, avg. samples / sec: 238.43
Iteration:   4380, Loss function: 5.125, Average Loss: 5.122, avg. samples / sec: 297.89
Iteration:   4400, Loss function: 4.812, Average Loss: 5.118, avg. samples / sec: 298.32
Iteration:   4420, Loss function: 4.888, Average Loss: 5.112, avg. samples / sec: 321.35
Iteration:   4440, Loss function: 4.903, Average Loss: 5.108, avg. samples / sec: 331.57
Iteration:   4460, Loss function: 5.084, Average Loss: 5.104, avg. samples / sec: 308.30
Iteration:   4480, Loss function: 5.028, Average Loss: 5.101, avg. samples / sec: 307.75
Iteration:   4500, Loss function: 4.918, Average Loss: 5.098, avg. samples / sec: 271.38
Iteration:   4520, Loss function: 4.726, Average Loss: 5.094, avg. samples / sec: 238.64
Iteration:   4540, Loss function: 5.008, Average Loss: 5.090, avg. samples / sec: 260.55
Iteration:   4560, Loss function: 4.784, Average Loss: 5.087, avg. samples / sec: 193.11
Iteration:   4580, Loss function: 4.765, Average Loss: 5.085, avg. samples / sec: 206.54
Iteration:   4600, Loss function: 4.810, Average Loss: 5.082, avg. samples / sec: 258.82
Iteration:   4620, Loss function: 4.793, Average Loss: 5.077, avg. samples / sec: 274.51
Iteration:   4640, Loss function: 4.802, Average Loss: 5.072, avg. samples / sec: 300.24
Iteration:   4660, Loss function: 4.789, Average Loss: 5.069, avg. samples / sec: 295.81
Iteration:   4680, Loss function: 5.328, Average Loss: 5.064, avg. samples / sec: 307.84
Iteration:   4700, Loss function: 4.917, Average Loss: 5.060, avg. samples / sec: 336.26
Iteration:   4720, Loss function: 4.869, Average Loss: 5.056, avg. samples / sec: 330.81
Iteration:   4740, Loss function: 4.791, Average Loss: 5.051, avg. samples / sec: 258.44
Iteration:   4760, Loss function: 4.626, Average Loss: 5.047, avg. samples / sec: 288.87
Iteration:   4780, Loss function: 5.013, Average Loss: 5.043, avg. samples / sec: 279.32
Iteration:   4800, Loss function: 5.188, Average Loss: 5.041, avg. samples / sec: 280.54
Iteration:   4820, Loss function: 4.723, Average Loss: 5.036, avg. samples / sec: 259.11
Iteration:   4840, Loss function: 5.109, Average Loss: 5.034, avg. samples / sec: 235.99
Iteration:   4860, Loss function: 4.676, Average Loss: 5.029, avg. samples / sec: 334.64
Iteration:   4880, Loss function: 5.158, Average Loss: 5.026, avg. samples / sec: 323.19
Iteration:   4900, Loss function: 4.728, Average Loss: 5.022, avg. samples / sec: 274.12
Iteration:   4920, Loss function: 4.935, Average Loss: 5.018, avg. samples / sec: 294.21
Iteration:   4940, Loss function: 4.751, Average Loss: 5.013, avg. samples / sec: 282.94
Iteration:   4960, Loss function: 4.666, Average Loss: 5.010, avg. samples / sec: 316.31
Iteration:   4980, Loss function: 4.511, Average Loss: 5.005, avg. samples / sec: 317.63
Iteration:   5000, Loss function: 4.949, Average Loss: 5.001, avg. samples / sec: 333.10
Iteration:   5020, Loss function: 5.145, Average Loss: 4.997, avg. samples / sec: 296.65
Iteration:   5040, Loss function: 4.795, Average Loss: 4.994, avg. samples / sec: 312.99
Iteration:   5060, Loss function: 4.711, Average Loss: 4.989, avg. samples / sec: 337.27
Iteration:   5080, Loss function: 4.663, Average Loss: 4.985, avg. samples / sec: 315.19
Iteration:   5100, Loss function: 4.869, Average Loss: 4.983, avg. samples / sec: 305.92
Iteration:   5120, Loss function: 4.646, Average Loss: 4.980, avg. samples / sec: 304.73
Iteration:   5140, Loss function: 4.994, Average Loss: 4.976, avg. samples / sec: 330.17
:::MLLOG {"namespace": "", "time_ms": 1639082694594, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 75.22 s
:::MLLOG {"namespace": "", "time_ms": 1639082769985, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082769988, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082769988, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.53s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=7.88s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10367
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21113
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09191
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18837
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13554
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20016
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21228
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10367 AP goal: 0.10000
Iteration:   5160, Loss function: 4.913, Average Loss: 4.972, avg. samples / sec: 25.73
:::MLLOG {"namespace": "", "time_ms": 1639082782217, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782219, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10366557421883116, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782219, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082782879, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082788
++ date '+%Y-%m-%d %r'
START TIMING RUN WAS 2021-12-09 08:09:33 PM
ENDING TIMING RUN AT 2021-12-09 08:46:28 PM
+ end_fmt='2021-12-09 08:46:28 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:33 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:46:28 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ result=2215
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2215,nvidia,2021-12-09 08:09:33 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2215,nvidia,2021-12-09 08:09:33 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
