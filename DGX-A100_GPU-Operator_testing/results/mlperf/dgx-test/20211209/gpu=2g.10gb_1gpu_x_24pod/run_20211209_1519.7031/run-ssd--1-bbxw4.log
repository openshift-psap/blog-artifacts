+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-bbxw4.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-bbxw4.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-bbxw4.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a
+ echo 'Found 1 MIG instances: MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080574
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:34 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:34 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:34 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:34 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-bbxw4 to the sync file ...
run-ssd--1-bbxw4 Found 9 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
Thu Dec  9 20:09:39 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080581429, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080581546, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3687105315, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3687105315
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080584115, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080584116, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080584121, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080584121, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080689270, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080689271, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080691058, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080691061, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.29s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080691618, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080691619, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080691620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.294, Average Loss: 0.022, avg. samples / sec: 1.06
Iteration:     20, Loss function: 21.075, Average Loss: 0.451, avg. samples / sec: 269.97
Iteration:     40, Loss function: 20.729, Average Loss: 0.853, avg. samples / sec: 272.63
Iteration:     60, Loss function: 20.437, Average Loss: 1.244, avg. samples / sec: 253.90
Iteration:     80, Loss function: 20.207, Average Loss: 1.619, avg. samples / sec: 252.56
Iteration:    100, Loss function: 16.557, Average Loss: 1.958, avg. samples / sec: 250.98
Iteration:    120, Loss function: 11.710, Average Loss: 2.180, avg. samples / sec: 292.52
Iteration:    140, Loss function: 9.795, Average Loss: 2.343, avg. samples / sec: 273.21
Iteration:    160, Loss function: 9.236, Average Loss: 2.483, avg. samples / sec: 279.17
Iteration:    180, Loss function: 8.834, Average Loss: 2.612, avg. samples / sec: 265.86
Iteration:    200, Loss function: 8.586, Average Loss: 2.735, avg. samples / sec: 255.41
Iteration:    220, Loss function: 8.408, Average Loss: 2.855, avg. samples / sec: 232.35
Iteration:    240, Loss function: 8.529, Average Loss: 2.970, avg. samples / sec: 278.49
Iteration:    260, Loss function: 8.738, Average Loss: 3.082, avg. samples / sec: 309.12
Iteration:    280, Loss function: 8.498, Average Loss: 3.191, avg. samples / sec: 289.37
Iteration:    300, Loss function: 8.829, Average Loss: 3.298, avg. samples / sec: 290.67
Iteration:    320, Loss function: 8.485, Average Loss: 3.402, avg. samples / sec: 287.76
Iteration:    340, Loss function: 8.363, Average Loss: 3.500, avg. samples / sec: 301.80
Iteration:    360, Loss function: 7.835, Average Loss: 3.592, avg. samples / sec: 312.34
Iteration:    380, Loss function: 7.899, Average Loss: 3.681, avg. samples / sec: 319.38
Iteration:    400, Loss function: 7.958, Average Loss: 3.764, avg. samples / sec: 313.41
Iteration:    420, Loss function: 7.760, Average Loss: 3.846, avg. samples / sec: 319.13
Iteration:    440, Loss function: 7.803, Average Loss: 3.925, avg. samples / sec: 312.84
Iteration:    460, Loss function: 7.851, Average Loss: 4.001, avg. samples / sec: 269.29
Iteration:    480, Loss function: 7.426, Average Loss: 4.073, avg. samples / sec: 279.24
Iteration:    500, Loss function: 7.666, Average Loss: 4.144, avg. samples / sec: 331.67
Iteration:    520, Loss function: 7.702, Average Loss: 4.212, avg. samples / sec: 323.22
Iteration:    540, Loss function: 7.346, Average Loss: 4.276, avg. samples / sec: 331.26
Iteration:    560, Loss function: 7.138, Average Loss: 4.339, avg. samples / sec: 222.76
Iteration:    580, Loss function: 7.141, Average Loss: 4.399, avg. samples / sec: 177.06
Iteration:    600, Loss function: 7.228, Average Loss: 4.457, avg. samples / sec: 264.44
Iteration:    620, Loss function: 7.033, Average Loss: 4.513, avg. samples / sec: 321.19
Iteration:    640, Loss function: 6.811, Average Loss: 4.566, avg. samples / sec: 321.49
Iteration:    660, Loss function: 7.031, Average Loss: 4.618, avg. samples / sec: 291.45
Iteration:    680, Loss function: 7.205, Average Loss: 4.668, avg. samples / sec: 297.88
Iteration:    700, Loss function: 6.911, Average Loss: 4.714, avg. samples / sec: 314.82
Iteration:    720, Loss function: 7.144, Average Loss: 4.764, avg. samples / sec: 302.59
Iteration:    740, Loss function: 6.922, Average Loss: 4.808, avg. samples / sec: 292.95
Iteration:    760, Loss function: 6.928, Average Loss: 4.850, avg. samples / sec: 299.57
Iteration:    780, Loss function: 6.859, Average Loss: 4.892, avg. samples / sec: 308.96
Iteration:    800, Loss function: 7.081, Average Loss: 4.931, avg. samples / sec: 303.79
Iteration:    820, Loss function: 6.703, Average Loss: 4.968, avg. samples / sec: 313.95
Iteration:    840, Loss function: 6.816, Average Loss: 5.003, avg. samples / sec: 329.30
Iteration:    860, Loss function: 6.845, Average Loss: 5.036, avg. samples / sec: 309.32
Iteration:    880, Loss function: 6.744, Average Loss: 5.068, avg. samples / sec: 187.41
Iteration:    900, Loss function: 6.780, Average Loss: 5.098, avg. samples / sec: 257.39
Iteration:    920, Loss function: 6.724, Average Loss: 5.127, avg. samples / sec: 270.45
Iteration:    940, Loss function: 6.550, Average Loss: 5.155, avg. samples / sec: 326.76
Iteration:    960, Loss function: 6.457, Average Loss: 5.182, avg. samples / sec: 329.94
Iteration:    980, Loss function: 6.503, Average Loss: 5.208, avg. samples / sec: 329.09
Iteration:   1000, Loss function: 6.703, Average Loss: 5.233, avg. samples / sec: 270.43
Iteration:   1020, Loss function: 6.382, Average Loss: 5.256, avg. samples / sec: 258.23
:::MLLOG {"namespace": "", "time_ms": 1639081106993, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081106994, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.365, Average Loss: 5.279, avg. samples / sec: 275.96
Iteration:   1060, Loss function: 6.217, Average Loss: 5.300, avg. samples / sec: 282.93
Iteration:   1080, Loss function: 6.251, Average Loss: 5.321, avg. samples / sec: 299.39
Iteration:   1100, Loss function: 6.181, Average Loss: 5.340, avg. samples / sec: 272.61
Iteration:   1120, Loss function: 6.297, Average Loss: 5.359, avg. samples / sec: 281.86
Iteration:   1140, Loss function: 6.338, Average Loss: 5.379, avg. samples / sec: 295.49
Iteration:   1160, Loss function: 6.036, Average Loss: 5.396, avg. samples / sec: 241.93
Iteration:   1180, Loss function: 6.220, Average Loss: 5.412, avg. samples / sec: 266.05
Iteration:   1200, Loss function: 6.267, Average Loss: 5.428, avg. samples / sec: 251.51
Iteration:   1220, Loss function: 6.233, Average Loss: 5.444, avg. samples / sec: 306.05
Iteration:   1240, Loss function: 6.067, Average Loss: 5.457, avg. samples / sec: 330.83
Iteration:   1260, Loss function: 6.049, Average Loss: 5.470, avg. samples / sec: 334.32
Iteration:   1280, Loss function: 6.016, Average Loss: 5.483, avg. samples / sec: 333.76
Iteration:   1300, Loss function: 6.154, Average Loss: 5.495, avg. samples / sec: 334.02
Iteration:   1320, Loss function: 5.981, Average Loss: 5.506, avg. samples / sec: 330.92
Iteration:   1340, Loss function: 5.854, Average Loss: 5.516, avg. samples / sec: 331.42
Iteration:   1360, Loss function: 6.010, Average Loss: 5.526, avg. samples / sec: 340.79
Iteration:   1380, Loss function: 6.057, Average Loss: 5.536, avg. samples / sec: 327.28
Iteration:   1400, Loss function: 6.167, Average Loss: 5.545, avg. samples / sec: 320.30
Iteration:   1420, Loss function: 6.046, Average Loss: 5.553, avg. samples / sec: 323.06
Iteration:   1440, Loss function: 6.271, Average Loss: 5.562, avg. samples / sec: 260.23
Iteration:   1460, Loss function: 6.258, Average Loss: 5.571, avg. samples / sec: 304.61
Iteration:   1480, Loss function: 5.900, Average Loss: 5.579, avg. samples / sec: 289.62
Iteration:   1500, Loss function: 6.143, Average Loss: 5.587, avg. samples / sec: 327.56
Iteration:   1520, Loss function: 6.005, Average Loss: 5.593, avg. samples / sec: 250.16
Iteration:   1540, Loss function: 6.174, Average Loss: 5.597, avg. samples / sec: 230.88
Iteration:   1560, Loss function: 5.821, Average Loss: 5.601, avg. samples / sec: 307.66
Iteration:   1580, Loss function: 5.548, Average Loss: 5.606, avg. samples / sec: 317.12
Iteration:   1600, Loss function: 6.304, Average Loss: 5.611, avg. samples / sec: 323.30
Iteration:   1620, Loss function: 5.818, Average Loss: 5.616, avg. samples / sec: 329.70
Iteration:   1640, Loss function: 5.942, Average Loss: 5.620, avg. samples / sec: 324.48
Iteration:   1660, Loss function: 5.982, Average Loss: 5.625, avg. samples / sec: 335.02
Iteration:   1680, Loss function: 5.664, Average Loss: 5.628, avg. samples / sec: 329.69
Iteration:   1700, Loss function: 5.389, Average Loss: 5.630, avg. samples / sec: 337.03
Iteration:   1720, Loss function: 5.541, Average Loss: 5.632, avg. samples / sec: 323.02
Iteration:   1740, Loss function: 5.888, Average Loss: 5.634, avg. samples / sec: 337.01
Iteration:   1760, Loss function: 5.559, Average Loss: 5.635, avg. samples / sec: 291.54
Iteration:   1780, Loss function: 5.683, Average Loss: 5.637, avg. samples / sec: 220.01
Iteration:   1800, Loss function: 5.725, Average Loss: 5.638, avg. samples / sec: 259.64
Iteration:   1820, Loss function: 5.993, Average Loss: 5.640, avg. samples / sec: 246.73
Iteration:   1840, Loss function: 5.920, Average Loss: 5.641, avg. samples / sec: 330.21
Iteration:   1860, Loss function: 5.573, Average Loss: 5.641, avg. samples / sec: 230.54
Iteration:   1880, Loss function: 5.913, Average Loss: 5.643, avg. samples / sec: 326.96
Iteration:   1900, Loss function: 5.946, Average Loss: 5.643, avg. samples / sec: 326.13
Iteration:   1920, Loss function: 5.785, Average Loss: 5.643, avg. samples / sec: 320.63
Iteration:   1940, Loss function: 5.784, Average Loss: 5.642, avg. samples / sec: 241.57
Iteration:   1960, Loss function: 5.615, Average Loss: 5.642, avg. samples / sec: 306.92
Iteration:   1980, Loss function: 5.640, Average Loss: 5.641, avg. samples / sec: 208.48
Iteration:   2000, Loss function: 5.472, Average Loss: 5.640, avg. samples / sec: 251.23
Iteration:   2020, Loss function: 5.605, Average Loss: 5.638, avg. samples / sec: 204.93
Iteration:   2040, Loss function: 5.508, Average Loss: 5.638, avg. samples / sec: 297.53
:::MLLOG {"namespace": "", "time_ms": 1639081512570, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081512572, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.480, Average Loss: 5.636, avg. samples / sec: 254.46
Iteration:   2080, Loss function: 4.960, Average Loss: 5.633, avg. samples / sec: 322.32
Iteration:   2100, Loss function: 5.575, Average Loss: 5.630, avg. samples / sec: 288.57
Iteration:   2120, Loss function: 5.350, Average Loss: 5.627, avg. samples / sec: 329.67
Iteration:   2140, Loss function: 5.503, Average Loss: 5.623, avg. samples / sec: 310.53
Iteration:   2160, Loss function: 5.295, Average Loss: 5.621, avg. samples / sec: 302.76
Iteration:   2180, Loss function: 5.417, Average Loss: 5.619, avg. samples / sec: 311.39
Iteration:   2200, Loss function: 5.485, Average Loss: 5.615, avg. samples / sec: 310.81
Iteration:   2220, Loss function: 5.597, Average Loss: 5.612, avg. samples / sec: 216.19
Iteration:   2240, Loss function: 5.502, Average Loss: 5.610, avg. samples / sec: 302.12
Iteration:   2260, Loss function: 5.298, Average Loss: 5.607, avg. samples / sec: 332.50
Iteration:   2280, Loss function: 5.158, Average Loss: 5.604, avg. samples / sec: 308.11
Iteration:   2300, Loss function: 5.071, Average Loss: 5.600, avg. samples / sec: 335.44
Iteration:   2320, Loss function: 5.289, Average Loss: 5.598, avg. samples / sec: 311.62
Iteration:   2340, Loss function: 5.366, Average Loss: 5.595, avg. samples / sec: 223.46
Iteration:   2360, Loss function: 5.387, Average Loss: 5.592, avg. samples / sec: 338.63
Iteration:   2380, Loss function: 5.309, Average Loss: 5.589, avg. samples / sec: 334.49
Iteration:   2400, Loss function: 5.285, Average Loss: 5.585, avg. samples / sec: 272.99
Iteration:   2420, Loss function: 5.424, Average Loss: 5.581, avg. samples / sec: 244.76
Iteration:   2440, Loss function: 5.407, Average Loss: 5.578, avg. samples / sec: 261.44
Iteration:   2460, Loss function: 5.332, Average Loss: 5.575, avg. samples / sec: 212.55
Iteration:   2480, Loss function: 5.614, Average Loss: 5.571, avg. samples / sec: 281.57
Iteration:   2500, Loss function: 5.496, Average Loss: 5.569, avg. samples / sec: 301.58
Iteration:   2520, Loss function: 5.454, Average Loss: 5.565, avg. samples / sec: 337.78
Iteration:   2540, Loss function: 5.398, Average Loss: 5.561, avg. samples / sec: 316.33
Iteration:   2560, Loss function: 5.345, Average Loss: 5.557, avg. samples / sec: 309.01
Iteration:   2580, Loss function: 5.163, Average Loss: 5.553, avg. samples / sec: 297.55
Iteration:   2600, Loss function: 5.617, Average Loss: 5.550, avg. samples / sec: 322.85
Iteration:   2620, Loss function: 5.510, Average Loss: 5.546, avg. samples / sec: 338.27
Iteration:   2640, Loss function: 5.333, Average Loss: 5.541, avg. samples / sec: 312.71
Iteration:   2660, Loss function: 5.301, Average Loss: 5.539, avg. samples / sec: 315.65
Iteration:   2680, Loss function: 5.180, Average Loss: 5.535, avg. samples / sec: 320.74
Iteration:   2700, Loss function: 5.142, Average Loss: 5.530, avg. samples / sec: 208.16
Iteration:   2720, Loss function: 5.507, Average Loss: 5.527, avg. samples / sec: 317.10
Iteration:   2740, Loss function: 4.872, Average Loss: 5.522, avg. samples / sec: 315.02
Iteration:   2760, Loss function: 4.992, Average Loss: 5.516, avg. samples / sec: 322.26
Iteration:   2780, Loss function: 5.336, Average Loss: 5.512, avg. samples / sec: 282.96
Iteration:   2800, Loss function: 5.132, Average Loss: 5.507, avg. samples / sec: 256.46
Iteration:   2820, Loss function: 5.469, Average Loss: 5.503, avg. samples / sec: 264.30
Iteration:   2840, Loss function: 5.158, Average Loss: 5.499, avg. samples / sec: 231.48
Iteration:   2860, Loss function: 4.996, Average Loss: 5.495, avg. samples / sec: 289.56
Iteration:   2880, Loss function: 5.272, Average Loss: 5.490, avg. samples / sec: 314.74
Iteration:   2900, Loss function: 5.427, Average Loss: 5.486, avg. samples / sec: 316.26
Iteration:   2920, Loss function: 5.235, Average Loss: 5.481, avg. samples / sec: 322.60
Iteration:   2940, Loss function: 5.031, Average Loss: 5.476, avg. samples / sec: 328.48
Iteration:   2960, Loss function: 5.237, Average Loss: 5.471, avg. samples / sec: 330.09
Iteration:   2980, Loss function: 5.350, Average Loss: 5.468, avg. samples / sec: 325.63
Iteration:   3000, Loss function: 5.184, Average Loss: 5.463, avg. samples / sec: 302.62
Iteration:   3020, Loss function: 5.175, Average Loss: 5.456, avg. samples / sec: 304.32
Iteration:   3040, Loss function: 5.228, Average Loss: 5.451, avg. samples / sec: 331.89
Iteration:   3060, Loss function: 5.020, Average Loss: 5.445, avg. samples / sec: 294.74
Iteration:   3080, Loss function: 4.793, Average Loss: 5.439, avg. samples / sec: 182.65
:::MLLOG {"namespace": "", "time_ms": 1639081915257, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081915258, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.142, Average Loss: 5.435, avg. samples / sec: 194.82
Iteration:   3120, Loss function: 4.941, Average Loss: 5.428, avg. samples / sec: 219.89
Iteration:   3140, Loss function: 5.299, Average Loss: 5.424, avg. samples / sec: 299.99
Iteration:   3160, Loss function: 5.565, Average Loss: 5.418, avg. samples / sec: 265.49
Iteration:   3180, Loss function: 5.015, Average Loss: 5.413, avg. samples / sec: 271.29
Iteration:   3200, Loss function: 5.288, Average Loss: 5.408, avg. samples / sec: 198.05
Iteration:   3220, Loss function: 5.012, Average Loss: 5.402, avg. samples / sec: 226.74
Iteration:   3240, Loss function: 5.330, Average Loss: 5.396, avg. samples / sec: 289.35
Iteration:   3260, Loss function: 5.082, Average Loss: 5.391, avg. samples / sec: 324.17
Iteration:   3280, Loss function: 4.718, Average Loss: 5.385, avg. samples / sec: 327.11
Iteration:   3300, Loss function: 4.864, Average Loss: 5.378, avg. samples / sec: 328.48
Iteration:   3320, Loss function: 4.761, Average Loss: 5.372, avg. samples / sec: 320.02
Iteration:   3340, Loss function: 5.174, Average Loss: 5.368, avg. samples / sec: 195.77
Iteration:   3360, Loss function: 5.110, Average Loss: 5.362, avg. samples / sec: 318.41
Iteration:   3380, Loss function: 5.242, Average Loss: 5.356, avg. samples / sec: 216.92
Iteration:   3400, Loss function: 4.972, Average Loss: 5.351, avg. samples / sec: 303.46
Iteration:   3420, Loss function: 5.222, Average Loss: 5.346, avg. samples / sec: 322.59
Iteration:   3440, Loss function: 5.079, Average Loss: 5.341, avg. samples / sec: 324.90
Iteration:   3460, Loss function: 5.095, Average Loss: 5.336, avg. samples / sec: 319.61
Iteration:   3480, Loss function: 5.365, Average Loss: 5.331, avg. samples / sec: 315.54
Iteration:   3500, Loss function: 5.279, Average Loss: 5.328, avg. samples / sec: 330.78
Iteration:   3520, Loss function: 5.027, Average Loss: 5.324, avg. samples / sec: 306.45
Iteration:   3540, Loss function: 5.052, Average Loss: 5.319, avg. samples / sec: 307.06
Iteration:   3560, Loss function: 4.927, Average Loss: 5.317, avg. samples / sec: 313.87
Iteration:   3580, Loss function: 5.252, Average Loss: 5.313, avg. samples / sec: 334.87
Iteration:   3600, Loss function: 5.103, Average Loss: 5.306, avg. samples / sec: 316.20
Iteration:   3620, Loss function: 4.905, Average Loss: 5.301, avg. samples / sec: 335.41
Iteration:   3640, Loss function: 4.843, Average Loss: 5.296, avg. samples / sec: 329.79
Iteration:   3660, Loss function: 5.041, Average Loss: 5.291, avg. samples / sec: 319.31
Iteration:   3680, Loss function: 5.199, Average Loss: 5.287, avg. samples / sec: 328.91
Iteration:   3700, Loss function: 4.933, Average Loss: 5.281, avg. samples / sec: 324.60
Iteration:   3720, Loss function: 5.097, Average Loss: 5.275, avg. samples / sec: 329.33
Iteration:   3740, Loss function: 5.261, Average Loss: 5.271, avg. samples / sec: 329.93
Iteration:   3760, Loss function: 5.125, Average Loss: 5.267, avg. samples / sec: 331.98
Iteration:   3780, Loss function: 5.190, Average Loss: 5.263, avg. samples / sec: 321.44
Iteration:   3800, Loss function: 4.948, Average Loss: 5.260, avg. samples / sec: 282.93
Iteration:   3820, Loss function: 5.113, Average Loss: 5.255, avg. samples / sec: 302.93
Iteration:   3840, Loss function: 4.791, Average Loss: 5.250, avg. samples / sec: 321.78
Iteration:   3860, Loss function: 4.879, Average Loss: 5.245, avg. samples / sec: 315.87
Iteration:   3880, Loss function: 5.097, Average Loss: 5.239, avg. samples / sec: 310.96
Iteration:   3900, Loss function: 5.103, Average Loss: 5.235, avg. samples / sec: 324.52
Iteration:   3920, Loss function: 4.842, Average Loss: 5.229, avg. samples / sec: 318.52
Iteration:   3940, Loss function: 5.051, Average Loss: 5.224, avg. samples / sec: 276.45
Iteration:   3960, Loss function: 4.849, Average Loss: 5.220, avg. samples / sec: 259.93
Iteration:   3980, Loss function: 5.031, Average Loss: 5.215, avg. samples / sec: 267.17
Iteration:   4000, Loss function: 5.057, Average Loss: 5.211, avg. samples / sec: 276.25
Iteration:   4020, Loss function: 5.021, Average Loss: 5.208, avg. samples / sec: 311.51
Iteration:   4040, Loss function: 5.080, Average Loss: 5.204, avg. samples / sec: 287.50
Iteration:   4060, Loss function: 5.222, Average Loss: 5.200, avg. samples / sec: 328.31
Iteration:   4080, Loss function: 5.133, Average Loss: 5.196, avg. samples / sec: 329.20
Iteration:   4100, Loss function: 5.085, Average Loss: 5.193, avg. samples / sec: 296.47
:::MLLOG {"namespace": "", "time_ms": 1639082314851, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082314853, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.001, Average Loss: 5.189, avg. samples / sec: 319.86
Iteration:   4140, Loss function: 4.927, Average Loss: 5.184, avg. samples / sec: 339.69
Iteration:   4160, Loss function: 5.104, Average Loss: 5.178, avg. samples / sec: 270.88
Iteration:   4180, Loss function: 4.941, Average Loss: 5.172, avg. samples / sec: 322.13
Iteration:   4200, Loss function: 4.805, Average Loss: 5.167, avg. samples / sec: 238.64
Iteration:   4220, Loss function: 4.817, Average Loss: 5.162, avg. samples / sec: 244.94
Iteration:   4240, Loss function: 4.981, Average Loss: 5.157, avg. samples / sec: 329.25
Iteration:   4260, Loss function: 5.143, Average Loss: 5.151, avg. samples / sec: 306.79
Iteration:   4280, Loss function: 5.010, Average Loss: 5.146, avg. samples / sec: 327.54
Iteration:   4300, Loss function: 4.820, Average Loss: 5.140, avg. samples / sec: 178.18
Iteration:   4320, Loss function: 4.816, Average Loss: 5.135, avg. samples / sec: 309.10
Iteration:   4340, Loss function: 4.778, Average Loss: 5.129, avg. samples / sec: 321.73
Iteration:   4360, Loss function: 5.068, Average Loss: 5.125, avg. samples / sec: 313.57
Iteration:   4380, Loss function: 5.062, Average Loss: 5.120, avg. samples / sec: 317.39
Iteration:   4400, Loss function: 4.597, Average Loss: 5.115, avg. samples / sec: 305.88
Iteration:   4420, Loss function: 4.731, Average Loss: 5.110, avg. samples / sec: 285.71
Iteration:   4440, Loss function: 4.884, Average Loss: 5.106, avg. samples / sec: 230.79
Iteration:   4460, Loss function: 4.994, Average Loss: 5.102, avg. samples / sec: 313.38
Iteration:   4480, Loss function: 4.968, Average Loss: 5.099, avg. samples / sec: 311.07
Iteration:   4500, Loss function: 4.893, Average Loss: 5.095, avg. samples / sec: 327.15
Iteration:   4520, Loss function: 4.589, Average Loss: 5.091, avg. samples / sec: 323.39
Iteration:   4540, Loss function: 5.284, Average Loss: 5.086, avg. samples / sec: 324.83
Iteration:   4560, Loss function: 4.689, Average Loss: 5.082, avg. samples / sec: 326.41
Iteration:   4580, Loss function: 4.767, Average Loss: 5.080, avg. samples / sec: 324.47
Iteration:   4600, Loss function: 4.663, Average Loss: 5.076, avg. samples / sec: 330.29
Iteration:   4620, Loss function: 4.829, Average Loss: 5.071, avg. samples / sec: 291.56
Iteration:   4640, Loss function: 4.906, Average Loss: 5.067, avg. samples / sec: 301.45
Iteration:   4660, Loss function: 4.788, Average Loss: 5.063, avg. samples / sec: 295.38
Iteration:   4680, Loss function: 5.301, Average Loss: 5.058, avg. samples / sec: 322.56
Iteration:   4700, Loss function: 4.853, Average Loss: 5.054, avg. samples / sec: 263.27
Iteration:   4720, Loss function: 4.682, Average Loss: 5.049, avg. samples / sec: 252.53
Iteration:   4740, Loss function: 4.783, Average Loss: 5.046, avg. samples / sec: 313.95
Iteration:   4760, Loss function: 4.595, Average Loss: 5.042, avg. samples / sec: 300.26
Iteration:   4780, Loss function: 5.056, Average Loss: 5.038, avg. samples / sec: 324.69
Iteration:   4800, Loss function: 4.857, Average Loss: 5.035, avg. samples / sec: 325.39
Iteration:   4820, Loss function: 4.656, Average Loss: 5.032, avg. samples / sec: 304.17
Iteration:   4840, Loss function: 5.020, Average Loss: 5.029, avg. samples / sec: 255.14
Iteration:   4860, Loss function: 4.806, Average Loss: 5.025, avg. samples / sec: 261.59
Iteration:   4880, Loss function: 5.007, Average Loss: 5.021, avg. samples / sec: 308.87
Iteration:   4900, Loss function: 4.402, Average Loss: 5.017, avg. samples / sec: 321.68
Iteration:   4920, Loss function: 4.638, Average Loss: 5.013, avg. samples / sec: 330.85
Iteration:   4940, Loss function: 4.612, Average Loss: 5.008, avg. samples / sec: 225.66
Iteration:   4960, Loss function: 4.670, Average Loss: 5.005, avg. samples / sec: 286.85
Iteration:   4980, Loss function: 4.622, Average Loss: 5.003, avg. samples / sec: 296.17
Iteration:   5000, Loss function: 4.815, Average Loss: 4.999, avg. samples / sec: 308.14
Iteration:   5020, Loss function: 5.080, Average Loss: 4.994, avg. samples / sec: 270.63
Iteration:   5040, Loss function: 4.923, Average Loss: 4.992, avg. samples / sec: 222.08
Iteration:   5060, Loss function: 4.747, Average Loss: 4.989, avg. samples / sec: 300.47
Iteration:   5080, Loss function: 4.643, Average Loss: 4.985, avg. samples / sec: 271.30
Iteration:   5100, Loss function: 4.808, Average Loss: 4.982, avg. samples / sec: 190.52
Iteration:   5120, Loss function: 4.716, Average Loss: 4.980, avg. samples / sec: 292.76
Iteration:   5140, Loss function: 4.853, Average Loss: 4.976, avg. samples / sec: 325.14
:::MLLOG {"namespace": "", "time_ms": 1639082722058, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 83.10 s
:::MLLOG {"namespace": "", "time_ms": 1639082805268, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082805278, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082805279, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.914, Average Loss: 4.971, avg. samples / sec: 24.81
DONE (t=6.09s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10650
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21653
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09362
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18788
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13582
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20065
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21354
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21354
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10650 AP goal: 0.10000
Iteration:   5180, Loss function: 4.769, Average Loss: 4.966, avg. samples / sec: 346.79
:::MLLOG {"namespace": "", "time_ms": 1639082819318, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819319, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10650237887545622, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819319, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819848, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:47:01 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:47:01 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080581429, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080581546, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3687105315, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3687105315
:::MLLOG {"namespace": "", "time_ms": 1639080584115, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080584116, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080584121, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080584121, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080584122, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080689270, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080689271, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080691058, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080691061, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.29s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080691618, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080691619, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080691620, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.294, Average Loss: 0.022, avg. samples / sec: 1.06
Iteration:     20, Loss function: 21.075, Average Loss: 0.451, avg. samples / sec: 269.97
Iteration:     40, Loss function: 20.729, Average Loss: 0.853, avg. samples / sec: 272.63
Iteration:     60, Loss function: 20.437, Average Loss: 1.244, avg. samples / sec: 253.90
Iteration:     80, Loss function: 20.207, Average Loss: 1.619, avg. samples / sec: 252.56
Iteration:    100, Loss function: 16.557, Average Loss: 1.958, avg. samples / sec: 250.98
Iteration:    120, Loss function: 11.710, Average Loss: 2.180, avg. samples / sec: 292.52
Iteration:    140, Loss function: 9.795, Average Loss: 2.343, avg. samples / sec: 273.21
Iteration:    160, Loss function: 9.236, Average Loss: 2.483, avg. samples / sec: 279.17
Iteration:    180, Loss function: 8.834, Average Loss: 2.612, avg. samples / sec: 265.86
Iteration:    200, Loss function: 8.586, Average Loss: 2.735, avg. samples / sec: 255.41
Iteration:    220, Loss function: 8.408, Average Loss: 2.855, avg. samples / sec: 232.35
Iteration:    240, Loss function: 8.529, Average Loss: 2.970, avg. samples / sec: 278.49
Iteration:    260, Loss function: 8.738, Average Loss: 3.082, avg. samples / sec: 309.12
Iteration:    280, Loss function: 8.498, Average Loss: 3.191, avg. samples / sec: 289.37
Iteration:    300, Loss function: 8.829, Average Loss: 3.298, avg. samples / sec: 290.67
Iteration:    320, Loss function: 8.485, Average Loss: 3.402, avg. samples / sec: 287.76
Iteration:    340, Loss function: 8.363, Average Loss: 3.500, avg. samples / sec: 301.80
Iteration:    360, Loss function: 7.835, Average Loss: 3.592, avg. samples / sec: 312.34
Iteration:    380, Loss function: 7.899, Average Loss: 3.681, avg. samples / sec: 319.38
Iteration:    400, Loss function: 7.958, Average Loss: 3.764, avg. samples / sec: 313.41
Iteration:    420, Loss function: 7.760, Average Loss: 3.846, avg. samples / sec: 319.13
Iteration:    440, Loss function: 7.803, Average Loss: 3.925, avg. samples / sec: 312.84
Iteration:    460, Loss function: 7.851, Average Loss: 4.001, avg. samples / sec: 269.29
Iteration:    480, Loss function: 7.426, Average Loss: 4.073, avg. samples / sec: 279.24
Iteration:    500, Loss function: 7.666, Average Loss: 4.144, avg. samples / sec: 331.67
Iteration:    520, Loss function: 7.702, Average Loss: 4.212, avg. samples / sec: 323.22
Iteration:    540, Loss function: 7.346, Average Loss: 4.276, avg. samples / sec: 331.26
Iteration:    560, Loss function: 7.138, Average Loss: 4.339, avg. samples / sec: 222.76
Iteration:    580, Loss function: 7.141, Average Loss: 4.399, avg. samples / sec: 177.06
Iteration:    600, Loss function: 7.228, Average Loss: 4.457, avg. samples / sec: 264.44
Iteration:    620, Loss function: 7.033, Average Loss: 4.513, avg. samples / sec: 321.19
Iteration:    640, Loss function: 6.811, Average Loss: 4.566, avg. samples / sec: 321.49
Iteration:    660, Loss function: 7.031, Average Loss: 4.618, avg. samples / sec: 291.45
Iteration:    680, Loss function: 7.205, Average Loss: 4.668, avg. samples / sec: 297.88
Iteration:    700, Loss function: 6.911, Average Loss: 4.714, avg. samples / sec: 314.82
Iteration:    720, Loss function: 7.144, Average Loss: 4.764, avg. samples / sec: 302.59
Iteration:    740, Loss function: 6.922, Average Loss: 4.808, avg. samples / sec: 292.95
Iteration:    760, Loss function: 6.928, Average Loss: 4.850, avg. samples / sec: 299.57
Iteration:    780, Loss function: 6.859, Average Loss: 4.892, avg. samples / sec: 308.96
Iteration:    800, Loss function: 7.081, Average Loss: 4.931, avg. samples / sec: 303.79
Iteration:    820, Loss function: 6.703, Average Loss: 4.968, avg. samples / sec: 313.95
Iteration:    840, Loss function: 6.816, Average Loss: 5.003, avg. samples / sec: 329.30
Iteration:    860, Loss function: 6.845, Average Loss: 5.036, avg. samples / sec: 309.32
Iteration:    880, Loss function: 6.744, Average Loss: 5.068, avg. samples / sec: 187.41
Iteration:    900, Loss function: 6.780, Average Loss: 5.098, avg. samples / sec: 257.39
Iteration:    920, Loss function: 6.724, Average Loss: 5.127, avg. samples / sec: 270.45
Iteration:    940, Loss function: 6.550, Average Loss: 5.155, avg. samples / sec: 326.76
Iteration:    960, Loss function: 6.457, Average Loss: 5.182, avg. samples / sec: 329.94
Iteration:    980, Loss function: 6.503, Average Loss: 5.208, avg. samples / sec: 329.09
Iteration:   1000, Loss function: 6.703, Average Loss: 5.233, avg. samples / sec: 270.43
Iteration:   1020, Loss function: 6.382, Average Loss: 5.256, avg. samples / sec: 258.23
:::MLLOG {"namespace": "", "time_ms": 1639081106993, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081106994, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.365, Average Loss: 5.279, avg. samples / sec: 275.96
Iteration:   1060, Loss function: 6.217, Average Loss: 5.300, avg. samples / sec: 282.93
Iteration:   1080, Loss function: 6.251, Average Loss: 5.321, avg. samples / sec: 299.39
Iteration:   1100, Loss function: 6.181, Average Loss: 5.340, avg. samples / sec: 272.61
Iteration:   1120, Loss function: 6.297, Average Loss: 5.359, avg. samples / sec: 281.86
Iteration:   1140, Loss function: 6.338, Average Loss: 5.379, avg. samples / sec: 295.49
Iteration:   1160, Loss function: 6.036, Average Loss: 5.396, avg. samples / sec: 241.93
Iteration:   1180, Loss function: 6.220, Average Loss: 5.412, avg. samples / sec: 266.05
Iteration:   1200, Loss function: 6.267, Average Loss: 5.428, avg. samples / sec: 251.51
Iteration:   1220, Loss function: 6.233, Average Loss: 5.444, avg. samples / sec: 306.05
Iteration:   1240, Loss function: 6.067, Average Loss: 5.457, avg. samples / sec: 330.83
Iteration:   1260, Loss function: 6.049, Average Loss: 5.470, avg. samples / sec: 334.32
Iteration:   1280, Loss function: 6.016, Average Loss: 5.483, avg. samples / sec: 333.76
Iteration:   1300, Loss function: 6.154, Average Loss: 5.495, avg. samples / sec: 334.02
Iteration:   1320, Loss function: 5.981, Average Loss: 5.506, avg. samples / sec: 330.92
Iteration:   1340, Loss function: 5.854, Average Loss: 5.516, avg. samples / sec: 331.42
Iteration:   1360, Loss function: 6.010, Average Loss: 5.526, avg. samples / sec: 340.79
Iteration:   1380, Loss function: 6.057, Average Loss: 5.536, avg. samples / sec: 327.28
Iteration:   1400, Loss function: 6.167, Average Loss: 5.545, avg. samples / sec: 320.30
Iteration:   1420, Loss function: 6.046, Average Loss: 5.553, avg. samples / sec: 323.06
Iteration:   1440, Loss function: 6.271, Average Loss: 5.562, avg. samples / sec: 260.23
Iteration:   1460, Loss function: 6.258, Average Loss: 5.571, avg. samples / sec: 304.61
Iteration:   1480, Loss function: 5.900, Average Loss: 5.579, avg. samples / sec: 289.62
Iteration:   1500, Loss function: 6.143, Average Loss: 5.587, avg. samples / sec: 327.56
Iteration:   1520, Loss function: 6.005, Average Loss: 5.593, avg. samples / sec: 250.16
Iteration:   1540, Loss function: 6.174, Average Loss: 5.597, avg. samples / sec: 230.88
Iteration:   1560, Loss function: 5.821, Average Loss: 5.601, avg. samples / sec: 307.66
Iteration:   1580, Loss function: 5.548, Average Loss: 5.606, avg. samples / sec: 317.12
Iteration:   1600, Loss function: 6.304, Average Loss: 5.611, avg. samples / sec: 323.30
Iteration:   1620, Loss function: 5.818, Average Loss: 5.616, avg. samples / sec: 329.70
Iteration:   1640, Loss function: 5.942, Average Loss: 5.620, avg. samples / sec: 324.48
Iteration:   1660, Loss function: 5.982, Average Loss: 5.625, avg. samples / sec: 335.02
Iteration:   1680, Loss function: 5.664, Average Loss: 5.628, avg. samples / sec: 329.69
Iteration:   1700, Loss function: 5.389, Average Loss: 5.630, avg. samples / sec: 337.03
Iteration:   1720, Loss function: 5.541, Average Loss: 5.632, avg. samples / sec: 323.02
Iteration:   1740, Loss function: 5.888, Average Loss: 5.634, avg. samples / sec: 337.01
Iteration:   1760, Loss function: 5.559, Average Loss: 5.635, avg. samples / sec: 291.54
Iteration:   1780, Loss function: 5.683, Average Loss: 5.637, avg. samples / sec: 220.01
Iteration:   1800, Loss function: 5.725, Average Loss: 5.638, avg. samples / sec: 259.64
Iteration:   1820, Loss function: 5.993, Average Loss: 5.640, avg. samples / sec: 246.73
Iteration:   1840, Loss function: 5.920, Average Loss: 5.641, avg. samples / sec: 330.21
Iteration:   1860, Loss function: 5.573, Average Loss: 5.641, avg. samples / sec: 230.54
Iteration:   1880, Loss function: 5.913, Average Loss: 5.643, avg. samples / sec: 326.96
Iteration:   1900, Loss function: 5.946, Average Loss: 5.643, avg. samples / sec: 326.13
Iteration:   1920, Loss function: 5.785, Average Loss: 5.643, avg. samples / sec: 320.63
Iteration:   1940, Loss function: 5.784, Average Loss: 5.642, avg. samples / sec: 241.57
Iteration:   1960, Loss function: 5.615, Average Loss: 5.642, avg. samples / sec: 306.92
Iteration:   1980, Loss function: 5.640, Average Loss: 5.641, avg. samples / sec: 208.48
Iteration:   2000, Loss function: 5.472, Average Loss: 5.640, avg. samples / sec: 251.23
Iteration:   2020, Loss function: 5.605, Average Loss: 5.638, avg. samples / sec: 204.93
Iteration:   2040, Loss function: 5.508, Average Loss: 5.638, avg. samples / sec: 297.53
:::MLLOG {"namespace": "", "time_ms": 1639081512570, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081512572, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.480, Average Loss: 5.636, avg. samples / sec: 254.46
Iteration:   2080, Loss function: 4.960, Average Loss: 5.633, avg. samples / sec: 322.32
Iteration:   2100, Loss function: 5.575, Average Loss: 5.630, avg. samples / sec: 288.57
Iteration:   2120, Loss function: 5.350, Average Loss: 5.627, avg. samples / sec: 329.67
Iteration:   2140, Loss function: 5.503, Average Loss: 5.623, avg. samples / sec: 310.53
Iteration:   2160, Loss function: 5.295, Average Loss: 5.621, avg. samples / sec: 302.76
Iteration:   2180, Loss function: 5.417, Average Loss: 5.619, avg. samples / sec: 311.39
Iteration:   2200, Loss function: 5.485, Average Loss: 5.615, avg. samples / sec: 310.81
Iteration:   2220, Loss function: 5.597, Average Loss: 5.612, avg. samples / sec: 216.19
Iteration:   2240, Loss function: 5.502, Average Loss: 5.610, avg. samples / sec: 302.12
Iteration:   2260, Loss function: 5.298, Average Loss: 5.607, avg. samples / sec: 332.50
Iteration:   2280, Loss function: 5.158, Average Loss: 5.604, avg. samples / sec: 308.11
Iteration:   2300, Loss function: 5.071, Average Loss: 5.600, avg. samples / sec: 335.44
Iteration:   2320, Loss function: 5.289, Average Loss: 5.598, avg. samples / sec: 311.62
Iteration:   2340, Loss function: 5.366, Average Loss: 5.595, avg. samples / sec: 223.46
Iteration:   2360, Loss function: 5.387, Average Loss: 5.592, avg. samples / sec: 338.63
Iteration:   2380, Loss function: 5.309, Average Loss: 5.589, avg. samples / sec: 334.49
Iteration:   2400, Loss function: 5.285, Average Loss: 5.585, avg. samples / sec: 272.99
Iteration:   2420, Loss function: 5.424, Average Loss: 5.581, avg. samples / sec: 244.76
Iteration:   2440, Loss function: 5.407, Average Loss: 5.578, avg. samples / sec: 261.44
Iteration:   2460, Loss function: 5.332, Average Loss: 5.575, avg. samples / sec: 212.55
Iteration:   2480, Loss function: 5.614, Average Loss: 5.571, avg. samples / sec: 281.57
Iteration:   2500, Loss function: 5.496, Average Loss: 5.569, avg. samples / sec: 301.58
Iteration:   2520, Loss function: 5.454, Average Loss: 5.565, avg. samples / sec: 337.78
Iteration:   2540, Loss function: 5.398, Average Loss: 5.561, avg. samples / sec: 316.33
Iteration:   2560, Loss function: 5.345, Average Loss: 5.557, avg. samples / sec: 309.01
Iteration:   2580, Loss function: 5.163, Average Loss: 5.553, avg. samples / sec: 297.55
Iteration:   2600, Loss function: 5.617, Average Loss: 5.550, avg. samples / sec: 322.85
Iteration:   2620, Loss function: 5.510, Average Loss: 5.546, avg. samples / sec: 338.27
Iteration:   2640, Loss function: 5.333, Average Loss: 5.541, avg. samples / sec: 312.71
Iteration:   2660, Loss function: 5.301, Average Loss: 5.539, avg. samples / sec: 315.65
Iteration:   2680, Loss function: 5.180, Average Loss: 5.535, avg. samples / sec: 320.74
Iteration:   2700, Loss function: 5.142, Average Loss: 5.530, avg. samples / sec: 208.16
Iteration:   2720, Loss function: 5.507, Average Loss: 5.527, avg. samples / sec: 317.10
Iteration:   2740, Loss function: 4.872, Average Loss: 5.522, avg. samples / sec: 315.02
Iteration:   2760, Loss function: 4.992, Average Loss: 5.516, avg. samples / sec: 322.26
Iteration:   2780, Loss function: 5.336, Average Loss: 5.512, avg. samples / sec: 282.96
Iteration:   2800, Loss function: 5.132, Average Loss: 5.507, avg. samples / sec: 256.46
Iteration:   2820, Loss function: 5.469, Average Loss: 5.503, avg. samples / sec: 264.30
Iteration:   2840, Loss function: 5.158, Average Loss: 5.499, avg. samples / sec: 231.48
Iteration:   2860, Loss function: 4.996, Average Loss: 5.495, avg. samples / sec: 289.56
Iteration:   2880, Loss function: 5.272, Average Loss: 5.490, avg. samples / sec: 314.74
Iteration:   2900, Loss function: 5.427, Average Loss: 5.486, avg. samples / sec: 316.26
Iteration:   2920, Loss function: 5.235, Average Loss: 5.481, avg. samples / sec: 322.60
Iteration:   2940, Loss function: 5.031, Average Loss: 5.476, avg. samples / sec: 328.48
Iteration:   2960, Loss function: 5.237, Average Loss: 5.471, avg. samples / sec: 330.09
Iteration:   2980, Loss function: 5.350, Average Loss: 5.468, avg. samples / sec: 325.63
Iteration:   3000, Loss function: 5.184, Average Loss: 5.463, avg. samples / sec: 302.62
Iteration:   3020, Loss function: 5.175, Average Loss: 5.456, avg. samples / sec: 304.32
Iteration:   3040, Loss function: 5.228, Average Loss: 5.451, avg. samples / sec: 331.89
Iteration:   3060, Loss function: 5.020, Average Loss: 5.445, avg. samples / sec: 294.74
Iteration:   3080, Loss function: 4.793, Average Loss: 5.439, avg. samples / sec: 182.65
:::MLLOG {"namespace": "", "time_ms": 1639081915257, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081915258, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.142, Average Loss: 5.435, avg. samples / sec: 194.82
Iteration:   3120, Loss function: 4.941, Average Loss: 5.428, avg. samples / sec: 219.89
Iteration:   3140, Loss function: 5.299, Average Loss: 5.424, avg. samples / sec: 299.99
Iteration:   3160, Loss function: 5.565, Average Loss: 5.418, avg. samples / sec: 265.49
Iteration:   3180, Loss function: 5.015, Average Loss: 5.413, avg. samples / sec: 271.29
Iteration:   3200, Loss function: 5.288, Average Loss: 5.408, avg. samples / sec: 198.05
Iteration:   3220, Loss function: 5.012, Average Loss: 5.402, avg. samples / sec: 226.74
Iteration:   3240, Loss function: 5.330, Average Loss: 5.396, avg. samples / sec: 289.35
Iteration:   3260, Loss function: 5.082, Average Loss: 5.391, avg. samples / sec: 324.17
Iteration:   3280, Loss function: 4.718, Average Loss: 5.385, avg. samples / sec: 327.11
Iteration:   3300, Loss function: 4.864, Average Loss: 5.378, avg. samples / sec: 328.48
Iteration:   3320, Loss function: 4.761, Average Loss: 5.372, avg. samples / sec: 320.02
Iteration:   3340, Loss function: 5.174, Average Loss: 5.368, avg. samples / sec: 195.77
Iteration:   3360, Loss function: 5.110, Average Loss: 5.362, avg. samples / sec: 318.41
Iteration:   3380, Loss function: 5.242, Average Loss: 5.356, avg. samples / sec: 216.92
Iteration:   3400, Loss function: 4.972, Average Loss: 5.351, avg. samples / sec: 303.46
Iteration:   3420, Loss function: 5.222, Average Loss: 5.346, avg. samples / sec: 322.59
Iteration:   3440, Loss function: 5.079, Average Loss: 5.341, avg. samples / sec: 324.90
Iteration:   3460, Loss function: 5.095, Average Loss: 5.336, avg. samples / sec: 319.61
Iteration:   3480, Loss function: 5.365, Average Loss: 5.331, avg. samples / sec: 315.54
Iteration:   3500, Loss function: 5.279, Average Loss: 5.328, avg. samples / sec: 330.78
Iteration:   3520, Loss function: 5.027, Average Loss: 5.324, avg. samples / sec: 306.45
Iteration:   3540, Loss function: 5.052, Average Loss: 5.319, avg. samples / sec: 307.06
Iteration:   3560, Loss function: 4.927, Average Loss: 5.317, avg. samples / sec: 313.87
Iteration:   3580, Loss function: 5.252, Average Loss: 5.313, avg. samples / sec: 334.87
Iteration:   3600, Loss function: 5.103, Average Loss: 5.306, avg. samples / sec: 316.20
Iteration:   3620, Loss function: 4.905, Average Loss: 5.301, avg. samples / sec: 335.41
Iteration:   3640, Loss function: 4.843, Average Loss: 5.296, avg. samples / sec: 329.79
Iteration:   3660, Loss function: 5.041, Average Loss: 5.291, avg. samples / sec: 319.31
Iteration:   3680, Loss function: 5.199, Average Loss: 5.287, avg. samples / sec: 328.91
Iteration:   3700, Loss function: 4.933, Average Loss: 5.281, avg. samples / sec: 324.60
Iteration:   3720, Loss function: 5.097, Average Loss: 5.275, avg. samples / sec: 329.33
Iteration:   3740, Loss function: 5.261, Average Loss: 5.271, avg. samples / sec: 329.93
Iteration:   3760, Loss function: 5.125, Average Loss: 5.267, avg. samples / sec: 331.98
Iteration:   3780, Loss function: 5.190, Average Loss: 5.263, avg. samples / sec: 321.44
Iteration:   3800, Loss function: 4.948, Average Loss: 5.260, avg. samples / sec: 282.93
Iteration:   3820, Loss function: 5.113, Average Loss: 5.255, avg. samples / sec: 302.93
Iteration:   3840, Loss function: 4.791, Average Loss: 5.250, avg. samples / sec: 321.78
Iteration:   3860, Loss function: 4.879, Average Loss: 5.245, avg. samples / sec: 315.87
Iteration:   3880, Loss function: 5.097, Average Loss: 5.239, avg. samples / sec: 310.96
Iteration:   3900, Loss function: 5.103, Average Loss: 5.235, avg. samples / sec: 324.52
Iteration:   3920, Loss function: 4.842, Average Loss: 5.229, avg. samples / sec: 318.52
Iteration:   3940, Loss function: 5.051, Average Loss: 5.224, avg. samples / sec: 276.45
Iteration:   3960, Loss function: 4.849, Average Loss: 5.220, avg. samples / sec: 259.93
Iteration:   3980, Loss function: 5.031, Average Loss: 5.215, avg. samples / sec: 267.17
Iteration:   4000, Loss function: 5.057, Average Loss: 5.211, avg. samples / sec: 276.25
Iteration:   4020, Loss function: 5.021, Average Loss: 5.208, avg. samples / sec: 311.51
Iteration:   4040, Loss function: 5.080, Average Loss: 5.204, avg. samples / sec: 287.50
Iteration:   4060, Loss function: 5.222, Average Loss: 5.200, avg. samples / sec: 328.31
Iteration:   4080, Loss function: 5.133, Average Loss: 5.196, avg. samples / sec: 329.20
Iteration:   4100, Loss function: 5.085, Average Loss: 5.193, avg. samples / sec: 296.47
:::MLLOG {"namespace": "", "time_ms": 1639082314851, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082314853, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.001, Average Loss: 5.189, avg. samples / sec: 319.86
Iteration:   4140, Loss function: 4.927, Average Loss: 5.184, avg. samples / sec: 339.69
Iteration:   4160, Loss function: 5.104, Average Loss: 5.178, avg. samples / sec: 270.88
Iteration:   4180, Loss function: 4.941, Average Loss: 5.172, avg. samples / sec: 322.13
Iteration:   4200, Loss function: 4.805, Average Loss: 5.167, avg. samples / sec: 238.64
Iteration:   4220, Loss function: 4.817, Average Loss: 5.162, avg. samples / sec: 244.94
Iteration:   4240, Loss function: 4.981, Average Loss: 5.157, avg. samples / sec: 329.25
Iteration:   4260, Loss function: 5.143, Average Loss: 5.151, avg. samples / sec: 306.79
Iteration:   4280, Loss function: 5.010, Average Loss: 5.146, avg. samples / sec: 327.54
Iteration:   4300, Loss function: 4.820, Average Loss: 5.140, avg. samples / sec: 178.18
Iteration:   4320, Loss function: 4.816, Average Loss: 5.135, avg. samples / sec: 309.10
Iteration:   4340, Loss function: 4.778, Average Loss: 5.129, avg. samples / sec: 321.73
Iteration:   4360, Loss function: 5.068, Average Loss: 5.125, avg. samples / sec: 313.57
Iteration:   4380, Loss function: 5.062, Average Loss: 5.120, avg. samples / sec: 317.39
Iteration:   4400, Loss function: 4.597, Average Loss: 5.115, avg. samples / sec: 305.88
Iteration:   4420, Loss function: 4.731, Average Loss: 5.110, avg. samples / sec: 285.71
Iteration:   4440, Loss function: 4.884, Average Loss: 5.106, avg. samples / sec: 230.79
Iteration:   4460, Loss function: 4.994, Average Loss: 5.102, avg. samples / sec: 313.38
Iteration:   4480, Loss function: 4.968, Average Loss: 5.099, avg. samples / sec: 311.07
Iteration:   4500, Loss function: 4.893, Average Loss: 5.095, avg. samples / sec: 327.15
Iteration:   4520, Loss function: 4.589, Average Loss: 5.091, avg. samples / sec: 323.39
Iteration:   4540, Loss function: 5.284, Average Loss: 5.086, avg. samples / sec: 324.83
Iteration:   4560, Loss function: 4.689, Average Loss: 5.082, avg. samples / sec: 326.41
Iteration:   4580, Loss function: 4.767, Average Loss: 5.080, avg. samples / sec: 324.47
Iteration:   4600, Loss function: 4.663, Average Loss: 5.076, avg. samples / sec: 330.29
Iteration:   4620, Loss function: 4.829, Average Loss: 5.071, avg. samples / sec: 291.56
Iteration:   4640, Loss function: 4.906, Average Loss: 5.067, avg. samples / sec: 301.45
Iteration:   4660, Loss function: 4.788, Average Loss: 5.063, avg. samples / sec: 295.38
Iteration:   4680, Loss function: 5.301, Average Loss: 5.058, avg. samples / sec: 322.56
Iteration:   4700, Loss function: 4.853, Average Loss: 5.054, avg. samples / sec: 263.27
Iteration:   4720, Loss function: 4.682, Average Loss: 5.049, avg. samples / sec: 252.53
Iteration:   4740, Loss function: 4.783, Average Loss: 5.046, avg. samples / sec: 313.95
Iteration:   4760, Loss function: 4.595, Average Loss: 5.042, avg. samples / sec: 300.26
Iteration:   4780, Loss function: 5.056, Average Loss: 5.038, avg. samples / sec: 324.69
Iteration:   4800, Loss function: 4.857, Average Loss: 5.035, avg. samples / sec: 325.39
Iteration:   4820, Loss function: 4.656, Average Loss: 5.032, avg. samples / sec: 304.17
Iteration:   4840, Loss function: 5.020, Average Loss: 5.029, avg. samples / sec: 255.14
Iteration:   4860, Loss function: 4.806, Average Loss: 5.025, avg. samples / sec: 261.59
Iteration:   4880, Loss function: 5.007, Average Loss: 5.021, avg. samples / sec: 308.87
Iteration:   4900, Loss function: 4.402, Average Loss: 5.017, avg. samples / sec: 321.68
Iteration:   4920, Loss function: 4.638, Average Loss: 5.013, avg. samples / sec: 330.85
Iteration:   4940, Loss function: 4.612, Average Loss: 5.008, avg. samples / sec: 225.66
Iteration:   4960, Loss function: 4.670, Average Loss: 5.005, avg. samples / sec: 286.85
Iteration:   4980, Loss function: 4.622, Average Loss: 5.003, avg. samples / sec: 296.17
Iteration:   5000, Loss function: 4.815, Average Loss: 4.999, avg. samples / sec: 308.14
Iteration:   5020, Loss function: 5.080, Average Loss: 4.994, avg. samples / sec: 270.63
Iteration:   5040, Loss function: 4.923, Average Loss: 4.992, avg. samples / sec: 222.08
Iteration:   5060, Loss function: 4.747, Average Loss: 4.989, avg. samples / sec: 300.47
Iteration:   5080, Loss function: 4.643, Average Loss: 4.985, avg. samples / sec: 271.30
Iteration:   5100, Loss function: 4.808, Average Loss: 4.982, avg. samples / sec: 190.52
Iteration:   5120, Loss function: 4.716, Average Loss: 4.980, avg. samples / sec: 292.76
Iteration:   5140, Loss function: 4.853, Average Loss: 4.976, avg. samples / sec: 325.14
:::MLLOG {"namespace": "", "time_ms": 1639082722058, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 83.10 s
:::MLLOG {"namespace": "", "time_ms": 1639082805268, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082805278, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082805279, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.914, Average Loss: 4.971, avg. samples / sec: 24.81
DONE (t=6.09s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10650
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21653
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09362
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18788
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13582
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20065
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21354
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21354
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10650 AP goal: 0.10000
Iteration:   5180, Loss function: 4.769, Average Loss: 4.966, avg. samples / sec: 346.79
:::MLLOG {"namespace": "", "time_ms": 1639082819318, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819319, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10650237887545622, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819319, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082819848, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082821
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:47:01 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:34 PM'
START TIMING RUN WAS 2021-12-09 08:09:34 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:47:01 PM'
ENDING TIMING RUN AT 2021-12-09 08:47:01 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-2393f4b6-9f65-51fe-a56e-7eab138a368a)
+ result=2247
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2247,nvidia,2021-12-09 08:09:34 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2247,nvidia,2021-12-09 08:09:34 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
