+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-9844f.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-9844f.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-9844f.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7d2dee39-0203-5b2a-832d-12e5175d321f
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f
+ echo 'Found 1 MIG instances: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639080575
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 08:09:35 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 08:09:35 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-09 08:09:35 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_15-09-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\5\-\0\9\-\1\2 ]]
+ set +x
Thu Dec  9 20:09:35 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-9844f to the sync file ...
run-ssd--1-9844f Found 13 Pods, waiting to have 24 ...
     1	run-ssd--1-99zg7
     2	run-ssd--1-9468v
     3	run-ssd--1-9mr75
     4	run-ssd--1-nxktb
     5	run-ssd--1-ktdcz
     6	run-ssd--1-xzjmg
     7	run-ssd--1-s8lvw
     8	run-ssd--1-hzxft
     9	run-ssd--1-bbxw4
    10	run-ssd--1-7qs8t
    11	run-ssd--1-rslmw
    12	run-ssd--1-p5q9d
    13	run-ssd--1-9844f
Thu Dec  9 20:09:40 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ tee -a /tmp/ssd_all.log
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
:::MLLOG {"namespace": "", "time_ms": 1639080583821, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080584152, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3324970168, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3324970168
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639080589223, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080589225, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080589237, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080589238, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692698, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692698, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639080699087, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080699089, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080699496, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080699497, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080699498, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.997, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.106, Average Loss: 0.457, avg. samples / sec: 189.61
Iteration:     40, Loss function: 20.835, Average Loss: 0.859, avg. samples / sec: 240.84
Iteration:     60, Loss function: 20.405, Average Loss: 1.248, avg. samples / sec: 257.91
Iteration:     80, Loss function: 19.660, Average Loss: 1.619, avg. samples / sec: 252.96
Iteration:    100, Loss function: 14.420, Average Loss: 1.932, avg. samples / sec: 240.64
Iteration:    120, Loss function: 10.662, Average Loss: 2.126, avg. samples / sec: 250.37
Iteration:    140, Loss function: 9.793, Average Loss: 2.285, avg. samples / sec: 260.01
Iteration:    160, Loss function: 9.130, Average Loss: 2.425, avg. samples / sec: 287.72
Iteration:    180, Loss function: 8.828, Average Loss: 2.554, avg. samples / sec: 267.84
Iteration:    200, Loss function: 8.623, Average Loss: 2.679, avg. samples / sec: 280.64
Iteration:    220, Loss function: 8.530, Average Loss: 2.801, avg. samples / sec: 212.19
Iteration:    240, Loss function: 8.528, Average Loss: 2.920, avg. samples / sec: 284.79
Iteration:    260, Loss function: 8.589, Average Loss: 3.032, avg. samples / sec: 280.70
Iteration:    280, Loss function: 8.380, Average Loss: 3.141, avg. samples / sec: 256.01
Iteration:    300, Loss function: 8.241, Average Loss: 3.244, avg. samples / sec: 297.62
Iteration:    320, Loss function: 8.334, Average Loss: 3.344, avg. samples / sec: 284.82
Iteration:    340, Loss function: 8.308, Average Loss: 3.442, avg. samples / sec: 175.69
Iteration:    360, Loss function: 8.164, Average Loss: 3.537, avg. samples / sec: 253.27
Iteration:    380, Loss function: 7.937, Average Loss: 3.628, avg. samples / sec: 274.79
Iteration:    400, Loss function: 7.988, Average Loss: 3.712, avg. samples / sec: 308.98
Iteration:    420, Loss function: 7.767, Average Loss: 3.796, avg. samples / sec: 285.95
Iteration:    440, Loss function: 7.698, Average Loss: 3.874, avg. samples / sec: 323.39
Iteration:    460, Loss function: 7.722, Average Loss: 3.951, avg. samples / sec: 303.72
Iteration:    480, Loss function: 7.459, Average Loss: 4.024, avg. samples / sec: 294.38
Iteration:    500, Loss function: 7.397, Average Loss: 4.095, avg. samples / sec: 330.93
Iteration:    520, Loss function: 7.583, Average Loss: 4.163, avg. samples / sec: 332.44
Iteration:    540, Loss function: 7.396, Average Loss: 4.229, avg. samples / sec: 334.35
Iteration:    560, Loss function: 7.297, Average Loss: 4.291, avg. samples / sec: 310.70
Iteration:    580, Loss function: 7.177, Average Loss: 4.353, avg. samples / sec: 316.05
Iteration:    600, Loss function: 7.376, Average Loss: 4.412, avg. samples / sec: 302.20
Iteration:    620, Loss function: 7.318, Average Loss: 4.468, avg. samples / sec: 317.39
Iteration:    640, Loss function: 6.989, Average Loss: 4.527, avg. samples / sec: 330.26
Iteration:    660, Loss function: 7.234, Average Loss: 4.581, avg. samples / sec: 304.47
Iteration:    680, Loss function: 7.222, Average Loss: 4.632, avg. samples / sec: 297.08
Iteration:    700, Loss function: 6.666, Average Loss: 4.679, avg. samples / sec: 239.37
Iteration:    720, Loss function: 6.854, Average Loss: 4.728, avg. samples / sec: 312.81
Iteration:    740, Loss function: 6.876, Average Loss: 4.773, avg. samples / sec: 268.97
Iteration:    760, Loss function: 7.145, Average Loss: 4.816, avg. samples / sec: 326.45
Iteration:    780, Loss function: 6.781, Average Loss: 4.858, avg. samples / sec: 328.96
Iteration:    800, Loss function: 7.126, Average Loss: 4.899, avg. samples / sec: 334.31
Iteration:    820, Loss function: 6.670, Average Loss: 4.936, avg. samples / sec: 331.88
Iteration:    840, Loss function: 6.644, Average Loss: 4.971, avg. samples / sec: 337.77
Iteration:    860, Loss function: 6.606, Average Loss: 5.005, avg. samples / sec: 306.37
Iteration:    880, Loss function: 6.852, Average Loss: 5.037, avg. samples / sec: 244.54
Iteration:    900, Loss function: 6.756, Average Loss: 5.068, avg. samples / sec: 288.39
Iteration:    920, Loss function: 6.626, Average Loss: 5.097, avg. samples / sec: 304.10
Iteration:    940, Loss function: 6.722, Average Loss: 5.126, avg. samples / sec: 290.50
Iteration:    960, Loss function: 6.478, Average Loss: 5.154, avg. samples / sec: 276.36
Iteration:    980, Loss function: 6.446, Average Loss: 5.182, avg. samples / sec: 301.42
Iteration:   1000, Loss function: 6.507, Average Loss: 5.206, avg. samples / sec: 318.63
Iteration:   1020, Loss function: 6.404, Average Loss: 5.231, avg. samples / sec: 304.78
:::MLLOG {"namespace": "", "time_ms": 1639081117177, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081117179, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.376, Average Loss: 5.254, avg. samples / sec: 328.06
Iteration:   1060, Loss function: 6.287, Average Loss: 5.277, avg. samples / sec: 299.08
Iteration:   1080, Loss function: 6.208, Average Loss: 5.299, avg. samples / sec: 246.62
Iteration:   1100, Loss function: 6.183, Average Loss: 5.320, avg. samples / sec: 303.54
Iteration:   1120, Loss function: 6.203, Average Loss: 5.339, avg. samples / sec: 329.50
Iteration:   1140, Loss function: 6.411, Average Loss: 5.358, avg. samples / sec: 274.53
Iteration:   1160, Loss function: 6.183, Average Loss: 5.376, avg. samples / sec: 266.66
Iteration:   1180, Loss function: 6.154, Average Loss: 5.393, avg. samples / sec: 241.47
Iteration:   1200, Loss function: 6.076, Average Loss: 5.408, avg. samples / sec: 281.02
Iteration:   1220, Loss function: 6.211, Average Loss: 5.423, avg. samples / sec: 328.06
Iteration:   1240, Loss function: 6.136, Average Loss: 5.436, avg. samples / sec: 340.81
Iteration:   1260, Loss function: 5.905, Average Loss: 5.448, avg. samples / sec: 317.34
Iteration:   1280, Loss function: 5.847, Average Loss: 5.461, avg. samples / sec: 290.65
Iteration:   1300, Loss function: 6.018, Average Loss: 5.473, avg. samples / sec: 274.00
Iteration:   1320, Loss function: 6.068, Average Loss: 5.486, avg. samples / sec: 304.69
Iteration:   1340, Loss function: 5.987, Average Loss: 5.496, avg. samples / sec: 275.03
Iteration:   1360, Loss function: 5.997, Average Loss: 5.506, avg. samples / sec: 227.50
Iteration:   1380, Loss function: 6.161, Average Loss: 5.516, avg. samples / sec: 244.29
Iteration:   1400, Loss function: 6.118, Average Loss: 5.525, avg. samples / sec: 302.09
Iteration:   1420, Loss function: 5.826, Average Loss: 5.532, avg. samples / sec: 243.85
Iteration:   1440, Loss function: 6.349, Average Loss: 5.541, avg. samples / sec: 240.68
Iteration:   1460, Loss function: 6.210, Average Loss: 5.549, avg. samples / sec: 305.70
Iteration:   1480, Loss function: 5.788, Average Loss: 5.556, avg. samples / sec: 284.01
Iteration:   1500, Loss function: 6.025, Average Loss: 5.564, avg. samples / sec: 283.57
Iteration:   1520, Loss function: 5.951, Average Loss: 5.570, avg. samples / sec: 197.61
Iteration:   1540, Loss function: 6.070, Average Loss: 5.575, avg. samples / sec: 192.85
Iteration:   1560, Loss function: 5.696, Average Loss: 5.580, avg. samples / sec: 211.72
Iteration:   1580, Loss function: 5.713, Average Loss: 5.586, avg. samples / sec: 260.13
Iteration:   1600, Loss function: 6.154, Average Loss: 5.592, avg. samples / sec: 286.77
Iteration:   1620, Loss function: 5.780, Average Loss: 5.596, avg. samples / sec: 317.83
Iteration:   1640, Loss function: 5.801, Average Loss: 5.599, avg. samples / sec: 299.95
Iteration:   1660, Loss function: 5.811, Average Loss: 5.603, avg. samples / sec: 326.25
Iteration:   1680, Loss function: 5.868, Average Loss: 5.606, avg. samples / sec: 330.13
Iteration:   1700, Loss function: 5.454, Average Loss: 5.610, avg. samples / sec: 328.97
Iteration:   1720, Loss function: 5.719, Average Loss: 5.612, avg. samples / sec: 329.62
Iteration:   1740, Loss function: 5.984, Average Loss: 5.615, avg. samples / sec: 329.82
Iteration:   1760, Loss function: 5.403, Average Loss: 5.617, avg. samples / sec: 324.55
Iteration:   1780, Loss function: 5.600, Average Loss: 5.618, avg. samples / sec: 318.42
Iteration:   1800, Loss function: 5.685, Average Loss: 5.621, avg. samples / sec: 321.98
Iteration:   1820, Loss function: 5.937, Average Loss: 5.622, avg. samples / sec: 341.89
Iteration:   1840, Loss function: 5.888, Average Loss: 5.623, avg. samples / sec: 327.27
Iteration:   1860, Loss function: 5.591, Average Loss: 5.623, avg. samples / sec: 289.87
Iteration:   1880, Loss function: 5.905, Average Loss: 5.624, avg. samples / sec: 268.84
Iteration:   1900, Loss function: 5.979, Average Loss: 5.625, avg. samples / sec: 303.06
Iteration:   1920, Loss function: 5.552, Average Loss: 5.625, avg. samples / sec: 227.27
Iteration:   1940, Loss function: 5.850, Average Loss: 5.625, avg. samples / sec: 217.42
Iteration:   1960, Loss function: 5.596, Average Loss: 5.623, avg. samples / sec: 268.69
Iteration:   1980, Loss function: 5.720, Average Loss: 5.623, avg. samples / sec: 179.87
Iteration:   2000, Loss function: 5.576, Average Loss: 5.623, avg. samples / sec: 278.63
Iteration:   2020, Loss function: 5.652, Average Loss: 5.623, avg. samples / sec: 258.69
Iteration:   2040, Loss function: 5.643, Average Loss: 5.623, avg. samples / sec: 293.02
:::MLLOG {"namespace": "", "time_ms": 1639081540467, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081540469, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.553, Average Loss: 5.621, avg. samples / sec: 328.41
Iteration:   2080, Loss function: 5.105, Average Loss: 5.619, avg. samples / sec: 320.59
Iteration:   2100, Loss function: 5.637, Average Loss: 5.618, avg. samples / sec: 305.84
Iteration:   2120, Loss function: 5.272, Average Loss: 5.615, avg. samples / sec: 221.00
Iteration:   2140, Loss function: 5.354, Average Loss: 5.611, avg. samples / sec: 297.10
Iteration:   2160, Loss function: 5.441, Average Loss: 5.609, avg. samples / sec: 329.88
Iteration:   2180, Loss function: 5.472, Average Loss: 5.606, avg. samples / sec: 325.77
Iteration:   2200, Loss function: 5.461, Average Loss: 5.603, avg. samples / sec: 324.36
Iteration:   2220, Loss function: 5.653, Average Loss: 5.601, avg. samples / sec: 340.78
Iteration:   2240, Loss function: 5.441, Average Loss: 5.599, avg. samples / sec: 321.50
Iteration:   2260, Loss function: 5.209, Average Loss: 5.594, avg. samples / sec: 317.19
Iteration:   2280, Loss function: 5.277, Average Loss: 5.591, avg. samples / sec: 251.35
Iteration:   2300, Loss function: 5.129, Average Loss: 5.589, avg. samples / sec: 230.90
Iteration:   2320, Loss function: 5.274, Average Loss: 5.588, avg. samples / sec: 311.01
Iteration:   2340, Loss function: 5.251, Average Loss: 5.584, avg. samples / sec: 260.90
Iteration:   2360, Loss function: 5.331, Average Loss: 5.581, avg. samples / sec: 221.66
Iteration:   2380, Loss function: 5.487, Average Loss: 5.578, avg. samples / sec: 309.50
Iteration:   2400, Loss function: 5.403, Average Loss: 5.574, avg. samples / sec: 310.70
Iteration:   2420, Loss function: 5.522, Average Loss: 5.571, avg. samples / sec: 238.00
Iteration:   2440, Loss function: 5.545, Average Loss: 5.569, avg. samples / sec: 231.19
Iteration:   2460, Loss function: 5.061, Average Loss: 5.565, avg. samples / sec: 297.80
Iteration:   2480, Loss function: 5.363, Average Loss: 5.560, avg. samples / sec: 324.75
Iteration:   2500, Loss function: 5.341, Average Loss: 5.556, avg. samples / sec: 244.58
Iteration:   2520, Loss function: 5.413, Average Loss: 5.550, avg. samples / sec: 340.02
Iteration:   2540, Loss function: 5.496, Average Loss: 5.547, avg. samples / sec: 335.48
Iteration:   2560, Loss function: 5.410, Average Loss: 5.543, avg. samples / sec: 334.59
Iteration:   2580, Loss function: 5.254, Average Loss: 5.540, avg. samples / sec: 333.67
Iteration:   2600, Loss function: 5.388, Average Loss: 5.538, avg. samples / sec: 293.44
Iteration:   2620, Loss function: 5.489, Average Loss: 5.533, avg. samples / sec: 327.74
Iteration:   2640, Loss function: 5.283, Average Loss: 5.531, avg. samples / sec: 322.83
Iteration:   2660, Loss function: 5.205, Average Loss: 5.527, avg. samples / sec: 313.79
Iteration:   2680, Loss function: 5.119, Average Loss: 5.523, avg. samples / sec: 238.78
Iteration:   2700, Loss function: 5.025, Average Loss: 5.519, avg. samples / sec: 239.63
Iteration:   2720, Loss function: 5.424, Average Loss: 5.515, avg. samples / sec: 316.12
Iteration:   2740, Loss function: 5.077, Average Loss: 5.510, avg. samples / sec: 331.93
Iteration:   2760, Loss function: 5.111, Average Loss: 5.505, avg. samples / sec: 329.36
Iteration:   2780, Loss function: 5.560, Average Loss: 5.501, avg. samples / sec: 255.45
Iteration:   2800, Loss function: 5.106, Average Loss: 5.497, avg. samples / sec: 291.34
Iteration:   2820, Loss function: 5.475, Average Loss: 5.493, avg. samples / sec: 281.17
Iteration:   2840, Loss function: 5.123, Average Loss: 5.489, avg. samples / sec: 231.99
Iteration:   2860, Loss function: 5.140, Average Loss: 5.484, avg. samples / sec: 264.49
Iteration:   2880, Loss function: 5.253, Average Loss: 5.480, avg. samples / sec: 249.81
Iteration:   2900, Loss function: 5.019, Average Loss: 5.475, avg. samples / sec: 262.28
Iteration:   2920, Loss function: 5.255, Average Loss: 5.469, avg. samples / sec: 230.42
Iteration:   2940, Loss function: 4.997, Average Loss: 5.465, avg. samples / sec: 317.62
Iteration:   2960, Loss function: 5.260, Average Loss: 5.461, avg. samples / sec: 302.27
Iteration:   2980, Loss function: 5.293, Average Loss: 5.457, avg. samples / sec: 321.23
Iteration:   3000, Loss function: 5.540, Average Loss: 5.451, avg. samples / sec: 328.03
Iteration:   3020, Loss function: 5.286, Average Loss: 5.445, avg. samples / sec: 327.31
Iteration:   3040, Loss function: 5.445, Average Loss: 5.441, avg. samples / sec: 315.35
Iteration:   3060, Loss function: 4.956, Average Loss: 5.435, avg. samples / sec: 329.19
Iteration:   3080, Loss function: 5.018, Average Loss: 5.430, avg. samples / sec: 324.00
:::MLLOG {"namespace": "", "time_ms": 1639081945417, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081945419, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.256, Average Loss: 5.426, avg. samples / sec: 329.21
Iteration:   3120, Loss function: 4.887, Average Loss: 5.420, avg. samples / sec: 288.15
Iteration:   3140, Loss function: 5.016, Average Loss: 5.415, avg. samples / sec: 325.72
Iteration:   3160, Loss function: 5.575, Average Loss: 5.410, avg. samples / sec: 327.13
Iteration:   3180, Loss function: 5.072, Average Loss: 5.405, avg. samples / sec: 314.75
Iteration:   3200, Loss function: 5.241, Average Loss: 5.400, avg. samples / sec: 310.41
Iteration:   3220, Loss function: 5.069, Average Loss: 5.394, avg. samples / sec: 332.97
Iteration:   3240, Loss function: 5.197, Average Loss: 5.389, avg. samples / sec: 330.96
Iteration:   3260, Loss function: 4.996, Average Loss: 5.383, avg. samples / sec: 311.12
Iteration:   3280, Loss function: 4.922, Average Loss: 5.376, avg. samples / sec: 207.47
Iteration:   3300, Loss function: 4.917, Average Loss: 5.371, avg. samples / sec: 333.31
Iteration:   3320, Loss function: 5.163, Average Loss: 5.367, avg. samples / sec: 316.89
Iteration:   3340, Loss function: 5.106, Average Loss: 5.363, avg. samples / sec: 235.45
Iteration:   3360, Loss function: 5.048, Average Loss: 5.356, avg. samples / sec: 320.25
Iteration:   3380, Loss function: 5.360, Average Loss: 5.350, avg. samples / sec: 244.83
Iteration:   3400, Loss function: 4.805, Average Loss: 5.345, avg. samples / sec: 288.65
Iteration:   3420, Loss function: 5.195, Average Loss: 5.340, avg. samples / sec: 293.42
Iteration:   3440, Loss function: 4.805, Average Loss: 5.335, avg. samples / sec: 316.33
Iteration:   3460, Loss function: 5.317, Average Loss: 5.330, avg. samples / sec: 335.76
Iteration:   3480, Loss function: 5.036, Average Loss: 5.325, avg. samples / sec: 298.46
Iteration:   3500, Loss function: 5.091, Average Loss: 5.320, avg. samples / sec: 303.55
Iteration:   3520, Loss function: 5.277, Average Loss: 5.316, avg. samples / sec: 315.68
Iteration:   3540, Loss function: 5.055, Average Loss: 5.311, avg. samples / sec: 322.33
Iteration:   3560, Loss function: 5.042, Average Loss: 5.307, avg. samples / sec: 317.22
Iteration:   3580, Loss function: 4.956, Average Loss: 5.303, avg. samples / sec: 337.89
Iteration:   3600, Loss function: 5.082, Average Loss: 5.297, avg. samples / sec: 306.30
Iteration:   3620, Loss function: 4.810, Average Loss: 5.292, avg. samples / sec: 323.66
Iteration:   3640, Loss function: 4.900, Average Loss: 5.287, avg. samples / sec: 287.26
Iteration:   3660, Loss function: 5.197, Average Loss: 5.283, avg. samples / sec: 328.50
Iteration:   3680, Loss function: 5.092, Average Loss: 5.277, avg. samples / sec: 333.42
Iteration:   3700, Loss function: 5.044, Average Loss: 5.271, avg. samples / sec: 211.60
Iteration:   3720, Loss function: 4.902, Average Loss: 5.264, avg. samples / sec: 237.65
Iteration:   3740, Loss function: 5.125, Average Loss: 5.260, avg. samples / sec: 324.71
Iteration:   3760, Loss function: 5.086, Average Loss: 5.257, avg. samples / sec: 180.89
Iteration:   3780, Loss function: 4.938, Average Loss: 5.253, avg. samples / sec: 145.45
Iteration:   3800, Loss function: 5.151, Average Loss: 5.249, avg. samples / sec: 253.52
Iteration:   3820, Loss function: 5.269, Average Loss: 5.245, avg. samples / sec: 300.82
Iteration:   3840, Loss function: 4.724, Average Loss: 5.239, avg. samples / sec: 334.37
Iteration:   3860, Loss function: 4.909, Average Loss: 5.234, avg. samples / sec: 296.91
Iteration:   3880, Loss function: 5.016, Average Loss: 5.229, avg. samples / sec: 304.62
Iteration:   3900, Loss function: 4.929, Average Loss: 5.224, avg. samples / sec: 272.88
Iteration:   3920, Loss function: 5.107, Average Loss: 5.219, avg. samples / sec: 299.62
Iteration:   3940, Loss function: 5.194, Average Loss: 5.214, avg. samples / sec: 282.25
Iteration:   3960, Loss function: 4.810, Average Loss: 5.210, avg. samples / sec: 322.71
Iteration:   3980, Loss function: 4.924, Average Loss: 5.205, avg. samples / sec: 266.89
Iteration:   4000, Loss function: 5.248, Average Loss: 5.201, avg. samples / sec: 267.86
Iteration:   4020, Loss function: 4.975, Average Loss: 5.196, avg. samples / sec: 253.04
Iteration:   4040, Loss function: 4.929, Average Loss: 5.193, avg. samples / sec: 233.20
Iteration:   4060, Loss function: 5.270, Average Loss: 5.190, avg. samples / sec: 330.45
Iteration:   4080, Loss function: 5.097, Average Loss: 5.185, avg. samples / sec: 333.69
Iteration:   4100, Loss function: 4.958, Average Loss: 5.182, avg. samples / sec: 332.70
:::MLLOG {"namespace": "", "time_ms": 1639082355515, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082355517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.008, Average Loss: 5.178, avg. samples / sec: 318.86
Iteration:   4140, Loss function: 5.117, Average Loss: 5.173, avg. samples / sec: 288.89
Iteration:   4160, Loss function: 4.851, Average Loss: 5.166, avg. samples / sec: 261.70
Iteration:   4180, Loss function: 4.838, Average Loss: 5.160, avg. samples / sec: 240.07
Iteration:   4200, Loss function: 4.765, Average Loss: 5.156, avg. samples / sec: 251.93
Iteration:   4220, Loss function: 4.638, Average Loss: 5.151, avg. samples / sec: 253.72
Iteration:   4240, Loss function: 4.952, Average Loss: 5.147, avg. samples / sec: 316.13
Iteration:   4260, Loss function: 5.238, Average Loss: 5.141, avg. samples / sec: 301.35
Iteration:   4280, Loss function: 5.000, Average Loss: 5.135, avg. samples / sec: 253.07
Iteration:   4300, Loss function: 4.750, Average Loss: 5.129, avg. samples / sec: 219.01
Iteration:   4320, Loss function: 4.784, Average Loss: 5.124, avg. samples / sec: 311.19
Iteration:   4340, Loss function: 4.639, Average Loss: 5.120, avg. samples / sec: 299.13
Iteration:   4360, Loss function: 4.739, Average Loss: 5.115, avg. samples / sec: 283.69
Iteration:   4380, Loss function: 4.804, Average Loss: 5.110, avg. samples / sec: 317.94
Iteration:   4400, Loss function: 4.830, Average Loss: 5.107, avg. samples / sec: 329.35
Iteration:   4420, Loss function: 4.882, Average Loss: 5.102, avg. samples / sec: 323.72
Iteration:   4440, Loss function: 4.848, Average Loss: 5.097, avg. samples / sec: 334.68
Iteration:   4460, Loss function: 5.170, Average Loss: 5.094, avg. samples / sec: 311.04
Iteration:   4480, Loss function: 5.099, Average Loss: 5.090, avg. samples / sec: 316.80
Iteration:   4500, Loss function: 4.935, Average Loss: 5.088, avg. samples / sec: 313.73
Iteration:   4520, Loss function: 4.705, Average Loss: 5.084, avg. samples / sec: 329.74
Iteration:   4540, Loss function: 4.942, Average Loss: 5.079, avg. samples / sec: 251.42
Iteration:   4560, Loss function: 4.826, Average Loss: 5.075, avg. samples / sec: 259.98
Iteration:   4580, Loss function: 4.648, Average Loss: 5.073, avg. samples / sec: 313.45
Iteration:   4600, Loss function: 4.901, Average Loss: 5.069, avg. samples / sec: 300.46
Iteration:   4620, Loss function: 4.755, Average Loss: 5.065, avg. samples / sec: 316.09
Iteration:   4640, Loss function: 4.759, Average Loss: 5.060, avg. samples / sec: 257.66
Iteration:   4660, Loss function: 4.676, Average Loss: 5.056, avg. samples / sec: 305.25
Iteration:   4680, Loss function: 5.371, Average Loss: 5.051, avg. samples / sec: 331.22
Iteration:   4700, Loss function: 4.633, Average Loss: 5.048, avg. samples / sec: 322.43
Iteration:   4720, Loss function: 4.703, Average Loss: 5.043, avg. samples / sec: 284.09
Iteration:   4740, Loss function: 4.798, Average Loss: 5.039, avg. samples / sec: 305.59
Iteration:   4760, Loss function: 4.601, Average Loss: 5.035, avg. samples / sec: 323.42
Iteration:   4780, Loss function: 4.870, Average Loss: 5.032, avg. samples / sec: 324.08
Iteration:   4800, Loss function: 4.999, Average Loss: 5.029, avg. samples / sec: 310.40
Iteration:   4820, Loss function: 4.662, Average Loss: 5.025, avg. samples / sec: 337.94
Iteration:   4840, Loss function: 5.085, Average Loss: 5.022, avg. samples / sec: 285.25
Iteration:   4860, Loss function: 4.736, Average Loss: 5.018, avg. samples / sec: 271.84
Iteration:   4880, Loss function: 5.067, Average Loss: 5.014, avg. samples / sec: 323.58
Iteration:   4900, Loss function: 4.722, Average Loss: 5.010, avg. samples / sec: 317.06
Iteration:   4920, Loss function: 4.814, Average Loss: 5.007, avg. samples / sec: 301.33
Iteration:   4940, Loss function: 4.683, Average Loss: 5.002, avg. samples / sec: 319.77
Iteration:   4960, Loss function: 4.761, Average Loss: 5.000, avg. samples / sec: 327.86
Iteration:   4980, Loss function: 4.697, Average Loss: 4.996, avg. samples / sec: 330.29
Iteration:   5000, Loss function: 4.939, Average Loss: 4.993, avg. samples / sec: 327.36
Iteration:   5020, Loss function: 5.282, Average Loss: 4.991, avg. samples / sec: 332.48
Iteration:   5040, Loss function: 4.714, Average Loss: 4.987, avg. samples / sec: 298.85
Iteration:   5060, Loss function: 4.705, Average Loss: 4.984, avg. samples / sec: 324.97
Iteration:   5080, Loss function: 4.519, Average Loss: 4.980, avg. samples / sec: 291.96
Iteration:   5100, Loss function: 4.755, Average Loss: 4.978, avg. samples / sec: 334.88
Iteration:   5120, Loss function: 4.628, Average Loss: 4.975, avg. samples / sec: 318.06
Iteration:   5140, Loss function: 4.782, Average Loss: 4.972, avg. samples / sec: 319.09
:::MLLOG {"namespace": "", "time_ms": 1639082747165, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 70.43 s
:::MLLOG {"namespace": "", "time_ms": 1639082817692, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082817745, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817745, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.70s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10486
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09198
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19462
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13634
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20163
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10486 AP goal: 0.10000
Iteration:   5160, Loss function: 4.737, Average Loss: 4.967, avg. samples / sec: 29.48
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10485950190358274, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823629, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 20:47:04 UTC 2021: done waiting for 1 executions'
Thu Dec  9 20:47:04 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639080583821, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639080584152, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3324970168, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3324970168
:::MLLOG {"namespace": "", "time_ms": 1639080589223, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639080589225, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639080589237, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639080589238, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639080589239, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639080692698, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639080692698, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639080699087, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639080699089, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639080699496, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639080699497, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639080699498, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.997, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.106, Average Loss: 0.457, avg. samples / sec: 189.61
Iteration:     40, Loss function: 20.835, Average Loss: 0.859, avg. samples / sec: 240.84
Iteration:     60, Loss function: 20.405, Average Loss: 1.248, avg. samples / sec: 257.91
Iteration:     80, Loss function: 19.660, Average Loss: 1.619, avg. samples / sec: 252.96
Iteration:    100, Loss function: 14.420, Average Loss: 1.932, avg. samples / sec: 240.64
Iteration:    120, Loss function: 10.662, Average Loss: 2.126, avg. samples / sec: 250.37
Iteration:    140, Loss function: 9.793, Average Loss: 2.285, avg. samples / sec: 260.01
Iteration:    160, Loss function: 9.130, Average Loss: 2.425, avg. samples / sec: 287.72
Iteration:    180, Loss function: 8.828, Average Loss: 2.554, avg. samples / sec: 267.84
Iteration:    200, Loss function: 8.623, Average Loss: 2.679, avg. samples / sec: 280.64
Iteration:    220, Loss function: 8.530, Average Loss: 2.801, avg. samples / sec: 212.19
Iteration:    240, Loss function: 8.528, Average Loss: 2.920, avg. samples / sec: 284.79
Iteration:    260, Loss function: 8.589, Average Loss: 3.032, avg. samples / sec: 280.70
Iteration:    280, Loss function: 8.380, Average Loss: 3.141, avg. samples / sec: 256.01
Iteration:    300, Loss function: 8.241, Average Loss: 3.244, avg. samples / sec: 297.62
Iteration:    320, Loss function: 8.334, Average Loss: 3.344, avg. samples / sec: 284.82
Iteration:    340, Loss function: 8.308, Average Loss: 3.442, avg. samples / sec: 175.69
Iteration:    360, Loss function: 8.164, Average Loss: 3.537, avg. samples / sec: 253.27
Iteration:    380, Loss function: 7.937, Average Loss: 3.628, avg. samples / sec: 274.79
Iteration:    400, Loss function: 7.988, Average Loss: 3.712, avg. samples / sec: 308.98
Iteration:    420, Loss function: 7.767, Average Loss: 3.796, avg. samples / sec: 285.95
Iteration:    440, Loss function: 7.698, Average Loss: 3.874, avg. samples / sec: 323.39
Iteration:    460, Loss function: 7.722, Average Loss: 3.951, avg. samples / sec: 303.72
Iteration:    480, Loss function: 7.459, Average Loss: 4.024, avg. samples / sec: 294.38
Iteration:    500, Loss function: 7.397, Average Loss: 4.095, avg. samples / sec: 330.93
Iteration:    520, Loss function: 7.583, Average Loss: 4.163, avg. samples / sec: 332.44
Iteration:    540, Loss function: 7.396, Average Loss: 4.229, avg. samples / sec: 334.35
Iteration:    560, Loss function: 7.297, Average Loss: 4.291, avg. samples / sec: 310.70
Iteration:    580, Loss function: 7.177, Average Loss: 4.353, avg. samples / sec: 316.05
Iteration:    600, Loss function: 7.376, Average Loss: 4.412, avg. samples / sec: 302.20
Iteration:    620, Loss function: 7.318, Average Loss: 4.468, avg. samples / sec: 317.39
Iteration:    640, Loss function: 6.989, Average Loss: 4.527, avg. samples / sec: 330.26
Iteration:    660, Loss function: 7.234, Average Loss: 4.581, avg. samples / sec: 304.47
Iteration:    680, Loss function: 7.222, Average Loss: 4.632, avg. samples / sec: 297.08
Iteration:    700, Loss function: 6.666, Average Loss: 4.679, avg. samples / sec: 239.37
Iteration:    720, Loss function: 6.854, Average Loss: 4.728, avg. samples / sec: 312.81
Iteration:    740, Loss function: 6.876, Average Loss: 4.773, avg. samples / sec: 268.97
Iteration:    760, Loss function: 7.145, Average Loss: 4.816, avg. samples / sec: 326.45
Iteration:    780, Loss function: 6.781, Average Loss: 4.858, avg. samples / sec: 328.96
Iteration:    800, Loss function: 7.126, Average Loss: 4.899, avg. samples / sec: 334.31
Iteration:    820, Loss function: 6.670, Average Loss: 4.936, avg. samples / sec: 331.88
Iteration:    840, Loss function: 6.644, Average Loss: 4.971, avg. samples / sec: 337.77
Iteration:    860, Loss function: 6.606, Average Loss: 5.005, avg. samples / sec: 306.37
Iteration:    880, Loss function: 6.852, Average Loss: 5.037, avg. samples / sec: 244.54
Iteration:    900, Loss function: 6.756, Average Loss: 5.068, avg. samples / sec: 288.39
Iteration:    920, Loss function: 6.626, Average Loss: 5.097, avg. samples / sec: 304.10
Iteration:    940, Loss function: 6.722, Average Loss: 5.126, avg. samples / sec: 290.50
Iteration:    960, Loss function: 6.478, Average Loss: 5.154, avg. samples / sec: 276.36
Iteration:    980, Loss function: 6.446, Average Loss: 5.182, avg. samples / sec: 301.42
Iteration:   1000, Loss function: 6.507, Average Loss: 5.206, avg. samples / sec: 318.63
Iteration:   1020, Loss function: 6.404, Average Loss: 5.231, avg. samples / sec: 304.78
:::MLLOG {"namespace": "", "time_ms": 1639081117177, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639081117179, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.376, Average Loss: 5.254, avg. samples / sec: 328.06
Iteration:   1060, Loss function: 6.287, Average Loss: 5.277, avg. samples / sec: 299.08
Iteration:   1080, Loss function: 6.208, Average Loss: 5.299, avg. samples / sec: 246.62
Iteration:   1100, Loss function: 6.183, Average Loss: 5.320, avg. samples / sec: 303.54
Iteration:   1120, Loss function: 6.203, Average Loss: 5.339, avg. samples / sec: 329.50
Iteration:   1140, Loss function: 6.411, Average Loss: 5.358, avg. samples / sec: 274.53
Iteration:   1160, Loss function: 6.183, Average Loss: 5.376, avg. samples / sec: 266.66
Iteration:   1180, Loss function: 6.154, Average Loss: 5.393, avg. samples / sec: 241.47
Iteration:   1200, Loss function: 6.076, Average Loss: 5.408, avg. samples / sec: 281.02
Iteration:   1220, Loss function: 6.211, Average Loss: 5.423, avg. samples / sec: 328.06
Iteration:   1240, Loss function: 6.136, Average Loss: 5.436, avg. samples / sec: 340.81
Iteration:   1260, Loss function: 5.905, Average Loss: 5.448, avg. samples / sec: 317.34
Iteration:   1280, Loss function: 5.847, Average Loss: 5.461, avg. samples / sec: 290.65
Iteration:   1300, Loss function: 6.018, Average Loss: 5.473, avg. samples / sec: 274.00
Iteration:   1320, Loss function: 6.068, Average Loss: 5.486, avg. samples / sec: 304.69
Iteration:   1340, Loss function: 5.987, Average Loss: 5.496, avg. samples / sec: 275.03
Iteration:   1360, Loss function: 5.997, Average Loss: 5.506, avg. samples / sec: 227.50
Iteration:   1380, Loss function: 6.161, Average Loss: 5.516, avg. samples / sec: 244.29
Iteration:   1400, Loss function: 6.118, Average Loss: 5.525, avg. samples / sec: 302.09
Iteration:   1420, Loss function: 5.826, Average Loss: 5.532, avg. samples / sec: 243.85
Iteration:   1440, Loss function: 6.349, Average Loss: 5.541, avg. samples / sec: 240.68
Iteration:   1460, Loss function: 6.210, Average Loss: 5.549, avg. samples / sec: 305.70
Iteration:   1480, Loss function: 5.788, Average Loss: 5.556, avg. samples / sec: 284.01
Iteration:   1500, Loss function: 6.025, Average Loss: 5.564, avg. samples / sec: 283.57
Iteration:   1520, Loss function: 5.951, Average Loss: 5.570, avg. samples / sec: 197.61
Iteration:   1540, Loss function: 6.070, Average Loss: 5.575, avg. samples / sec: 192.85
Iteration:   1560, Loss function: 5.696, Average Loss: 5.580, avg. samples / sec: 211.72
Iteration:   1580, Loss function: 5.713, Average Loss: 5.586, avg. samples / sec: 260.13
Iteration:   1600, Loss function: 6.154, Average Loss: 5.592, avg. samples / sec: 286.77
Iteration:   1620, Loss function: 5.780, Average Loss: 5.596, avg. samples / sec: 317.83
Iteration:   1640, Loss function: 5.801, Average Loss: 5.599, avg. samples / sec: 299.95
Iteration:   1660, Loss function: 5.811, Average Loss: 5.603, avg. samples / sec: 326.25
Iteration:   1680, Loss function: 5.868, Average Loss: 5.606, avg. samples / sec: 330.13
Iteration:   1700, Loss function: 5.454, Average Loss: 5.610, avg. samples / sec: 328.97
Iteration:   1720, Loss function: 5.719, Average Loss: 5.612, avg. samples / sec: 329.62
Iteration:   1740, Loss function: 5.984, Average Loss: 5.615, avg. samples / sec: 329.82
Iteration:   1760, Loss function: 5.403, Average Loss: 5.617, avg. samples / sec: 324.55
Iteration:   1780, Loss function: 5.600, Average Loss: 5.618, avg. samples / sec: 318.42
Iteration:   1800, Loss function: 5.685, Average Loss: 5.621, avg. samples / sec: 321.98
Iteration:   1820, Loss function: 5.937, Average Loss: 5.622, avg. samples / sec: 341.89
Iteration:   1840, Loss function: 5.888, Average Loss: 5.623, avg. samples / sec: 327.27
Iteration:   1860, Loss function: 5.591, Average Loss: 5.623, avg. samples / sec: 289.87
Iteration:   1880, Loss function: 5.905, Average Loss: 5.624, avg. samples / sec: 268.84
Iteration:   1900, Loss function: 5.979, Average Loss: 5.625, avg. samples / sec: 303.06
Iteration:   1920, Loss function: 5.552, Average Loss: 5.625, avg. samples / sec: 227.27
Iteration:   1940, Loss function: 5.850, Average Loss: 5.625, avg. samples / sec: 217.42
Iteration:   1960, Loss function: 5.596, Average Loss: 5.623, avg. samples / sec: 268.69
Iteration:   1980, Loss function: 5.720, Average Loss: 5.623, avg. samples / sec: 179.87
Iteration:   2000, Loss function: 5.576, Average Loss: 5.623, avg. samples / sec: 278.63
Iteration:   2020, Loss function: 5.652, Average Loss: 5.623, avg. samples / sec: 258.69
Iteration:   2040, Loss function: 5.643, Average Loss: 5.623, avg. samples / sec: 293.02
:::MLLOG {"namespace": "", "time_ms": 1639081540467, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639081540469, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.553, Average Loss: 5.621, avg. samples / sec: 328.41
Iteration:   2080, Loss function: 5.105, Average Loss: 5.619, avg. samples / sec: 320.59
Iteration:   2100, Loss function: 5.637, Average Loss: 5.618, avg. samples / sec: 305.84
Iteration:   2120, Loss function: 5.272, Average Loss: 5.615, avg. samples / sec: 221.00
Iteration:   2140, Loss function: 5.354, Average Loss: 5.611, avg. samples / sec: 297.10
Iteration:   2160, Loss function: 5.441, Average Loss: 5.609, avg. samples / sec: 329.88
Iteration:   2180, Loss function: 5.472, Average Loss: 5.606, avg. samples / sec: 325.77
Iteration:   2200, Loss function: 5.461, Average Loss: 5.603, avg. samples / sec: 324.36
Iteration:   2220, Loss function: 5.653, Average Loss: 5.601, avg. samples / sec: 340.78
Iteration:   2240, Loss function: 5.441, Average Loss: 5.599, avg. samples / sec: 321.50
Iteration:   2260, Loss function: 5.209, Average Loss: 5.594, avg. samples / sec: 317.19
Iteration:   2280, Loss function: 5.277, Average Loss: 5.591, avg. samples / sec: 251.35
Iteration:   2300, Loss function: 5.129, Average Loss: 5.589, avg. samples / sec: 230.90
Iteration:   2320, Loss function: 5.274, Average Loss: 5.588, avg. samples / sec: 311.01
Iteration:   2340, Loss function: 5.251, Average Loss: 5.584, avg. samples / sec: 260.90
Iteration:   2360, Loss function: 5.331, Average Loss: 5.581, avg. samples / sec: 221.66
Iteration:   2380, Loss function: 5.487, Average Loss: 5.578, avg. samples / sec: 309.50
Iteration:   2400, Loss function: 5.403, Average Loss: 5.574, avg. samples / sec: 310.70
Iteration:   2420, Loss function: 5.522, Average Loss: 5.571, avg. samples / sec: 238.00
Iteration:   2440, Loss function: 5.545, Average Loss: 5.569, avg. samples / sec: 231.19
Iteration:   2460, Loss function: 5.061, Average Loss: 5.565, avg. samples / sec: 297.80
Iteration:   2480, Loss function: 5.363, Average Loss: 5.560, avg. samples / sec: 324.75
Iteration:   2500, Loss function: 5.341, Average Loss: 5.556, avg. samples / sec: 244.58
Iteration:   2520, Loss function: 5.413, Average Loss: 5.550, avg. samples / sec: 340.02
Iteration:   2540, Loss function: 5.496, Average Loss: 5.547, avg. samples / sec: 335.48
Iteration:   2560, Loss function: 5.410, Average Loss: 5.543, avg. samples / sec: 334.59
Iteration:   2580, Loss function: 5.254, Average Loss: 5.540, avg. samples / sec: 333.67
Iteration:   2600, Loss function: 5.388, Average Loss: 5.538, avg. samples / sec: 293.44
Iteration:   2620, Loss function: 5.489, Average Loss: 5.533, avg. samples / sec: 327.74
Iteration:   2640, Loss function: 5.283, Average Loss: 5.531, avg. samples / sec: 322.83
Iteration:   2660, Loss function: 5.205, Average Loss: 5.527, avg. samples / sec: 313.79
Iteration:   2680, Loss function: 5.119, Average Loss: 5.523, avg. samples / sec: 238.78
Iteration:   2700, Loss function: 5.025, Average Loss: 5.519, avg. samples / sec: 239.63
Iteration:   2720, Loss function: 5.424, Average Loss: 5.515, avg. samples / sec: 316.12
Iteration:   2740, Loss function: 5.077, Average Loss: 5.510, avg. samples / sec: 331.93
Iteration:   2760, Loss function: 5.111, Average Loss: 5.505, avg. samples / sec: 329.36
Iteration:   2780, Loss function: 5.560, Average Loss: 5.501, avg. samples / sec: 255.45
Iteration:   2800, Loss function: 5.106, Average Loss: 5.497, avg. samples / sec: 291.34
Iteration:   2820, Loss function: 5.475, Average Loss: 5.493, avg. samples / sec: 281.17
Iteration:   2840, Loss function: 5.123, Average Loss: 5.489, avg. samples / sec: 231.99
Iteration:   2860, Loss function: 5.140, Average Loss: 5.484, avg. samples / sec: 264.49
Iteration:   2880, Loss function: 5.253, Average Loss: 5.480, avg. samples / sec: 249.81
Iteration:   2900, Loss function: 5.019, Average Loss: 5.475, avg. samples / sec: 262.28
Iteration:   2920, Loss function: 5.255, Average Loss: 5.469, avg. samples / sec: 230.42
Iteration:   2940, Loss function: 4.997, Average Loss: 5.465, avg. samples / sec: 317.62
Iteration:   2960, Loss function: 5.260, Average Loss: 5.461, avg. samples / sec: 302.27
Iteration:   2980, Loss function: 5.293, Average Loss: 5.457, avg. samples / sec: 321.23
Iteration:   3000, Loss function: 5.540, Average Loss: 5.451, avg. samples / sec: 328.03
Iteration:   3020, Loss function: 5.286, Average Loss: 5.445, avg. samples / sec: 327.31
Iteration:   3040, Loss function: 5.445, Average Loss: 5.441, avg. samples / sec: 315.35
Iteration:   3060, Loss function: 4.956, Average Loss: 5.435, avg. samples / sec: 329.19
Iteration:   3080, Loss function: 5.018, Average Loss: 5.430, avg. samples / sec: 324.00
:::MLLOG {"namespace": "", "time_ms": 1639081945417, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639081945419, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.256, Average Loss: 5.426, avg. samples / sec: 329.21
Iteration:   3120, Loss function: 4.887, Average Loss: 5.420, avg. samples / sec: 288.15
Iteration:   3140, Loss function: 5.016, Average Loss: 5.415, avg. samples / sec: 325.72
Iteration:   3160, Loss function: 5.575, Average Loss: 5.410, avg. samples / sec: 327.13
Iteration:   3180, Loss function: 5.072, Average Loss: 5.405, avg. samples / sec: 314.75
Iteration:   3200, Loss function: 5.241, Average Loss: 5.400, avg. samples / sec: 310.41
Iteration:   3220, Loss function: 5.069, Average Loss: 5.394, avg. samples / sec: 332.97
Iteration:   3240, Loss function: 5.197, Average Loss: 5.389, avg. samples / sec: 330.96
Iteration:   3260, Loss function: 4.996, Average Loss: 5.383, avg. samples / sec: 311.12
Iteration:   3280, Loss function: 4.922, Average Loss: 5.376, avg. samples / sec: 207.47
Iteration:   3300, Loss function: 4.917, Average Loss: 5.371, avg. samples / sec: 333.31
Iteration:   3320, Loss function: 5.163, Average Loss: 5.367, avg. samples / sec: 316.89
Iteration:   3340, Loss function: 5.106, Average Loss: 5.363, avg. samples / sec: 235.45
Iteration:   3360, Loss function: 5.048, Average Loss: 5.356, avg. samples / sec: 320.25
Iteration:   3380, Loss function: 5.360, Average Loss: 5.350, avg. samples / sec: 244.83
Iteration:   3400, Loss function: 4.805, Average Loss: 5.345, avg. samples / sec: 288.65
Iteration:   3420, Loss function: 5.195, Average Loss: 5.340, avg. samples / sec: 293.42
Iteration:   3440, Loss function: 4.805, Average Loss: 5.335, avg. samples / sec: 316.33
Iteration:   3460, Loss function: 5.317, Average Loss: 5.330, avg. samples / sec: 335.76
Iteration:   3480, Loss function: 5.036, Average Loss: 5.325, avg. samples / sec: 298.46
Iteration:   3500, Loss function: 5.091, Average Loss: 5.320, avg. samples / sec: 303.55
Iteration:   3520, Loss function: 5.277, Average Loss: 5.316, avg. samples / sec: 315.68
Iteration:   3540, Loss function: 5.055, Average Loss: 5.311, avg. samples / sec: 322.33
Iteration:   3560, Loss function: 5.042, Average Loss: 5.307, avg. samples / sec: 317.22
Iteration:   3580, Loss function: 4.956, Average Loss: 5.303, avg. samples / sec: 337.89
Iteration:   3600, Loss function: 5.082, Average Loss: 5.297, avg. samples / sec: 306.30
Iteration:   3620, Loss function: 4.810, Average Loss: 5.292, avg. samples / sec: 323.66
Iteration:   3640, Loss function: 4.900, Average Loss: 5.287, avg. samples / sec: 287.26
Iteration:   3660, Loss function: 5.197, Average Loss: 5.283, avg. samples / sec: 328.50
Iteration:   3680, Loss function: 5.092, Average Loss: 5.277, avg. samples / sec: 333.42
Iteration:   3700, Loss function: 5.044, Average Loss: 5.271, avg. samples / sec: 211.60
Iteration:   3720, Loss function: 4.902, Average Loss: 5.264, avg. samples / sec: 237.65
Iteration:   3740, Loss function: 5.125, Average Loss: 5.260, avg. samples / sec: 324.71
Iteration:   3760, Loss function: 5.086, Average Loss: 5.257, avg. samples / sec: 180.89
Iteration:   3780, Loss function: 4.938, Average Loss: 5.253, avg. samples / sec: 145.45
Iteration:   3800, Loss function: 5.151, Average Loss: 5.249, avg. samples / sec: 253.52
Iteration:   3820, Loss function: 5.269, Average Loss: 5.245, avg. samples / sec: 300.82
Iteration:   3840, Loss function: 4.724, Average Loss: 5.239, avg. samples / sec: 334.37
Iteration:   3860, Loss function: 4.909, Average Loss: 5.234, avg. samples / sec: 296.91
Iteration:   3880, Loss function: 5.016, Average Loss: 5.229, avg. samples / sec: 304.62
Iteration:   3900, Loss function: 4.929, Average Loss: 5.224, avg. samples / sec: 272.88
Iteration:   3920, Loss function: 5.107, Average Loss: 5.219, avg. samples / sec: 299.62
Iteration:   3940, Loss function: 5.194, Average Loss: 5.214, avg. samples / sec: 282.25
Iteration:   3960, Loss function: 4.810, Average Loss: 5.210, avg. samples / sec: 322.71
Iteration:   3980, Loss function: 4.924, Average Loss: 5.205, avg. samples / sec: 266.89
Iteration:   4000, Loss function: 5.248, Average Loss: 5.201, avg. samples / sec: 267.86
Iteration:   4020, Loss function: 4.975, Average Loss: 5.196, avg. samples / sec: 253.04
Iteration:   4040, Loss function: 4.929, Average Loss: 5.193, avg. samples / sec: 233.20
Iteration:   4060, Loss function: 5.270, Average Loss: 5.190, avg. samples / sec: 330.45
Iteration:   4080, Loss function: 5.097, Average Loss: 5.185, avg. samples / sec: 333.69
Iteration:   4100, Loss function: 4.958, Average Loss: 5.182, avg. samples / sec: 332.70
:::MLLOG {"namespace": "", "time_ms": 1639082355515, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639082355517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.008, Average Loss: 5.178, avg. samples / sec: 318.86
Iteration:   4140, Loss function: 5.117, Average Loss: 5.173, avg. samples / sec: 288.89
Iteration:   4160, Loss function: 4.851, Average Loss: 5.166, avg. samples / sec: 261.70
Iteration:   4180, Loss function: 4.838, Average Loss: 5.160, avg. samples / sec: 240.07
Iteration:   4200, Loss function: 4.765, Average Loss: 5.156, avg. samples / sec: 251.93
Iteration:   4220, Loss function: 4.638, Average Loss: 5.151, avg. samples / sec: 253.72
Iteration:   4240, Loss function: 4.952, Average Loss: 5.147, avg. samples / sec: 316.13
Iteration:   4260, Loss function: 5.238, Average Loss: 5.141, avg. samples / sec: 301.35
Iteration:   4280, Loss function: 5.000, Average Loss: 5.135, avg. samples / sec: 253.07
Iteration:   4300, Loss function: 4.750, Average Loss: 5.129, avg. samples / sec: 219.01
Iteration:   4320, Loss function: 4.784, Average Loss: 5.124, avg. samples / sec: 311.19
Iteration:   4340, Loss function: 4.639, Average Loss: 5.120, avg. samples / sec: 299.13
Iteration:   4360, Loss function: 4.739, Average Loss: 5.115, avg. samples / sec: 283.69
Iteration:   4380, Loss function: 4.804, Average Loss: 5.110, avg. samples / sec: 317.94
Iteration:   4400, Loss function: 4.830, Average Loss: 5.107, avg. samples / sec: 329.35
Iteration:   4420, Loss function: 4.882, Average Loss: 5.102, avg. samples / sec: 323.72
Iteration:   4440, Loss function: 4.848, Average Loss: 5.097, avg. samples / sec: 334.68
Iteration:   4460, Loss function: 5.170, Average Loss: 5.094, avg. samples / sec: 311.04
Iteration:   4480, Loss function: 5.099, Average Loss: 5.090, avg. samples / sec: 316.80
Iteration:   4500, Loss function: 4.935, Average Loss: 5.088, avg. samples / sec: 313.73
Iteration:   4520, Loss function: 4.705, Average Loss: 5.084, avg. samples / sec: 329.74
Iteration:   4540, Loss function: 4.942, Average Loss: 5.079, avg. samples / sec: 251.42
Iteration:   4560, Loss function: 4.826, Average Loss: 5.075, avg. samples / sec: 259.98
Iteration:   4580, Loss function: 4.648, Average Loss: 5.073, avg. samples / sec: 313.45
Iteration:   4600, Loss function: 4.901, Average Loss: 5.069, avg. samples / sec: 300.46
Iteration:   4620, Loss function: 4.755, Average Loss: 5.065, avg. samples / sec: 316.09
Iteration:   4640, Loss function: 4.759, Average Loss: 5.060, avg. samples / sec: 257.66
Iteration:   4660, Loss function: 4.676, Average Loss: 5.056, avg. samples / sec: 305.25
Iteration:   4680, Loss function: 5.371, Average Loss: 5.051, avg. samples / sec: 331.22
Iteration:   4700, Loss function: 4.633, Average Loss: 5.048, avg. samples / sec: 322.43
Iteration:   4720, Loss function: 4.703, Average Loss: 5.043, avg. samples / sec: 284.09
Iteration:   4740, Loss function: 4.798, Average Loss: 5.039, avg. samples / sec: 305.59
Iteration:   4760, Loss function: 4.601, Average Loss: 5.035, avg. samples / sec: 323.42
Iteration:   4780, Loss function: 4.870, Average Loss: 5.032, avg. samples / sec: 324.08
Iteration:   4800, Loss function: 4.999, Average Loss: 5.029, avg. samples / sec: 310.40
Iteration:   4820, Loss function: 4.662, Average Loss: 5.025, avg. samples / sec: 337.94
Iteration:   4840, Loss function: 5.085, Average Loss: 5.022, avg. samples / sec: 285.25
Iteration:   4860, Loss function: 4.736, Average Loss: 5.018, avg. samples / sec: 271.84
Iteration:   4880, Loss function: 5.067, Average Loss: 5.014, avg. samples / sec: 323.58
Iteration:   4900, Loss function: 4.722, Average Loss: 5.010, avg. samples / sec: 317.06
Iteration:   4920, Loss function: 4.814, Average Loss: 5.007, avg. samples / sec: 301.33
Iteration:   4940, Loss function: 4.683, Average Loss: 5.002, avg. samples / sec: 319.77
Iteration:   4960, Loss function: 4.761, Average Loss: 5.000, avg. samples / sec: 327.86
Iteration:   4980, Loss function: 4.697, Average Loss: 4.996, avg. samples / sec: 330.29
Iteration:   5000, Loss function: 4.939, Average Loss: 4.993, avg. samples / sec: 327.36
Iteration:   5020, Loss function: 5.282, Average Loss: 4.991, avg. samples / sec: 332.48
Iteration:   5040, Loss function: 4.714, Average Loss: 4.987, avg. samples / sec: 298.85
Iteration:   5060, Loss function: 4.705, Average Loss: 4.984, avg. samples / sec: 324.97
Iteration:   5080, Loss function: 4.519, Average Loss: 4.980, avg. samples / sec: 291.96
Iteration:   5100, Loss function: 4.755, Average Loss: 4.978, avg. samples / sec: 334.88
Iteration:   5120, Loss function: 4.628, Average Loss: 4.975, avg. samples / sec: 318.06
Iteration:   5140, Loss function: 4.782, Average Loss: 4.972, avg. samples / sec: 319.09
:::MLLOG {"namespace": "", "time_ms": 1639082747165, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 70.43 s
:::MLLOG {"namespace": "", "time_ms": 1639082817692, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639082817745, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082817745, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.70s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.07s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10486
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21550
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09198
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19462
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13634
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20163
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10486 AP goal: 0.10000
Iteration:   5160, Loss function: 4.737, Average Loss: 4.967, avg. samples / sec: 29.48
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10485950190358274, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823338, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639082823629, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639082824
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 08:47:04 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 08:09:35 PM'
START TIMING RUN WAS 2021-12-09 08:09:35 PM
ENDING TIMING RUN AT 2021-12-09 08:47:04 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 08:47:04 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
+ result=2249
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2249,nvidia,2021-12-09 08:09:35 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2249,nvidia,2021-12-09 08:09:35 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
