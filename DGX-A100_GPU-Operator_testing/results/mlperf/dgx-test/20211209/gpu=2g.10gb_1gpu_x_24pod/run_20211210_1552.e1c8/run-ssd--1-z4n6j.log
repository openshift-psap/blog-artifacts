+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-z4n6j.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-z4n6j.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-z4n6j.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288'
Found 1 MIG instances: MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150357
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-z4n6j to the sync file ...
run-ssd--1-z4n6j Found 7 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
Fri Dec 10 15:32:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364188, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364298, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1653292260, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1653292260
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150366146, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150366147, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150366154, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472015, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472015, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150473954, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473955, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474366, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474367, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474368, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.458, Average Loss: 0.022, avg. samples / sec: 1.06
Iteration:     20, Loss function: 21.126, Average Loss: 0.453, avg. samples / sec: 280.70
Iteration:     40, Loss function: 20.642, Average Loss: 0.855, avg. samples / sec: 268.62
Iteration:     60, Loss function: 20.375, Average Loss: 1.244, avg. samples / sec: 258.92
Iteration:     80, Loss function: 19.456, Average Loss: 1.613, avg. samples / sec: 248.68
Iteration:    100, Loss function: 13.590, Average Loss: 1.916, avg. samples / sec: 251.07
Iteration:    120, Loss function: 10.475, Average Loss: 2.108, avg. samples / sec: 283.22
Iteration:    140, Loss function: 9.487, Average Loss: 2.261, avg. samples / sec: 278.15
Iteration:    160, Loss function: 9.091, Average Loss: 2.399, avg. samples / sec: 295.27
Iteration:    180, Loss function: 8.922, Average Loss: 2.528, avg. samples / sec: 254.48
Iteration:    200, Loss function: 8.703, Average Loss: 2.653, avg. samples / sec: 288.87
Iteration:    220, Loss function: 8.575, Average Loss: 2.774, avg. samples / sec: 299.96
Iteration:    240, Loss function: 8.585, Average Loss: 2.891, avg. samples / sec: 304.19
Iteration:    260, Loss function: 8.877, Average Loss: 3.008, avg. samples / sec: 268.86
Iteration:    280, Loss function: 8.708, Average Loss: 3.128, avg. samples / sec: 299.22
Iteration:    300, Loss function: 8.196, Average Loss: 3.235, avg. samples / sec: 294.96
Iteration:    320, Loss function: 8.252, Average Loss: 3.336, avg. samples / sec: 304.62
Iteration:    340, Loss function: 8.324, Average Loss: 3.434, avg. samples / sec: 254.55
Iteration:    360, Loss function: 8.105, Average Loss: 3.528, avg. samples / sec: 323.85
Iteration:    380, Loss function: 7.913, Average Loss: 3.618, avg. samples / sec: 338.11
Iteration:    400, Loss function: 8.084, Average Loss: 3.703, avg. samples / sec: 312.73
Iteration:    420, Loss function: 7.511, Average Loss: 3.786, avg. samples / sec: 307.07
Iteration:    440, Loss function: 7.930, Average Loss: 3.866, avg. samples / sec: 279.90
Iteration:    460, Loss function: 7.801, Average Loss: 3.942, avg. samples / sec: 283.90
Iteration:    480, Loss function: 7.535, Average Loss: 4.017, avg. samples / sec: 286.04
Iteration:    500, Loss function: 7.507, Average Loss: 4.088, avg. samples / sec: 315.94
Iteration:    520, Loss function: 7.592, Average Loss: 4.157, avg. samples / sec: 295.41
Iteration:    540, Loss function: 7.146, Average Loss: 4.223, avg. samples / sec: 249.30
Iteration:    560, Loss function: 7.257, Average Loss: 4.286, avg. samples / sec: 257.71
Iteration:    580, Loss function: 7.167, Average Loss: 4.348, avg. samples / sec: 217.59
Iteration:    600, Loss function: 7.340, Average Loss: 4.407, avg. samples / sec: 221.79
Iteration:    620, Loss function: 6.972, Average Loss: 4.463, avg. samples / sec: 270.30
Iteration:    640, Loss function: 6.826, Average Loss: 4.517, avg. samples / sec: 274.97
Iteration:    660, Loss function: 7.205, Average Loss: 4.570, avg. samples / sec: 331.01
Iteration:    680, Loss function: 7.283, Average Loss: 4.622, avg. samples / sec: 306.75
Iteration:    700, Loss function: 6.837, Average Loss: 4.670, avg. samples / sec: 329.81
Iteration:    720, Loss function: 7.042, Average Loss: 4.720, avg. samples / sec: 293.57
Iteration:    740, Loss function: 7.042, Average Loss: 4.765, avg. samples / sec: 284.91
Iteration:    760, Loss function: 6.981, Average Loss: 4.809, avg. samples / sec: 315.54
Iteration:    780, Loss function: 6.867, Average Loss: 4.852, avg. samples / sec: 259.40
Iteration:    800, Loss function: 7.104, Average Loss: 4.892, avg. samples / sec: 306.80
Iteration:    820, Loss function: 7.029, Average Loss: 4.930, avg. samples / sec: 330.98
Iteration:    840, Loss function: 6.647, Average Loss: 4.967, avg. samples / sec: 330.59
Iteration:    860, Loss function: 6.867, Average Loss: 5.002, avg. samples / sec: 322.16
Iteration:    880, Loss function: 6.815, Average Loss: 5.035, avg. samples / sec: 314.42
Iteration:    900, Loss function: 6.764, Average Loss: 5.067, avg. samples / sec: 241.03
Iteration:    920, Loss function: 6.596, Average Loss: 5.096, avg. samples / sec: 295.06
Iteration:    940, Loss function: 6.663, Average Loss: 5.126, avg. samples / sec: 287.44
Iteration:    960, Loss function: 6.426, Average Loss: 5.155, avg. samples / sec: 333.84
Iteration:    980, Loss function: 6.579, Average Loss: 5.182, avg. samples / sec: 328.19
Iteration:   1000, Loss function: 6.595, Average Loss: 5.207, avg. samples / sec: 218.38
Iteration:   1020, Loss function: 6.232, Average Loss: 5.232, avg. samples / sec: 286.23
:::MLLOG {"namespace": "", "time_ms": 1639150886633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150886635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.535, Average Loss: 5.256, avg. samples / sec: 281.58
Iteration:   1060, Loss function: 6.425, Average Loss: 5.279, avg. samples / sec: 244.11
Iteration:   1080, Loss function: 6.290, Average Loss: 5.301, avg. samples / sec: 307.54
Iteration:   1100, Loss function: 6.180, Average Loss: 5.321, avg. samples / sec: 301.03
Iteration:   1120, Loss function: 6.189, Average Loss: 5.340, avg. samples / sec: 321.92
Iteration:   1140, Loss function: 6.439, Average Loss: 5.359, avg. samples / sec: 229.00
Iteration:   1160, Loss function: 6.000, Average Loss: 5.376, avg. samples / sec: 255.89
Iteration:   1180, Loss function: 6.177, Average Loss: 5.394, avg. samples / sec: 312.37
Iteration:   1200, Loss function: 6.194, Average Loss: 5.410, avg. samples / sec: 328.33
Iteration:   1220, Loss function: 6.043, Average Loss: 5.426, avg. samples / sec: 335.43
Iteration:   1240, Loss function: 6.080, Average Loss: 5.438, avg. samples / sec: 317.30
Iteration:   1260, Loss function: 6.089, Average Loss: 5.451, avg. samples / sec: 259.21
Iteration:   1280, Loss function: 5.827, Average Loss: 5.463, avg. samples / sec: 290.13
Iteration:   1300, Loss function: 6.160, Average Loss: 5.476, avg. samples / sec: 308.53
Iteration:   1320, Loss function: 6.116, Average Loss: 5.489, avg. samples / sec: 305.53
Iteration:   1340, Loss function: 5.777, Average Loss: 5.498, avg. samples / sec: 328.74
Iteration:   1360, Loss function: 5.887, Average Loss: 5.509, avg. samples / sec: 302.20
Iteration:   1380, Loss function: 6.283, Average Loss: 5.520, avg. samples / sec: 297.83
Iteration:   1400, Loss function: 6.119, Average Loss: 5.528, avg. samples / sec: 196.69
Iteration:   1420, Loss function: 5.903, Average Loss: 5.537, avg. samples / sec: 298.77
Iteration:   1440, Loss function: 6.353, Average Loss: 5.546, avg. samples / sec: 270.73
Iteration:   1460, Loss function: 6.073, Average Loss: 5.555, avg. samples / sec: 264.61
Iteration:   1480, Loss function: 5.885, Average Loss: 5.563, avg. samples / sec: 319.33
Iteration:   1500, Loss function: 6.139, Average Loss: 5.570, avg. samples / sec: 328.73
Iteration:   1520, Loss function: 6.036, Average Loss: 5.577, avg. samples / sec: 298.16
Iteration:   1540, Loss function: 6.100, Average Loss: 5.581, avg. samples / sec: 330.65
Iteration:   1560, Loss function: 5.504, Average Loss: 5.586, avg. samples / sec: 332.35
Iteration:   1580, Loss function: 5.708, Average Loss: 5.592, avg. samples / sec: 309.36
Iteration:   1600, Loss function: 6.164, Average Loss: 5.598, avg. samples / sec: 321.75
Iteration:   1620, Loss function: 5.733, Average Loss: 5.603, avg. samples / sec: 327.72
Iteration:   1640, Loss function: 5.971, Average Loss: 5.607, avg. samples / sec: 327.97
Iteration:   1660, Loss function: 6.051, Average Loss: 5.612, avg. samples / sec: 314.60
Iteration:   1680, Loss function: 5.688, Average Loss: 5.615, avg. samples / sec: 293.46
Iteration:   1700, Loss function: 5.214, Average Loss: 5.618, avg. samples / sec: 298.58
Iteration:   1720, Loss function: 5.651, Average Loss: 5.620, avg. samples / sec: 304.77
Iteration:   1740, Loss function: 5.765, Average Loss: 5.623, avg. samples / sec: 304.57
Iteration:   1760, Loss function: 5.599, Average Loss: 5.624, avg. samples / sec: 319.22
Iteration:   1780, Loss function: 5.772, Average Loss: 5.625, avg. samples / sec: 335.38
Iteration:   1800, Loss function: 5.736, Average Loss: 5.627, avg. samples / sec: 319.62
Iteration:   1820, Loss function: 5.987, Average Loss: 5.628, avg. samples / sec: 337.91
Iteration:   1840, Loss function: 5.875, Average Loss: 5.630, avg. samples / sec: 329.01
Iteration:   1860, Loss function: 5.589, Average Loss: 5.629, avg. samples / sec: 312.92
Iteration:   1880, Loss function: 6.049, Average Loss: 5.632, avg. samples / sec: 305.80
Iteration:   1900, Loss function: 5.871, Average Loss: 5.633, avg. samples / sec: 313.51
Iteration:   1920, Loss function: 5.637, Average Loss: 5.633, avg. samples / sec: 300.86
Iteration:   1940, Loss function: 5.767, Average Loss: 5.632, avg. samples / sec: 302.47
Iteration:   1960, Loss function: 5.557, Average Loss: 5.631, avg. samples / sec: 316.58
Iteration:   1980, Loss function: 5.694, Average Loss: 5.630, avg. samples / sec: 316.78
Iteration:   2000, Loss function: 5.667, Average Loss: 5.630, avg. samples / sec: 320.30
Iteration:   2020, Loss function: 5.579, Average Loss: 5.628, avg. samples / sec: 291.87
Iteration:   2040, Loss function: 5.557, Average Loss: 5.627, avg. samples / sec: 315.45
:::MLLOG {"namespace": "", "time_ms": 1639151275881, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151275883, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.689, Average Loss: 5.626, avg. samples / sec: 326.26
Iteration:   2080, Loss function: 5.192, Average Loss: 5.623, avg. samples / sec: 337.06
Iteration:   2100, Loss function: 5.560, Average Loss: 5.621, avg. samples / sec: 302.58
Iteration:   2120, Loss function: 5.384, Average Loss: 5.619, avg. samples / sec: 293.60
Iteration:   2140, Loss function: 5.340, Average Loss: 5.615, avg. samples / sec: 266.41
Iteration:   2160, Loss function: 5.386, Average Loss: 5.613, avg. samples / sec: 264.10
Iteration:   2180, Loss function: 5.266, Average Loss: 5.610, avg. samples / sec: 285.74
Iteration:   2200, Loss function: 5.430, Average Loss: 5.607, avg. samples / sec: 319.25
Iteration:   2220, Loss function: 5.613, Average Loss: 5.604, avg. samples / sec: 263.49
Iteration:   2240, Loss function: 5.335, Average Loss: 5.601, avg. samples / sec: 323.93
Iteration:   2260, Loss function: 5.448, Average Loss: 5.598, avg. samples / sec: 289.58
Iteration:   2280, Loss function: 5.440, Average Loss: 5.596, avg. samples / sec: 333.56
Iteration:   2300, Loss function: 5.117, Average Loss: 5.593, avg. samples / sec: 305.76
Iteration:   2320, Loss function: 5.302, Average Loss: 5.591, avg. samples / sec: 308.42
Iteration:   2340, Loss function: 5.442, Average Loss: 5.587, avg. samples / sec: 305.32
Iteration:   2360, Loss function: 5.299, Average Loss: 5.583, avg. samples / sec: 313.55
Iteration:   2380, Loss function: 5.500, Average Loss: 5.580, avg. samples / sec: 336.86
Iteration:   2400, Loss function: 5.500, Average Loss: 5.576, avg. samples / sec: 295.37
Iteration:   2420, Loss function: 5.490, Average Loss: 5.571, avg. samples / sec: 308.47
Iteration:   2440, Loss function: 5.587, Average Loss: 5.568, avg. samples / sec: 334.32
Iteration:   2460, Loss function: 5.224, Average Loss: 5.564, avg. samples / sec: 326.10
Iteration:   2480, Loss function: 5.337, Average Loss: 5.560, avg. samples / sec: 340.87
Iteration:   2500, Loss function: 5.424, Average Loss: 5.557, avg. samples / sec: 334.39
Iteration:   2520, Loss function: 5.444, Average Loss: 5.552, avg. samples / sec: 294.85
Iteration:   2540, Loss function: 5.486, Average Loss: 5.549, avg. samples / sec: 318.50
Iteration:   2560, Loss function: 5.470, Average Loss: 5.545, avg. samples / sec: 269.01
Iteration:   2580, Loss function: 5.344, Average Loss: 5.542, avg. samples / sec: 320.01
Iteration:   2600, Loss function: 5.550, Average Loss: 5.539, avg. samples / sec: 323.41
Iteration:   2620, Loss function: 5.429, Average Loss: 5.535, avg. samples / sec: 332.58
Iteration:   2640, Loss function: 5.229, Average Loss: 5.532, avg. samples / sec: 331.20
Iteration:   2660, Loss function: 5.110, Average Loss: 5.529, avg. samples / sec: 322.16
Iteration:   2680, Loss function: 5.046, Average Loss: 5.525, avg. samples / sec: 313.91
Iteration:   2700, Loss function: 5.278, Average Loss: 5.521, avg. samples / sec: 334.83
Iteration:   2720, Loss function: 5.333, Average Loss: 5.517, avg. samples / sec: 277.18
Iteration:   2740, Loss function: 4.816, Average Loss: 5.512, avg. samples / sec: 309.13
Iteration:   2760, Loss function: 4.870, Average Loss: 5.507, avg. samples / sec: 280.88
Iteration:   2780, Loss function: 5.570, Average Loss: 5.503, avg. samples / sec: 312.62
Iteration:   2800, Loss function: 5.259, Average Loss: 5.499, avg. samples / sec: 322.11
Iteration:   2820, Loss function: 5.510, Average Loss: 5.494, avg. samples / sec: 331.89
Iteration:   2840, Loss function: 5.141, Average Loss: 5.490, avg. samples / sec: 329.51
Iteration:   2860, Loss function: 5.035, Average Loss: 5.484, avg. samples / sec: 339.57
Iteration:   2880, Loss function: 5.291, Average Loss: 5.480, avg. samples / sec: 244.25
Iteration:   2900, Loss function: 5.115, Average Loss: 5.475, avg. samples / sec: 234.97
Iteration:   2920, Loss function: 5.260, Average Loss: 5.470, avg. samples / sec: 319.41
Iteration:   2940, Loss function: 4.974, Average Loss: 5.466, avg. samples / sec: 299.55
Iteration:   2960, Loss function: 5.417, Average Loss: 5.462, avg. samples / sec: 299.71
Iteration:   2980, Loss function: 5.187, Average Loss: 5.459, avg. samples / sec: 335.02
Iteration:   3000, Loss function: 5.249, Average Loss: 5.455, avg. samples / sec: 329.74
Iteration:   3020, Loss function: 5.264, Average Loss: 5.449, avg. samples / sec: 340.25
Iteration:   3040, Loss function: 5.360, Average Loss: 5.444, avg. samples / sec: 331.64
Iteration:   3060, Loss function: 5.085, Average Loss: 5.438, avg. samples / sec: 284.81
Iteration:   3080, Loss function: 5.070, Average Loss: 5.433, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639151657041, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151657042, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.283, Average Loss: 5.429, avg. samples / sec: 323.10
Iteration:   3120, Loss function: 5.095, Average Loss: 5.423, avg. samples / sec: 305.30
Iteration:   3140, Loss function: 4.970, Average Loss: 5.418, avg. samples / sec: 313.22
Iteration:   3160, Loss function: 5.355, Average Loss: 5.412, avg. samples / sec: 326.66
Iteration:   3180, Loss function: 5.057, Average Loss: 5.407, avg. samples / sec: 282.78
Iteration:   3200, Loss function: 5.207, Average Loss: 5.403, avg. samples / sec: 224.50
Iteration:   3220, Loss function: 5.106, Average Loss: 5.397, avg. samples / sec: 280.38
Iteration:   3240, Loss function: 5.180, Average Loss: 5.392, avg. samples / sec: 316.08
Iteration:   3260, Loss function: 5.169, Average Loss: 5.387, avg. samples / sec: 327.69
Iteration:   3280, Loss function: 4.879, Average Loss: 5.381, avg. samples / sec: 322.67
Iteration:   3300, Loss function: 4.865, Average Loss: 5.375, avg. samples / sec: 329.15
Iteration:   3320, Loss function: 5.043, Average Loss: 5.371, avg. samples / sec: 294.14
Iteration:   3340, Loss function: 5.089, Average Loss: 5.367, avg. samples / sec: 297.34
Iteration:   3360, Loss function: 5.087, Average Loss: 5.361, avg. samples / sec: 309.48
Iteration:   3380, Loss function: 5.242, Average Loss: 5.355, avg. samples / sec: 327.35
Iteration:   3400, Loss function: 4.932, Average Loss: 5.350, avg. samples / sec: 291.20
Iteration:   3420, Loss function: 5.179, Average Loss: 5.345, avg. samples / sec: 323.18
Iteration:   3440, Loss function: 4.749, Average Loss: 5.340, avg. samples / sec: 337.81
Iteration:   3460, Loss function: 5.269, Average Loss: 5.336, avg. samples / sec: 330.34
Iteration:   3480, Loss function: 5.081, Average Loss: 5.332, avg. samples / sec: 299.51
Iteration:   3500, Loss function: 5.337, Average Loss: 5.328, avg. samples / sec: 294.97
Iteration:   3520, Loss function: 4.954, Average Loss: 5.324, avg. samples / sec: 325.55
Iteration:   3540, Loss function: 5.055, Average Loss: 5.320, avg. samples / sec: 324.52
Iteration:   3560, Loss function: 4.895, Average Loss: 5.316, avg. samples / sec: 328.55
Iteration:   3580, Loss function: 5.169, Average Loss: 5.312, avg. samples / sec: 324.59
Iteration:   3600, Loss function: 5.300, Average Loss: 5.307, avg. samples / sec: 323.59
Iteration:   3620, Loss function: 4.903, Average Loss: 5.302, avg. samples / sec: 336.05
Iteration:   3640, Loss function: 4.696, Average Loss: 5.297, avg. samples / sec: 307.12
Iteration:   3660, Loss function: 5.007, Average Loss: 5.294, avg. samples / sec: 323.87
Iteration:   3680, Loss function: 5.218, Average Loss: 5.288, avg. samples / sec: 333.14
Iteration:   3700, Loss function: 5.015, Average Loss: 5.283, avg. samples / sec: 314.40
Iteration:   3720, Loss function: 4.825, Average Loss: 5.277, avg. samples / sec: 331.73
Iteration:   3740, Loss function: 5.177, Average Loss: 5.272, avg. samples / sec: 326.45
Iteration:   3760, Loss function: 5.041, Average Loss: 5.268, avg. samples / sec: 295.61
Iteration:   3780, Loss function: 4.909, Average Loss: 5.264, avg. samples / sec: 289.71
Iteration:   3800, Loss function: 4.983, Average Loss: 5.259, avg. samples / sec: 310.40
Iteration:   3820, Loss function: 5.123, Average Loss: 5.253, avg. samples / sec: 298.83
Iteration:   3840, Loss function: 4.775, Average Loss: 5.249, avg. samples / sec: 293.44
Iteration:   3860, Loss function: 4.975, Average Loss: 5.245, avg. samples / sec: 284.23
Iteration:   3880, Loss function: 5.087, Average Loss: 5.239, avg. samples / sec: 329.16
Iteration:   3900, Loss function: 5.159, Average Loss: 5.235, avg. samples / sec: 334.49
Iteration:   3920, Loss function: 5.054, Average Loss: 5.229, avg. samples / sec: 279.94
Iteration:   3940, Loss function: 4.913, Average Loss: 5.223, avg. samples / sec: 305.19
Iteration:   3960, Loss function: 4.704, Average Loss: 5.219, avg. samples / sec: 274.27
Iteration:   3980, Loss function: 4.844, Average Loss: 5.214, avg. samples / sec: 253.10
Iteration:   4000, Loss function: 5.078, Average Loss: 5.210, avg. samples / sec: 243.54
Iteration:   4020, Loss function: 5.081, Average Loss: 5.205, avg. samples / sec: 303.97
Iteration:   4040, Loss function: 5.096, Average Loss: 5.201, avg. samples / sec: 289.70
Iteration:   4060, Loss function: 5.043, Average Loss: 5.196, avg. samples / sec: 314.06
Iteration:   4080, Loss function: 4.861, Average Loss: 5.191, avg. samples / sec: 257.33
Iteration:   4100, Loss function: 5.151, Average Loss: 5.188, avg. samples / sec: 315.45
:::MLLOG {"namespace": "", "time_ms": 1639152042910, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152042912, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.134, Average Loss: 5.185, avg. samples / sec: 310.44
Iteration:   4140, Loss function: 4.913, Average Loss: 5.179, avg. samples / sec: 317.21
Iteration:   4160, Loss function: 4.963, Average Loss: 5.173, avg. samples / sec: 323.40
Iteration:   4180, Loss function: 5.010, Average Loss: 5.167, avg. samples / sec: 238.43
Iteration:   4200, Loss function: 4.827, Average Loss: 5.163, avg. samples / sec: 332.04
Iteration:   4220, Loss function: 4.728, Average Loss: 5.158, avg. samples / sec: 312.08
Iteration:   4240, Loss function: 4.962, Average Loss: 5.153, avg. samples / sec: 325.40
Iteration:   4260, Loss function: 4.939, Average Loss: 5.149, avg. samples / sec: 310.63
Iteration:   4280, Loss function: 5.048, Average Loss: 5.143, avg. samples / sec: 286.72
Iteration:   4300, Loss function: 4.788, Average Loss: 5.137, avg. samples / sec: 260.56
Iteration:   4320, Loss function: 4.781, Average Loss: 5.132, avg. samples / sec: 299.72
Iteration:   4340, Loss function: 4.818, Average Loss: 5.127, avg. samples / sec: 254.14
Iteration:   4360, Loss function: 4.970, Average Loss: 5.122, avg. samples / sec: 275.87
Iteration:   4380, Loss function: 5.148, Average Loss: 5.118, avg. samples / sec: 309.06
Iteration:   4400, Loss function: 4.683, Average Loss: 5.113, avg. samples / sec: 280.15
Iteration:   4420, Loss function: 5.004, Average Loss: 5.108, avg. samples / sec: 260.34
Iteration:   4440, Loss function: 4.886, Average Loss: 5.103, avg. samples / sec: 312.97
Iteration:   4460, Loss function: 5.102, Average Loss: 5.100, avg. samples / sec: 246.21
Iteration:   4480, Loss function: 5.059, Average Loss: 5.098, avg. samples / sec: 243.49
Iteration:   4500, Loss function: 4.984, Average Loss: 5.095, avg. samples / sec: 281.54
Iteration:   4520, Loss function: 4.751, Average Loss: 5.091, avg. samples / sec: 285.67
Iteration:   4540, Loss function: 5.152, Average Loss: 5.087, avg. samples / sec: 325.38
Iteration:   4560, Loss function: 4.556, Average Loss: 5.082, avg. samples / sec: 325.64
Iteration:   4580, Loss function: 4.685, Average Loss: 5.080, avg. samples / sec: 319.05
Iteration:   4600, Loss function: 4.718, Average Loss: 5.076, avg. samples / sec: 302.51
Iteration:   4620, Loss function: 4.813, Average Loss: 5.072, avg. samples / sec: 332.44
Iteration:   4640, Loss function: 4.590, Average Loss: 5.067, avg. samples / sec: 335.15
Iteration:   4660, Loss function: 4.583, Average Loss: 5.063, avg. samples / sec: 328.93
Iteration:   4680, Loss function: 5.285, Average Loss: 5.058, avg. samples / sec: 328.49
Iteration:   4700, Loss function: 4.680, Average Loss: 5.054, avg. samples / sec: 285.01
Iteration:   4720, Loss function: 4.733, Average Loss: 5.049, avg. samples / sec: 249.23
Iteration:   4740, Loss function: 4.810, Average Loss: 5.045, avg. samples / sec: 297.77
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 266.66
Iteration:   4780, Loss function: 5.161, Average Loss: 5.037, avg. samples / sec: 179.85
Iteration:   4800, Loss function: 4.950, Average Loss: 5.034, avg. samples / sec: 298.92
Iteration:   4820, Loss function: 4.794, Average Loss: 5.030, avg. samples / sec: 338.95
Iteration:   4840, Loss function: 5.200, Average Loss: 5.027, avg. samples / sec: 333.23
Iteration:   4860, Loss function: 4.932, Average Loss: 5.023, avg. samples / sec: 333.08
Iteration:   4880, Loss function: 5.356, Average Loss: 5.019, avg. samples / sec: 304.09
Iteration:   4900, Loss function: 4.617, Average Loss: 5.015, avg. samples / sec: 302.29
Iteration:   4920, Loss function: 4.715, Average Loss: 5.011, avg. samples / sec: 326.54
Iteration:   4940, Loss function: 4.794, Average Loss: 5.007, avg. samples / sec: 335.08
Iteration:   4960, Loss function: 4.665, Average Loss: 5.003, avg. samples / sec: 313.37
Iteration:   4980, Loss function: 4.732, Average Loss: 5.000, avg. samples / sec: 327.70
Iteration:   5000, Loss function: 4.927, Average Loss: 4.996, avg. samples / sec: 279.98
Iteration:   5020, Loss function: 5.101, Average Loss: 4.993, avg. samples / sec: 278.75
Iteration:   5040, Loss function: 4.912, Average Loss: 4.991, avg. samples / sec: 272.13
Iteration:   5060, Loss function: 4.843, Average Loss: 4.987, avg. samples / sec: 322.57
Iteration:   5080, Loss function: 4.522, Average Loss: 4.984, avg. samples / sec: 243.61
Iteration:   5100, Loss function: 4.714, Average Loss: 4.980, avg. samples / sec: 311.12
Iteration:   5120, Loss function: 4.660, Average Loss: 4.976, avg. samples / sec: 321.44
Iteration:   5140, Loss function: 4.906, Average Loss: 4.973, avg. samples / sec: 335.33
:::MLLOG {"namespace": "", "time_ms": 1639152441916, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 75.37 s
:::MLLOG {"namespace": "", "time_ms": 1639152517485, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152517537, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152517545, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.875, Average Loss: 4.968, avg. samples / sec: 27.39
DONE (t=8.74s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10835
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21889
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19369
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20469
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21716
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21716
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10835 AP goal: 0.10000
Iteration:   5180, Loss function: 4.696, Average Loss: 4.963, avg. samples / sec: 287.40
:::MLLOG {"namespace": "", "time_ms": 1639152532055, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532056, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10835417161428396, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532057, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532569, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:08:59 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:08:59 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364188, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364298, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1653292260, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1653292260
:::MLLOG {"namespace": "", "time_ms": 1639150366146, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150366147, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150366153, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150366154, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472015, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472015, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150473954, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473955, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474366, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474367, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474368, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.458, Average Loss: 0.022, avg. samples / sec: 1.06
Iteration:     20, Loss function: 21.126, Average Loss: 0.453, avg. samples / sec: 280.70
Iteration:     40, Loss function: 20.642, Average Loss: 0.855, avg. samples / sec: 268.62
Iteration:     60, Loss function: 20.375, Average Loss: 1.244, avg. samples / sec: 258.92
Iteration:     80, Loss function: 19.456, Average Loss: 1.613, avg. samples / sec: 248.68
Iteration:    100, Loss function: 13.590, Average Loss: 1.916, avg. samples / sec: 251.07
Iteration:    120, Loss function: 10.475, Average Loss: 2.108, avg. samples / sec: 283.22
Iteration:    140, Loss function: 9.487, Average Loss: 2.261, avg. samples / sec: 278.15
Iteration:    160, Loss function: 9.091, Average Loss: 2.399, avg. samples / sec: 295.27
Iteration:    180, Loss function: 8.922, Average Loss: 2.528, avg. samples / sec: 254.48
Iteration:    200, Loss function: 8.703, Average Loss: 2.653, avg. samples / sec: 288.87
Iteration:    220, Loss function: 8.575, Average Loss: 2.774, avg. samples / sec: 299.96
Iteration:    240, Loss function: 8.585, Average Loss: 2.891, avg. samples / sec: 304.19
Iteration:    260, Loss function: 8.877, Average Loss: 3.008, avg. samples / sec: 268.86
Iteration:    280, Loss function: 8.708, Average Loss: 3.128, avg. samples / sec: 299.22
Iteration:    300, Loss function: 8.196, Average Loss: 3.235, avg. samples / sec: 294.96
Iteration:    320, Loss function: 8.252, Average Loss: 3.336, avg. samples / sec: 304.62
Iteration:    340, Loss function: 8.324, Average Loss: 3.434, avg. samples / sec: 254.55
Iteration:    360, Loss function: 8.105, Average Loss: 3.528, avg. samples / sec: 323.85
Iteration:    380, Loss function: 7.913, Average Loss: 3.618, avg. samples / sec: 338.11
Iteration:    400, Loss function: 8.084, Average Loss: 3.703, avg. samples / sec: 312.73
Iteration:    420, Loss function: 7.511, Average Loss: 3.786, avg. samples / sec: 307.07
Iteration:    440, Loss function: 7.930, Average Loss: 3.866, avg. samples / sec: 279.90
Iteration:    460, Loss function: 7.801, Average Loss: 3.942, avg. samples / sec: 283.90
Iteration:    480, Loss function: 7.535, Average Loss: 4.017, avg. samples / sec: 286.04
Iteration:    500, Loss function: 7.507, Average Loss: 4.088, avg. samples / sec: 315.94
Iteration:    520, Loss function: 7.592, Average Loss: 4.157, avg. samples / sec: 295.41
Iteration:    540, Loss function: 7.146, Average Loss: 4.223, avg. samples / sec: 249.30
Iteration:    560, Loss function: 7.257, Average Loss: 4.286, avg. samples / sec: 257.71
Iteration:    580, Loss function: 7.167, Average Loss: 4.348, avg. samples / sec: 217.59
Iteration:    600, Loss function: 7.340, Average Loss: 4.407, avg. samples / sec: 221.79
Iteration:    620, Loss function: 6.972, Average Loss: 4.463, avg. samples / sec: 270.30
Iteration:    640, Loss function: 6.826, Average Loss: 4.517, avg. samples / sec: 274.97
Iteration:    660, Loss function: 7.205, Average Loss: 4.570, avg. samples / sec: 331.01
Iteration:    680, Loss function: 7.283, Average Loss: 4.622, avg. samples / sec: 306.75
Iteration:    700, Loss function: 6.837, Average Loss: 4.670, avg. samples / sec: 329.81
Iteration:    720, Loss function: 7.042, Average Loss: 4.720, avg. samples / sec: 293.57
Iteration:    740, Loss function: 7.042, Average Loss: 4.765, avg. samples / sec: 284.91
Iteration:    760, Loss function: 6.981, Average Loss: 4.809, avg. samples / sec: 315.54
Iteration:    780, Loss function: 6.867, Average Loss: 4.852, avg. samples / sec: 259.40
Iteration:    800, Loss function: 7.104, Average Loss: 4.892, avg. samples / sec: 306.80
Iteration:    820, Loss function: 7.029, Average Loss: 4.930, avg. samples / sec: 330.98
Iteration:    840, Loss function: 6.647, Average Loss: 4.967, avg. samples / sec: 330.59
Iteration:    860, Loss function: 6.867, Average Loss: 5.002, avg. samples / sec: 322.16
Iteration:    880, Loss function: 6.815, Average Loss: 5.035, avg. samples / sec: 314.42
Iteration:    900, Loss function: 6.764, Average Loss: 5.067, avg. samples / sec: 241.03
Iteration:    920, Loss function: 6.596, Average Loss: 5.096, avg. samples / sec: 295.06
Iteration:    940, Loss function: 6.663, Average Loss: 5.126, avg. samples / sec: 287.44
Iteration:    960, Loss function: 6.426, Average Loss: 5.155, avg. samples / sec: 333.84
Iteration:    980, Loss function: 6.579, Average Loss: 5.182, avg. samples / sec: 328.19
Iteration:   1000, Loss function: 6.595, Average Loss: 5.207, avg. samples / sec: 218.38
Iteration:   1020, Loss function: 6.232, Average Loss: 5.232, avg. samples / sec: 286.23
:::MLLOG {"namespace": "", "time_ms": 1639150886633, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150886635, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.535, Average Loss: 5.256, avg. samples / sec: 281.58
Iteration:   1060, Loss function: 6.425, Average Loss: 5.279, avg. samples / sec: 244.11
Iteration:   1080, Loss function: 6.290, Average Loss: 5.301, avg. samples / sec: 307.54
Iteration:   1100, Loss function: 6.180, Average Loss: 5.321, avg. samples / sec: 301.03
Iteration:   1120, Loss function: 6.189, Average Loss: 5.340, avg. samples / sec: 321.92
Iteration:   1140, Loss function: 6.439, Average Loss: 5.359, avg. samples / sec: 229.00
Iteration:   1160, Loss function: 6.000, Average Loss: 5.376, avg. samples / sec: 255.89
Iteration:   1180, Loss function: 6.177, Average Loss: 5.394, avg. samples / sec: 312.37
Iteration:   1200, Loss function: 6.194, Average Loss: 5.410, avg. samples / sec: 328.33
Iteration:   1220, Loss function: 6.043, Average Loss: 5.426, avg. samples / sec: 335.43
Iteration:   1240, Loss function: 6.080, Average Loss: 5.438, avg. samples / sec: 317.30
Iteration:   1260, Loss function: 6.089, Average Loss: 5.451, avg. samples / sec: 259.21
Iteration:   1280, Loss function: 5.827, Average Loss: 5.463, avg. samples / sec: 290.13
Iteration:   1300, Loss function: 6.160, Average Loss: 5.476, avg. samples / sec: 308.53
Iteration:   1320, Loss function: 6.116, Average Loss: 5.489, avg. samples / sec: 305.53
Iteration:   1340, Loss function: 5.777, Average Loss: 5.498, avg. samples / sec: 328.74
Iteration:   1360, Loss function: 5.887, Average Loss: 5.509, avg. samples / sec: 302.20
Iteration:   1380, Loss function: 6.283, Average Loss: 5.520, avg. samples / sec: 297.83
Iteration:   1400, Loss function: 6.119, Average Loss: 5.528, avg. samples / sec: 196.69
Iteration:   1420, Loss function: 5.903, Average Loss: 5.537, avg. samples / sec: 298.77
Iteration:   1440, Loss function: 6.353, Average Loss: 5.546, avg. samples / sec: 270.73
Iteration:   1460, Loss function: 6.073, Average Loss: 5.555, avg. samples / sec: 264.61
Iteration:   1480, Loss function: 5.885, Average Loss: 5.563, avg. samples / sec: 319.33
Iteration:   1500, Loss function: 6.139, Average Loss: 5.570, avg. samples / sec: 328.73
Iteration:   1520, Loss function: 6.036, Average Loss: 5.577, avg. samples / sec: 298.16
Iteration:   1540, Loss function: 6.100, Average Loss: 5.581, avg. samples / sec: 330.65
Iteration:   1560, Loss function: 5.504, Average Loss: 5.586, avg. samples / sec: 332.35
Iteration:   1580, Loss function: 5.708, Average Loss: 5.592, avg. samples / sec: 309.36
Iteration:   1600, Loss function: 6.164, Average Loss: 5.598, avg. samples / sec: 321.75
Iteration:   1620, Loss function: 5.733, Average Loss: 5.603, avg. samples / sec: 327.72
Iteration:   1640, Loss function: 5.971, Average Loss: 5.607, avg. samples / sec: 327.97
Iteration:   1660, Loss function: 6.051, Average Loss: 5.612, avg. samples / sec: 314.60
Iteration:   1680, Loss function: 5.688, Average Loss: 5.615, avg. samples / sec: 293.46
Iteration:   1700, Loss function: 5.214, Average Loss: 5.618, avg. samples / sec: 298.58
Iteration:   1720, Loss function: 5.651, Average Loss: 5.620, avg. samples / sec: 304.77
Iteration:   1740, Loss function: 5.765, Average Loss: 5.623, avg. samples / sec: 304.57
Iteration:   1760, Loss function: 5.599, Average Loss: 5.624, avg. samples / sec: 319.22
Iteration:   1780, Loss function: 5.772, Average Loss: 5.625, avg. samples / sec: 335.38
Iteration:   1800, Loss function: 5.736, Average Loss: 5.627, avg. samples / sec: 319.62
Iteration:   1820, Loss function: 5.987, Average Loss: 5.628, avg. samples / sec: 337.91
Iteration:   1840, Loss function: 5.875, Average Loss: 5.630, avg. samples / sec: 329.01
Iteration:   1860, Loss function: 5.589, Average Loss: 5.629, avg. samples / sec: 312.92
Iteration:   1880, Loss function: 6.049, Average Loss: 5.632, avg. samples / sec: 305.80
Iteration:   1900, Loss function: 5.871, Average Loss: 5.633, avg. samples / sec: 313.51
Iteration:   1920, Loss function: 5.637, Average Loss: 5.633, avg. samples / sec: 300.86
Iteration:   1940, Loss function: 5.767, Average Loss: 5.632, avg. samples / sec: 302.47
Iteration:   1960, Loss function: 5.557, Average Loss: 5.631, avg. samples / sec: 316.58
Iteration:   1980, Loss function: 5.694, Average Loss: 5.630, avg. samples / sec: 316.78
Iteration:   2000, Loss function: 5.667, Average Loss: 5.630, avg. samples / sec: 320.30
Iteration:   2020, Loss function: 5.579, Average Loss: 5.628, avg. samples / sec: 291.87
Iteration:   2040, Loss function: 5.557, Average Loss: 5.627, avg. samples / sec: 315.45
:::MLLOG {"namespace": "", "time_ms": 1639151275881, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151275883, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.689, Average Loss: 5.626, avg. samples / sec: 326.26
Iteration:   2080, Loss function: 5.192, Average Loss: 5.623, avg. samples / sec: 337.06
Iteration:   2100, Loss function: 5.560, Average Loss: 5.621, avg. samples / sec: 302.58
Iteration:   2120, Loss function: 5.384, Average Loss: 5.619, avg. samples / sec: 293.60
Iteration:   2140, Loss function: 5.340, Average Loss: 5.615, avg. samples / sec: 266.41
Iteration:   2160, Loss function: 5.386, Average Loss: 5.613, avg. samples / sec: 264.10
Iteration:   2180, Loss function: 5.266, Average Loss: 5.610, avg. samples / sec: 285.74
Iteration:   2200, Loss function: 5.430, Average Loss: 5.607, avg. samples / sec: 319.25
Iteration:   2220, Loss function: 5.613, Average Loss: 5.604, avg. samples / sec: 263.49
Iteration:   2240, Loss function: 5.335, Average Loss: 5.601, avg. samples / sec: 323.93
Iteration:   2260, Loss function: 5.448, Average Loss: 5.598, avg. samples / sec: 289.58
Iteration:   2280, Loss function: 5.440, Average Loss: 5.596, avg. samples / sec: 333.56
Iteration:   2300, Loss function: 5.117, Average Loss: 5.593, avg. samples / sec: 305.76
Iteration:   2320, Loss function: 5.302, Average Loss: 5.591, avg. samples / sec: 308.42
Iteration:   2340, Loss function: 5.442, Average Loss: 5.587, avg. samples / sec: 305.32
Iteration:   2360, Loss function: 5.299, Average Loss: 5.583, avg. samples / sec: 313.55
Iteration:   2380, Loss function: 5.500, Average Loss: 5.580, avg. samples / sec: 336.86
Iteration:   2400, Loss function: 5.500, Average Loss: 5.576, avg. samples / sec: 295.37
Iteration:   2420, Loss function: 5.490, Average Loss: 5.571, avg. samples / sec: 308.47
Iteration:   2440, Loss function: 5.587, Average Loss: 5.568, avg. samples / sec: 334.32
Iteration:   2460, Loss function: 5.224, Average Loss: 5.564, avg. samples / sec: 326.10
Iteration:   2480, Loss function: 5.337, Average Loss: 5.560, avg. samples / sec: 340.87
Iteration:   2500, Loss function: 5.424, Average Loss: 5.557, avg. samples / sec: 334.39
Iteration:   2520, Loss function: 5.444, Average Loss: 5.552, avg. samples / sec: 294.85
Iteration:   2540, Loss function: 5.486, Average Loss: 5.549, avg. samples / sec: 318.50
Iteration:   2560, Loss function: 5.470, Average Loss: 5.545, avg. samples / sec: 269.01
Iteration:   2580, Loss function: 5.344, Average Loss: 5.542, avg. samples / sec: 320.01
Iteration:   2600, Loss function: 5.550, Average Loss: 5.539, avg. samples / sec: 323.41
Iteration:   2620, Loss function: 5.429, Average Loss: 5.535, avg. samples / sec: 332.58
Iteration:   2640, Loss function: 5.229, Average Loss: 5.532, avg. samples / sec: 331.20
Iteration:   2660, Loss function: 5.110, Average Loss: 5.529, avg. samples / sec: 322.16
Iteration:   2680, Loss function: 5.046, Average Loss: 5.525, avg. samples / sec: 313.91
Iteration:   2700, Loss function: 5.278, Average Loss: 5.521, avg. samples / sec: 334.83
Iteration:   2720, Loss function: 5.333, Average Loss: 5.517, avg. samples / sec: 277.18
Iteration:   2740, Loss function: 4.816, Average Loss: 5.512, avg. samples / sec: 309.13
Iteration:   2760, Loss function: 4.870, Average Loss: 5.507, avg. samples / sec: 280.88
Iteration:   2780, Loss function: 5.570, Average Loss: 5.503, avg. samples / sec: 312.62
Iteration:   2800, Loss function: 5.259, Average Loss: 5.499, avg. samples / sec: 322.11
Iteration:   2820, Loss function: 5.510, Average Loss: 5.494, avg. samples / sec: 331.89
Iteration:   2840, Loss function: 5.141, Average Loss: 5.490, avg. samples / sec: 329.51
Iteration:   2860, Loss function: 5.035, Average Loss: 5.484, avg. samples / sec: 339.57
Iteration:   2880, Loss function: 5.291, Average Loss: 5.480, avg. samples / sec: 244.25
Iteration:   2900, Loss function: 5.115, Average Loss: 5.475, avg. samples / sec: 234.97
Iteration:   2920, Loss function: 5.260, Average Loss: 5.470, avg. samples / sec: 319.41
Iteration:   2940, Loss function: 4.974, Average Loss: 5.466, avg. samples / sec: 299.55
Iteration:   2960, Loss function: 5.417, Average Loss: 5.462, avg. samples / sec: 299.71
Iteration:   2980, Loss function: 5.187, Average Loss: 5.459, avg. samples / sec: 335.02
Iteration:   3000, Loss function: 5.249, Average Loss: 5.455, avg. samples / sec: 329.74
Iteration:   3020, Loss function: 5.264, Average Loss: 5.449, avg. samples / sec: 340.25
Iteration:   3040, Loss function: 5.360, Average Loss: 5.444, avg. samples / sec: 331.64
Iteration:   3060, Loss function: 5.085, Average Loss: 5.438, avg. samples / sec: 284.81
Iteration:   3080, Loss function: 5.070, Average Loss: 5.433, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639151657041, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151657042, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.283, Average Loss: 5.429, avg. samples / sec: 323.10
Iteration:   3120, Loss function: 5.095, Average Loss: 5.423, avg. samples / sec: 305.30
Iteration:   3140, Loss function: 4.970, Average Loss: 5.418, avg. samples / sec: 313.22
Iteration:   3160, Loss function: 5.355, Average Loss: 5.412, avg. samples / sec: 326.66
Iteration:   3180, Loss function: 5.057, Average Loss: 5.407, avg. samples / sec: 282.78
Iteration:   3200, Loss function: 5.207, Average Loss: 5.403, avg. samples / sec: 224.50
Iteration:   3220, Loss function: 5.106, Average Loss: 5.397, avg. samples / sec: 280.38
Iteration:   3240, Loss function: 5.180, Average Loss: 5.392, avg. samples / sec: 316.08
Iteration:   3260, Loss function: 5.169, Average Loss: 5.387, avg. samples / sec: 327.69
Iteration:   3280, Loss function: 4.879, Average Loss: 5.381, avg. samples / sec: 322.67
Iteration:   3300, Loss function: 4.865, Average Loss: 5.375, avg. samples / sec: 329.15
Iteration:   3320, Loss function: 5.043, Average Loss: 5.371, avg. samples / sec: 294.14
Iteration:   3340, Loss function: 5.089, Average Loss: 5.367, avg. samples / sec: 297.34
Iteration:   3360, Loss function: 5.087, Average Loss: 5.361, avg. samples / sec: 309.48
Iteration:   3380, Loss function: 5.242, Average Loss: 5.355, avg. samples / sec: 327.35
Iteration:   3400, Loss function: 4.932, Average Loss: 5.350, avg. samples / sec: 291.20
Iteration:   3420, Loss function: 5.179, Average Loss: 5.345, avg. samples / sec: 323.18
Iteration:   3440, Loss function: 4.749, Average Loss: 5.340, avg. samples / sec: 337.81
Iteration:   3460, Loss function: 5.269, Average Loss: 5.336, avg. samples / sec: 330.34
Iteration:   3480, Loss function: 5.081, Average Loss: 5.332, avg. samples / sec: 299.51
Iteration:   3500, Loss function: 5.337, Average Loss: 5.328, avg. samples / sec: 294.97
Iteration:   3520, Loss function: 4.954, Average Loss: 5.324, avg. samples / sec: 325.55
Iteration:   3540, Loss function: 5.055, Average Loss: 5.320, avg. samples / sec: 324.52
Iteration:   3560, Loss function: 4.895, Average Loss: 5.316, avg. samples / sec: 328.55
Iteration:   3580, Loss function: 5.169, Average Loss: 5.312, avg. samples / sec: 324.59
Iteration:   3600, Loss function: 5.300, Average Loss: 5.307, avg. samples / sec: 323.59
Iteration:   3620, Loss function: 4.903, Average Loss: 5.302, avg. samples / sec: 336.05
Iteration:   3640, Loss function: 4.696, Average Loss: 5.297, avg. samples / sec: 307.12
Iteration:   3660, Loss function: 5.007, Average Loss: 5.294, avg. samples / sec: 323.87
Iteration:   3680, Loss function: 5.218, Average Loss: 5.288, avg. samples / sec: 333.14
Iteration:   3700, Loss function: 5.015, Average Loss: 5.283, avg. samples / sec: 314.40
Iteration:   3720, Loss function: 4.825, Average Loss: 5.277, avg. samples / sec: 331.73
Iteration:   3740, Loss function: 5.177, Average Loss: 5.272, avg. samples / sec: 326.45
Iteration:   3760, Loss function: 5.041, Average Loss: 5.268, avg. samples / sec: 295.61
Iteration:   3780, Loss function: 4.909, Average Loss: 5.264, avg. samples / sec: 289.71
Iteration:   3800, Loss function: 4.983, Average Loss: 5.259, avg. samples / sec: 310.40
Iteration:   3820, Loss function: 5.123, Average Loss: 5.253, avg. samples / sec: 298.83
Iteration:   3840, Loss function: 4.775, Average Loss: 5.249, avg. samples / sec: 293.44
Iteration:   3860, Loss function: 4.975, Average Loss: 5.245, avg. samples / sec: 284.23
Iteration:   3880, Loss function: 5.087, Average Loss: 5.239, avg. samples / sec: 329.16
Iteration:   3900, Loss function: 5.159, Average Loss: 5.235, avg. samples / sec: 334.49
Iteration:   3920, Loss function: 5.054, Average Loss: 5.229, avg. samples / sec: 279.94
Iteration:   3940, Loss function: 4.913, Average Loss: 5.223, avg. samples / sec: 305.19
Iteration:   3960, Loss function: 4.704, Average Loss: 5.219, avg. samples / sec: 274.27
Iteration:   3980, Loss function: 4.844, Average Loss: 5.214, avg. samples / sec: 253.10
Iteration:   4000, Loss function: 5.078, Average Loss: 5.210, avg. samples / sec: 243.54
Iteration:   4020, Loss function: 5.081, Average Loss: 5.205, avg. samples / sec: 303.97
Iteration:   4040, Loss function: 5.096, Average Loss: 5.201, avg. samples / sec: 289.70
Iteration:   4060, Loss function: 5.043, Average Loss: 5.196, avg. samples / sec: 314.06
Iteration:   4080, Loss function: 4.861, Average Loss: 5.191, avg. samples / sec: 257.33
Iteration:   4100, Loss function: 5.151, Average Loss: 5.188, avg. samples / sec: 315.45
:::MLLOG {"namespace": "", "time_ms": 1639152042910, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152042912, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.134, Average Loss: 5.185, avg. samples / sec: 310.44
Iteration:   4140, Loss function: 4.913, Average Loss: 5.179, avg. samples / sec: 317.21
Iteration:   4160, Loss function: 4.963, Average Loss: 5.173, avg. samples / sec: 323.40
Iteration:   4180, Loss function: 5.010, Average Loss: 5.167, avg. samples / sec: 238.43
Iteration:   4200, Loss function: 4.827, Average Loss: 5.163, avg. samples / sec: 332.04
Iteration:   4220, Loss function: 4.728, Average Loss: 5.158, avg. samples / sec: 312.08
Iteration:   4240, Loss function: 4.962, Average Loss: 5.153, avg. samples / sec: 325.40
Iteration:   4260, Loss function: 4.939, Average Loss: 5.149, avg. samples / sec: 310.63
Iteration:   4280, Loss function: 5.048, Average Loss: 5.143, avg. samples / sec: 286.72
Iteration:   4300, Loss function: 4.788, Average Loss: 5.137, avg. samples / sec: 260.56
Iteration:   4320, Loss function: 4.781, Average Loss: 5.132, avg. samples / sec: 299.72
Iteration:   4340, Loss function: 4.818, Average Loss: 5.127, avg. samples / sec: 254.14
Iteration:   4360, Loss function: 4.970, Average Loss: 5.122, avg. samples / sec: 275.87
Iteration:   4380, Loss function: 5.148, Average Loss: 5.118, avg. samples / sec: 309.06
Iteration:   4400, Loss function: 4.683, Average Loss: 5.113, avg. samples / sec: 280.15
Iteration:   4420, Loss function: 5.004, Average Loss: 5.108, avg. samples / sec: 260.34
Iteration:   4440, Loss function: 4.886, Average Loss: 5.103, avg. samples / sec: 312.97
Iteration:   4460, Loss function: 5.102, Average Loss: 5.100, avg. samples / sec: 246.21
Iteration:   4480, Loss function: 5.059, Average Loss: 5.098, avg. samples / sec: 243.49
Iteration:   4500, Loss function: 4.984, Average Loss: 5.095, avg. samples / sec: 281.54
Iteration:   4520, Loss function: 4.751, Average Loss: 5.091, avg. samples / sec: 285.67
Iteration:   4540, Loss function: 5.152, Average Loss: 5.087, avg. samples / sec: 325.38
Iteration:   4560, Loss function: 4.556, Average Loss: 5.082, avg. samples / sec: 325.64
Iteration:   4580, Loss function: 4.685, Average Loss: 5.080, avg. samples / sec: 319.05
Iteration:   4600, Loss function: 4.718, Average Loss: 5.076, avg. samples / sec: 302.51
Iteration:   4620, Loss function: 4.813, Average Loss: 5.072, avg. samples / sec: 332.44
Iteration:   4640, Loss function: 4.590, Average Loss: 5.067, avg. samples / sec: 335.15
Iteration:   4660, Loss function: 4.583, Average Loss: 5.063, avg. samples / sec: 328.93
Iteration:   4680, Loss function: 5.285, Average Loss: 5.058, avg. samples / sec: 328.49
Iteration:   4700, Loss function: 4.680, Average Loss: 5.054, avg. samples / sec: 285.01
Iteration:   4720, Loss function: 4.733, Average Loss: 5.049, avg. samples / sec: 249.23
Iteration:   4740, Loss function: 4.810, Average Loss: 5.045, avg. samples / sec: 297.77
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 266.66
Iteration:   4780, Loss function: 5.161, Average Loss: 5.037, avg. samples / sec: 179.85
Iteration:   4800, Loss function: 4.950, Average Loss: 5.034, avg. samples / sec: 298.92
Iteration:   4820, Loss function: 4.794, Average Loss: 5.030, avg. samples / sec: 338.95
Iteration:   4840, Loss function: 5.200, Average Loss: 5.027, avg. samples / sec: 333.23
Iteration:   4860, Loss function: 4.932, Average Loss: 5.023, avg. samples / sec: 333.08
Iteration:   4880, Loss function: 5.356, Average Loss: 5.019, avg. samples / sec: 304.09
Iteration:   4900, Loss function: 4.617, Average Loss: 5.015, avg. samples / sec: 302.29
Iteration:   4920, Loss function: 4.715, Average Loss: 5.011, avg. samples / sec: 326.54
Iteration:   4940, Loss function: 4.794, Average Loss: 5.007, avg. samples / sec: 335.08
Iteration:   4960, Loss function: 4.665, Average Loss: 5.003, avg. samples / sec: 313.37
Iteration:   4980, Loss function: 4.732, Average Loss: 5.000, avg. samples / sec: 327.70
Iteration:   5000, Loss function: 4.927, Average Loss: 4.996, avg. samples / sec: 279.98
Iteration:   5020, Loss function: 5.101, Average Loss: 4.993, avg. samples / sec: 278.75
Iteration:   5040, Loss function: 4.912, Average Loss: 4.991, avg. samples / sec: 272.13
Iteration:   5060, Loss function: 4.843, Average Loss: 4.987, avg. samples / sec: 322.57
Iteration:   5080, Loss function: 4.522, Average Loss: 4.984, avg. samples / sec: 243.61
Iteration:   5100, Loss function: 4.714, Average Loss: 4.980, avg. samples / sec: 311.12
Iteration:   5120, Loss function: 4.660, Average Loss: 4.976, avg. samples / sec: 321.44
Iteration:   5140, Loss function: 4.906, Average Loss: 4.973, avg. samples / sec: 335.33
:::MLLOG {"namespace": "", "time_ms": 1639152441916, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 75.37 s
:::MLLOG {"namespace": "", "time_ms": 1639152517485, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152517537, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152517545, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.875, Average Loss: 4.968, avg. samples / sec: 27.39
DONE (t=8.74s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10835
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21889
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09618
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19369
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13750
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20469
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21716
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21716
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10835 AP goal: 0.10000
Iteration:   5180, Loss function: 4.696, Average Loss: 4.963, avg. samples / sec: 287.40
:::MLLOG {"namespace": "", "time_ms": 1639152532055, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532056, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10835417161428396, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532057, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152532569, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152539
++ date '+%Y-%m-%d %r'
START TIMING RUN WAS 2021-12-10 03:32:37 PM
ENDING TIMING RUN AT 2021-12-10 04:08:59 PM
+ end_fmt='2021-12-10 04:08:59 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:37 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:08:59 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4dd97325-7fe6-abf1-d6a9-ba746fe0fdab)
  MIG 2g.10gb     Device  0: (UUID: MIG-f7fcc8ba-34b5-573e-b4f3-71f624997288)
+ result=2182
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2182,nvidia,2021-12-10 03:32:37 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2182,nvidia,2021-12-10 03:32:37 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
