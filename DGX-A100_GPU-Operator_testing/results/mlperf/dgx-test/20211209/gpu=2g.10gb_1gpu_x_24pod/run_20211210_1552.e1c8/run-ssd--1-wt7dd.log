+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-wt7dd.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-wt7dd.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-wt7dd.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ MIG_MODE=1
Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150355
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:35 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:35 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:35 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_09-53-12 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ rm -f /data/coco2017/sync/2021-12-10_09-53-12
+ set +x
Fri Dec 10 15:32:35 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-wt7dd to the sync file ...
run-ssd--1-wt7dd Found 1 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
run-ssd--1-wt7dd Found 19 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
    19	run-ssd--1-lh68c
Fri Dec 10 15:32:45 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150368753, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369013, "event_type": "POINT_IN_TIME", "key": "seed", "value": 897497183, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 897497183
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150373061, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150373062, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150373070, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150475732, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150475733, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150480291, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150480292, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150480793, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150480794, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150480795, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.764, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.109, Average Loss: 0.455, avg. samples / sec: 210.65
Iteration:     40, Loss function: 20.685, Average Loss: 0.857, avg. samples / sec: 228.62
Iteration:     60, Loss function: 20.378, Average Loss: 1.247, avg. samples / sec: 263.66
Iteration:     80, Loss function: 19.777, Average Loss: 1.620, avg. samples / sec: 256.81
Iteration:    100, Loss function: 14.908, Average Loss: 1.939, avg. samples / sec: 250.77
Iteration:    120, Loss function: 11.538, Average Loss: 2.145, avg. samples / sec: 268.17
Iteration:    140, Loss function: 9.795, Average Loss: 2.308, avg. samples / sec: 241.13
Iteration:    160, Loss function: 9.264, Average Loss: 2.451, avg. samples / sec: 270.25
Iteration:    180, Loss function: 9.049, Average Loss: 2.583, avg. samples / sec: 258.95
Iteration:    200, Loss function: 8.635, Average Loss: 2.708, avg. samples / sec: 280.99
Iteration:    220, Loss function: 8.501, Average Loss: 2.829, avg. samples / sec: 291.95
Iteration:    240, Loss function: 8.546, Average Loss: 2.945, avg. samples / sec: 260.57
Iteration:    260, Loss function: 8.802, Average Loss: 3.057, avg. samples / sec: 293.07
Iteration:    280, Loss function: 8.640, Average Loss: 3.167, avg. samples / sec: 293.67
Iteration:    300, Loss function: 8.320, Average Loss: 3.272, avg. samples / sec: 272.65
Iteration:    320, Loss function: 8.340, Average Loss: 3.372, avg. samples / sec: 286.59
Iteration:    340, Loss function: 8.237, Average Loss: 3.469, avg. samples / sec: 328.73
Iteration:    360, Loss function: 8.119, Average Loss: 3.564, avg. samples / sec: 313.28
Iteration:    380, Loss function: 7.954, Average Loss: 3.654, avg. samples / sec: 299.20
Iteration:    400, Loss function: 8.028, Average Loss: 3.739, avg. samples / sec: 281.15
Iteration:    420, Loss function: 7.617, Average Loss: 3.821, avg. samples / sec: 328.51
Iteration:    440, Loss function: 7.846, Average Loss: 3.900, avg. samples / sec: 299.16
Iteration:    460, Loss function: 8.266, Average Loss: 3.979, avg. samples / sec: 202.67
Iteration:    480, Loss function: 7.624, Average Loss: 4.055, avg. samples / sec: 273.68
Iteration:    500, Loss function: 7.710, Average Loss: 4.127, avg. samples / sec: 308.96
Iteration:    520, Loss function: 7.514, Average Loss: 4.195, avg. samples / sec: 322.56
Iteration:    540, Loss function: 7.416, Average Loss: 4.261, avg. samples / sec: 317.60
Iteration:    560, Loss function: 7.255, Average Loss: 4.323, avg. samples / sec: 300.03
Iteration:    580, Loss function: 7.151, Average Loss: 4.384, avg. samples / sec: 262.73
Iteration:    600, Loss function: 7.559, Average Loss: 4.443, avg. samples / sec: 273.68
Iteration:    620, Loss function: 7.150, Average Loss: 4.500, avg. samples / sec: 298.73
Iteration:    640, Loss function: 6.889, Average Loss: 4.555, avg. samples / sec: 282.12
Iteration:    660, Loss function: 7.114, Average Loss: 4.607, avg. samples / sec: 303.54
Iteration:    680, Loss function: 7.143, Average Loss: 4.658, avg. samples / sec: 196.74
Iteration:    700, Loss function: 6.816, Average Loss: 4.705, avg. samples / sec: 327.94
Iteration:    720, Loss function: 7.173, Average Loss: 4.753, avg. samples / sec: 317.65
Iteration:    740, Loss function: 6.959, Average Loss: 4.799, avg. samples / sec: 320.67
Iteration:    760, Loss function: 7.088, Average Loss: 4.843, avg. samples / sec: 302.95
Iteration:    780, Loss function: 6.834, Average Loss: 4.885, avg. samples / sec: 318.13
Iteration:    800, Loss function: 7.172, Average Loss: 4.924, avg. samples / sec: 320.15
Iteration:    820, Loss function: 6.824, Average Loss: 4.961, avg. samples / sec: 310.77
Iteration:    840, Loss function: 6.733, Average Loss: 4.998, avg. samples / sec: 336.24
Iteration:    860, Loss function: 6.892, Average Loss: 5.032, avg. samples / sec: 320.14
Iteration:    880, Loss function: 6.755, Average Loss: 5.065, avg. samples / sec: 321.92
Iteration:    900, Loss function: 6.880, Average Loss: 5.097, avg. samples / sec: 309.32
Iteration:    920, Loss function: 6.587, Average Loss: 5.126, avg. samples / sec: 334.96
Iteration:    940, Loss function: 6.925, Average Loss: 5.156, avg. samples / sec: 325.28
Iteration:    960, Loss function: 6.436, Average Loss: 5.185, avg. samples / sec: 332.31
Iteration:    980, Loss function: 6.484, Average Loss: 5.213, avg. samples / sec: 316.45
Iteration:   1000, Loss function: 6.619, Average Loss: 5.239, avg. samples / sec: 304.57
Iteration:   1020, Loss function: 6.363, Average Loss: 5.263, avg. samples / sec: 326.38
:::MLLOG {"namespace": "", "time_ms": 1639150891744, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150891746, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.420, Average Loss: 5.287, avg. samples / sec: 321.23
Iteration:   1060, Loss function: 6.297, Average Loss: 5.311, avg. samples / sec: 318.02
Iteration:   1080, Loss function: 6.413, Average Loss: 5.332, avg. samples / sec: 312.19
Iteration:   1100, Loss function: 6.153, Average Loss: 5.352, avg. samples / sec: 306.06
Iteration:   1120, Loss function: 6.229, Average Loss: 5.371, avg. samples / sec: 330.15
Iteration:   1140, Loss function: 6.585, Average Loss: 5.391, avg. samples / sec: 328.70
Iteration:   1160, Loss function: 6.240, Average Loss: 5.409, avg. samples / sec: 321.48
Iteration:   1180, Loss function: 6.195, Average Loss: 5.426, avg. samples / sec: 318.03
Iteration:   1200, Loss function: 6.145, Average Loss: 5.441, avg. samples / sec: 304.81
Iteration:   1220, Loss function: 6.153, Average Loss: 5.457, avg. samples / sec: 227.78
Iteration:   1240, Loss function: 6.009, Average Loss: 5.469, avg. samples / sec: 327.78
Iteration:   1260, Loss function: 5.977, Average Loss: 5.482, avg. samples / sec: 297.01
Iteration:   1280, Loss function: 5.951, Average Loss: 5.493, avg. samples / sec: 276.94
Iteration:   1300, Loss function: 6.026, Average Loss: 5.506, avg. samples / sec: 288.47
Iteration:   1320, Loss function: 6.111, Average Loss: 5.518, avg. samples / sec: 301.04
Iteration:   1340, Loss function: 5.892, Average Loss: 5.528, avg. samples / sec: 327.59
Iteration:   1360, Loss function: 6.034, Average Loss: 5.538, avg. samples / sec: 317.16
Iteration:   1380, Loss function: 6.120, Average Loss: 5.548, avg. samples / sec: 296.77
Iteration:   1400, Loss function: 6.295, Average Loss: 5.556, avg. samples / sec: 325.50
Iteration:   1420, Loss function: 5.929, Average Loss: 5.563, avg. samples / sec: 309.46
Iteration:   1440, Loss function: 6.277, Average Loss: 5.571, avg. samples / sec: 317.78
Iteration:   1460, Loss function: 6.227, Average Loss: 5.579, avg. samples / sec: 337.24
Iteration:   1480, Loss function: 5.871, Average Loss: 5.587, avg. samples / sec: 306.77
Iteration:   1500, Loss function: 5.962, Average Loss: 5.595, avg. samples / sec: 303.32
Iteration:   1520, Loss function: 5.979, Average Loss: 5.601, avg. samples / sec: 318.51
Iteration:   1540, Loss function: 6.036, Average Loss: 5.605, avg. samples / sec: 317.04
Iteration:   1560, Loss function: 5.741, Average Loss: 5.609, avg. samples / sec: 281.57
Iteration:   1580, Loss function: 5.617, Average Loss: 5.613, avg. samples / sec: 304.64
Iteration:   1600, Loss function: 6.279, Average Loss: 5.618, avg. samples / sec: 284.50
Iteration:   1620, Loss function: 5.875, Average Loss: 5.623, avg. samples / sec: 278.90
Iteration:   1640, Loss function: 6.020, Average Loss: 5.625, avg. samples / sec: 203.07
Iteration:   1660, Loss function: 5.934, Average Loss: 5.629, avg. samples / sec: 277.28
Iteration:   1680, Loss function: 5.736, Average Loss: 5.632, avg. samples / sec: 239.87
Iteration:   1700, Loss function: 5.413, Average Loss: 5.636, avg. samples / sec: 298.99
Iteration:   1720, Loss function: 5.791, Average Loss: 5.637, avg. samples / sec: 233.71
Iteration:   1740, Loss function: 5.882, Average Loss: 5.639, avg. samples / sec: 287.98
Iteration:   1760, Loss function: 5.422, Average Loss: 5.641, avg. samples / sec: 320.79
Iteration:   1780, Loss function: 5.826, Average Loss: 5.642, avg. samples / sec: 321.13
Iteration:   1800, Loss function: 5.588, Average Loss: 5.645, avg. samples / sec: 321.44
Iteration:   1820, Loss function: 5.856, Average Loss: 5.647, avg. samples / sec: 327.18
Iteration:   1840, Loss function: 5.824, Average Loss: 5.649, avg. samples / sec: 323.67
Iteration:   1860, Loss function: 5.691, Average Loss: 5.648, avg. samples / sec: 314.53
Iteration:   1880, Loss function: 5.957, Average Loss: 5.650, avg. samples / sec: 279.70
Iteration:   1900, Loss function: 5.881, Average Loss: 5.651, avg. samples / sec: 230.98
Iteration:   1920, Loss function: 5.646, Average Loss: 5.651, avg. samples / sec: 323.38
Iteration:   1940, Loss function: 5.833, Average Loss: 5.651, avg. samples / sec: 330.11
Iteration:   1960, Loss function: 5.600, Average Loss: 5.649, avg. samples / sec: 329.40
Iteration:   1980, Loss function: 5.720, Average Loss: 5.648, avg. samples / sec: 318.38
Iteration:   2000, Loss function: 5.530, Average Loss: 5.646, avg. samples / sec: 325.37
Iteration:   2020, Loss function: 5.771, Average Loss: 5.644, avg. samples / sec: 334.56
Iteration:   2040, Loss function: 5.448, Average Loss: 5.644, avg. samples / sec: 333.40
:::MLLOG {"namespace": "", "time_ms": 1639151282742, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151282744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.615, Average Loss: 5.642, avg. samples / sec: 312.69
Iteration:   2080, Loss function: 5.204, Average Loss: 5.639, avg. samples / sec: 340.91
Iteration:   2100, Loss function: 5.537, Average Loss: 5.637, avg. samples / sec: 317.69
Iteration:   2120, Loss function: 5.332, Average Loss: 5.634, avg. samples / sec: 321.57
Iteration:   2140, Loss function: 5.352, Average Loss: 5.630, avg. samples / sec: 314.80
Iteration:   2160, Loss function: 5.416, Average Loss: 5.629, avg. samples / sec: 310.34
Iteration:   2180, Loss function: 5.492, Average Loss: 5.627, avg. samples / sec: 320.74
Iteration:   2200, Loss function: 5.590, Average Loss: 5.623, avg. samples / sec: 277.29
Iteration:   2220, Loss function: 5.651, Average Loss: 5.621, avg. samples / sec: 301.46
Iteration:   2240, Loss function: 5.529, Average Loss: 5.619, avg. samples / sec: 226.63
Iteration:   2260, Loss function: 5.313, Average Loss: 5.616, avg. samples / sec: 190.32
Iteration:   2280, Loss function: 5.375, Average Loss: 5.613, avg. samples / sec: 286.78
Iteration:   2300, Loss function: 5.083, Average Loss: 5.609, avg. samples / sec: 238.35
Iteration:   2320, Loss function: 5.289, Average Loss: 5.607, avg. samples / sec: 260.90
Iteration:   2340, Loss function: 5.427, Average Loss: 5.604, avg. samples / sec: 227.48
Iteration:   2360, Loss function: 5.369, Average Loss: 5.600, avg. samples / sec: 280.64
Iteration:   2380, Loss function: 5.614, Average Loss: 5.596, avg. samples / sec: 306.78
Iteration:   2400, Loss function: 5.446, Average Loss: 5.591, avg. samples / sec: 298.75
Iteration:   2420, Loss function: 5.470, Average Loss: 5.587, avg. samples / sec: 247.61
Iteration:   2440, Loss function: 5.473, Average Loss: 5.583, avg. samples / sec: 232.16
Iteration:   2460, Loss function: 5.197, Average Loss: 5.579, avg. samples / sec: 185.40
Iteration:   2480, Loss function: 5.433, Average Loss: 5.576, avg. samples / sec: 324.92
Iteration:   2500, Loss function: 5.441, Average Loss: 5.572, avg. samples / sec: 312.44
Iteration:   2520, Loss function: 5.412, Average Loss: 5.566, avg. samples / sec: 334.10
Iteration:   2540, Loss function: 5.477, Average Loss: 5.563, avg. samples / sec: 320.60
Iteration:   2560, Loss function: 5.231, Average Loss: 5.560, avg. samples / sec: 269.78
Iteration:   2580, Loss function: 5.267, Average Loss: 5.557, avg. samples / sec: 207.48
Iteration:   2600, Loss function: 5.538, Average Loss: 5.553, avg. samples / sec: 300.24
Iteration:   2620, Loss function: 5.489, Average Loss: 5.549, avg. samples / sec: 305.84
Iteration:   2640, Loss function: 5.120, Average Loss: 5.546, avg. samples / sec: 324.10
Iteration:   2660, Loss function: 4.988, Average Loss: 5.542, avg. samples / sec: 338.95
Iteration:   2680, Loss function: 5.168, Average Loss: 5.538, avg. samples / sec: 324.05
Iteration:   2700, Loss function: 5.363, Average Loss: 5.533, avg. samples / sec: 331.55
Iteration:   2720, Loss function: 5.380, Average Loss: 5.529, avg. samples / sec: 323.40
Iteration:   2740, Loss function: 5.166, Average Loss: 5.524, avg. samples / sec: 326.33
Iteration:   2760, Loss function: 4.992, Average Loss: 5.519, avg. samples / sec: 314.97
Iteration:   2780, Loss function: 5.516, Average Loss: 5.514, avg. samples / sec: 308.20
Iteration:   2800, Loss function: 5.176, Average Loss: 5.509, avg. samples / sec: 337.68
Iteration:   2820, Loss function: 5.242, Average Loss: 5.505, avg. samples / sec: 324.45
Iteration:   2840, Loss function: 5.160, Average Loss: 5.501, avg. samples / sec: 342.54
Iteration:   2860, Loss function: 5.198, Average Loss: 5.495, avg. samples / sec: 319.02
Iteration:   2880, Loss function: 5.185, Average Loss: 5.491, avg. samples / sec: 329.16
Iteration:   2900, Loss function: 4.999, Average Loss: 5.486, avg. samples / sec: 333.00
Iteration:   2920, Loss function: 5.040, Average Loss: 5.480, avg. samples / sec: 316.19
Iteration:   2940, Loss function: 5.012, Average Loss: 5.475, avg. samples / sec: 311.42
Iteration:   2960, Loss function: 5.492, Average Loss: 5.471, avg. samples / sec: 327.83
Iteration:   2980, Loss function: 5.345, Average Loss: 5.468, avg. samples / sec: 292.71
Iteration:   3000, Loss function: 5.382, Average Loss: 5.463, avg. samples / sec: 279.56
Iteration:   3020, Loss function: 5.124, Average Loss: 5.456, avg. samples / sec: 319.93
Iteration:   3040, Loss function: 5.096, Average Loss: 5.451, avg. samples / sec: 315.60
Iteration:   3060, Loss function: 4.922, Average Loss: 5.445, avg. samples / sec: 332.66
Iteration:   3080, Loss function: 4.902, Average Loss: 5.440, avg. samples / sec: 306.90
:::MLLOG {"namespace": "", "time_ms": 1639151683307, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151683308, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.151, Average Loss: 5.435, avg. samples / sec: 320.48
Iteration:   3120, Loss function: 5.072, Average Loss: 5.429, avg. samples / sec: 330.98
Iteration:   3140, Loss function: 5.063, Average Loss: 5.423, avg. samples / sec: 328.47
Iteration:   3160, Loss function: 5.443, Average Loss: 5.418, avg. samples / sec: 325.19
Iteration:   3180, Loss function: 5.100, Average Loss: 5.413, avg. samples / sec: 325.57
Iteration:   3200, Loss function: 5.260, Average Loss: 5.408, avg. samples / sec: 290.26
Iteration:   3220, Loss function: 5.078, Average Loss: 5.403, avg. samples / sec: 320.78
Iteration:   3240, Loss function: 5.213, Average Loss: 5.398, avg. samples / sec: 309.98
Iteration:   3260, Loss function: 5.082, Average Loss: 5.391, avg. samples / sec: 303.32
Iteration:   3280, Loss function: 4.873, Average Loss: 5.385, avg. samples / sec: 262.48
Iteration:   3300, Loss function: 4.720, Average Loss: 5.379, avg. samples / sec: 269.33
Iteration:   3320, Loss function: 4.842, Average Loss: 5.374, avg. samples / sec: 306.92
Iteration:   3340, Loss function: 5.142, Average Loss: 5.369, avg. samples / sec: 322.89
Iteration:   3360, Loss function: 5.174, Average Loss: 5.363, avg. samples / sec: 318.30
Iteration:   3380, Loss function: 5.256, Average Loss: 5.356, avg. samples / sec: 330.87
Iteration:   3400, Loss function: 5.018, Average Loss: 5.352, avg. samples / sec: 331.80
Iteration:   3420, Loss function: 5.053, Average Loss: 5.347, avg. samples / sec: 315.29
Iteration:   3440, Loss function: 4.850, Average Loss: 5.342, avg. samples / sec: 315.53
Iteration:   3460, Loss function: 5.222, Average Loss: 5.336, avg. samples / sec: 316.11
Iteration:   3480, Loss function: 5.113, Average Loss: 5.331, avg. samples / sec: 335.24
Iteration:   3500, Loss function: 5.303, Average Loss: 5.327, avg. samples / sec: 338.11
Iteration:   3520, Loss function: 5.075, Average Loss: 5.323, avg. samples / sec: 335.05
Iteration:   3540, Loss function: 5.001, Average Loss: 5.318, avg. samples / sec: 334.18
Iteration:   3560, Loss function: 4.775, Average Loss: 5.314, avg. samples / sec: 328.12
Iteration:   3580, Loss function: 5.189, Average Loss: 5.309, avg. samples / sec: 315.31
Iteration:   3600, Loss function: 5.329, Average Loss: 5.303, avg. samples / sec: 310.81
Iteration:   3620, Loss function: 4.840, Average Loss: 5.298, avg. samples / sec: 286.69
Iteration:   3640, Loss function: 4.846, Average Loss: 5.292, avg. samples / sec: 293.14
Iteration:   3660, Loss function: 5.115, Average Loss: 5.287, avg. samples / sec: 149.23
Iteration:   3680, Loss function: 5.099, Average Loss: 5.282, avg. samples / sec: 239.73
Iteration:   3700, Loss function: 4.837, Average Loss: 5.278, avg. samples / sec: 264.01
Iteration:   3720, Loss function: 4.876, Average Loss: 5.272, avg. samples / sec: 284.20
Iteration:   3740, Loss function: 5.049, Average Loss: 5.268, avg. samples / sec: 266.41
Iteration:   3760, Loss function: 4.996, Average Loss: 5.264, avg. samples / sec: 221.93
Iteration:   3780, Loss function: 5.020, Average Loss: 5.259, avg. samples / sec: 172.96
Iteration:   3800, Loss function: 4.843, Average Loss: 5.255, avg. samples / sec: 326.93
Iteration:   3820, Loss function: 5.214, Average Loss: 5.250, avg. samples / sec: 264.66
Iteration:   3840, Loss function: 4.869, Average Loss: 5.246, avg. samples / sec: 275.45
Iteration:   3860, Loss function: 4.905, Average Loss: 5.241, avg. samples / sec: 323.27
Iteration:   3880, Loss function: 5.030, Average Loss: 5.236, avg. samples / sec: 332.90
Iteration:   3900, Loss function: 5.120, Average Loss: 5.232, avg. samples / sec: 300.67
Iteration:   3920, Loss function: 5.176, Average Loss: 5.227, avg. samples / sec: 285.08
Iteration:   3940, Loss function: 5.038, Average Loss: 5.222, avg. samples / sec: 318.12
Iteration:   3960, Loss function: 4.755, Average Loss: 5.218, avg. samples / sec: 321.75
Iteration:   3980, Loss function: 4.951, Average Loss: 5.212, avg. samples / sec: 314.54
Iteration:   4000, Loss function: 4.981, Average Loss: 5.208, avg. samples / sec: 303.47
Iteration:   4020, Loss function: 4.985, Average Loss: 5.202, avg. samples / sec: 322.49
Iteration:   4040, Loss function: 4.900, Average Loss: 5.199, avg. samples / sec: 326.84
Iteration:   4060, Loss function: 5.181, Average Loss: 5.194, avg. samples / sec: 289.78
Iteration:   4080, Loss function: 5.252, Average Loss: 5.191, avg. samples / sec: 294.72
Iteration:   4100, Loss function: 5.375, Average Loss: 5.188, avg. samples / sec: 277.57
:::MLLOG {"namespace": "", "time_ms": 1639152085450, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152085452, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.013, Average Loss: 5.184, avg. samples / sec: 252.19
Iteration:   4140, Loss function: 5.041, Average Loss: 5.180, avg. samples / sec: 311.34
Iteration:   4160, Loss function: 5.013, Average Loss: 5.174, avg. samples / sec: 323.91
Iteration:   4180, Loss function: 5.187, Average Loss: 5.168, avg. samples / sec: 327.63
Iteration:   4200, Loss function: 4.770, Average Loss: 5.163, avg. samples / sec: 322.33
Iteration:   4220, Loss function: 4.739, Average Loss: 5.159, avg. samples / sec: 328.35
Iteration:   4240, Loss function: 4.764, Average Loss: 5.154, avg. samples / sec: 310.56
Iteration:   4260, Loss function: 5.132, Average Loss: 5.149, avg. samples / sec: 221.29
Iteration:   4280, Loss function: 4.995, Average Loss: 5.143, avg. samples / sec: 189.49
Iteration:   4300, Loss function: 4.610, Average Loss: 5.137, avg. samples / sec: 272.65
Iteration:   4320, Loss function: 4.885, Average Loss: 5.133, avg. samples / sec: 330.26
Iteration:   4340, Loss function: 4.792, Average Loss: 5.127, avg. samples / sec: 326.07
Iteration:   4360, Loss function: 4.887, Average Loss: 5.124, avg. samples / sec: 310.88
Iteration:   4380, Loss function: 5.042, Average Loss: 5.120, avg. samples / sec: 322.29
Iteration:   4400, Loss function: 4.742, Average Loss: 5.115, avg. samples / sec: 317.99
Iteration:   4420, Loss function: 4.766, Average Loss: 5.109, avg. samples / sec: 335.28
Iteration:   4440, Loss function: 4.835, Average Loss: 5.104, avg. samples / sec: 330.48
Iteration:   4460, Loss function: 5.105, Average Loss: 5.100, avg. samples / sec: 337.08
Iteration:   4480, Loss function: 4.856, Average Loss: 5.097, avg. samples / sec: 227.67
Iteration:   4500, Loss function: 4.989, Average Loss: 5.094, avg. samples / sec: 298.46
Iteration:   4520, Loss function: 4.786, Average Loss: 5.090, avg. samples / sec: 332.79
Iteration:   4540, Loss function: 5.107, Average Loss: 5.086, avg. samples / sec: 323.57
Iteration:   4560, Loss function: 4.792, Average Loss: 5.082, avg. samples / sec: 320.99
Iteration:   4580, Loss function: 4.760, Average Loss: 5.079, avg. samples / sec: 318.33
Iteration:   4600, Loss function: 4.916, Average Loss: 5.075, avg. samples / sec: 320.69
Iteration:   4620, Loss function: 4.803, Average Loss: 5.071, avg. samples / sec: 303.20
Iteration:   4640, Loss function: 4.684, Average Loss: 5.066, avg. samples / sec: 272.97
Iteration:   4660, Loss function: 4.649, Average Loss: 5.061, avg. samples / sec: 231.77
Iteration:   4680, Loss function: 5.325, Average Loss: 5.057, avg. samples / sec: 334.40
Iteration:   4700, Loss function: 4.646, Average Loss: 5.054, avg. samples / sec: 311.68
Iteration:   4720, Loss function: 4.762, Average Loss: 5.049, avg. samples / sec: 312.64
Iteration:   4740, Loss function: 4.775, Average Loss: 5.044, avg. samples / sec: 285.16
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 318.15
Iteration:   4780, Loss function: 4.979, Average Loss: 5.036, avg. samples / sec: 322.45
Iteration:   4800, Loss function: 4.922, Average Loss: 5.033, avg. samples / sec: 342.20
Iteration:   4820, Loss function: 4.730, Average Loss: 5.031, avg. samples / sec: 320.35
Iteration:   4840, Loss function: 4.992, Average Loss: 5.027, avg. samples / sec: 325.51
Iteration:   4860, Loss function: 4.688, Average Loss: 5.023, avg. samples / sec: 329.16
Iteration:   4880, Loss function: 5.163, Average Loss: 5.020, avg. samples / sec: 316.55
Iteration:   4900, Loss function: 4.633, Average Loss: 5.016, avg. samples / sec: 322.50
Iteration:   4920, Loss function: 4.641, Average Loss: 5.012, avg. samples / sec: 323.86
Iteration:   4940, Loss function: 4.765, Average Loss: 5.008, avg. samples / sec: 324.11
Iteration:   4960, Loss function: 4.595, Average Loss: 5.005, avg. samples / sec: 288.75
Iteration:   4980, Loss function: 4.598, Average Loss: 5.001, avg. samples / sec: 326.10
Iteration:   5000, Loss function: 4.871, Average Loss: 4.998, avg. samples / sec: 313.04
Iteration:   5020, Loss function: 5.016, Average Loss: 4.995, avg. samples / sec: 307.86
Iteration:   5040, Loss function: 4.723, Average Loss: 4.992, avg. samples / sec: 288.37
Iteration:   5060, Loss function: 4.792, Average Loss: 4.989, avg. samples / sec: 264.12
Iteration:   5080, Loss function: 4.373, Average Loss: 4.986, avg. samples / sec: 243.93
Iteration:   5100, Loss function: 4.812, Average Loss: 4.984, avg. samples / sec: 321.85
Iteration:   5120, Loss function: 4.581, Average Loss: 4.981, avg. samples / sec: 274.26
Iteration:   5140, Loss function: 4.743, Average Loss: 4.976, avg. samples / sec: 235.06
:::MLLOG {"namespace": "", "time_ms": 1639152477325, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 84.85 s
:::MLLOG {"namespace": "", "time_ms": 1639152562463, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152562544, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152562544, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=2.32s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.865, Average Loss: 4.971, avg. samples / sec: 24.07
DONE (t=10.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10936
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22422
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09584
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19537
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10936 AP goal: 0.10000
Iteration:   5180, Loss function: 5.017, Average Loss: 4.967, avg. samples / sec: 333.19
:::MLLOG {"namespace": "", "time_ms": 1639152577758, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152577759, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10935548715877631, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152577759, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152581113, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:53 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:53 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150368753, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369013, "event_type": "POINT_IN_TIME", "key": "seed", "value": 897497183, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 897497183
:::MLLOG {"namespace": "", "time_ms": 1639150373061, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150373062, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150373070, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150373071, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150475732, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150475733, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150480291, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150480292, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150480793, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150480794, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150480795, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.764, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.109, Average Loss: 0.455, avg. samples / sec: 210.65
Iteration:     40, Loss function: 20.685, Average Loss: 0.857, avg. samples / sec: 228.62
Iteration:     60, Loss function: 20.378, Average Loss: 1.247, avg. samples / sec: 263.66
Iteration:     80, Loss function: 19.777, Average Loss: 1.620, avg. samples / sec: 256.81
Iteration:    100, Loss function: 14.908, Average Loss: 1.939, avg. samples / sec: 250.77
Iteration:    120, Loss function: 11.538, Average Loss: 2.145, avg. samples / sec: 268.17
Iteration:    140, Loss function: 9.795, Average Loss: 2.308, avg. samples / sec: 241.13
Iteration:    160, Loss function: 9.264, Average Loss: 2.451, avg. samples / sec: 270.25
Iteration:    180, Loss function: 9.049, Average Loss: 2.583, avg. samples / sec: 258.95
Iteration:    200, Loss function: 8.635, Average Loss: 2.708, avg. samples / sec: 280.99
Iteration:    220, Loss function: 8.501, Average Loss: 2.829, avg. samples / sec: 291.95
Iteration:    240, Loss function: 8.546, Average Loss: 2.945, avg. samples / sec: 260.57
Iteration:    260, Loss function: 8.802, Average Loss: 3.057, avg. samples / sec: 293.07
Iteration:    280, Loss function: 8.640, Average Loss: 3.167, avg. samples / sec: 293.67
Iteration:    300, Loss function: 8.320, Average Loss: 3.272, avg. samples / sec: 272.65
Iteration:    320, Loss function: 8.340, Average Loss: 3.372, avg. samples / sec: 286.59
Iteration:    340, Loss function: 8.237, Average Loss: 3.469, avg. samples / sec: 328.73
Iteration:    360, Loss function: 8.119, Average Loss: 3.564, avg. samples / sec: 313.28
Iteration:    380, Loss function: 7.954, Average Loss: 3.654, avg. samples / sec: 299.20
Iteration:    400, Loss function: 8.028, Average Loss: 3.739, avg. samples / sec: 281.15
Iteration:    420, Loss function: 7.617, Average Loss: 3.821, avg. samples / sec: 328.51
Iteration:    440, Loss function: 7.846, Average Loss: 3.900, avg. samples / sec: 299.16
Iteration:    460, Loss function: 8.266, Average Loss: 3.979, avg. samples / sec: 202.67
Iteration:    480, Loss function: 7.624, Average Loss: 4.055, avg. samples / sec: 273.68
Iteration:    500, Loss function: 7.710, Average Loss: 4.127, avg. samples / sec: 308.96
Iteration:    520, Loss function: 7.514, Average Loss: 4.195, avg. samples / sec: 322.56
Iteration:    540, Loss function: 7.416, Average Loss: 4.261, avg. samples / sec: 317.60
Iteration:    560, Loss function: 7.255, Average Loss: 4.323, avg. samples / sec: 300.03
Iteration:    580, Loss function: 7.151, Average Loss: 4.384, avg. samples / sec: 262.73
Iteration:    600, Loss function: 7.559, Average Loss: 4.443, avg. samples / sec: 273.68
Iteration:    620, Loss function: 7.150, Average Loss: 4.500, avg. samples / sec: 298.73
Iteration:    640, Loss function: 6.889, Average Loss: 4.555, avg. samples / sec: 282.12
Iteration:    660, Loss function: 7.114, Average Loss: 4.607, avg. samples / sec: 303.54
Iteration:    680, Loss function: 7.143, Average Loss: 4.658, avg. samples / sec: 196.74
Iteration:    700, Loss function: 6.816, Average Loss: 4.705, avg. samples / sec: 327.94
Iteration:    720, Loss function: 7.173, Average Loss: 4.753, avg. samples / sec: 317.65
Iteration:    740, Loss function: 6.959, Average Loss: 4.799, avg. samples / sec: 320.67
Iteration:    760, Loss function: 7.088, Average Loss: 4.843, avg. samples / sec: 302.95
Iteration:    780, Loss function: 6.834, Average Loss: 4.885, avg. samples / sec: 318.13
Iteration:    800, Loss function: 7.172, Average Loss: 4.924, avg. samples / sec: 320.15
Iteration:    820, Loss function: 6.824, Average Loss: 4.961, avg. samples / sec: 310.77
Iteration:    840, Loss function: 6.733, Average Loss: 4.998, avg. samples / sec: 336.24
Iteration:    860, Loss function: 6.892, Average Loss: 5.032, avg. samples / sec: 320.14
Iteration:    880, Loss function: 6.755, Average Loss: 5.065, avg. samples / sec: 321.92
Iteration:    900, Loss function: 6.880, Average Loss: 5.097, avg. samples / sec: 309.32
Iteration:    920, Loss function: 6.587, Average Loss: 5.126, avg. samples / sec: 334.96
Iteration:    940, Loss function: 6.925, Average Loss: 5.156, avg. samples / sec: 325.28
Iteration:    960, Loss function: 6.436, Average Loss: 5.185, avg. samples / sec: 332.31
Iteration:    980, Loss function: 6.484, Average Loss: 5.213, avg. samples / sec: 316.45
Iteration:   1000, Loss function: 6.619, Average Loss: 5.239, avg. samples / sec: 304.57
Iteration:   1020, Loss function: 6.363, Average Loss: 5.263, avg. samples / sec: 326.38
:::MLLOG {"namespace": "", "time_ms": 1639150891744, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150891746, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.420, Average Loss: 5.287, avg. samples / sec: 321.23
Iteration:   1060, Loss function: 6.297, Average Loss: 5.311, avg. samples / sec: 318.02
Iteration:   1080, Loss function: 6.413, Average Loss: 5.332, avg. samples / sec: 312.19
Iteration:   1100, Loss function: 6.153, Average Loss: 5.352, avg. samples / sec: 306.06
Iteration:   1120, Loss function: 6.229, Average Loss: 5.371, avg. samples / sec: 330.15
Iteration:   1140, Loss function: 6.585, Average Loss: 5.391, avg. samples / sec: 328.70
Iteration:   1160, Loss function: 6.240, Average Loss: 5.409, avg. samples / sec: 321.48
Iteration:   1180, Loss function: 6.195, Average Loss: 5.426, avg. samples / sec: 318.03
Iteration:   1200, Loss function: 6.145, Average Loss: 5.441, avg. samples / sec: 304.81
Iteration:   1220, Loss function: 6.153, Average Loss: 5.457, avg. samples / sec: 227.78
Iteration:   1240, Loss function: 6.009, Average Loss: 5.469, avg. samples / sec: 327.78
Iteration:   1260, Loss function: 5.977, Average Loss: 5.482, avg. samples / sec: 297.01
Iteration:   1280, Loss function: 5.951, Average Loss: 5.493, avg. samples / sec: 276.94
Iteration:   1300, Loss function: 6.026, Average Loss: 5.506, avg. samples / sec: 288.47
Iteration:   1320, Loss function: 6.111, Average Loss: 5.518, avg. samples / sec: 301.04
Iteration:   1340, Loss function: 5.892, Average Loss: 5.528, avg. samples / sec: 327.59
Iteration:   1360, Loss function: 6.034, Average Loss: 5.538, avg. samples / sec: 317.16
Iteration:   1380, Loss function: 6.120, Average Loss: 5.548, avg. samples / sec: 296.77
Iteration:   1400, Loss function: 6.295, Average Loss: 5.556, avg. samples / sec: 325.50
Iteration:   1420, Loss function: 5.929, Average Loss: 5.563, avg. samples / sec: 309.46
Iteration:   1440, Loss function: 6.277, Average Loss: 5.571, avg. samples / sec: 317.78
Iteration:   1460, Loss function: 6.227, Average Loss: 5.579, avg. samples / sec: 337.24
Iteration:   1480, Loss function: 5.871, Average Loss: 5.587, avg. samples / sec: 306.77
Iteration:   1500, Loss function: 5.962, Average Loss: 5.595, avg. samples / sec: 303.32
Iteration:   1520, Loss function: 5.979, Average Loss: 5.601, avg. samples / sec: 318.51
Iteration:   1540, Loss function: 6.036, Average Loss: 5.605, avg. samples / sec: 317.04
Iteration:   1560, Loss function: 5.741, Average Loss: 5.609, avg. samples / sec: 281.57
Iteration:   1580, Loss function: 5.617, Average Loss: 5.613, avg. samples / sec: 304.64
Iteration:   1600, Loss function: 6.279, Average Loss: 5.618, avg. samples / sec: 284.50
Iteration:   1620, Loss function: 5.875, Average Loss: 5.623, avg. samples / sec: 278.90
Iteration:   1640, Loss function: 6.020, Average Loss: 5.625, avg. samples / sec: 203.07
Iteration:   1660, Loss function: 5.934, Average Loss: 5.629, avg. samples / sec: 277.28
Iteration:   1680, Loss function: 5.736, Average Loss: 5.632, avg. samples / sec: 239.87
Iteration:   1700, Loss function: 5.413, Average Loss: 5.636, avg. samples / sec: 298.99
Iteration:   1720, Loss function: 5.791, Average Loss: 5.637, avg. samples / sec: 233.71
Iteration:   1740, Loss function: 5.882, Average Loss: 5.639, avg. samples / sec: 287.98
Iteration:   1760, Loss function: 5.422, Average Loss: 5.641, avg. samples / sec: 320.79
Iteration:   1780, Loss function: 5.826, Average Loss: 5.642, avg. samples / sec: 321.13
Iteration:   1800, Loss function: 5.588, Average Loss: 5.645, avg. samples / sec: 321.44
Iteration:   1820, Loss function: 5.856, Average Loss: 5.647, avg. samples / sec: 327.18
Iteration:   1840, Loss function: 5.824, Average Loss: 5.649, avg. samples / sec: 323.67
Iteration:   1860, Loss function: 5.691, Average Loss: 5.648, avg. samples / sec: 314.53
Iteration:   1880, Loss function: 5.957, Average Loss: 5.650, avg. samples / sec: 279.70
Iteration:   1900, Loss function: 5.881, Average Loss: 5.651, avg. samples / sec: 230.98
Iteration:   1920, Loss function: 5.646, Average Loss: 5.651, avg. samples / sec: 323.38
Iteration:   1940, Loss function: 5.833, Average Loss: 5.651, avg. samples / sec: 330.11
Iteration:   1960, Loss function: 5.600, Average Loss: 5.649, avg. samples / sec: 329.40
Iteration:   1980, Loss function: 5.720, Average Loss: 5.648, avg. samples / sec: 318.38
Iteration:   2000, Loss function: 5.530, Average Loss: 5.646, avg. samples / sec: 325.37
Iteration:   2020, Loss function: 5.771, Average Loss: 5.644, avg. samples / sec: 334.56
Iteration:   2040, Loss function: 5.448, Average Loss: 5.644, avg. samples / sec: 333.40
:::MLLOG {"namespace": "", "time_ms": 1639151282742, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151282744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.615, Average Loss: 5.642, avg. samples / sec: 312.69
Iteration:   2080, Loss function: 5.204, Average Loss: 5.639, avg. samples / sec: 340.91
Iteration:   2100, Loss function: 5.537, Average Loss: 5.637, avg. samples / sec: 317.69
Iteration:   2120, Loss function: 5.332, Average Loss: 5.634, avg. samples / sec: 321.57
Iteration:   2140, Loss function: 5.352, Average Loss: 5.630, avg. samples / sec: 314.80
Iteration:   2160, Loss function: 5.416, Average Loss: 5.629, avg. samples / sec: 310.34
Iteration:   2180, Loss function: 5.492, Average Loss: 5.627, avg. samples / sec: 320.74
Iteration:   2200, Loss function: 5.590, Average Loss: 5.623, avg. samples / sec: 277.29
Iteration:   2220, Loss function: 5.651, Average Loss: 5.621, avg. samples / sec: 301.46
Iteration:   2240, Loss function: 5.529, Average Loss: 5.619, avg. samples / sec: 226.63
Iteration:   2260, Loss function: 5.313, Average Loss: 5.616, avg. samples / sec: 190.32
Iteration:   2280, Loss function: 5.375, Average Loss: 5.613, avg. samples / sec: 286.78
Iteration:   2300, Loss function: 5.083, Average Loss: 5.609, avg. samples / sec: 238.35
Iteration:   2320, Loss function: 5.289, Average Loss: 5.607, avg. samples / sec: 260.90
Iteration:   2340, Loss function: 5.427, Average Loss: 5.604, avg. samples / sec: 227.48
Iteration:   2360, Loss function: 5.369, Average Loss: 5.600, avg. samples / sec: 280.64
Iteration:   2380, Loss function: 5.614, Average Loss: 5.596, avg. samples / sec: 306.78
Iteration:   2400, Loss function: 5.446, Average Loss: 5.591, avg. samples / sec: 298.75
Iteration:   2420, Loss function: 5.470, Average Loss: 5.587, avg. samples / sec: 247.61
Iteration:   2440, Loss function: 5.473, Average Loss: 5.583, avg. samples / sec: 232.16
Iteration:   2460, Loss function: 5.197, Average Loss: 5.579, avg. samples / sec: 185.40
Iteration:   2480, Loss function: 5.433, Average Loss: 5.576, avg. samples / sec: 324.92
Iteration:   2500, Loss function: 5.441, Average Loss: 5.572, avg. samples / sec: 312.44
Iteration:   2520, Loss function: 5.412, Average Loss: 5.566, avg. samples / sec: 334.10
Iteration:   2540, Loss function: 5.477, Average Loss: 5.563, avg. samples / sec: 320.60
Iteration:   2560, Loss function: 5.231, Average Loss: 5.560, avg. samples / sec: 269.78
Iteration:   2580, Loss function: 5.267, Average Loss: 5.557, avg. samples / sec: 207.48
Iteration:   2600, Loss function: 5.538, Average Loss: 5.553, avg. samples / sec: 300.24
Iteration:   2620, Loss function: 5.489, Average Loss: 5.549, avg. samples / sec: 305.84
Iteration:   2640, Loss function: 5.120, Average Loss: 5.546, avg. samples / sec: 324.10
Iteration:   2660, Loss function: 4.988, Average Loss: 5.542, avg. samples / sec: 338.95
Iteration:   2680, Loss function: 5.168, Average Loss: 5.538, avg. samples / sec: 324.05
Iteration:   2700, Loss function: 5.363, Average Loss: 5.533, avg. samples / sec: 331.55
Iteration:   2720, Loss function: 5.380, Average Loss: 5.529, avg. samples / sec: 323.40
Iteration:   2740, Loss function: 5.166, Average Loss: 5.524, avg. samples / sec: 326.33
Iteration:   2760, Loss function: 4.992, Average Loss: 5.519, avg. samples / sec: 314.97
Iteration:   2780, Loss function: 5.516, Average Loss: 5.514, avg. samples / sec: 308.20
Iteration:   2800, Loss function: 5.176, Average Loss: 5.509, avg. samples / sec: 337.68
Iteration:   2820, Loss function: 5.242, Average Loss: 5.505, avg. samples / sec: 324.45
Iteration:   2840, Loss function: 5.160, Average Loss: 5.501, avg. samples / sec: 342.54
Iteration:   2860, Loss function: 5.198, Average Loss: 5.495, avg. samples / sec: 319.02
Iteration:   2880, Loss function: 5.185, Average Loss: 5.491, avg. samples / sec: 329.16
Iteration:   2900, Loss function: 4.999, Average Loss: 5.486, avg. samples / sec: 333.00
Iteration:   2920, Loss function: 5.040, Average Loss: 5.480, avg. samples / sec: 316.19
Iteration:   2940, Loss function: 5.012, Average Loss: 5.475, avg. samples / sec: 311.42
Iteration:   2960, Loss function: 5.492, Average Loss: 5.471, avg. samples / sec: 327.83
Iteration:   2980, Loss function: 5.345, Average Loss: 5.468, avg. samples / sec: 292.71
Iteration:   3000, Loss function: 5.382, Average Loss: 5.463, avg. samples / sec: 279.56
Iteration:   3020, Loss function: 5.124, Average Loss: 5.456, avg. samples / sec: 319.93
Iteration:   3040, Loss function: 5.096, Average Loss: 5.451, avg. samples / sec: 315.60
Iteration:   3060, Loss function: 4.922, Average Loss: 5.445, avg. samples / sec: 332.66
Iteration:   3080, Loss function: 4.902, Average Loss: 5.440, avg. samples / sec: 306.90
:::MLLOG {"namespace": "", "time_ms": 1639151683307, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151683308, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.151, Average Loss: 5.435, avg. samples / sec: 320.48
Iteration:   3120, Loss function: 5.072, Average Loss: 5.429, avg. samples / sec: 330.98
Iteration:   3140, Loss function: 5.063, Average Loss: 5.423, avg. samples / sec: 328.47
Iteration:   3160, Loss function: 5.443, Average Loss: 5.418, avg. samples / sec: 325.19
Iteration:   3180, Loss function: 5.100, Average Loss: 5.413, avg. samples / sec: 325.57
Iteration:   3200, Loss function: 5.260, Average Loss: 5.408, avg. samples / sec: 290.26
Iteration:   3220, Loss function: 5.078, Average Loss: 5.403, avg. samples / sec: 320.78
Iteration:   3240, Loss function: 5.213, Average Loss: 5.398, avg. samples / sec: 309.98
Iteration:   3260, Loss function: 5.082, Average Loss: 5.391, avg. samples / sec: 303.32
Iteration:   3280, Loss function: 4.873, Average Loss: 5.385, avg. samples / sec: 262.48
Iteration:   3300, Loss function: 4.720, Average Loss: 5.379, avg. samples / sec: 269.33
Iteration:   3320, Loss function: 4.842, Average Loss: 5.374, avg. samples / sec: 306.92
Iteration:   3340, Loss function: 5.142, Average Loss: 5.369, avg. samples / sec: 322.89
Iteration:   3360, Loss function: 5.174, Average Loss: 5.363, avg. samples / sec: 318.30
Iteration:   3380, Loss function: 5.256, Average Loss: 5.356, avg. samples / sec: 330.87
Iteration:   3400, Loss function: 5.018, Average Loss: 5.352, avg. samples / sec: 331.80
Iteration:   3420, Loss function: 5.053, Average Loss: 5.347, avg. samples / sec: 315.29
Iteration:   3440, Loss function: 4.850, Average Loss: 5.342, avg. samples / sec: 315.53
Iteration:   3460, Loss function: 5.222, Average Loss: 5.336, avg. samples / sec: 316.11
Iteration:   3480, Loss function: 5.113, Average Loss: 5.331, avg. samples / sec: 335.24
Iteration:   3500, Loss function: 5.303, Average Loss: 5.327, avg. samples / sec: 338.11
Iteration:   3520, Loss function: 5.075, Average Loss: 5.323, avg. samples / sec: 335.05
Iteration:   3540, Loss function: 5.001, Average Loss: 5.318, avg. samples / sec: 334.18
Iteration:   3560, Loss function: 4.775, Average Loss: 5.314, avg. samples / sec: 328.12
Iteration:   3580, Loss function: 5.189, Average Loss: 5.309, avg. samples / sec: 315.31
Iteration:   3600, Loss function: 5.329, Average Loss: 5.303, avg. samples / sec: 310.81
Iteration:   3620, Loss function: 4.840, Average Loss: 5.298, avg. samples / sec: 286.69
Iteration:   3640, Loss function: 4.846, Average Loss: 5.292, avg. samples / sec: 293.14
Iteration:   3660, Loss function: 5.115, Average Loss: 5.287, avg. samples / sec: 149.23
Iteration:   3680, Loss function: 5.099, Average Loss: 5.282, avg. samples / sec: 239.73
Iteration:   3700, Loss function: 4.837, Average Loss: 5.278, avg. samples / sec: 264.01
Iteration:   3720, Loss function: 4.876, Average Loss: 5.272, avg. samples / sec: 284.20
Iteration:   3740, Loss function: 5.049, Average Loss: 5.268, avg. samples / sec: 266.41
Iteration:   3760, Loss function: 4.996, Average Loss: 5.264, avg. samples / sec: 221.93
Iteration:   3780, Loss function: 5.020, Average Loss: 5.259, avg. samples / sec: 172.96
Iteration:   3800, Loss function: 4.843, Average Loss: 5.255, avg. samples / sec: 326.93
Iteration:   3820, Loss function: 5.214, Average Loss: 5.250, avg. samples / sec: 264.66
Iteration:   3840, Loss function: 4.869, Average Loss: 5.246, avg. samples / sec: 275.45
Iteration:   3860, Loss function: 4.905, Average Loss: 5.241, avg. samples / sec: 323.27
Iteration:   3880, Loss function: 5.030, Average Loss: 5.236, avg. samples / sec: 332.90
Iteration:   3900, Loss function: 5.120, Average Loss: 5.232, avg. samples / sec: 300.67
Iteration:   3920, Loss function: 5.176, Average Loss: 5.227, avg. samples / sec: 285.08
Iteration:   3940, Loss function: 5.038, Average Loss: 5.222, avg. samples / sec: 318.12
Iteration:   3960, Loss function: 4.755, Average Loss: 5.218, avg. samples / sec: 321.75
Iteration:   3980, Loss function: 4.951, Average Loss: 5.212, avg. samples / sec: 314.54
Iteration:   4000, Loss function: 4.981, Average Loss: 5.208, avg. samples / sec: 303.47
Iteration:   4020, Loss function: 4.985, Average Loss: 5.202, avg. samples / sec: 322.49
Iteration:   4040, Loss function: 4.900, Average Loss: 5.199, avg. samples / sec: 326.84
Iteration:   4060, Loss function: 5.181, Average Loss: 5.194, avg. samples / sec: 289.78
Iteration:   4080, Loss function: 5.252, Average Loss: 5.191, avg. samples / sec: 294.72
Iteration:   4100, Loss function: 5.375, Average Loss: 5.188, avg. samples / sec: 277.57
:::MLLOG {"namespace": "", "time_ms": 1639152085450, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152085452, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.013, Average Loss: 5.184, avg. samples / sec: 252.19
Iteration:   4140, Loss function: 5.041, Average Loss: 5.180, avg. samples / sec: 311.34
Iteration:   4160, Loss function: 5.013, Average Loss: 5.174, avg. samples / sec: 323.91
Iteration:   4180, Loss function: 5.187, Average Loss: 5.168, avg. samples / sec: 327.63
Iteration:   4200, Loss function: 4.770, Average Loss: 5.163, avg. samples / sec: 322.33
Iteration:   4220, Loss function: 4.739, Average Loss: 5.159, avg. samples / sec: 328.35
Iteration:   4240, Loss function: 4.764, Average Loss: 5.154, avg. samples / sec: 310.56
Iteration:   4260, Loss function: 5.132, Average Loss: 5.149, avg. samples / sec: 221.29
Iteration:   4280, Loss function: 4.995, Average Loss: 5.143, avg. samples / sec: 189.49
Iteration:   4300, Loss function: 4.610, Average Loss: 5.137, avg. samples / sec: 272.65
Iteration:   4320, Loss function: 4.885, Average Loss: 5.133, avg. samples / sec: 330.26
Iteration:   4340, Loss function: 4.792, Average Loss: 5.127, avg. samples / sec: 326.07
Iteration:   4360, Loss function: 4.887, Average Loss: 5.124, avg. samples / sec: 310.88
Iteration:   4380, Loss function: 5.042, Average Loss: 5.120, avg. samples / sec: 322.29
Iteration:   4400, Loss function: 4.742, Average Loss: 5.115, avg. samples / sec: 317.99
Iteration:   4420, Loss function: 4.766, Average Loss: 5.109, avg. samples / sec: 335.28
Iteration:   4440, Loss function: 4.835, Average Loss: 5.104, avg. samples / sec: 330.48
Iteration:   4460, Loss function: 5.105, Average Loss: 5.100, avg. samples / sec: 337.08
Iteration:   4480, Loss function: 4.856, Average Loss: 5.097, avg. samples / sec: 227.67
Iteration:   4500, Loss function: 4.989, Average Loss: 5.094, avg. samples / sec: 298.46
Iteration:   4520, Loss function: 4.786, Average Loss: 5.090, avg. samples / sec: 332.79
Iteration:   4540, Loss function: 5.107, Average Loss: 5.086, avg. samples / sec: 323.57
Iteration:   4560, Loss function: 4.792, Average Loss: 5.082, avg. samples / sec: 320.99
Iteration:   4580, Loss function: 4.760, Average Loss: 5.079, avg. samples / sec: 318.33
Iteration:   4600, Loss function: 4.916, Average Loss: 5.075, avg. samples / sec: 320.69
Iteration:   4620, Loss function: 4.803, Average Loss: 5.071, avg. samples / sec: 303.20
Iteration:   4640, Loss function: 4.684, Average Loss: 5.066, avg. samples / sec: 272.97
Iteration:   4660, Loss function: 4.649, Average Loss: 5.061, avg. samples / sec: 231.77
Iteration:   4680, Loss function: 5.325, Average Loss: 5.057, avg. samples / sec: 334.40
Iteration:   4700, Loss function: 4.646, Average Loss: 5.054, avg. samples / sec: 311.68
Iteration:   4720, Loss function: 4.762, Average Loss: 5.049, avg. samples / sec: 312.64
Iteration:   4740, Loss function: 4.775, Average Loss: 5.044, avg. samples / sec: 285.16
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 318.15
Iteration:   4780, Loss function: 4.979, Average Loss: 5.036, avg. samples / sec: 322.45
Iteration:   4800, Loss function: 4.922, Average Loss: 5.033, avg. samples / sec: 342.20
Iteration:   4820, Loss function: 4.730, Average Loss: 5.031, avg. samples / sec: 320.35
Iteration:   4840, Loss function: 4.992, Average Loss: 5.027, avg. samples / sec: 325.51
Iteration:   4860, Loss function: 4.688, Average Loss: 5.023, avg. samples / sec: 329.16
Iteration:   4880, Loss function: 5.163, Average Loss: 5.020, avg. samples / sec: 316.55
Iteration:   4900, Loss function: 4.633, Average Loss: 5.016, avg. samples / sec: 322.50
Iteration:   4920, Loss function: 4.641, Average Loss: 5.012, avg. samples / sec: 323.86
Iteration:   4940, Loss function: 4.765, Average Loss: 5.008, avg. samples / sec: 324.11
Iteration:   4960, Loss function: 4.595, Average Loss: 5.005, avg. samples / sec: 288.75
Iteration:   4980, Loss function: 4.598, Average Loss: 5.001, avg. samples / sec: 326.10
Iteration:   5000, Loss function: 4.871, Average Loss: 4.998, avg. samples / sec: 313.04
Iteration:   5020, Loss function: 5.016, Average Loss: 4.995, avg. samples / sec: 307.86
Iteration:   5040, Loss function: 4.723, Average Loss: 4.992, avg. samples / sec: 288.37
Iteration:   5060, Loss function: 4.792, Average Loss: 4.989, avg. samples / sec: 264.12
Iteration:   5080, Loss function: 4.373, Average Loss: 4.986, avg. samples / sec: 243.93
Iteration:   5100, Loss function: 4.812, Average Loss: 4.984, avg. samples / sec: 321.85
Iteration:   5120, Loss function: 4.581, Average Loss: 4.981, avg. samples / sec: 274.26
Iteration:   5140, Loss function: 4.743, Average Loss: 4.976, avg. samples / sec: 235.06
:::MLLOG {"namespace": "", "time_ms": 1639152477325, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 84.85 s
:::MLLOG {"namespace": "", "time_ms": 1639152562463, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152562544, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152562544, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=2.32s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.865, Average Loss: 4.971, avg. samples / sec: 24.07
DONE (t=10.30s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10936
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22422
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09584
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19537
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21819
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10936 AP goal: 0.10000
Iteration:   5180, Loss function: 5.017, Average Loss: 4.967, avg. samples / sec: 333.19
:::MLLOG {"namespace": "", "time_ms": 1639152577758, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152577759, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10935548715877631, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152577759, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152581113, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152593
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:53 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:35 PM'
START TIMING RUN WAS 2021-12-10 03:32:35 PM
ENDING TIMING RUN AT 2021-12-10 04:09:53 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:53 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ result=2238
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2238,nvidia,2021-12-10 03:32:35 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2238,nvidia,2021-12-10 03:32:35 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
