+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-c4889.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-c4889.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-c4889.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95
+ MIG_MODE=1
Found 1 MIG instances: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150358
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:38 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:38 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-c4889 to the sync file ...
run-ssd--1-c4889 Found 11 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
Fri Dec 10 15:32:43 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365452, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365570, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1235672144, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1235672144
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150368011, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150368012, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150368020, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472111, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472111, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150473949, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473950, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474372, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474373, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474374, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.961, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.074, Average Loss: 0.456, avg. samples / sec: 296.35
Iteration:     40, Loss function: 20.673, Average Loss: 0.858, avg. samples / sec: 274.46
Iteration:     60, Loss function: 20.444, Average Loss: 1.248, avg. samples / sec: 273.07
Iteration:     80, Loss function: 20.262, Average Loss: 1.623, avg. samples / sec: 256.45
Iteration:    100, Loss function: 16.956, Average Loss: 1.965, avg. samples / sec: 247.55
Iteration:    120, Loss function: 12.189, Average Loss: 2.195, avg. samples / sec: 255.45
Iteration:    140, Loss function: 10.262, Average Loss: 2.368, avg. samples / sec: 244.75
Iteration:    160, Loss function: 9.436, Average Loss: 2.511, avg. samples / sec: 254.59
Iteration:    180, Loss function: 8.881, Average Loss: 2.640, avg. samples / sec: 306.09
Iteration:    200, Loss function: 8.675, Average Loss: 2.765, avg. samples / sec: 245.46
Iteration:    220, Loss function: 8.586, Average Loss: 2.884, avg. samples / sec: 294.90
Iteration:    240, Loss function: 8.560, Average Loss: 2.999, avg. samples / sec: 269.68
Iteration:    260, Loss function: 8.905, Average Loss: 3.115, avg. samples / sec: 288.60
Iteration:    280, Loss function: 8.453, Average Loss: 3.225, avg. samples / sec: 280.62
Iteration:    300, Loss function: 8.205, Average Loss: 3.327, avg. samples / sec: 286.58
Iteration:    320, Loss function: 8.493, Average Loss: 3.427, avg. samples / sec: 289.82
Iteration:    340, Loss function: 8.467, Average Loss: 3.525, avg. samples / sec: 285.62
Iteration:    360, Loss function: 8.014, Average Loss: 3.618, avg. samples / sec: 243.61
Iteration:    380, Loss function: 8.002, Average Loss: 3.707, avg. samples / sec: 227.41
Iteration:    400, Loss function: 8.013, Average Loss: 3.792, avg. samples / sec: 277.47
Iteration:    420, Loss function: 7.676, Average Loss: 3.874, avg. samples / sec: 272.94
Iteration:    440, Loss function: 7.873, Average Loss: 3.952, avg. samples / sec: 299.54
Iteration:    460, Loss function: 7.910, Average Loss: 4.028, avg. samples / sec: 210.53
Iteration:    480, Loss function: 7.413, Average Loss: 4.101, avg. samples / sec: 256.68
Iteration:    500, Loss function: 7.833, Average Loss: 4.171, avg. samples / sec: 222.29
Iteration:    520, Loss function: 7.574, Average Loss: 4.239, avg. samples / sec: 272.67
Iteration:    540, Loss function: 7.612, Average Loss: 4.304, avg. samples / sec: 284.79
Iteration:    560, Loss function: 7.358, Average Loss: 4.368, avg. samples / sec: 333.75
Iteration:    580, Loss function: 7.019, Average Loss: 4.429, avg. samples / sec: 272.75
Iteration:    600, Loss function: 7.392, Average Loss: 4.488, avg. samples / sec: 327.47
Iteration:    620, Loss function: 6.935, Average Loss: 4.542, avg. samples / sec: 329.34
Iteration:    640, Loss function: 6.937, Average Loss: 4.595, avg. samples / sec: 330.38
Iteration:    660, Loss function: 7.355, Average Loss: 4.648, avg. samples / sec: 317.94
Iteration:    680, Loss function: 7.324, Average Loss: 4.698, avg. samples / sec: 335.83
Iteration:    700, Loss function: 6.846, Average Loss: 4.745, avg. samples / sec: 320.75
Iteration:    720, Loss function: 7.165, Average Loss: 4.795, avg. samples / sec: 330.84
Iteration:    740, Loss function: 6.819, Average Loss: 4.839, avg. samples / sec: 279.96
Iteration:    760, Loss function: 7.189, Average Loss: 4.882, avg. samples / sec: 266.44
Iteration:    780, Loss function: 6.934, Average Loss: 4.924, avg. samples / sec: 314.95
Iteration:    800, Loss function: 7.114, Average Loss: 4.963, avg. samples / sec: 324.25
Iteration:    820, Loss function: 6.900, Average Loss: 5.001, avg. samples / sec: 325.43
Iteration:    840, Loss function: 6.746, Average Loss: 5.037, avg. samples / sec: 326.55
Iteration:    860, Loss function: 6.845, Average Loss: 5.070, avg. samples / sec: 279.66
Iteration:    880, Loss function: 6.600, Average Loss: 5.101, avg. samples / sec: 298.55
Iteration:    900, Loss function: 6.816, Average Loss: 5.131, avg. samples / sec: 313.58
Iteration:    920, Loss function: 6.717, Average Loss: 5.160, avg. samples / sec: 258.35
Iteration:    940, Loss function: 6.799, Average Loss: 5.189, avg. samples / sec: 306.50
Iteration:    960, Loss function: 6.259, Average Loss: 5.217, avg. samples / sec: 298.71
Iteration:    980, Loss function: 6.527, Average Loss: 5.243, avg. samples / sec: 324.41
Iteration:   1000, Loss function: 6.699, Average Loss: 5.269, avg. samples / sec: 330.34
Iteration:   1020, Loss function: 6.339, Average Loss: 5.292, avg. samples / sec: 280.42
:::MLLOG {"namespace": "", "time_ms": 1639150887961, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150887965, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.565, Average Loss: 5.315, avg. samples / sec: 306.30
Iteration:   1060, Loss function: 6.390, Average Loss: 5.338, avg. samples / sec: 324.62
Iteration:   1080, Loss function: 6.289, Average Loss: 5.359, avg. samples / sec: 325.09
Iteration:   1100, Loss function: 6.277, Average Loss: 5.379, avg. samples / sec: 327.64
Iteration:   1120, Loss function: 6.015, Average Loss: 5.397, avg. samples / sec: 324.79
Iteration:   1140, Loss function: 6.534, Average Loss: 5.417, avg. samples / sec: 329.84
Iteration:   1160, Loss function: 6.254, Average Loss: 5.434, avg. samples / sec: 328.21
Iteration:   1180, Loss function: 6.277, Average Loss: 5.450, avg. samples / sec: 330.83
Iteration:   1200, Loss function: 6.322, Average Loss: 5.466, avg. samples / sec: 326.70
Iteration:   1220, Loss function: 6.157, Average Loss: 5.482, avg. samples / sec: 214.31
Iteration:   1240, Loss function: 5.842, Average Loss: 5.495, avg. samples / sec: 310.17
Iteration:   1260, Loss function: 6.048, Average Loss: 5.507, avg. samples / sec: 302.68
Iteration:   1280, Loss function: 5.928, Average Loss: 5.519, avg. samples / sec: 317.11
Iteration:   1300, Loss function: 6.264, Average Loss: 5.532, avg. samples / sec: 293.83
Iteration:   1320, Loss function: 6.294, Average Loss: 5.544, avg. samples / sec: 322.47
Iteration:   1340, Loss function: 6.006, Average Loss: 5.554, avg. samples / sec: 279.08
Iteration:   1360, Loss function: 6.205, Average Loss: 5.564, avg. samples / sec: 238.16
Iteration:   1380, Loss function: 6.220, Average Loss: 5.574, avg. samples / sec: 175.43
Iteration:   1400, Loss function: 6.112, Average Loss: 5.583, avg. samples / sec: 291.41
Iteration:   1420, Loss function: 5.863, Average Loss: 5.591, avg. samples / sec: 295.15
Iteration:   1440, Loss function: 6.264, Average Loss: 5.599, avg. samples / sec: 313.60
Iteration:   1460, Loss function: 6.060, Average Loss: 5.607, avg. samples / sec: 289.79
Iteration:   1480, Loss function: 5.937, Average Loss: 5.615, avg. samples / sec: 302.81
Iteration:   1500, Loss function: 5.980, Average Loss: 5.622, avg. samples / sec: 215.58
Iteration:   1520, Loss function: 6.105, Average Loss: 5.628, avg. samples / sec: 258.69
Iteration:   1540, Loss function: 5.890, Average Loss: 5.631, avg. samples / sec: 327.78
Iteration:   1560, Loss function: 5.765, Average Loss: 5.635, avg. samples / sec: 316.98
Iteration:   1580, Loss function: 5.764, Average Loss: 5.640, avg. samples / sec: 322.50
Iteration:   1600, Loss function: 6.075, Average Loss: 5.646, avg. samples / sec: 325.04
Iteration:   1620, Loss function: 5.758, Average Loss: 5.650, avg. samples / sec: 337.89
Iteration:   1640, Loss function: 5.988, Average Loss: 5.653, avg. samples / sec: 246.06
Iteration:   1660, Loss function: 5.747, Average Loss: 5.657, avg. samples / sec: 310.27
Iteration:   1680, Loss function: 5.776, Average Loss: 5.659, avg. samples / sec: 320.96
Iteration:   1700, Loss function: 5.370, Average Loss: 5.663, avg. samples / sec: 323.99
Iteration:   1720, Loss function: 5.680, Average Loss: 5.665, avg. samples / sec: 316.20
Iteration:   1740, Loss function: 5.834, Average Loss: 5.666, avg. samples / sec: 267.14
Iteration:   1760, Loss function: 5.718, Average Loss: 5.667, avg. samples / sec: 329.02
Iteration:   1780, Loss function: 5.712, Average Loss: 5.668, avg. samples / sec: 299.75
Iteration:   1800, Loss function: 5.672, Average Loss: 5.671, avg. samples / sec: 337.79
Iteration:   1820, Loss function: 5.827, Average Loss: 5.672, avg. samples / sec: 313.31
Iteration:   1840, Loss function: 5.965, Average Loss: 5.672, avg. samples / sec: 338.36
Iteration:   1860, Loss function: 5.864, Average Loss: 5.672, avg. samples / sec: 322.37
Iteration:   1880, Loss function: 5.938, Average Loss: 5.674, avg. samples / sec: 239.02
Iteration:   1900, Loss function: 5.884, Average Loss: 5.676, avg. samples / sec: 280.75
Iteration:   1920, Loss function: 5.732, Average Loss: 5.676, avg. samples / sec: 316.00
Iteration:   1940, Loss function: 5.789, Average Loss: 5.675, avg. samples / sec: 300.32
Iteration:   1960, Loss function: 5.463, Average Loss: 5.674, avg. samples / sec: 295.38
Iteration:   1980, Loss function: 5.523, Average Loss: 5.672, avg. samples / sec: 288.38
Iteration:   2000, Loss function: 5.617, Average Loss: 5.671, avg. samples / sec: 289.36
Iteration:   2020, Loss function: 5.671, Average Loss: 5.670, avg. samples / sec: 250.10
Iteration:   2040, Loss function: 5.663, Average Loss: 5.669, avg. samples / sec: 309.27
:::MLLOG {"namespace": "", "time_ms": 1639151286301, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151286304, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.449, Average Loss: 5.666, avg. samples / sec: 324.98
Iteration:   2080, Loss function: 5.134, Average Loss: 5.663, avg. samples / sec: 284.11
Iteration:   2100, Loss function: 5.657, Average Loss: 5.660, avg. samples / sec: 291.32
Iteration:   2120, Loss function: 5.371, Average Loss: 5.657, avg. samples / sec: 270.26
Iteration:   2140, Loss function: 5.500, Average Loss: 5.654, avg. samples / sec: 212.07
Iteration:   2160, Loss function: 5.443, Average Loss: 5.651, avg. samples / sec: 199.48
Iteration:   2180, Loss function: 5.408, Average Loss: 5.648, avg. samples / sec: 312.67
Iteration:   2200, Loss function: 5.563, Average Loss: 5.644, avg. samples / sec: 321.57
Iteration:   2220, Loss function: 5.691, Average Loss: 5.642, avg. samples / sec: 327.89
Iteration:   2240, Loss function: 5.478, Average Loss: 5.639, avg. samples / sec: 311.93
Iteration:   2260, Loss function: 5.321, Average Loss: 5.635, avg. samples / sec: 332.38
Iteration:   2280, Loss function: 5.355, Average Loss: 5.633, avg. samples / sec: 304.45
Iteration:   2300, Loss function: 5.176, Average Loss: 5.629, avg. samples / sec: 278.19
Iteration:   2320, Loss function: 5.289, Average Loss: 5.626, avg. samples / sec: 264.72
Iteration:   2340, Loss function: 5.583, Average Loss: 5.622, avg. samples / sec: 292.44
Iteration:   2360, Loss function: 5.216, Average Loss: 5.617, avg. samples / sec: 318.58
Iteration:   2380, Loss function: 5.384, Average Loss: 5.614, avg. samples / sec: 311.69
Iteration:   2400, Loss function: 5.821, Average Loss: 5.610, avg. samples / sec: 332.58
Iteration:   2420, Loss function: 5.568, Average Loss: 5.606, avg. samples / sec: 311.35
Iteration:   2440, Loss function: 5.171, Average Loss: 5.602, avg. samples / sec: 294.93
Iteration:   2460, Loss function: 5.176, Average Loss: 5.599, avg. samples / sec: 294.22
Iteration:   2480, Loss function: 5.343, Average Loss: 5.595, avg. samples / sec: 273.31
Iteration:   2500, Loss function: 5.439, Average Loss: 5.591, avg. samples / sec: 238.70
Iteration:   2520, Loss function: 5.431, Average Loss: 5.587, avg. samples / sec: 288.39
Iteration:   2540, Loss function: 5.615, Average Loss: 5.583, avg. samples / sec: 309.47
Iteration:   2560, Loss function: 5.383, Average Loss: 5.580, avg. samples / sec: 342.38
Iteration:   2580, Loss function: 5.271, Average Loss: 5.575, avg. samples / sec: 334.51
Iteration:   2600, Loss function: 5.465, Average Loss: 5.571, avg. samples / sec: 308.35
Iteration:   2620, Loss function: 5.404, Average Loss: 5.567, avg. samples / sec: 271.56
Iteration:   2640, Loss function: 5.169, Average Loss: 5.564, avg. samples / sec: 233.73
Iteration:   2660, Loss function: 5.178, Average Loss: 5.559, avg. samples / sec: 289.90
Iteration:   2680, Loss function: 5.360, Average Loss: 5.555, avg. samples / sec: 311.37
Iteration:   2700, Loss function: 5.150, Average Loss: 5.549, avg. samples / sec: 314.45
Iteration:   2720, Loss function: 5.286, Average Loss: 5.545, avg. samples / sec: 288.54
Iteration:   2740, Loss function: 5.155, Average Loss: 5.541, avg. samples / sec: 326.89
Iteration:   2760, Loss function: 4.896, Average Loss: 5.535, avg. samples / sec: 324.89
Iteration:   2780, Loss function: 5.538, Average Loss: 5.531, avg. samples / sec: 326.55
Iteration:   2800, Loss function: 5.146, Average Loss: 5.527, avg. samples / sec: 328.17
Iteration:   2820, Loss function: 5.416, Average Loss: 5.522, avg. samples / sec: 341.85
Iteration:   2840, Loss function: 5.246, Average Loss: 5.518, avg. samples / sec: 333.14
Iteration:   2860, Loss function: 5.156, Average Loss: 5.512, avg. samples / sec: 331.51
Iteration:   2880, Loss function: 5.207, Average Loss: 5.507, avg. samples / sec: 340.59
Iteration:   2900, Loss function: 5.145, Average Loss: 5.502, avg. samples / sec: 246.06
Iteration:   2920, Loss function: 5.259, Average Loss: 5.496, avg. samples / sec: 237.10
Iteration:   2940, Loss function: 5.042, Average Loss: 5.491, avg. samples / sec: 221.08
Iteration:   2960, Loss function: 5.395, Average Loss: 5.487, avg. samples / sec: 257.32
Iteration:   2980, Loss function: 5.120, Average Loss: 5.483, avg. samples / sec: 302.90
Iteration:   3000, Loss function: 5.346, Average Loss: 5.478, avg. samples / sec: 269.89
Iteration:   3020, Loss function: 5.217, Average Loss: 5.472, avg. samples / sec: 325.51
Iteration:   3040, Loss function: 5.257, Average Loss: 5.467, avg. samples / sec: 329.75
Iteration:   3060, Loss function: 5.053, Average Loss: 5.461, avg. samples / sec: 311.37
Iteration:   3080, Loss function: 4.953, Average Loss: 5.455, avg. samples / sec: 311.09
:::MLLOG {"namespace": "", "time_ms": 1639151687384, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151687385, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.084, Average Loss: 5.450, avg. samples / sec: 321.51
Iteration:   3120, Loss function: 5.010, Average Loss: 5.443, avg. samples / sec: 328.55
Iteration:   3140, Loss function: 5.049, Average Loss: 5.439, avg. samples / sec: 243.72
Iteration:   3160, Loss function: 5.588, Average Loss: 5.434, avg. samples / sec: 313.53
Iteration:   3180, Loss function: 5.045, Average Loss: 5.430, avg. samples / sec: 299.46
Iteration:   3200, Loss function: 5.090, Average Loss: 5.424, avg. samples / sec: 227.18
Iteration:   3220, Loss function: 5.144, Average Loss: 5.419, avg. samples / sec: 272.60
Iteration:   3240, Loss function: 5.290, Average Loss: 5.413, avg. samples / sec: 301.00
Iteration:   3260, Loss function: 5.172, Average Loss: 5.408, avg. samples / sec: 258.30
Iteration:   3280, Loss function: 4.992, Average Loss: 5.402, avg. samples / sec: 324.02
Iteration:   3300, Loss function: 4.684, Average Loss: 5.397, avg. samples / sec: 293.51
Iteration:   3320, Loss function: 4.955, Average Loss: 5.392, avg. samples / sec: 272.18
Iteration:   3340, Loss function: 5.174, Average Loss: 5.388, avg. samples / sec: 328.21
Iteration:   3360, Loss function: 5.184, Average Loss: 5.381, avg. samples / sec: 282.92
Iteration:   3380, Loss function: 5.189, Average Loss: 5.374, avg. samples / sec: 330.34
Iteration:   3400, Loss function: 5.006, Average Loss: 5.370, avg. samples / sec: 316.92
Iteration:   3420, Loss function: 5.266, Average Loss: 5.364, avg. samples / sec: 303.70
Iteration:   3440, Loss function: 4.843, Average Loss: 5.358, avg. samples / sec: 321.17
Iteration:   3460, Loss function: 5.374, Average Loss: 5.354, avg. samples / sec: 330.95
Iteration:   3480, Loss function: 5.220, Average Loss: 5.349, avg. samples / sec: 330.17
Iteration:   3500, Loss function: 5.321, Average Loss: 5.345, avg. samples / sec: 320.16
Iteration:   3520, Loss function: 5.100, Average Loss: 5.341, avg. samples / sec: 318.41
Iteration:   3540, Loss function: 5.014, Average Loss: 5.336, avg. samples / sec: 319.89
Iteration:   3560, Loss function: 5.142, Average Loss: 5.332, avg. samples / sec: 304.58
Iteration:   3580, Loss function: 5.307, Average Loss: 5.328, avg. samples / sec: 307.54
Iteration:   3600, Loss function: 5.258, Average Loss: 5.321, avg. samples / sec: 313.05
Iteration:   3620, Loss function: 4.882, Average Loss: 5.316, avg. samples / sec: 312.29
Iteration:   3640, Loss function: 4.844, Average Loss: 5.310, avg. samples / sec: 326.99
Iteration:   3660, Loss function: 5.034, Average Loss: 5.306, avg. samples / sec: 303.50
Iteration:   3680, Loss function: 5.080, Average Loss: 5.301, avg. samples / sec: 328.22
Iteration:   3700, Loss function: 5.029, Average Loss: 5.296, avg. samples / sec: 318.22
Iteration:   3720, Loss function: 5.043, Average Loss: 5.291, avg. samples / sec: 297.57
Iteration:   3740, Loss function: 5.263, Average Loss: 5.287, avg. samples / sec: 300.95
Iteration:   3760, Loss function: 4.996, Average Loss: 5.283, avg. samples / sec: 245.41
Iteration:   3780, Loss function: 5.093, Average Loss: 5.278, avg. samples / sec: 240.36
Iteration:   3800, Loss function: 5.173, Average Loss: 5.274, avg. samples / sec: 270.02
Iteration:   3820, Loss function: 5.216, Average Loss: 5.270, avg. samples / sec: 313.88
Iteration:   3840, Loss function: 4.849, Average Loss: 5.265, avg. samples / sec: 315.18
Iteration:   3860, Loss function: 4.952, Average Loss: 5.260, avg. samples / sec: 293.69
Iteration:   3880, Loss function: 5.059, Average Loss: 5.254, avg. samples / sec: 215.78
Iteration:   3900, Loss function: 5.174, Average Loss: 5.250, avg. samples / sec: 283.75
Iteration:   3920, Loss function: 5.353, Average Loss: 5.245, avg. samples / sec: 316.49
Iteration:   3940, Loss function: 5.111, Average Loss: 5.240, avg. samples / sec: 332.18
Iteration:   3960, Loss function: 4.737, Average Loss: 5.235, avg. samples / sec: 331.29
Iteration:   3980, Loss function: 4.944, Average Loss: 5.230, avg. samples / sec: 335.24
Iteration:   4000, Loss function: 5.159, Average Loss: 5.226, avg. samples / sec: 315.56
Iteration:   4020, Loss function: 5.017, Average Loss: 5.221, avg. samples / sec: 290.68
Iteration:   4040, Loss function: 5.039, Average Loss: 5.217, avg. samples / sec: 302.58
Iteration:   4060, Loss function: 5.097, Average Loss: 5.213, avg. samples / sec: 300.86
Iteration:   4080, Loss function: 5.230, Average Loss: 5.209, avg. samples / sec: 243.05
Iteration:   4100, Loss function: 4.961, Average Loss: 5.206, avg. samples / sec: 319.86
:::MLLOG {"namespace": "", "time_ms": 1639152084233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152084235, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.023, Average Loss: 5.202, avg. samples / sec: 208.59
Iteration:   4140, Loss function: 5.052, Average Loss: 5.197, avg. samples / sec: 238.65
Iteration:   4160, Loss function: 4.978, Average Loss: 5.191, avg. samples / sec: 327.05
Iteration:   4180, Loss function: 4.885, Average Loss: 5.185, avg. samples / sec: 319.66
Iteration:   4200, Loss function: 4.919, Average Loss: 5.180, avg. samples / sec: 210.38
Iteration:   4220, Loss function: 4.804, Average Loss: 5.175, avg. samples / sec: 289.83
Iteration:   4240, Loss function: 5.026, Average Loss: 5.169, avg. samples / sec: 323.62
Iteration:   4260, Loss function: 5.063, Average Loss: 5.164, avg. samples / sec: 263.13
Iteration:   4280, Loss function: 4.840, Average Loss: 5.158, avg. samples / sec: 319.92
Iteration:   4300, Loss function: 4.899, Average Loss: 5.152, avg. samples / sec: 314.69
Iteration:   4320, Loss function: 4.641, Average Loss: 5.147, avg. samples / sec: 308.00
Iteration:   4340, Loss function: 4.695, Average Loss: 5.141, avg. samples / sec: 271.72
Iteration:   4360, Loss function: 4.857, Average Loss: 5.136, avg. samples / sec: 321.57
Iteration:   4380, Loss function: 5.118, Average Loss: 5.132, avg. samples / sec: 328.69
Iteration:   4400, Loss function: 4.906, Average Loss: 5.127, avg. samples / sec: 321.67
Iteration:   4420, Loss function: 4.796, Average Loss: 5.123, avg. samples / sec: 238.25
Iteration:   4440, Loss function: 4.769, Average Loss: 5.118, avg. samples / sec: 237.74
Iteration:   4460, Loss function: 5.140, Average Loss: 5.114, avg. samples / sec: 293.92
Iteration:   4480, Loss function: 4.990, Average Loss: 5.111, avg. samples / sec: 309.27
Iteration:   4500, Loss function: 4.730, Average Loss: 5.107, avg. samples / sec: 334.38
Iteration:   4520, Loss function: 4.572, Average Loss: 5.102, avg. samples / sec: 325.75
Iteration:   4540, Loss function: 5.076, Average Loss: 5.098, avg. samples / sec: 334.58
Iteration:   4560, Loss function: 4.739, Average Loss: 5.095, avg. samples / sec: 285.38
Iteration:   4580, Loss function: 4.755, Average Loss: 5.092, avg. samples / sec: 315.49
Iteration:   4600, Loss function: 5.010, Average Loss: 5.088, avg. samples / sec: 309.98
Iteration:   4620, Loss function: 4.843, Average Loss: 5.084, avg. samples / sec: 296.81
Iteration:   4640, Loss function: 4.772, Average Loss: 5.078, avg. samples / sec: 261.36
Iteration:   4660, Loss function: 4.838, Average Loss: 5.074, avg. samples / sec: 302.41
Iteration:   4680, Loss function: 5.319, Average Loss: 5.069, avg. samples / sec: 317.16
Iteration:   4700, Loss function: 4.776, Average Loss: 5.067, avg. samples / sec: 306.84
Iteration:   4720, Loss function: 4.759, Average Loss: 5.061, avg. samples / sec: 306.35
Iteration:   4740, Loss function: 4.873, Average Loss: 5.057, avg. samples / sec: 292.22
Iteration:   4760, Loss function: 4.621, Average Loss: 5.053, avg. samples / sec: 324.37
Iteration:   4780, Loss function: 4.984, Average Loss: 5.050, avg. samples / sec: 276.16
Iteration:   4800, Loss function: 4.898, Average Loss: 5.046, avg. samples / sec: 271.98
Iteration:   4820, Loss function: 4.639, Average Loss: 5.042, avg. samples / sec: 238.21
Iteration:   4840, Loss function: 5.286, Average Loss: 5.038, avg. samples / sec: 216.17
Iteration:   4860, Loss function: 4.865, Average Loss: 5.034, avg. samples / sec: 286.78
Iteration:   4880, Loss function: 5.197, Average Loss: 5.030, avg. samples / sec: 280.51
Iteration:   4900, Loss function: 4.526, Average Loss: 5.027, avg. samples / sec: 307.89
Iteration:   4920, Loss function: 4.743, Average Loss: 5.023, avg. samples / sec: 310.73
Iteration:   4940, Loss function: 4.686, Average Loss: 5.019, avg. samples / sec: 328.02
Iteration:   4960, Loss function: 4.745, Average Loss: 5.016, avg. samples / sec: 281.88
Iteration:   4980, Loss function: 4.648, Average Loss: 5.012, avg. samples / sec: 307.19
Iteration:   5000, Loss function: 4.658, Average Loss: 5.008, avg. samples / sec: 324.49
Iteration:   5020, Loss function: 4.984, Average Loss: 5.005, avg. samples / sec: 318.22
Iteration:   5040, Loss function: 4.851, Average Loss: 5.002, avg. samples / sec: 323.93
Iteration:   5060, Loss function: 4.793, Average Loss: 4.999, avg. samples / sec: 251.60
Iteration:   5080, Loss function: 4.474, Average Loss: 4.995, avg. samples / sec: 257.09
Iteration:   5100, Loss function: 4.826, Average Loss: 4.993, avg. samples / sec: 287.19
Iteration:   5120, Loss function: 4.533, Average Loss: 4.989, avg. samples / sec: 244.14
Iteration:   5140, Loss function: 4.856, Average Loss: 4.986, avg. samples / sec: 301.43
:::MLLOG {"namespace": "", "time_ms": 1639152491048, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 87.40 s
:::MLLOG {"namespace": "", "time_ms": 1639152578626, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152578652, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152578652, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.036, Average Loss: 4.981, avg. samples / sec: 23.63
DONE (t=6.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10918
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21953
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10015
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19381
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10918 AP goal: 0.10000
Iteration:   5180, Loss function: 4.797, Average Loss: 4.976, avg. samples / sec: 340.47
:::MLLOG {"namespace": "", "time_ms": 1639152592662, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592663, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1091794368937245, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592663, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595206, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:00 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:00 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365452, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365570, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1235672144, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1235672144
:::MLLOG {"namespace": "", "time_ms": 1639150368011, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150368012, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150368019, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150368020, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472111, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472111, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150473949, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473950, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474372, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474373, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474374, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.961, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.074, Average Loss: 0.456, avg. samples / sec: 296.35
Iteration:     40, Loss function: 20.673, Average Loss: 0.858, avg. samples / sec: 274.46
Iteration:     60, Loss function: 20.444, Average Loss: 1.248, avg. samples / sec: 273.07
Iteration:     80, Loss function: 20.262, Average Loss: 1.623, avg. samples / sec: 256.45
Iteration:    100, Loss function: 16.956, Average Loss: 1.965, avg. samples / sec: 247.55
Iteration:    120, Loss function: 12.189, Average Loss: 2.195, avg. samples / sec: 255.45
Iteration:    140, Loss function: 10.262, Average Loss: 2.368, avg. samples / sec: 244.75
Iteration:    160, Loss function: 9.436, Average Loss: 2.511, avg. samples / sec: 254.59
Iteration:    180, Loss function: 8.881, Average Loss: 2.640, avg. samples / sec: 306.09
Iteration:    200, Loss function: 8.675, Average Loss: 2.765, avg. samples / sec: 245.46
Iteration:    220, Loss function: 8.586, Average Loss: 2.884, avg. samples / sec: 294.90
Iteration:    240, Loss function: 8.560, Average Loss: 2.999, avg. samples / sec: 269.68
Iteration:    260, Loss function: 8.905, Average Loss: 3.115, avg. samples / sec: 288.60
Iteration:    280, Loss function: 8.453, Average Loss: 3.225, avg. samples / sec: 280.62
Iteration:    300, Loss function: 8.205, Average Loss: 3.327, avg. samples / sec: 286.58
Iteration:    320, Loss function: 8.493, Average Loss: 3.427, avg. samples / sec: 289.82
Iteration:    340, Loss function: 8.467, Average Loss: 3.525, avg. samples / sec: 285.62
Iteration:    360, Loss function: 8.014, Average Loss: 3.618, avg. samples / sec: 243.61
Iteration:    380, Loss function: 8.002, Average Loss: 3.707, avg. samples / sec: 227.41
Iteration:    400, Loss function: 8.013, Average Loss: 3.792, avg. samples / sec: 277.47
Iteration:    420, Loss function: 7.676, Average Loss: 3.874, avg. samples / sec: 272.94
Iteration:    440, Loss function: 7.873, Average Loss: 3.952, avg. samples / sec: 299.54
Iteration:    460, Loss function: 7.910, Average Loss: 4.028, avg. samples / sec: 210.53
Iteration:    480, Loss function: 7.413, Average Loss: 4.101, avg. samples / sec: 256.68
Iteration:    500, Loss function: 7.833, Average Loss: 4.171, avg. samples / sec: 222.29
Iteration:    520, Loss function: 7.574, Average Loss: 4.239, avg. samples / sec: 272.67
Iteration:    540, Loss function: 7.612, Average Loss: 4.304, avg. samples / sec: 284.79
Iteration:    560, Loss function: 7.358, Average Loss: 4.368, avg. samples / sec: 333.75
Iteration:    580, Loss function: 7.019, Average Loss: 4.429, avg. samples / sec: 272.75
Iteration:    600, Loss function: 7.392, Average Loss: 4.488, avg. samples / sec: 327.47
Iteration:    620, Loss function: 6.935, Average Loss: 4.542, avg. samples / sec: 329.34
Iteration:    640, Loss function: 6.937, Average Loss: 4.595, avg. samples / sec: 330.38
Iteration:    660, Loss function: 7.355, Average Loss: 4.648, avg. samples / sec: 317.94
Iteration:    680, Loss function: 7.324, Average Loss: 4.698, avg. samples / sec: 335.83
Iteration:    700, Loss function: 6.846, Average Loss: 4.745, avg. samples / sec: 320.75
Iteration:    720, Loss function: 7.165, Average Loss: 4.795, avg. samples / sec: 330.84
Iteration:    740, Loss function: 6.819, Average Loss: 4.839, avg. samples / sec: 279.96
Iteration:    760, Loss function: 7.189, Average Loss: 4.882, avg. samples / sec: 266.44
Iteration:    780, Loss function: 6.934, Average Loss: 4.924, avg. samples / sec: 314.95
Iteration:    800, Loss function: 7.114, Average Loss: 4.963, avg. samples / sec: 324.25
Iteration:    820, Loss function: 6.900, Average Loss: 5.001, avg. samples / sec: 325.43
Iteration:    840, Loss function: 6.746, Average Loss: 5.037, avg. samples / sec: 326.55
Iteration:    860, Loss function: 6.845, Average Loss: 5.070, avg. samples / sec: 279.66
Iteration:    880, Loss function: 6.600, Average Loss: 5.101, avg. samples / sec: 298.55
Iteration:    900, Loss function: 6.816, Average Loss: 5.131, avg. samples / sec: 313.58
Iteration:    920, Loss function: 6.717, Average Loss: 5.160, avg. samples / sec: 258.35
Iteration:    940, Loss function: 6.799, Average Loss: 5.189, avg. samples / sec: 306.50
Iteration:    960, Loss function: 6.259, Average Loss: 5.217, avg. samples / sec: 298.71
Iteration:    980, Loss function: 6.527, Average Loss: 5.243, avg. samples / sec: 324.41
Iteration:   1000, Loss function: 6.699, Average Loss: 5.269, avg. samples / sec: 330.34
Iteration:   1020, Loss function: 6.339, Average Loss: 5.292, avg. samples / sec: 280.42
:::MLLOG {"namespace": "", "time_ms": 1639150887961, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150887965, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.565, Average Loss: 5.315, avg. samples / sec: 306.30
Iteration:   1060, Loss function: 6.390, Average Loss: 5.338, avg. samples / sec: 324.62
Iteration:   1080, Loss function: 6.289, Average Loss: 5.359, avg. samples / sec: 325.09
Iteration:   1100, Loss function: 6.277, Average Loss: 5.379, avg. samples / sec: 327.64
Iteration:   1120, Loss function: 6.015, Average Loss: 5.397, avg. samples / sec: 324.79
Iteration:   1140, Loss function: 6.534, Average Loss: 5.417, avg. samples / sec: 329.84
Iteration:   1160, Loss function: 6.254, Average Loss: 5.434, avg. samples / sec: 328.21
Iteration:   1180, Loss function: 6.277, Average Loss: 5.450, avg. samples / sec: 330.83
Iteration:   1200, Loss function: 6.322, Average Loss: 5.466, avg. samples / sec: 326.70
Iteration:   1220, Loss function: 6.157, Average Loss: 5.482, avg. samples / sec: 214.31
Iteration:   1240, Loss function: 5.842, Average Loss: 5.495, avg. samples / sec: 310.17
Iteration:   1260, Loss function: 6.048, Average Loss: 5.507, avg. samples / sec: 302.68
Iteration:   1280, Loss function: 5.928, Average Loss: 5.519, avg. samples / sec: 317.11
Iteration:   1300, Loss function: 6.264, Average Loss: 5.532, avg. samples / sec: 293.83
Iteration:   1320, Loss function: 6.294, Average Loss: 5.544, avg. samples / sec: 322.47
Iteration:   1340, Loss function: 6.006, Average Loss: 5.554, avg. samples / sec: 279.08
Iteration:   1360, Loss function: 6.205, Average Loss: 5.564, avg. samples / sec: 238.16
Iteration:   1380, Loss function: 6.220, Average Loss: 5.574, avg. samples / sec: 175.43
Iteration:   1400, Loss function: 6.112, Average Loss: 5.583, avg. samples / sec: 291.41
Iteration:   1420, Loss function: 5.863, Average Loss: 5.591, avg. samples / sec: 295.15
Iteration:   1440, Loss function: 6.264, Average Loss: 5.599, avg. samples / sec: 313.60
Iteration:   1460, Loss function: 6.060, Average Loss: 5.607, avg. samples / sec: 289.79
Iteration:   1480, Loss function: 5.937, Average Loss: 5.615, avg. samples / sec: 302.81
Iteration:   1500, Loss function: 5.980, Average Loss: 5.622, avg. samples / sec: 215.58
Iteration:   1520, Loss function: 6.105, Average Loss: 5.628, avg. samples / sec: 258.69
Iteration:   1540, Loss function: 5.890, Average Loss: 5.631, avg. samples / sec: 327.78
Iteration:   1560, Loss function: 5.765, Average Loss: 5.635, avg. samples / sec: 316.98
Iteration:   1580, Loss function: 5.764, Average Loss: 5.640, avg. samples / sec: 322.50
Iteration:   1600, Loss function: 6.075, Average Loss: 5.646, avg. samples / sec: 325.04
Iteration:   1620, Loss function: 5.758, Average Loss: 5.650, avg. samples / sec: 337.89
Iteration:   1640, Loss function: 5.988, Average Loss: 5.653, avg. samples / sec: 246.06
Iteration:   1660, Loss function: 5.747, Average Loss: 5.657, avg. samples / sec: 310.27
Iteration:   1680, Loss function: 5.776, Average Loss: 5.659, avg. samples / sec: 320.96
Iteration:   1700, Loss function: 5.370, Average Loss: 5.663, avg. samples / sec: 323.99
Iteration:   1720, Loss function: 5.680, Average Loss: 5.665, avg. samples / sec: 316.20
Iteration:   1740, Loss function: 5.834, Average Loss: 5.666, avg. samples / sec: 267.14
Iteration:   1760, Loss function: 5.718, Average Loss: 5.667, avg. samples / sec: 329.02
Iteration:   1780, Loss function: 5.712, Average Loss: 5.668, avg. samples / sec: 299.75
Iteration:   1800, Loss function: 5.672, Average Loss: 5.671, avg. samples / sec: 337.79
Iteration:   1820, Loss function: 5.827, Average Loss: 5.672, avg. samples / sec: 313.31
Iteration:   1840, Loss function: 5.965, Average Loss: 5.672, avg. samples / sec: 338.36
Iteration:   1860, Loss function: 5.864, Average Loss: 5.672, avg. samples / sec: 322.37
Iteration:   1880, Loss function: 5.938, Average Loss: 5.674, avg. samples / sec: 239.02
Iteration:   1900, Loss function: 5.884, Average Loss: 5.676, avg. samples / sec: 280.75
Iteration:   1920, Loss function: 5.732, Average Loss: 5.676, avg. samples / sec: 316.00
Iteration:   1940, Loss function: 5.789, Average Loss: 5.675, avg. samples / sec: 300.32
Iteration:   1960, Loss function: 5.463, Average Loss: 5.674, avg. samples / sec: 295.38
Iteration:   1980, Loss function: 5.523, Average Loss: 5.672, avg. samples / sec: 288.38
Iteration:   2000, Loss function: 5.617, Average Loss: 5.671, avg. samples / sec: 289.36
Iteration:   2020, Loss function: 5.671, Average Loss: 5.670, avg. samples / sec: 250.10
Iteration:   2040, Loss function: 5.663, Average Loss: 5.669, avg. samples / sec: 309.27
:::MLLOG {"namespace": "", "time_ms": 1639151286301, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151286304, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.449, Average Loss: 5.666, avg. samples / sec: 324.98
Iteration:   2080, Loss function: 5.134, Average Loss: 5.663, avg. samples / sec: 284.11
Iteration:   2100, Loss function: 5.657, Average Loss: 5.660, avg. samples / sec: 291.32
Iteration:   2120, Loss function: 5.371, Average Loss: 5.657, avg. samples / sec: 270.26
Iteration:   2140, Loss function: 5.500, Average Loss: 5.654, avg. samples / sec: 212.07
Iteration:   2160, Loss function: 5.443, Average Loss: 5.651, avg. samples / sec: 199.48
Iteration:   2180, Loss function: 5.408, Average Loss: 5.648, avg. samples / sec: 312.67
Iteration:   2200, Loss function: 5.563, Average Loss: 5.644, avg. samples / sec: 321.57
Iteration:   2220, Loss function: 5.691, Average Loss: 5.642, avg. samples / sec: 327.89
Iteration:   2240, Loss function: 5.478, Average Loss: 5.639, avg. samples / sec: 311.93
Iteration:   2260, Loss function: 5.321, Average Loss: 5.635, avg. samples / sec: 332.38
Iteration:   2280, Loss function: 5.355, Average Loss: 5.633, avg. samples / sec: 304.45
Iteration:   2300, Loss function: 5.176, Average Loss: 5.629, avg. samples / sec: 278.19
Iteration:   2320, Loss function: 5.289, Average Loss: 5.626, avg. samples / sec: 264.72
Iteration:   2340, Loss function: 5.583, Average Loss: 5.622, avg. samples / sec: 292.44
Iteration:   2360, Loss function: 5.216, Average Loss: 5.617, avg. samples / sec: 318.58
Iteration:   2380, Loss function: 5.384, Average Loss: 5.614, avg. samples / sec: 311.69
Iteration:   2400, Loss function: 5.821, Average Loss: 5.610, avg. samples / sec: 332.58
Iteration:   2420, Loss function: 5.568, Average Loss: 5.606, avg. samples / sec: 311.35
Iteration:   2440, Loss function: 5.171, Average Loss: 5.602, avg. samples / sec: 294.93
Iteration:   2460, Loss function: 5.176, Average Loss: 5.599, avg. samples / sec: 294.22
Iteration:   2480, Loss function: 5.343, Average Loss: 5.595, avg. samples / sec: 273.31
Iteration:   2500, Loss function: 5.439, Average Loss: 5.591, avg. samples / sec: 238.70
Iteration:   2520, Loss function: 5.431, Average Loss: 5.587, avg. samples / sec: 288.39
Iteration:   2540, Loss function: 5.615, Average Loss: 5.583, avg. samples / sec: 309.47
Iteration:   2560, Loss function: 5.383, Average Loss: 5.580, avg. samples / sec: 342.38
Iteration:   2580, Loss function: 5.271, Average Loss: 5.575, avg. samples / sec: 334.51
Iteration:   2600, Loss function: 5.465, Average Loss: 5.571, avg. samples / sec: 308.35
Iteration:   2620, Loss function: 5.404, Average Loss: 5.567, avg. samples / sec: 271.56
Iteration:   2640, Loss function: 5.169, Average Loss: 5.564, avg. samples / sec: 233.73
Iteration:   2660, Loss function: 5.178, Average Loss: 5.559, avg. samples / sec: 289.90
Iteration:   2680, Loss function: 5.360, Average Loss: 5.555, avg. samples / sec: 311.37
Iteration:   2700, Loss function: 5.150, Average Loss: 5.549, avg. samples / sec: 314.45
Iteration:   2720, Loss function: 5.286, Average Loss: 5.545, avg. samples / sec: 288.54
Iteration:   2740, Loss function: 5.155, Average Loss: 5.541, avg. samples / sec: 326.89
Iteration:   2760, Loss function: 4.896, Average Loss: 5.535, avg. samples / sec: 324.89
Iteration:   2780, Loss function: 5.538, Average Loss: 5.531, avg. samples / sec: 326.55
Iteration:   2800, Loss function: 5.146, Average Loss: 5.527, avg. samples / sec: 328.17
Iteration:   2820, Loss function: 5.416, Average Loss: 5.522, avg. samples / sec: 341.85
Iteration:   2840, Loss function: 5.246, Average Loss: 5.518, avg. samples / sec: 333.14
Iteration:   2860, Loss function: 5.156, Average Loss: 5.512, avg. samples / sec: 331.51
Iteration:   2880, Loss function: 5.207, Average Loss: 5.507, avg. samples / sec: 340.59
Iteration:   2900, Loss function: 5.145, Average Loss: 5.502, avg. samples / sec: 246.06
Iteration:   2920, Loss function: 5.259, Average Loss: 5.496, avg. samples / sec: 237.10
Iteration:   2940, Loss function: 5.042, Average Loss: 5.491, avg. samples / sec: 221.08
Iteration:   2960, Loss function: 5.395, Average Loss: 5.487, avg. samples / sec: 257.32
Iteration:   2980, Loss function: 5.120, Average Loss: 5.483, avg. samples / sec: 302.90
Iteration:   3000, Loss function: 5.346, Average Loss: 5.478, avg. samples / sec: 269.89
Iteration:   3020, Loss function: 5.217, Average Loss: 5.472, avg. samples / sec: 325.51
Iteration:   3040, Loss function: 5.257, Average Loss: 5.467, avg. samples / sec: 329.75
Iteration:   3060, Loss function: 5.053, Average Loss: 5.461, avg. samples / sec: 311.37
Iteration:   3080, Loss function: 4.953, Average Loss: 5.455, avg. samples / sec: 311.09
:::MLLOG {"namespace": "", "time_ms": 1639151687384, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151687385, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.084, Average Loss: 5.450, avg. samples / sec: 321.51
Iteration:   3120, Loss function: 5.010, Average Loss: 5.443, avg. samples / sec: 328.55
Iteration:   3140, Loss function: 5.049, Average Loss: 5.439, avg. samples / sec: 243.72
Iteration:   3160, Loss function: 5.588, Average Loss: 5.434, avg. samples / sec: 313.53
Iteration:   3180, Loss function: 5.045, Average Loss: 5.430, avg. samples / sec: 299.46
Iteration:   3200, Loss function: 5.090, Average Loss: 5.424, avg. samples / sec: 227.18
Iteration:   3220, Loss function: 5.144, Average Loss: 5.419, avg. samples / sec: 272.60
Iteration:   3240, Loss function: 5.290, Average Loss: 5.413, avg. samples / sec: 301.00
Iteration:   3260, Loss function: 5.172, Average Loss: 5.408, avg. samples / sec: 258.30
Iteration:   3280, Loss function: 4.992, Average Loss: 5.402, avg. samples / sec: 324.02
Iteration:   3300, Loss function: 4.684, Average Loss: 5.397, avg. samples / sec: 293.51
Iteration:   3320, Loss function: 4.955, Average Loss: 5.392, avg. samples / sec: 272.18
Iteration:   3340, Loss function: 5.174, Average Loss: 5.388, avg. samples / sec: 328.21
Iteration:   3360, Loss function: 5.184, Average Loss: 5.381, avg. samples / sec: 282.92
Iteration:   3380, Loss function: 5.189, Average Loss: 5.374, avg. samples / sec: 330.34
Iteration:   3400, Loss function: 5.006, Average Loss: 5.370, avg. samples / sec: 316.92
Iteration:   3420, Loss function: 5.266, Average Loss: 5.364, avg. samples / sec: 303.70
Iteration:   3440, Loss function: 4.843, Average Loss: 5.358, avg. samples / sec: 321.17
Iteration:   3460, Loss function: 5.374, Average Loss: 5.354, avg. samples / sec: 330.95
Iteration:   3480, Loss function: 5.220, Average Loss: 5.349, avg. samples / sec: 330.17
Iteration:   3500, Loss function: 5.321, Average Loss: 5.345, avg. samples / sec: 320.16
Iteration:   3520, Loss function: 5.100, Average Loss: 5.341, avg. samples / sec: 318.41
Iteration:   3540, Loss function: 5.014, Average Loss: 5.336, avg. samples / sec: 319.89
Iteration:   3560, Loss function: 5.142, Average Loss: 5.332, avg. samples / sec: 304.58
Iteration:   3580, Loss function: 5.307, Average Loss: 5.328, avg. samples / sec: 307.54
Iteration:   3600, Loss function: 5.258, Average Loss: 5.321, avg. samples / sec: 313.05
Iteration:   3620, Loss function: 4.882, Average Loss: 5.316, avg. samples / sec: 312.29
Iteration:   3640, Loss function: 4.844, Average Loss: 5.310, avg. samples / sec: 326.99
Iteration:   3660, Loss function: 5.034, Average Loss: 5.306, avg. samples / sec: 303.50
Iteration:   3680, Loss function: 5.080, Average Loss: 5.301, avg. samples / sec: 328.22
Iteration:   3700, Loss function: 5.029, Average Loss: 5.296, avg. samples / sec: 318.22
Iteration:   3720, Loss function: 5.043, Average Loss: 5.291, avg. samples / sec: 297.57
Iteration:   3740, Loss function: 5.263, Average Loss: 5.287, avg. samples / sec: 300.95
Iteration:   3760, Loss function: 4.996, Average Loss: 5.283, avg. samples / sec: 245.41
Iteration:   3780, Loss function: 5.093, Average Loss: 5.278, avg. samples / sec: 240.36
Iteration:   3800, Loss function: 5.173, Average Loss: 5.274, avg. samples / sec: 270.02
Iteration:   3820, Loss function: 5.216, Average Loss: 5.270, avg. samples / sec: 313.88
Iteration:   3840, Loss function: 4.849, Average Loss: 5.265, avg. samples / sec: 315.18
Iteration:   3860, Loss function: 4.952, Average Loss: 5.260, avg. samples / sec: 293.69
Iteration:   3880, Loss function: 5.059, Average Loss: 5.254, avg. samples / sec: 215.78
Iteration:   3900, Loss function: 5.174, Average Loss: 5.250, avg. samples / sec: 283.75
Iteration:   3920, Loss function: 5.353, Average Loss: 5.245, avg. samples / sec: 316.49
Iteration:   3940, Loss function: 5.111, Average Loss: 5.240, avg. samples / sec: 332.18
Iteration:   3960, Loss function: 4.737, Average Loss: 5.235, avg. samples / sec: 331.29
Iteration:   3980, Loss function: 4.944, Average Loss: 5.230, avg. samples / sec: 335.24
Iteration:   4000, Loss function: 5.159, Average Loss: 5.226, avg. samples / sec: 315.56
Iteration:   4020, Loss function: 5.017, Average Loss: 5.221, avg. samples / sec: 290.68
Iteration:   4040, Loss function: 5.039, Average Loss: 5.217, avg. samples / sec: 302.58
Iteration:   4060, Loss function: 5.097, Average Loss: 5.213, avg. samples / sec: 300.86
Iteration:   4080, Loss function: 5.230, Average Loss: 5.209, avg. samples / sec: 243.05
Iteration:   4100, Loss function: 4.961, Average Loss: 5.206, avg. samples / sec: 319.86
:::MLLOG {"namespace": "", "time_ms": 1639152084233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152084235, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.023, Average Loss: 5.202, avg. samples / sec: 208.59
Iteration:   4140, Loss function: 5.052, Average Loss: 5.197, avg. samples / sec: 238.65
Iteration:   4160, Loss function: 4.978, Average Loss: 5.191, avg. samples / sec: 327.05
Iteration:   4180, Loss function: 4.885, Average Loss: 5.185, avg. samples / sec: 319.66
Iteration:   4200, Loss function: 4.919, Average Loss: 5.180, avg. samples / sec: 210.38
Iteration:   4220, Loss function: 4.804, Average Loss: 5.175, avg. samples / sec: 289.83
Iteration:   4240, Loss function: 5.026, Average Loss: 5.169, avg. samples / sec: 323.62
Iteration:   4260, Loss function: 5.063, Average Loss: 5.164, avg. samples / sec: 263.13
Iteration:   4280, Loss function: 4.840, Average Loss: 5.158, avg. samples / sec: 319.92
Iteration:   4300, Loss function: 4.899, Average Loss: 5.152, avg. samples / sec: 314.69
Iteration:   4320, Loss function: 4.641, Average Loss: 5.147, avg. samples / sec: 308.00
Iteration:   4340, Loss function: 4.695, Average Loss: 5.141, avg. samples / sec: 271.72
Iteration:   4360, Loss function: 4.857, Average Loss: 5.136, avg. samples / sec: 321.57
Iteration:   4380, Loss function: 5.118, Average Loss: 5.132, avg. samples / sec: 328.69
Iteration:   4400, Loss function: 4.906, Average Loss: 5.127, avg. samples / sec: 321.67
Iteration:   4420, Loss function: 4.796, Average Loss: 5.123, avg. samples / sec: 238.25
Iteration:   4440, Loss function: 4.769, Average Loss: 5.118, avg. samples / sec: 237.74
Iteration:   4460, Loss function: 5.140, Average Loss: 5.114, avg. samples / sec: 293.92
Iteration:   4480, Loss function: 4.990, Average Loss: 5.111, avg. samples / sec: 309.27
Iteration:   4500, Loss function: 4.730, Average Loss: 5.107, avg. samples / sec: 334.38
Iteration:   4520, Loss function: 4.572, Average Loss: 5.102, avg. samples / sec: 325.75
Iteration:   4540, Loss function: 5.076, Average Loss: 5.098, avg. samples / sec: 334.58
Iteration:   4560, Loss function: 4.739, Average Loss: 5.095, avg. samples / sec: 285.38
Iteration:   4580, Loss function: 4.755, Average Loss: 5.092, avg. samples / sec: 315.49
Iteration:   4600, Loss function: 5.010, Average Loss: 5.088, avg. samples / sec: 309.98
Iteration:   4620, Loss function: 4.843, Average Loss: 5.084, avg. samples / sec: 296.81
Iteration:   4640, Loss function: 4.772, Average Loss: 5.078, avg. samples / sec: 261.36
Iteration:   4660, Loss function: 4.838, Average Loss: 5.074, avg. samples / sec: 302.41
Iteration:   4680, Loss function: 5.319, Average Loss: 5.069, avg. samples / sec: 317.16
Iteration:   4700, Loss function: 4.776, Average Loss: 5.067, avg. samples / sec: 306.84
Iteration:   4720, Loss function: 4.759, Average Loss: 5.061, avg. samples / sec: 306.35
Iteration:   4740, Loss function: 4.873, Average Loss: 5.057, avg. samples / sec: 292.22
Iteration:   4760, Loss function: 4.621, Average Loss: 5.053, avg. samples / sec: 324.37
Iteration:   4780, Loss function: 4.984, Average Loss: 5.050, avg. samples / sec: 276.16
Iteration:   4800, Loss function: 4.898, Average Loss: 5.046, avg. samples / sec: 271.98
Iteration:   4820, Loss function: 4.639, Average Loss: 5.042, avg. samples / sec: 238.21
Iteration:   4840, Loss function: 5.286, Average Loss: 5.038, avg. samples / sec: 216.17
Iteration:   4860, Loss function: 4.865, Average Loss: 5.034, avg. samples / sec: 286.78
Iteration:   4880, Loss function: 5.197, Average Loss: 5.030, avg. samples / sec: 280.51
Iteration:   4900, Loss function: 4.526, Average Loss: 5.027, avg. samples / sec: 307.89
Iteration:   4920, Loss function: 4.743, Average Loss: 5.023, avg. samples / sec: 310.73
Iteration:   4940, Loss function: 4.686, Average Loss: 5.019, avg. samples / sec: 328.02
Iteration:   4960, Loss function: 4.745, Average Loss: 5.016, avg. samples / sec: 281.88
Iteration:   4980, Loss function: 4.648, Average Loss: 5.012, avg. samples / sec: 307.19
Iteration:   5000, Loss function: 4.658, Average Loss: 5.008, avg. samples / sec: 324.49
Iteration:   5020, Loss function: 4.984, Average Loss: 5.005, avg. samples / sec: 318.22
Iteration:   5040, Loss function: 4.851, Average Loss: 5.002, avg. samples / sec: 323.93
Iteration:   5060, Loss function: 4.793, Average Loss: 4.999, avg. samples / sec: 251.60
Iteration:   5080, Loss function: 4.474, Average Loss: 4.995, avg. samples / sec: 257.09
Iteration:   5100, Loss function: 4.826, Average Loss: 4.993, avg. samples / sec: 287.19
Iteration:   5120, Loss function: 4.533, Average Loss: 4.989, avg. samples / sec: 244.14
Iteration:   5140, Loss function: 4.856, Average Loss: 4.986, avg. samples / sec: 301.43
:::MLLOG {"namespace": "", "time_ms": 1639152491048, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 87.40 s
:::MLLOG {"namespace": "", "time_ms": 1639152578626, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152578652, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152578652, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.036, Average Loss: 4.981, avg. samples / sec: 23.63
DONE (t=6.92s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10918
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21953
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10015
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19381
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21625
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10918 AP goal: 0.10000
Iteration:   5180, Loss function: 4.797, Average Loss: 4.976, avg. samples / sec: 340.47
:::MLLOG {"namespace": "", "time_ms": 1639152592662, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592663, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1091794368937245, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592663, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595206, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152600
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:00 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:38 PM'
START TIMING RUN WAS 2021-12-10 03:32:38 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:00 PM'
ENDING TIMING RUN AT 2021-12-10 04:10:00 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-82b0c2d6-8829-56e4-9c64-f7ba16ae6c95)
+ result=2242
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-10 03:32:38 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-10 03:32:38 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
