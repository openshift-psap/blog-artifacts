+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-9lzhc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-9lzhc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-9lzhc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c'
Found 1 MIG instances: MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150359
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:39 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:39 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:39 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:39 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-9lzhc to the sync file ...
run-ssd--1-9lzhc Found 16 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
Fri Dec 10 15:32:44 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150366858, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150367230, "event_type": "POINT_IN_TIME", "key": "seed", "value": 29052782, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 29052782
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150370653, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150370653, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150370660, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150370662, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150370663, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150474406, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150474406, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150476514, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150476515, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150477036, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150477036, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150477038, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.640, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.157, Average Loss: 0.455, avg. samples / sec: 233.08
Iteration:     40, Loss function: 20.807, Average Loss: 0.858, avg. samples / sec: 265.75
Iteration:     60, Loss function: 20.244, Average Loss: 1.247, avg. samples / sec: 254.68
Iteration:     80, Loss function: 19.941, Average Loss: 1.620, avg. samples / sec: 256.02
Iteration:    100, Loss function: 15.142, Average Loss: 1.942, avg. samples / sec: 251.41
Iteration:    120, Loss function: 10.488, Average Loss: 2.144, avg. samples / sec: 275.97
Iteration:    140, Loss function: 9.521, Average Loss: 2.298, avg. samples / sec: 251.56
Iteration:    160, Loss function: 8.949, Average Loss: 2.435, avg. samples / sec: 262.31
Iteration:    180, Loss function: 8.991, Average Loss: 2.564, avg. samples / sec: 267.06
Iteration:    200, Loss function: 8.642, Average Loss: 2.688, avg. samples / sec: 299.50
Iteration:    220, Loss function: 8.688, Average Loss: 2.809, avg. samples / sec: 293.05
Iteration:    240, Loss function: 8.747, Average Loss: 2.928, avg. samples / sec: 307.25
Iteration:    260, Loss function: 8.499, Average Loss: 3.044, avg. samples / sec: 282.38
Iteration:    280, Loss function: 8.444, Average Loss: 3.154, avg. samples / sec: 273.53
Iteration:    300, Loss function: 8.178, Average Loss: 3.257, avg. samples / sec: 273.90
Iteration:    320, Loss function: 8.322, Average Loss: 3.357, avg. samples / sec: 298.23
Iteration:    340, Loss function: 8.281, Average Loss: 3.453, avg. samples / sec: 323.50
Iteration:    360, Loss function: 8.040, Average Loss: 3.547, avg. samples / sec: 254.89
Iteration:    380, Loss function: 7.895, Average Loss: 3.635, avg. samples / sec: 299.51
Iteration:    400, Loss function: 8.038, Average Loss: 3.719, avg. samples / sec: 294.48
Iteration:    420, Loss function: 7.504, Average Loss: 3.800, avg. samples / sec: 294.70
Iteration:    440, Loss function: 7.769, Average Loss: 3.879, avg. samples / sec: 297.59
Iteration:    460, Loss function: 7.815, Average Loss: 3.956, avg. samples / sec: 322.67
Iteration:    480, Loss function: 7.440, Average Loss: 4.030, avg. samples / sec: 325.79
Iteration:    500, Loss function: 7.478, Average Loss: 4.101, avg. samples / sec: 319.68
Iteration:    520, Loss function: 7.439, Average Loss: 4.169, avg. samples / sec: 322.16
Iteration:    540, Loss function: 7.525, Average Loss: 4.233, avg. samples / sec: 308.15
Iteration:    560, Loss function: 7.317, Average Loss: 4.298, avg. samples / sec: 326.65
Iteration:    580, Loss function: 7.131, Average Loss: 4.358, avg. samples / sec: 278.44
Iteration:    600, Loss function: 7.299, Average Loss: 4.416, avg. samples / sec: 248.61
Iteration:    620, Loss function: 6.936, Average Loss: 4.471, avg. samples / sec: 274.73
Iteration:    640, Loss function: 6.734, Average Loss: 4.526, avg. samples / sec: 279.41
Iteration:    660, Loss function: 7.181, Average Loss: 4.579, avg. samples / sec: 300.17
Iteration:    680, Loss function: 7.302, Average Loss: 4.630, avg. samples / sec: 288.62
Iteration:    700, Loss function: 6.790, Average Loss: 4.678, avg. samples / sec: 275.62
Iteration:    720, Loss function: 7.001, Average Loss: 4.726, avg. samples / sec: 301.64
Iteration:    740, Loss function: 6.822, Average Loss: 4.772, avg. samples / sec: 291.09
Iteration:    760, Loss function: 6.933, Average Loss: 4.815, avg. samples / sec: 287.89
Iteration:    780, Loss function: 6.650, Average Loss: 4.856, avg. samples / sec: 318.78
Iteration:    800, Loss function: 7.056, Average Loss: 4.894, avg. samples / sec: 302.71
Iteration:    820, Loss function: 6.739, Average Loss: 4.931, avg. samples / sec: 326.23
Iteration:    840, Loss function: 6.734, Average Loss: 4.967, avg. samples / sec: 319.20
Iteration:    860, Loss function: 6.773, Average Loss: 5.001, avg. samples / sec: 320.31
Iteration:    880, Loss function: 6.836, Average Loss: 5.034, avg. samples / sec: 292.43
Iteration:    900, Loss function: 6.888, Average Loss: 5.064, avg. samples / sec: 287.94
Iteration:    920, Loss function: 6.719, Average Loss: 5.094, avg. samples / sec: 313.49
Iteration:    940, Loss function: 6.862, Average Loss: 5.124, avg. samples / sec: 237.22
Iteration:    960, Loss function: 6.525, Average Loss: 5.153, avg. samples / sec: 269.53
Iteration:    980, Loss function: 6.519, Average Loss: 5.180, avg. samples / sec: 250.06
Iteration:   1000, Loss function: 6.521, Average Loss: 5.206, avg. samples / sec: 331.45
Iteration:   1020, Loss function: 6.297, Average Loss: 5.231, avg. samples / sec: 307.85
:::MLLOG {"namespace": "", "time_ms": 1639150886703, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150886704, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.423, Average Loss: 5.254, avg. samples / sec: 327.10
Iteration:   1060, Loss function: 6.338, Average Loss: 5.277, avg. samples / sec: 326.51
Iteration:   1080, Loss function: 6.401, Average Loss: 5.298, avg. samples / sec: 327.88
Iteration:   1100, Loss function: 6.117, Average Loss: 5.317, avg. samples / sec: 336.82
Iteration:   1120, Loss function: 6.177, Average Loss: 5.337, avg. samples / sec: 333.54
Iteration:   1140, Loss function: 6.538, Average Loss: 5.355, avg. samples / sec: 313.81
Iteration:   1160, Loss function: 6.233, Average Loss: 5.372, avg. samples / sec: 338.37
Iteration:   1180, Loss function: 6.370, Average Loss: 5.390, avg. samples / sec: 331.39
Iteration:   1200, Loss function: 6.127, Average Loss: 5.407, avg. samples / sec: 246.60
Iteration:   1220, Loss function: 6.132, Average Loss: 5.422, avg. samples / sec: 223.48
Iteration:   1240, Loss function: 6.045, Average Loss: 5.435, avg. samples / sec: 328.66
Iteration:   1260, Loss function: 6.037, Average Loss: 5.448, avg. samples / sec: 271.18
Iteration:   1280, Loss function: 5.826, Average Loss: 5.460, avg. samples / sec: 321.08
Iteration:   1300, Loss function: 6.317, Average Loss: 5.473, avg. samples / sec: 317.49
Iteration:   1320, Loss function: 6.026, Average Loss: 5.485, avg. samples / sec: 319.86
Iteration:   1340, Loss function: 5.725, Average Loss: 5.494, avg. samples / sec: 304.94
Iteration:   1360, Loss function: 5.987, Average Loss: 5.505, avg. samples / sec: 267.64
Iteration:   1380, Loss function: 6.170, Average Loss: 5.514, avg. samples / sec: 294.05
Iteration:   1400, Loss function: 6.114, Average Loss: 5.522, avg. samples / sec: 330.93
Iteration:   1420, Loss function: 5.830, Average Loss: 5.530, avg. samples / sec: 327.61
Iteration:   1440, Loss function: 6.367, Average Loss: 5.539, avg. samples / sec: 329.92
Iteration:   1460, Loss function: 6.122, Average Loss: 5.549, avg. samples / sec: 315.86
Iteration:   1480, Loss function: 5.883, Average Loss: 5.556, avg. samples / sec: 290.90
Iteration:   1500, Loss function: 6.056, Average Loss: 5.564, avg. samples / sec: 238.95
Iteration:   1520, Loss function: 6.010, Average Loss: 5.571, avg. samples / sec: 288.41
Iteration:   1540, Loss function: 6.028, Average Loss: 5.575, avg. samples / sec: 281.28
Iteration:   1560, Loss function: 5.782, Average Loss: 5.579, avg. samples / sec: 325.35
Iteration:   1580, Loss function: 5.534, Average Loss: 5.586, avg. samples / sec: 298.58
Iteration:   1600, Loss function: 6.118, Average Loss: 5.591, avg. samples / sec: 300.20
Iteration:   1620, Loss function: 5.760, Average Loss: 5.596, avg. samples / sec: 303.68
Iteration:   1640, Loss function: 5.890, Average Loss: 5.599, avg. samples / sec: 327.44
Iteration:   1660, Loss function: 5.955, Average Loss: 5.603, avg. samples / sec: 313.17
Iteration:   1680, Loss function: 5.781, Average Loss: 5.607, avg. samples / sec: 249.76
Iteration:   1700, Loss function: 5.507, Average Loss: 5.610, avg. samples / sec: 249.82
Iteration:   1720, Loss function: 5.738, Average Loss: 5.613, avg. samples / sec: 270.01
Iteration:   1740, Loss function: 5.853, Average Loss: 5.615, avg. samples / sec: 315.28
Iteration:   1760, Loss function: 5.543, Average Loss: 5.617, avg. samples / sec: 316.24
Iteration:   1780, Loss function: 5.946, Average Loss: 5.618, avg. samples / sec: 261.21
Iteration:   1800, Loss function: 5.667, Average Loss: 5.621, avg. samples / sec: 165.42
Iteration:   1820, Loss function: 5.762, Average Loss: 5.623, avg. samples / sec: 274.81
Iteration:   1840, Loss function: 6.050, Average Loss: 5.626, avg. samples / sec: 229.11
Iteration:   1860, Loss function: 5.550, Average Loss: 5.625, avg. samples / sec: 273.62
Iteration:   1880, Loss function: 5.964, Average Loss: 5.627, avg. samples / sec: 264.75
Iteration:   1900, Loss function: 5.963, Average Loss: 5.628, avg. samples / sec: 254.59
Iteration:   1920, Loss function: 5.769, Average Loss: 5.628, avg. samples / sec: 328.68
Iteration:   1940, Loss function: 6.009, Average Loss: 5.628, avg. samples / sec: 328.54
Iteration:   1960, Loss function: 5.461, Average Loss: 5.628, avg. samples / sec: 330.58
Iteration:   1980, Loss function: 5.702, Average Loss: 5.627, avg. samples / sec: 320.65
Iteration:   2000, Loss function: 5.618, Average Loss: 5.627, avg. samples / sec: 327.91
Iteration:   2020, Loss function: 5.559, Average Loss: 5.626, avg. samples / sec: 308.43
Iteration:   2040, Loss function: 5.613, Average Loss: 5.626, avg. samples / sec: 314.79
:::MLLOG {"namespace": "", "time_ms": 1639151287943, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151287946, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.502, Average Loss: 5.625, avg. samples / sec: 325.50
Iteration:   2080, Loss function: 5.113, Average Loss: 5.623, avg. samples / sec: 328.97
Iteration:   2100, Loss function: 5.616, Average Loss: 5.621, avg. samples / sec: 288.14
Iteration:   2120, Loss function: 5.307, Average Loss: 5.618, avg. samples / sec: 291.83
Iteration:   2140, Loss function: 5.452, Average Loss: 5.616, avg. samples / sec: 307.78
Iteration:   2160, Loss function: 5.393, Average Loss: 5.613, avg. samples / sec: 289.27
Iteration:   2180, Loss function: 5.299, Average Loss: 5.611, avg. samples / sec: 273.57
Iteration:   2200, Loss function: 5.442, Average Loss: 5.608, avg. samples / sec: 294.87
Iteration:   2220, Loss function: 5.674, Average Loss: 5.605, avg. samples / sec: 325.96
Iteration:   2240, Loss function: 5.572, Average Loss: 5.603, avg. samples / sec: 331.66
Iteration:   2260, Loss function: 5.331, Average Loss: 5.600, avg. samples / sec: 313.92
Iteration:   2280, Loss function: 5.384, Average Loss: 5.598, avg. samples / sec: 323.69
Iteration:   2300, Loss function: 5.131, Average Loss: 5.595, avg. samples / sec: 318.07
Iteration:   2320, Loss function: 5.354, Average Loss: 5.593, avg. samples / sec: 317.43
Iteration:   2340, Loss function: 5.635, Average Loss: 5.589, avg. samples / sec: 327.68
Iteration:   2360, Loss function: 5.337, Average Loss: 5.585, avg. samples / sec: 335.01
Iteration:   2380, Loss function: 5.456, Average Loss: 5.582, avg. samples / sec: 334.00
Iteration:   2400, Loss function: 5.558, Average Loss: 5.578, avg. samples / sec: 315.60
Iteration:   2420, Loss function: 5.464, Average Loss: 5.575, avg. samples / sec: 242.36
Iteration:   2440, Loss function: 5.472, Average Loss: 5.572, avg. samples / sec: 301.52
Iteration:   2460, Loss function: 5.225, Average Loss: 5.568, avg. samples / sec: 299.82
Iteration:   2480, Loss function: 5.463, Average Loss: 5.564, avg. samples / sec: 323.91
Iteration:   2500, Loss function: 5.426, Average Loss: 5.560, avg. samples / sec: 311.39
Iteration:   2520, Loss function: 5.212, Average Loss: 5.556, avg. samples / sec: 285.53
Iteration:   2540, Loss function: 5.417, Average Loss: 5.552, avg. samples / sec: 321.08
Iteration:   2560, Loss function: 5.254, Average Loss: 5.548, avg. samples / sec: 332.22
Iteration:   2580, Loss function: 5.293, Average Loss: 5.544, avg. samples / sec: 330.11
Iteration:   2600, Loss function: 5.555, Average Loss: 5.543, avg. samples / sec: 275.03
Iteration:   2620, Loss function: 5.488, Average Loss: 5.537, avg. samples / sec: 310.29
Iteration:   2640, Loss function: 5.131, Average Loss: 5.534, avg. samples / sec: 263.41
Iteration:   2660, Loss function: 5.213, Average Loss: 5.531, avg. samples / sec: 254.49
Iteration:   2680, Loss function: 5.123, Average Loss: 5.527, avg. samples / sec: 285.85
Iteration:   2700, Loss function: 5.231, Average Loss: 5.523, avg. samples / sec: 291.95
Iteration:   2720, Loss function: 5.329, Average Loss: 5.519, avg. samples / sec: 270.90
Iteration:   2740, Loss function: 5.028, Average Loss: 5.515, avg. samples / sec: 274.59
Iteration:   2760, Loss function: 4.998, Average Loss: 5.510, avg. samples / sec: 210.41
Iteration:   2780, Loss function: 5.638, Average Loss: 5.506, avg. samples / sec: 165.63
Iteration:   2800, Loss function: 5.290, Average Loss: 5.501, avg. samples / sec: 258.07
Iteration:   2820, Loss function: 5.322, Average Loss: 5.498, avg. samples / sec: 288.73
Iteration:   2840, Loss function: 5.074, Average Loss: 5.494, avg. samples / sec: 310.38
Iteration:   2860, Loss function: 5.161, Average Loss: 5.489, avg. samples / sec: 308.07
Iteration:   2880, Loss function: 5.289, Average Loss: 5.484, avg. samples / sec: 317.60
Iteration:   2900, Loss function: 5.086, Average Loss: 5.479, avg. samples / sec: 310.86
Iteration:   2920, Loss function: 5.206, Average Loss: 5.474, avg. samples / sec: 258.44
Iteration:   2940, Loss function: 4.929, Average Loss: 5.469, avg. samples / sec: 326.76
Iteration:   2960, Loss function: 5.391, Average Loss: 5.464, avg. samples / sec: 310.86
Iteration:   2980, Loss function: 5.198, Average Loss: 5.461, avg. samples / sec: 270.02
Iteration:   3000, Loss function: 5.206, Average Loss: 5.455, avg. samples / sec: 325.51
Iteration:   3020, Loss function: 5.123, Average Loss: 5.449, avg. samples / sec: 313.60
Iteration:   3040, Loss function: 5.166, Average Loss: 5.444, avg. samples / sec: 322.43
Iteration:   3060, Loss function: 5.292, Average Loss: 5.438, avg. samples / sec: 311.65
Iteration:   3080, Loss function: 4.826, Average Loss: 5.433, avg. samples / sec: 313.25
:::MLLOG {"namespace": "", "time_ms": 1639151686777, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151686779, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.168, Average Loss: 5.428, avg. samples / sec: 326.12
Iteration:   3120, Loss function: 5.041, Average Loss: 5.421, avg. samples / sec: 316.79
Iteration:   3140, Loss function: 5.197, Average Loss: 5.417, avg. samples / sec: 331.49
Iteration:   3160, Loss function: 5.558, Average Loss: 5.411, avg. samples / sec: 328.83
Iteration:   3180, Loss function: 5.188, Average Loss: 5.406, avg. samples / sec: 300.06
Iteration:   3200, Loss function: 5.155, Average Loss: 5.401, avg. samples / sec: 328.87
Iteration:   3220, Loss function: 5.155, Average Loss: 5.395, avg. samples / sec: 337.50
Iteration:   3240, Loss function: 5.088, Average Loss: 5.390, avg. samples / sec: 337.15
Iteration:   3260, Loss function: 5.091, Average Loss: 5.385, avg. samples / sec: 297.66
Iteration:   3280, Loss function: 4.814, Average Loss: 5.379, avg. samples / sec: 311.56
Iteration:   3300, Loss function: 4.890, Average Loss: 5.374, avg. samples / sec: 328.61
Iteration:   3320, Loss function: 5.144, Average Loss: 5.368, avg. samples / sec: 302.50
Iteration:   3340, Loss function: 5.218, Average Loss: 5.365, avg. samples / sec: 286.81
Iteration:   3360, Loss function: 4.884, Average Loss: 5.358, avg. samples / sec: 231.16
Iteration:   3380, Loss function: 5.293, Average Loss: 5.350, avg. samples / sec: 218.12
Iteration:   3400, Loss function: 4.860, Average Loss: 5.346, avg. samples / sec: 183.09
Iteration:   3420, Loss function: 5.129, Average Loss: 5.340, avg. samples / sec: 255.88
Iteration:   3440, Loss function: 4.870, Average Loss: 5.336, avg. samples / sec: 219.01
Iteration:   3460, Loss function: 5.017, Average Loss: 5.331, avg. samples / sec: 217.97
Iteration:   3480, Loss function: 5.329, Average Loss: 5.326, avg. samples / sec: 305.16
Iteration:   3500, Loss function: 5.324, Average Loss: 5.323, avg. samples / sec: 282.74
Iteration:   3520, Loss function: 5.028, Average Loss: 5.319, avg. samples / sec: 225.15
Iteration:   3540, Loss function: 4.912, Average Loss: 5.315, avg. samples / sec: 322.30
Iteration:   3560, Loss function: 4.896, Average Loss: 5.310, avg. samples / sec: 233.81
Iteration:   3580, Loss function: 5.208, Average Loss: 5.306, avg. samples / sec: 195.55
Iteration:   3600, Loss function: 5.163, Average Loss: 5.300, avg. samples / sec: 266.88
Iteration:   3620, Loss function: 4.875, Average Loss: 5.295, avg. samples / sec: 303.15
Iteration:   3640, Loss function: 4.665, Average Loss: 5.290, avg. samples / sec: 321.09
Iteration:   3660, Loss function: 5.054, Average Loss: 5.286, avg. samples / sec: 308.96
Iteration:   3680, Loss function: 5.167, Average Loss: 5.280, avg. samples / sec: 288.21
Iteration:   3700, Loss function: 5.004, Average Loss: 5.275, avg. samples / sec: 312.64
Iteration:   3720, Loss function: 4.987, Average Loss: 5.270, avg. samples / sec: 331.37
Iteration:   3740, Loss function: 5.199, Average Loss: 5.266, avg. samples / sec: 327.20
Iteration:   3760, Loss function: 5.000, Average Loss: 5.261, avg. samples / sec: 314.04
Iteration:   3780, Loss function: 5.046, Average Loss: 5.256, avg. samples / sec: 318.55
Iteration:   3800, Loss function: 4.938, Average Loss: 5.252, avg. samples / sec: 330.68
Iteration:   3820, Loss function: 4.944, Average Loss: 5.247, avg. samples / sec: 292.19
Iteration:   3840, Loss function: 4.892, Average Loss: 5.242, avg. samples / sec: 304.88
Iteration:   3860, Loss function: 4.802, Average Loss: 5.237, avg. samples / sec: 324.16
Iteration:   3880, Loss function: 4.944, Average Loss: 5.232, avg. samples / sec: 275.38
Iteration:   3900, Loss function: 4.931, Average Loss: 5.227, avg. samples / sec: 238.08
Iteration:   3920, Loss function: 4.979, Average Loss: 5.220, avg. samples / sec: 254.87
Iteration:   3940, Loss function: 5.215, Average Loss: 5.216, avg. samples / sec: 313.35
Iteration:   3960, Loss function: 4.770, Average Loss: 5.212, avg. samples / sec: 307.91
Iteration:   3980, Loss function: 5.012, Average Loss: 5.206, avg. samples / sec: 247.88
Iteration:   4000, Loss function: 5.141, Average Loss: 5.203, avg. samples / sec: 266.59
Iteration:   4020, Loss function: 5.082, Average Loss: 5.197, avg. samples / sec: 306.59
Iteration:   4040, Loss function: 5.176, Average Loss: 5.194, avg. samples / sec: 287.38
Iteration:   4060, Loss function: 5.176, Average Loss: 5.190, avg. samples / sec: 165.24
Iteration:   4080, Loss function: 5.095, Average Loss: 5.186, avg. samples / sec: 210.07
Iteration:   4100, Loss function: 5.019, Average Loss: 5.183, avg. samples / sec: 324.08
:::MLLOG {"namespace": "", "time_ms": 1639152109726, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152109728, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.948, Average Loss: 5.179, avg. samples / sec: 329.42
Iteration:   4140, Loss function: 5.060, Average Loss: 5.174, avg. samples / sec: 319.22
Iteration:   4160, Loss function: 4.952, Average Loss: 5.168, avg. samples / sec: 311.25
Iteration:   4180, Loss function: 4.761, Average Loss: 5.162, avg. samples / sec: 240.93
Iteration:   4200, Loss function: 4.758, Average Loss: 5.158, avg. samples / sec: 277.58
Iteration:   4220, Loss function: 4.877, Average Loss: 5.153, avg. samples / sec: 313.40
Iteration:   4240, Loss function: 4.852, Average Loss: 5.148, avg. samples / sec: 264.71
Iteration:   4260, Loss function: 5.052, Average Loss: 5.142, avg. samples / sec: 257.67
Iteration:   4280, Loss function: 5.008, Average Loss: 5.137, avg. samples / sec: 315.41
Iteration:   4300, Loss function: 4.834, Average Loss: 5.131, avg. samples / sec: 291.22
Iteration:   4320, Loss function: 4.686, Average Loss: 5.126, avg. samples / sec: 292.02
Iteration:   4340, Loss function: 4.816, Average Loss: 5.121, avg. samples / sec: 274.35
Iteration:   4360, Loss function: 4.803, Average Loss: 5.116, avg. samples / sec: 299.06
Iteration:   4380, Loss function: 5.059, Average Loss: 5.111, avg. samples / sec: 293.83
Iteration:   4400, Loss function: 4.775, Average Loss: 5.107, avg. samples / sec: 326.65
Iteration:   4420, Loss function: 4.650, Average Loss: 5.101, avg. samples / sec: 261.58
Iteration:   4440, Loss function: 4.759, Average Loss: 5.097, avg. samples / sec: 225.56
Iteration:   4460, Loss function: 4.950, Average Loss: 5.092, avg. samples / sec: 269.86
Iteration:   4480, Loss function: 5.068, Average Loss: 5.090, avg. samples / sec: 321.51
Iteration:   4500, Loss function: 4.887, Average Loss: 5.087, avg. samples / sec: 327.34
Iteration:   4520, Loss function: 4.716, Average Loss: 5.083, avg. samples / sec: 320.90
Iteration:   4540, Loss function: 5.043, Average Loss: 5.079, avg. samples / sec: 308.21
Iteration:   4560, Loss function: 4.729, Average Loss: 5.075, avg. samples / sec: 323.36
Iteration:   4580, Loss function: 4.678, Average Loss: 5.072, avg. samples / sec: 299.01
Iteration:   4600, Loss function: 4.868, Average Loss: 5.069, avg. samples / sec: 327.26
Iteration:   4620, Loss function: 4.883, Average Loss: 5.064, avg. samples / sec: 321.53
Iteration:   4640, Loss function: 4.635, Average Loss: 5.059, avg. samples / sec: 237.25
Iteration:   4660, Loss function: 4.700, Average Loss: 5.055, avg. samples / sec: 285.12
Iteration:   4680, Loss function: 5.386, Average Loss: 5.050, avg. samples / sec: 250.98
Iteration:   4700, Loss function: 4.696, Average Loss: 5.046, avg. samples / sec: 285.27
Iteration:   4720, Loss function: 4.741, Average Loss: 5.042, avg. samples / sec: 327.11
Iteration:   4740, Loss function: 4.775, Average Loss: 5.037, avg. samples / sec: 276.03
Iteration:   4760, Loss function: 4.660, Average Loss: 5.035, avg. samples / sec: 334.15
Iteration:   4780, Loss function: 5.006, Average Loss: 5.030, avg. samples / sec: 332.63
Iteration:   4800, Loss function: 4.793, Average Loss: 5.027, avg. samples / sec: 335.46
Iteration:   4820, Loss function: 4.687, Average Loss: 5.024, avg. samples / sec: 321.12
Iteration:   4840, Loss function: 5.115, Average Loss: 5.020, avg. samples / sec: 285.57
Iteration:   4860, Loss function: 4.628, Average Loss: 5.015, avg. samples / sec: 303.28
Iteration:   4880, Loss function: 5.182, Average Loss: 5.012, avg. samples / sec: 320.85
Iteration:   4900, Loss function: 4.516, Average Loss: 5.008, avg. samples / sec: 320.29
Iteration:   4920, Loss function: 4.810, Average Loss: 5.004, avg. samples / sec: 326.80
Iteration:   4940, Loss function: 4.734, Average Loss: 5.000, avg. samples / sec: 319.44
Iteration:   4960, Loss function: 4.768, Average Loss: 4.997, avg. samples / sec: 321.68
Iteration:   4980, Loss function: 4.615, Average Loss: 4.994, avg. samples / sec: 323.46
Iteration:   5000, Loss function: 5.087, Average Loss: 4.991, avg. samples / sec: 305.31
Iteration:   5020, Loss function: 5.020, Average Loss: 4.988, avg. samples / sec: 306.07
Iteration:   5040, Loss function: 4.777, Average Loss: 4.985, avg. samples / sec: 332.92
Iteration:   5060, Loss function: 4.893, Average Loss: 4.983, avg. samples / sec: 311.95
Iteration:   5080, Loss function: 4.547, Average Loss: 4.980, avg. samples / sec: 310.61
Iteration:   5100, Loss function: 4.808, Average Loss: 4.976, avg. samples / sec: 301.05
Iteration:   5120, Loss function: 4.694, Average Loss: 4.974, avg. samples / sec: 330.24
Iteration:   5140, Loss function: 4.756, Average Loss: 4.970, avg. samples / sec: 320.11
:::MLLOG {"namespace": "", "time_ms": 1639152501255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 81.46 s
:::MLLOG {"namespace": "", "time_ms": 1639152582841, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152582844, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152582844, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.20s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=5.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10906
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22147
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09694
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19517
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
Iteration:   5160, Loss function: 4.870, Average Loss: 4.965, avg. samples / sec: 25.26
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13851
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21579
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21579
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10906 AP goal: 0.10000
:::MLLOG {"namespace": "", "time_ms": 1639152590541, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590543, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1090647377072699, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590543, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594183, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150366858, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150367230, "event_type": "POINT_IN_TIME", "key": "seed", "value": 29052782, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 29052782
:::MLLOG {"namespace": "", "time_ms": 1639150370653, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150370653, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150370660, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150370662, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150370663, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150370664, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150474406, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150474406, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150476514, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150476515, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.25s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150477036, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150477036, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150477038, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.640, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.157, Average Loss: 0.455, avg. samples / sec: 233.08
Iteration:     40, Loss function: 20.807, Average Loss: 0.858, avg. samples / sec: 265.75
Iteration:     60, Loss function: 20.244, Average Loss: 1.247, avg. samples / sec: 254.68
Iteration:     80, Loss function: 19.941, Average Loss: 1.620, avg. samples / sec: 256.02
Iteration:    100, Loss function: 15.142, Average Loss: 1.942, avg. samples / sec: 251.41
Iteration:    120, Loss function: 10.488, Average Loss: 2.144, avg. samples / sec: 275.97
Iteration:    140, Loss function: 9.521, Average Loss: 2.298, avg. samples / sec: 251.56
Iteration:    160, Loss function: 8.949, Average Loss: 2.435, avg. samples / sec: 262.31
Iteration:    180, Loss function: 8.991, Average Loss: 2.564, avg. samples / sec: 267.06
Iteration:    200, Loss function: 8.642, Average Loss: 2.688, avg. samples / sec: 299.50
Iteration:    220, Loss function: 8.688, Average Loss: 2.809, avg. samples / sec: 293.05
Iteration:    240, Loss function: 8.747, Average Loss: 2.928, avg. samples / sec: 307.25
Iteration:    260, Loss function: 8.499, Average Loss: 3.044, avg. samples / sec: 282.38
Iteration:    280, Loss function: 8.444, Average Loss: 3.154, avg. samples / sec: 273.53
Iteration:    300, Loss function: 8.178, Average Loss: 3.257, avg. samples / sec: 273.90
Iteration:    320, Loss function: 8.322, Average Loss: 3.357, avg. samples / sec: 298.23
Iteration:    340, Loss function: 8.281, Average Loss: 3.453, avg. samples / sec: 323.50
Iteration:    360, Loss function: 8.040, Average Loss: 3.547, avg. samples / sec: 254.89
Iteration:    380, Loss function: 7.895, Average Loss: 3.635, avg. samples / sec: 299.51
Iteration:    400, Loss function: 8.038, Average Loss: 3.719, avg. samples / sec: 294.48
Iteration:    420, Loss function: 7.504, Average Loss: 3.800, avg. samples / sec: 294.70
Iteration:    440, Loss function: 7.769, Average Loss: 3.879, avg. samples / sec: 297.59
Iteration:    460, Loss function: 7.815, Average Loss: 3.956, avg. samples / sec: 322.67
Iteration:    480, Loss function: 7.440, Average Loss: 4.030, avg. samples / sec: 325.79
Iteration:    500, Loss function: 7.478, Average Loss: 4.101, avg. samples / sec: 319.68
Iteration:    520, Loss function: 7.439, Average Loss: 4.169, avg. samples / sec: 322.16
Iteration:    540, Loss function: 7.525, Average Loss: 4.233, avg. samples / sec: 308.15
Iteration:    560, Loss function: 7.317, Average Loss: 4.298, avg. samples / sec: 326.65
Iteration:    580, Loss function: 7.131, Average Loss: 4.358, avg. samples / sec: 278.44
Iteration:    600, Loss function: 7.299, Average Loss: 4.416, avg. samples / sec: 248.61
Iteration:    620, Loss function: 6.936, Average Loss: 4.471, avg. samples / sec: 274.73
Iteration:    640, Loss function: 6.734, Average Loss: 4.526, avg. samples / sec: 279.41
Iteration:    660, Loss function: 7.181, Average Loss: 4.579, avg. samples / sec: 300.17
Iteration:    680, Loss function: 7.302, Average Loss: 4.630, avg. samples / sec: 288.62
Iteration:    700, Loss function: 6.790, Average Loss: 4.678, avg. samples / sec: 275.62
Iteration:    720, Loss function: 7.001, Average Loss: 4.726, avg. samples / sec: 301.64
Iteration:    740, Loss function: 6.822, Average Loss: 4.772, avg. samples / sec: 291.09
Iteration:    760, Loss function: 6.933, Average Loss: 4.815, avg. samples / sec: 287.89
Iteration:    780, Loss function: 6.650, Average Loss: 4.856, avg. samples / sec: 318.78
Iteration:    800, Loss function: 7.056, Average Loss: 4.894, avg. samples / sec: 302.71
Iteration:    820, Loss function: 6.739, Average Loss: 4.931, avg. samples / sec: 326.23
Iteration:    840, Loss function: 6.734, Average Loss: 4.967, avg. samples / sec: 319.20
Iteration:    860, Loss function: 6.773, Average Loss: 5.001, avg. samples / sec: 320.31
Iteration:    880, Loss function: 6.836, Average Loss: 5.034, avg. samples / sec: 292.43
Iteration:    900, Loss function: 6.888, Average Loss: 5.064, avg. samples / sec: 287.94
Iteration:    920, Loss function: 6.719, Average Loss: 5.094, avg. samples / sec: 313.49
Iteration:    940, Loss function: 6.862, Average Loss: 5.124, avg. samples / sec: 237.22
Iteration:    960, Loss function: 6.525, Average Loss: 5.153, avg. samples / sec: 269.53
Iteration:    980, Loss function: 6.519, Average Loss: 5.180, avg. samples / sec: 250.06
Iteration:   1000, Loss function: 6.521, Average Loss: 5.206, avg. samples / sec: 331.45
Iteration:   1020, Loss function: 6.297, Average Loss: 5.231, avg. samples / sec: 307.85
:::MLLOG {"namespace": "", "time_ms": 1639150886703, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150886704, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.423, Average Loss: 5.254, avg. samples / sec: 327.10
Iteration:   1060, Loss function: 6.338, Average Loss: 5.277, avg. samples / sec: 326.51
Iteration:   1080, Loss function: 6.401, Average Loss: 5.298, avg. samples / sec: 327.88
Iteration:   1100, Loss function: 6.117, Average Loss: 5.317, avg. samples / sec: 336.82
Iteration:   1120, Loss function: 6.177, Average Loss: 5.337, avg. samples / sec: 333.54
Iteration:   1140, Loss function: 6.538, Average Loss: 5.355, avg. samples / sec: 313.81
Iteration:   1160, Loss function: 6.233, Average Loss: 5.372, avg. samples / sec: 338.37
Iteration:   1180, Loss function: 6.370, Average Loss: 5.390, avg. samples / sec: 331.39
Iteration:   1200, Loss function: 6.127, Average Loss: 5.407, avg. samples / sec: 246.60
Iteration:   1220, Loss function: 6.132, Average Loss: 5.422, avg. samples / sec: 223.48
Iteration:   1240, Loss function: 6.045, Average Loss: 5.435, avg. samples / sec: 328.66
Iteration:   1260, Loss function: 6.037, Average Loss: 5.448, avg. samples / sec: 271.18
Iteration:   1280, Loss function: 5.826, Average Loss: 5.460, avg. samples / sec: 321.08
Iteration:   1300, Loss function: 6.317, Average Loss: 5.473, avg. samples / sec: 317.49
Iteration:   1320, Loss function: 6.026, Average Loss: 5.485, avg. samples / sec: 319.86
Iteration:   1340, Loss function: 5.725, Average Loss: 5.494, avg. samples / sec: 304.94
Iteration:   1360, Loss function: 5.987, Average Loss: 5.505, avg. samples / sec: 267.64
Iteration:   1380, Loss function: 6.170, Average Loss: 5.514, avg. samples / sec: 294.05
Iteration:   1400, Loss function: 6.114, Average Loss: 5.522, avg. samples / sec: 330.93
Iteration:   1420, Loss function: 5.830, Average Loss: 5.530, avg. samples / sec: 327.61
Iteration:   1440, Loss function: 6.367, Average Loss: 5.539, avg. samples / sec: 329.92
Iteration:   1460, Loss function: 6.122, Average Loss: 5.549, avg. samples / sec: 315.86
Iteration:   1480, Loss function: 5.883, Average Loss: 5.556, avg. samples / sec: 290.90
Iteration:   1500, Loss function: 6.056, Average Loss: 5.564, avg. samples / sec: 238.95
Iteration:   1520, Loss function: 6.010, Average Loss: 5.571, avg. samples / sec: 288.41
Iteration:   1540, Loss function: 6.028, Average Loss: 5.575, avg. samples / sec: 281.28
Iteration:   1560, Loss function: 5.782, Average Loss: 5.579, avg. samples / sec: 325.35
Iteration:   1580, Loss function: 5.534, Average Loss: 5.586, avg. samples / sec: 298.58
Iteration:   1600, Loss function: 6.118, Average Loss: 5.591, avg. samples / sec: 300.20
Iteration:   1620, Loss function: 5.760, Average Loss: 5.596, avg. samples / sec: 303.68
Iteration:   1640, Loss function: 5.890, Average Loss: 5.599, avg. samples / sec: 327.44
Iteration:   1660, Loss function: 5.955, Average Loss: 5.603, avg. samples / sec: 313.17
Iteration:   1680, Loss function: 5.781, Average Loss: 5.607, avg. samples / sec: 249.76
Iteration:   1700, Loss function: 5.507, Average Loss: 5.610, avg. samples / sec: 249.82
Iteration:   1720, Loss function: 5.738, Average Loss: 5.613, avg. samples / sec: 270.01
Iteration:   1740, Loss function: 5.853, Average Loss: 5.615, avg. samples / sec: 315.28
Iteration:   1760, Loss function: 5.543, Average Loss: 5.617, avg. samples / sec: 316.24
Iteration:   1780, Loss function: 5.946, Average Loss: 5.618, avg. samples / sec: 261.21
Iteration:   1800, Loss function: 5.667, Average Loss: 5.621, avg. samples / sec: 165.42
Iteration:   1820, Loss function: 5.762, Average Loss: 5.623, avg. samples / sec: 274.81
Iteration:   1840, Loss function: 6.050, Average Loss: 5.626, avg. samples / sec: 229.11
Iteration:   1860, Loss function: 5.550, Average Loss: 5.625, avg. samples / sec: 273.62
Iteration:   1880, Loss function: 5.964, Average Loss: 5.627, avg. samples / sec: 264.75
Iteration:   1900, Loss function: 5.963, Average Loss: 5.628, avg. samples / sec: 254.59
Iteration:   1920, Loss function: 5.769, Average Loss: 5.628, avg. samples / sec: 328.68
Iteration:   1940, Loss function: 6.009, Average Loss: 5.628, avg. samples / sec: 328.54
Iteration:   1960, Loss function: 5.461, Average Loss: 5.628, avg. samples / sec: 330.58
Iteration:   1980, Loss function: 5.702, Average Loss: 5.627, avg. samples / sec: 320.65
Iteration:   2000, Loss function: 5.618, Average Loss: 5.627, avg. samples / sec: 327.91
Iteration:   2020, Loss function: 5.559, Average Loss: 5.626, avg. samples / sec: 308.43
Iteration:   2040, Loss function: 5.613, Average Loss: 5.626, avg. samples / sec: 314.79
:::MLLOG {"namespace": "", "time_ms": 1639151287943, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151287946, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.502, Average Loss: 5.625, avg. samples / sec: 325.50
Iteration:   2080, Loss function: 5.113, Average Loss: 5.623, avg. samples / sec: 328.97
Iteration:   2100, Loss function: 5.616, Average Loss: 5.621, avg. samples / sec: 288.14
Iteration:   2120, Loss function: 5.307, Average Loss: 5.618, avg. samples / sec: 291.83
Iteration:   2140, Loss function: 5.452, Average Loss: 5.616, avg. samples / sec: 307.78
Iteration:   2160, Loss function: 5.393, Average Loss: 5.613, avg. samples / sec: 289.27
Iteration:   2180, Loss function: 5.299, Average Loss: 5.611, avg. samples / sec: 273.57
Iteration:   2200, Loss function: 5.442, Average Loss: 5.608, avg. samples / sec: 294.87
Iteration:   2220, Loss function: 5.674, Average Loss: 5.605, avg. samples / sec: 325.96
Iteration:   2240, Loss function: 5.572, Average Loss: 5.603, avg. samples / sec: 331.66
Iteration:   2260, Loss function: 5.331, Average Loss: 5.600, avg. samples / sec: 313.92
Iteration:   2280, Loss function: 5.384, Average Loss: 5.598, avg. samples / sec: 323.69
Iteration:   2300, Loss function: 5.131, Average Loss: 5.595, avg. samples / sec: 318.07
Iteration:   2320, Loss function: 5.354, Average Loss: 5.593, avg. samples / sec: 317.43
Iteration:   2340, Loss function: 5.635, Average Loss: 5.589, avg. samples / sec: 327.68
Iteration:   2360, Loss function: 5.337, Average Loss: 5.585, avg. samples / sec: 335.01
Iteration:   2380, Loss function: 5.456, Average Loss: 5.582, avg. samples / sec: 334.00
Iteration:   2400, Loss function: 5.558, Average Loss: 5.578, avg. samples / sec: 315.60
Iteration:   2420, Loss function: 5.464, Average Loss: 5.575, avg. samples / sec: 242.36
Iteration:   2440, Loss function: 5.472, Average Loss: 5.572, avg. samples / sec: 301.52
Iteration:   2460, Loss function: 5.225, Average Loss: 5.568, avg. samples / sec: 299.82
Iteration:   2480, Loss function: 5.463, Average Loss: 5.564, avg. samples / sec: 323.91
Iteration:   2500, Loss function: 5.426, Average Loss: 5.560, avg. samples / sec: 311.39
Iteration:   2520, Loss function: 5.212, Average Loss: 5.556, avg. samples / sec: 285.53
Iteration:   2540, Loss function: 5.417, Average Loss: 5.552, avg. samples / sec: 321.08
Iteration:   2560, Loss function: 5.254, Average Loss: 5.548, avg. samples / sec: 332.22
Iteration:   2580, Loss function: 5.293, Average Loss: 5.544, avg. samples / sec: 330.11
Iteration:   2600, Loss function: 5.555, Average Loss: 5.543, avg. samples / sec: 275.03
Iteration:   2620, Loss function: 5.488, Average Loss: 5.537, avg. samples / sec: 310.29
Iteration:   2640, Loss function: 5.131, Average Loss: 5.534, avg. samples / sec: 263.41
Iteration:   2660, Loss function: 5.213, Average Loss: 5.531, avg. samples / sec: 254.49
Iteration:   2680, Loss function: 5.123, Average Loss: 5.527, avg. samples / sec: 285.85
Iteration:   2700, Loss function: 5.231, Average Loss: 5.523, avg. samples / sec: 291.95
Iteration:   2720, Loss function: 5.329, Average Loss: 5.519, avg. samples / sec: 270.90
Iteration:   2740, Loss function: 5.028, Average Loss: 5.515, avg. samples / sec: 274.59
Iteration:   2760, Loss function: 4.998, Average Loss: 5.510, avg. samples / sec: 210.41
Iteration:   2780, Loss function: 5.638, Average Loss: 5.506, avg. samples / sec: 165.63
Iteration:   2800, Loss function: 5.290, Average Loss: 5.501, avg. samples / sec: 258.07
Iteration:   2820, Loss function: 5.322, Average Loss: 5.498, avg. samples / sec: 288.73
Iteration:   2840, Loss function: 5.074, Average Loss: 5.494, avg. samples / sec: 310.38
Iteration:   2860, Loss function: 5.161, Average Loss: 5.489, avg. samples / sec: 308.07
Iteration:   2880, Loss function: 5.289, Average Loss: 5.484, avg. samples / sec: 317.60
Iteration:   2900, Loss function: 5.086, Average Loss: 5.479, avg. samples / sec: 310.86
Iteration:   2920, Loss function: 5.206, Average Loss: 5.474, avg. samples / sec: 258.44
Iteration:   2940, Loss function: 4.929, Average Loss: 5.469, avg. samples / sec: 326.76
Iteration:   2960, Loss function: 5.391, Average Loss: 5.464, avg. samples / sec: 310.86
Iteration:   2980, Loss function: 5.198, Average Loss: 5.461, avg. samples / sec: 270.02
Iteration:   3000, Loss function: 5.206, Average Loss: 5.455, avg. samples / sec: 325.51
Iteration:   3020, Loss function: 5.123, Average Loss: 5.449, avg. samples / sec: 313.60
Iteration:   3040, Loss function: 5.166, Average Loss: 5.444, avg. samples / sec: 322.43
Iteration:   3060, Loss function: 5.292, Average Loss: 5.438, avg. samples / sec: 311.65
Iteration:   3080, Loss function: 4.826, Average Loss: 5.433, avg. samples / sec: 313.25
:::MLLOG {"namespace": "", "time_ms": 1639151686777, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151686779, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.168, Average Loss: 5.428, avg. samples / sec: 326.12
Iteration:   3120, Loss function: 5.041, Average Loss: 5.421, avg. samples / sec: 316.79
Iteration:   3140, Loss function: 5.197, Average Loss: 5.417, avg. samples / sec: 331.49
Iteration:   3160, Loss function: 5.558, Average Loss: 5.411, avg. samples / sec: 328.83
Iteration:   3180, Loss function: 5.188, Average Loss: 5.406, avg. samples / sec: 300.06
Iteration:   3200, Loss function: 5.155, Average Loss: 5.401, avg. samples / sec: 328.87
Iteration:   3220, Loss function: 5.155, Average Loss: 5.395, avg. samples / sec: 337.50
Iteration:   3240, Loss function: 5.088, Average Loss: 5.390, avg. samples / sec: 337.15
Iteration:   3260, Loss function: 5.091, Average Loss: 5.385, avg. samples / sec: 297.66
Iteration:   3280, Loss function: 4.814, Average Loss: 5.379, avg. samples / sec: 311.56
Iteration:   3300, Loss function: 4.890, Average Loss: 5.374, avg. samples / sec: 328.61
Iteration:   3320, Loss function: 5.144, Average Loss: 5.368, avg. samples / sec: 302.50
Iteration:   3340, Loss function: 5.218, Average Loss: 5.365, avg. samples / sec: 286.81
Iteration:   3360, Loss function: 4.884, Average Loss: 5.358, avg. samples / sec: 231.16
Iteration:   3380, Loss function: 5.293, Average Loss: 5.350, avg. samples / sec: 218.12
Iteration:   3400, Loss function: 4.860, Average Loss: 5.346, avg. samples / sec: 183.09
Iteration:   3420, Loss function: 5.129, Average Loss: 5.340, avg. samples / sec: 255.88
Iteration:   3440, Loss function: 4.870, Average Loss: 5.336, avg. samples / sec: 219.01
Iteration:   3460, Loss function: 5.017, Average Loss: 5.331, avg. samples / sec: 217.97
Iteration:   3480, Loss function: 5.329, Average Loss: 5.326, avg. samples / sec: 305.16
Iteration:   3500, Loss function: 5.324, Average Loss: 5.323, avg. samples / sec: 282.74
Iteration:   3520, Loss function: 5.028, Average Loss: 5.319, avg. samples / sec: 225.15
Iteration:   3540, Loss function: 4.912, Average Loss: 5.315, avg. samples / sec: 322.30
Iteration:   3560, Loss function: 4.896, Average Loss: 5.310, avg. samples / sec: 233.81
Iteration:   3580, Loss function: 5.208, Average Loss: 5.306, avg. samples / sec: 195.55
Iteration:   3600, Loss function: 5.163, Average Loss: 5.300, avg. samples / sec: 266.88
Iteration:   3620, Loss function: 4.875, Average Loss: 5.295, avg. samples / sec: 303.15
Iteration:   3640, Loss function: 4.665, Average Loss: 5.290, avg. samples / sec: 321.09
Iteration:   3660, Loss function: 5.054, Average Loss: 5.286, avg. samples / sec: 308.96
Iteration:   3680, Loss function: 5.167, Average Loss: 5.280, avg. samples / sec: 288.21
Iteration:   3700, Loss function: 5.004, Average Loss: 5.275, avg. samples / sec: 312.64
Iteration:   3720, Loss function: 4.987, Average Loss: 5.270, avg. samples / sec: 331.37
Iteration:   3740, Loss function: 5.199, Average Loss: 5.266, avg. samples / sec: 327.20
Iteration:   3760, Loss function: 5.000, Average Loss: 5.261, avg. samples / sec: 314.04
Iteration:   3780, Loss function: 5.046, Average Loss: 5.256, avg. samples / sec: 318.55
Iteration:   3800, Loss function: 4.938, Average Loss: 5.252, avg. samples / sec: 330.68
Iteration:   3820, Loss function: 4.944, Average Loss: 5.247, avg. samples / sec: 292.19
Iteration:   3840, Loss function: 4.892, Average Loss: 5.242, avg. samples / sec: 304.88
Iteration:   3860, Loss function: 4.802, Average Loss: 5.237, avg. samples / sec: 324.16
Iteration:   3880, Loss function: 4.944, Average Loss: 5.232, avg. samples / sec: 275.38
Iteration:   3900, Loss function: 4.931, Average Loss: 5.227, avg. samples / sec: 238.08
Iteration:   3920, Loss function: 4.979, Average Loss: 5.220, avg. samples / sec: 254.87
Iteration:   3940, Loss function: 5.215, Average Loss: 5.216, avg. samples / sec: 313.35
Iteration:   3960, Loss function: 4.770, Average Loss: 5.212, avg. samples / sec: 307.91
Iteration:   3980, Loss function: 5.012, Average Loss: 5.206, avg. samples / sec: 247.88
Iteration:   4000, Loss function: 5.141, Average Loss: 5.203, avg. samples / sec: 266.59
Iteration:   4020, Loss function: 5.082, Average Loss: 5.197, avg. samples / sec: 306.59
Iteration:   4040, Loss function: 5.176, Average Loss: 5.194, avg. samples / sec: 287.38
Iteration:   4060, Loss function: 5.176, Average Loss: 5.190, avg. samples / sec: 165.24
Iteration:   4080, Loss function: 5.095, Average Loss: 5.186, avg. samples / sec: 210.07
Iteration:   4100, Loss function: 5.019, Average Loss: 5.183, avg. samples / sec: 324.08
:::MLLOG {"namespace": "", "time_ms": 1639152109726, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152109728, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.948, Average Loss: 5.179, avg. samples / sec: 329.42
Iteration:   4140, Loss function: 5.060, Average Loss: 5.174, avg. samples / sec: 319.22
Iteration:   4160, Loss function: 4.952, Average Loss: 5.168, avg. samples / sec: 311.25
Iteration:   4180, Loss function: 4.761, Average Loss: 5.162, avg. samples / sec: 240.93
Iteration:   4200, Loss function: 4.758, Average Loss: 5.158, avg. samples / sec: 277.58
Iteration:   4220, Loss function: 4.877, Average Loss: 5.153, avg. samples / sec: 313.40
Iteration:   4240, Loss function: 4.852, Average Loss: 5.148, avg. samples / sec: 264.71
Iteration:   4260, Loss function: 5.052, Average Loss: 5.142, avg. samples / sec: 257.67
Iteration:   4280, Loss function: 5.008, Average Loss: 5.137, avg. samples / sec: 315.41
Iteration:   4300, Loss function: 4.834, Average Loss: 5.131, avg. samples / sec: 291.22
Iteration:   4320, Loss function: 4.686, Average Loss: 5.126, avg. samples / sec: 292.02
Iteration:   4340, Loss function: 4.816, Average Loss: 5.121, avg. samples / sec: 274.35
Iteration:   4360, Loss function: 4.803, Average Loss: 5.116, avg. samples / sec: 299.06
Iteration:   4380, Loss function: 5.059, Average Loss: 5.111, avg. samples / sec: 293.83
Iteration:   4400, Loss function: 4.775, Average Loss: 5.107, avg. samples / sec: 326.65
Iteration:   4420, Loss function: 4.650, Average Loss: 5.101, avg. samples / sec: 261.58
Iteration:   4440, Loss function: 4.759, Average Loss: 5.097, avg. samples / sec: 225.56
Iteration:   4460, Loss function: 4.950, Average Loss: 5.092, avg. samples / sec: 269.86
Iteration:   4480, Loss function: 5.068, Average Loss: 5.090, avg. samples / sec: 321.51
Iteration:   4500, Loss function: 4.887, Average Loss: 5.087, avg. samples / sec: 327.34
Iteration:   4520, Loss function: 4.716, Average Loss: 5.083, avg. samples / sec: 320.90
Iteration:   4540, Loss function: 5.043, Average Loss: 5.079, avg. samples / sec: 308.21
Iteration:   4560, Loss function: 4.729, Average Loss: 5.075, avg. samples / sec: 323.36
Iteration:   4580, Loss function: 4.678, Average Loss: 5.072, avg. samples / sec: 299.01
Iteration:   4600, Loss function: 4.868, Average Loss: 5.069, avg. samples / sec: 327.26
Iteration:   4620, Loss function: 4.883, Average Loss: 5.064, avg. samples / sec: 321.53
Iteration:   4640, Loss function: 4.635, Average Loss: 5.059, avg. samples / sec: 237.25
Iteration:   4660, Loss function: 4.700, Average Loss: 5.055, avg. samples / sec: 285.12
Iteration:   4680, Loss function: 5.386, Average Loss: 5.050, avg. samples / sec: 250.98
Iteration:   4700, Loss function: 4.696, Average Loss: 5.046, avg. samples / sec: 285.27
Iteration:   4720, Loss function: 4.741, Average Loss: 5.042, avg. samples / sec: 327.11
Iteration:   4740, Loss function: 4.775, Average Loss: 5.037, avg. samples / sec: 276.03
Iteration:   4760, Loss function: 4.660, Average Loss: 5.035, avg. samples / sec: 334.15
Iteration:   4780, Loss function: 5.006, Average Loss: 5.030, avg. samples / sec: 332.63
Iteration:   4800, Loss function: 4.793, Average Loss: 5.027, avg. samples / sec: 335.46
Iteration:   4820, Loss function: 4.687, Average Loss: 5.024, avg. samples / sec: 321.12
Iteration:   4840, Loss function: 5.115, Average Loss: 5.020, avg. samples / sec: 285.57
Iteration:   4860, Loss function: 4.628, Average Loss: 5.015, avg. samples / sec: 303.28
Iteration:   4880, Loss function: 5.182, Average Loss: 5.012, avg. samples / sec: 320.85
Iteration:   4900, Loss function: 4.516, Average Loss: 5.008, avg. samples / sec: 320.29
Iteration:   4920, Loss function: 4.810, Average Loss: 5.004, avg. samples / sec: 326.80
Iteration:   4940, Loss function: 4.734, Average Loss: 5.000, avg. samples / sec: 319.44
Iteration:   4960, Loss function: 4.768, Average Loss: 4.997, avg. samples / sec: 321.68
Iteration:   4980, Loss function: 4.615, Average Loss: 4.994, avg. samples / sec: 323.46
Iteration:   5000, Loss function: 5.087, Average Loss: 4.991, avg. samples / sec: 305.31
Iteration:   5020, Loss function: 5.020, Average Loss: 4.988, avg. samples / sec: 306.07
Iteration:   5040, Loss function: 4.777, Average Loss: 4.985, avg. samples / sec: 332.92
Iteration:   5060, Loss function: 4.893, Average Loss: 4.983, avg. samples / sec: 311.95
Iteration:   5080, Loss function: 4.547, Average Loss: 4.980, avg. samples / sec: 310.61
Iteration:   5100, Loss function: 4.808, Average Loss: 4.976, avg. samples / sec: 301.05
Iteration:   5120, Loss function: 4.694, Average Loss: 4.974, avg. samples / sec: 330.24
Iteration:   5140, Loss function: 4.756, Average Loss: 4.970, avg. samples / sec: 320.11
:::MLLOG {"namespace": "", "time_ms": 1639152501255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 81.46 s
:::MLLOG {"namespace": "", "time_ms": 1639152582841, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152582844, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152582844, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.20s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=5.85s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10906
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22147
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09694
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19517
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
Iteration:   5160, Loss function: 4.870, Average Loss: 4.965, avg. samples / sec: 25.26
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13851
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20484
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21579
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21579
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10906 AP goal: 0.10000
:::MLLOG {"namespace": "", "time_ms": 1639152590541, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590543, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1090647377072699, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590543, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594183, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152599
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:59 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:39 PM'
START TIMING RUN WAS 2021-12-10 03:32:39 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:59 PM'
ENDING TIMING RUN AT 2021-12-10 04:09:59 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-7bd5246b-d60f-5700-9106-8457dd4ca03c)
+ result=2240
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-10 03:32:39 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-10 03:32:39 PM
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
