+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-x9kjn.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-x9kjn.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-x9kjn.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-34155c66-9d5a-5286-8dfe-04d8901072bf
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf'
Found 1 MIG instances: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150358
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:38 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:38 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-x9kjn to the sync file ...
run-ssd--1-x9kjn Found 12 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
Fri Dec 10 15:32:43 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365658, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365775, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3491250660, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3491250660
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150369217, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150369218, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150473432, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150473432, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150475080, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150475081, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150475583, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150475584, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150475587, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.706, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.186, Average Loss: 0.457, avg. samples / sec: 277.73
Iteration:     40, Loss function: 20.804, Average Loss: 0.859, avg. samples / sec: 258.35
Iteration:     60, Loss function: 20.398, Average Loss: 1.248, avg. samples / sec: 258.66
Iteration:     80, Loss function: 19.792, Average Loss: 1.621, avg. samples / sec: 249.32
Iteration:    100, Loss function: 14.921, Average Loss: 1.942, avg. samples / sec: 250.39
Iteration:    120, Loss function: 10.785, Average Loss: 2.144, avg. samples / sec: 271.85
Iteration:    140, Loss function: 9.750, Average Loss: 2.302, avg. samples / sec: 257.04
Iteration:    160, Loss function: 9.295, Average Loss: 2.443, avg. samples / sec: 287.20
Iteration:    180, Loss function: 9.028, Average Loss: 2.573, avg. samples / sec: 276.73
Iteration:    200, Loss function: 8.780, Average Loss: 2.699, avg. samples / sec: 273.64
Iteration:    220, Loss function: 8.670, Average Loss: 2.819, avg. samples / sec: 310.12
Iteration:    240, Loss function: 8.747, Average Loss: 2.937, avg. samples / sec: 263.45
Iteration:    260, Loss function: 8.902, Average Loss: 3.052, avg. samples / sec: 237.98
Iteration:    280, Loss function: 8.520, Average Loss: 3.166, avg. samples / sec: 291.53
Iteration:    300, Loss function: 8.353, Average Loss: 3.270, avg. samples / sec: 320.00
Iteration:    320, Loss function: 8.371, Average Loss: 3.372, avg. samples / sec: 272.17
Iteration:    340, Loss function: 8.315, Average Loss: 3.471, avg. samples / sec: 230.15
Iteration:    360, Loss function: 8.003, Average Loss: 3.565, avg. samples / sec: 277.44
Iteration:    380, Loss function: 7.916, Average Loss: 3.655, avg. samples / sec: 276.08
Iteration:    400, Loss function: 8.015, Average Loss: 3.739, avg. samples / sec: 292.59
Iteration:    420, Loss function: 7.780, Average Loss: 3.824, avg. samples / sec: 327.76
Iteration:    440, Loss function: 7.781, Average Loss: 3.906, avg. samples / sec: 291.24
Iteration:    460, Loss function: 7.794, Average Loss: 3.983, avg. samples / sec: 315.24
Iteration:    480, Loss function: 7.494, Average Loss: 4.057, avg. samples / sec: 313.83
Iteration:    500, Loss function: 7.653, Average Loss: 4.128, avg. samples / sec: 220.51
Iteration:    520, Loss function: 7.641, Average Loss: 4.197, avg. samples / sec: 285.08
Iteration:    540, Loss function: 7.494, Average Loss: 4.264, avg. samples / sec: 318.74
Iteration:    560, Loss function: 7.148, Average Loss: 4.326, avg. samples / sec: 327.75
Iteration:    580, Loss function: 7.253, Average Loss: 4.387, avg. samples / sec: 327.85
Iteration:    600, Loss function: 7.431, Average Loss: 4.449, avg. samples / sec: 338.45
Iteration:    620, Loss function: 7.187, Average Loss: 4.506, avg. samples / sec: 317.25
Iteration:    640, Loss function: 6.763, Average Loss: 4.560, avg. samples / sec: 319.89
Iteration:    660, Loss function: 7.135, Average Loss: 4.612, avg. samples / sec: 321.60
Iteration:    680, Loss function: 7.316, Average Loss: 4.664, avg. samples / sec: 329.22
Iteration:    700, Loss function: 6.832, Average Loss: 4.712, avg. samples / sec: 276.54
Iteration:    720, Loss function: 7.053, Average Loss: 4.762, avg. samples / sec: 335.19
Iteration:    740, Loss function: 6.979, Average Loss: 4.808, avg. samples / sec: 316.82
Iteration:    760, Loss function: 6.998, Average Loss: 4.852, avg. samples / sec: 318.24
Iteration:    780, Loss function: 6.848, Average Loss: 4.894, avg. samples / sec: 319.71
Iteration:    800, Loss function: 7.204, Average Loss: 4.933, avg. samples / sec: 327.08
Iteration:    820, Loss function: 6.894, Average Loss: 4.972, avg. samples / sec: 333.50
Iteration:    840, Loss function: 6.853, Average Loss: 5.010, avg. samples / sec: 285.85
Iteration:    860, Loss function: 6.882, Average Loss: 5.045, avg. samples / sec: 213.63
Iteration:    880, Loss function: 6.830, Average Loss: 5.079, avg. samples / sec: 282.53
Iteration:    900, Loss function: 6.843, Average Loss: 5.109, avg. samples / sec: 271.21
Iteration:    920, Loss function: 6.644, Average Loss: 5.139, avg. samples / sec: 255.55
Iteration:    940, Loss function: 6.750, Average Loss: 5.169, avg. samples / sec: 307.76
Iteration:    960, Loss function: 6.523, Average Loss: 5.197, avg. samples / sec: 310.12
Iteration:    980, Loss function: 6.360, Average Loss: 5.226, avg. samples / sec: 303.96
Iteration:   1000, Loss function: 6.651, Average Loss: 5.252, avg. samples / sec: 331.98
Iteration:   1020, Loss function: 6.423, Average Loss: 5.276, avg. samples / sec: 331.07
:::MLLOG {"namespace": "", "time_ms": 1639150881698, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150881700, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.402, Average Loss: 5.299, avg. samples / sec: 324.93
Iteration:   1060, Loss function: 6.269, Average Loss: 5.322, avg. samples / sec: 326.02
Iteration:   1080, Loss function: 6.364, Average Loss: 5.343, avg. samples / sec: 328.99
Iteration:   1100, Loss function: 6.113, Average Loss: 5.362, avg. samples / sec: 312.92
Iteration:   1120, Loss function: 6.237, Average Loss: 5.381, avg. samples / sec: 326.97
Iteration:   1140, Loss function: 6.451, Average Loss: 5.400, avg. samples / sec: 332.97
Iteration:   1160, Loss function: 6.247, Average Loss: 5.418, avg. samples / sec: 341.81
Iteration:   1180, Loss function: 6.363, Average Loss: 5.434, avg. samples / sec: 313.93
Iteration:   1200, Loss function: 6.248, Average Loss: 5.450, avg. samples / sec: 302.76
Iteration:   1220, Loss function: 6.219, Average Loss: 5.465, avg. samples / sec: 298.25
Iteration:   1240, Loss function: 6.069, Average Loss: 5.478, avg. samples / sec: 328.93
Iteration:   1260, Loss function: 5.984, Average Loss: 5.491, avg. samples / sec: 334.18
Iteration:   1280, Loss function: 5.822, Average Loss: 5.502, avg. samples / sec: 330.71
Iteration:   1300, Loss function: 5.985, Average Loss: 5.515, avg. samples / sec: 331.29
Iteration:   1320, Loss function: 6.059, Average Loss: 5.527, avg. samples / sec: 304.31
Iteration:   1340, Loss function: 5.779, Average Loss: 5.536, avg. samples / sec: 296.64
Iteration:   1360, Loss function: 6.046, Average Loss: 5.547, avg. samples / sec: 302.36
Iteration:   1380, Loss function: 6.196, Average Loss: 5.557, avg. samples / sec: 328.14
Iteration:   1400, Loss function: 5.966, Average Loss: 5.565, avg. samples / sec: 295.04
Iteration:   1420, Loss function: 5.881, Average Loss: 5.573, avg. samples / sec: 269.26
Iteration:   1440, Loss function: 6.451, Average Loss: 5.582, avg. samples / sec: 286.79
Iteration:   1460, Loss function: 6.281, Average Loss: 5.590, avg. samples / sec: 310.01
Iteration:   1480, Loss function: 5.811, Average Loss: 5.597, avg. samples / sec: 331.88
Iteration:   1500, Loss function: 6.037, Average Loss: 5.606, avg. samples / sec: 333.27
Iteration:   1520, Loss function: 5.940, Average Loss: 5.612, avg. samples / sec: 318.27
Iteration:   1540, Loss function: 6.045, Average Loss: 5.616, avg. samples / sec: 296.20
Iteration:   1560, Loss function: 5.583, Average Loss: 5.620, avg. samples / sec: 334.62
Iteration:   1580, Loss function: 5.689, Average Loss: 5.625, avg. samples / sec: 326.97
Iteration:   1600, Loss function: 6.203, Average Loss: 5.632, avg. samples / sec: 332.76
Iteration:   1620, Loss function: 5.850, Average Loss: 5.637, avg. samples / sec: 325.23
Iteration:   1640, Loss function: 5.977, Average Loss: 5.639, avg. samples / sec: 295.94
Iteration:   1660, Loss function: 6.151, Average Loss: 5.642, avg. samples / sec: 299.41
Iteration:   1680, Loss function: 5.694, Average Loss: 5.645, avg. samples / sec: 228.76
Iteration:   1700, Loss function: 5.452, Average Loss: 5.649, avg. samples / sec: 295.05
Iteration:   1720, Loss function: 5.708, Average Loss: 5.651, avg. samples / sec: 322.36
Iteration:   1740, Loss function: 5.886, Average Loss: 5.652, avg. samples / sec: 327.46
Iteration:   1760, Loss function: 5.502, Average Loss: 5.654, avg. samples / sec: 318.85
Iteration:   1780, Loss function: 5.832, Average Loss: 5.656, avg. samples / sec: 293.44
Iteration:   1800, Loss function: 5.682, Average Loss: 5.659, avg. samples / sec: 299.98
Iteration:   1820, Loss function: 5.926, Average Loss: 5.661, avg. samples / sec: 308.28
Iteration:   1840, Loss function: 5.938, Average Loss: 5.663, avg. samples / sec: 301.11
Iteration:   1860, Loss function: 5.709, Average Loss: 5.662, avg. samples / sec: 296.72
Iteration:   1880, Loss function: 5.918, Average Loss: 5.664, avg. samples / sec: 244.47
Iteration:   1900, Loss function: 5.912, Average Loss: 5.664, avg. samples / sec: 264.23
Iteration:   1920, Loss function: 5.620, Average Loss: 5.663, avg. samples / sec: 231.58
Iteration:   1940, Loss function: 5.839, Average Loss: 5.662, avg. samples / sec: 332.49
Iteration:   1960, Loss function: 5.476, Average Loss: 5.661, avg. samples / sec: 333.26
Iteration:   1980, Loss function: 5.714, Average Loss: 5.661, avg. samples / sec: 334.23
Iteration:   2000, Loss function: 5.714, Average Loss: 5.660, avg. samples / sec: 336.27
Iteration:   2020, Loss function: 5.503, Average Loss: 5.658, avg. samples / sec: 314.19
Iteration:   2040, Loss function: 5.555, Average Loss: 5.658, avg. samples / sec: 275.01
:::MLLOG {"namespace": "", "time_ms": 1639151264888, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151264890, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.529, Average Loss: 5.656, avg. samples / sec: 284.34
Iteration:   2080, Loss function: 5.128, Average Loss: 5.654, avg. samples / sec: 301.68
Iteration:   2100, Loss function: 5.425, Average Loss: 5.652, avg. samples / sec: 322.38
Iteration:   2120, Loss function: 5.342, Average Loss: 5.649, avg. samples / sec: 324.80
Iteration:   2140, Loss function: 5.424, Average Loss: 5.645, avg. samples / sec: 297.67
Iteration:   2160, Loss function: 5.425, Average Loss: 5.643, avg. samples / sec: 292.60
Iteration:   2180, Loss function: 5.358, Average Loss: 5.640, avg. samples / sec: 276.75
Iteration:   2200, Loss function: 5.588, Average Loss: 5.637, avg. samples / sec: 241.05
Iteration:   2220, Loss function: 5.656, Average Loss: 5.635, avg. samples / sec: 221.50
Iteration:   2240, Loss function: 5.470, Average Loss: 5.632, avg. samples / sec: 332.22
Iteration:   2260, Loss function: 5.310, Average Loss: 5.628, avg. samples / sec: 331.42
Iteration:   2280, Loss function: 5.294, Average Loss: 5.623, avg. samples / sec: 327.66
Iteration:   2300, Loss function: 5.197, Average Loss: 5.621, avg. samples / sec: 336.02
Iteration:   2320, Loss function: 5.351, Average Loss: 5.618, avg. samples / sec: 302.77
Iteration:   2340, Loss function: 5.310, Average Loss: 5.615, avg. samples / sec: 263.27
Iteration:   2360, Loss function: 5.251, Average Loss: 5.610, avg. samples / sec: 324.82
Iteration:   2380, Loss function: 5.494, Average Loss: 5.606, avg. samples / sec: 320.47
Iteration:   2400, Loss function: 5.571, Average Loss: 5.602, avg. samples / sec: 331.33
Iteration:   2420, Loss function: 5.476, Average Loss: 5.598, avg. samples / sec: 325.43
Iteration:   2440, Loss function: 5.558, Average Loss: 5.595, avg. samples / sec: 323.96
Iteration:   2460, Loss function: 5.429, Average Loss: 5.592, avg. samples / sec: 333.32
Iteration:   2480, Loss function: 5.238, Average Loss: 5.588, avg. samples / sec: 333.34
Iteration:   2500, Loss function: 5.462, Average Loss: 5.584, avg. samples / sec: 327.69
Iteration:   2520, Loss function: 5.436, Average Loss: 5.579, avg. samples / sec: 329.64
Iteration:   2540, Loss function: 5.490, Average Loss: 5.577, avg. samples / sec: 328.28
Iteration:   2560, Loss function: 5.427, Average Loss: 5.572, avg. samples / sec: 284.13
Iteration:   2580, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 244.07
Iteration:   2600, Loss function: 5.444, Average Loss: 5.566, avg. samples / sec: 291.26
Iteration:   2620, Loss function: 5.485, Average Loss: 5.561, avg. samples / sec: 254.98
Iteration:   2640, Loss function: 5.341, Average Loss: 5.559, avg. samples / sec: 218.16
Iteration:   2660, Loss function: 5.262, Average Loss: 5.556, avg. samples / sec: 283.20
Iteration:   2680, Loss function: 5.185, Average Loss: 5.553, avg. samples / sec: 298.72
Iteration:   2700, Loss function: 5.163, Average Loss: 5.547, avg. samples / sec: 266.39
Iteration:   2720, Loss function: 5.363, Average Loss: 5.544, avg. samples / sec: 332.26
Iteration:   2740, Loss function: 5.035, Average Loss: 5.539, avg. samples / sec: 280.88
Iteration:   2760, Loss function: 5.034, Average Loss: 5.534, avg. samples / sec: 308.84
Iteration:   2780, Loss function: 5.561, Average Loss: 5.530, avg. samples / sec: 327.37
Iteration:   2800, Loss function: 5.193, Average Loss: 5.525, avg. samples / sec: 290.25
Iteration:   2820, Loss function: 5.471, Average Loss: 5.520, avg. samples / sec: 306.40
Iteration:   2840, Loss function: 5.140, Average Loss: 5.516, avg. samples / sec: 331.79
Iteration:   2860, Loss function: 5.086, Average Loss: 5.512, avg. samples / sec: 333.28
Iteration:   2880, Loss function: 5.333, Average Loss: 5.507, avg. samples / sec: 335.11
Iteration:   2900, Loss function: 5.157, Average Loss: 5.503, avg. samples / sec: 326.90
Iteration:   2920, Loss function: 5.329, Average Loss: 5.497, avg. samples / sec: 295.74
Iteration:   2940, Loss function: 5.146, Average Loss: 5.492, avg. samples / sec: 287.68
Iteration:   2960, Loss function: 5.425, Average Loss: 5.487, avg. samples / sec: 263.70
Iteration:   2980, Loss function: 5.277, Average Loss: 5.483, avg. samples / sec: 263.51
Iteration:   3000, Loss function: 5.419, Average Loss: 5.477, avg. samples / sec: 327.40
Iteration:   3020, Loss function: 5.325, Average Loss: 5.470, avg. samples / sec: 336.94
Iteration:   3040, Loss function: 5.160, Average Loss: 5.465, avg. samples / sec: 330.09
Iteration:   3060, Loss function: 4.983, Average Loss: 5.459, avg. samples / sec: 325.27
Iteration:   3080, Loss function: 4.963, Average Loss: 5.454, avg. samples / sec: 294.82
:::MLLOG {"namespace": "", "time_ms": 1639151655786, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151655799, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.191, Average Loss: 5.449, avg. samples / sec: 297.24
Iteration:   3120, Loss function: 5.088, Average Loss: 5.442, avg. samples / sec: 316.72
Iteration:   3140, Loss function: 4.937, Average Loss: 5.437, avg. samples / sec: 322.51
Iteration:   3160, Loss function: 5.438, Average Loss: 5.431, avg. samples / sec: 312.55
Iteration:   3180, Loss function: 4.893, Average Loss: 5.426, avg. samples / sec: 230.57
Iteration:   3200, Loss function: 5.118, Average Loss: 5.420, avg. samples / sec: 258.30
Iteration:   3220, Loss function: 5.129, Average Loss: 5.415, avg. samples / sec: 222.17
Iteration:   3240, Loss function: 5.286, Average Loss: 5.409, avg. samples / sec: 180.50
Iteration:   3260, Loss function: 4.924, Average Loss: 5.403, avg. samples / sec: 178.86
Iteration:   3280, Loss function: 4.956, Average Loss: 5.397, avg. samples / sec: 212.12
Iteration:   3300, Loss function: 4.779, Average Loss: 5.391, avg. samples / sec: 264.40
Iteration:   3320, Loss function: 4.972, Average Loss: 5.386, avg. samples / sec: 328.35
Iteration:   3340, Loss function: 5.128, Average Loss: 5.381, avg. samples / sec: 307.83
Iteration:   3360, Loss function: 5.158, Average Loss: 5.374, avg. samples / sec: 261.31
Iteration:   3380, Loss function: 5.244, Average Loss: 5.369, avg. samples / sec: 180.79
Iteration:   3400, Loss function: 4.862, Average Loss: 5.364, avg. samples / sec: 288.83
Iteration:   3420, Loss function: 5.216, Average Loss: 5.358, avg. samples / sec: 297.43
Iteration:   3440, Loss function: 4.873, Average Loss: 5.353, avg. samples / sec: 243.48
Iteration:   3460, Loss function: 5.100, Average Loss: 5.347, avg. samples / sec: 323.39
Iteration:   3480, Loss function: 5.224, Average Loss: 5.341, avg. samples / sec: 303.06
Iteration:   3500, Loss function: 5.288, Average Loss: 5.337, avg. samples / sec: 324.97
Iteration:   3520, Loss function: 5.027, Average Loss: 5.333, avg. samples / sec: 322.48
Iteration:   3540, Loss function: 5.035, Average Loss: 5.328, avg. samples / sec: 330.55
Iteration:   3560, Loss function: 4.943, Average Loss: 5.323, avg. samples / sec: 284.70
Iteration:   3580, Loss function: 5.139, Average Loss: 5.318, avg. samples / sec: 315.30
Iteration:   3600, Loss function: 5.073, Average Loss: 5.312, avg. samples / sec: 303.72
Iteration:   3620, Loss function: 4.843, Average Loss: 5.306, avg. samples / sec: 318.48
Iteration:   3640, Loss function: 4.721, Average Loss: 5.300, avg. samples / sec: 319.18
Iteration:   3660, Loss function: 4.924, Average Loss: 5.295, avg. samples / sec: 331.22
Iteration:   3680, Loss function: 5.299, Average Loss: 5.289, avg. samples / sec: 321.78
Iteration:   3700, Loss function: 4.911, Average Loss: 5.284, avg. samples / sec: 304.73
Iteration:   3720, Loss function: 4.973, Average Loss: 5.277, avg. samples / sec: 311.59
Iteration:   3740, Loss function: 5.115, Average Loss: 5.273, avg. samples / sec: 325.22
Iteration:   3760, Loss function: 5.136, Average Loss: 5.269, avg. samples / sec: 326.37
Iteration:   3780, Loss function: 5.041, Average Loss: 5.263, avg. samples / sec: 330.29
Iteration:   3800, Loss function: 5.197, Average Loss: 5.260, avg. samples / sec: 265.32
Iteration:   3820, Loss function: 5.263, Average Loss: 5.255, avg. samples / sec: 289.43
Iteration:   3840, Loss function: 4.809, Average Loss: 5.250, avg. samples / sec: 254.28
Iteration:   3860, Loss function: 5.016, Average Loss: 5.245, avg. samples / sec: 208.26
Iteration:   3880, Loss function: 5.016, Average Loss: 5.239, avg. samples / sec: 265.19
Iteration:   3900, Loss function: 5.098, Average Loss: 5.234, avg. samples / sec: 257.08
Iteration:   3920, Loss function: 5.152, Average Loss: 5.229, avg. samples / sec: 298.42
Iteration:   3940, Loss function: 5.010, Average Loss: 5.223, avg. samples / sec: 315.97
Iteration:   3960, Loss function: 4.691, Average Loss: 5.218, avg. samples / sec: 330.38
Iteration:   3980, Loss function: 4.901, Average Loss: 5.213, avg. samples / sec: 313.64
Iteration:   4000, Loss function: 5.002, Average Loss: 5.208, avg. samples / sec: 243.31
Iteration:   4020, Loss function: 5.180, Average Loss: 5.203, avg. samples / sec: 242.23
Iteration:   4040, Loss function: 4.937, Average Loss: 5.199, avg. samples / sec: 312.66
Iteration:   4060, Loss function: 5.106, Average Loss: 5.195, avg. samples / sec: 326.50
Iteration:   4080, Loss function: 5.124, Average Loss: 5.190, avg. samples / sec: 261.27
Iteration:   4100, Loss function: 5.075, Average Loss: 5.187, avg. samples / sec: 294.98
:::MLLOG {"namespace": "", "time_ms": 1639152078334, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152078335, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.082, Average Loss: 5.184, avg. samples / sec: 272.01
Iteration:   4140, Loss function: 5.062, Average Loss: 5.179, avg. samples / sec: 297.68
Iteration:   4160, Loss function: 5.014, Average Loss: 5.173, avg. samples / sec: 277.70
Iteration:   4180, Loss function: 4.895, Average Loss: 5.169, avg. samples / sec: 315.67
Iteration:   4200, Loss function: 4.891, Average Loss: 5.164, avg. samples / sec: 321.22
Iteration:   4220, Loss function: 4.802, Average Loss: 5.159, avg. samples / sec: 328.69
Iteration:   4240, Loss function: 4.883, Average Loss: 5.154, avg. samples / sec: 325.48
Iteration:   4260, Loss function: 5.122, Average Loss: 5.149, avg. samples / sec: 244.87
Iteration:   4280, Loss function: 5.014, Average Loss: 5.143, avg. samples / sec: 237.31
Iteration:   4300, Loss function: 4.910, Average Loss: 5.136, avg. samples / sec: 164.18
Iteration:   4320, Loss function: 4.604, Average Loss: 5.132, avg. samples / sec: 263.47
Iteration:   4340, Loss function: 4.716, Average Loss: 5.127, avg. samples / sec: 276.73
Iteration:   4360, Loss function: 4.841, Average Loss: 5.123, avg. samples / sec: 291.59
Iteration:   4380, Loss function: 5.163, Average Loss: 5.119, avg. samples / sec: 295.83
Iteration:   4400, Loss function: 4.884, Average Loss: 5.115, avg. samples / sec: 254.80
Iteration:   4420, Loss function: 4.758, Average Loss: 5.110, avg. samples / sec: 336.15
Iteration:   4440, Loss function: 4.814, Average Loss: 5.105, avg. samples / sec: 235.69
Iteration:   4460, Loss function: 5.195, Average Loss: 5.101, avg. samples / sec: 312.25
Iteration:   4480, Loss function: 4.935, Average Loss: 5.097, avg. samples / sec: 321.13
Iteration:   4500, Loss function: 4.936, Average Loss: 5.095, avg. samples / sec: 320.56
Iteration:   4520, Loss function: 4.969, Average Loss: 5.091, avg. samples / sec: 325.42
Iteration:   4540, Loss function: 5.117, Average Loss: 5.087, avg. samples / sec: 326.69
Iteration:   4560, Loss function: 4.730, Average Loss: 5.083, avg. samples / sec: 335.53
Iteration:   4580, Loss function: 4.790, Average Loss: 5.081, avg. samples / sec: 333.38
Iteration:   4600, Loss function: 4.859, Average Loss: 5.078, avg. samples / sec: 318.94
Iteration:   4620, Loss function: 4.884, Average Loss: 5.073, avg. samples / sec: 290.27
Iteration:   4640, Loss function: 4.678, Average Loss: 5.066, avg. samples / sec: 246.15
Iteration:   4660, Loss function: 4.626, Average Loss: 5.062, avg. samples / sec: 232.13
Iteration:   4680, Loss function: 5.303, Average Loss: 5.058, avg. samples / sec: 286.80
Iteration:   4700, Loss function: 4.720, Average Loss: 5.054, avg. samples / sec: 296.16
Iteration:   4720, Loss function: 4.713, Average Loss: 5.049, avg. samples / sec: 292.89
Iteration:   4740, Loss function: 4.699, Average Loss: 5.044, avg. samples / sec: 319.79
Iteration:   4760, Loss function: 4.906, Average Loss: 5.041, avg. samples / sec: 316.98
Iteration:   4780, Loss function: 5.008, Average Loss: 5.037, avg. samples / sec: 341.14
Iteration:   4800, Loss function: 5.049, Average Loss: 5.034, avg. samples / sec: 325.63
Iteration:   4820, Loss function: 4.765, Average Loss: 5.031, avg. samples / sec: 313.89
Iteration:   4840, Loss function: 4.984, Average Loss: 5.027, avg. samples / sec: 334.58
Iteration:   4860, Loss function: 4.717, Average Loss: 5.023, avg. samples / sec: 330.91
Iteration:   4880, Loss function: 5.167, Average Loss: 5.018, avg. samples / sec: 301.84
Iteration:   4900, Loss function: 4.593, Average Loss: 5.016, avg. samples / sec: 286.87
Iteration:   4920, Loss function: 4.798, Average Loss: 5.013, avg. samples / sec: 266.39
Iteration:   4940, Loss function: 4.925, Average Loss: 5.009, avg. samples / sec: 288.88
Iteration:   4960, Loss function: 4.732, Average Loss: 5.007, avg. samples / sec: 304.74
Iteration:   4980, Loss function: 4.761, Average Loss: 5.003, avg. samples / sec: 271.87
Iteration:   5000, Loss function: 4.942, Average Loss: 5.000, avg. samples / sec: 225.70
Iteration:   5020, Loss function: 5.006, Average Loss: 4.998, avg. samples / sec: 174.31
Iteration:   5040, Loss function: 4.739, Average Loss: 4.995, avg. samples / sec: 282.12
Iteration:   5060, Loss function: 4.630, Average Loss: 4.992, avg. samples / sec: 281.50
Iteration:   5080, Loss function: 4.482, Average Loss: 4.988, avg. samples / sec: 325.63
Iteration:   5100, Loss function: 4.698, Average Loss: 4.985, avg. samples / sec: 310.20
Iteration:   5120, Loss function: 4.644, Average Loss: 4.982, avg. samples / sec: 314.46
Iteration:   5140, Loss function: 4.857, Average Loss: 4.978, avg. samples / sec: 337.42
:::MLLOG {"namespace": "", "time_ms": 1639152487375, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 91.19 s
:::MLLOG {"namespace": "", "time_ms": 1639152578787, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152578791, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152578791, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.97s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.849, Average Loss: 4.972, avg. samples / sec: 22.88
DONE (t=6.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10774
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21814
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09658
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19028
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20275
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10774 AP goal: 0.10000
Iteration:   5180, Loss function: 4.801, Average Loss: 4.967, avg. samples / sec: 342.22
:::MLLOG {"namespace": "", "time_ms": 1639152592547, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592548, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10774129299126488, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592548, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595185, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365658, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365775, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3491250660, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3491250660
:::MLLOG {"namespace": "", "time_ms": 1639150369217, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150369218, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150369226, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150369227, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150473432, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150473432, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150475080, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150475081, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150475583, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150475584, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150475587, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.706, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.186, Average Loss: 0.457, avg. samples / sec: 277.73
Iteration:     40, Loss function: 20.804, Average Loss: 0.859, avg. samples / sec: 258.35
Iteration:     60, Loss function: 20.398, Average Loss: 1.248, avg. samples / sec: 258.66
Iteration:     80, Loss function: 19.792, Average Loss: 1.621, avg. samples / sec: 249.32
Iteration:    100, Loss function: 14.921, Average Loss: 1.942, avg. samples / sec: 250.39
Iteration:    120, Loss function: 10.785, Average Loss: 2.144, avg. samples / sec: 271.85
Iteration:    140, Loss function: 9.750, Average Loss: 2.302, avg. samples / sec: 257.04
Iteration:    160, Loss function: 9.295, Average Loss: 2.443, avg. samples / sec: 287.20
Iteration:    180, Loss function: 9.028, Average Loss: 2.573, avg. samples / sec: 276.73
Iteration:    200, Loss function: 8.780, Average Loss: 2.699, avg. samples / sec: 273.64
Iteration:    220, Loss function: 8.670, Average Loss: 2.819, avg. samples / sec: 310.12
Iteration:    240, Loss function: 8.747, Average Loss: 2.937, avg. samples / sec: 263.45
Iteration:    260, Loss function: 8.902, Average Loss: 3.052, avg. samples / sec: 237.98
Iteration:    280, Loss function: 8.520, Average Loss: 3.166, avg. samples / sec: 291.53
Iteration:    300, Loss function: 8.353, Average Loss: 3.270, avg. samples / sec: 320.00
Iteration:    320, Loss function: 8.371, Average Loss: 3.372, avg. samples / sec: 272.17
Iteration:    340, Loss function: 8.315, Average Loss: 3.471, avg. samples / sec: 230.15
Iteration:    360, Loss function: 8.003, Average Loss: 3.565, avg. samples / sec: 277.44
Iteration:    380, Loss function: 7.916, Average Loss: 3.655, avg. samples / sec: 276.08
Iteration:    400, Loss function: 8.015, Average Loss: 3.739, avg. samples / sec: 292.59
Iteration:    420, Loss function: 7.780, Average Loss: 3.824, avg. samples / sec: 327.76
Iteration:    440, Loss function: 7.781, Average Loss: 3.906, avg. samples / sec: 291.24
Iteration:    460, Loss function: 7.794, Average Loss: 3.983, avg. samples / sec: 315.24
Iteration:    480, Loss function: 7.494, Average Loss: 4.057, avg. samples / sec: 313.83
Iteration:    500, Loss function: 7.653, Average Loss: 4.128, avg. samples / sec: 220.51
Iteration:    520, Loss function: 7.641, Average Loss: 4.197, avg. samples / sec: 285.08
Iteration:    540, Loss function: 7.494, Average Loss: 4.264, avg. samples / sec: 318.74
Iteration:    560, Loss function: 7.148, Average Loss: 4.326, avg. samples / sec: 327.75
Iteration:    580, Loss function: 7.253, Average Loss: 4.387, avg. samples / sec: 327.85
Iteration:    600, Loss function: 7.431, Average Loss: 4.449, avg. samples / sec: 338.45
Iteration:    620, Loss function: 7.187, Average Loss: 4.506, avg. samples / sec: 317.25
Iteration:    640, Loss function: 6.763, Average Loss: 4.560, avg. samples / sec: 319.89
Iteration:    660, Loss function: 7.135, Average Loss: 4.612, avg. samples / sec: 321.60
Iteration:    680, Loss function: 7.316, Average Loss: 4.664, avg. samples / sec: 329.22
Iteration:    700, Loss function: 6.832, Average Loss: 4.712, avg. samples / sec: 276.54
Iteration:    720, Loss function: 7.053, Average Loss: 4.762, avg. samples / sec: 335.19
Iteration:    740, Loss function: 6.979, Average Loss: 4.808, avg. samples / sec: 316.82
Iteration:    760, Loss function: 6.998, Average Loss: 4.852, avg. samples / sec: 318.24
Iteration:    780, Loss function: 6.848, Average Loss: 4.894, avg. samples / sec: 319.71
Iteration:    800, Loss function: 7.204, Average Loss: 4.933, avg. samples / sec: 327.08
Iteration:    820, Loss function: 6.894, Average Loss: 4.972, avg. samples / sec: 333.50
Iteration:    840, Loss function: 6.853, Average Loss: 5.010, avg. samples / sec: 285.85
Iteration:    860, Loss function: 6.882, Average Loss: 5.045, avg. samples / sec: 213.63
Iteration:    880, Loss function: 6.830, Average Loss: 5.079, avg. samples / sec: 282.53
Iteration:    900, Loss function: 6.843, Average Loss: 5.109, avg. samples / sec: 271.21
Iteration:    920, Loss function: 6.644, Average Loss: 5.139, avg. samples / sec: 255.55
Iteration:    940, Loss function: 6.750, Average Loss: 5.169, avg. samples / sec: 307.76
Iteration:    960, Loss function: 6.523, Average Loss: 5.197, avg. samples / sec: 310.12
Iteration:    980, Loss function: 6.360, Average Loss: 5.226, avg. samples / sec: 303.96
Iteration:   1000, Loss function: 6.651, Average Loss: 5.252, avg. samples / sec: 331.98
Iteration:   1020, Loss function: 6.423, Average Loss: 5.276, avg. samples / sec: 331.07
:::MLLOG {"namespace": "", "time_ms": 1639150881698, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150881700, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.402, Average Loss: 5.299, avg. samples / sec: 324.93
Iteration:   1060, Loss function: 6.269, Average Loss: 5.322, avg. samples / sec: 326.02
Iteration:   1080, Loss function: 6.364, Average Loss: 5.343, avg. samples / sec: 328.99
Iteration:   1100, Loss function: 6.113, Average Loss: 5.362, avg. samples / sec: 312.92
Iteration:   1120, Loss function: 6.237, Average Loss: 5.381, avg. samples / sec: 326.97
Iteration:   1140, Loss function: 6.451, Average Loss: 5.400, avg. samples / sec: 332.97
Iteration:   1160, Loss function: 6.247, Average Loss: 5.418, avg. samples / sec: 341.81
Iteration:   1180, Loss function: 6.363, Average Loss: 5.434, avg. samples / sec: 313.93
Iteration:   1200, Loss function: 6.248, Average Loss: 5.450, avg. samples / sec: 302.76
Iteration:   1220, Loss function: 6.219, Average Loss: 5.465, avg. samples / sec: 298.25
Iteration:   1240, Loss function: 6.069, Average Loss: 5.478, avg. samples / sec: 328.93
Iteration:   1260, Loss function: 5.984, Average Loss: 5.491, avg. samples / sec: 334.18
Iteration:   1280, Loss function: 5.822, Average Loss: 5.502, avg. samples / sec: 330.71
Iteration:   1300, Loss function: 5.985, Average Loss: 5.515, avg. samples / sec: 331.29
Iteration:   1320, Loss function: 6.059, Average Loss: 5.527, avg. samples / sec: 304.31
Iteration:   1340, Loss function: 5.779, Average Loss: 5.536, avg. samples / sec: 296.64
Iteration:   1360, Loss function: 6.046, Average Loss: 5.547, avg. samples / sec: 302.36
Iteration:   1380, Loss function: 6.196, Average Loss: 5.557, avg. samples / sec: 328.14
Iteration:   1400, Loss function: 5.966, Average Loss: 5.565, avg. samples / sec: 295.04
Iteration:   1420, Loss function: 5.881, Average Loss: 5.573, avg. samples / sec: 269.26
Iteration:   1440, Loss function: 6.451, Average Loss: 5.582, avg. samples / sec: 286.79
Iteration:   1460, Loss function: 6.281, Average Loss: 5.590, avg. samples / sec: 310.01
Iteration:   1480, Loss function: 5.811, Average Loss: 5.597, avg. samples / sec: 331.88
Iteration:   1500, Loss function: 6.037, Average Loss: 5.606, avg. samples / sec: 333.27
Iteration:   1520, Loss function: 5.940, Average Loss: 5.612, avg. samples / sec: 318.27
Iteration:   1540, Loss function: 6.045, Average Loss: 5.616, avg. samples / sec: 296.20
Iteration:   1560, Loss function: 5.583, Average Loss: 5.620, avg. samples / sec: 334.62
Iteration:   1580, Loss function: 5.689, Average Loss: 5.625, avg. samples / sec: 326.97
Iteration:   1600, Loss function: 6.203, Average Loss: 5.632, avg. samples / sec: 332.76
Iteration:   1620, Loss function: 5.850, Average Loss: 5.637, avg. samples / sec: 325.23
Iteration:   1640, Loss function: 5.977, Average Loss: 5.639, avg. samples / sec: 295.94
Iteration:   1660, Loss function: 6.151, Average Loss: 5.642, avg. samples / sec: 299.41
Iteration:   1680, Loss function: 5.694, Average Loss: 5.645, avg. samples / sec: 228.76
Iteration:   1700, Loss function: 5.452, Average Loss: 5.649, avg. samples / sec: 295.05
Iteration:   1720, Loss function: 5.708, Average Loss: 5.651, avg. samples / sec: 322.36
Iteration:   1740, Loss function: 5.886, Average Loss: 5.652, avg. samples / sec: 327.46
Iteration:   1760, Loss function: 5.502, Average Loss: 5.654, avg. samples / sec: 318.85
Iteration:   1780, Loss function: 5.832, Average Loss: 5.656, avg. samples / sec: 293.44
Iteration:   1800, Loss function: 5.682, Average Loss: 5.659, avg. samples / sec: 299.98
Iteration:   1820, Loss function: 5.926, Average Loss: 5.661, avg. samples / sec: 308.28
Iteration:   1840, Loss function: 5.938, Average Loss: 5.663, avg. samples / sec: 301.11
Iteration:   1860, Loss function: 5.709, Average Loss: 5.662, avg. samples / sec: 296.72
Iteration:   1880, Loss function: 5.918, Average Loss: 5.664, avg. samples / sec: 244.47
Iteration:   1900, Loss function: 5.912, Average Loss: 5.664, avg. samples / sec: 264.23
Iteration:   1920, Loss function: 5.620, Average Loss: 5.663, avg. samples / sec: 231.58
Iteration:   1940, Loss function: 5.839, Average Loss: 5.662, avg. samples / sec: 332.49
Iteration:   1960, Loss function: 5.476, Average Loss: 5.661, avg. samples / sec: 333.26
Iteration:   1980, Loss function: 5.714, Average Loss: 5.661, avg. samples / sec: 334.23
Iteration:   2000, Loss function: 5.714, Average Loss: 5.660, avg. samples / sec: 336.27
Iteration:   2020, Loss function: 5.503, Average Loss: 5.658, avg. samples / sec: 314.19
Iteration:   2040, Loss function: 5.555, Average Loss: 5.658, avg. samples / sec: 275.01
:::MLLOG {"namespace": "", "time_ms": 1639151264888, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151264890, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.529, Average Loss: 5.656, avg. samples / sec: 284.34
Iteration:   2080, Loss function: 5.128, Average Loss: 5.654, avg. samples / sec: 301.68
Iteration:   2100, Loss function: 5.425, Average Loss: 5.652, avg. samples / sec: 322.38
Iteration:   2120, Loss function: 5.342, Average Loss: 5.649, avg. samples / sec: 324.80
Iteration:   2140, Loss function: 5.424, Average Loss: 5.645, avg. samples / sec: 297.67
Iteration:   2160, Loss function: 5.425, Average Loss: 5.643, avg. samples / sec: 292.60
Iteration:   2180, Loss function: 5.358, Average Loss: 5.640, avg. samples / sec: 276.75
Iteration:   2200, Loss function: 5.588, Average Loss: 5.637, avg. samples / sec: 241.05
Iteration:   2220, Loss function: 5.656, Average Loss: 5.635, avg. samples / sec: 221.50
Iteration:   2240, Loss function: 5.470, Average Loss: 5.632, avg. samples / sec: 332.22
Iteration:   2260, Loss function: 5.310, Average Loss: 5.628, avg. samples / sec: 331.42
Iteration:   2280, Loss function: 5.294, Average Loss: 5.623, avg. samples / sec: 327.66
Iteration:   2300, Loss function: 5.197, Average Loss: 5.621, avg. samples / sec: 336.02
Iteration:   2320, Loss function: 5.351, Average Loss: 5.618, avg. samples / sec: 302.77
Iteration:   2340, Loss function: 5.310, Average Loss: 5.615, avg. samples / sec: 263.27
Iteration:   2360, Loss function: 5.251, Average Loss: 5.610, avg. samples / sec: 324.82
Iteration:   2380, Loss function: 5.494, Average Loss: 5.606, avg. samples / sec: 320.47
Iteration:   2400, Loss function: 5.571, Average Loss: 5.602, avg. samples / sec: 331.33
Iteration:   2420, Loss function: 5.476, Average Loss: 5.598, avg. samples / sec: 325.43
Iteration:   2440, Loss function: 5.558, Average Loss: 5.595, avg. samples / sec: 323.96
Iteration:   2460, Loss function: 5.429, Average Loss: 5.592, avg. samples / sec: 333.32
Iteration:   2480, Loss function: 5.238, Average Loss: 5.588, avg. samples / sec: 333.34
Iteration:   2500, Loss function: 5.462, Average Loss: 5.584, avg. samples / sec: 327.69
Iteration:   2520, Loss function: 5.436, Average Loss: 5.579, avg. samples / sec: 329.64
Iteration:   2540, Loss function: 5.490, Average Loss: 5.577, avg. samples / sec: 328.28
Iteration:   2560, Loss function: 5.427, Average Loss: 5.572, avg. samples / sec: 284.13
Iteration:   2580, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 244.07
Iteration:   2600, Loss function: 5.444, Average Loss: 5.566, avg. samples / sec: 291.26
Iteration:   2620, Loss function: 5.485, Average Loss: 5.561, avg. samples / sec: 254.98
Iteration:   2640, Loss function: 5.341, Average Loss: 5.559, avg. samples / sec: 218.16
Iteration:   2660, Loss function: 5.262, Average Loss: 5.556, avg. samples / sec: 283.20
Iteration:   2680, Loss function: 5.185, Average Loss: 5.553, avg. samples / sec: 298.72
Iteration:   2700, Loss function: 5.163, Average Loss: 5.547, avg. samples / sec: 266.39
Iteration:   2720, Loss function: 5.363, Average Loss: 5.544, avg. samples / sec: 332.26
Iteration:   2740, Loss function: 5.035, Average Loss: 5.539, avg. samples / sec: 280.88
Iteration:   2760, Loss function: 5.034, Average Loss: 5.534, avg. samples / sec: 308.84
Iteration:   2780, Loss function: 5.561, Average Loss: 5.530, avg. samples / sec: 327.37
Iteration:   2800, Loss function: 5.193, Average Loss: 5.525, avg. samples / sec: 290.25
Iteration:   2820, Loss function: 5.471, Average Loss: 5.520, avg. samples / sec: 306.40
Iteration:   2840, Loss function: 5.140, Average Loss: 5.516, avg. samples / sec: 331.79
Iteration:   2860, Loss function: 5.086, Average Loss: 5.512, avg. samples / sec: 333.28
Iteration:   2880, Loss function: 5.333, Average Loss: 5.507, avg. samples / sec: 335.11
Iteration:   2900, Loss function: 5.157, Average Loss: 5.503, avg. samples / sec: 326.90
Iteration:   2920, Loss function: 5.329, Average Loss: 5.497, avg. samples / sec: 295.74
Iteration:   2940, Loss function: 5.146, Average Loss: 5.492, avg. samples / sec: 287.68
Iteration:   2960, Loss function: 5.425, Average Loss: 5.487, avg. samples / sec: 263.70
Iteration:   2980, Loss function: 5.277, Average Loss: 5.483, avg. samples / sec: 263.51
Iteration:   3000, Loss function: 5.419, Average Loss: 5.477, avg. samples / sec: 327.40
Iteration:   3020, Loss function: 5.325, Average Loss: 5.470, avg. samples / sec: 336.94
Iteration:   3040, Loss function: 5.160, Average Loss: 5.465, avg. samples / sec: 330.09
Iteration:   3060, Loss function: 4.983, Average Loss: 5.459, avg. samples / sec: 325.27
Iteration:   3080, Loss function: 4.963, Average Loss: 5.454, avg. samples / sec: 294.82
:::MLLOG {"namespace": "", "time_ms": 1639151655786, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151655799, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.191, Average Loss: 5.449, avg. samples / sec: 297.24
Iteration:   3120, Loss function: 5.088, Average Loss: 5.442, avg. samples / sec: 316.72
Iteration:   3140, Loss function: 4.937, Average Loss: 5.437, avg. samples / sec: 322.51
Iteration:   3160, Loss function: 5.438, Average Loss: 5.431, avg. samples / sec: 312.55
Iteration:   3180, Loss function: 4.893, Average Loss: 5.426, avg. samples / sec: 230.57
Iteration:   3200, Loss function: 5.118, Average Loss: 5.420, avg. samples / sec: 258.30
Iteration:   3220, Loss function: 5.129, Average Loss: 5.415, avg. samples / sec: 222.17
Iteration:   3240, Loss function: 5.286, Average Loss: 5.409, avg. samples / sec: 180.50
Iteration:   3260, Loss function: 4.924, Average Loss: 5.403, avg. samples / sec: 178.86
Iteration:   3280, Loss function: 4.956, Average Loss: 5.397, avg. samples / sec: 212.12
Iteration:   3300, Loss function: 4.779, Average Loss: 5.391, avg. samples / sec: 264.40
Iteration:   3320, Loss function: 4.972, Average Loss: 5.386, avg. samples / sec: 328.35
Iteration:   3340, Loss function: 5.128, Average Loss: 5.381, avg. samples / sec: 307.83
Iteration:   3360, Loss function: 5.158, Average Loss: 5.374, avg. samples / sec: 261.31
Iteration:   3380, Loss function: 5.244, Average Loss: 5.369, avg. samples / sec: 180.79
Iteration:   3400, Loss function: 4.862, Average Loss: 5.364, avg. samples / sec: 288.83
Iteration:   3420, Loss function: 5.216, Average Loss: 5.358, avg. samples / sec: 297.43
Iteration:   3440, Loss function: 4.873, Average Loss: 5.353, avg. samples / sec: 243.48
Iteration:   3460, Loss function: 5.100, Average Loss: 5.347, avg. samples / sec: 323.39
Iteration:   3480, Loss function: 5.224, Average Loss: 5.341, avg. samples / sec: 303.06
Iteration:   3500, Loss function: 5.288, Average Loss: 5.337, avg. samples / sec: 324.97
Iteration:   3520, Loss function: 5.027, Average Loss: 5.333, avg. samples / sec: 322.48
Iteration:   3540, Loss function: 5.035, Average Loss: 5.328, avg. samples / sec: 330.55
Iteration:   3560, Loss function: 4.943, Average Loss: 5.323, avg. samples / sec: 284.70
Iteration:   3580, Loss function: 5.139, Average Loss: 5.318, avg. samples / sec: 315.30
Iteration:   3600, Loss function: 5.073, Average Loss: 5.312, avg. samples / sec: 303.72
Iteration:   3620, Loss function: 4.843, Average Loss: 5.306, avg. samples / sec: 318.48
Iteration:   3640, Loss function: 4.721, Average Loss: 5.300, avg. samples / sec: 319.18
Iteration:   3660, Loss function: 4.924, Average Loss: 5.295, avg. samples / sec: 331.22
Iteration:   3680, Loss function: 5.299, Average Loss: 5.289, avg. samples / sec: 321.78
Iteration:   3700, Loss function: 4.911, Average Loss: 5.284, avg. samples / sec: 304.73
Iteration:   3720, Loss function: 4.973, Average Loss: 5.277, avg. samples / sec: 311.59
Iteration:   3740, Loss function: 5.115, Average Loss: 5.273, avg. samples / sec: 325.22
Iteration:   3760, Loss function: 5.136, Average Loss: 5.269, avg. samples / sec: 326.37
Iteration:   3780, Loss function: 5.041, Average Loss: 5.263, avg. samples / sec: 330.29
Iteration:   3800, Loss function: 5.197, Average Loss: 5.260, avg. samples / sec: 265.32
Iteration:   3820, Loss function: 5.263, Average Loss: 5.255, avg. samples / sec: 289.43
Iteration:   3840, Loss function: 4.809, Average Loss: 5.250, avg. samples / sec: 254.28
Iteration:   3860, Loss function: 5.016, Average Loss: 5.245, avg. samples / sec: 208.26
Iteration:   3880, Loss function: 5.016, Average Loss: 5.239, avg. samples / sec: 265.19
Iteration:   3900, Loss function: 5.098, Average Loss: 5.234, avg. samples / sec: 257.08
Iteration:   3920, Loss function: 5.152, Average Loss: 5.229, avg. samples / sec: 298.42
Iteration:   3940, Loss function: 5.010, Average Loss: 5.223, avg. samples / sec: 315.97
Iteration:   3960, Loss function: 4.691, Average Loss: 5.218, avg. samples / sec: 330.38
Iteration:   3980, Loss function: 4.901, Average Loss: 5.213, avg. samples / sec: 313.64
Iteration:   4000, Loss function: 5.002, Average Loss: 5.208, avg. samples / sec: 243.31
Iteration:   4020, Loss function: 5.180, Average Loss: 5.203, avg. samples / sec: 242.23
Iteration:   4040, Loss function: 4.937, Average Loss: 5.199, avg. samples / sec: 312.66
Iteration:   4060, Loss function: 5.106, Average Loss: 5.195, avg. samples / sec: 326.50
Iteration:   4080, Loss function: 5.124, Average Loss: 5.190, avg. samples / sec: 261.27
Iteration:   4100, Loss function: 5.075, Average Loss: 5.187, avg. samples / sec: 294.98
:::MLLOG {"namespace": "", "time_ms": 1639152078334, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152078335, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.082, Average Loss: 5.184, avg. samples / sec: 272.01
Iteration:   4140, Loss function: 5.062, Average Loss: 5.179, avg. samples / sec: 297.68
Iteration:   4160, Loss function: 5.014, Average Loss: 5.173, avg. samples / sec: 277.70
Iteration:   4180, Loss function: 4.895, Average Loss: 5.169, avg. samples / sec: 315.67
Iteration:   4200, Loss function: 4.891, Average Loss: 5.164, avg. samples / sec: 321.22
Iteration:   4220, Loss function: 4.802, Average Loss: 5.159, avg. samples / sec: 328.69
Iteration:   4240, Loss function: 4.883, Average Loss: 5.154, avg. samples / sec: 325.48
Iteration:   4260, Loss function: 5.122, Average Loss: 5.149, avg. samples / sec: 244.87
Iteration:   4280, Loss function: 5.014, Average Loss: 5.143, avg. samples / sec: 237.31
Iteration:   4300, Loss function: 4.910, Average Loss: 5.136, avg. samples / sec: 164.18
Iteration:   4320, Loss function: 4.604, Average Loss: 5.132, avg. samples / sec: 263.47
Iteration:   4340, Loss function: 4.716, Average Loss: 5.127, avg. samples / sec: 276.73
Iteration:   4360, Loss function: 4.841, Average Loss: 5.123, avg. samples / sec: 291.59
Iteration:   4380, Loss function: 5.163, Average Loss: 5.119, avg. samples / sec: 295.83
Iteration:   4400, Loss function: 4.884, Average Loss: 5.115, avg. samples / sec: 254.80
Iteration:   4420, Loss function: 4.758, Average Loss: 5.110, avg. samples / sec: 336.15
Iteration:   4440, Loss function: 4.814, Average Loss: 5.105, avg. samples / sec: 235.69
Iteration:   4460, Loss function: 5.195, Average Loss: 5.101, avg. samples / sec: 312.25
Iteration:   4480, Loss function: 4.935, Average Loss: 5.097, avg. samples / sec: 321.13
Iteration:   4500, Loss function: 4.936, Average Loss: 5.095, avg. samples / sec: 320.56
Iteration:   4520, Loss function: 4.969, Average Loss: 5.091, avg. samples / sec: 325.42
Iteration:   4540, Loss function: 5.117, Average Loss: 5.087, avg. samples / sec: 326.69
Iteration:   4560, Loss function: 4.730, Average Loss: 5.083, avg. samples / sec: 335.53
Iteration:   4580, Loss function: 4.790, Average Loss: 5.081, avg. samples / sec: 333.38
Iteration:   4600, Loss function: 4.859, Average Loss: 5.078, avg. samples / sec: 318.94
Iteration:   4620, Loss function: 4.884, Average Loss: 5.073, avg. samples / sec: 290.27
Iteration:   4640, Loss function: 4.678, Average Loss: 5.066, avg. samples / sec: 246.15
Iteration:   4660, Loss function: 4.626, Average Loss: 5.062, avg. samples / sec: 232.13
Iteration:   4680, Loss function: 5.303, Average Loss: 5.058, avg. samples / sec: 286.80
Iteration:   4700, Loss function: 4.720, Average Loss: 5.054, avg. samples / sec: 296.16
Iteration:   4720, Loss function: 4.713, Average Loss: 5.049, avg. samples / sec: 292.89
Iteration:   4740, Loss function: 4.699, Average Loss: 5.044, avg. samples / sec: 319.79
Iteration:   4760, Loss function: 4.906, Average Loss: 5.041, avg. samples / sec: 316.98
Iteration:   4780, Loss function: 5.008, Average Loss: 5.037, avg. samples / sec: 341.14
Iteration:   4800, Loss function: 5.049, Average Loss: 5.034, avg. samples / sec: 325.63
Iteration:   4820, Loss function: 4.765, Average Loss: 5.031, avg. samples / sec: 313.89
Iteration:   4840, Loss function: 4.984, Average Loss: 5.027, avg. samples / sec: 334.58
Iteration:   4860, Loss function: 4.717, Average Loss: 5.023, avg. samples / sec: 330.91
Iteration:   4880, Loss function: 5.167, Average Loss: 5.018, avg. samples / sec: 301.84
Iteration:   4900, Loss function: 4.593, Average Loss: 5.016, avg. samples / sec: 286.87
Iteration:   4920, Loss function: 4.798, Average Loss: 5.013, avg. samples / sec: 266.39
Iteration:   4940, Loss function: 4.925, Average Loss: 5.009, avg. samples / sec: 288.88
Iteration:   4960, Loss function: 4.732, Average Loss: 5.007, avg. samples / sec: 304.74
Iteration:   4980, Loss function: 4.761, Average Loss: 5.003, avg. samples / sec: 271.87
Iteration:   5000, Loss function: 4.942, Average Loss: 5.000, avg. samples / sec: 225.70
Iteration:   5020, Loss function: 5.006, Average Loss: 4.998, avg. samples / sec: 174.31
Iteration:   5040, Loss function: 4.739, Average Loss: 4.995, avg. samples / sec: 282.12
Iteration:   5060, Loss function: 4.630, Average Loss: 4.992, avg. samples / sec: 281.50
Iteration:   5080, Loss function: 4.482, Average Loss: 4.988, avg. samples / sec: 325.63
Iteration:   5100, Loss function: 4.698, Average Loss: 4.985, avg. samples / sec: 310.20
Iteration:   5120, Loss function: 4.644, Average Loss: 4.982, avg. samples / sec: 314.46
Iteration:   5140, Loss function: 4.857, Average Loss: 4.978, avg. samples / sec: 337.42
:::MLLOG {"namespace": "", "time_ms": 1639152487375, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 91.19 s
:::MLLOG {"namespace": "", "time_ms": 1639152578787, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152578791, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152578791, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.97s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.849, Average Loss: 4.972, avg. samples / sec: 22.88
DONE (t=6.34s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10774
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21814
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09658
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19028
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13758
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20275
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21452
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10774 AP goal: 0.10000
Iteration:   5180, Loss function: 4.801, Average Loss: 4.967, avg. samples / sec: 342.22
:::MLLOG {"namespace": "", "time_ms": 1639152592547, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592548, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10774129299126488, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152592548, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595185, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152599
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:59 PM'
START TIMING RUN WAS 2021-12-10 03:32:38 PM
ENDING TIMING RUN AT 2021-12-10 04:09:59 PM
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:38 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:59 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-34155c66-9d5a-5286-8dfe-04d8901072bf)
+ result=2241
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-10 03:32:38 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-10 03:32:38 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
