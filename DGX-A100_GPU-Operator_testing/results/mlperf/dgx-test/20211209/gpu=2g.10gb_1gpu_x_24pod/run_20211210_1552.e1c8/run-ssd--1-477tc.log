+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-477tc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-477tc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-477tc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe'
Found 1 MIG instances: MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150360
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:40 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:40 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:40 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
Running in FAST mode
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:40 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-477tc to the sync file ...
run-ssd--1-477tc Found 20 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
    19	run-ssd--1-lh68c
    20	run-ssd--1-477tc
Fri Dec 10 15:32:45 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150369198, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369736, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1282904244, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1282904244
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150374632, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374633, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374637, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150477258, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150477258, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150483716, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483717, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150484140, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150484141, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150484143, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.857, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.138, Average Loss: 0.457, avg. samples / sec: 185.16
Iteration:     40, Loss function: 20.725, Average Loss: 0.858, avg. samples / sec: 208.94
Iteration:     60, Loss function: 20.386, Average Loss: 1.247, avg. samples / sec: 267.73
Iteration:     80, Loss function: 19.891, Average Loss: 1.621, avg. samples / sec: 230.58
Iteration:    100, Loss function: 15.290, Average Loss: 1.943, avg. samples / sec: 250.53
Iteration:    120, Loss function: 10.618, Average Loss: 2.144, avg. samples / sec: 260.10
Iteration:    140, Loss function: 9.505, Average Loss: 2.301, avg. samples / sec: 261.52
Iteration:    160, Loss function: 9.130, Average Loss: 2.440, avg. samples / sec: 259.76
Iteration:    180, Loss function: 8.892, Average Loss: 2.569, avg. samples / sec: 277.08
Iteration:    200, Loss function: 8.838, Average Loss: 2.694, avg. samples / sec: 252.52
Iteration:    220, Loss function: 8.495, Average Loss: 2.816, avg. samples / sec: 284.10
Iteration:    240, Loss function: 8.507, Average Loss: 2.932, avg. samples / sec: 318.02
Iteration:    260, Loss function: 8.788, Average Loss: 3.043, avg. samples / sec: 272.53
Iteration:    280, Loss function: 8.629, Average Loss: 3.154, avg. samples / sec: 304.76
Iteration:    300, Loss function: 8.420, Average Loss: 3.260, avg. samples / sec: 313.29
Iteration:    320, Loss function: 8.500, Average Loss: 3.362, avg. samples / sec: 210.37
Iteration:    340, Loss function: 8.493, Average Loss: 3.461, avg. samples / sec: 280.62
Iteration:    360, Loss function: 8.040, Average Loss: 3.554, avg. samples / sec: 270.75
Iteration:    380, Loss function: 7.958, Average Loss: 3.642, avg. samples / sec: 290.60
Iteration:    400, Loss function: 7.848, Average Loss: 3.726, avg. samples / sec: 295.02
Iteration:    420, Loss function: 7.637, Average Loss: 3.808, avg. samples / sec: 237.06
Iteration:    440, Loss function: 7.883, Average Loss: 3.887, avg. samples / sec: 319.38
Iteration:    460, Loss function: 7.753, Average Loss: 3.964, avg. samples / sec: 263.14
Iteration:    480, Loss function: 7.291, Average Loss: 4.038, avg. samples / sec: 314.96
Iteration:    500, Loss function: 7.782, Average Loss: 4.108, avg. samples / sec: 334.09
Iteration:    520, Loss function: 7.623, Average Loss: 4.177, avg. samples / sec: 328.94
Iteration:    540, Loss function: 7.614, Average Loss: 4.242, avg. samples / sec: 283.14
Iteration:    560, Loss function: 7.250, Average Loss: 4.307, avg. samples / sec: 214.51
Iteration:    580, Loss function: 7.202, Average Loss: 4.368, avg. samples / sec: 288.59
Iteration:    600, Loss function: 7.147, Average Loss: 4.426, avg. samples / sec: 212.81
Iteration:    620, Loss function: 7.066, Average Loss: 4.481, avg. samples / sec: 330.30
Iteration:    640, Loss function: 6.756, Average Loss: 4.536, avg. samples / sec: 288.44
Iteration:    660, Loss function: 7.159, Average Loss: 4.588, avg. samples / sec: 256.61
Iteration:    680, Loss function: 7.184, Average Loss: 4.640, avg. samples / sec: 302.44
Iteration:    700, Loss function: 7.034, Average Loss: 4.689, avg. samples / sec: 305.86
Iteration:    720, Loss function: 7.108, Average Loss: 4.737, avg. samples / sec: 285.86
Iteration:    740, Loss function: 6.780, Average Loss: 4.782, avg. samples / sec: 249.45
Iteration:    760, Loss function: 7.138, Average Loss: 4.826, avg. samples / sec: 240.69
Iteration:    780, Loss function: 6.671, Average Loss: 4.869, avg. samples / sec: 291.32
Iteration:    800, Loss function: 7.125, Average Loss: 4.908, avg. samples / sec: 315.96
Iteration:    820, Loss function: 6.741, Average Loss: 4.947, avg. samples / sec: 234.09
Iteration:    840, Loss function: 6.710, Average Loss: 4.983, avg. samples / sec: 317.39
Iteration:    860, Loss function: 6.890, Average Loss: 5.017, avg. samples / sec: 312.15
Iteration:    880, Loss function: 6.788, Average Loss: 5.050, avg. samples / sec: 327.15
Iteration:    900, Loss function: 6.936, Average Loss: 5.082, avg. samples / sec: 328.31
Iteration:    920, Loss function: 6.643, Average Loss: 5.111, avg. samples / sec: 324.84
Iteration:    940, Loss function: 6.814, Average Loss: 5.141, avg. samples / sec: 319.92
Iteration:    960, Loss function: 6.495, Average Loss: 5.170, avg. samples / sec: 317.63
Iteration:    980, Loss function: 6.550, Average Loss: 5.197, avg. samples / sec: 326.72
Iteration:   1000, Loss function: 6.651, Average Loss: 5.223, avg. samples / sec: 333.67
Iteration:   1020, Loss function: 6.281, Average Loss: 5.246, avg. samples / sec: 319.22
:::MLLOG {"namespace": "", "time_ms": 1639150909815, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150909816, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.578, Average Loss: 5.270, avg. samples / sec: 312.15
Iteration:   1060, Loss function: 6.268, Average Loss: 5.293, avg. samples / sec: 324.01
Iteration:   1080, Loss function: 6.540, Average Loss: 5.316, avg. samples / sec: 336.93
Iteration:   1100, Loss function: 6.326, Average Loss: 5.337, avg. samples / sec: 338.12
Iteration:   1120, Loss function: 6.445, Average Loss: 5.356, avg. samples / sec: 316.76
Iteration:   1140, Loss function: 6.379, Average Loss: 5.375, avg. samples / sec: 255.72
Iteration:   1160, Loss function: 6.201, Average Loss: 5.393, avg. samples / sec: 259.90
Iteration:   1180, Loss function: 6.225, Average Loss: 5.409, avg. samples / sec: 268.80
Iteration:   1200, Loss function: 6.100, Average Loss: 5.424, avg. samples / sec: 305.76
Iteration:   1220, Loss function: 6.257, Average Loss: 5.440, avg. samples / sec: 300.67
Iteration:   1240, Loss function: 6.108, Average Loss: 5.453, avg. samples / sec: 249.56
Iteration:   1260, Loss function: 5.890, Average Loss: 5.465, avg. samples / sec: 246.83
Iteration:   1280, Loss function: 5.805, Average Loss: 5.476, avg. samples / sec: 323.80
Iteration:   1300, Loss function: 6.123, Average Loss: 5.489, avg. samples / sec: 328.95
Iteration:   1320, Loss function: 6.221, Average Loss: 5.501, avg. samples / sec: 243.89
Iteration:   1340, Loss function: 5.875, Average Loss: 5.510, avg. samples / sec: 169.31
Iteration:   1360, Loss function: 5.913, Average Loss: 5.520, avg. samples / sec: 255.77
Iteration:   1380, Loss function: 6.236, Average Loss: 5.530, avg. samples / sec: 236.84
Iteration:   1400, Loss function: 6.053, Average Loss: 5.538, avg. samples / sec: 253.59
Iteration:   1420, Loss function: 5.904, Average Loss: 5.547, avg. samples / sec: 288.20
Iteration:   1440, Loss function: 6.225, Average Loss: 5.555, avg. samples / sec: 287.58
Iteration:   1460, Loss function: 6.043, Average Loss: 5.562, avg. samples / sec: 276.62
Iteration:   1480, Loss function: 5.866, Average Loss: 5.570, avg. samples / sec: 300.12
Iteration:   1500, Loss function: 6.048, Average Loss: 5.577, avg. samples / sec: 276.36
Iteration:   1520, Loss function: 5.958, Average Loss: 5.583, avg. samples / sec: 260.66
Iteration:   1540, Loss function: 6.217, Average Loss: 5.586, avg. samples / sec: 279.12
Iteration:   1560, Loss function: 5.689, Average Loss: 5.591, avg. samples / sec: 268.93
Iteration:   1580, Loss function: 5.628, Average Loss: 5.596, avg. samples / sec: 259.82
Iteration:   1600, Loss function: 6.029, Average Loss: 5.602, avg. samples / sec: 329.77
Iteration:   1620, Loss function: 5.796, Average Loss: 5.607, avg. samples / sec: 331.83
Iteration:   1640, Loss function: 5.937, Average Loss: 5.610, avg. samples / sec: 299.92
Iteration:   1660, Loss function: 5.877, Average Loss: 5.615, avg. samples / sec: 247.35
Iteration:   1680, Loss function: 5.796, Average Loss: 5.618, avg. samples / sec: 205.45
Iteration:   1700, Loss function: 5.332, Average Loss: 5.621, avg. samples / sec: 275.22
Iteration:   1720, Loss function: 5.682, Average Loss: 5.623, avg. samples / sec: 264.47
Iteration:   1740, Loss function: 5.762, Average Loss: 5.625, avg. samples / sec: 195.01
Iteration:   1760, Loss function: 5.608, Average Loss: 5.627, avg. samples / sec: 323.03
Iteration:   1780, Loss function: 5.593, Average Loss: 5.628, avg. samples / sec: 314.12
Iteration:   1800, Loss function: 5.616, Average Loss: 5.631, avg. samples / sec: 285.37
Iteration:   1820, Loss function: 6.153, Average Loss: 5.633, avg. samples / sec: 273.69
Iteration:   1840, Loss function: 5.953, Average Loss: 5.635, avg. samples / sec: 286.22
Iteration:   1860, Loss function: 5.588, Average Loss: 5.635, avg. samples / sec: 270.41
Iteration:   1880, Loss function: 5.885, Average Loss: 5.636, avg. samples / sec: 323.25
Iteration:   1900, Loss function: 5.791, Average Loss: 5.638, avg. samples / sec: 329.44
Iteration:   1920, Loss function: 5.742, Average Loss: 5.637, avg. samples / sec: 321.19
Iteration:   1940, Loss function: 5.762, Average Loss: 5.635, avg. samples / sec: 321.63
Iteration:   1960, Loss function: 5.467, Average Loss: 5.634, avg. samples / sec: 320.39
Iteration:   1980, Loss function: 5.809, Average Loss: 5.633, avg. samples / sec: 313.84
Iteration:   2000, Loss function: 5.674, Average Loss: 5.632, avg. samples / sec: 315.68
Iteration:   2020, Loss function: 5.612, Average Loss: 5.631, avg. samples / sec: 322.89
Iteration:   2040, Loss function: 5.775, Average Loss: 5.630, avg. samples / sec: 334.72
:::MLLOG {"namespace": "", "time_ms": 1639151327135, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151327136, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.655, Average Loss: 5.628, avg. samples / sec: 313.32
Iteration:   2080, Loss function: 5.122, Average Loss: 5.625, avg. samples / sec: 297.63
Iteration:   2100, Loss function: 5.295, Average Loss: 5.623, avg. samples / sec: 285.56
Iteration:   2120, Loss function: 5.402, Average Loss: 5.620, avg. samples / sec: 253.03
Iteration:   2140, Loss function: 5.453, Average Loss: 5.616, avg. samples / sec: 276.24
Iteration:   2160, Loss function: 5.330, Average Loss: 5.615, avg. samples / sec: 321.44
Iteration:   2180, Loss function: 5.390, Average Loss: 5.613, avg. samples / sec: 328.96
Iteration:   2200, Loss function: 5.626, Average Loss: 5.610, avg. samples / sec: 287.90
Iteration:   2220, Loss function: 5.572, Average Loss: 5.607, avg. samples / sec: 312.29
Iteration:   2240, Loss function: 5.550, Average Loss: 5.604, avg. samples / sec: 303.29
Iteration:   2260, Loss function: 5.256, Average Loss: 5.601, avg. samples / sec: 315.27
Iteration:   2280, Loss function: 5.198, Average Loss: 5.598, avg. samples / sec: 336.04
Iteration:   2300, Loss function: 5.140, Average Loss: 5.595, avg. samples / sec: 298.26
Iteration:   2320, Loss function: 5.251, Average Loss: 5.592, avg. samples / sec: 306.40
Iteration:   2340, Loss function: 5.600, Average Loss: 5.589, avg. samples / sec: 312.05
Iteration:   2360, Loss function: 5.487, Average Loss: 5.586, avg. samples / sec: 317.25
Iteration:   2380, Loss function: 5.263, Average Loss: 5.582, avg. samples / sec: 315.04
Iteration:   2400, Loss function: 5.641, Average Loss: 5.578, avg. samples / sec: 294.64
Iteration:   2420, Loss function: 5.407, Average Loss: 5.574, avg. samples / sec: 304.54
Iteration:   2440, Loss function: 5.458, Average Loss: 5.571, avg. samples / sec: 321.17
Iteration:   2460, Loss function: 5.186, Average Loss: 5.568, avg. samples / sec: 259.52
Iteration:   2480, Loss function: 5.360, Average Loss: 5.564, avg. samples / sec: 273.14
Iteration:   2500, Loss function: 5.439, Average Loss: 5.561, avg. samples / sec: 330.31
Iteration:   2520, Loss function: 5.437, Average Loss: 5.555, avg. samples / sec: 326.75
Iteration:   2540, Loss function: 5.524, Average Loss: 5.551, avg. samples / sec: 323.66
Iteration:   2560, Loss function: 5.267, Average Loss: 5.548, avg. samples / sec: 331.30
Iteration:   2580, Loss function: 5.282, Average Loss: 5.545, avg. samples / sec: 315.07
Iteration:   2600, Loss function: 5.418, Average Loss: 5.541, avg. samples / sec: 326.73
Iteration:   2620, Loss function: 5.609, Average Loss: 5.537, avg. samples / sec: 290.11
Iteration:   2640, Loss function: 5.206, Average Loss: 5.534, avg. samples / sec: 271.05
Iteration:   2660, Loss function: 5.285, Average Loss: 5.530, avg. samples / sec: 174.39
Iteration:   2680, Loss function: 5.137, Average Loss: 5.527, avg. samples / sec: 176.86
Iteration:   2700, Loss function: 5.172, Average Loss: 5.523, avg. samples / sec: 293.41
Iteration:   2720, Loss function: 5.456, Average Loss: 5.518, avg. samples / sec: 309.45
Iteration:   2740, Loss function: 4.916, Average Loss: 5.512, avg. samples / sec: 297.92
Iteration:   2760, Loss function: 4.992, Average Loss: 5.507, avg. samples / sec: 316.02
Iteration:   2780, Loss function: 5.436, Average Loss: 5.503, avg. samples / sec: 324.87
Iteration:   2800, Loss function: 5.183, Average Loss: 5.499, avg. samples / sec: 326.39
Iteration:   2820, Loss function: 5.565, Average Loss: 5.495, avg. samples / sec: 326.34
Iteration:   2840, Loss function: 5.144, Average Loss: 5.491, avg. samples / sec: 316.90
Iteration:   2860, Loss function: 5.087, Average Loss: 5.485, avg. samples / sec: 317.55
Iteration:   2880, Loss function: 5.259, Average Loss: 5.480, avg. samples / sec: 278.62
Iteration:   2900, Loss function: 5.062, Average Loss: 5.476, avg. samples / sec: 316.38
Iteration:   2920, Loss function: 5.031, Average Loss: 5.470, avg. samples / sec: 325.02
Iteration:   2940, Loss function: 5.034, Average Loss: 5.465, avg. samples / sec: 298.12
Iteration:   2960, Loss function: 5.368, Average Loss: 5.461, avg. samples / sec: 284.26
Iteration:   2980, Loss function: 5.227, Average Loss: 5.457, avg. samples / sec: 271.78
Iteration:   3000, Loss function: 5.364, Average Loss: 5.452, avg. samples / sec: 287.11
Iteration:   3020, Loss function: 5.359, Average Loss: 5.447, avg. samples / sec: 329.35
Iteration:   3040, Loss function: 5.318, Average Loss: 5.442, avg. samples / sec: 263.31
Iteration:   3060, Loss function: 4.897, Average Loss: 5.436, avg. samples / sec: 277.52
Iteration:   3080, Loss function: 4.909, Average Loss: 5.430, avg. samples / sec: 292.77
:::MLLOG {"namespace": "", "time_ms": 1639151725816, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151725819, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.137, Average Loss: 5.425, avg. samples / sec: 300.15
Iteration:   3120, Loss function: 5.002, Average Loss: 5.419, avg. samples / sec: 274.48
Iteration:   3140, Loss function: 5.089, Average Loss: 5.414, avg. samples / sec: 218.02
Iteration:   3160, Loss function: 5.417, Average Loss: 5.408, avg. samples / sec: 271.11
Iteration:   3180, Loss function: 4.999, Average Loss: 5.403, avg. samples / sec: 323.54
Iteration:   3200, Loss function: 5.123, Average Loss: 5.398, avg. samples / sec: 335.49
Iteration:   3220, Loss function: 5.191, Average Loss: 5.393, avg. samples / sec: 328.16
Iteration:   3240, Loss function: 5.099, Average Loss: 5.388, avg. samples / sec: 325.64
Iteration:   3260, Loss function: 5.271, Average Loss: 5.382, avg. samples / sec: 318.12
Iteration:   3280, Loss function: 4.893, Average Loss: 5.376, avg. samples / sec: 276.73
Iteration:   3300, Loss function: 4.791, Average Loss: 5.371, avg. samples / sec: 320.25
Iteration:   3320, Loss function: 4.963, Average Loss: 5.366, avg. samples / sec: 314.34
Iteration:   3340, Loss function: 5.173, Average Loss: 5.362, avg. samples / sec: 326.48
Iteration:   3360, Loss function: 5.063, Average Loss: 5.355, avg. samples / sec: 302.23
Iteration:   3380, Loss function: 5.128, Average Loss: 5.348, avg. samples / sec: 324.69
Iteration:   3400, Loss function: 4.872, Average Loss: 5.343, avg. samples / sec: 283.86
Iteration:   3420, Loss function: 5.127, Average Loss: 5.337, avg. samples / sec: 250.55
Iteration:   3440, Loss function: 4.828, Average Loss: 5.332, avg. samples / sec: 307.70
Iteration:   3460, Loss function: 5.125, Average Loss: 5.328, avg. samples / sec: 281.91
Iteration:   3480, Loss function: 5.306, Average Loss: 5.323, avg. samples / sec: 293.37
Iteration:   3500, Loss function: 5.139, Average Loss: 5.319, avg. samples / sec: 240.54
Iteration:   3520, Loss function: 4.979, Average Loss: 5.315, avg. samples / sec: 210.08
Iteration:   3540, Loss function: 5.002, Average Loss: 5.309, avg. samples / sec: 316.58
Iteration:   3560, Loss function: 4.981, Average Loss: 5.304, avg. samples / sec: 295.28
Iteration:   3580, Loss function: 5.012, Average Loss: 5.300, avg. samples / sec: 268.03
Iteration:   3600, Loss function: 5.260, Average Loss: 5.294, avg. samples / sec: 261.55
Iteration:   3620, Loss function: 4.920, Average Loss: 5.289, avg. samples / sec: 332.76
Iteration:   3640, Loss function: 4.718, Average Loss: 5.284, avg. samples / sec: 299.20
Iteration:   3660, Loss function: 5.193, Average Loss: 5.280, avg. samples / sec: 289.39
Iteration:   3680, Loss function: 5.022, Average Loss: 5.274, avg. samples / sec: 268.20
Iteration:   3700, Loss function: 4.957, Average Loss: 5.268, avg. samples / sec: 264.00
Iteration:   3720, Loss function: 4.951, Average Loss: 5.263, avg. samples / sec: 273.54
Iteration:   3740, Loss function: 5.214, Average Loss: 5.259, avg. samples / sec: 326.27
Iteration:   3760, Loss function: 4.954, Average Loss: 5.254, avg. samples / sec: 324.68
Iteration:   3780, Loss function: 5.096, Average Loss: 5.249, avg. samples / sec: 325.42
Iteration:   3800, Loss function: 5.096, Average Loss: 5.246, avg. samples / sec: 303.79
Iteration:   3820, Loss function: 5.111, Average Loss: 5.241, avg. samples / sec: 314.17
Iteration:   3840, Loss function: 4.884, Average Loss: 5.238, avg. samples / sec: 318.62
Iteration:   3860, Loss function: 4.760, Average Loss: 5.232, avg. samples / sec: 309.59
Iteration:   3880, Loss function: 5.036, Average Loss: 5.227, avg. samples / sec: 309.42
Iteration:   3900, Loss function: 5.191, Average Loss: 5.222, avg. samples / sec: 248.13
Iteration:   3920, Loss function: 5.169, Average Loss: 5.217, avg. samples / sec: 319.69
Iteration:   3940, Loss function: 4.940, Average Loss: 5.212, avg. samples / sec: 271.67
Iteration:   3960, Loss function: 4.919, Average Loss: 5.208, avg. samples / sec: 295.49
Iteration:   3980, Loss function: 4.821, Average Loss: 5.202, avg. samples / sec: 300.48
Iteration:   4000, Loss function: 5.009, Average Loss: 5.198, avg. samples / sec: 330.92
Iteration:   4020, Loss function: 4.965, Average Loss: 5.192, avg. samples / sec: 322.33
Iteration:   4040, Loss function: 5.065, Average Loss: 5.189, avg. samples / sec: 325.45
Iteration:   4060, Loss function: 5.155, Average Loss: 5.184, avg. samples / sec: 307.85
Iteration:   4080, Loss function: 4.974, Average Loss: 5.180, avg. samples / sec: 265.21
Iteration:   4100, Loss function: 5.120, Average Loss: 5.177, avg. samples / sec: 285.21
:::MLLOG {"namespace": "", "time_ms": 1639152126581, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152126594, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.020, Average Loss: 5.173, avg. samples / sec: 298.12
Iteration:   4140, Loss function: 5.037, Average Loss: 5.169, avg. samples / sec: 284.92
Iteration:   4160, Loss function: 4.735, Average Loss: 5.162, avg. samples / sec: 325.94
Iteration:   4180, Loss function: 4.891, Average Loss: 5.155, avg. samples / sec: 328.18
Iteration:   4200, Loss function: 4.653, Average Loss: 5.152, avg. samples / sec: 327.55
Iteration:   4220, Loss function: 4.873, Average Loss: 5.147, avg. samples / sec: 301.14
Iteration:   4240, Loss function: 4.834, Average Loss: 5.142, avg. samples / sec: 250.34
Iteration:   4260, Loss function: 4.930, Average Loss: 5.137, avg. samples / sec: 249.00
Iteration:   4280, Loss function: 5.086, Average Loss: 5.132, avg. samples / sec: 257.17
Iteration:   4300, Loss function: 4.721, Average Loss: 5.125, avg. samples / sec: 325.25
Iteration:   4320, Loss function: 4.744, Average Loss: 5.121, avg. samples / sec: 315.57
Iteration:   4340, Loss function: 4.774, Average Loss: 5.115, avg. samples / sec: 330.90
Iteration:   4360, Loss function: 4.857, Average Loss: 5.112, avg. samples / sec: 246.99
Iteration:   4380, Loss function: 5.076, Average Loss: 5.107, avg. samples / sec: 291.14
Iteration:   4400, Loss function: 4.767, Average Loss: 5.104, avg. samples / sec: 251.61
Iteration:   4420, Loss function: 4.873, Average Loss: 5.100, avg. samples / sec: 213.72
Iteration:   4440, Loss function: 4.996, Average Loss: 5.096, avg. samples / sec: 248.41
Iteration:   4460, Loss function: 5.326, Average Loss: 5.093, avg. samples / sec: 215.03
Iteration:   4480, Loss function: 4.953, Average Loss: 5.089, avg. samples / sec: 314.98
Iteration:   4500, Loss function: 4.816, Average Loss: 5.085, avg. samples / sec: 212.28
Iteration:   4520, Loss function: 4.723, Average Loss: 5.081, avg. samples / sec: 338.76
Iteration:   4540, Loss function: 5.119, Average Loss: 5.077, avg. samples / sec: 258.13
Iteration:   4560, Loss function: 4.691, Average Loss: 5.072, avg. samples / sec: 268.72
Iteration:   4580, Loss function: 4.659, Average Loss: 5.069, avg. samples / sec: 309.44
Iteration:   4600, Loss function: 4.878, Average Loss: 5.066, avg. samples / sec: 280.45
Iteration:   4620, Loss function: 4.755, Average Loss: 5.062, avg. samples / sec: 306.38
Iteration:   4640, Loss function: 4.819, Average Loss: 5.058, avg. samples / sec: 328.72
Iteration:   4660, Loss function: 4.773, Average Loss: 5.055, avg. samples / sec: 338.44
Iteration:   4680, Loss function: 5.165, Average Loss: 5.050, avg. samples / sec: 311.93
Iteration:   4700, Loss function: 4.726, Average Loss: 5.046, avg. samples / sec: 317.01
Iteration:   4720, Loss function: 4.731, Average Loss: 5.040, avg. samples / sec: 313.34
Iteration:   4740, Loss function: 4.813, Average Loss: 5.036, avg. samples / sec: 314.92
Iteration:   4760, Loss function: 4.592, Average Loss: 5.033, avg. samples / sec: 316.59
Iteration:   4780, Loss function: 5.018, Average Loss: 5.029, avg. samples / sec: 281.15
Iteration:   4800, Loss function: 5.009, Average Loss: 5.027, avg. samples / sec: 298.92
Iteration:   4820, Loss function: 4.872, Average Loss: 5.024, avg. samples / sec: 294.45
Iteration:   4840, Loss function: 5.118, Average Loss: 5.021, avg. samples / sec: 271.80
Iteration:   4860, Loss function: 4.727, Average Loss: 5.016, avg. samples / sec: 317.20
Iteration:   4880, Loss function: 5.141, Average Loss: 5.011, avg. samples / sec: 267.75
Iteration:   4900, Loss function: 4.423, Average Loss: 5.007, avg. samples / sec: 322.62
Iteration:   4920, Loss function: 4.873, Average Loss: 5.004, avg. samples / sec: 328.46
Iteration:   4940, Loss function: 4.727, Average Loss: 5.000, avg. samples / sec: 305.67
Iteration:   4960, Loss function: 4.804, Average Loss: 4.997, avg. samples / sec: 296.88
Iteration:   4980, Loss function: 4.604, Average Loss: 4.993, avg. samples / sec: 299.48
Iteration:   5000, Loss function: 4.737, Average Loss: 4.988, avg. samples / sec: 333.09
Iteration:   5020, Loss function: 5.025, Average Loss: 4.985, avg. samples / sec: 286.96
Iteration:   5040, Loss function: 4.906, Average Loss: 4.982, avg. samples / sec: 303.12
Iteration:   5060, Loss function: 4.633, Average Loss: 4.979, avg. samples / sec: 323.07
Iteration:   5080, Loss function: 4.555, Average Loss: 4.975, avg. samples / sec: 326.32
Iteration:   5100, Loss function: 4.837, Average Loss: 4.972, avg. samples / sec: 313.84
Iteration:   5120, Loss function: 4.611, Average Loss: 4.969, avg. samples / sec: 329.83
Iteration:   5140, Loss function: 4.919, Average Loss: 4.965, avg. samples / sec: 325.13
:::MLLOG {"namespace": "", "time_ms": 1639152527925, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 67.05 s
:::MLLOG {"namespace": "", "time_ms": 1639152595066, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152595151, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595157, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.79s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10564
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21612
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09434
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19227
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13697
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20322
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21417
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21417
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10564 AP goal: 0.10000
Iteration:   5160, Loss function: 4.953, Average Loss: 4.961, avg. samples / sec: 30.70
:::MLLOG {"namespace": "", "time_ms": 1639152601038, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601039, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10563948264173618, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601039, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601943, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:03 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:03 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150369198, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369736, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1282904244, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1282904244
:::MLLOG {"namespace": "", "time_ms": 1639150374632, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374633, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374637, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374638, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150477258, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150477258, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150483716, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483717, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150484140, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150484141, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150484143, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.857, Average Loss: 0.023, avg. samples / sec: 1.02
Iteration:     20, Loss function: 21.138, Average Loss: 0.457, avg. samples / sec: 185.16
Iteration:     40, Loss function: 20.725, Average Loss: 0.858, avg. samples / sec: 208.94
Iteration:     60, Loss function: 20.386, Average Loss: 1.247, avg. samples / sec: 267.73
Iteration:     80, Loss function: 19.891, Average Loss: 1.621, avg. samples / sec: 230.58
Iteration:    100, Loss function: 15.290, Average Loss: 1.943, avg. samples / sec: 250.53
Iteration:    120, Loss function: 10.618, Average Loss: 2.144, avg. samples / sec: 260.10
Iteration:    140, Loss function: 9.505, Average Loss: 2.301, avg. samples / sec: 261.52
Iteration:    160, Loss function: 9.130, Average Loss: 2.440, avg. samples / sec: 259.76
Iteration:    180, Loss function: 8.892, Average Loss: 2.569, avg. samples / sec: 277.08
Iteration:    200, Loss function: 8.838, Average Loss: 2.694, avg. samples / sec: 252.52
Iteration:    220, Loss function: 8.495, Average Loss: 2.816, avg. samples / sec: 284.10
Iteration:    240, Loss function: 8.507, Average Loss: 2.932, avg. samples / sec: 318.02
Iteration:    260, Loss function: 8.788, Average Loss: 3.043, avg. samples / sec: 272.53
Iteration:    280, Loss function: 8.629, Average Loss: 3.154, avg. samples / sec: 304.76
Iteration:    300, Loss function: 8.420, Average Loss: 3.260, avg. samples / sec: 313.29
Iteration:    320, Loss function: 8.500, Average Loss: 3.362, avg. samples / sec: 210.37
Iteration:    340, Loss function: 8.493, Average Loss: 3.461, avg. samples / sec: 280.62
Iteration:    360, Loss function: 8.040, Average Loss: 3.554, avg. samples / sec: 270.75
Iteration:    380, Loss function: 7.958, Average Loss: 3.642, avg. samples / sec: 290.60
Iteration:    400, Loss function: 7.848, Average Loss: 3.726, avg. samples / sec: 295.02
Iteration:    420, Loss function: 7.637, Average Loss: 3.808, avg. samples / sec: 237.06
Iteration:    440, Loss function: 7.883, Average Loss: 3.887, avg. samples / sec: 319.38
Iteration:    460, Loss function: 7.753, Average Loss: 3.964, avg. samples / sec: 263.14
Iteration:    480, Loss function: 7.291, Average Loss: 4.038, avg. samples / sec: 314.96
Iteration:    500, Loss function: 7.782, Average Loss: 4.108, avg. samples / sec: 334.09
Iteration:    520, Loss function: 7.623, Average Loss: 4.177, avg. samples / sec: 328.94
Iteration:    540, Loss function: 7.614, Average Loss: 4.242, avg. samples / sec: 283.14
Iteration:    560, Loss function: 7.250, Average Loss: 4.307, avg. samples / sec: 214.51
Iteration:    580, Loss function: 7.202, Average Loss: 4.368, avg. samples / sec: 288.59
Iteration:    600, Loss function: 7.147, Average Loss: 4.426, avg. samples / sec: 212.81
Iteration:    620, Loss function: 7.066, Average Loss: 4.481, avg. samples / sec: 330.30
Iteration:    640, Loss function: 6.756, Average Loss: 4.536, avg. samples / sec: 288.44
Iteration:    660, Loss function: 7.159, Average Loss: 4.588, avg. samples / sec: 256.61
Iteration:    680, Loss function: 7.184, Average Loss: 4.640, avg. samples / sec: 302.44
Iteration:    700, Loss function: 7.034, Average Loss: 4.689, avg. samples / sec: 305.86
Iteration:    720, Loss function: 7.108, Average Loss: 4.737, avg. samples / sec: 285.86
Iteration:    740, Loss function: 6.780, Average Loss: 4.782, avg. samples / sec: 249.45
Iteration:    760, Loss function: 7.138, Average Loss: 4.826, avg. samples / sec: 240.69
Iteration:    780, Loss function: 6.671, Average Loss: 4.869, avg. samples / sec: 291.32
Iteration:    800, Loss function: 7.125, Average Loss: 4.908, avg. samples / sec: 315.96
Iteration:    820, Loss function: 6.741, Average Loss: 4.947, avg. samples / sec: 234.09
Iteration:    840, Loss function: 6.710, Average Loss: 4.983, avg. samples / sec: 317.39
Iteration:    860, Loss function: 6.890, Average Loss: 5.017, avg. samples / sec: 312.15
Iteration:    880, Loss function: 6.788, Average Loss: 5.050, avg. samples / sec: 327.15
Iteration:    900, Loss function: 6.936, Average Loss: 5.082, avg. samples / sec: 328.31
Iteration:    920, Loss function: 6.643, Average Loss: 5.111, avg. samples / sec: 324.84
Iteration:    940, Loss function: 6.814, Average Loss: 5.141, avg. samples / sec: 319.92
Iteration:    960, Loss function: 6.495, Average Loss: 5.170, avg. samples / sec: 317.63
Iteration:    980, Loss function: 6.550, Average Loss: 5.197, avg. samples / sec: 326.72
Iteration:   1000, Loss function: 6.651, Average Loss: 5.223, avg. samples / sec: 333.67
Iteration:   1020, Loss function: 6.281, Average Loss: 5.246, avg. samples / sec: 319.22
:::MLLOG {"namespace": "", "time_ms": 1639150909815, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150909816, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.578, Average Loss: 5.270, avg. samples / sec: 312.15
Iteration:   1060, Loss function: 6.268, Average Loss: 5.293, avg. samples / sec: 324.01
Iteration:   1080, Loss function: 6.540, Average Loss: 5.316, avg. samples / sec: 336.93
Iteration:   1100, Loss function: 6.326, Average Loss: 5.337, avg. samples / sec: 338.12
Iteration:   1120, Loss function: 6.445, Average Loss: 5.356, avg. samples / sec: 316.76
Iteration:   1140, Loss function: 6.379, Average Loss: 5.375, avg. samples / sec: 255.72
Iteration:   1160, Loss function: 6.201, Average Loss: 5.393, avg. samples / sec: 259.90
Iteration:   1180, Loss function: 6.225, Average Loss: 5.409, avg. samples / sec: 268.80
Iteration:   1200, Loss function: 6.100, Average Loss: 5.424, avg. samples / sec: 305.76
Iteration:   1220, Loss function: 6.257, Average Loss: 5.440, avg. samples / sec: 300.67
Iteration:   1240, Loss function: 6.108, Average Loss: 5.453, avg. samples / sec: 249.56
Iteration:   1260, Loss function: 5.890, Average Loss: 5.465, avg. samples / sec: 246.83
Iteration:   1280, Loss function: 5.805, Average Loss: 5.476, avg. samples / sec: 323.80
Iteration:   1300, Loss function: 6.123, Average Loss: 5.489, avg. samples / sec: 328.95
Iteration:   1320, Loss function: 6.221, Average Loss: 5.501, avg. samples / sec: 243.89
Iteration:   1340, Loss function: 5.875, Average Loss: 5.510, avg. samples / sec: 169.31
Iteration:   1360, Loss function: 5.913, Average Loss: 5.520, avg. samples / sec: 255.77
Iteration:   1380, Loss function: 6.236, Average Loss: 5.530, avg. samples / sec: 236.84
Iteration:   1400, Loss function: 6.053, Average Loss: 5.538, avg. samples / sec: 253.59
Iteration:   1420, Loss function: 5.904, Average Loss: 5.547, avg. samples / sec: 288.20
Iteration:   1440, Loss function: 6.225, Average Loss: 5.555, avg. samples / sec: 287.58
Iteration:   1460, Loss function: 6.043, Average Loss: 5.562, avg. samples / sec: 276.62
Iteration:   1480, Loss function: 5.866, Average Loss: 5.570, avg. samples / sec: 300.12
Iteration:   1500, Loss function: 6.048, Average Loss: 5.577, avg. samples / sec: 276.36
Iteration:   1520, Loss function: 5.958, Average Loss: 5.583, avg. samples / sec: 260.66
Iteration:   1540, Loss function: 6.217, Average Loss: 5.586, avg. samples / sec: 279.12
Iteration:   1560, Loss function: 5.689, Average Loss: 5.591, avg. samples / sec: 268.93
Iteration:   1580, Loss function: 5.628, Average Loss: 5.596, avg. samples / sec: 259.82
Iteration:   1600, Loss function: 6.029, Average Loss: 5.602, avg. samples / sec: 329.77
Iteration:   1620, Loss function: 5.796, Average Loss: 5.607, avg. samples / sec: 331.83
Iteration:   1640, Loss function: 5.937, Average Loss: 5.610, avg. samples / sec: 299.92
Iteration:   1660, Loss function: 5.877, Average Loss: 5.615, avg. samples / sec: 247.35
Iteration:   1680, Loss function: 5.796, Average Loss: 5.618, avg. samples / sec: 205.45
Iteration:   1700, Loss function: 5.332, Average Loss: 5.621, avg. samples / sec: 275.22
Iteration:   1720, Loss function: 5.682, Average Loss: 5.623, avg. samples / sec: 264.47
Iteration:   1740, Loss function: 5.762, Average Loss: 5.625, avg. samples / sec: 195.01
Iteration:   1760, Loss function: 5.608, Average Loss: 5.627, avg. samples / sec: 323.03
Iteration:   1780, Loss function: 5.593, Average Loss: 5.628, avg. samples / sec: 314.12
Iteration:   1800, Loss function: 5.616, Average Loss: 5.631, avg. samples / sec: 285.37
Iteration:   1820, Loss function: 6.153, Average Loss: 5.633, avg. samples / sec: 273.69
Iteration:   1840, Loss function: 5.953, Average Loss: 5.635, avg. samples / sec: 286.22
Iteration:   1860, Loss function: 5.588, Average Loss: 5.635, avg. samples / sec: 270.41
Iteration:   1880, Loss function: 5.885, Average Loss: 5.636, avg. samples / sec: 323.25
Iteration:   1900, Loss function: 5.791, Average Loss: 5.638, avg. samples / sec: 329.44
Iteration:   1920, Loss function: 5.742, Average Loss: 5.637, avg. samples / sec: 321.19
Iteration:   1940, Loss function: 5.762, Average Loss: 5.635, avg. samples / sec: 321.63
Iteration:   1960, Loss function: 5.467, Average Loss: 5.634, avg. samples / sec: 320.39
Iteration:   1980, Loss function: 5.809, Average Loss: 5.633, avg. samples / sec: 313.84
Iteration:   2000, Loss function: 5.674, Average Loss: 5.632, avg. samples / sec: 315.68
Iteration:   2020, Loss function: 5.612, Average Loss: 5.631, avg. samples / sec: 322.89
Iteration:   2040, Loss function: 5.775, Average Loss: 5.630, avg. samples / sec: 334.72
:::MLLOG {"namespace": "", "time_ms": 1639151327135, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151327136, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.655, Average Loss: 5.628, avg. samples / sec: 313.32
Iteration:   2080, Loss function: 5.122, Average Loss: 5.625, avg. samples / sec: 297.63
Iteration:   2100, Loss function: 5.295, Average Loss: 5.623, avg. samples / sec: 285.56
Iteration:   2120, Loss function: 5.402, Average Loss: 5.620, avg. samples / sec: 253.03
Iteration:   2140, Loss function: 5.453, Average Loss: 5.616, avg. samples / sec: 276.24
Iteration:   2160, Loss function: 5.330, Average Loss: 5.615, avg. samples / sec: 321.44
Iteration:   2180, Loss function: 5.390, Average Loss: 5.613, avg. samples / sec: 328.96
Iteration:   2200, Loss function: 5.626, Average Loss: 5.610, avg. samples / sec: 287.90
Iteration:   2220, Loss function: 5.572, Average Loss: 5.607, avg. samples / sec: 312.29
Iteration:   2240, Loss function: 5.550, Average Loss: 5.604, avg. samples / sec: 303.29
Iteration:   2260, Loss function: 5.256, Average Loss: 5.601, avg. samples / sec: 315.27
Iteration:   2280, Loss function: 5.198, Average Loss: 5.598, avg. samples / sec: 336.04
Iteration:   2300, Loss function: 5.140, Average Loss: 5.595, avg. samples / sec: 298.26
Iteration:   2320, Loss function: 5.251, Average Loss: 5.592, avg. samples / sec: 306.40
Iteration:   2340, Loss function: 5.600, Average Loss: 5.589, avg. samples / sec: 312.05
Iteration:   2360, Loss function: 5.487, Average Loss: 5.586, avg. samples / sec: 317.25
Iteration:   2380, Loss function: 5.263, Average Loss: 5.582, avg. samples / sec: 315.04
Iteration:   2400, Loss function: 5.641, Average Loss: 5.578, avg. samples / sec: 294.64
Iteration:   2420, Loss function: 5.407, Average Loss: 5.574, avg. samples / sec: 304.54
Iteration:   2440, Loss function: 5.458, Average Loss: 5.571, avg. samples / sec: 321.17
Iteration:   2460, Loss function: 5.186, Average Loss: 5.568, avg. samples / sec: 259.52
Iteration:   2480, Loss function: 5.360, Average Loss: 5.564, avg. samples / sec: 273.14
Iteration:   2500, Loss function: 5.439, Average Loss: 5.561, avg. samples / sec: 330.31
Iteration:   2520, Loss function: 5.437, Average Loss: 5.555, avg. samples / sec: 326.75
Iteration:   2540, Loss function: 5.524, Average Loss: 5.551, avg. samples / sec: 323.66
Iteration:   2560, Loss function: 5.267, Average Loss: 5.548, avg. samples / sec: 331.30
Iteration:   2580, Loss function: 5.282, Average Loss: 5.545, avg. samples / sec: 315.07
Iteration:   2600, Loss function: 5.418, Average Loss: 5.541, avg. samples / sec: 326.73
Iteration:   2620, Loss function: 5.609, Average Loss: 5.537, avg. samples / sec: 290.11
Iteration:   2640, Loss function: 5.206, Average Loss: 5.534, avg. samples / sec: 271.05
Iteration:   2660, Loss function: 5.285, Average Loss: 5.530, avg. samples / sec: 174.39
Iteration:   2680, Loss function: 5.137, Average Loss: 5.527, avg. samples / sec: 176.86
Iteration:   2700, Loss function: 5.172, Average Loss: 5.523, avg. samples / sec: 293.41
Iteration:   2720, Loss function: 5.456, Average Loss: 5.518, avg. samples / sec: 309.45
Iteration:   2740, Loss function: 4.916, Average Loss: 5.512, avg. samples / sec: 297.92
Iteration:   2760, Loss function: 4.992, Average Loss: 5.507, avg. samples / sec: 316.02
Iteration:   2780, Loss function: 5.436, Average Loss: 5.503, avg. samples / sec: 324.87
Iteration:   2800, Loss function: 5.183, Average Loss: 5.499, avg. samples / sec: 326.39
Iteration:   2820, Loss function: 5.565, Average Loss: 5.495, avg. samples / sec: 326.34
Iteration:   2840, Loss function: 5.144, Average Loss: 5.491, avg. samples / sec: 316.90
Iteration:   2860, Loss function: 5.087, Average Loss: 5.485, avg. samples / sec: 317.55
Iteration:   2880, Loss function: 5.259, Average Loss: 5.480, avg. samples / sec: 278.62
Iteration:   2900, Loss function: 5.062, Average Loss: 5.476, avg. samples / sec: 316.38
Iteration:   2920, Loss function: 5.031, Average Loss: 5.470, avg. samples / sec: 325.02
Iteration:   2940, Loss function: 5.034, Average Loss: 5.465, avg. samples / sec: 298.12
Iteration:   2960, Loss function: 5.368, Average Loss: 5.461, avg. samples / sec: 284.26
Iteration:   2980, Loss function: 5.227, Average Loss: 5.457, avg. samples / sec: 271.78
Iteration:   3000, Loss function: 5.364, Average Loss: 5.452, avg. samples / sec: 287.11
Iteration:   3020, Loss function: 5.359, Average Loss: 5.447, avg. samples / sec: 329.35
Iteration:   3040, Loss function: 5.318, Average Loss: 5.442, avg. samples / sec: 263.31
Iteration:   3060, Loss function: 4.897, Average Loss: 5.436, avg. samples / sec: 277.52
Iteration:   3080, Loss function: 4.909, Average Loss: 5.430, avg. samples / sec: 292.77
:::MLLOG {"namespace": "", "time_ms": 1639151725816, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151725819, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.137, Average Loss: 5.425, avg. samples / sec: 300.15
Iteration:   3120, Loss function: 5.002, Average Loss: 5.419, avg. samples / sec: 274.48
Iteration:   3140, Loss function: 5.089, Average Loss: 5.414, avg. samples / sec: 218.02
Iteration:   3160, Loss function: 5.417, Average Loss: 5.408, avg. samples / sec: 271.11
Iteration:   3180, Loss function: 4.999, Average Loss: 5.403, avg. samples / sec: 323.54
Iteration:   3200, Loss function: 5.123, Average Loss: 5.398, avg. samples / sec: 335.49
Iteration:   3220, Loss function: 5.191, Average Loss: 5.393, avg. samples / sec: 328.16
Iteration:   3240, Loss function: 5.099, Average Loss: 5.388, avg. samples / sec: 325.64
Iteration:   3260, Loss function: 5.271, Average Loss: 5.382, avg. samples / sec: 318.12
Iteration:   3280, Loss function: 4.893, Average Loss: 5.376, avg. samples / sec: 276.73
Iteration:   3300, Loss function: 4.791, Average Loss: 5.371, avg. samples / sec: 320.25
Iteration:   3320, Loss function: 4.963, Average Loss: 5.366, avg. samples / sec: 314.34
Iteration:   3340, Loss function: 5.173, Average Loss: 5.362, avg. samples / sec: 326.48
Iteration:   3360, Loss function: 5.063, Average Loss: 5.355, avg. samples / sec: 302.23
Iteration:   3380, Loss function: 5.128, Average Loss: 5.348, avg. samples / sec: 324.69
Iteration:   3400, Loss function: 4.872, Average Loss: 5.343, avg. samples / sec: 283.86
Iteration:   3420, Loss function: 5.127, Average Loss: 5.337, avg. samples / sec: 250.55
Iteration:   3440, Loss function: 4.828, Average Loss: 5.332, avg. samples / sec: 307.70
Iteration:   3460, Loss function: 5.125, Average Loss: 5.328, avg. samples / sec: 281.91
Iteration:   3480, Loss function: 5.306, Average Loss: 5.323, avg. samples / sec: 293.37
Iteration:   3500, Loss function: 5.139, Average Loss: 5.319, avg. samples / sec: 240.54
Iteration:   3520, Loss function: 4.979, Average Loss: 5.315, avg. samples / sec: 210.08
Iteration:   3540, Loss function: 5.002, Average Loss: 5.309, avg. samples / sec: 316.58
Iteration:   3560, Loss function: 4.981, Average Loss: 5.304, avg. samples / sec: 295.28
Iteration:   3580, Loss function: 5.012, Average Loss: 5.300, avg. samples / sec: 268.03
Iteration:   3600, Loss function: 5.260, Average Loss: 5.294, avg. samples / sec: 261.55
Iteration:   3620, Loss function: 4.920, Average Loss: 5.289, avg. samples / sec: 332.76
Iteration:   3640, Loss function: 4.718, Average Loss: 5.284, avg. samples / sec: 299.20
Iteration:   3660, Loss function: 5.193, Average Loss: 5.280, avg. samples / sec: 289.39
Iteration:   3680, Loss function: 5.022, Average Loss: 5.274, avg. samples / sec: 268.20
Iteration:   3700, Loss function: 4.957, Average Loss: 5.268, avg. samples / sec: 264.00
Iteration:   3720, Loss function: 4.951, Average Loss: 5.263, avg. samples / sec: 273.54
Iteration:   3740, Loss function: 5.214, Average Loss: 5.259, avg. samples / sec: 326.27
Iteration:   3760, Loss function: 4.954, Average Loss: 5.254, avg. samples / sec: 324.68
Iteration:   3780, Loss function: 5.096, Average Loss: 5.249, avg. samples / sec: 325.42
Iteration:   3800, Loss function: 5.096, Average Loss: 5.246, avg. samples / sec: 303.79
Iteration:   3820, Loss function: 5.111, Average Loss: 5.241, avg. samples / sec: 314.17
Iteration:   3840, Loss function: 4.884, Average Loss: 5.238, avg. samples / sec: 318.62
Iteration:   3860, Loss function: 4.760, Average Loss: 5.232, avg. samples / sec: 309.59
Iteration:   3880, Loss function: 5.036, Average Loss: 5.227, avg. samples / sec: 309.42
Iteration:   3900, Loss function: 5.191, Average Loss: 5.222, avg. samples / sec: 248.13
Iteration:   3920, Loss function: 5.169, Average Loss: 5.217, avg. samples / sec: 319.69
Iteration:   3940, Loss function: 4.940, Average Loss: 5.212, avg. samples / sec: 271.67
Iteration:   3960, Loss function: 4.919, Average Loss: 5.208, avg. samples / sec: 295.49
Iteration:   3980, Loss function: 4.821, Average Loss: 5.202, avg. samples / sec: 300.48
Iteration:   4000, Loss function: 5.009, Average Loss: 5.198, avg. samples / sec: 330.92
Iteration:   4020, Loss function: 4.965, Average Loss: 5.192, avg. samples / sec: 322.33
Iteration:   4040, Loss function: 5.065, Average Loss: 5.189, avg. samples / sec: 325.45
Iteration:   4060, Loss function: 5.155, Average Loss: 5.184, avg. samples / sec: 307.85
Iteration:   4080, Loss function: 4.974, Average Loss: 5.180, avg. samples / sec: 265.21
Iteration:   4100, Loss function: 5.120, Average Loss: 5.177, avg. samples / sec: 285.21
:::MLLOG {"namespace": "", "time_ms": 1639152126581, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152126594, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.020, Average Loss: 5.173, avg. samples / sec: 298.12
Iteration:   4140, Loss function: 5.037, Average Loss: 5.169, avg. samples / sec: 284.92
Iteration:   4160, Loss function: 4.735, Average Loss: 5.162, avg. samples / sec: 325.94
Iteration:   4180, Loss function: 4.891, Average Loss: 5.155, avg. samples / sec: 328.18
Iteration:   4200, Loss function: 4.653, Average Loss: 5.152, avg. samples / sec: 327.55
Iteration:   4220, Loss function: 4.873, Average Loss: 5.147, avg. samples / sec: 301.14
Iteration:   4240, Loss function: 4.834, Average Loss: 5.142, avg. samples / sec: 250.34
Iteration:   4260, Loss function: 4.930, Average Loss: 5.137, avg. samples / sec: 249.00
Iteration:   4280, Loss function: 5.086, Average Loss: 5.132, avg. samples / sec: 257.17
Iteration:   4300, Loss function: 4.721, Average Loss: 5.125, avg. samples / sec: 325.25
Iteration:   4320, Loss function: 4.744, Average Loss: 5.121, avg. samples / sec: 315.57
Iteration:   4340, Loss function: 4.774, Average Loss: 5.115, avg. samples / sec: 330.90
Iteration:   4360, Loss function: 4.857, Average Loss: 5.112, avg. samples / sec: 246.99
Iteration:   4380, Loss function: 5.076, Average Loss: 5.107, avg. samples / sec: 291.14
Iteration:   4400, Loss function: 4.767, Average Loss: 5.104, avg. samples / sec: 251.61
Iteration:   4420, Loss function: 4.873, Average Loss: 5.100, avg. samples / sec: 213.72
Iteration:   4440, Loss function: 4.996, Average Loss: 5.096, avg. samples / sec: 248.41
Iteration:   4460, Loss function: 5.326, Average Loss: 5.093, avg. samples / sec: 215.03
Iteration:   4480, Loss function: 4.953, Average Loss: 5.089, avg. samples / sec: 314.98
Iteration:   4500, Loss function: 4.816, Average Loss: 5.085, avg. samples / sec: 212.28
Iteration:   4520, Loss function: 4.723, Average Loss: 5.081, avg. samples / sec: 338.76
Iteration:   4540, Loss function: 5.119, Average Loss: 5.077, avg. samples / sec: 258.13
Iteration:   4560, Loss function: 4.691, Average Loss: 5.072, avg. samples / sec: 268.72
Iteration:   4580, Loss function: 4.659, Average Loss: 5.069, avg. samples / sec: 309.44
Iteration:   4600, Loss function: 4.878, Average Loss: 5.066, avg. samples / sec: 280.45
Iteration:   4620, Loss function: 4.755, Average Loss: 5.062, avg. samples / sec: 306.38
Iteration:   4640, Loss function: 4.819, Average Loss: 5.058, avg. samples / sec: 328.72
Iteration:   4660, Loss function: 4.773, Average Loss: 5.055, avg. samples / sec: 338.44
Iteration:   4680, Loss function: 5.165, Average Loss: 5.050, avg. samples / sec: 311.93
Iteration:   4700, Loss function: 4.726, Average Loss: 5.046, avg. samples / sec: 317.01
Iteration:   4720, Loss function: 4.731, Average Loss: 5.040, avg. samples / sec: 313.34
Iteration:   4740, Loss function: 4.813, Average Loss: 5.036, avg. samples / sec: 314.92
Iteration:   4760, Loss function: 4.592, Average Loss: 5.033, avg. samples / sec: 316.59
Iteration:   4780, Loss function: 5.018, Average Loss: 5.029, avg. samples / sec: 281.15
Iteration:   4800, Loss function: 5.009, Average Loss: 5.027, avg. samples / sec: 298.92
Iteration:   4820, Loss function: 4.872, Average Loss: 5.024, avg. samples / sec: 294.45
Iteration:   4840, Loss function: 5.118, Average Loss: 5.021, avg. samples / sec: 271.80
Iteration:   4860, Loss function: 4.727, Average Loss: 5.016, avg. samples / sec: 317.20
Iteration:   4880, Loss function: 5.141, Average Loss: 5.011, avg. samples / sec: 267.75
Iteration:   4900, Loss function: 4.423, Average Loss: 5.007, avg. samples / sec: 322.62
Iteration:   4920, Loss function: 4.873, Average Loss: 5.004, avg. samples / sec: 328.46
Iteration:   4940, Loss function: 4.727, Average Loss: 5.000, avg. samples / sec: 305.67
Iteration:   4960, Loss function: 4.804, Average Loss: 4.997, avg. samples / sec: 296.88
Iteration:   4980, Loss function: 4.604, Average Loss: 4.993, avg. samples / sec: 299.48
Iteration:   5000, Loss function: 4.737, Average Loss: 4.988, avg. samples / sec: 333.09
Iteration:   5020, Loss function: 5.025, Average Loss: 4.985, avg. samples / sec: 286.96
Iteration:   5040, Loss function: 4.906, Average Loss: 4.982, avg. samples / sec: 303.12
Iteration:   5060, Loss function: 4.633, Average Loss: 4.979, avg. samples / sec: 323.07
Iteration:   5080, Loss function: 4.555, Average Loss: 4.975, avg. samples / sec: 326.32
Iteration:   5100, Loss function: 4.837, Average Loss: 4.972, avg. samples / sec: 313.84
Iteration:   5120, Loss function: 4.611, Average Loss: 4.969, avg. samples / sec: 329.83
Iteration:   5140, Loss function: 4.919, Average Loss: 4.965, avg. samples / sec: 325.13
:::MLLOG {"namespace": "", "time_ms": 1639152527925, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 67.05 s
:::MLLOG {"namespace": "", "time_ms": 1639152595066, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152595151, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152595157, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.79s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10564
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21612
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09434
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19227
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13697
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20322
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21417
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21417
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10564 AP goal: 0.10000
Iteration:   5160, Loss function: 4.953, Average Loss: 4.961, avg. samples / sec: 30.70
:::MLLOG {"namespace": "", "time_ms": 1639152601038, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601039, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10563948264173618, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601039, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152601943, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152603
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:03 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:40 PM'
START TIMING RUN WAS 2021-12-10 03:32:40 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:03 PM'
ENDING TIMING RUN AT 2021-12-10 04:10:03 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-b88d6cd2-987c-51f2-a1a2-33ac4a330dfe)
+ result=2243
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2243,nvidia,2021-12-10 03:32:40 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2243,nvidia,2021-12-10 03:32:40 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
