+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-pkxwz.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-pkxwz.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-pkxwz.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0'
Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150357
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-pkxwz to the sync file ...
run-ssd--1-pkxwz Found 9 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
Fri Dec 10 15:32:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364818, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364992, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2388755949, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2388755949
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150367071, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150367072, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150471959, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150471959, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150473933, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473934, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474378, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474379, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474381, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.520, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.054, Average Loss: 0.453, avg. samples / sec: 292.97
Iteration:     40, Loss function: 20.779, Average Loss: 0.855, avg. samples / sec: 277.74
Iteration:     60, Loss function: 20.409, Average Loss: 1.246, avg. samples / sec: 267.71
Iteration:     80, Loss function: 20.343, Average Loss: 1.622, avg. samples / sec: 234.03
Iteration:    100, Loss function: 16.947, Average Loss: 1.964, avg. samples / sec: 269.47
Iteration:    120, Loss function: 12.418, Average Loss: 2.191, avg. samples / sec: 266.78
Iteration:    140, Loss function: 10.055, Average Loss: 2.362, avg. samples / sec: 250.71
Iteration:    160, Loss function: 9.440, Average Loss: 2.506, avg. samples / sec: 273.06
Iteration:    180, Loss function: 9.164, Average Loss: 2.638, avg. samples / sec: 280.18
Iteration:    200, Loss function: 8.693, Average Loss: 2.763, avg. samples / sec: 279.46
Iteration:    220, Loss function: 8.610, Average Loss: 2.884, avg. samples / sec: 267.66
Iteration:    240, Loss function: 8.566, Average Loss: 3.001, avg. samples / sec: 276.39
Iteration:    260, Loss function: 8.829, Average Loss: 3.114, avg. samples / sec: 309.68
Iteration:    280, Loss function: 8.404, Average Loss: 3.223, avg. samples / sec: 290.11
Iteration:    300, Loss function: 8.184, Average Loss: 3.325, avg. samples / sec: 314.21
Iteration:    320, Loss function: 8.380, Average Loss: 3.425, avg. samples / sec: 310.39
Iteration:    340, Loss function: 8.289, Average Loss: 3.523, avg. samples / sec: 308.97
Iteration:    360, Loss function: 8.013, Average Loss: 3.616, avg. samples / sec: 277.76
Iteration:    380, Loss function: 7.882, Average Loss: 3.705, avg. samples / sec: 327.27
Iteration:    400, Loss function: 8.123, Average Loss: 3.790, avg. samples / sec: 262.83
Iteration:    420, Loss function: 7.774, Average Loss: 3.872, avg. samples / sec: 310.11
Iteration:    440, Loss function: 7.755, Average Loss: 3.950, avg. samples / sec: 276.84
Iteration:    460, Loss function: 7.953, Average Loss: 4.026, avg. samples / sec: 316.48
Iteration:    480, Loss function: 7.429, Average Loss: 4.099, avg. samples / sec: 317.79
Iteration:    500, Loss function: 7.474, Average Loss: 4.169, avg. samples / sec: 338.57
Iteration:    520, Loss function: 7.516, Average Loss: 4.235, avg. samples / sec: 324.40
Iteration:    540, Loss function: 7.483, Average Loss: 4.301, avg. samples / sec: 328.19
Iteration:    560, Loss function: 7.274, Average Loss: 4.363, avg. samples / sec: 309.74
Iteration:    580, Loss function: 6.953, Average Loss: 4.423, avg. samples / sec: 318.14
Iteration:    600, Loss function: 7.326, Average Loss: 4.482, avg. samples / sec: 297.65
Iteration:    620, Loss function: 7.070, Average Loss: 4.537, avg. samples / sec: 333.85
Iteration:    640, Loss function: 6.858, Average Loss: 4.590, avg. samples / sec: 304.59
Iteration:    660, Loss function: 7.024, Average Loss: 4.641, avg. samples / sec: 323.79
Iteration:    680, Loss function: 7.281, Average Loss: 4.692, avg. samples / sec: 328.41
Iteration:    700, Loss function: 6.851, Average Loss: 4.739, avg. samples / sec: 318.18
Iteration:    720, Loss function: 7.043, Average Loss: 4.788, avg. samples / sec: 314.44
Iteration:    740, Loss function: 6.823, Average Loss: 4.833, avg. samples / sec: 327.03
Iteration:    760, Loss function: 7.134, Average Loss: 4.876, avg. samples / sec: 335.88
Iteration:    780, Loss function: 7.071, Average Loss: 4.918, avg. samples / sec: 248.22
Iteration:    800, Loss function: 7.126, Average Loss: 4.957, avg. samples / sec: 295.15
Iteration:    820, Loss function: 6.701, Average Loss: 4.994, avg. samples / sec: 286.85
Iteration:    840, Loss function: 6.738, Average Loss: 5.029, avg. samples / sec: 268.83
Iteration:    860, Loss function: 6.883, Average Loss: 5.062, avg. samples / sec: 253.62
Iteration:    880, Loss function: 6.731, Average Loss: 5.094, avg. samples / sec: 276.03
Iteration:    900, Loss function: 6.896, Average Loss: 5.125, avg. samples / sec: 329.96
Iteration:    920, Loss function: 6.481, Average Loss: 5.154, avg. samples / sec: 291.64
Iteration:    940, Loss function: 6.723, Average Loss: 5.183, avg. samples / sec: 299.59
Iteration:    960, Loss function: 6.447, Average Loss: 5.211, avg. samples / sec: 292.50
Iteration:    980, Loss function: 6.544, Average Loss: 5.237, avg. samples / sec: 312.64
Iteration:   1000, Loss function: 6.525, Average Loss: 5.261, avg. samples / sec: 322.80
Iteration:   1020, Loss function: 6.231, Average Loss: 5.285, avg. samples / sec: 330.42
:::MLLOG {"namespace": "", "time_ms": 1639150871471, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150871473, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.509, Average Loss: 5.309, avg. samples / sec: 332.81
Iteration:   1060, Loss function: 6.349, Average Loss: 5.330, avg. samples / sec: 257.34
Iteration:   1080, Loss function: 6.383, Average Loss: 5.352, avg. samples / sec: 311.82
Iteration:   1100, Loss function: 6.085, Average Loss: 5.371, avg. samples / sec: 337.32
Iteration:   1120, Loss function: 6.163, Average Loss: 5.389, avg. samples / sec: 336.28
Iteration:   1140, Loss function: 6.304, Average Loss: 5.407, avg. samples / sec: 330.97
Iteration:   1160, Loss function: 6.285, Average Loss: 5.425, avg. samples / sec: 332.84
Iteration:   1180, Loss function: 6.349, Average Loss: 5.440, avg. samples / sec: 315.32
Iteration:   1200, Loss function: 6.208, Average Loss: 5.455, avg. samples / sec: 277.58
Iteration:   1220, Loss function: 6.256, Average Loss: 5.470, avg. samples / sec: 309.90
Iteration:   1240, Loss function: 6.074, Average Loss: 5.483, avg. samples / sec: 281.07
Iteration:   1260, Loss function: 6.038, Average Loss: 5.495, avg. samples / sec: 223.31
Iteration:   1280, Loss function: 5.903, Average Loss: 5.508, avg. samples / sec: 220.08
Iteration:   1300, Loss function: 6.167, Average Loss: 5.521, avg. samples / sec: 285.36
Iteration:   1320, Loss function: 6.172, Average Loss: 5.533, avg. samples / sec: 315.62
Iteration:   1340, Loss function: 5.903, Average Loss: 5.543, avg. samples / sec: 319.35
Iteration:   1360, Loss function: 5.989, Average Loss: 5.552, avg. samples / sec: 320.40
Iteration:   1380, Loss function: 6.274, Average Loss: 5.562, avg. samples / sec: 297.47
Iteration:   1400, Loss function: 6.166, Average Loss: 5.571, avg. samples / sec: 275.23
Iteration:   1420, Loss function: 5.958, Average Loss: 5.579, avg. samples / sec: 254.33
Iteration:   1440, Loss function: 6.264, Average Loss: 5.586, avg. samples / sec: 157.08
Iteration:   1460, Loss function: 6.195, Average Loss: 5.594, avg. samples / sec: 220.21
Iteration:   1480, Loss function: 5.808, Average Loss: 5.602, avg. samples / sec: 256.73
Iteration:   1500, Loss function: 5.991, Average Loss: 5.609, avg. samples / sec: 324.99
Iteration:   1520, Loss function: 5.900, Average Loss: 5.615, avg. samples / sec: 330.84
Iteration:   1540, Loss function: 6.070, Average Loss: 5.619, avg. samples / sec: 318.01
Iteration:   1560, Loss function: 5.666, Average Loss: 5.624, avg. samples / sec: 289.36
Iteration:   1580, Loss function: 5.539, Average Loss: 5.627, avg. samples / sec: 256.66
Iteration:   1600, Loss function: 6.033, Average Loss: 5.632, avg. samples / sec: 268.84
Iteration:   1620, Loss function: 5.777, Average Loss: 5.636, avg. samples / sec: 225.10
Iteration:   1640, Loss function: 5.920, Average Loss: 5.638, avg. samples / sec: 281.24
Iteration:   1660, Loss function: 5.916, Average Loss: 5.642, avg. samples / sec: 327.48
Iteration:   1680, Loss function: 5.699, Average Loss: 5.645, avg. samples / sec: 336.71
Iteration:   1700, Loss function: 5.137, Average Loss: 5.648, avg. samples / sec: 333.41
Iteration:   1720, Loss function: 5.674, Average Loss: 5.651, avg. samples / sec: 332.07
Iteration:   1740, Loss function: 5.679, Average Loss: 5.652, avg. samples / sec: 302.79
Iteration:   1760, Loss function: 5.565, Average Loss: 5.654, avg. samples / sec: 269.27
Iteration:   1780, Loss function: 5.762, Average Loss: 5.655, avg. samples / sec: 237.49
Iteration:   1800, Loss function: 5.588, Average Loss: 5.657, avg. samples / sec: 311.74
Iteration:   1820, Loss function: 6.022, Average Loss: 5.657, avg. samples / sec: 256.77
Iteration:   1840, Loss function: 5.885, Average Loss: 5.658, avg. samples / sec: 297.29
Iteration:   1860, Loss function: 5.693, Average Loss: 5.656, avg. samples / sec: 223.90
Iteration:   1880, Loss function: 5.845, Average Loss: 5.657, avg. samples / sec: 247.62
Iteration:   1900, Loss function: 5.801, Average Loss: 5.657, avg. samples / sec: 244.88
Iteration:   1920, Loss function: 5.737, Average Loss: 5.657, avg. samples / sec: 315.66
Iteration:   1940, Loss function: 5.652, Average Loss: 5.656, avg. samples / sec: 277.29
Iteration:   1960, Loss function: 5.610, Average Loss: 5.655, avg. samples / sec: 287.96
Iteration:   1980, Loss function: 5.751, Average Loss: 5.655, avg. samples / sec: 307.11
Iteration:   2000, Loss function: 5.436, Average Loss: 5.654, avg. samples / sec: 322.85
Iteration:   2020, Loss function: 5.657, Average Loss: 5.652, avg. samples / sec: 300.95
Iteration:   2040, Loss function: 5.653, Average Loss: 5.652, avg. samples / sec: 323.48
:::MLLOG {"namespace": "", "time_ms": 1639151288192, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151288195, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.574, Average Loss: 5.650, avg. samples / sec: 287.52
Iteration:   2080, Loss function: 5.092, Average Loss: 5.647, avg. samples / sec: 292.28
Iteration:   2100, Loss function: 5.418, Average Loss: 5.645, avg. samples / sec: 302.18
Iteration:   2120, Loss function: 5.179, Average Loss: 5.641, avg. samples / sec: 317.31
Iteration:   2140, Loss function: 5.346, Average Loss: 5.636, avg. samples / sec: 253.40
Iteration:   2160, Loss function: 5.415, Average Loss: 5.634, avg. samples / sec: 304.31
Iteration:   2180, Loss function: 5.378, Average Loss: 5.632, avg. samples / sec: 284.80
Iteration:   2200, Loss function: 5.708, Average Loss: 5.628, avg. samples / sec: 278.55
Iteration:   2220, Loss function: 5.688, Average Loss: 5.626, avg. samples / sec: 329.47
Iteration:   2240, Loss function: 5.336, Average Loss: 5.622, avg. samples / sec: 312.53
Iteration:   2260, Loss function: 5.295, Average Loss: 5.619, avg. samples / sec: 324.82
Iteration:   2280, Loss function: 5.530, Average Loss: 5.616, avg. samples / sec: 318.99
Iteration:   2300, Loss function: 5.032, Average Loss: 5.612, avg. samples / sec: 321.81
Iteration:   2320, Loss function: 5.320, Average Loss: 5.609, avg. samples / sec: 316.80
Iteration:   2340, Loss function: 5.740, Average Loss: 5.606, avg. samples / sec: 321.08
Iteration:   2360, Loss function: 5.395, Average Loss: 5.603, avg. samples / sec: 277.17
Iteration:   2380, Loss function: 5.370, Average Loss: 5.600, avg. samples / sec: 320.88
Iteration:   2400, Loss function: 5.592, Average Loss: 5.595, avg. samples / sec: 329.56
Iteration:   2420, Loss function: 5.493, Average Loss: 5.592, avg. samples / sec: 286.57
Iteration:   2440, Loss function: 5.533, Average Loss: 5.589, avg. samples / sec: 283.62
Iteration:   2460, Loss function: 5.279, Average Loss: 5.585, avg. samples / sec: 325.32
Iteration:   2480, Loss function: 5.232, Average Loss: 5.581, avg. samples / sec: 333.95
Iteration:   2500, Loss function: 5.538, Average Loss: 5.577, avg. samples / sec: 276.16
Iteration:   2520, Loss function: 5.473, Average Loss: 5.573, avg. samples / sec: 293.75
Iteration:   2540, Loss function: 5.395, Average Loss: 5.570, avg. samples / sec: 328.22
Iteration:   2560, Loss function: 5.406, Average Loss: 5.565, avg. samples / sec: 295.36
Iteration:   2580, Loss function: 5.493, Average Loss: 5.562, avg. samples / sec: 307.22
Iteration:   2600, Loss function: 5.270, Average Loss: 5.559, avg. samples / sec: 259.04
Iteration:   2620, Loss function: 5.437, Average Loss: 5.553, avg. samples / sec: 315.71
Iteration:   2640, Loss function: 5.234, Average Loss: 5.549, avg. samples / sec: 298.66
Iteration:   2660, Loss function: 5.238, Average Loss: 5.545, avg. samples / sec: 330.57
Iteration:   2680, Loss function: 5.202, Average Loss: 5.541, avg. samples / sec: 318.45
Iteration:   2700, Loss function: 5.296, Average Loss: 5.536, avg. samples / sec: 326.15
Iteration:   2720, Loss function: 5.203, Average Loss: 5.531, avg. samples / sec: 325.40
Iteration:   2740, Loss function: 5.029, Average Loss: 5.527, avg. samples / sec: 333.13
Iteration:   2760, Loss function: 4.958, Average Loss: 5.521, avg. samples / sec: 327.28
Iteration:   2780, Loss function: 5.489, Average Loss: 5.518, avg. samples / sec: 319.74
Iteration:   2800, Loss function: 5.322, Average Loss: 5.513, avg. samples / sec: 327.87
Iteration:   2820, Loss function: 5.518, Average Loss: 5.509, avg. samples / sec: 324.24
Iteration:   2840, Loss function: 5.118, Average Loss: 5.504, avg. samples / sec: 295.91
Iteration:   2860, Loss function: 5.282, Average Loss: 5.499, avg. samples / sec: 319.10
Iteration:   2880, Loss function: 5.280, Average Loss: 5.493, avg. samples / sec: 283.11
Iteration:   2900, Loss function: 5.082, Average Loss: 5.489, avg. samples / sec: 239.29
Iteration:   2920, Loss function: 5.133, Average Loss: 5.483, avg. samples / sec: 252.92
Iteration:   2940, Loss function: 4.953, Average Loss: 5.478, avg. samples / sec: 272.31
Iteration:   2960, Loss function: 5.360, Average Loss: 5.473, avg. samples / sec: 210.79
Iteration:   2980, Loss function: 5.271, Average Loss: 5.470, avg. samples / sec: 236.83
Iteration:   3000, Loss function: 5.329, Average Loss: 5.465, avg. samples / sec: 268.78
Iteration:   3020, Loss function: 5.272, Average Loss: 5.459, avg. samples / sec: 244.66
Iteration:   3040, Loss function: 5.227, Average Loss: 5.454, avg. samples / sec: 292.89
Iteration:   3060, Loss function: 5.186, Average Loss: 5.448, avg. samples / sec: 315.23
Iteration:   3080, Loss function: 4.977, Average Loss: 5.443, avg. samples / sec: 318.10
:::MLLOG {"namespace": "", "time_ms": 1639151684611, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151684634, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.122, Average Loss: 5.438, avg. samples / sec: 231.67
Iteration:   3120, Loss function: 4.977, Average Loss: 5.431, avg. samples / sec: 257.37
Iteration:   3140, Loss function: 4.989, Average Loss: 5.426, avg. samples / sec: 283.26
Iteration:   3160, Loss function: 5.501, Average Loss: 5.419, avg. samples / sec: 321.34
Iteration:   3180, Loss function: 5.008, Average Loss: 5.415, avg. samples / sec: 305.72
Iteration:   3200, Loss function: 5.139, Average Loss: 5.410, avg. samples / sec: 328.43
Iteration:   3220, Loss function: 5.186, Average Loss: 5.404, avg. samples / sec: 269.20
Iteration:   3240, Loss function: 5.176, Average Loss: 5.398, avg. samples / sec: 282.35
Iteration:   3260, Loss function: 5.161, Average Loss: 5.393, avg. samples / sec: 312.95
Iteration:   3280, Loss function: 5.013, Average Loss: 5.387, avg. samples / sec: 325.37
Iteration:   3300, Loss function: 4.968, Average Loss: 5.383, avg. samples / sec: 304.32
Iteration:   3320, Loss function: 5.047, Average Loss: 5.378, avg. samples / sec: 296.49
Iteration:   3340, Loss function: 5.113, Average Loss: 5.374, avg. samples / sec: 297.32
Iteration:   3360, Loss function: 5.159, Average Loss: 5.367, avg. samples / sec: 313.23
Iteration:   3380, Loss function: 5.276, Average Loss: 5.360, avg. samples / sec: 284.08
Iteration:   3400, Loss function: 4.853, Average Loss: 5.355, avg. samples / sec: 273.94
Iteration:   3420, Loss function: 5.133, Average Loss: 5.349, avg. samples / sec: 321.94
Iteration:   3440, Loss function: 4.789, Average Loss: 5.344, avg. samples / sec: 215.82
Iteration:   3460, Loss function: 5.321, Average Loss: 5.340, avg. samples / sec: 240.93
Iteration:   3480, Loss function: 5.197, Average Loss: 5.335, avg. samples / sec: 170.87
Iteration:   3500, Loss function: 5.189, Average Loss: 5.332, avg. samples / sec: 260.08
Iteration:   3520, Loss function: 5.108, Average Loss: 5.328, avg. samples / sec: 329.31
Iteration:   3540, Loss function: 5.003, Average Loss: 5.323, avg. samples / sec: 313.94
Iteration:   3560, Loss function: 5.037, Average Loss: 5.320, avg. samples / sec: 297.70
Iteration:   3580, Loss function: 5.087, Average Loss: 5.315, avg. samples / sec: 330.25
Iteration:   3600, Loss function: 5.174, Average Loss: 5.309, avg. samples / sec: 324.31
Iteration:   3620, Loss function: 4.846, Average Loss: 5.304, avg. samples / sec: 327.49
Iteration:   3640, Loss function: 4.798, Average Loss: 5.299, avg. samples / sec: 329.98
Iteration:   3660, Loss function: 5.098, Average Loss: 5.294, avg. samples / sec: 292.12
Iteration:   3680, Loss function: 5.058, Average Loss: 5.289, avg. samples / sec: 272.05
Iteration:   3700, Loss function: 5.016, Average Loss: 5.284, avg. samples / sec: 314.37
Iteration:   3720, Loss function: 5.025, Average Loss: 5.277, avg. samples / sec: 310.64
Iteration:   3740, Loss function: 5.196, Average Loss: 5.274, avg. samples / sec: 299.25
Iteration:   3760, Loss function: 5.108, Average Loss: 5.270, avg. samples / sec: 307.62
Iteration:   3780, Loss function: 5.047, Average Loss: 5.265, avg. samples / sec: 321.96
Iteration:   3800, Loss function: 5.238, Average Loss: 5.261, avg. samples / sec: 259.90
Iteration:   3820, Loss function: 5.335, Average Loss: 5.256, avg. samples / sec: 285.93
Iteration:   3840, Loss function: 5.025, Average Loss: 5.252, avg. samples / sec: 265.68
Iteration:   3860, Loss function: 4.929, Average Loss: 5.247, avg. samples / sec: 312.78
Iteration:   3880, Loss function: 4.821, Average Loss: 5.242, avg. samples / sec: 270.80
Iteration:   3900, Loss function: 5.118, Average Loss: 5.238, avg. samples / sec: 321.91
Iteration:   3920, Loss function: 5.006, Average Loss: 5.232, avg. samples / sec: 330.15
Iteration:   3940, Loss function: 5.113, Average Loss: 5.227, avg. samples / sec: 300.41
Iteration:   3960, Loss function: 4.792, Average Loss: 5.224, avg. samples / sec: 327.57
Iteration:   3980, Loss function: 4.863, Average Loss: 5.219, avg. samples / sec: 278.93
Iteration:   4000, Loss function: 4.971, Average Loss: 5.215, avg. samples / sec: 280.49
Iteration:   4020, Loss function: 5.019, Average Loss: 5.211, avg. samples / sec: 292.87
Iteration:   4040, Loss function: 4.965, Average Loss: 5.207, avg. samples / sec: 325.87
Iteration:   4060, Loss function: 5.186, Average Loss: 5.202, avg. samples / sec: 322.38
Iteration:   4080, Loss function: 5.106, Average Loss: 5.198, avg. samples / sec: 299.18
Iteration:   4100, Loss function: 5.014, Average Loss: 5.195, avg. samples / sec: 326.06
:::MLLOG {"namespace": "", "time_ms": 1639152086811, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152086812, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.003, Average Loss: 5.190, avg. samples / sec: 274.86
Iteration:   4140, Loss function: 4.870, Average Loss: 5.184, avg. samples / sec: 287.20
Iteration:   4160, Loss function: 4.905, Average Loss: 5.178, avg. samples / sec: 328.05
Iteration:   4180, Loss function: 4.982, Average Loss: 5.171, avg. samples / sec: 282.69
Iteration:   4200, Loss function: 4.832, Average Loss: 5.165, avg. samples / sec: 325.65
Iteration:   4220, Loss function: 4.965, Average Loss: 5.160, avg. samples / sec: 327.54
Iteration:   4240, Loss function: 4.754, Average Loss: 5.155, avg. samples / sec: 295.74
Iteration:   4260, Loss function: 5.003, Average Loss: 5.151, avg. samples / sec: 294.90
Iteration:   4280, Loss function: 4.959, Average Loss: 5.145, avg. samples / sec: 336.98
Iteration:   4300, Loss function: 4.714, Average Loss: 5.139, avg. samples / sec: 319.92
Iteration:   4320, Loss function: 4.855, Average Loss: 5.134, avg. samples / sec: 281.21
Iteration:   4340, Loss function: 4.748, Average Loss: 5.129, avg. samples / sec: 300.47
Iteration:   4360, Loss function: 5.089, Average Loss: 5.124, avg. samples / sec: 229.36
Iteration:   4380, Loss function: 5.077, Average Loss: 5.120, avg. samples / sec: 335.15
Iteration:   4400, Loss function: 5.029, Average Loss: 5.115, avg. samples / sec: 287.93
Iteration:   4420, Loss function: 4.837, Average Loss: 5.110, avg. samples / sec: 299.47
Iteration:   4440, Loss function: 4.780, Average Loss: 5.105, avg. samples / sec: 289.98
Iteration:   4460, Loss function: 5.128, Average Loss: 5.101, avg. samples / sec: 325.97
Iteration:   4480, Loss function: 5.047, Average Loss: 5.097, avg. samples / sec: 281.00
Iteration:   4500, Loss function: 4.908, Average Loss: 5.095, avg. samples / sec: 234.06
Iteration:   4520, Loss function: 4.747, Average Loss: 5.090, avg. samples / sec: 220.63
Iteration:   4540, Loss function: 5.202, Average Loss: 5.086, avg. samples / sec: 259.55
Iteration:   4560, Loss function: 4.662, Average Loss: 5.082, avg. samples / sec: 220.30
Iteration:   4580, Loss function: 4.704, Average Loss: 5.079, avg. samples / sec: 311.69
Iteration:   4600, Loss function: 4.868, Average Loss: 5.074, avg. samples / sec: 309.79
Iteration:   4620, Loss function: 4.970, Average Loss: 5.070, avg. samples / sec: 280.64
Iteration:   4640, Loss function: 4.780, Average Loss: 5.065, avg. samples / sec: 257.84
Iteration:   4660, Loss function: 4.735, Average Loss: 5.062, avg. samples / sec: 199.23
Iteration:   4680, Loss function: 5.064, Average Loss: 5.056, avg. samples / sec: 314.31
Iteration:   4700, Loss function: 4.769, Average Loss: 5.052, avg. samples / sec: 319.17
Iteration:   4720, Loss function: 4.830, Average Loss: 5.046, avg. samples / sec: 310.51
Iteration:   4740, Loss function: 4.865, Average Loss: 5.042, avg. samples / sec: 270.18
Iteration:   4760, Loss function: 4.683, Average Loss: 5.039, avg. samples / sec: 264.21
Iteration:   4780, Loss function: 5.130, Average Loss: 5.035, avg. samples / sec: 314.80
Iteration:   4800, Loss function: 4.780, Average Loss: 5.033, avg. samples / sec: 340.25
Iteration:   4820, Loss function: 4.569, Average Loss: 5.029, avg. samples / sec: 322.88
Iteration:   4840, Loss function: 5.079, Average Loss: 5.025, avg. samples / sec: 334.76
Iteration:   4860, Loss function: 4.722, Average Loss: 5.020, avg. samples / sec: 319.43
Iteration:   4880, Loss function: 5.048, Average Loss: 5.016, avg. samples / sec: 304.68
Iteration:   4900, Loss function: 4.591, Average Loss: 5.012, avg. samples / sec: 293.24
Iteration:   4920, Loss function: 4.786, Average Loss: 5.007, avg. samples / sec: 295.78
Iteration:   4940, Loss function: 4.812, Average Loss: 5.004, avg. samples / sec: 279.58
Iteration:   4960, Loss function: 4.731, Average Loss: 5.001, avg. samples / sec: 299.34
Iteration:   4980, Loss function: 4.825, Average Loss: 4.998, avg. samples / sec: 328.36
Iteration:   5000, Loss function: 4.717, Average Loss: 4.994, avg. samples / sec: 318.99
Iteration:   5020, Loss function: 5.133, Average Loss: 4.991, avg. samples / sec: 321.56
Iteration:   5040, Loss function: 4.871, Average Loss: 4.989, avg. samples / sec: 269.15
Iteration:   5060, Loss function: 4.895, Average Loss: 4.986, avg. samples / sec: 287.03
Iteration:   5080, Loss function: 4.434, Average Loss: 4.981, avg. samples / sec: 306.25
Iteration:   5100, Loss function: 4.889, Average Loss: 4.979, avg. samples / sec: 239.82
Iteration:   5120, Loss function: 4.562, Average Loss: 4.976, avg. samples / sec: 299.43
Iteration:   5140, Loss function: 4.963, Average Loss: 4.973, avg. samples / sec: 291.76
:::MLLOG {"namespace": "", "time_ms": 1639152492870, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 82.75 s
:::MLLOG {"namespace": "", "time_ms": 1639152575902, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152575906, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152575906, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.904, Average Loss: 4.969, avg. samples / sec: 24.73
DONE (t=6.18s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10966
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22272
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13886
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20731
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10966 AP goal: 0.10000
Iteration:   5180, Loss function: 4.687, Average Loss: 4.964, avg. samples / sec: 329.20
:::MLLOG {"namespace": "", "time_ms": 1639152590636, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590638, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10966192200886535, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590638, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594318, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:59 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364818, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364992, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2388755949, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2388755949
:::MLLOG {"namespace": "", "time_ms": 1639150367071, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150367072, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150367076, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150471959, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150471959, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150473933, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473934, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474378, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474379, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474381, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.520, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.054, Average Loss: 0.453, avg. samples / sec: 292.97
Iteration:     40, Loss function: 20.779, Average Loss: 0.855, avg. samples / sec: 277.74
Iteration:     60, Loss function: 20.409, Average Loss: 1.246, avg. samples / sec: 267.71
Iteration:     80, Loss function: 20.343, Average Loss: 1.622, avg. samples / sec: 234.03
Iteration:    100, Loss function: 16.947, Average Loss: 1.964, avg. samples / sec: 269.47
Iteration:    120, Loss function: 12.418, Average Loss: 2.191, avg. samples / sec: 266.78
Iteration:    140, Loss function: 10.055, Average Loss: 2.362, avg. samples / sec: 250.71
Iteration:    160, Loss function: 9.440, Average Loss: 2.506, avg. samples / sec: 273.06
Iteration:    180, Loss function: 9.164, Average Loss: 2.638, avg. samples / sec: 280.18
Iteration:    200, Loss function: 8.693, Average Loss: 2.763, avg. samples / sec: 279.46
Iteration:    220, Loss function: 8.610, Average Loss: 2.884, avg. samples / sec: 267.66
Iteration:    240, Loss function: 8.566, Average Loss: 3.001, avg. samples / sec: 276.39
Iteration:    260, Loss function: 8.829, Average Loss: 3.114, avg. samples / sec: 309.68
Iteration:    280, Loss function: 8.404, Average Loss: 3.223, avg. samples / sec: 290.11
Iteration:    300, Loss function: 8.184, Average Loss: 3.325, avg. samples / sec: 314.21
Iteration:    320, Loss function: 8.380, Average Loss: 3.425, avg. samples / sec: 310.39
Iteration:    340, Loss function: 8.289, Average Loss: 3.523, avg. samples / sec: 308.97
Iteration:    360, Loss function: 8.013, Average Loss: 3.616, avg. samples / sec: 277.76
Iteration:    380, Loss function: 7.882, Average Loss: 3.705, avg. samples / sec: 327.27
Iteration:    400, Loss function: 8.123, Average Loss: 3.790, avg. samples / sec: 262.83
Iteration:    420, Loss function: 7.774, Average Loss: 3.872, avg. samples / sec: 310.11
Iteration:    440, Loss function: 7.755, Average Loss: 3.950, avg. samples / sec: 276.84
Iteration:    460, Loss function: 7.953, Average Loss: 4.026, avg. samples / sec: 316.48
Iteration:    480, Loss function: 7.429, Average Loss: 4.099, avg. samples / sec: 317.79
Iteration:    500, Loss function: 7.474, Average Loss: 4.169, avg. samples / sec: 338.57
Iteration:    520, Loss function: 7.516, Average Loss: 4.235, avg. samples / sec: 324.40
Iteration:    540, Loss function: 7.483, Average Loss: 4.301, avg. samples / sec: 328.19
Iteration:    560, Loss function: 7.274, Average Loss: 4.363, avg. samples / sec: 309.74
Iteration:    580, Loss function: 6.953, Average Loss: 4.423, avg. samples / sec: 318.14
Iteration:    600, Loss function: 7.326, Average Loss: 4.482, avg. samples / sec: 297.65
Iteration:    620, Loss function: 7.070, Average Loss: 4.537, avg. samples / sec: 333.85
Iteration:    640, Loss function: 6.858, Average Loss: 4.590, avg. samples / sec: 304.59
Iteration:    660, Loss function: 7.024, Average Loss: 4.641, avg. samples / sec: 323.79
Iteration:    680, Loss function: 7.281, Average Loss: 4.692, avg. samples / sec: 328.41
Iteration:    700, Loss function: 6.851, Average Loss: 4.739, avg. samples / sec: 318.18
Iteration:    720, Loss function: 7.043, Average Loss: 4.788, avg. samples / sec: 314.44
Iteration:    740, Loss function: 6.823, Average Loss: 4.833, avg. samples / sec: 327.03
Iteration:    760, Loss function: 7.134, Average Loss: 4.876, avg. samples / sec: 335.88
Iteration:    780, Loss function: 7.071, Average Loss: 4.918, avg. samples / sec: 248.22
Iteration:    800, Loss function: 7.126, Average Loss: 4.957, avg. samples / sec: 295.15
Iteration:    820, Loss function: 6.701, Average Loss: 4.994, avg. samples / sec: 286.85
Iteration:    840, Loss function: 6.738, Average Loss: 5.029, avg. samples / sec: 268.83
Iteration:    860, Loss function: 6.883, Average Loss: 5.062, avg. samples / sec: 253.62
Iteration:    880, Loss function: 6.731, Average Loss: 5.094, avg. samples / sec: 276.03
Iteration:    900, Loss function: 6.896, Average Loss: 5.125, avg. samples / sec: 329.96
Iteration:    920, Loss function: 6.481, Average Loss: 5.154, avg. samples / sec: 291.64
Iteration:    940, Loss function: 6.723, Average Loss: 5.183, avg. samples / sec: 299.59
Iteration:    960, Loss function: 6.447, Average Loss: 5.211, avg. samples / sec: 292.50
Iteration:    980, Loss function: 6.544, Average Loss: 5.237, avg. samples / sec: 312.64
Iteration:   1000, Loss function: 6.525, Average Loss: 5.261, avg. samples / sec: 322.80
Iteration:   1020, Loss function: 6.231, Average Loss: 5.285, avg. samples / sec: 330.42
:::MLLOG {"namespace": "", "time_ms": 1639150871471, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150871473, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.509, Average Loss: 5.309, avg. samples / sec: 332.81
Iteration:   1060, Loss function: 6.349, Average Loss: 5.330, avg. samples / sec: 257.34
Iteration:   1080, Loss function: 6.383, Average Loss: 5.352, avg. samples / sec: 311.82
Iteration:   1100, Loss function: 6.085, Average Loss: 5.371, avg. samples / sec: 337.32
Iteration:   1120, Loss function: 6.163, Average Loss: 5.389, avg. samples / sec: 336.28
Iteration:   1140, Loss function: 6.304, Average Loss: 5.407, avg. samples / sec: 330.97
Iteration:   1160, Loss function: 6.285, Average Loss: 5.425, avg. samples / sec: 332.84
Iteration:   1180, Loss function: 6.349, Average Loss: 5.440, avg. samples / sec: 315.32
Iteration:   1200, Loss function: 6.208, Average Loss: 5.455, avg. samples / sec: 277.58
Iteration:   1220, Loss function: 6.256, Average Loss: 5.470, avg. samples / sec: 309.90
Iteration:   1240, Loss function: 6.074, Average Loss: 5.483, avg. samples / sec: 281.07
Iteration:   1260, Loss function: 6.038, Average Loss: 5.495, avg. samples / sec: 223.31
Iteration:   1280, Loss function: 5.903, Average Loss: 5.508, avg. samples / sec: 220.08
Iteration:   1300, Loss function: 6.167, Average Loss: 5.521, avg. samples / sec: 285.36
Iteration:   1320, Loss function: 6.172, Average Loss: 5.533, avg. samples / sec: 315.62
Iteration:   1340, Loss function: 5.903, Average Loss: 5.543, avg. samples / sec: 319.35
Iteration:   1360, Loss function: 5.989, Average Loss: 5.552, avg. samples / sec: 320.40
Iteration:   1380, Loss function: 6.274, Average Loss: 5.562, avg. samples / sec: 297.47
Iteration:   1400, Loss function: 6.166, Average Loss: 5.571, avg. samples / sec: 275.23
Iteration:   1420, Loss function: 5.958, Average Loss: 5.579, avg. samples / sec: 254.33
Iteration:   1440, Loss function: 6.264, Average Loss: 5.586, avg. samples / sec: 157.08
Iteration:   1460, Loss function: 6.195, Average Loss: 5.594, avg. samples / sec: 220.21
Iteration:   1480, Loss function: 5.808, Average Loss: 5.602, avg. samples / sec: 256.73
Iteration:   1500, Loss function: 5.991, Average Loss: 5.609, avg. samples / sec: 324.99
Iteration:   1520, Loss function: 5.900, Average Loss: 5.615, avg. samples / sec: 330.84
Iteration:   1540, Loss function: 6.070, Average Loss: 5.619, avg. samples / sec: 318.01
Iteration:   1560, Loss function: 5.666, Average Loss: 5.624, avg. samples / sec: 289.36
Iteration:   1580, Loss function: 5.539, Average Loss: 5.627, avg. samples / sec: 256.66
Iteration:   1600, Loss function: 6.033, Average Loss: 5.632, avg. samples / sec: 268.84
Iteration:   1620, Loss function: 5.777, Average Loss: 5.636, avg. samples / sec: 225.10
Iteration:   1640, Loss function: 5.920, Average Loss: 5.638, avg. samples / sec: 281.24
Iteration:   1660, Loss function: 5.916, Average Loss: 5.642, avg. samples / sec: 327.48
Iteration:   1680, Loss function: 5.699, Average Loss: 5.645, avg. samples / sec: 336.71
Iteration:   1700, Loss function: 5.137, Average Loss: 5.648, avg. samples / sec: 333.41
Iteration:   1720, Loss function: 5.674, Average Loss: 5.651, avg. samples / sec: 332.07
Iteration:   1740, Loss function: 5.679, Average Loss: 5.652, avg. samples / sec: 302.79
Iteration:   1760, Loss function: 5.565, Average Loss: 5.654, avg. samples / sec: 269.27
Iteration:   1780, Loss function: 5.762, Average Loss: 5.655, avg. samples / sec: 237.49
Iteration:   1800, Loss function: 5.588, Average Loss: 5.657, avg. samples / sec: 311.74
Iteration:   1820, Loss function: 6.022, Average Loss: 5.657, avg. samples / sec: 256.77
Iteration:   1840, Loss function: 5.885, Average Loss: 5.658, avg. samples / sec: 297.29
Iteration:   1860, Loss function: 5.693, Average Loss: 5.656, avg. samples / sec: 223.90
Iteration:   1880, Loss function: 5.845, Average Loss: 5.657, avg. samples / sec: 247.62
Iteration:   1900, Loss function: 5.801, Average Loss: 5.657, avg. samples / sec: 244.88
Iteration:   1920, Loss function: 5.737, Average Loss: 5.657, avg. samples / sec: 315.66
Iteration:   1940, Loss function: 5.652, Average Loss: 5.656, avg. samples / sec: 277.29
Iteration:   1960, Loss function: 5.610, Average Loss: 5.655, avg. samples / sec: 287.96
Iteration:   1980, Loss function: 5.751, Average Loss: 5.655, avg. samples / sec: 307.11
Iteration:   2000, Loss function: 5.436, Average Loss: 5.654, avg. samples / sec: 322.85
Iteration:   2020, Loss function: 5.657, Average Loss: 5.652, avg. samples / sec: 300.95
Iteration:   2040, Loss function: 5.653, Average Loss: 5.652, avg. samples / sec: 323.48
:::MLLOG {"namespace": "", "time_ms": 1639151288192, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151288195, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.574, Average Loss: 5.650, avg. samples / sec: 287.52
Iteration:   2080, Loss function: 5.092, Average Loss: 5.647, avg. samples / sec: 292.28
Iteration:   2100, Loss function: 5.418, Average Loss: 5.645, avg. samples / sec: 302.18
Iteration:   2120, Loss function: 5.179, Average Loss: 5.641, avg. samples / sec: 317.31
Iteration:   2140, Loss function: 5.346, Average Loss: 5.636, avg. samples / sec: 253.40
Iteration:   2160, Loss function: 5.415, Average Loss: 5.634, avg. samples / sec: 304.31
Iteration:   2180, Loss function: 5.378, Average Loss: 5.632, avg. samples / sec: 284.80
Iteration:   2200, Loss function: 5.708, Average Loss: 5.628, avg. samples / sec: 278.55
Iteration:   2220, Loss function: 5.688, Average Loss: 5.626, avg. samples / sec: 329.47
Iteration:   2240, Loss function: 5.336, Average Loss: 5.622, avg. samples / sec: 312.53
Iteration:   2260, Loss function: 5.295, Average Loss: 5.619, avg. samples / sec: 324.82
Iteration:   2280, Loss function: 5.530, Average Loss: 5.616, avg. samples / sec: 318.99
Iteration:   2300, Loss function: 5.032, Average Loss: 5.612, avg. samples / sec: 321.81
Iteration:   2320, Loss function: 5.320, Average Loss: 5.609, avg. samples / sec: 316.80
Iteration:   2340, Loss function: 5.740, Average Loss: 5.606, avg. samples / sec: 321.08
Iteration:   2360, Loss function: 5.395, Average Loss: 5.603, avg. samples / sec: 277.17
Iteration:   2380, Loss function: 5.370, Average Loss: 5.600, avg. samples / sec: 320.88
Iteration:   2400, Loss function: 5.592, Average Loss: 5.595, avg. samples / sec: 329.56
Iteration:   2420, Loss function: 5.493, Average Loss: 5.592, avg. samples / sec: 286.57
Iteration:   2440, Loss function: 5.533, Average Loss: 5.589, avg. samples / sec: 283.62
Iteration:   2460, Loss function: 5.279, Average Loss: 5.585, avg. samples / sec: 325.32
Iteration:   2480, Loss function: 5.232, Average Loss: 5.581, avg. samples / sec: 333.95
Iteration:   2500, Loss function: 5.538, Average Loss: 5.577, avg. samples / sec: 276.16
Iteration:   2520, Loss function: 5.473, Average Loss: 5.573, avg. samples / sec: 293.75
Iteration:   2540, Loss function: 5.395, Average Loss: 5.570, avg. samples / sec: 328.22
Iteration:   2560, Loss function: 5.406, Average Loss: 5.565, avg. samples / sec: 295.36
Iteration:   2580, Loss function: 5.493, Average Loss: 5.562, avg. samples / sec: 307.22
Iteration:   2600, Loss function: 5.270, Average Loss: 5.559, avg. samples / sec: 259.04
Iteration:   2620, Loss function: 5.437, Average Loss: 5.553, avg. samples / sec: 315.71
Iteration:   2640, Loss function: 5.234, Average Loss: 5.549, avg. samples / sec: 298.66
Iteration:   2660, Loss function: 5.238, Average Loss: 5.545, avg. samples / sec: 330.57
Iteration:   2680, Loss function: 5.202, Average Loss: 5.541, avg. samples / sec: 318.45
Iteration:   2700, Loss function: 5.296, Average Loss: 5.536, avg. samples / sec: 326.15
Iteration:   2720, Loss function: 5.203, Average Loss: 5.531, avg. samples / sec: 325.40
Iteration:   2740, Loss function: 5.029, Average Loss: 5.527, avg. samples / sec: 333.13
Iteration:   2760, Loss function: 4.958, Average Loss: 5.521, avg. samples / sec: 327.28
Iteration:   2780, Loss function: 5.489, Average Loss: 5.518, avg. samples / sec: 319.74
Iteration:   2800, Loss function: 5.322, Average Loss: 5.513, avg. samples / sec: 327.87
Iteration:   2820, Loss function: 5.518, Average Loss: 5.509, avg. samples / sec: 324.24
Iteration:   2840, Loss function: 5.118, Average Loss: 5.504, avg. samples / sec: 295.91
Iteration:   2860, Loss function: 5.282, Average Loss: 5.499, avg. samples / sec: 319.10
Iteration:   2880, Loss function: 5.280, Average Loss: 5.493, avg. samples / sec: 283.11
Iteration:   2900, Loss function: 5.082, Average Loss: 5.489, avg. samples / sec: 239.29
Iteration:   2920, Loss function: 5.133, Average Loss: 5.483, avg. samples / sec: 252.92
Iteration:   2940, Loss function: 4.953, Average Loss: 5.478, avg. samples / sec: 272.31
Iteration:   2960, Loss function: 5.360, Average Loss: 5.473, avg. samples / sec: 210.79
Iteration:   2980, Loss function: 5.271, Average Loss: 5.470, avg. samples / sec: 236.83
Iteration:   3000, Loss function: 5.329, Average Loss: 5.465, avg. samples / sec: 268.78
Iteration:   3020, Loss function: 5.272, Average Loss: 5.459, avg. samples / sec: 244.66
Iteration:   3040, Loss function: 5.227, Average Loss: 5.454, avg. samples / sec: 292.89
Iteration:   3060, Loss function: 5.186, Average Loss: 5.448, avg. samples / sec: 315.23
Iteration:   3080, Loss function: 4.977, Average Loss: 5.443, avg. samples / sec: 318.10
:::MLLOG {"namespace": "", "time_ms": 1639151684611, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151684634, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.122, Average Loss: 5.438, avg. samples / sec: 231.67
Iteration:   3120, Loss function: 4.977, Average Loss: 5.431, avg. samples / sec: 257.37
Iteration:   3140, Loss function: 4.989, Average Loss: 5.426, avg. samples / sec: 283.26
Iteration:   3160, Loss function: 5.501, Average Loss: 5.419, avg. samples / sec: 321.34
Iteration:   3180, Loss function: 5.008, Average Loss: 5.415, avg. samples / sec: 305.72
Iteration:   3200, Loss function: 5.139, Average Loss: 5.410, avg. samples / sec: 328.43
Iteration:   3220, Loss function: 5.186, Average Loss: 5.404, avg. samples / sec: 269.20
Iteration:   3240, Loss function: 5.176, Average Loss: 5.398, avg. samples / sec: 282.35
Iteration:   3260, Loss function: 5.161, Average Loss: 5.393, avg. samples / sec: 312.95
Iteration:   3280, Loss function: 5.013, Average Loss: 5.387, avg. samples / sec: 325.37
Iteration:   3300, Loss function: 4.968, Average Loss: 5.383, avg. samples / sec: 304.32
Iteration:   3320, Loss function: 5.047, Average Loss: 5.378, avg. samples / sec: 296.49
Iteration:   3340, Loss function: 5.113, Average Loss: 5.374, avg. samples / sec: 297.32
Iteration:   3360, Loss function: 5.159, Average Loss: 5.367, avg. samples / sec: 313.23
Iteration:   3380, Loss function: 5.276, Average Loss: 5.360, avg. samples / sec: 284.08
Iteration:   3400, Loss function: 4.853, Average Loss: 5.355, avg. samples / sec: 273.94
Iteration:   3420, Loss function: 5.133, Average Loss: 5.349, avg. samples / sec: 321.94
Iteration:   3440, Loss function: 4.789, Average Loss: 5.344, avg. samples / sec: 215.82
Iteration:   3460, Loss function: 5.321, Average Loss: 5.340, avg. samples / sec: 240.93
Iteration:   3480, Loss function: 5.197, Average Loss: 5.335, avg. samples / sec: 170.87
Iteration:   3500, Loss function: 5.189, Average Loss: 5.332, avg. samples / sec: 260.08
Iteration:   3520, Loss function: 5.108, Average Loss: 5.328, avg. samples / sec: 329.31
Iteration:   3540, Loss function: 5.003, Average Loss: 5.323, avg. samples / sec: 313.94
Iteration:   3560, Loss function: 5.037, Average Loss: 5.320, avg. samples / sec: 297.70
Iteration:   3580, Loss function: 5.087, Average Loss: 5.315, avg. samples / sec: 330.25
Iteration:   3600, Loss function: 5.174, Average Loss: 5.309, avg. samples / sec: 324.31
Iteration:   3620, Loss function: 4.846, Average Loss: 5.304, avg. samples / sec: 327.49
Iteration:   3640, Loss function: 4.798, Average Loss: 5.299, avg. samples / sec: 329.98
Iteration:   3660, Loss function: 5.098, Average Loss: 5.294, avg. samples / sec: 292.12
Iteration:   3680, Loss function: 5.058, Average Loss: 5.289, avg. samples / sec: 272.05
Iteration:   3700, Loss function: 5.016, Average Loss: 5.284, avg. samples / sec: 314.37
Iteration:   3720, Loss function: 5.025, Average Loss: 5.277, avg. samples / sec: 310.64
Iteration:   3740, Loss function: 5.196, Average Loss: 5.274, avg. samples / sec: 299.25
Iteration:   3760, Loss function: 5.108, Average Loss: 5.270, avg. samples / sec: 307.62
Iteration:   3780, Loss function: 5.047, Average Loss: 5.265, avg. samples / sec: 321.96
Iteration:   3800, Loss function: 5.238, Average Loss: 5.261, avg. samples / sec: 259.90
Iteration:   3820, Loss function: 5.335, Average Loss: 5.256, avg. samples / sec: 285.93
Iteration:   3840, Loss function: 5.025, Average Loss: 5.252, avg. samples / sec: 265.68
Iteration:   3860, Loss function: 4.929, Average Loss: 5.247, avg. samples / sec: 312.78
Iteration:   3880, Loss function: 4.821, Average Loss: 5.242, avg. samples / sec: 270.80
Iteration:   3900, Loss function: 5.118, Average Loss: 5.238, avg. samples / sec: 321.91
Iteration:   3920, Loss function: 5.006, Average Loss: 5.232, avg. samples / sec: 330.15
Iteration:   3940, Loss function: 5.113, Average Loss: 5.227, avg. samples / sec: 300.41
Iteration:   3960, Loss function: 4.792, Average Loss: 5.224, avg. samples / sec: 327.57
Iteration:   3980, Loss function: 4.863, Average Loss: 5.219, avg. samples / sec: 278.93
Iteration:   4000, Loss function: 4.971, Average Loss: 5.215, avg. samples / sec: 280.49
Iteration:   4020, Loss function: 5.019, Average Loss: 5.211, avg. samples / sec: 292.87
Iteration:   4040, Loss function: 4.965, Average Loss: 5.207, avg. samples / sec: 325.87
Iteration:   4060, Loss function: 5.186, Average Loss: 5.202, avg. samples / sec: 322.38
Iteration:   4080, Loss function: 5.106, Average Loss: 5.198, avg. samples / sec: 299.18
Iteration:   4100, Loss function: 5.014, Average Loss: 5.195, avg. samples / sec: 326.06
:::MLLOG {"namespace": "", "time_ms": 1639152086811, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152086812, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.003, Average Loss: 5.190, avg. samples / sec: 274.86
Iteration:   4140, Loss function: 4.870, Average Loss: 5.184, avg. samples / sec: 287.20
Iteration:   4160, Loss function: 4.905, Average Loss: 5.178, avg. samples / sec: 328.05
Iteration:   4180, Loss function: 4.982, Average Loss: 5.171, avg. samples / sec: 282.69
Iteration:   4200, Loss function: 4.832, Average Loss: 5.165, avg. samples / sec: 325.65
Iteration:   4220, Loss function: 4.965, Average Loss: 5.160, avg. samples / sec: 327.54
Iteration:   4240, Loss function: 4.754, Average Loss: 5.155, avg. samples / sec: 295.74
Iteration:   4260, Loss function: 5.003, Average Loss: 5.151, avg. samples / sec: 294.90
Iteration:   4280, Loss function: 4.959, Average Loss: 5.145, avg. samples / sec: 336.98
Iteration:   4300, Loss function: 4.714, Average Loss: 5.139, avg. samples / sec: 319.92
Iteration:   4320, Loss function: 4.855, Average Loss: 5.134, avg. samples / sec: 281.21
Iteration:   4340, Loss function: 4.748, Average Loss: 5.129, avg. samples / sec: 300.47
Iteration:   4360, Loss function: 5.089, Average Loss: 5.124, avg. samples / sec: 229.36
Iteration:   4380, Loss function: 5.077, Average Loss: 5.120, avg. samples / sec: 335.15
Iteration:   4400, Loss function: 5.029, Average Loss: 5.115, avg. samples / sec: 287.93
Iteration:   4420, Loss function: 4.837, Average Loss: 5.110, avg. samples / sec: 299.47
Iteration:   4440, Loss function: 4.780, Average Loss: 5.105, avg. samples / sec: 289.98
Iteration:   4460, Loss function: 5.128, Average Loss: 5.101, avg. samples / sec: 325.97
Iteration:   4480, Loss function: 5.047, Average Loss: 5.097, avg. samples / sec: 281.00
Iteration:   4500, Loss function: 4.908, Average Loss: 5.095, avg. samples / sec: 234.06
Iteration:   4520, Loss function: 4.747, Average Loss: 5.090, avg. samples / sec: 220.63
Iteration:   4540, Loss function: 5.202, Average Loss: 5.086, avg. samples / sec: 259.55
Iteration:   4560, Loss function: 4.662, Average Loss: 5.082, avg. samples / sec: 220.30
Iteration:   4580, Loss function: 4.704, Average Loss: 5.079, avg. samples / sec: 311.69
Iteration:   4600, Loss function: 4.868, Average Loss: 5.074, avg. samples / sec: 309.79
Iteration:   4620, Loss function: 4.970, Average Loss: 5.070, avg. samples / sec: 280.64
Iteration:   4640, Loss function: 4.780, Average Loss: 5.065, avg. samples / sec: 257.84
Iteration:   4660, Loss function: 4.735, Average Loss: 5.062, avg. samples / sec: 199.23
Iteration:   4680, Loss function: 5.064, Average Loss: 5.056, avg. samples / sec: 314.31
Iteration:   4700, Loss function: 4.769, Average Loss: 5.052, avg. samples / sec: 319.17
Iteration:   4720, Loss function: 4.830, Average Loss: 5.046, avg. samples / sec: 310.51
Iteration:   4740, Loss function: 4.865, Average Loss: 5.042, avg. samples / sec: 270.18
Iteration:   4760, Loss function: 4.683, Average Loss: 5.039, avg. samples / sec: 264.21
Iteration:   4780, Loss function: 5.130, Average Loss: 5.035, avg. samples / sec: 314.80
Iteration:   4800, Loss function: 4.780, Average Loss: 5.033, avg. samples / sec: 340.25
Iteration:   4820, Loss function: 4.569, Average Loss: 5.029, avg. samples / sec: 322.88
Iteration:   4840, Loss function: 5.079, Average Loss: 5.025, avg. samples / sec: 334.76
Iteration:   4860, Loss function: 4.722, Average Loss: 5.020, avg. samples / sec: 319.43
Iteration:   4880, Loss function: 5.048, Average Loss: 5.016, avg. samples / sec: 304.68
Iteration:   4900, Loss function: 4.591, Average Loss: 5.012, avg. samples / sec: 293.24
Iteration:   4920, Loss function: 4.786, Average Loss: 5.007, avg. samples / sec: 295.78
Iteration:   4940, Loss function: 4.812, Average Loss: 5.004, avg. samples / sec: 279.58
Iteration:   4960, Loss function: 4.731, Average Loss: 5.001, avg. samples / sec: 299.34
Iteration:   4980, Loss function: 4.825, Average Loss: 4.998, avg. samples / sec: 328.36
Iteration:   5000, Loss function: 4.717, Average Loss: 4.994, avg. samples / sec: 318.99
Iteration:   5020, Loss function: 5.133, Average Loss: 4.991, avg. samples / sec: 321.56
Iteration:   5040, Loss function: 4.871, Average Loss: 4.989, avg. samples / sec: 269.15
Iteration:   5060, Loss function: 4.895, Average Loss: 4.986, avg. samples / sec: 287.03
Iteration:   5080, Loss function: 4.434, Average Loss: 4.981, avg. samples / sec: 306.25
Iteration:   5100, Loss function: 4.889, Average Loss: 4.979, avg. samples / sec: 239.82
Iteration:   5120, Loss function: 4.562, Average Loss: 4.976, avg. samples / sec: 299.43
Iteration:   5140, Loss function: 4.963, Average Loss: 4.973, avg. samples / sec: 291.76
:::MLLOG {"namespace": "", "time_ms": 1639152492870, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 82.75 s
:::MLLOG {"namespace": "", "time_ms": 1639152575902, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152575906, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152575906, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.904, Average Loss: 4.969, avg. samples / sec: 24.73
DONE (t=6.18s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10966
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22272
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09747
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19611
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13886
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20731
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21991
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10966 AP goal: 0.10000
Iteration:   5180, Loss function: 4.687, Average Loss: 4.964, avg. samples / sec: 329.20
:::MLLOG {"namespace": "", "time_ms": 1639152590636, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590638, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10966192200886535, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590638, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594318, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152599
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:59 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:37 PM'
START TIMING RUN WAS 2021-12-10 03:32:37 PM
ENDING TIMING RUN AT 2021-12-10 04:09:59 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:59 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ result=2242
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-10 03:32:37 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-10 03:32:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
