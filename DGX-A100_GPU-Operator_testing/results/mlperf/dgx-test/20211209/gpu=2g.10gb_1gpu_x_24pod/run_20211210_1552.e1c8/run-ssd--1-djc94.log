+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-djc94.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-djc94.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-djc94.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7d2dee39-0203-5b2a-832d-12e5175d321f
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f
+ echo 'Found 1 MIG instances: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150356
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:36 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:36 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:36 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:36 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-djc94 to the sync file ...
run-ssd--1-djc94 Found 6 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
run-ssd--1-djc94 Found 23 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
    19	run-ssd--1-lh68c
    20	run-ssd--1-477tc
    21	run-ssd--1-8dgvk
    22	run-ssd--1-n6g64
    23	run-ssd--1-tph8l
Fri Dec 10 15:32:46 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150370311, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150370788, "event_type": "POINT_IN_TIME", "key": "seed", "value": 592713601, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 592713601
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150374745, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374745, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150478175, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150478176, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150484764, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150484765, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150485151, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150485151, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150485153, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.703, Average Loss: 0.023, avg. samples / sec: 1.01
Iteration:     20, Loss function: 21.096, Average Loss: 0.456, avg. samples / sec: 157.84
Iteration:     40, Loss function: 20.750, Average Loss: 0.858, avg. samples / sec: 220.70
Iteration:     60, Loss function: 20.278, Average Loss: 1.247, avg. samples / sec: 246.83
Iteration:     80, Loss function: 19.487, Average Loss: 1.617, avg. samples / sec: 265.90
Iteration:    100, Loss function: 13.645, Average Loss: 1.920, avg. samples / sec: 232.56
Iteration:    120, Loss function: 11.616, Average Loss: 2.120, avg. samples / sec: 249.60
Iteration:    140, Loss function: 9.694, Average Loss: 2.282, avg. samples / sec: 252.70
Iteration:    160, Loss function: 9.478, Average Loss: 2.426, avg. samples / sec: 249.35
Iteration:    180, Loss function: 9.108, Average Loss: 2.560, avg. samples / sec: 227.28
Iteration:    200, Loss function: 8.637, Average Loss: 2.687, avg. samples / sec: 297.34
Iteration:    220, Loss function: 8.465, Average Loss: 2.808, avg. samples / sec: 319.61
Iteration:    240, Loss function: 8.553, Average Loss: 2.925, avg. samples / sec: 323.29
Iteration:    260, Loss function: 8.806, Average Loss: 3.038, avg. samples / sec: 301.94
Iteration:    280, Loss function: 8.901, Average Loss: 3.153, avg. samples / sec: 250.32
Iteration:    300, Loss function: 8.523, Average Loss: 3.262, avg. samples / sec: 294.00
Iteration:    320, Loss function: 8.389, Average Loss: 3.364, avg. samples / sec: 321.64
Iteration:    340, Loss function: 8.352, Average Loss: 3.461, avg. samples / sec: 270.82
Iteration:    360, Loss function: 7.965, Average Loss: 3.555, avg. samples / sec: 306.00
Iteration:    380, Loss function: 7.969, Average Loss: 3.644, avg. samples / sec: 297.98
Iteration:    400, Loss function: 8.016, Average Loss: 3.729, avg. samples / sec: 299.52
Iteration:    420, Loss function: 7.665, Average Loss: 3.811, avg. samples / sec: 328.33
Iteration:    440, Loss function: 7.936, Average Loss: 3.890, avg. samples / sec: 323.58
Iteration:    460, Loss function: 7.735, Average Loss: 3.966, avg. samples / sec: 327.06
Iteration:    480, Loss function: 7.415, Average Loss: 4.039, avg. samples / sec: 314.01
Iteration:    500, Loss function: 7.522, Average Loss: 4.110, avg. samples / sec: 274.73
Iteration:    520, Loss function: 7.515, Average Loss: 4.178, avg. samples / sec: 316.80
Iteration:    540, Loss function: 7.469, Average Loss: 4.245, avg. samples / sec: 320.44
Iteration:    560, Loss function: 7.238, Average Loss: 4.306, avg. samples / sec: 207.14
Iteration:    580, Loss function: 7.204, Average Loss: 4.368, avg. samples / sec: 321.54
Iteration:    600, Loss function: 7.271, Average Loss: 4.427, avg. samples / sec: 325.11
Iteration:    620, Loss function: 6.978, Average Loss: 4.483, avg. samples / sec: 310.51
Iteration:    640, Loss function: 7.026, Average Loss: 4.538, avg. samples / sec: 284.79
Iteration:    660, Loss function: 7.012, Average Loss: 4.592, avg. samples / sec: 321.07
Iteration:    680, Loss function: 7.192, Average Loss: 4.643, avg. samples / sec: 320.99
Iteration:    700, Loss function: 6.817, Average Loss: 4.690, avg. samples / sec: 306.52
Iteration:    720, Loss function: 6.923, Average Loss: 4.738, avg. samples / sec: 318.17
Iteration:    740, Loss function: 7.113, Average Loss: 4.782, avg. samples / sec: 338.84
Iteration:    760, Loss function: 7.162, Average Loss: 4.826, avg. samples / sec: 316.26
Iteration:    780, Loss function: 6.923, Average Loss: 4.869, avg. samples / sec: 307.99
Iteration:    800, Loss function: 7.135, Average Loss: 4.909, avg. samples / sec: 331.38
Iteration:    820, Loss function: 6.790, Average Loss: 4.946, avg. samples / sec: 313.64
Iteration:    840, Loss function: 6.630, Average Loss: 4.982, avg. samples / sec: 276.76
Iteration:    860, Loss function: 6.806, Average Loss: 5.017, avg. samples / sec: 280.53
Iteration:    880, Loss function: 6.769, Average Loss: 5.050, avg. samples / sec: 270.36
Iteration:    900, Loss function: 6.924, Average Loss: 5.081, avg. samples / sec: 305.03
Iteration:    920, Loss function: 6.635, Average Loss: 5.110, avg. samples / sec: 299.06
Iteration:    940, Loss function: 6.648, Average Loss: 5.140, avg. samples / sec: 323.46
Iteration:    960, Loss function: 6.434, Average Loss: 5.168, avg. samples / sec: 298.13
Iteration:    980, Loss function: 6.404, Average Loss: 5.196, avg. samples / sec: 234.04
Iteration:   1000, Loss function: 6.583, Average Loss: 5.221, avg. samples / sec: 260.66
Iteration:   1020, Loss function: 6.427, Average Loss: 5.247, avg. samples / sec: 258.75
:::MLLOG {"namespace": "", "time_ms": 1639150903752, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150903754, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.612, Average Loss: 5.270, avg. samples / sec: 255.24
Iteration:   1060, Loss function: 6.283, Average Loss: 5.293, avg. samples / sec: 213.80
Iteration:   1080, Loss function: 6.202, Average Loss: 5.315, avg. samples / sec: 301.51
Iteration:   1100, Loss function: 6.068, Average Loss: 5.334, avg. samples / sec: 322.27
Iteration:   1120, Loss function: 6.291, Average Loss: 5.353, avg. samples / sec: 327.90
Iteration:   1140, Loss function: 6.304, Average Loss: 5.372, avg. samples / sec: 270.35
Iteration:   1160, Loss function: 6.262, Average Loss: 5.390, avg. samples / sec: 287.43
Iteration:   1180, Loss function: 6.366, Average Loss: 5.406, avg. samples / sec: 332.87
Iteration:   1200, Loss function: 6.233, Average Loss: 5.422, avg. samples / sec: 334.61
Iteration:   1220, Loss function: 6.120, Average Loss: 5.437, avg. samples / sec: 278.98
Iteration:   1240, Loss function: 6.331, Average Loss: 5.450, avg. samples / sec: 330.70
Iteration:   1260, Loss function: 6.058, Average Loss: 5.462, avg. samples / sec: 315.17
Iteration:   1280, Loss function: 5.885, Average Loss: 5.474, avg. samples / sec: 319.31
Iteration:   1300, Loss function: 5.992, Average Loss: 5.488, avg. samples / sec: 297.36
Iteration:   1320, Loss function: 6.047, Average Loss: 5.500, avg. samples / sec: 291.44
Iteration:   1340, Loss function: 5.892, Average Loss: 5.511, avg. samples / sec: 336.02
Iteration:   1360, Loss function: 5.966, Average Loss: 5.522, avg. samples / sec: 325.95
Iteration:   1380, Loss function: 6.128, Average Loss: 5.532, avg. samples / sec: 302.16
Iteration:   1400, Loss function: 6.048, Average Loss: 5.541, avg. samples / sec: 327.08
Iteration:   1420, Loss function: 6.016, Average Loss: 5.550, avg. samples / sec: 312.50
Iteration:   1440, Loss function: 6.147, Average Loss: 5.557, avg. samples / sec: 327.76
Iteration:   1460, Loss function: 6.134, Average Loss: 5.565, avg. samples / sec: 324.19
Iteration:   1480, Loss function: 5.918, Average Loss: 5.573, avg. samples / sec: 333.57
Iteration:   1500, Loss function: 6.059, Average Loss: 5.581, avg. samples / sec: 334.95
Iteration:   1520, Loss function: 5.970, Average Loss: 5.586, avg. samples / sec: 318.81
Iteration:   1540, Loss function: 5.996, Average Loss: 5.591, avg. samples / sec: 311.21
Iteration:   1560, Loss function: 5.869, Average Loss: 5.596, avg. samples / sec: 309.41
Iteration:   1580, Loss function: 5.528, Average Loss: 5.601, avg. samples / sec: 314.14
Iteration:   1600, Loss function: 6.103, Average Loss: 5.607, avg. samples / sec: 323.78
Iteration:   1620, Loss function: 5.676, Average Loss: 5.612, avg. samples / sec: 336.33
Iteration:   1640, Loss function: 6.064, Average Loss: 5.615, avg. samples / sec: 319.53
Iteration:   1660, Loss function: 5.929, Average Loss: 5.619, avg. samples / sec: 318.05
Iteration:   1680, Loss function: 5.720, Average Loss: 5.621, avg. samples / sec: 334.91
Iteration:   1700, Loss function: 5.244, Average Loss: 5.625, avg. samples / sec: 315.10
Iteration:   1720, Loss function: 5.656, Average Loss: 5.628, avg. samples / sec: 315.23
Iteration:   1740, Loss function: 5.843, Average Loss: 5.631, avg. samples / sec: 321.44
Iteration:   1760, Loss function: 5.539, Average Loss: 5.631, avg. samples / sec: 328.41
Iteration:   1780, Loss function: 5.670, Average Loss: 5.632, avg. samples / sec: 333.74
Iteration:   1800, Loss function: 5.648, Average Loss: 5.634, avg. samples / sec: 322.47
Iteration:   1820, Loss function: 5.845, Average Loss: 5.636, avg. samples / sec: 320.59
Iteration:   1840, Loss function: 5.936, Average Loss: 5.637, avg. samples / sec: 318.47
Iteration:   1860, Loss function: 5.752, Average Loss: 5.637, avg. samples / sec: 303.87
Iteration:   1880, Loss function: 6.116, Average Loss: 5.640, avg. samples / sec: 326.19
Iteration:   1900, Loss function: 5.763, Average Loss: 5.641, avg. samples / sec: 316.90
Iteration:   1920, Loss function: 5.806, Average Loss: 5.641, avg. samples / sec: 303.38
Iteration:   1940, Loss function: 5.812, Average Loss: 5.640, avg. samples / sec: 200.87
Iteration:   1960, Loss function: 5.518, Average Loss: 5.640, avg. samples / sec: 331.46
Iteration:   1980, Loss function: 5.754, Average Loss: 5.638, avg. samples / sec: 326.69
Iteration:   2000, Loss function: 5.541, Average Loss: 5.637, avg. samples / sec: 263.96
Iteration:   2020, Loss function: 5.580, Average Loss: 5.636, avg. samples / sec: 271.21
Iteration:   2040, Loss function: 5.642, Average Loss: 5.636, avg. samples / sec: 259.82
:::MLLOG {"namespace": "", "time_ms": 1639151287041, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151287044, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.439, Average Loss: 5.634, avg. samples / sec: 290.98
Iteration:   2080, Loss function: 5.228, Average Loss: 5.631, avg. samples / sec: 288.03
Iteration:   2100, Loss function: 5.547, Average Loss: 5.629, avg. samples / sec: 282.83
Iteration:   2120, Loss function: 5.202, Average Loss: 5.626, avg. samples / sec: 329.88
Iteration:   2140, Loss function: 5.371, Average Loss: 5.622, avg. samples / sec: 317.94
Iteration:   2160, Loss function: 5.306, Average Loss: 5.620, avg. samples / sec: 320.02
Iteration:   2180, Loss function: 5.588, Average Loss: 5.618, avg. samples / sec: 280.56
Iteration:   2200, Loss function: 5.425, Average Loss: 5.614, avg. samples / sec: 304.90
Iteration:   2220, Loss function: 5.572, Average Loss: 5.612, avg. samples / sec: 329.33
Iteration:   2240, Loss function: 5.554, Average Loss: 5.610, avg. samples / sec: 330.73
Iteration:   2260, Loss function: 5.402, Average Loss: 5.607, avg. samples / sec: 300.73
Iteration:   2280, Loss function: 5.335, Average Loss: 5.604, avg. samples / sec: 321.41
Iteration:   2300, Loss function: 5.142, Average Loss: 5.601, avg. samples / sec: 321.75
Iteration:   2320, Loss function: 5.140, Average Loss: 5.598, avg. samples / sec: 276.24
Iteration:   2340, Loss function: 5.366, Average Loss: 5.594, avg. samples / sec: 323.17
Iteration:   2360, Loss function: 5.257, Average Loss: 5.591, avg. samples / sec: 270.40
Iteration:   2380, Loss function: 5.459, Average Loss: 5.588, avg. samples / sec: 297.67
Iteration:   2400, Loss function: 5.574, Average Loss: 5.583, avg. samples / sec: 233.58
Iteration:   2420, Loss function: 5.479, Average Loss: 5.580, avg. samples / sec: 254.04
Iteration:   2440, Loss function: 5.411, Average Loss: 5.576, avg. samples / sec: 285.16
Iteration:   2460, Loss function: 5.110, Average Loss: 5.572, avg. samples / sec: 330.36
Iteration:   2480, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 325.97
Iteration:   2500, Loss function: 5.399, Average Loss: 5.565, avg. samples / sec: 315.68
Iteration:   2520, Loss function: 5.316, Average Loss: 5.560, avg. samples / sec: 226.90
Iteration:   2540, Loss function: 5.362, Average Loss: 5.556, avg. samples / sec: 324.60
Iteration:   2560, Loss function: 5.433, Average Loss: 5.552, avg. samples / sec: 312.06
Iteration:   2580, Loss function: 5.165, Average Loss: 5.548, avg. samples / sec: 329.79
Iteration:   2600, Loss function: 5.472, Average Loss: 5.545, avg. samples / sec: 229.55
Iteration:   2620, Loss function: 5.447, Average Loss: 5.541, avg. samples / sec: 282.94
Iteration:   2640, Loss function: 5.040, Average Loss: 5.538, avg. samples / sec: 229.15
Iteration:   2660, Loss function: 5.163, Average Loss: 5.534, avg. samples / sec: 237.80
Iteration:   2680, Loss function: 5.281, Average Loss: 5.530, avg. samples / sec: 329.52
Iteration:   2700, Loss function: 5.157, Average Loss: 5.525, avg. samples / sec: 296.65
Iteration:   2720, Loss function: 5.182, Average Loss: 5.521, avg. samples / sec: 317.80
Iteration:   2740, Loss function: 4.961, Average Loss: 5.517, avg. samples / sec: 318.88
Iteration:   2760, Loss function: 4.888, Average Loss: 5.512, avg. samples / sec: 185.17
Iteration:   2780, Loss function: 5.542, Average Loss: 5.508, avg. samples / sec: 276.69
Iteration:   2800, Loss function: 5.141, Average Loss: 5.504, avg. samples / sec: 325.03
Iteration:   2820, Loss function: 5.445, Average Loss: 5.500, avg. samples / sec: 319.71
Iteration:   2840, Loss function: 5.079, Average Loss: 5.494, avg. samples / sec: 207.89
Iteration:   2860, Loss function: 5.072, Average Loss: 5.490, avg. samples / sec: 273.00
Iteration:   2880, Loss function: 5.340, Average Loss: 5.485, avg. samples / sec: 287.05
Iteration:   2900, Loss function: 4.979, Average Loss: 5.481, avg. samples / sec: 281.55
Iteration:   2920, Loss function: 5.296, Average Loss: 5.475, avg. samples / sec: 210.25
Iteration:   2940, Loss function: 5.026, Average Loss: 5.471, avg. samples / sec: 241.28
Iteration:   2960, Loss function: 5.415, Average Loss: 5.466, avg. samples / sec: 294.51
Iteration:   2980, Loss function: 5.076, Average Loss: 5.463, avg. samples / sec: 312.17
Iteration:   3000, Loss function: 5.164, Average Loss: 5.458, avg. samples / sec: 327.26
Iteration:   3020, Loss function: 5.310, Average Loss: 5.451, avg. samples / sec: 280.12
Iteration:   3040, Loss function: 5.254, Average Loss: 5.447, avg. samples / sec: 333.51
Iteration:   3060, Loss function: 5.211, Average Loss: 5.441, avg. samples / sec: 333.00
Iteration:   3080, Loss function: 4.874, Average Loss: 5.436, avg. samples / sec: 334.27
:::MLLOG {"namespace": "", "time_ms": 1639151696663, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151696681, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.347, Average Loss: 5.430, avg. samples / sec: 255.17
Iteration:   3120, Loss function: 5.097, Average Loss: 5.424, avg. samples / sec: 329.64
Iteration:   3140, Loss function: 5.072, Average Loss: 5.418, avg. samples / sec: 284.38
Iteration:   3160, Loss function: 5.592, Average Loss: 5.413, avg. samples / sec: 312.72
Iteration:   3180, Loss function: 4.967, Average Loss: 5.408, avg. samples / sec: 299.82
Iteration:   3200, Loss function: 5.408, Average Loss: 5.403, avg. samples / sec: 247.76
Iteration:   3220, Loss function: 5.086, Average Loss: 5.398, avg. samples / sec: 304.77
Iteration:   3240, Loss function: 5.174, Average Loss: 5.393, avg. samples / sec: 334.75
Iteration:   3260, Loss function: 4.977, Average Loss: 5.388, avg. samples / sec: 252.35
Iteration:   3280, Loss function: 4.714, Average Loss: 5.381, avg. samples / sec: 279.37
Iteration:   3300, Loss function: 4.826, Average Loss: 5.376, avg. samples / sec: 308.07
Iteration:   3320, Loss function: 4.874, Average Loss: 5.371, avg. samples / sec: 193.64
Iteration:   3340, Loss function: 5.207, Average Loss: 5.367, avg. samples / sec: 225.41
Iteration:   3360, Loss function: 5.313, Average Loss: 5.361, avg. samples / sec: 300.58
Iteration:   3380, Loss function: 5.388, Average Loss: 5.355, avg. samples / sec: 281.14
Iteration:   3400, Loss function: 4.853, Average Loss: 5.349, avg. samples / sec: 228.92
Iteration:   3420, Loss function: 5.239, Average Loss: 5.343, avg. samples / sec: 249.06
Iteration:   3440, Loss function: 5.045, Average Loss: 5.339, avg. samples / sec: 229.50
Iteration:   3460, Loss function: 5.312, Average Loss: 5.334, avg. samples / sec: 291.55
Iteration:   3480, Loss function: 5.246, Average Loss: 5.328, avg. samples / sec: 318.05
Iteration:   3500, Loss function: 5.232, Average Loss: 5.323, avg. samples / sec: 321.81
Iteration:   3520, Loss function: 4.966, Average Loss: 5.319, avg. samples / sec: 312.25
Iteration:   3540, Loss function: 5.085, Average Loss: 5.315, avg. samples / sec: 323.99
Iteration:   3560, Loss function: 4.989, Average Loss: 5.311, avg. samples / sec: 295.08
Iteration:   3580, Loss function: 5.114, Average Loss: 5.307, avg. samples / sec: 330.19
Iteration:   3600, Loss function: 5.362, Average Loss: 5.301, avg. samples / sec: 320.08
Iteration:   3620, Loss function: 4.916, Average Loss: 5.296, avg. samples / sec: 324.04
Iteration:   3640, Loss function: 4.916, Average Loss: 5.291, avg. samples / sec: 264.94
Iteration:   3660, Loss function: 5.225, Average Loss: 5.286, avg. samples / sec: 324.48
Iteration:   3680, Loss function: 5.201, Average Loss: 5.280, avg. samples / sec: 316.05
Iteration:   3700, Loss function: 5.007, Average Loss: 5.274, avg. samples / sec: 285.46
Iteration:   3720, Loss function: 4.978, Average Loss: 5.268, avg. samples / sec: 332.58
Iteration:   3740, Loss function: 5.122, Average Loss: 5.264, avg. samples / sec: 317.95
Iteration:   3760, Loss function: 5.239, Average Loss: 5.260, avg. samples / sec: 333.46
Iteration:   3780, Loss function: 5.030, Average Loss: 5.255, avg. samples / sec: 316.19
Iteration:   3800, Loss function: 4.986, Average Loss: 5.251, avg. samples / sec: 248.87
Iteration:   3820, Loss function: 5.158, Average Loss: 5.246, avg. samples / sec: 280.83
Iteration:   3840, Loss function: 5.010, Average Loss: 5.241, avg. samples / sec: 300.39
Iteration:   3860, Loss function: 4.865, Average Loss: 5.236, avg. samples / sec: 325.36
Iteration:   3880, Loss function: 5.079, Average Loss: 5.231, avg. samples / sec: 311.55
Iteration:   3900, Loss function: 5.100, Average Loss: 5.226, avg. samples / sec: 315.40
Iteration:   3920, Loss function: 5.219, Average Loss: 5.221, avg. samples / sec: 301.23
Iteration:   3940, Loss function: 5.033, Average Loss: 5.215, avg. samples / sec: 273.55
Iteration:   3960, Loss function: 4.845, Average Loss: 5.211, avg. samples / sec: 304.47
Iteration:   3980, Loss function: 4.838, Average Loss: 5.208, avg. samples / sec: 272.47
Iteration:   4000, Loss function: 5.037, Average Loss: 5.204, avg. samples / sec: 325.36
Iteration:   4020, Loss function: 5.152, Average Loss: 5.199, avg. samples / sec: 324.40
Iteration:   4040, Loss function: 4.975, Average Loss: 5.196, avg. samples / sec: 287.75
Iteration:   4060, Loss function: 5.183, Average Loss: 5.193, avg. samples / sec: 275.39
Iteration:   4080, Loss function: 5.176, Average Loss: 5.189, avg. samples / sec: 290.17
Iteration:   4100, Loss function: 5.198, Average Loss: 5.186, avg. samples / sec: 254.84
:::MLLOG {"namespace": "", "time_ms": 1639152102888, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152102900, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.130, Average Loss: 5.183, avg. samples / sec: 303.35
Iteration:   4140, Loss function: 4.905, Average Loss: 5.179, avg. samples / sec: 305.71
Iteration:   4160, Loss function: 4.782, Average Loss: 5.171, avg. samples / sec: 311.74
Iteration:   4180, Loss function: 4.944, Average Loss: 5.165, avg. samples / sec: 247.02
Iteration:   4200, Loss function: 4.961, Average Loss: 5.161, avg. samples / sec: 329.32
Iteration:   4220, Loss function: 4.931, Average Loss: 5.156, avg. samples / sec: 320.71
Iteration:   4240, Loss function: 4.941, Average Loss: 5.151, avg. samples / sec: 273.52
Iteration:   4260, Loss function: 4.974, Average Loss: 5.146, avg. samples / sec: 304.90
Iteration:   4280, Loss function: 4.951, Average Loss: 5.140, avg. samples / sec: 320.62
Iteration:   4300, Loss function: 5.091, Average Loss: 5.135, avg. samples / sec: 324.56
Iteration:   4320, Loss function: 4.804, Average Loss: 5.130, avg. samples / sec: 298.14
Iteration:   4340, Loss function: 4.790, Average Loss: 5.125, avg. samples / sec: 269.37
Iteration:   4360, Loss function: 5.091, Average Loss: 5.121, avg. samples / sec: 262.71
Iteration:   4380, Loss function: 4.982, Average Loss: 5.116, avg. samples / sec: 269.42
Iteration:   4400, Loss function: 4.878, Average Loss: 5.111, avg. samples / sec: 313.74
Iteration:   4420, Loss function: 5.052, Average Loss: 5.107, avg. samples / sec: 316.74
Iteration:   4440, Loss function: 4.865, Average Loss: 5.102, avg. samples / sec: 331.37
Iteration:   4460, Loss function: 5.297, Average Loss: 5.098, avg. samples / sec: 337.53
Iteration:   4480, Loss function: 5.140, Average Loss: 5.095, avg. samples / sec: 334.63
Iteration:   4500, Loss function: 4.813, Average Loss: 5.092, avg. samples / sec: 324.20
Iteration:   4520, Loss function: 4.896, Average Loss: 5.087, avg. samples / sec: 331.01
Iteration:   4540, Loss function: 5.057, Average Loss: 5.083, avg. samples / sec: 309.28
Iteration:   4560, Loss function: 4.754, Average Loss: 5.079, avg. samples / sec: 324.26
Iteration:   4580, Loss function: 4.700, Average Loss: 5.077, avg. samples / sec: 275.23
Iteration:   4600, Loss function: 4.784, Average Loss: 5.073, avg. samples / sec: 312.42
Iteration:   4620, Loss function: 4.917, Average Loss: 5.069, avg. samples / sec: 285.61
Iteration:   4640, Loss function: 4.633, Average Loss: 5.065, avg. samples / sec: 255.02
Iteration:   4660, Loss function: 4.888, Average Loss: 5.061, avg. samples / sec: 234.85
Iteration:   4680, Loss function: 5.159, Average Loss: 5.057, avg. samples / sec: 321.99
Iteration:   4700, Loss function: 4.753, Average Loss: 5.054, avg. samples / sec: 316.15
Iteration:   4720, Loss function: 4.825, Average Loss: 5.049, avg. samples / sec: 260.39
Iteration:   4740, Loss function: 4.694, Average Loss: 5.046, avg. samples / sec: 336.61
Iteration:   4760, Loss function: 4.694, Average Loss: 5.042, avg. samples / sec: 329.38
Iteration:   4780, Loss function: 5.095, Average Loss: 5.038, avg. samples / sec: 288.47
Iteration:   4800, Loss function: 4.899, Average Loss: 5.036, avg. samples / sec: 317.90
Iteration:   4820, Loss function: 4.923, Average Loss: 5.032, avg. samples / sec: 331.25
Iteration:   4840, Loss function: 4.963, Average Loss: 5.029, avg. samples / sec: 331.57
Iteration:   4860, Loss function: 4.678, Average Loss: 5.025, avg. samples / sec: 273.17
Iteration:   4880, Loss function: 5.117, Average Loss: 5.021, avg. samples / sec: 252.25
Iteration:   4900, Loss function: 4.619, Average Loss: 5.017, avg. samples / sec: 293.81
Iteration:   4920, Loss function: 4.864, Average Loss: 5.014, avg. samples / sec: 315.75
Iteration:   4940, Loss function: 4.870, Average Loss: 5.010, avg. samples / sec: 316.84
Iteration:   4960, Loss function: 4.677, Average Loss: 5.007, avg. samples / sec: 324.07
Iteration:   4980, Loss function: 4.520, Average Loss: 5.002, avg. samples / sec: 337.58
Iteration:   5000, Loss function: 4.962, Average Loss: 5.000, avg. samples / sec: 292.28
Iteration:   5020, Loss function: 5.094, Average Loss: 4.996, avg. samples / sec: 324.64
Iteration:   5040, Loss function: 4.830, Average Loss: 4.993, avg. samples / sec: 335.17
Iteration:   5060, Loss function: 4.887, Average Loss: 4.990, avg. samples / sec: 334.99
Iteration:   5080, Loss function: 4.416, Average Loss: 4.985, avg. samples / sec: 284.08
Iteration:   5100, Loss function: 4.795, Average Loss: 4.983, avg. samples / sec: 273.10
Iteration:   5120, Loss function: 4.718, Average Loss: 4.980, avg. samples / sec: 305.39
Iteration:   5140, Loss function: 5.007, Average Loss: 4.976, avg. samples / sec: 330.95
:::MLLOG {"namespace": "", "time_ms": 1639152491129, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 80.67 s
:::MLLOG {"namespace": "", "time_ms": 1639152572090, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152572140, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152572162, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.32s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.925, Average Loss: 4.971, avg. samples / sec: 25.75
DONE (t=6.01s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10639
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21500
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09585
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19322
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13873
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10639 AP goal: 0.10000
Iteration:   5180, Loss function: 4.597, Average Loss: 4.966, avg. samples / sec: 331.57
:::MLLOG {"namespace": "", "time_ms": 1639152585359, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152585360, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10638608480694921, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152585360, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590629, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:57 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:57 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150370311, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150370788, "event_type": "POINT_IN_TIME", "key": "seed", "value": 592713601, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 592713601
:::MLLOG {"namespace": "", "time_ms": 1639150374745, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374745, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150478175, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150478176, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150484764, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150484765, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.19s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150485151, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150485151, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150485153, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.703, Average Loss: 0.023, avg. samples / sec: 1.01
Iteration:     20, Loss function: 21.096, Average Loss: 0.456, avg. samples / sec: 157.84
Iteration:     40, Loss function: 20.750, Average Loss: 0.858, avg. samples / sec: 220.70
Iteration:     60, Loss function: 20.278, Average Loss: 1.247, avg. samples / sec: 246.83
Iteration:     80, Loss function: 19.487, Average Loss: 1.617, avg. samples / sec: 265.90
Iteration:    100, Loss function: 13.645, Average Loss: 1.920, avg. samples / sec: 232.56
Iteration:    120, Loss function: 11.616, Average Loss: 2.120, avg. samples / sec: 249.60
Iteration:    140, Loss function: 9.694, Average Loss: 2.282, avg. samples / sec: 252.70
Iteration:    160, Loss function: 9.478, Average Loss: 2.426, avg. samples / sec: 249.35
Iteration:    180, Loss function: 9.108, Average Loss: 2.560, avg. samples / sec: 227.28
Iteration:    200, Loss function: 8.637, Average Loss: 2.687, avg. samples / sec: 297.34
Iteration:    220, Loss function: 8.465, Average Loss: 2.808, avg. samples / sec: 319.61
Iteration:    240, Loss function: 8.553, Average Loss: 2.925, avg. samples / sec: 323.29
Iteration:    260, Loss function: 8.806, Average Loss: 3.038, avg. samples / sec: 301.94
Iteration:    280, Loss function: 8.901, Average Loss: 3.153, avg. samples / sec: 250.32
Iteration:    300, Loss function: 8.523, Average Loss: 3.262, avg. samples / sec: 294.00
Iteration:    320, Loss function: 8.389, Average Loss: 3.364, avg. samples / sec: 321.64
Iteration:    340, Loss function: 8.352, Average Loss: 3.461, avg. samples / sec: 270.82
Iteration:    360, Loss function: 7.965, Average Loss: 3.555, avg. samples / sec: 306.00
Iteration:    380, Loss function: 7.969, Average Loss: 3.644, avg. samples / sec: 297.98
Iteration:    400, Loss function: 8.016, Average Loss: 3.729, avg. samples / sec: 299.52
Iteration:    420, Loss function: 7.665, Average Loss: 3.811, avg. samples / sec: 328.33
Iteration:    440, Loss function: 7.936, Average Loss: 3.890, avg. samples / sec: 323.58
Iteration:    460, Loss function: 7.735, Average Loss: 3.966, avg. samples / sec: 327.06
Iteration:    480, Loss function: 7.415, Average Loss: 4.039, avg. samples / sec: 314.01
Iteration:    500, Loss function: 7.522, Average Loss: 4.110, avg. samples / sec: 274.73
Iteration:    520, Loss function: 7.515, Average Loss: 4.178, avg. samples / sec: 316.80
Iteration:    540, Loss function: 7.469, Average Loss: 4.245, avg. samples / sec: 320.44
Iteration:    560, Loss function: 7.238, Average Loss: 4.306, avg. samples / sec: 207.14
Iteration:    580, Loss function: 7.204, Average Loss: 4.368, avg. samples / sec: 321.54
Iteration:    600, Loss function: 7.271, Average Loss: 4.427, avg. samples / sec: 325.11
Iteration:    620, Loss function: 6.978, Average Loss: 4.483, avg. samples / sec: 310.51
Iteration:    640, Loss function: 7.026, Average Loss: 4.538, avg. samples / sec: 284.79
Iteration:    660, Loss function: 7.012, Average Loss: 4.592, avg. samples / sec: 321.07
Iteration:    680, Loss function: 7.192, Average Loss: 4.643, avg. samples / sec: 320.99
Iteration:    700, Loss function: 6.817, Average Loss: 4.690, avg. samples / sec: 306.52
Iteration:    720, Loss function: 6.923, Average Loss: 4.738, avg. samples / sec: 318.17
Iteration:    740, Loss function: 7.113, Average Loss: 4.782, avg. samples / sec: 338.84
Iteration:    760, Loss function: 7.162, Average Loss: 4.826, avg. samples / sec: 316.26
Iteration:    780, Loss function: 6.923, Average Loss: 4.869, avg. samples / sec: 307.99
Iteration:    800, Loss function: 7.135, Average Loss: 4.909, avg. samples / sec: 331.38
Iteration:    820, Loss function: 6.790, Average Loss: 4.946, avg. samples / sec: 313.64
Iteration:    840, Loss function: 6.630, Average Loss: 4.982, avg. samples / sec: 276.76
Iteration:    860, Loss function: 6.806, Average Loss: 5.017, avg. samples / sec: 280.53
Iteration:    880, Loss function: 6.769, Average Loss: 5.050, avg. samples / sec: 270.36
Iteration:    900, Loss function: 6.924, Average Loss: 5.081, avg. samples / sec: 305.03
Iteration:    920, Loss function: 6.635, Average Loss: 5.110, avg. samples / sec: 299.06
Iteration:    940, Loss function: 6.648, Average Loss: 5.140, avg. samples / sec: 323.46
Iteration:    960, Loss function: 6.434, Average Loss: 5.168, avg. samples / sec: 298.13
Iteration:    980, Loss function: 6.404, Average Loss: 5.196, avg. samples / sec: 234.04
Iteration:   1000, Loss function: 6.583, Average Loss: 5.221, avg. samples / sec: 260.66
Iteration:   1020, Loss function: 6.427, Average Loss: 5.247, avg. samples / sec: 258.75
:::MLLOG {"namespace": "", "time_ms": 1639150903752, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150903754, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.612, Average Loss: 5.270, avg. samples / sec: 255.24
Iteration:   1060, Loss function: 6.283, Average Loss: 5.293, avg. samples / sec: 213.80
Iteration:   1080, Loss function: 6.202, Average Loss: 5.315, avg. samples / sec: 301.51
Iteration:   1100, Loss function: 6.068, Average Loss: 5.334, avg. samples / sec: 322.27
Iteration:   1120, Loss function: 6.291, Average Loss: 5.353, avg. samples / sec: 327.90
Iteration:   1140, Loss function: 6.304, Average Loss: 5.372, avg. samples / sec: 270.35
Iteration:   1160, Loss function: 6.262, Average Loss: 5.390, avg. samples / sec: 287.43
Iteration:   1180, Loss function: 6.366, Average Loss: 5.406, avg. samples / sec: 332.87
Iteration:   1200, Loss function: 6.233, Average Loss: 5.422, avg. samples / sec: 334.61
Iteration:   1220, Loss function: 6.120, Average Loss: 5.437, avg. samples / sec: 278.98
Iteration:   1240, Loss function: 6.331, Average Loss: 5.450, avg. samples / sec: 330.70
Iteration:   1260, Loss function: 6.058, Average Loss: 5.462, avg. samples / sec: 315.17
Iteration:   1280, Loss function: 5.885, Average Loss: 5.474, avg. samples / sec: 319.31
Iteration:   1300, Loss function: 5.992, Average Loss: 5.488, avg. samples / sec: 297.36
Iteration:   1320, Loss function: 6.047, Average Loss: 5.500, avg. samples / sec: 291.44
Iteration:   1340, Loss function: 5.892, Average Loss: 5.511, avg. samples / sec: 336.02
Iteration:   1360, Loss function: 5.966, Average Loss: 5.522, avg. samples / sec: 325.95
Iteration:   1380, Loss function: 6.128, Average Loss: 5.532, avg. samples / sec: 302.16
Iteration:   1400, Loss function: 6.048, Average Loss: 5.541, avg. samples / sec: 327.08
Iteration:   1420, Loss function: 6.016, Average Loss: 5.550, avg. samples / sec: 312.50
Iteration:   1440, Loss function: 6.147, Average Loss: 5.557, avg. samples / sec: 327.76
Iteration:   1460, Loss function: 6.134, Average Loss: 5.565, avg. samples / sec: 324.19
Iteration:   1480, Loss function: 5.918, Average Loss: 5.573, avg. samples / sec: 333.57
Iteration:   1500, Loss function: 6.059, Average Loss: 5.581, avg. samples / sec: 334.95
Iteration:   1520, Loss function: 5.970, Average Loss: 5.586, avg. samples / sec: 318.81
Iteration:   1540, Loss function: 5.996, Average Loss: 5.591, avg. samples / sec: 311.21
Iteration:   1560, Loss function: 5.869, Average Loss: 5.596, avg. samples / sec: 309.41
Iteration:   1580, Loss function: 5.528, Average Loss: 5.601, avg. samples / sec: 314.14
Iteration:   1600, Loss function: 6.103, Average Loss: 5.607, avg. samples / sec: 323.78
Iteration:   1620, Loss function: 5.676, Average Loss: 5.612, avg. samples / sec: 336.33
Iteration:   1640, Loss function: 6.064, Average Loss: 5.615, avg. samples / sec: 319.53
Iteration:   1660, Loss function: 5.929, Average Loss: 5.619, avg. samples / sec: 318.05
Iteration:   1680, Loss function: 5.720, Average Loss: 5.621, avg. samples / sec: 334.91
Iteration:   1700, Loss function: 5.244, Average Loss: 5.625, avg. samples / sec: 315.10
Iteration:   1720, Loss function: 5.656, Average Loss: 5.628, avg. samples / sec: 315.23
Iteration:   1740, Loss function: 5.843, Average Loss: 5.631, avg. samples / sec: 321.44
Iteration:   1760, Loss function: 5.539, Average Loss: 5.631, avg. samples / sec: 328.41
Iteration:   1780, Loss function: 5.670, Average Loss: 5.632, avg. samples / sec: 333.74
Iteration:   1800, Loss function: 5.648, Average Loss: 5.634, avg. samples / sec: 322.47
Iteration:   1820, Loss function: 5.845, Average Loss: 5.636, avg. samples / sec: 320.59
Iteration:   1840, Loss function: 5.936, Average Loss: 5.637, avg. samples / sec: 318.47
Iteration:   1860, Loss function: 5.752, Average Loss: 5.637, avg. samples / sec: 303.87
Iteration:   1880, Loss function: 6.116, Average Loss: 5.640, avg. samples / sec: 326.19
Iteration:   1900, Loss function: 5.763, Average Loss: 5.641, avg. samples / sec: 316.90
Iteration:   1920, Loss function: 5.806, Average Loss: 5.641, avg. samples / sec: 303.38
Iteration:   1940, Loss function: 5.812, Average Loss: 5.640, avg. samples / sec: 200.87
Iteration:   1960, Loss function: 5.518, Average Loss: 5.640, avg. samples / sec: 331.46
Iteration:   1980, Loss function: 5.754, Average Loss: 5.638, avg. samples / sec: 326.69
Iteration:   2000, Loss function: 5.541, Average Loss: 5.637, avg. samples / sec: 263.96
Iteration:   2020, Loss function: 5.580, Average Loss: 5.636, avg. samples / sec: 271.21
Iteration:   2040, Loss function: 5.642, Average Loss: 5.636, avg. samples / sec: 259.82
:::MLLOG {"namespace": "", "time_ms": 1639151287041, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151287044, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.439, Average Loss: 5.634, avg. samples / sec: 290.98
Iteration:   2080, Loss function: 5.228, Average Loss: 5.631, avg. samples / sec: 288.03
Iteration:   2100, Loss function: 5.547, Average Loss: 5.629, avg. samples / sec: 282.83
Iteration:   2120, Loss function: 5.202, Average Loss: 5.626, avg. samples / sec: 329.88
Iteration:   2140, Loss function: 5.371, Average Loss: 5.622, avg. samples / sec: 317.94
Iteration:   2160, Loss function: 5.306, Average Loss: 5.620, avg. samples / sec: 320.02
Iteration:   2180, Loss function: 5.588, Average Loss: 5.618, avg. samples / sec: 280.56
Iteration:   2200, Loss function: 5.425, Average Loss: 5.614, avg. samples / sec: 304.90
Iteration:   2220, Loss function: 5.572, Average Loss: 5.612, avg. samples / sec: 329.33
Iteration:   2240, Loss function: 5.554, Average Loss: 5.610, avg. samples / sec: 330.73
Iteration:   2260, Loss function: 5.402, Average Loss: 5.607, avg. samples / sec: 300.73
Iteration:   2280, Loss function: 5.335, Average Loss: 5.604, avg. samples / sec: 321.41
Iteration:   2300, Loss function: 5.142, Average Loss: 5.601, avg. samples / sec: 321.75
Iteration:   2320, Loss function: 5.140, Average Loss: 5.598, avg. samples / sec: 276.24
Iteration:   2340, Loss function: 5.366, Average Loss: 5.594, avg. samples / sec: 323.17
Iteration:   2360, Loss function: 5.257, Average Loss: 5.591, avg. samples / sec: 270.40
Iteration:   2380, Loss function: 5.459, Average Loss: 5.588, avg. samples / sec: 297.67
Iteration:   2400, Loss function: 5.574, Average Loss: 5.583, avg. samples / sec: 233.58
Iteration:   2420, Loss function: 5.479, Average Loss: 5.580, avg. samples / sec: 254.04
Iteration:   2440, Loss function: 5.411, Average Loss: 5.576, avg. samples / sec: 285.16
Iteration:   2460, Loss function: 5.110, Average Loss: 5.572, avg. samples / sec: 330.36
Iteration:   2480, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 325.97
Iteration:   2500, Loss function: 5.399, Average Loss: 5.565, avg. samples / sec: 315.68
Iteration:   2520, Loss function: 5.316, Average Loss: 5.560, avg. samples / sec: 226.90
Iteration:   2540, Loss function: 5.362, Average Loss: 5.556, avg. samples / sec: 324.60
Iteration:   2560, Loss function: 5.433, Average Loss: 5.552, avg. samples / sec: 312.06
Iteration:   2580, Loss function: 5.165, Average Loss: 5.548, avg. samples / sec: 329.79
Iteration:   2600, Loss function: 5.472, Average Loss: 5.545, avg. samples / sec: 229.55
Iteration:   2620, Loss function: 5.447, Average Loss: 5.541, avg. samples / sec: 282.94
Iteration:   2640, Loss function: 5.040, Average Loss: 5.538, avg. samples / sec: 229.15
Iteration:   2660, Loss function: 5.163, Average Loss: 5.534, avg. samples / sec: 237.80
Iteration:   2680, Loss function: 5.281, Average Loss: 5.530, avg. samples / sec: 329.52
Iteration:   2700, Loss function: 5.157, Average Loss: 5.525, avg. samples / sec: 296.65
Iteration:   2720, Loss function: 5.182, Average Loss: 5.521, avg. samples / sec: 317.80
Iteration:   2740, Loss function: 4.961, Average Loss: 5.517, avg. samples / sec: 318.88
Iteration:   2760, Loss function: 4.888, Average Loss: 5.512, avg. samples / sec: 185.17
Iteration:   2780, Loss function: 5.542, Average Loss: 5.508, avg. samples / sec: 276.69
Iteration:   2800, Loss function: 5.141, Average Loss: 5.504, avg. samples / sec: 325.03
Iteration:   2820, Loss function: 5.445, Average Loss: 5.500, avg. samples / sec: 319.71
Iteration:   2840, Loss function: 5.079, Average Loss: 5.494, avg. samples / sec: 207.89
Iteration:   2860, Loss function: 5.072, Average Loss: 5.490, avg. samples / sec: 273.00
Iteration:   2880, Loss function: 5.340, Average Loss: 5.485, avg. samples / sec: 287.05
Iteration:   2900, Loss function: 4.979, Average Loss: 5.481, avg. samples / sec: 281.55
Iteration:   2920, Loss function: 5.296, Average Loss: 5.475, avg. samples / sec: 210.25
Iteration:   2940, Loss function: 5.026, Average Loss: 5.471, avg. samples / sec: 241.28
Iteration:   2960, Loss function: 5.415, Average Loss: 5.466, avg. samples / sec: 294.51
Iteration:   2980, Loss function: 5.076, Average Loss: 5.463, avg. samples / sec: 312.17
Iteration:   3000, Loss function: 5.164, Average Loss: 5.458, avg. samples / sec: 327.26
Iteration:   3020, Loss function: 5.310, Average Loss: 5.451, avg. samples / sec: 280.12
Iteration:   3040, Loss function: 5.254, Average Loss: 5.447, avg. samples / sec: 333.51
Iteration:   3060, Loss function: 5.211, Average Loss: 5.441, avg. samples / sec: 333.00
Iteration:   3080, Loss function: 4.874, Average Loss: 5.436, avg. samples / sec: 334.27
:::MLLOG {"namespace": "", "time_ms": 1639151696663, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151696681, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.347, Average Loss: 5.430, avg. samples / sec: 255.17
Iteration:   3120, Loss function: 5.097, Average Loss: 5.424, avg. samples / sec: 329.64
Iteration:   3140, Loss function: 5.072, Average Loss: 5.418, avg. samples / sec: 284.38
Iteration:   3160, Loss function: 5.592, Average Loss: 5.413, avg. samples / sec: 312.72
Iteration:   3180, Loss function: 4.967, Average Loss: 5.408, avg. samples / sec: 299.82
Iteration:   3200, Loss function: 5.408, Average Loss: 5.403, avg. samples / sec: 247.76
Iteration:   3220, Loss function: 5.086, Average Loss: 5.398, avg. samples / sec: 304.77
Iteration:   3240, Loss function: 5.174, Average Loss: 5.393, avg. samples / sec: 334.75
Iteration:   3260, Loss function: 4.977, Average Loss: 5.388, avg. samples / sec: 252.35
Iteration:   3280, Loss function: 4.714, Average Loss: 5.381, avg. samples / sec: 279.37
Iteration:   3300, Loss function: 4.826, Average Loss: 5.376, avg. samples / sec: 308.07
Iteration:   3320, Loss function: 4.874, Average Loss: 5.371, avg. samples / sec: 193.64
Iteration:   3340, Loss function: 5.207, Average Loss: 5.367, avg. samples / sec: 225.41
Iteration:   3360, Loss function: 5.313, Average Loss: 5.361, avg. samples / sec: 300.58
Iteration:   3380, Loss function: 5.388, Average Loss: 5.355, avg. samples / sec: 281.14
Iteration:   3400, Loss function: 4.853, Average Loss: 5.349, avg. samples / sec: 228.92
Iteration:   3420, Loss function: 5.239, Average Loss: 5.343, avg. samples / sec: 249.06
Iteration:   3440, Loss function: 5.045, Average Loss: 5.339, avg. samples / sec: 229.50
Iteration:   3460, Loss function: 5.312, Average Loss: 5.334, avg. samples / sec: 291.55
Iteration:   3480, Loss function: 5.246, Average Loss: 5.328, avg. samples / sec: 318.05
Iteration:   3500, Loss function: 5.232, Average Loss: 5.323, avg. samples / sec: 321.81
Iteration:   3520, Loss function: 4.966, Average Loss: 5.319, avg. samples / sec: 312.25
Iteration:   3540, Loss function: 5.085, Average Loss: 5.315, avg. samples / sec: 323.99
Iteration:   3560, Loss function: 4.989, Average Loss: 5.311, avg. samples / sec: 295.08
Iteration:   3580, Loss function: 5.114, Average Loss: 5.307, avg. samples / sec: 330.19
Iteration:   3600, Loss function: 5.362, Average Loss: 5.301, avg. samples / sec: 320.08
Iteration:   3620, Loss function: 4.916, Average Loss: 5.296, avg. samples / sec: 324.04
Iteration:   3640, Loss function: 4.916, Average Loss: 5.291, avg. samples / sec: 264.94
Iteration:   3660, Loss function: 5.225, Average Loss: 5.286, avg. samples / sec: 324.48
Iteration:   3680, Loss function: 5.201, Average Loss: 5.280, avg. samples / sec: 316.05
Iteration:   3700, Loss function: 5.007, Average Loss: 5.274, avg. samples / sec: 285.46
Iteration:   3720, Loss function: 4.978, Average Loss: 5.268, avg. samples / sec: 332.58
Iteration:   3740, Loss function: 5.122, Average Loss: 5.264, avg. samples / sec: 317.95
Iteration:   3760, Loss function: 5.239, Average Loss: 5.260, avg. samples / sec: 333.46
Iteration:   3780, Loss function: 5.030, Average Loss: 5.255, avg. samples / sec: 316.19
Iteration:   3800, Loss function: 4.986, Average Loss: 5.251, avg. samples / sec: 248.87
Iteration:   3820, Loss function: 5.158, Average Loss: 5.246, avg. samples / sec: 280.83
Iteration:   3840, Loss function: 5.010, Average Loss: 5.241, avg. samples / sec: 300.39
Iteration:   3860, Loss function: 4.865, Average Loss: 5.236, avg. samples / sec: 325.36
Iteration:   3880, Loss function: 5.079, Average Loss: 5.231, avg. samples / sec: 311.55
Iteration:   3900, Loss function: 5.100, Average Loss: 5.226, avg. samples / sec: 315.40
Iteration:   3920, Loss function: 5.219, Average Loss: 5.221, avg. samples / sec: 301.23
Iteration:   3940, Loss function: 5.033, Average Loss: 5.215, avg. samples / sec: 273.55
Iteration:   3960, Loss function: 4.845, Average Loss: 5.211, avg. samples / sec: 304.47
Iteration:   3980, Loss function: 4.838, Average Loss: 5.208, avg. samples / sec: 272.47
Iteration:   4000, Loss function: 5.037, Average Loss: 5.204, avg. samples / sec: 325.36
Iteration:   4020, Loss function: 5.152, Average Loss: 5.199, avg. samples / sec: 324.40
Iteration:   4040, Loss function: 4.975, Average Loss: 5.196, avg. samples / sec: 287.75
Iteration:   4060, Loss function: 5.183, Average Loss: 5.193, avg. samples / sec: 275.39
Iteration:   4080, Loss function: 5.176, Average Loss: 5.189, avg. samples / sec: 290.17
Iteration:   4100, Loss function: 5.198, Average Loss: 5.186, avg. samples / sec: 254.84
:::MLLOG {"namespace": "", "time_ms": 1639152102888, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152102900, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.130, Average Loss: 5.183, avg. samples / sec: 303.35
Iteration:   4140, Loss function: 4.905, Average Loss: 5.179, avg. samples / sec: 305.71
Iteration:   4160, Loss function: 4.782, Average Loss: 5.171, avg. samples / sec: 311.74
Iteration:   4180, Loss function: 4.944, Average Loss: 5.165, avg. samples / sec: 247.02
Iteration:   4200, Loss function: 4.961, Average Loss: 5.161, avg. samples / sec: 329.32
Iteration:   4220, Loss function: 4.931, Average Loss: 5.156, avg. samples / sec: 320.71
Iteration:   4240, Loss function: 4.941, Average Loss: 5.151, avg. samples / sec: 273.52
Iteration:   4260, Loss function: 4.974, Average Loss: 5.146, avg. samples / sec: 304.90
Iteration:   4280, Loss function: 4.951, Average Loss: 5.140, avg. samples / sec: 320.62
Iteration:   4300, Loss function: 5.091, Average Loss: 5.135, avg. samples / sec: 324.56
Iteration:   4320, Loss function: 4.804, Average Loss: 5.130, avg. samples / sec: 298.14
Iteration:   4340, Loss function: 4.790, Average Loss: 5.125, avg. samples / sec: 269.37
Iteration:   4360, Loss function: 5.091, Average Loss: 5.121, avg. samples / sec: 262.71
Iteration:   4380, Loss function: 4.982, Average Loss: 5.116, avg. samples / sec: 269.42
Iteration:   4400, Loss function: 4.878, Average Loss: 5.111, avg. samples / sec: 313.74
Iteration:   4420, Loss function: 5.052, Average Loss: 5.107, avg. samples / sec: 316.74
Iteration:   4440, Loss function: 4.865, Average Loss: 5.102, avg. samples / sec: 331.37
Iteration:   4460, Loss function: 5.297, Average Loss: 5.098, avg. samples / sec: 337.53
Iteration:   4480, Loss function: 5.140, Average Loss: 5.095, avg. samples / sec: 334.63
Iteration:   4500, Loss function: 4.813, Average Loss: 5.092, avg. samples / sec: 324.20
Iteration:   4520, Loss function: 4.896, Average Loss: 5.087, avg. samples / sec: 331.01
Iteration:   4540, Loss function: 5.057, Average Loss: 5.083, avg. samples / sec: 309.28
Iteration:   4560, Loss function: 4.754, Average Loss: 5.079, avg. samples / sec: 324.26
Iteration:   4580, Loss function: 4.700, Average Loss: 5.077, avg. samples / sec: 275.23
Iteration:   4600, Loss function: 4.784, Average Loss: 5.073, avg. samples / sec: 312.42
Iteration:   4620, Loss function: 4.917, Average Loss: 5.069, avg. samples / sec: 285.61
Iteration:   4640, Loss function: 4.633, Average Loss: 5.065, avg. samples / sec: 255.02
Iteration:   4660, Loss function: 4.888, Average Loss: 5.061, avg. samples / sec: 234.85
Iteration:   4680, Loss function: 5.159, Average Loss: 5.057, avg. samples / sec: 321.99
Iteration:   4700, Loss function: 4.753, Average Loss: 5.054, avg. samples / sec: 316.15
Iteration:   4720, Loss function: 4.825, Average Loss: 5.049, avg. samples / sec: 260.39
Iteration:   4740, Loss function: 4.694, Average Loss: 5.046, avg. samples / sec: 336.61
Iteration:   4760, Loss function: 4.694, Average Loss: 5.042, avg. samples / sec: 329.38
Iteration:   4780, Loss function: 5.095, Average Loss: 5.038, avg. samples / sec: 288.47
Iteration:   4800, Loss function: 4.899, Average Loss: 5.036, avg. samples / sec: 317.90
Iteration:   4820, Loss function: 4.923, Average Loss: 5.032, avg. samples / sec: 331.25
Iteration:   4840, Loss function: 4.963, Average Loss: 5.029, avg. samples / sec: 331.57
Iteration:   4860, Loss function: 4.678, Average Loss: 5.025, avg. samples / sec: 273.17
Iteration:   4880, Loss function: 5.117, Average Loss: 5.021, avg. samples / sec: 252.25
Iteration:   4900, Loss function: 4.619, Average Loss: 5.017, avg. samples / sec: 293.81
Iteration:   4920, Loss function: 4.864, Average Loss: 5.014, avg. samples / sec: 315.75
Iteration:   4940, Loss function: 4.870, Average Loss: 5.010, avg. samples / sec: 316.84
Iteration:   4960, Loss function: 4.677, Average Loss: 5.007, avg. samples / sec: 324.07
Iteration:   4980, Loss function: 4.520, Average Loss: 5.002, avg. samples / sec: 337.58
Iteration:   5000, Loss function: 4.962, Average Loss: 5.000, avg. samples / sec: 292.28
Iteration:   5020, Loss function: 5.094, Average Loss: 4.996, avg. samples / sec: 324.64
Iteration:   5040, Loss function: 4.830, Average Loss: 4.993, avg. samples / sec: 335.17
Iteration:   5060, Loss function: 4.887, Average Loss: 4.990, avg. samples / sec: 334.99
Iteration:   5080, Loss function: 4.416, Average Loss: 4.985, avg. samples / sec: 284.08
Iteration:   5100, Loss function: 4.795, Average Loss: 4.983, avg. samples / sec: 273.10
Iteration:   5120, Loss function: 4.718, Average Loss: 4.980, avg. samples / sec: 305.39
Iteration:   5140, Loss function: 5.007, Average Loss: 4.976, avg. samples / sec: 330.95
:::MLLOG {"namespace": "", "time_ms": 1639152491129, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 80.67 s
:::MLLOG {"namespace": "", "time_ms": 1639152572090, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152572140, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152572162, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.32s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.925, Average Loss: 4.971, avg. samples / sec: 25.75
DONE (t=6.01s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10639
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21500
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09585
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19322
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13873
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20345
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21561
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10639 AP goal: 0.10000
Iteration:   5180, Loss function: 4.597, Average Loss: 4.966, avg. samples / sec: 331.57
:::MLLOG {"namespace": "", "time_ms": 1639152585359, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152585360, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10638608480694921, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152585360, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590629, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152597
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:57 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:36 PM'
START TIMING RUN WAS 2021-12-10 03:32:36 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:57 PM'
ENDING TIMING RUN AT 2021-12-10 04:09:57 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-7d2dee39-0203-5b2a-832d-12e5175d321f)
+ result=2241
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-10 03:32:36 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-10 03:32:36 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
