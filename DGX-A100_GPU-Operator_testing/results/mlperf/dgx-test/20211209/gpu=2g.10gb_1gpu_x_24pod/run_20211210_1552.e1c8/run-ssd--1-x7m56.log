+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-x7m56.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-x7m56.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-x7m56.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-c4be375c-234a-5732-a19d-911d04cda8c0
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-c4be375c-234a-5732-a19d-911d04cda8c0
+ echo 'Found 1 MIG instances: MIG-c4be375c-234a-5732-a19d-911d04cda8c0'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150360
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:40 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:40 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:40 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:40 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-x7m56 to the sync file ...
run-ssd--1-x7m56 Found 18 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
Fri Dec 10 15:32:45 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150367574, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150367773, "event_type": "POINT_IN_TIME", "key": "seed", "value": 544104322, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 544104322
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150371042, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150371042, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150371046, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150474850, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150474850, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150477622, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150477623, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150478240, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150478241, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150478243, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.068, Average Loss: 0.023, avg. samples / sec: 1.05
Iteration:     20, Loss function: 21.147, Average Loss: 0.458, avg. samples / sec: 225.25
Iteration:     40, Loss function: 20.689, Average Loss: 0.860, avg. samples / sec: 251.93
Iteration:     60, Loss function: 20.379, Average Loss: 1.250, avg. samples / sec: 258.53
Iteration:     80, Loss function: 20.147, Average Loss: 1.625, avg. samples / sec: 239.60
Iteration:    100, Loss function: 15.991, Average Loss: 1.958, avg. samples / sec: 238.79
Iteration:    120, Loss function: 12.177, Average Loss: 2.175, avg. samples / sec: 272.71
Iteration:    140, Loss function: 9.788, Average Loss: 2.340, avg. samples / sec: 267.35
Iteration:    160, Loss function: 9.326, Average Loss: 2.483, avg. samples / sec: 255.41
Iteration:    180, Loss function: 9.032, Average Loss: 2.614, avg. samples / sec: 294.74
Iteration:    200, Loss function: 8.738, Average Loss: 2.740, avg. samples / sec: 291.04
Iteration:    220, Loss function: 8.646, Average Loss: 2.861, avg. samples / sec: 241.60
Iteration:    240, Loss function: 8.666, Average Loss: 2.978, avg. samples / sec: 316.43
Iteration:    260, Loss function: 8.893, Average Loss: 3.091, avg. samples / sec: 323.80
Iteration:    280, Loss function: 8.514, Average Loss: 3.201, avg. samples / sec: 227.91
Iteration:    300, Loss function: 8.512, Average Loss: 3.307, avg. samples / sec: 264.27
Iteration:    320, Loss function: 8.423, Average Loss: 3.410, avg. samples / sec: 258.59
Iteration:    340, Loss function: 8.489, Average Loss: 3.507, avg. samples / sec: 313.89
Iteration:    360, Loss function: 8.163, Average Loss: 3.599, avg. samples / sec: 258.86
Iteration:    380, Loss function: 7.977, Average Loss: 3.689, avg. samples / sec: 291.40
Iteration:    400, Loss function: 7.985, Average Loss: 3.774, avg. samples / sec: 266.05
Iteration:    420, Loss function: 7.730, Average Loss: 3.856, avg. samples / sec: 304.73
Iteration:    440, Loss function: 7.887, Average Loss: 3.936, avg. samples / sec: 261.13
Iteration:    460, Loss function: 7.830, Average Loss: 4.013, avg. samples / sec: 260.14
Iteration:    480, Loss function: 7.688, Average Loss: 4.088, avg. samples / sec: 214.52
Iteration:    500, Loss function: 7.703, Average Loss: 4.160, avg. samples / sec: 301.32
Iteration:    520, Loss function: 7.566, Average Loss: 4.230, avg. samples / sec: 324.53
Iteration:    540, Loss function: 7.490, Average Loss: 4.296, avg. samples / sec: 327.62
Iteration:    560, Loss function: 7.215, Average Loss: 4.358, avg. samples / sec: 252.51
Iteration:    580, Loss function: 7.236, Average Loss: 4.419, avg. samples / sec: 256.44
Iteration:    600, Loss function: 7.171, Average Loss: 4.477, avg. samples / sec: 259.96
Iteration:    620, Loss function: 7.053, Average Loss: 4.533, avg. samples / sec: 255.57
Iteration:    640, Loss function: 6.952, Average Loss: 4.587, avg. samples / sec: 270.48
Iteration:    660, Loss function: 7.112, Average Loss: 4.638, avg. samples / sec: 310.17
Iteration:    680, Loss function: 7.238, Average Loss: 4.689, avg. samples / sec: 310.62
Iteration:    700, Loss function: 6.754, Average Loss: 4.737, avg. samples / sec: 317.08
Iteration:    720, Loss function: 6.888, Average Loss: 4.785, avg. samples / sec: 296.31
Iteration:    740, Loss function: 6.881, Average Loss: 4.829, avg. samples / sec: 321.68
Iteration:    760, Loss function: 7.127, Average Loss: 4.871, avg. samples / sec: 307.50
Iteration:    780, Loss function: 6.875, Average Loss: 4.913, avg. samples / sec: 270.61
Iteration:    800, Loss function: 7.237, Average Loss: 4.952, avg. samples / sec: 320.75
Iteration:    820, Loss function: 6.880, Average Loss: 4.990, avg. samples / sec: 230.07
Iteration:    840, Loss function: 6.692, Average Loss: 5.027, avg. samples / sec: 217.74
Iteration:    860, Loss function: 6.771, Average Loss: 5.062, avg. samples / sec: 276.71
Iteration:    880, Loss function: 6.689, Average Loss: 5.094, avg. samples / sec: 268.82
Iteration:    900, Loss function: 6.859, Average Loss: 5.125, avg. samples / sec: 276.82
Iteration:    920, Loss function: 6.660, Average Loss: 5.154, avg. samples / sec: 229.77
Iteration:    940, Loss function: 6.687, Average Loss: 5.183, avg. samples / sec: 295.32
Iteration:    960, Loss function: 6.330, Average Loss: 5.211, avg. samples / sec: 316.09
Iteration:    980, Loss function: 6.609, Average Loss: 5.238, avg. samples / sec: 280.18
Iteration:   1000, Loss function: 6.647, Average Loss: 5.264, avg. samples / sec: 248.05
Iteration:   1020, Loss function: 6.288, Average Loss: 5.287, avg. samples / sec: 250.45
:::MLLOG {"namespace": "", "time_ms": 1639150913172, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150913174, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.434, Average Loss: 5.311, avg. samples / sec: 273.75
Iteration:   1060, Loss function: 6.339, Average Loss: 5.333, avg. samples / sec: 276.76
Iteration:   1080, Loss function: 6.417, Average Loss: 5.354, avg. samples / sec: 267.61
Iteration:   1100, Loss function: 6.179, Average Loss: 5.374, avg. samples / sec: 231.83
Iteration:   1120, Loss function: 6.179, Average Loss: 5.392, avg. samples / sec: 253.90
Iteration:   1140, Loss function: 6.404, Average Loss: 5.411, avg. samples / sec: 325.22
Iteration:   1160, Loss function: 6.299, Average Loss: 5.428, avg. samples / sec: 314.66
Iteration:   1180, Loss function: 6.256, Average Loss: 5.445, avg. samples / sec: 296.80
Iteration:   1200, Loss function: 6.098, Average Loss: 5.461, avg. samples / sec: 328.45
Iteration:   1220, Loss function: 6.168, Average Loss: 5.477, avg. samples / sec: 304.20
Iteration:   1240, Loss function: 6.090, Average Loss: 5.490, avg. samples / sec: 306.49
Iteration:   1260, Loss function: 6.012, Average Loss: 5.501, avg. samples / sec: 250.30
Iteration:   1280, Loss function: 5.890, Average Loss: 5.513, avg. samples / sec: 309.59
Iteration:   1300, Loss function: 6.274, Average Loss: 5.526, avg. samples / sec: 272.41
Iteration:   1320, Loss function: 6.022, Average Loss: 5.537, avg. samples / sec: 329.38
Iteration:   1340, Loss function: 6.075, Average Loss: 5.547, avg. samples / sec: 318.75
Iteration:   1360, Loss function: 5.809, Average Loss: 5.557, avg. samples / sec: 283.42
Iteration:   1380, Loss function: 6.315, Average Loss: 5.567, avg. samples / sec: 288.94
Iteration:   1400, Loss function: 6.095, Average Loss: 5.575, avg. samples / sec: 316.06
Iteration:   1420, Loss function: 5.846, Average Loss: 5.584, avg. samples / sec: 218.04
Iteration:   1440, Loss function: 6.359, Average Loss: 5.592, avg. samples / sec: 215.67
Iteration:   1460, Loss function: 6.166, Average Loss: 5.600, avg. samples / sec: 326.28
Iteration:   1480, Loss function: 5.891, Average Loss: 5.607, avg. samples / sec: 329.39
Iteration:   1500, Loss function: 6.019, Average Loss: 5.614, avg. samples / sec: 325.94
Iteration:   1520, Loss function: 5.898, Average Loss: 5.620, avg. samples / sec: 310.94
Iteration:   1540, Loss function: 6.147, Average Loss: 5.624, avg. samples / sec: 320.56
Iteration:   1560, Loss function: 5.976, Average Loss: 5.629, avg. samples / sec: 317.47
Iteration:   1580, Loss function: 5.695, Average Loss: 5.634, avg. samples / sec: 323.19
Iteration:   1600, Loss function: 6.209, Average Loss: 5.640, avg. samples / sec: 334.25
Iteration:   1620, Loss function: 5.717, Average Loss: 5.645, avg. samples / sec: 290.03
Iteration:   1640, Loss function: 5.923, Average Loss: 5.648, avg. samples / sec: 334.80
Iteration:   1660, Loss function: 5.914, Average Loss: 5.651, avg. samples / sec: 286.72
Iteration:   1680, Loss function: 5.637, Average Loss: 5.654, avg. samples / sec: 317.86
Iteration:   1700, Loss function: 5.333, Average Loss: 5.657, avg. samples / sec: 317.59
Iteration:   1720, Loss function: 5.709, Average Loss: 5.659, avg. samples / sec: 137.01
Iteration:   1740, Loss function: 5.991, Average Loss: 5.661, avg. samples / sec: 250.34
Iteration:   1760, Loss function: 5.573, Average Loss: 5.662, avg. samples / sec: 270.38
Iteration:   1780, Loss function: 5.763, Average Loss: 5.663, avg. samples / sec: 325.52
Iteration:   1800, Loss function: 5.635, Average Loss: 5.665, avg. samples / sec: 311.28
Iteration:   1820, Loss function: 5.843, Average Loss: 5.667, avg. samples / sec: 225.84
Iteration:   1840, Loss function: 6.016, Average Loss: 5.668, avg. samples / sec: 216.33
Iteration:   1860, Loss function: 5.700, Average Loss: 5.668, avg. samples / sec: 326.99
Iteration:   1880, Loss function: 5.988, Average Loss: 5.668, avg. samples / sec: 313.49
Iteration:   1900, Loss function: 5.877, Average Loss: 5.668, avg. samples / sec: 295.81
Iteration:   1920, Loss function: 5.865, Average Loss: 5.669, avg. samples / sec: 332.36
Iteration:   1940, Loss function: 5.819, Average Loss: 5.668, avg. samples / sec: 321.80
Iteration:   1960, Loss function: 5.531, Average Loss: 5.667, avg. samples / sec: 292.84
Iteration:   1980, Loss function: 5.793, Average Loss: 5.666, avg. samples / sec: 314.65
Iteration:   2000, Loss function: 5.724, Average Loss: 5.666, avg. samples / sec: 272.49
Iteration:   2020, Loss function: 5.581, Average Loss: 5.663, avg. samples / sec: 315.99
Iteration:   2040, Loss function: 5.680, Average Loss: 5.663, avg. samples / sec: 321.00
:::MLLOG {"namespace": "", "time_ms": 1639151322665, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151322666, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.640, Average Loss: 5.662, avg. samples / sec: 322.62
Iteration:   2080, Loss function: 5.243, Average Loss: 5.660, avg. samples / sec: 329.45
Iteration:   2100, Loss function: 5.542, Average Loss: 5.657, avg. samples / sec: 325.65
Iteration:   2120, Loss function: 5.279, Average Loss: 5.654, avg. samples / sec: 326.85
Iteration:   2140, Loss function: 5.366, Average Loss: 5.650, avg. samples / sec: 331.70
Iteration:   2160, Loss function: 5.340, Average Loss: 5.647, avg. samples / sec: 325.47
Iteration:   2180, Loss function: 5.373, Average Loss: 5.646, avg. samples / sec: 327.14
Iteration:   2200, Loss function: 5.660, Average Loss: 5.642, avg. samples / sec: 332.84
Iteration:   2220, Loss function: 5.733, Average Loss: 5.640, avg. samples / sec: 273.16
Iteration:   2240, Loss function: 5.528, Average Loss: 5.638, avg. samples / sec: 324.42
Iteration:   2260, Loss function: 5.303, Average Loss: 5.633, avg. samples / sec: 314.40
Iteration:   2280, Loss function: 5.291, Average Loss: 5.631, avg. samples / sec: 313.28
Iteration:   2300, Loss function: 5.192, Average Loss: 5.627, avg. samples / sec: 313.65
Iteration:   2320, Loss function: 5.218, Average Loss: 5.624, avg. samples / sec: 316.39
Iteration:   2340, Loss function: 5.422, Average Loss: 5.620, avg. samples / sec: 276.21
Iteration:   2360, Loss function: 5.401, Average Loss: 5.616, avg. samples / sec: 280.16
Iteration:   2380, Loss function: 5.496, Average Loss: 5.613, avg. samples / sec: 322.98
Iteration:   2400, Loss function: 5.707, Average Loss: 5.608, avg. samples / sec: 322.97
Iteration:   2420, Loss function: 5.465, Average Loss: 5.605, avg. samples / sec: 313.88
Iteration:   2440, Loss function: 5.323, Average Loss: 5.601, avg. samples / sec: 288.15
Iteration:   2460, Loss function: 5.225, Average Loss: 5.596, avg. samples / sec: 310.13
Iteration:   2480, Loss function: 5.349, Average Loss: 5.593, avg. samples / sec: 326.22
Iteration:   2500, Loss function: 5.531, Average Loss: 5.589, avg. samples / sec: 324.88
Iteration:   2520, Loss function: 5.294, Average Loss: 5.585, avg. samples / sec: 336.30
Iteration:   2540, Loss function: 5.348, Average Loss: 5.581, avg. samples / sec: 302.03
Iteration:   2560, Loss function: 5.064, Average Loss: 5.578, avg. samples / sec: 318.57
Iteration:   2580, Loss function: 5.347, Average Loss: 5.574, avg. samples / sec: 228.34
Iteration:   2600, Loss function: 5.472, Average Loss: 5.572, avg. samples / sec: 283.71
Iteration:   2620, Loss function: 5.477, Average Loss: 5.567, avg. samples / sec: 234.51
Iteration:   2640, Loss function: 5.225, Average Loss: 5.563, avg. samples / sec: 209.46
Iteration:   2660, Loss function: 5.344, Average Loss: 5.560, avg. samples / sec: 297.41
Iteration:   2680, Loss function: 4.978, Average Loss: 5.556, avg. samples / sec: 330.05
Iteration:   2700, Loss function: 5.310, Average Loss: 5.552, avg. samples / sec: 202.36
Iteration:   2720, Loss function: 5.478, Average Loss: 5.547, avg. samples / sec: 323.70
Iteration:   2740, Loss function: 5.075, Average Loss: 5.543, avg. samples / sec: 333.88
Iteration:   2760, Loss function: 5.072, Average Loss: 5.537, avg. samples / sec: 291.24
Iteration:   2780, Loss function: 5.490, Average Loss: 5.533, avg. samples / sec: 245.01
Iteration:   2800, Loss function: 5.236, Average Loss: 5.529, avg. samples / sec: 333.95
Iteration:   2820, Loss function: 5.362, Average Loss: 5.524, avg. samples / sec: 221.90
Iteration:   2840, Loss function: 5.163, Average Loss: 5.519, avg. samples / sec: 320.40
Iteration:   2860, Loss function: 5.305, Average Loss: 5.514, avg. samples / sec: 240.84
Iteration:   2880, Loss function: 5.308, Average Loss: 5.509, avg. samples / sec: 276.68
Iteration:   2900, Loss function: 5.074, Average Loss: 5.505, avg. samples / sec: 324.73
Iteration:   2920, Loss function: 5.244, Average Loss: 5.499, avg. samples / sec: 311.31
Iteration:   2940, Loss function: 5.057, Average Loss: 5.494, avg. samples / sec: 282.28
Iteration:   2960, Loss function: 5.494, Average Loss: 5.489, avg. samples / sec: 317.57
Iteration:   2980, Loss function: 5.405, Average Loss: 5.485, avg. samples / sec: 265.58
Iteration:   3000, Loss function: 5.422, Average Loss: 5.481, avg. samples / sec: 282.72
Iteration:   3020, Loss function: 5.252, Average Loss: 5.475, avg. samples / sec: 319.99
Iteration:   3040, Loss function: 5.172, Average Loss: 5.470, avg. samples / sec: 332.99
Iteration:   3060, Loss function: 5.082, Average Loss: 5.463, avg. samples / sec: 332.23
Iteration:   3080, Loss function: 4.799, Average Loss: 5.458, avg. samples / sec: 319.97
:::MLLOG {"namespace": "", "time_ms": 1639151718821, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151718834, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.251, Average Loss: 5.452, avg. samples / sec: 302.27
Iteration:   3120, Loss function: 5.035, Average Loss: 5.446, avg. samples / sec: 247.42
Iteration:   3140, Loss function: 5.127, Average Loss: 5.441, avg. samples / sec: 261.57
Iteration:   3160, Loss function: 5.376, Average Loss: 5.435, avg. samples / sec: 330.23
Iteration:   3180, Loss function: 5.038, Average Loss: 5.429, avg. samples / sec: 335.20
Iteration:   3200, Loss function: 5.238, Average Loss: 5.424, avg. samples / sec: 311.96
Iteration:   3220, Loss function: 5.122, Average Loss: 5.418, avg. samples / sec: 280.63
Iteration:   3240, Loss function: 5.192, Average Loss: 5.414, avg. samples / sec: 289.82
Iteration:   3260, Loss function: 5.059, Average Loss: 5.407, avg. samples / sec: 328.58
Iteration:   3280, Loss function: 4.948, Average Loss: 5.401, avg. samples / sec: 324.37
Iteration:   3300, Loss function: 4.887, Average Loss: 5.396, avg. samples / sec: 295.73
Iteration:   3320, Loss function: 5.084, Average Loss: 5.391, avg. samples / sec: 298.33
Iteration:   3340, Loss function: 5.069, Average Loss: 5.386, avg. samples / sec: 316.23
Iteration:   3360, Loss function: 5.093, Average Loss: 5.380, avg. samples / sec: 322.64
Iteration:   3380, Loss function: 5.298, Average Loss: 5.372, avg. samples / sec: 315.87
Iteration:   3400, Loss function: 4.930, Average Loss: 5.368, avg. samples / sec: 313.48
Iteration:   3420, Loss function: 5.122, Average Loss: 5.363, avg. samples / sec: 312.68
Iteration:   3440, Loss function: 4.886, Average Loss: 5.358, avg. samples / sec: 235.32
Iteration:   3460, Loss function: 5.256, Average Loss: 5.353, avg. samples / sec: 235.44
Iteration:   3480, Loss function: 5.242, Average Loss: 5.348, avg. samples / sec: 199.87
Iteration:   3500, Loss function: 5.360, Average Loss: 5.344, avg. samples / sec: 224.73
Iteration:   3520, Loss function: 5.092, Average Loss: 5.341, avg. samples / sec: 265.91
Iteration:   3540, Loss function: 4.931, Average Loss: 5.336, avg. samples / sec: 191.65
Iteration:   3560, Loss function: 4.922, Average Loss: 5.333, avg. samples / sec: 261.25
Iteration:   3580, Loss function: 5.099, Average Loss: 5.328, avg. samples / sec: 328.94
Iteration:   3600, Loss function: 5.160, Average Loss: 5.323, avg. samples / sec: 329.90
Iteration:   3620, Loss function: 4.940, Average Loss: 5.318, avg. samples / sec: 322.78
Iteration:   3640, Loss function: 4.758, Average Loss: 5.312, avg. samples / sec: 323.13
Iteration:   3660, Loss function: 5.029, Average Loss: 5.307, avg. samples / sec: 320.50
Iteration:   3680, Loss function: 5.084, Average Loss: 5.302, avg. samples / sec: 333.82
Iteration:   3700, Loss function: 5.064, Average Loss: 5.297, avg. samples / sec: 321.09
Iteration:   3720, Loss function: 4.961, Average Loss: 5.290, avg. samples / sec: 312.46
Iteration:   3740, Loss function: 5.173, Average Loss: 5.287, avg. samples / sec: 247.11
Iteration:   3760, Loss function: 5.126, Average Loss: 5.283, avg. samples / sec: 258.28
Iteration:   3780, Loss function: 4.983, Average Loss: 5.277, avg. samples / sec: 286.51
Iteration:   3800, Loss function: 4.866, Average Loss: 5.273, avg. samples / sec: 300.33
Iteration:   3820, Loss function: 5.119, Average Loss: 5.268, avg. samples / sec: 297.19
Iteration:   3840, Loss function: 4.807, Average Loss: 5.262, avg. samples / sec: 312.13
Iteration:   3860, Loss function: 5.084, Average Loss: 5.257, avg. samples / sec: 263.80
Iteration:   3880, Loss function: 4.933, Average Loss: 5.250, avg. samples / sec: 327.77
Iteration:   3900, Loss function: 5.000, Average Loss: 5.245, avg. samples / sec: 310.20
Iteration:   3920, Loss function: 5.152, Average Loss: 5.240, avg. samples / sec: 294.80
Iteration:   3940, Loss function: 4.956, Average Loss: 5.235, avg. samples / sec: 295.04
Iteration:   3960, Loss function: 5.172, Average Loss: 5.232, avg. samples / sec: 253.33
Iteration:   3980, Loss function: 4.839, Average Loss: 5.227, avg. samples / sec: 252.52
Iteration:   4000, Loss function: 5.173, Average Loss: 5.223, avg. samples / sec: 312.28
Iteration:   4020, Loss function: 4.996, Average Loss: 5.219, avg. samples / sec: 321.95
Iteration:   4040, Loss function: 5.009, Average Loss: 5.216, avg. samples / sec: 329.31
Iteration:   4060, Loss function: 5.060, Average Loss: 5.212, avg. samples / sec: 318.28
Iteration:   4080, Loss function: 5.013, Average Loss: 5.207, avg. samples / sec: 207.24
Iteration:   4100, Loss function: 4.982, Average Loss: 5.203, avg. samples / sec: 236.75
:::MLLOG {"namespace": "", "time_ms": 1639152130586, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152130588, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.965, Average Loss: 5.199, avg. samples / sec: 315.29
Iteration:   4140, Loss function: 4.980, Average Loss: 5.194, avg. samples / sec: 319.24
Iteration:   4160, Loss function: 4.862, Average Loss: 5.187, avg. samples / sec: 334.17
Iteration:   4180, Loss function: 4.940, Average Loss: 5.181, avg. samples / sec: 324.99
Iteration:   4200, Loss function: 4.729, Average Loss: 5.176, avg. samples / sec: 309.92
Iteration:   4220, Loss function: 4.977, Average Loss: 5.171, avg. samples / sec: 279.11
Iteration:   4240, Loss function: 4.863, Average Loss: 5.166, avg. samples / sec: 309.59
Iteration:   4260, Loss function: 5.041, Average Loss: 5.161, avg. samples / sec: 304.10
Iteration:   4280, Loss function: 5.175, Average Loss: 5.155, avg. samples / sec: 252.32
Iteration:   4300, Loss function: 4.900, Average Loss: 5.149, avg. samples / sec: 269.81
Iteration:   4320, Loss function: 4.840, Average Loss: 5.143, avg. samples / sec: 300.98
Iteration:   4340, Loss function: 4.957, Average Loss: 5.139, avg. samples / sec: 329.85
Iteration:   4360, Loss function: 4.826, Average Loss: 5.134, avg. samples / sec: 334.60
Iteration:   4380, Loss function: 5.036, Average Loss: 5.130, avg. samples / sec: 281.43
Iteration:   4400, Loss function: 4.889, Average Loss: 5.125, avg. samples / sec: 320.25
Iteration:   4420, Loss function: 5.008, Average Loss: 5.120, avg. samples / sec: 321.49
Iteration:   4440, Loss function: 5.008, Average Loss: 5.115, avg. samples / sec: 318.99
Iteration:   4460, Loss function: 5.081, Average Loss: 5.111, avg. samples / sec: 323.91
Iteration:   4480, Loss function: 4.949, Average Loss: 5.108, avg. samples / sec: 290.92
Iteration:   4500, Loss function: 4.723, Average Loss: 5.105, avg. samples / sec: 269.07
Iteration:   4520, Loss function: 4.684, Average Loss: 5.100, avg. samples / sec: 314.26
Iteration:   4540, Loss function: 5.217, Average Loss: 5.095, avg. samples / sec: 332.05
Iteration:   4560, Loss function: 4.812, Average Loss: 5.091, avg. samples / sec: 317.23
Iteration:   4580, Loss function: 4.740, Average Loss: 5.088, avg. samples / sec: 318.19
Iteration:   4600, Loss function: 4.938, Average Loss: 5.084, avg. samples / sec: 315.87
Iteration:   4620, Loss function: 4.773, Average Loss: 5.080, avg. samples / sec: 292.64
Iteration:   4640, Loss function: 4.613, Average Loss: 5.075, avg. samples / sec: 220.77
Iteration:   4660, Loss function: 4.815, Average Loss: 5.071, avg. samples / sec: 285.84
Iteration:   4680, Loss function: 5.166, Average Loss: 5.067, avg. samples / sec: 335.78
Iteration:   4700, Loss function: 4.755, Average Loss: 5.064, avg. samples / sec: 316.33
Iteration:   4720, Loss function: 4.609, Average Loss: 5.059, avg. samples / sec: 244.37
Iteration:   4740, Loss function: 4.650, Average Loss: 5.054, avg. samples / sec: 174.62
Iteration:   4760, Loss function: 4.835, Average Loss: 5.051, avg. samples / sec: 291.85
Iteration:   4780, Loss function: 5.096, Average Loss: 5.047, avg. samples / sec: 319.19
Iteration:   4800, Loss function: 5.142, Average Loss: 5.044, avg. samples / sec: 272.49
Iteration:   4820, Loss function: 4.781, Average Loss: 5.040, avg. samples / sec: 318.10
Iteration:   4840, Loss function: 5.009, Average Loss: 5.037, avg. samples / sec: 328.31
Iteration:   4860, Loss function: 4.737, Average Loss: 5.032, avg. samples / sec: 299.35
Iteration:   4880, Loss function: 5.140, Average Loss: 5.028, avg. samples / sec: 296.17
Iteration:   4900, Loss function: 4.489, Average Loss: 5.024, avg. samples / sec: 290.97
Iteration:   4920, Loss function: 4.814, Average Loss: 5.020, avg. samples / sec: 299.88
Iteration:   4940, Loss function: 4.822, Average Loss: 5.016, avg. samples / sec: 221.85
Iteration:   4960, Loss function: 4.712, Average Loss: 5.012, avg. samples / sec: 207.70
Iteration:   4980, Loss function: 4.633, Average Loss: 5.009, avg. samples / sec: 312.59
Iteration:   5000, Loss function: 4.839, Average Loss: 5.007, avg. samples / sec: 311.08
Iteration:   5020, Loss function: 5.106, Average Loss: 5.004, avg. samples / sec: 294.26
Iteration:   5040, Loss function: 4.836, Average Loss: 5.000, avg. samples / sec: 266.01
Iteration:   5060, Loss function: 4.909, Average Loss: 4.998, avg. samples / sec: 323.04
Iteration:   5080, Loss function: 4.616, Average Loss: 4.994, avg. samples / sec: 317.47
Iteration:   5100, Loss function: 4.701, Average Loss: 4.991, avg. samples / sec: 305.12
Iteration:   5120, Loss function: 4.619, Average Loss: 4.987, avg. samples / sec: 291.93
Iteration:   5140, Loss function: 5.036, Average Loss: 4.984, avg. samples / sec: 298.79
:::MLLOG {"namespace": "", "time_ms": 1639152532335, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 67.34 s
:::MLLOG {"namespace": "", "time_ms": 1639152599741, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152599789, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152599789, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.58s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.01s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10509
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21322
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09243
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19570
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13675
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20372
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10509 AP goal: 0.10000
Iteration:   5160, Loss function: 4.705, Average Loss: 4.978, avg. samples / sec: 30.68
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10509460974419214, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605935, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:06 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:06 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150367574, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150367773, "event_type": "POINT_IN_TIME", "key": "seed", "value": 544104322, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 544104322
:::MLLOG {"namespace": "", "time_ms": 1639150371042, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150371042, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150371046, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150371047, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150474850, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150474850, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150477622, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150477623, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150478240, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150478241, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150478243, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.068, Average Loss: 0.023, avg. samples / sec: 1.05
Iteration:     20, Loss function: 21.147, Average Loss: 0.458, avg. samples / sec: 225.25
Iteration:     40, Loss function: 20.689, Average Loss: 0.860, avg. samples / sec: 251.93
Iteration:     60, Loss function: 20.379, Average Loss: 1.250, avg. samples / sec: 258.53
Iteration:     80, Loss function: 20.147, Average Loss: 1.625, avg. samples / sec: 239.60
Iteration:    100, Loss function: 15.991, Average Loss: 1.958, avg. samples / sec: 238.79
Iteration:    120, Loss function: 12.177, Average Loss: 2.175, avg. samples / sec: 272.71
Iteration:    140, Loss function: 9.788, Average Loss: 2.340, avg. samples / sec: 267.35
Iteration:    160, Loss function: 9.326, Average Loss: 2.483, avg. samples / sec: 255.41
Iteration:    180, Loss function: 9.032, Average Loss: 2.614, avg. samples / sec: 294.74
Iteration:    200, Loss function: 8.738, Average Loss: 2.740, avg. samples / sec: 291.04
Iteration:    220, Loss function: 8.646, Average Loss: 2.861, avg. samples / sec: 241.60
Iteration:    240, Loss function: 8.666, Average Loss: 2.978, avg. samples / sec: 316.43
Iteration:    260, Loss function: 8.893, Average Loss: 3.091, avg. samples / sec: 323.80
Iteration:    280, Loss function: 8.514, Average Loss: 3.201, avg. samples / sec: 227.91
Iteration:    300, Loss function: 8.512, Average Loss: 3.307, avg. samples / sec: 264.27
Iteration:    320, Loss function: 8.423, Average Loss: 3.410, avg. samples / sec: 258.59
Iteration:    340, Loss function: 8.489, Average Loss: 3.507, avg. samples / sec: 313.89
Iteration:    360, Loss function: 8.163, Average Loss: 3.599, avg. samples / sec: 258.86
Iteration:    380, Loss function: 7.977, Average Loss: 3.689, avg. samples / sec: 291.40
Iteration:    400, Loss function: 7.985, Average Loss: 3.774, avg. samples / sec: 266.05
Iteration:    420, Loss function: 7.730, Average Loss: 3.856, avg. samples / sec: 304.73
Iteration:    440, Loss function: 7.887, Average Loss: 3.936, avg. samples / sec: 261.13
Iteration:    460, Loss function: 7.830, Average Loss: 4.013, avg. samples / sec: 260.14
Iteration:    480, Loss function: 7.688, Average Loss: 4.088, avg. samples / sec: 214.52
Iteration:    500, Loss function: 7.703, Average Loss: 4.160, avg. samples / sec: 301.32
Iteration:    520, Loss function: 7.566, Average Loss: 4.230, avg. samples / sec: 324.53
Iteration:    540, Loss function: 7.490, Average Loss: 4.296, avg. samples / sec: 327.62
Iteration:    560, Loss function: 7.215, Average Loss: 4.358, avg. samples / sec: 252.51
Iteration:    580, Loss function: 7.236, Average Loss: 4.419, avg. samples / sec: 256.44
Iteration:    600, Loss function: 7.171, Average Loss: 4.477, avg. samples / sec: 259.96
Iteration:    620, Loss function: 7.053, Average Loss: 4.533, avg. samples / sec: 255.57
Iteration:    640, Loss function: 6.952, Average Loss: 4.587, avg. samples / sec: 270.48
Iteration:    660, Loss function: 7.112, Average Loss: 4.638, avg. samples / sec: 310.17
Iteration:    680, Loss function: 7.238, Average Loss: 4.689, avg. samples / sec: 310.62
Iteration:    700, Loss function: 6.754, Average Loss: 4.737, avg. samples / sec: 317.08
Iteration:    720, Loss function: 6.888, Average Loss: 4.785, avg. samples / sec: 296.31
Iteration:    740, Loss function: 6.881, Average Loss: 4.829, avg. samples / sec: 321.68
Iteration:    760, Loss function: 7.127, Average Loss: 4.871, avg. samples / sec: 307.50
Iteration:    780, Loss function: 6.875, Average Loss: 4.913, avg. samples / sec: 270.61
Iteration:    800, Loss function: 7.237, Average Loss: 4.952, avg. samples / sec: 320.75
Iteration:    820, Loss function: 6.880, Average Loss: 4.990, avg. samples / sec: 230.07
Iteration:    840, Loss function: 6.692, Average Loss: 5.027, avg. samples / sec: 217.74
Iteration:    860, Loss function: 6.771, Average Loss: 5.062, avg. samples / sec: 276.71
Iteration:    880, Loss function: 6.689, Average Loss: 5.094, avg. samples / sec: 268.82
Iteration:    900, Loss function: 6.859, Average Loss: 5.125, avg. samples / sec: 276.82
Iteration:    920, Loss function: 6.660, Average Loss: 5.154, avg. samples / sec: 229.77
Iteration:    940, Loss function: 6.687, Average Loss: 5.183, avg. samples / sec: 295.32
Iteration:    960, Loss function: 6.330, Average Loss: 5.211, avg. samples / sec: 316.09
Iteration:    980, Loss function: 6.609, Average Loss: 5.238, avg. samples / sec: 280.18
Iteration:   1000, Loss function: 6.647, Average Loss: 5.264, avg. samples / sec: 248.05
Iteration:   1020, Loss function: 6.288, Average Loss: 5.287, avg. samples / sec: 250.45
:::MLLOG {"namespace": "", "time_ms": 1639150913172, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150913174, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.434, Average Loss: 5.311, avg. samples / sec: 273.75
Iteration:   1060, Loss function: 6.339, Average Loss: 5.333, avg. samples / sec: 276.76
Iteration:   1080, Loss function: 6.417, Average Loss: 5.354, avg. samples / sec: 267.61
Iteration:   1100, Loss function: 6.179, Average Loss: 5.374, avg. samples / sec: 231.83
Iteration:   1120, Loss function: 6.179, Average Loss: 5.392, avg. samples / sec: 253.90
Iteration:   1140, Loss function: 6.404, Average Loss: 5.411, avg. samples / sec: 325.22
Iteration:   1160, Loss function: 6.299, Average Loss: 5.428, avg. samples / sec: 314.66
Iteration:   1180, Loss function: 6.256, Average Loss: 5.445, avg. samples / sec: 296.80
Iteration:   1200, Loss function: 6.098, Average Loss: 5.461, avg. samples / sec: 328.45
Iteration:   1220, Loss function: 6.168, Average Loss: 5.477, avg. samples / sec: 304.20
Iteration:   1240, Loss function: 6.090, Average Loss: 5.490, avg. samples / sec: 306.49
Iteration:   1260, Loss function: 6.012, Average Loss: 5.501, avg. samples / sec: 250.30
Iteration:   1280, Loss function: 5.890, Average Loss: 5.513, avg. samples / sec: 309.59
Iteration:   1300, Loss function: 6.274, Average Loss: 5.526, avg. samples / sec: 272.41
Iteration:   1320, Loss function: 6.022, Average Loss: 5.537, avg. samples / sec: 329.38
Iteration:   1340, Loss function: 6.075, Average Loss: 5.547, avg. samples / sec: 318.75
Iteration:   1360, Loss function: 5.809, Average Loss: 5.557, avg. samples / sec: 283.42
Iteration:   1380, Loss function: 6.315, Average Loss: 5.567, avg. samples / sec: 288.94
Iteration:   1400, Loss function: 6.095, Average Loss: 5.575, avg. samples / sec: 316.06
Iteration:   1420, Loss function: 5.846, Average Loss: 5.584, avg. samples / sec: 218.04
Iteration:   1440, Loss function: 6.359, Average Loss: 5.592, avg. samples / sec: 215.67
Iteration:   1460, Loss function: 6.166, Average Loss: 5.600, avg. samples / sec: 326.28
Iteration:   1480, Loss function: 5.891, Average Loss: 5.607, avg. samples / sec: 329.39
Iteration:   1500, Loss function: 6.019, Average Loss: 5.614, avg. samples / sec: 325.94
Iteration:   1520, Loss function: 5.898, Average Loss: 5.620, avg. samples / sec: 310.94
Iteration:   1540, Loss function: 6.147, Average Loss: 5.624, avg. samples / sec: 320.56
Iteration:   1560, Loss function: 5.976, Average Loss: 5.629, avg. samples / sec: 317.47
Iteration:   1580, Loss function: 5.695, Average Loss: 5.634, avg. samples / sec: 323.19
Iteration:   1600, Loss function: 6.209, Average Loss: 5.640, avg. samples / sec: 334.25
Iteration:   1620, Loss function: 5.717, Average Loss: 5.645, avg. samples / sec: 290.03
Iteration:   1640, Loss function: 5.923, Average Loss: 5.648, avg. samples / sec: 334.80
Iteration:   1660, Loss function: 5.914, Average Loss: 5.651, avg. samples / sec: 286.72
Iteration:   1680, Loss function: 5.637, Average Loss: 5.654, avg. samples / sec: 317.86
Iteration:   1700, Loss function: 5.333, Average Loss: 5.657, avg. samples / sec: 317.59
Iteration:   1720, Loss function: 5.709, Average Loss: 5.659, avg. samples / sec: 137.01
Iteration:   1740, Loss function: 5.991, Average Loss: 5.661, avg. samples / sec: 250.34
Iteration:   1760, Loss function: 5.573, Average Loss: 5.662, avg. samples / sec: 270.38
Iteration:   1780, Loss function: 5.763, Average Loss: 5.663, avg. samples / sec: 325.52
Iteration:   1800, Loss function: 5.635, Average Loss: 5.665, avg. samples / sec: 311.28
Iteration:   1820, Loss function: 5.843, Average Loss: 5.667, avg. samples / sec: 225.84
Iteration:   1840, Loss function: 6.016, Average Loss: 5.668, avg. samples / sec: 216.33
Iteration:   1860, Loss function: 5.700, Average Loss: 5.668, avg. samples / sec: 326.99
Iteration:   1880, Loss function: 5.988, Average Loss: 5.668, avg. samples / sec: 313.49
Iteration:   1900, Loss function: 5.877, Average Loss: 5.668, avg. samples / sec: 295.81
Iteration:   1920, Loss function: 5.865, Average Loss: 5.669, avg. samples / sec: 332.36
Iteration:   1940, Loss function: 5.819, Average Loss: 5.668, avg. samples / sec: 321.80
Iteration:   1960, Loss function: 5.531, Average Loss: 5.667, avg. samples / sec: 292.84
Iteration:   1980, Loss function: 5.793, Average Loss: 5.666, avg. samples / sec: 314.65
Iteration:   2000, Loss function: 5.724, Average Loss: 5.666, avg. samples / sec: 272.49
Iteration:   2020, Loss function: 5.581, Average Loss: 5.663, avg. samples / sec: 315.99
Iteration:   2040, Loss function: 5.680, Average Loss: 5.663, avg. samples / sec: 321.00
:::MLLOG {"namespace": "", "time_ms": 1639151322665, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151322666, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.640, Average Loss: 5.662, avg. samples / sec: 322.62
Iteration:   2080, Loss function: 5.243, Average Loss: 5.660, avg. samples / sec: 329.45
Iteration:   2100, Loss function: 5.542, Average Loss: 5.657, avg. samples / sec: 325.65
Iteration:   2120, Loss function: 5.279, Average Loss: 5.654, avg. samples / sec: 326.85
Iteration:   2140, Loss function: 5.366, Average Loss: 5.650, avg. samples / sec: 331.70
Iteration:   2160, Loss function: 5.340, Average Loss: 5.647, avg. samples / sec: 325.47
Iteration:   2180, Loss function: 5.373, Average Loss: 5.646, avg. samples / sec: 327.14
Iteration:   2200, Loss function: 5.660, Average Loss: 5.642, avg. samples / sec: 332.84
Iteration:   2220, Loss function: 5.733, Average Loss: 5.640, avg. samples / sec: 273.16
Iteration:   2240, Loss function: 5.528, Average Loss: 5.638, avg. samples / sec: 324.42
Iteration:   2260, Loss function: 5.303, Average Loss: 5.633, avg. samples / sec: 314.40
Iteration:   2280, Loss function: 5.291, Average Loss: 5.631, avg. samples / sec: 313.28
Iteration:   2300, Loss function: 5.192, Average Loss: 5.627, avg. samples / sec: 313.65
Iteration:   2320, Loss function: 5.218, Average Loss: 5.624, avg. samples / sec: 316.39
Iteration:   2340, Loss function: 5.422, Average Loss: 5.620, avg. samples / sec: 276.21
Iteration:   2360, Loss function: 5.401, Average Loss: 5.616, avg. samples / sec: 280.16
Iteration:   2380, Loss function: 5.496, Average Loss: 5.613, avg. samples / sec: 322.98
Iteration:   2400, Loss function: 5.707, Average Loss: 5.608, avg. samples / sec: 322.97
Iteration:   2420, Loss function: 5.465, Average Loss: 5.605, avg. samples / sec: 313.88
Iteration:   2440, Loss function: 5.323, Average Loss: 5.601, avg. samples / sec: 288.15
Iteration:   2460, Loss function: 5.225, Average Loss: 5.596, avg. samples / sec: 310.13
Iteration:   2480, Loss function: 5.349, Average Loss: 5.593, avg. samples / sec: 326.22
Iteration:   2500, Loss function: 5.531, Average Loss: 5.589, avg. samples / sec: 324.88
Iteration:   2520, Loss function: 5.294, Average Loss: 5.585, avg. samples / sec: 336.30
Iteration:   2540, Loss function: 5.348, Average Loss: 5.581, avg. samples / sec: 302.03
Iteration:   2560, Loss function: 5.064, Average Loss: 5.578, avg. samples / sec: 318.57
Iteration:   2580, Loss function: 5.347, Average Loss: 5.574, avg. samples / sec: 228.34
Iteration:   2600, Loss function: 5.472, Average Loss: 5.572, avg. samples / sec: 283.71
Iteration:   2620, Loss function: 5.477, Average Loss: 5.567, avg. samples / sec: 234.51
Iteration:   2640, Loss function: 5.225, Average Loss: 5.563, avg. samples / sec: 209.46
Iteration:   2660, Loss function: 5.344, Average Loss: 5.560, avg. samples / sec: 297.41
Iteration:   2680, Loss function: 4.978, Average Loss: 5.556, avg. samples / sec: 330.05
Iteration:   2700, Loss function: 5.310, Average Loss: 5.552, avg. samples / sec: 202.36
Iteration:   2720, Loss function: 5.478, Average Loss: 5.547, avg. samples / sec: 323.70
Iteration:   2740, Loss function: 5.075, Average Loss: 5.543, avg. samples / sec: 333.88
Iteration:   2760, Loss function: 5.072, Average Loss: 5.537, avg. samples / sec: 291.24
Iteration:   2780, Loss function: 5.490, Average Loss: 5.533, avg. samples / sec: 245.01
Iteration:   2800, Loss function: 5.236, Average Loss: 5.529, avg. samples / sec: 333.95
Iteration:   2820, Loss function: 5.362, Average Loss: 5.524, avg. samples / sec: 221.90
Iteration:   2840, Loss function: 5.163, Average Loss: 5.519, avg. samples / sec: 320.40
Iteration:   2860, Loss function: 5.305, Average Loss: 5.514, avg. samples / sec: 240.84
Iteration:   2880, Loss function: 5.308, Average Loss: 5.509, avg. samples / sec: 276.68
Iteration:   2900, Loss function: 5.074, Average Loss: 5.505, avg. samples / sec: 324.73
Iteration:   2920, Loss function: 5.244, Average Loss: 5.499, avg. samples / sec: 311.31
Iteration:   2940, Loss function: 5.057, Average Loss: 5.494, avg. samples / sec: 282.28
Iteration:   2960, Loss function: 5.494, Average Loss: 5.489, avg. samples / sec: 317.57
Iteration:   2980, Loss function: 5.405, Average Loss: 5.485, avg. samples / sec: 265.58
Iteration:   3000, Loss function: 5.422, Average Loss: 5.481, avg. samples / sec: 282.72
Iteration:   3020, Loss function: 5.252, Average Loss: 5.475, avg. samples / sec: 319.99
Iteration:   3040, Loss function: 5.172, Average Loss: 5.470, avg. samples / sec: 332.99
Iteration:   3060, Loss function: 5.082, Average Loss: 5.463, avg. samples / sec: 332.23
Iteration:   3080, Loss function: 4.799, Average Loss: 5.458, avg. samples / sec: 319.97
:::MLLOG {"namespace": "", "time_ms": 1639151718821, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151718834, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.251, Average Loss: 5.452, avg. samples / sec: 302.27
Iteration:   3120, Loss function: 5.035, Average Loss: 5.446, avg. samples / sec: 247.42
Iteration:   3140, Loss function: 5.127, Average Loss: 5.441, avg. samples / sec: 261.57
Iteration:   3160, Loss function: 5.376, Average Loss: 5.435, avg. samples / sec: 330.23
Iteration:   3180, Loss function: 5.038, Average Loss: 5.429, avg. samples / sec: 335.20
Iteration:   3200, Loss function: 5.238, Average Loss: 5.424, avg. samples / sec: 311.96
Iteration:   3220, Loss function: 5.122, Average Loss: 5.418, avg. samples / sec: 280.63
Iteration:   3240, Loss function: 5.192, Average Loss: 5.414, avg. samples / sec: 289.82
Iteration:   3260, Loss function: 5.059, Average Loss: 5.407, avg. samples / sec: 328.58
Iteration:   3280, Loss function: 4.948, Average Loss: 5.401, avg. samples / sec: 324.37
Iteration:   3300, Loss function: 4.887, Average Loss: 5.396, avg. samples / sec: 295.73
Iteration:   3320, Loss function: 5.084, Average Loss: 5.391, avg. samples / sec: 298.33
Iteration:   3340, Loss function: 5.069, Average Loss: 5.386, avg. samples / sec: 316.23
Iteration:   3360, Loss function: 5.093, Average Loss: 5.380, avg. samples / sec: 322.64
Iteration:   3380, Loss function: 5.298, Average Loss: 5.372, avg. samples / sec: 315.87
Iteration:   3400, Loss function: 4.930, Average Loss: 5.368, avg. samples / sec: 313.48
Iteration:   3420, Loss function: 5.122, Average Loss: 5.363, avg. samples / sec: 312.68
Iteration:   3440, Loss function: 4.886, Average Loss: 5.358, avg. samples / sec: 235.32
Iteration:   3460, Loss function: 5.256, Average Loss: 5.353, avg. samples / sec: 235.44
Iteration:   3480, Loss function: 5.242, Average Loss: 5.348, avg. samples / sec: 199.87
Iteration:   3500, Loss function: 5.360, Average Loss: 5.344, avg. samples / sec: 224.73
Iteration:   3520, Loss function: 5.092, Average Loss: 5.341, avg. samples / sec: 265.91
Iteration:   3540, Loss function: 4.931, Average Loss: 5.336, avg. samples / sec: 191.65
Iteration:   3560, Loss function: 4.922, Average Loss: 5.333, avg. samples / sec: 261.25
Iteration:   3580, Loss function: 5.099, Average Loss: 5.328, avg. samples / sec: 328.94
Iteration:   3600, Loss function: 5.160, Average Loss: 5.323, avg. samples / sec: 329.90
Iteration:   3620, Loss function: 4.940, Average Loss: 5.318, avg. samples / sec: 322.78
Iteration:   3640, Loss function: 4.758, Average Loss: 5.312, avg. samples / sec: 323.13
Iteration:   3660, Loss function: 5.029, Average Loss: 5.307, avg. samples / sec: 320.50
Iteration:   3680, Loss function: 5.084, Average Loss: 5.302, avg. samples / sec: 333.82
Iteration:   3700, Loss function: 5.064, Average Loss: 5.297, avg. samples / sec: 321.09
Iteration:   3720, Loss function: 4.961, Average Loss: 5.290, avg. samples / sec: 312.46
Iteration:   3740, Loss function: 5.173, Average Loss: 5.287, avg. samples / sec: 247.11
Iteration:   3760, Loss function: 5.126, Average Loss: 5.283, avg. samples / sec: 258.28
Iteration:   3780, Loss function: 4.983, Average Loss: 5.277, avg. samples / sec: 286.51
Iteration:   3800, Loss function: 4.866, Average Loss: 5.273, avg. samples / sec: 300.33
Iteration:   3820, Loss function: 5.119, Average Loss: 5.268, avg. samples / sec: 297.19
Iteration:   3840, Loss function: 4.807, Average Loss: 5.262, avg. samples / sec: 312.13
Iteration:   3860, Loss function: 5.084, Average Loss: 5.257, avg. samples / sec: 263.80
Iteration:   3880, Loss function: 4.933, Average Loss: 5.250, avg. samples / sec: 327.77
Iteration:   3900, Loss function: 5.000, Average Loss: 5.245, avg. samples / sec: 310.20
Iteration:   3920, Loss function: 5.152, Average Loss: 5.240, avg. samples / sec: 294.80
Iteration:   3940, Loss function: 4.956, Average Loss: 5.235, avg. samples / sec: 295.04
Iteration:   3960, Loss function: 5.172, Average Loss: 5.232, avg. samples / sec: 253.33
Iteration:   3980, Loss function: 4.839, Average Loss: 5.227, avg. samples / sec: 252.52
Iteration:   4000, Loss function: 5.173, Average Loss: 5.223, avg. samples / sec: 312.28
Iteration:   4020, Loss function: 4.996, Average Loss: 5.219, avg. samples / sec: 321.95
Iteration:   4040, Loss function: 5.009, Average Loss: 5.216, avg. samples / sec: 329.31
Iteration:   4060, Loss function: 5.060, Average Loss: 5.212, avg. samples / sec: 318.28
Iteration:   4080, Loss function: 5.013, Average Loss: 5.207, avg. samples / sec: 207.24
Iteration:   4100, Loss function: 4.982, Average Loss: 5.203, avg. samples / sec: 236.75
:::MLLOG {"namespace": "", "time_ms": 1639152130586, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152130588, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.965, Average Loss: 5.199, avg. samples / sec: 315.29
Iteration:   4140, Loss function: 4.980, Average Loss: 5.194, avg. samples / sec: 319.24
Iteration:   4160, Loss function: 4.862, Average Loss: 5.187, avg. samples / sec: 334.17
Iteration:   4180, Loss function: 4.940, Average Loss: 5.181, avg. samples / sec: 324.99
Iteration:   4200, Loss function: 4.729, Average Loss: 5.176, avg. samples / sec: 309.92
Iteration:   4220, Loss function: 4.977, Average Loss: 5.171, avg. samples / sec: 279.11
Iteration:   4240, Loss function: 4.863, Average Loss: 5.166, avg. samples / sec: 309.59
Iteration:   4260, Loss function: 5.041, Average Loss: 5.161, avg. samples / sec: 304.10
Iteration:   4280, Loss function: 5.175, Average Loss: 5.155, avg. samples / sec: 252.32
Iteration:   4300, Loss function: 4.900, Average Loss: 5.149, avg. samples / sec: 269.81
Iteration:   4320, Loss function: 4.840, Average Loss: 5.143, avg. samples / sec: 300.98
Iteration:   4340, Loss function: 4.957, Average Loss: 5.139, avg. samples / sec: 329.85
Iteration:   4360, Loss function: 4.826, Average Loss: 5.134, avg. samples / sec: 334.60
Iteration:   4380, Loss function: 5.036, Average Loss: 5.130, avg. samples / sec: 281.43
Iteration:   4400, Loss function: 4.889, Average Loss: 5.125, avg. samples / sec: 320.25
Iteration:   4420, Loss function: 5.008, Average Loss: 5.120, avg. samples / sec: 321.49
Iteration:   4440, Loss function: 5.008, Average Loss: 5.115, avg. samples / sec: 318.99
Iteration:   4460, Loss function: 5.081, Average Loss: 5.111, avg. samples / sec: 323.91
Iteration:   4480, Loss function: 4.949, Average Loss: 5.108, avg. samples / sec: 290.92
Iteration:   4500, Loss function: 4.723, Average Loss: 5.105, avg. samples / sec: 269.07
Iteration:   4520, Loss function: 4.684, Average Loss: 5.100, avg. samples / sec: 314.26
Iteration:   4540, Loss function: 5.217, Average Loss: 5.095, avg. samples / sec: 332.05
Iteration:   4560, Loss function: 4.812, Average Loss: 5.091, avg. samples / sec: 317.23
Iteration:   4580, Loss function: 4.740, Average Loss: 5.088, avg. samples / sec: 318.19
Iteration:   4600, Loss function: 4.938, Average Loss: 5.084, avg. samples / sec: 315.87
Iteration:   4620, Loss function: 4.773, Average Loss: 5.080, avg. samples / sec: 292.64
Iteration:   4640, Loss function: 4.613, Average Loss: 5.075, avg. samples / sec: 220.77
Iteration:   4660, Loss function: 4.815, Average Loss: 5.071, avg. samples / sec: 285.84
Iteration:   4680, Loss function: 5.166, Average Loss: 5.067, avg. samples / sec: 335.78
Iteration:   4700, Loss function: 4.755, Average Loss: 5.064, avg. samples / sec: 316.33
Iteration:   4720, Loss function: 4.609, Average Loss: 5.059, avg. samples / sec: 244.37
Iteration:   4740, Loss function: 4.650, Average Loss: 5.054, avg. samples / sec: 174.62
Iteration:   4760, Loss function: 4.835, Average Loss: 5.051, avg. samples / sec: 291.85
Iteration:   4780, Loss function: 5.096, Average Loss: 5.047, avg. samples / sec: 319.19
Iteration:   4800, Loss function: 5.142, Average Loss: 5.044, avg. samples / sec: 272.49
Iteration:   4820, Loss function: 4.781, Average Loss: 5.040, avg. samples / sec: 318.10
Iteration:   4840, Loss function: 5.009, Average Loss: 5.037, avg. samples / sec: 328.31
Iteration:   4860, Loss function: 4.737, Average Loss: 5.032, avg. samples / sec: 299.35
Iteration:   4880, Loss function: 5.140, Average Loss: 5.028, avg. samples / sec: 296.17
Iteration:   4900, Loss function: 4.489, Average Loss: 5.024, avg. samples / sec: 290.97
Iteration:   4920, Loss function: 4.814, Average Loss: 5.020, avg. samples / sec: 299.88
Iteration:   4940, Loss function: 4.822, Average Loss: 5.016, avg. samples / sec: 221.85
Iteration:   4960, Loss function: 4.712, Average Loss: 5.012, avg. samples / sec: 207.70
Iteration:   4980, Loss function: 4.633, Average Loss: 5.009, avg. samples / sec: 312.59
Iteration:   5000, Loss function: 4.839, Average Loss: 5.007, avg. samples / sec: 311.08
Iteration:   5020, Loss function: 5.106, Average Loss: 5.004, avg. samples / sec: 294.26
Iteration:   5040, Loss function: 4.836, Average Loss: 5.000, avg. samples / sec: 266.01
Iteration:   5060, Loss function: 4.909, Average Loss: 4.998, avg. samples / sec: 323.04
Iteration:   5080, Loss function: 4.616, Average Loss: 4.994, avg. samples / sec: 317.47
Iteration:   5100, Loss function: 4.701, Average Loss: 4.991, avg. samples / sec: 305.12
Iteration:   5120, Loss function: 4.619, Average Loss: 4.987, avg. samples / sec: 291.93
Iteration:   5140, Loss function: 5.036, Average Loss: 4.984, avg. samples / sec: 298.79
:::MLLOG {"namespace": "", "time_ms": 1639152532335, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 67.34 s
:::MLLOG {"namespace": "", "time_ms": 1639152599741, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152599789, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152599789, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.58s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.01s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10509
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21322
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09243
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19570
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13675
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20372
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10509 AP goal: 0.10000
Iteration:   5160, Loss function: 4.705, Average Loss: 4.978, avg. samples / sec: 30.68
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10509460974419214, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605650, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152605935, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152606
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:06 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:40 PM'
START TIMING RUN WAS 2021-12-10 03:32:40 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:06 PM'
ENDING TIMING RUN AT 2021-12-10 04:10:06 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
+ result=2246
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2246,nvidia,2021-12-10 03:32:40 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2246,nvidia,2021-12-10 03:32:40 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
