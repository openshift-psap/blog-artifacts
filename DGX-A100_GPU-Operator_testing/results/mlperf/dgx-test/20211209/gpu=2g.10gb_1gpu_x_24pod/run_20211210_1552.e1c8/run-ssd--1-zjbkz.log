+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-zjbkz.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-zjbkz.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-zjbkz.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-47302280-e35a-505b-880f-886d4b4260a1
+ MIG_MODE=1
Found 1 MIG instances: MIG-47302280-e35a-505b-880f-886d4b4260a1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-47302280-e35a-505b-880f-886d4b4260a1'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150359
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:39 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:39 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:39 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
Running in FAST mode
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:39 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-zjbkz to the sync file ...
run-ssd--1-zjbkz Found 14 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
Fri Dec 10 15:32:44 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150366316, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150366460, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3880041809, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3880041809
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150369336, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150369336, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150369342, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150473133, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150473133, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150474900, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150474901, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150475358, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150475359, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150475361, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.691, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.073, Average Loss: 0.456, avg. samples / sec: 268.79
Iteration:     40, Loss function: 20.719, Average Loss: 0.858, avg. samples / sec: 260.50
Iteration:     60, Loss function: 20.498, Average Loss: 1.248, avg. samples / sec: 263.84
Iteration:     80, Loss function: 20.162, Average Loss: 1.624, avg. samples / sec: 232.75
Iteration:    100, Loss function: 17.272, Average Loss: 1.968, avg. samples / sec: 245.06
Iteration:    120, Loss function: 11.878, Average Loss: 2.200, avg. samples / sec: 269.41
Iteration:    140, Loss function: 9.879, Average Loss: 2.359, avg. samples / sec: 238.85
Iteration:    160, Loss function: 9.007, Average Loss: 2.498, avg. samples / sec: 276.86
Iteration:    180, Loss function: 8.983, Average Loss: 2.626, avg. samples / sec: 261.60
Iteration:    200, Loss function: 8.643, Average Loss: 2.749, avg. samples / sec: 268.52
Iteration:    220, Loss function: 8.500, Average Loss: 2.867, avg. samples / sec: 287.25
Iteration:    240, Loss function: 8.741, Average Loss: 2.984, avg. samples / sec: 277.40
Iteration:    260, Loss function: 8.995, Average Loss: 3.101, avg. samples / sec: 302.09
Iteration:    280, Loss function: 8.624, Average Loss: 3.213, avg. samples / sec: 286.29
Iteration:    300, Loss function: 8.323, Average Loss: 3.317, avg. samples / sec: 293.54
Iteration:    320, Loss function: 8.340, Average Loss: 3.417, avg. samples / sec: 282.94
Iteration:    340, Loss function: 8.386, Average Loss: 3.515, avg. samples / sec: 330.30
Iteration:    360, Loss function: 7.998, Average Loss: 3.608, avg. samples / sec: 323.03
Iteration:    380, Loss function: 7.959, Average Loss: 3.696, avg. samples / sec: 305.92
Iteration:    400, Loss function: 8.015, Average Loss: 3.779, avg. samples / sec: 295.36
Iteration:    420, Loss function: 7.553, Average Loss: 3.860, avg. samples / sec: 241.31
Iteration:    440, Loss function: 7.783, Average Loss: 3.938, avg. samples / sec: 253.21
Iteration:    460, Loss function: 7.789, Average Loss: 4.013, avg. samples / sec: 254.08
Iteration:    480, Loss function: 7.577, Average Loss: 4.085, avg. samples / sec: 227.61
Iteration:    500, Loss function: 7.490, Average Loss: 4.155, avg. samples / sec: 237.38
Iteration:    520, Loss function: 7.396, Average Loss: 4.221, avg. samples / sec: 265.86
Iteration:    540, Loss function: 7.462, Average Loss: 4.286, avg. samples / sec: 192.07
Iteration:    560, Loss function: 7.305, Average Loss: 4.350, avg. samples / sec: 282.57
Iteration:    580, Loss function: 7.183, Average Loss: 4.410, avg. samples / sec: 300.10
Iteration:    600, Loss function: 7.174, Average Loss: 4.468, avg. samples / sec: 313.92
Iteration:    620, Loss function: 7.133, Average Loss: 4.523, avg. samples / sec: 309.22
Iteration:    640, Loss function: 6.811, Average Loss: 4.576, avg. samples / sec: 273.61
Iteration:    660, Loss function: 7.077, Average Loss: 4.627, avg. samples / sec: 280.30
Iteration:    680, Loss function: 7.025, Average Loss: 4.678, avg. samples / sec: 269.17
Iteration:    700, Loss function: 6.905, Average Loss: 4.724, avg. samples / sec: 261.62
Iteration:    720, Loss function: 6.964, Average Loss: 4.772, avg. samples / sec: 233.58
Iteration:    740, Loss function: 6.847, Average Loss: 4.816, avg. samples / sec: 226.72
Iteration:    760, Loss function: 7.093, Average Loss: 4.858, avg. samples / sec: 266.42
Iteration:    780, Loss function: 6.792, Average Loss: 4.900, avg. samples / sec: 264.03
Iteration:    800, Loss function: 7.052, Average Loss: 4.938, avg. samples / sec: 292.09
Iteration:    820, Loss function: 6.636, Average Loss: 4.975, avg. samples / sec: 312.77
Iteration:    840, Loss function: 6.710, Average Loss: 5.009, avg. samples / sec: 328.39
Iteration:    860, Loss function: 6.897, Average Loss: 5.044, avg. samples / sec: 299.52
Iteration:    880, Loss function: 6.794, Average Loss: 5.077, avg. samples / sec: 299.13
Iteration:    900, Loss function: 6.815, Average Loss: 5.107, avg. samples / sec: 333.73
Iteration:    920, Loss function: 6.659, Average Loss: 5.137, avg. samples / sec: 297.57
Iteration:    940, Loss function: 6.706, Average Loss: 5.165, avg. samples / sec: 320.42
Iteration:    960, Loss function: 6.330, Average Loss: 5.192, avg. samples / sec: 327.30
Iteration:    980, Loss function: 6.529, Average Loss: 5.219, avg. samples / sec: 319.80
Iteration:   1000, Loss function: 6.438, Average Loss: 5.243, avg. samples / sec: 324.87
Iteration:   1020, Loss function: 6.316, Average Loss: 5.266, avg. samples / sec: 304.82
:::MLLOG {"namespace": "", "time_ms": 1639150899326, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150899328, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.527, Average Loss: 5.289, avg. samples / sec: 328.39
Iteration:   1060, Loss function: 6.463, Average Loss: 5.312, avg. samples / sec: 321.21
Iteration:   1080, Loss function: 6.378, Average Loss: 5.334, avg. samples / sec: 330.64
Iteration:   1100, Loss function: 6.021, Average Loss: 5.353, avg. samples / sec: 322.33
Iteration:   1120, Loss function: 6.141, Average Loss: 5.372, avg. samples / sec: 321.32
Iteration:   1140, Loss function: 6.337, Average Loss: 5.390, avg. samples / sec: 331.02
Iteration:   1160, Loss function: 6.038, Average Loss: 5.407, avg. samples / sec: 313.41
Iteration:   1180, Loss function: 6.311, Average Loss: 5.423, avg. samples / sec: 326.29
Iteration:   1200, Loss function: 6.350, Average Loss: 5.438, avg. samples / sec: 318.96
Iteration:   1220, Loss function: 6.141, Average Loss: 5.453, avg. samples / sec: 252.33
Iteration:   1240, Loss function: 6.174, Average Loss: 5.465, avg. samples / sec: 324.26
Iteration:   1260, Loss function: 6.229, Average Loss: 5.477, avg. samples / sec: 277.88
Iteration:   1280, Loss function: 5.962, Average Loss: 5.489, avg. samples / sec: 323.04
Iteration:   1300, Loss function: 6.000, Average Loss: 5.501, avg. samples / sec: 308.75
Iteration:   1320, Loss function: 6.271, Average Loss: 5.513, avg. samples / sec: 271.27
Iteration:   1340, Loss function: 5.833, Average Loss: 5.522, avg. samples / sec: 331.50
Iteration:   1360, Loss function: 5.938, Average Loss: 5.532, avg. samples / sec: 266.86
Iteration:   1380, Loss function: 6.167, Average Loss: 5.542, avg. samples / sec: 335.32
Iteration:   1400, Loss function: 6.194, Average Loss: 5.550, avg. samples / sec: 297.51
Iteration:   1420, Loss function: 6.003, Average Loss: 5.559, avg. samples / sec: 297.27
Iteration:   1440, Loss function: 6.279, Average Loss: 5.567, avg. samples / sec: 319.53
Iteration:   1460, Loss function: 6.122, Average Loss: 5.576, avg. samples / sec: 267.77
Iteration:   1480, Loss function: 5.938, Average Loss: 5.583, avg. samples / sec: 311.32
Iteration:   1500, Loss function: 5.858, Average Loss: 5.591, avg. samples / sec: 318.84
Iteration:   1520, Loss function: 5.978, Average Loss: 5.597, avg. samples / sec: 307.32
Iteration:   1540, Loss function: 6.056, Average Loss: 5.601, avg. samples / sec: 273.47
Iteration:   1560, Loss function: 5.701, Average Loss: 5.605, avg. samples / sec: 261.72
Iteration:   1580, Loss function: 5.569, Average Loss: 5.610, avg. samples / sec: 331.55
Iteration:   1600, Loss function: 5.991, Average Loss: 5.614, avg. samples / sec: 339.10
Iteration:   1620, Loss function: 5.945, Average Loss: 5.619, avg. samples / sec: 328.99
Iteration:   1640, Loss function: 6.035, Average Loss: 5.623, avg. samples / sec: 329.15
Iteration:   1660, Loss function: 5.815, Average Loss: 5.626, avg. samples / sec: 331.47
Iteration:   1680, Loss function: 5.780, Average Loss: 5.630, avg. samples / sec: 321.02
Iteration:   1700, Loss function: 5.367, Average Loss: 5.633, avg. samples / sec: 318.62
Iteration:   1720, Loss function: 5.743, Average Loss: 5.635, avg. samples / sec: 319.88
Iteration:   1740, Loss function: 5.858, Average Loss: 5.637, avg. samples / sec: 281.79
Iteration:   1760, Loss function: 5.574, Average Loss: 5.638, avg. samples / sec: 231.72
Iteration:   1780, Loss function: 5.543, Average Loss: 5.639, avg. samples / sec: 251.61
Iteration:   1800, Loss function: 5.731, Average Loss: 5.641, avg. samples / sec: 256.69
Iteration:   1820, Loss function: 6.121, Average Loss: 5.642, avg. samples / sec: 273.82
Iteration:   1840, Loss function: 5.919, Average Loss: 5.643, avg. samples / sec: 234.13
Iteration:   1860, Loss function: 5.697, Average Loss: 5.643, avg. samples / sec: 208.71
Iteration:   1880, Loss function: 5.908, Average Loss: 5.645, avg. samples / sec: 313.76
Iteration:   1900, Loss function: 5.815, Average Loss: 5.645, avg. samples / sec: 306.35
Iteration:   1920, Loss function: 5.721, Average Loss: 5.646, avg. samples / sec: 330.08
Iteration:   1940, Loss function: 5.862, Average Loss: 5.645, avg. samples / sec: 322.72
Iteration:   1960, Loss function: 5.503, Average Loss: 5.643, avg. samples / sec: 328.64
Iteration:   1980, Loss function: 5.752, Average Loss: 5.643, avg. samples / sec: 252.19
Iteration:   2000, Loss function: 5.780, Average Loss: 5.642, avg. samples / sec: 243.16
Iteration:   2020, Loss function: 5.805, Average Loss: 5.640, avg. samples / sec: 248.25
Iteration:   2040, Loss function: 5.614, Average Loss: 5.639, avg. samples / sec: 308.61
:::MLLOG {"namespace": "", "time_ms": 1639151297196, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151297198, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.378, Average Loss: 5.636, avg. samples / sec: 287.80
Iteration:   2080, Loss function: 5.072, Average Loss: 5.634, avg. samples / sec: 322.48
Iteration:   2100, Loss function: 5.433, Average Loss: 5.631, avg. samples / sec: 294.11
Iteration:   2120, Loss function: 5.233, Average Loss: 5.628, avg. samples / sec: 275.10
Iteration:   2140, Loss function: 5.343, Average Loss: 5.625, avg. samples / sec: 313.57
Iteration:   2160, Loss function: 5.518, Average Loss: 5.622, avg. samples / sec: 289.93
Iteration:   2180, Loss function: 5.365, Average Loss: 5.620, avg. samples / sec: 290.28
Iteration:   2200, Loss function: 5.467, Average Loss: 5.616, avg. samples / sec: 324.51
Iteration:   2220, Loss function: 5.511, Average Loss: 5.614, avg. samples / sec: 331.67
Iteration:   2240, Loss function: 5.351, Average Loss: 5.611, avg. samples / sec: 251.14
Iteration:   2260, Loss function: 5.352, Average Loss: 5.607, avg. samples / sec: 279.41
Iteration:   2280, Loss function: 5.391, Average Loss: 5.605, avg. samples / sec: 268.93
Iteration:   2300, Loss function: 5.122, Average Loss: 5.601, avg. samples / sec: 264.07
Iteration:   2320, Loss function: 5.338, Average Loss: 5.599, avg. samples / sec: 289.30
Iteration:   2340, Loss function: 5.603, Average Loss: 5.596, avg. samples / sec: 328.35
Iteration:   2360, Loss function: 5.451, Average Loss: 5.593, avg. samples / sec: 320.59
Iteration:   2380, Loss function: 5.401, Average Loss: 5.589, avg. samples / sec: 232.56
Iteration:   2400, Loss function: 5.661, Average Loss: 5.586, avg. samples / sec: 288.91
Iteration:   2420, Loss function: 5.402, Average Loss: 5.582, avg. samples / sec: 318.76
Iteration:   2440, Loss function: 5.528, Average Loss: 5.579, avg. samples / sec: 324.42
Iteration:   2460, Loss function: 5.108, Average Loss: 5.575, avg. samples / sec: 333.17
Iteration:   2480, Loss function: 5.405, Average Loss: 5.572, avg. samples / sec: 335.27
Iteration:   2500, Loss function: 5.597, Average Loss: 5.568, avg. samples / sec: 333.72
Iteration:   2520, Loss function: 5.184, Average Loss: 5.563, avg. samples / sec: 274.85
Iteration:   2540, Loss function: 5.375, Average Loss: 5.560, avg. samples / sec: 298.45
Iteration:   2560, Loss function: 5.173, Average Loss: 5.554, avg. samples / sec: 308.21
Iteration:   2580, Loss function: 5.300, Average Loss: 5.551, avg. samples / sec: 303.74
Iteration:   2600, Loss function: 5.467, Average Loss: 5.548, avg. samples / sec: 285.41
Iteration:   2620, Loss function: 5.520, Average Loss: 5.544, avg. samples / sec: 320.68
Iteration:   2640, Loss function: 5.141, Average Loss: 5.542, avg. samples / sec: 270.39
Iteration:   2660, Loss function: 5.151, Average Loss: 5.538, avg. samples / sec: 278.23
Iteration:   2680, Loss function: 5.057, Average Loss: 5.534, avg. samples / sec: 259.70
Iteration:   2700, Loss function: 5.202, Average Loss: 5.530, avg. samples / sec: 316.22
Iteration:   2720, Loss function: 5.309, Average Loss: 5.526, avg. samples / sec: 325.70
Iteration:   2740, Loss function: 4.999, Average Loss: 5.521, avg. samples / sec: 315.22
Iteration:   2760, Loss function: 4.846, Average Loss: 5.516, avg. samples / sec: 333.24
Iteration:   2780, Loss function: 5.541, Average Loss: 5.513, avg. samples / sec: 303.76
Iteration:   2800, Loss function: 5.173, Average Loss: 5.508, avg. samples / sec: 320.32
Iteration:   2820, Loss function: 5.427, Average Loss: 5.504, avg. samples / sec: 310.88
Iteration:   2840, Loss function: 5.218, Average Loss: 5.499, avg. samples / sec: 337.77
Iteration:   2860, Loss function: 5.068, Average Loss: 5.493, avg. samples / sec: 322.22
Iteration:   2880, Loss function: 5.339, Average Loss: 5.489, avg. samples / sec: 328.56
Iteration:   2900, Loss function: 4.958, Average Loss: 5.484, avg. samples / sec: 320.99
Iteration:   2920, Loss function: 5.313, Average Loss: 5.478, avg. samples / sec: 321.02
Iteration:   2940, Loss function: 4.870, Average Loss: 5.474, avg. samples / sec: 331.13
Iteration:   2960, Loss function: 5.528, Average Loss: 5.469, avg. samples / sec: 330.61
Iteration:   2980, Loss function: 5.215, Average Loss: 5.466, avg. samples / sec: 251.18
Iteration:   3000, Loss function: 5.396, Average Loss: 5.461, avg. samples / sec: 316.08
Iteration:   3020, Loss function: 5.255, Average Loss: 5.454, avg. samples / sec: 290.68
Iteration:   3040, Loss function: 5.140, Average Loss: 5.449, avg. samples / sec: 306.91
Iteration:   3060, Loss function: 4.966, Average Loss: 5.444, avg. samples / sec: 311.84
Iteration:   3080, Loss function: 4.984, Average Loss: 5.439, avg. samples / sec: 293.68
:::MLLOG {"namespace": "", "time_ms": 1639151685741, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151685744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.217, Average Loss: 5.435, avg. samples / sec: 328.74
Iteration:   3120, Loss function: 5.143, Average Loss: 5.428, avg. samples / sec: 320.09
Iteration:   3140, Loss function: 5.088, Average Loss: 5.424, avg. samples / sec: 325.61
Iteration:   3160, Loss function: 5.537, Average Loss: 5.419, avg. samples / sec: 316.44
Iteration:   3180, Loss function: 5.000, Average Loss: 5.414, avg. samples / sec: 276.77
Iteration:   3200, Loss function: 5.368, Average Loss: 5.409, avg. samples / sec: 313.68
Iteration:   3220, Loss function: 5.035, Average Loss: 5.403, avg. samples / sec: 317.78
Iteration:   3240, Loss function: 5.245, Average Loss: 5.399, avg. samples / sec: 278.65
Iteration:   3260, Loss function: 5.182, Average Loss: 5.394, avg. samples / sec: 299.31
Iteration:   3280, Loss function: 4.823, Average Loss: 5.387, avg. samples / sec: 275.21
Iteration:   3300, Loss function: 4.924, Average Loss: 5.382, avg. samples / sec: 321.16
Iteration:   3320, Loss function: 5.001, Average Loss: 5.377, avg. samples / sec: 332.65
Iteration:   3340, Loss function: 5.019, Average Loss: 5.372, avg. samples / sec: 328.47
Iteration:   3360, Loss function: 5.120, Average Loss: 5.366, avg. samples / sec: 323.58
Iteration:   3380, Loss function: 5.156, Average Loss: 5.359, avg. samples / sec: 330.50
Iteration:   3400, Loss function: 4.899, Average Loss: 5.355, avg. samples / sec: 315.68
Iteration:   3420, Loss function: 5.051, Average Loss: 5.349, avg. samples / sec: 331.19
Iteration:   3440, Loss function: 4.946, Average Loss: 5.345, avg. samples / sec: 326.38
Iteration:   3460, Loss function: 5.060, Average Loss: 5.341, avg. samples / sec: 211.52
Iteration:   3480, Loss function: 5.291, Average Loss: 5.336, avg. samples / sec: 210.29
Iteration:   3500, Loss function: 5.227, Average Loss: 5.333, avg. samples / sec: 241.58
Iteration:   3520, Loss function: 5.024, Average Loss: 5.328, avg. samples / sec: 335.05
Iteration:   3540, Loss function: 5.083, Average Loss: 5.323, avg. samples / sec: 329.58
Iteration:   3560, Loss function: 4.857, Average Loss: 5.319, avg. samples / sec: 313.54
Iteration:   3580, Loss function: 5.163, Average Loss: 5.314, avg. samples / sec: 287.39
Iteration:   3600, Loss function: 5.037, Average Loss: 5.308, avg. samples / sec: 322.24
Iteration:   3620, Loss function: 4.713, Average Loss: 5.303, avg. samples / sec: 291.26
Iteration:   3640, Loss function: 4.854, Average Loss: 5.297, avg. samples / sec: 331.41
Iteration:   3660, Loss function: 5.187, Average Loss: 5.292, avg. samples / sec: 293.34
Iteration:   3680, Loss function: 5.221, Average Loss: 5.287, avg. samples / sec: 296.42
Iteration:   3700, Loss function: 5.019, Average Loss: 5.281, avg. samples / sec: 321.14
Iteration:   3720, Loss function: 4.977, Average Loss: 5.275, avg. samples / sec: 320.86
Iteration:   3740, Loss function: 5.228, Average Loss: 5.271, avg. samples / sec: 324.20
Iteration:   3760, Loss function: 5.128, Average Loss: 5.266, avg. samples / sec: 333.54
Iteration:   3780, Loss function: 5.174, Average Loss: 5.261, avg. samples / sec: 328.09
Iteration:   3800, Loss function: 4.956, Average Loss: 5.257, avg. samples / sec: 334.73
Iteration:   3820, Loss function: 5.255, Average Loss: 5.252, avg. samples / sec: 304.84
Iteration:   3840, Loss function: 4.842, Average Loss: 5.249, avg. samples / sec: 326.34
Iteration:   3860, Loss function: 4.825, Average Loss: 5.244, avg. samples / sec: 324.45
Iteration:   3880, Loss function: 4.859, Average Loss: 5.238, avg. samples / sec: 318.06
Iteration:   3900, Loss function: 5.063, Average Loss: 5.232, avg. samples / sec: 302.52
Iteration:   3920, Loss function: 5.203, Average Loss: 5.226, avg. samples / sec: 309.90
Iteration:   3940, Loss function: 4.951, Average Loss: 5.221, avg. samples / sec: 276.86
Iteration:   3960, Loss function: 4.953, Average Loss: 5.218, avg. samples / sec: 309.32
Iteration:   3980, Loss function: 4.797, Average Loss: 5.213, avg. samples / sec: 304.04
Iteration:   4000, Loss function: 5.174, Average Loss: 5.210, avg. samples / sec: 320.00
Iteration:   4020, Loss function: 5.041, Average Loss: 5.205, avg. samples / sec: 312.39
Iteration:   4040, Loss function: 5.047, Average Loss: 5.202, avg. samples / sec: 291.01
Iteration:   4060, Loss function: 5.167, Average Loss: 5.198, avg. samples / sec: 300.07
Iteration:   4080, Loss function: 5.221, Average Loss: 5.193, avg. samples / sec: 219.53
Iteration:   4100, Loss function: 5.081, Average Loss: 5.189, avg. samples / sec: 316.92
:::MLLOG {"namespace": "", "time_ms": 1639152075625, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152075638, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.907, Average Loss: 5.185, avg. samples / sec: 234.50
Iteration:   4140, Loss function: 4.989, Average Loss: 5.180, avg. samples / sec: 235.34
Iteration:   4160, Loss function: 4.824, Average Loss: 5.174, avg. samples / sec: 202.87
Iteration:   4180, Loss function: 4.916, Average Loss: 5.168, avg. samples / sec: 284.46
Iteration:   4200, Loss function: 4.815, Average Loss: 5.165, avg. samples / sec: 337.57
Iteration:   4220, Loss function: 4.789, Average Loss: 5.160, avg. samples / sec: 336.42
Iteration:   4240, Loss function: 4.844, Average Loss: 5.155, avg. samples / sec: 336.03
Iteration:   4260, Loss function: 5.186, Average Loss: 5.151, avg. samples / sec: 238.01
Iteration:   4280, Loss function: 5.163, Average Loss: 5.146, avg. samples / sec: 307.19
Iteration:   4300, Loss function: 4.784, Average Loss: 5.140, avg. samples / sec: 302.07
Iteration:   4320, Loss function: 4.748, Average Loss: 5.135, avg. samples / sec: 288.78
Iteration:   4340, Loss function: 4.821, Average Loss: 5.130, avg. samples / sec: 312.79
Iteration:   4360, Loss function: 4.800, Average Loss: 5.126, avg. samples / sec: 329.02
Iteration:   4380, Loss function: 4.971, Average Loss: 5.122, avg. samples / sec: 311.21
Iteration:   4400, Loss function: 5.021, Average Loss: 5.117, avg. samples / sec: 267.63
Iteration:   4420, Loss function: 4.898, Average Loss: 5.113, avg. samples / sec: 237.83
Iteration:   4440, Loss function: 4.870, Average Loss: 5.107, avg. samples / sec: 317.15
Iteration:   4460, Loss function: 5.022, Average Loss: 5.104, avg. samples / sec: 328.56
Iteration:   4480, Loss function: 5.197, Average Loss: 5.101, avg. samples / sec: 299.11
Iteration:   4500, Loss function: 4.868, Average Loss: 5.097, avg. samples / sec: 321.87
Iteration:   4520, Loss function: 4.768, Average Loss: 5.093, avg. samples / sec: 302.90
Iteration:   4540, Loss function: 5.035, Average Loss: 5.088, avg. samples / sec: 317.70
Iteration:   4560, Loss function: 4.737, Average Loss: 5.084, avg. samples / sec: 320.66
Iteration:   4580, Loss function: 4.726, Average Loss: 5.082, avg. samples / sec: 327.46
Iteration:   4600, Loss function: 4.884, Average Loss: 5.078, avg. samples / sec: 317.38
Iteration:   4620, Loss function: 4.785, Average Loss: 5.074, avg. samples / sec: 250.35
Iteration:   4640, Loss function: 4.704, Average Loss: 5.069, avg. samples / sec: 310.75
Iteration:   4660, Loss function: 4.675, Average Loss: 5.066, avg. samples / sec: 328.70
Iteration:   4680, Loss function: 5.252, Average Loss: 5.061, avg. samples / sec: 325.68
Iteration:   4700, Loss function: 4.742, Average Loss: 5.057, avg. samples / sec: 256.83
Iteration:   4720, Loss function: 4.894, Average Loss: 5.052, avg. samples / sec: 312.23
Iteration:   4740, Loss function: 4.973, Average Loss: 5.048, avg. samples / sec: 298.22
Iteration:   4760, Loss function: 4.651, Average Loss: 5.045, avg. samples / sec: 332.88
Iteration:   4780, Loss function: 4.971, Average Loss: 5.041, avg. samples / sec: 319.79
Iteration:   4800, Loss function: 4.946, Average Loss: 5.038, avg. samples / sec: 245.36
Iteration:   4820, Loss function: 4.637, Average Loss: 5.034, avg. samples / sec: 244.93
Iteration:   4840, Loss function: 5.127, Average Loss: 5.030, avg. samples / sec: 336.53
Iteration:   4860, Loss function: 4.813, Average Loss: 5.026, avg. samples / sec: 331.48
Iteration:   4880, Loss function: 5.290, Average Loss: 5.022, avg. samples / sec: 327.31
Iteration:   4900, Loss function: 4.412, Average Loss: 5.019, avg. samples / sec: 326.94
Iteration:   4920, Loss function: 4.703, Average Loss: 5.015, avg. samples / sec: 306.50
Iteration:   4940, Loss function: 4.702, Average Loss: 5.011, avg. samples / sec: 248.50
Iteration:   4960, Loss function: 4.668, Average Loss: 5.008, avg. samples / sec: 322.65
Iteration:   4980, Loss function: 4.710, Average Loss: 5.005, avg. samples / sec: 225.83
Iteration:   5000, Loss function: 4.956, Average Loss: 5.001, avg. samples / sec: 275.35
Iteration:   5020, Loss function: 5.058, Average Loss: 4.997, avg. samples / sec: 267.74
Iteration:   5040, Loss function: 4.903, Average Loss: 4.995, avg. samples / sec: 278.79
Iteration:   5060, Loss function: 4.728, Average Loss: 4.991, avg. samples / sec: 311.07
Iteration:   5080, Loss function: 4.569, Average Loss: 4.988, avg. samples / sec: 327.39
Iteration:   5100, Loss function: 4.814, Average Loss: 4.985, avg. samples / sec: 299.24
Iteration:   5120, Loss function: 4.604, Average Loss: 4.982, avg. samples / sec: 258.33
Iteration:   5140, Loss function: 4.903, Average Loss: 4.978, avg. samples / sec: 312.21
:::MLLOG {"namespace": "", "time_ms": 1639152476604, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 87.87 s
:::MLLOG {"namespace": "", "time_ms": 1639152564734, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152564740, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152564741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.778, Average Loss: 4.973, avg. samples / sec: 23.56
DONE (t=7.31s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10794
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21857
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09589
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19242
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13828
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21621
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21621
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10794 AP goal: 0.10000
Iteration:   5180, Loss function: 4.753, Average Loss: 4.969, avg. samples / sec: 327.02
:::MLLOG {"namespace": "", "time_ms": 1639152579075, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579076, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10794184963004934, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579076, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152582930, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:54 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:54 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150366316, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150366460, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3880041809, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3880041809
:::MLLOG {"namespace": "", "time_ms": 1639150369336, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150369336, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150369342, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150369343, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150473133, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150473133, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150474900, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150474901, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150475358, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150475359, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150475361, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.691, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.073, Average Loss: 0.456, avg. samples / sec: 268.79
Iteration:     40, Loss function: 20.719, Average Loss: 0.858, avg. samples / sec: 260.50
Iteration:     60, Loss function: 20.498, Average Loss: 1.248, avg. samples / sec: 263.84
Iteration:     80, Loss function: 20.162, Average Loss: 1.624, avg. samples / sec: 232.75
Iteration:    100, Loss function: 17.272, Average Loss: 1.968, avg. samples / sec: 245.06
Iteration:    120, Loss function: 11.878, Average Loss: 2.200, avg. samples / sec: 269.41
Iteration:    140, Loss function: 9.879, Average Loss: 2.359, avg. samples / sec: 238.85
Iteration:    160, Loss function: 9.007, Average Loss: 2.498, avg. samples / sec: 276.86
Iteration:    180, Loss function: 8.983, Average Loss: 2.626, avg. samples / sec: 261.60
Iteration:    200, Loss function: 8.643, Average Loss: 2.749, avg. samples / sec: 268.52
Iteration:    220, Loss function: 8.500, Average Loss: 2.867, avg. samples / sec: 287.25
Iteration:    240, Loss function: 8.741, Average Loss: 2.984, avg. samples / sec: 277.40
Iteration:    260, Loss function: 8.995, Average Loss: 3.101, avg. samples / sec: 302.09
Iteration:    280, Loss function: 8.624, Average Loss: 3.213, avg. samples / sec: 286.29
Iteration:    300, Loss function: 8.323, Average Loss: 3.317, avg. samples / sec: 293.54
Iteration:    320, Loss function: 8.340, Average Loss: 3.417, avg. samples / sec: 282.94
Iteration:    340, Loss function: 8.386, Average Loss: 3.515, avg. samples / sec: 330.30
Iteration:    360, Loss function: 7.998, Average Loss: 3.608, avg. samples / sec: 323.03
Iteration:    380, Loss function: 7.959, Average Loss: 3.696, avg. samples / sec: 305.92
Iteration:    400, Loss function: 8.015, Average Loss: 3.779, avg. samples / sec: 295.36
Iteration:    420, Loss function: 7.553, Average Loss: 3.860, avg. samples / sec: 241.31
Iteration:    440, Loss function: 7.783, Average Loss: 3.938, avg. samples / sec: 253.21
Iteration:    460, Loss function: 7.789, Average Loss: 4.013, avg. samples / sec: 254.08
Iteration:    480, Loss function: 7.577, Average Loss: 4.085, avg. samples / sec: 227.61
Iteration:    500, Loss function: 7.490, Average Loss: 4.155, avg. samples / sec: 237.38
Iteration:    520, Loss function: 7.396, Average Loss: 4.221, avg. samples / sec: 265.86
Iteration:    540, Loss function: 7.462, Average Loss: 4.286, avg. samples / sec: 192.07
Iteration:    560, Loss function: 7.305, Average Loss: 4.350, avg. samples / sec: 282.57
Iteration:    580, Loss function: 7.183, Average Loss: 4.410, avg. samples / sec: 300.10
Iteration:    600, Loss function: 7.174, Average Loss: 4.468, avg. samples / sec: 313.92
Iteration:    620, Loss function: 7.133, Average Loss: 4.523, avg. samples / sec: 309.22
Iteration:    640, Loss function: 6.811, Average Loss: 4.576, avg. samples / sec: 273.61
Iteration:    660, Loss function: 7.077, Average Loss: 4.627, avg. samples / sec: 280.30
Iteration:    680, Loss function: 7.025, Average Loss: 4.678, avg. samples / sec: 269.17
Iteration:    700, Loss function: 6.905, Average Loss: 4.724, avg. samples / sec: 261.62
Iteration:    720, Loss function: 6.964, Average Loss: 4.772, avg. samples / sec: 233.58
Iteration:    740, Loss function: 6.847, Average Loss: 4.816, avg. samples / sec: 226.72
Iteration:    760, Loss function: 7.093, Average Loss: 4.858, avg. samples / sec: 266.42
Iteration:    780, Loss function: 6.792, Average Loss: 4.900, avg. samples / sec: 264.03
Iteration:    800, Loss function: 7.052, Average Loss: 4.938, avg. samples / sec: 292.09
Iteration:    820, Loss function: 6.636, Average Loss: 4.975, avg. samples / sec: 312.77
Iteration:    840, Loss function: 6.710, Average Loss: 5.009, avg. samples / sec: 328.39
Iteration:    860, Loss function: 6.897, Average Loss: 5.044, avg. samples / sec: 299.52
Iteration:    880, Loss function: 6.794, Average Loss: 5.077, avg. samples / sec: 299.13
Iteration:    900, Loss function: 6.815, Average Loss: 5.107, avg. samples / sec: 333.73
Iteration:    920, Loss function: 6.659, Average Loss: 5.137, avg. samples / sec: 297.57
Iteration:    940, Loss function: 6.706, Average Loss: 5.165, avg. samples / sec: 320.42
Iteration:    960, Loss function: 6.330, Average Loss: 5.192, avg. samples / sec: 327.30
Iteration:    980, Loss function: 6.529, Average Loss: 5.219, avg. samples / sec: 319.80
Iteration:   1000, Loss function: 6.438, Average Loss: 5.243, avg. samples / sec: 324.87
Iteration:   1020, Loss function: 6.316, Average Loss: 5.266, avg. samples / sec: 304.82
:::MLLOG {"namespace": "", "time_ms": 1639150899326, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150899328, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.527, Average Loss: 5.289, avg. samples / sec: 328.39
Iteration:   1060, Loss function: 6.463, Average Loss: 5.312, avg. samples / sec: 321.21
Iteration:   1080, Loss function: 6.378, Average Loss: 5.334, avg. samples / sec: 330.64
Iteration:   1100, Loss function: 6.021, Average Loss: 5.353, avg. samples / sec: 322.33
Iteration:   1120, Loss function: 6.141, Average Loss: 5.372, avg. samples / sec: 321.32
Iteration:   1140, Loss function: 6.337, Average Loss: 5.390, avg. samples / sec: 331.02
Iteration:   1160, Loss function: 6.038, Average Loss: 5.407, avg. samples / sec: 313.41
Iteration:   1180, Loss function: 6.311, Average Loss: 5.423, avg. samples / sec: 326.29
Iteration:   1200, Loss function: 6.350, Average Loss: 5.438, avg. samples / sec: 318.96
Iteration:   1220, Loss function: 6.141, Average Loss: 5.453, avg. samples / sec: 252.33
Iteration:   1240, Loss function: 6.174, Average Loss: 5.465, avg. samples / sec: 324.26
Iteration:   1260, Loss function: 6.229, Average Loss: 5.477, avg. samples / sec: 277.88
Iteration:   1280, Loss function: 5.962, Average Loss: 5.489, avg. samples / sec: 323.04
Iteration:   1300, Loss function: 6.000, Average Loss: 5.501, avg. samples / sec: 308.75
Iteration:   1320, Loss function: 6.271, Average Loss: 5.513, avg. samples / sec: 271.27
Iteration:   1340, Loss function: 5.833, Average Loss: 5.522, avg. samples / sec: 331.50
Iteration:   1360, Loss function: 5.938, Average Loss: 5.532, avg. samples / sec: 266.86
Iteration:   1380, Loss function: 6.167, Average Loss: 5.542, avg. samples / sec: 335.32
Iteration:   1400, Loss function: 6.194, Average Loss: 5.550, avg. samples / sec: 297.51
Iteration:   1420, Loss function: 6.003, Average Loss: 5.559, avg. samples / sec: 297.27
Iteration:   1440, Loss function: 6.279, Average Loss: 5.567, avg. samples / sec: 319.53
Iteration:   1460, Loss function: 6.122, Average Loss: 5.576, avg. samples / sec: 267.77
Iteration:   1480, Loss function: 5.938, Average Loss: 5.583, avg. samples / sec: 311.32
Iteration:   1500, Loss function: 5.858, Average Loss: 5.591, avg. samples / sec: 318.84
Iteration:   1520, Loss function: 5.978, Average Loss: 5.597, avg. samples / sec: 307.32
Iteration:   1540, Loss function: 6.056, Average Loss: 5.601, avg. samples / sec: 273.47
Iteration:   1560, Loss function: 5.701, Average Loss: 5.605, avg. samples / sec: 261.72
Iteration:   1580, Loss function: 5.569, Average Loss: 5.610, avg. samples / sec: 331.55
Iteration:   1600, Loss function: 5.991, Average Loss: 5.614, avg. samples / sec: 339.10
Iteration:   1620, Loss function: 5.945, Average Loss: 5.619, avg. samples / sec: 328.99
Iteration:   1640, Loss function: 6.035, Average Loss: 5.623, avg. samples / sec: 329.15
Iteration:   1660, Loss function: 5.815, Average Loss: 5.626, avg. samples / sec: 331.47
Iteration:   1680, Loss function: 5.780, Average Loss: 5.630, avg. samples / sec: 321.02
Iteration:   1700, Loss function: 5.367, Average Loss: 5.633, avg. samples / sec: 318.62
Iteration:   1720, Loss function: 5.743, Average Loss: 5.635, avg. samples / sec: 319.88
Iteration:   1740, Loss function: 5.858, Average Loss: 5.637, avg. samples / sec: 281.79
Iteration:   1760, Loss function: 5.574, Average Loss: 5.638, avg. samples / sec: 231.72
Iteration:   1780, Loss function: 5.543, Average Loss: 5.639, avg. samples / sec: 251.61
Iteration:   1800, Loss function: 5.731, Average Loss: 5.641, avg. samples / sec: 256.69
Iteration:   1820, Loss function: 6.121, Average Loss: 5.642, avg. samples / sec: 273.82
Iteration:   1840, Loss function: 5.919, Average Loss: 5.643, avg. samples / sec: 234.13
Iteration:   1860, Loss function: 5.697, Average Loss: 5.643, avg. samples / sec: 208.71
Iteration:   1880, Loss function: 5.908, Average Loss: 5.645, avg. samples / sec: 313.76
Iteration:   1900, Loss function: 5.815, Average Loss: 5.645, avg. samples / sec: 306.35
Iteration:   1920, Loss function: 5.721, Average Loss: 5.646, avg. samples / sec: 330.08
Iteration:   1940, Loss function: 5.862, Average Loss: 5.645, avg. samples / sec: 322.72
Iteration:   1960, Loss function: 5.503, Average Loss: 5.643, avg. samples / sec: 328.64
Iteration:   1980, Loss function: 5.752, Average Loss: 5.643, avg. samples / sec: 252.19
Iteration:   2000, Loss function: 5.780, Average Loss: 5.642, avg. samples / sec: 243.16
Iteration:   2020, Loss function: 5.805, Average Loss: 5.640, avg. samples / sec: 248.25
Iteration:   2040, Loss function: 5.614, Average Loss: 5.639, avg. samples / sec: 308.61
:::MLLOG {"namespace": "", "time_ms": 1639151297196, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151297198, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.378, Average Loss: 5.636, avg. samples / sec: 287.80
Iteration:   2080, Loss function: 5.072, Average Loss: 5.634, avg. samples / sec: 322.48
Iteration:   2100, Loss function: 5.433, Average Loss: 5.631, avg. samples / sec: 294.11
Iteration:   2120, Loss function: 5.233, Average Loss: 5.628, avg. samples / sec: 275.10
Iteration:   2140, Loss function: 5.343, Average Loss: 5.625, avg. samples / sec: 313.57
Iteration:   2160, Loss function: 5.518, Average Loss: 5.622, avg. samples / sec: 289.93
Iteration:   2180, Loss function: 5.365, Average Loss: 5.620, avg. samples / sec: 290.28
Iteration:   2200, Loss function: 5.467, Average Loss: 5.616, avg. samples / sec: 324.51
Iteration:   2220, Loss function: 5.511, Average Loss: 5.614, avg. samples / sec: 331.67
Iteration:   2240, Loss function: 5.351, Average Loss: 5.611, avg. samples / sec: 251.14
Iteration:   2260, Loss function: 5.352, Average Loss: 5.607, avg. samples / sec: 279.41
Iteration:   2280, Loss function: 5.391, Average Loss: 5.605, avg. samples / sec: 268.93
Iteration:   2300, Loss function: 5.122, Average Loss: 5.601, avg. samples / sec: 264.07
Iteration:   2320, Loss function: 5.338, Average Loss: 5.599, avg. samples / sec: 289.30
Iteration:   2340, Loss function: 5.603, Average Loss: 5.596, avg. samples / sec: 328.35
Iteration:   2360, Loss function: 5.451, Average Loss: 5.593, avg. samples / sec: 320.59
Iteration:   2380, Loss function: 5.401, Average Loss: 5.589, avg. samples / sec: 232.56
Iteration:   2400, Loss function: 5.661, Average Loss: 5.586, avg. samples / sec: 288.91
Iteration:   2420, Loss function: 5.402, Average Loss: 5.582, avg. samples / sec: 318.76
Iteration:   2440, Loss function: 5.528, Average Loss: 5.579, avg. samples / sec: 324.42
Iteration:   2460, Loss function: 5.108, Average Loss: 5.575, avg. samples / sec: 333.17
Iteration:   2480, Loss function: 5.405, Average Loss: 5.572, avg. samples / sec: 335.27
Iteration:   2500, Loss function: 5.597, Average Loss: 5.568, avg. samples / sec: 333.72
Iteration:   2520, Loss function: 5.184, Average Loss: 5.563, avg. samples / sec: 274.85
Iteration:   2540, Loss function: 5.375, Average Loss: 5.560, avg. samples / sec: 298.45
Iteration:   2560, Loss function: 5.173, Average Loss: 5.554, avg. samples / sec: 308.21
Iteration:   2580, Loss function: 5.300, Average Loss: 5.551, avg. samples / sec: 303.74
Iteration:   2600, Loss function: 5.467, Average Loss: 5.548, avg. samples / sec: 285.41
Iteration:   2620, Loss function: 5.520, Average Loss: 5.544, avg. samples / sec: 320.68
Iteration:   2640, Loss function: 5.141, Average Loss: 5.542, avg. samples / sec: 270.39
Iteration:   2660, Loss function: 5.151, Average Loss: 5.538, avg. samples / sec: 278.23
Iteration:   2680, Loss function: 5.057, Average Loss: 5.534, avg. samples / sec: 259.70
Iteration:   2700, Loss function: 5.202, Average Loss: 5.530, avg. samples / sec: 316.22
Iteration:   2720, Loss function: 5.309, Average Loss: 5.526, avg. samples / sec: 325.70
Iteration:   2740, Loss function: 4.999, Average Loss: 5.521, avg. samples / sec: 315.22
Iteration:   2760, Loss function: 4.846, Average Loss: 5.516, avg. samples / sec: 333.24
Iteration:   2780, Loss function: 5.541, Average Loss: 5.513, avg. samples / sec: 303.76
Iteration:   2800, Loss function: 5.173, Average Loss: 5.508, avg. samples / sec: 320.32
Iteration:   2820, Loss function: 5.427, Average Loss: 5.504, avg. samples / sec: 310.88
Iteration:   2840, Loss function: 5.218, Average Loss: 5.499, avg. samples / sec: 337.77
Iteration:   2860, Loss function: 5.068, Average Loss: 5.493, avg. samples / sec: 322.22
Iteration:   2880, Loss function: 5.339, Average Loss: 5.489, avg. samples / sec: 328.56
Iteration:   2900, Loss function: 4.958, Average Loss: 5.484, avg. samples / sec: 320.99
Iteration:   2920, Loss function: 5.313, Average Loss: 5.478, avg. samples / sec: 321.02
Iteration:   2940, Loss function: 4.870, Average Loss: 5.474, avg. samples / sec: 331.13
Iteration:   2960, Loss function: 5.528, Average Loss: 5.469, avg. samples / sec: 330.61
Iteration:   2980, Loss function: 5.215, Average Loss: 5.466, avg. samples / sec: 251.18
Iteration:   3000, Loss function: 5.396, Average Loss: 5.461, avg. samples / sec: 316.08
Iteration:   3020, Loss function: 5.255, Average Loss: 5.454, avg. samples / sec: 290.68
Iteration:   3040, Loss function: 5.140, Average Loss: 5.449, avg. samples / sec: 306.91
Iteration:   3060, Loss function: 4.966, Average Loss: 5.444, avg. samples / sec: 311.84
Iteration:   3080, Loss function: 4.984, Average Loss: 5.439, avg. samples / sec: 293.68
:::MLLOG {"namespace": "", "time_ms": 1639151685741, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151685744, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.217, Average Loss: 5.435, avg. samples / sec: 328.74
Iteration:   3120, Loss function: 5.143, Average Loss: 5.428, avg. samples / sec: 320.09
Iteration:   3140, Loss function: 5.088, Average Loss: 5.424, avg. samples / sec: 325.61
Iteration:   3160, Loss function: 5.537, Average Loss: 5.419, avg. samples / sec: 316.44
Iteration:   3180, Loss function: 5.000, Average Loss: 5.414, avg. samples / sec: 276.77
Iteration:   3200, Loss function: 5.368, Average Loss: 5.409, avg. samples / sec: 313.68
Iteration:   3220, Loss function: 5.035, Average Loss: 5.403, avg. samples / sec: 317.78
Iteration:   3240, Loss function: 5.245, Average Loss: 5.399, avg. samples / sec: 278.65
Iteration:   3260, Loss function: 5.182, Average Loss: 5.394, avg. samples / sec: 299.31
Iteration:   3280, Loss function: 4.823, Average Loss: 5.387, avg. samples / sec: 275.21
Iteration:   3300, Loss function: 4.924, Average Loss: 5.382, avg. samples / sec: 321.16
Iteration:   3320, Loss function: 5.001, Average Loss: 5.377, avg. samples / sec: 332.65
Iteration:   3340, Loss function: 5.019, Average Loss: 5.372, avg. samples / sec: 328.47
Iteration:   3360, Loss function: 5.120, Average Loss: 5.366, avg. samples / sec: 323.58
Iteration:   3380, Loss function: 5.156, Average Loss: 5.359, avg. samples / sec: 330.50
Iteration:   3400, Loss function: 4.899, Average Loss: 5.355, avg. samples / sec: 315.68
Iteration:   3420, Loss function: 5.051, Average Loss: 5.349, avg. samples / sec: 331.19
Iteration:   3440, Loss function: 4.946, Average Loss: 5.345, avg. samples / sec: 326.38
Iteration:   3460, Loss function: 5.060, Average Loss: 5.341, avg. samples / sec: 211.52
Iteration:   3480, Loss function: 5.291, Average Loss: 5.336, avg. samples / sec: 210.29
Iteration:   3500, Loss function: 5.227, Average Loss: 5.333, avg. samples / sec: 241.58
Iteration:   3520, Loss function: 5.024, Average Loss: 5.328, avg. samples / sec: 335.05
Iteration:   3540, Loss function: 5.083, Average Loss: 5.323, avg. samples / sec: 329.58
Iteration:   3560, Loss function: 4.857, Average Loss: 5.319, avg. samples / sec: 313.54
Iteration:   3580, Loss function: 5.163, Average Loss: 5.314, avg. samples / sec: 287.39
Iteration:   3600, Loss function: 5.037, Average Loss: 5.308, avg. samples / sec: 322.24
Iteration:   3620, Loss function: 4.713, Average Loss: 5.303, avg. samples / sec: 291.26
Iteration:   3640, Loss function: 4.854, Average Loss: 5.297, avg. samples / sec: 331.41
Iteration:   3660, Loss function: 5.187, Average Loss: 5.292, avg. samples / sec: 293.34
Iteration:   3680, Loss function: 5.221, Average Loss: 5.287, avg. samples / sec: 296.42
Iteration:   3700, Loss function: 5.019, Average Loss: 5.281, avg. samples / sec: 321.14
Iteration:   3720, Loss function: 4.977, Average Loss: 5.275, avg. samples / sec: 320.86
Iteration:   3740, Loss function: 5.228, Average Loss: 5.271, avg. samples / sec: 324.20
Iteration:   3760, Loss function: 5.128, Average Loss: 5.266, avg. samples / sec: 333.54
Iteration:   3780, Loss function: 5.174, Average Loss: 5.261, avg. samples / sec: 328.09
Iteration:   3800, Loss function: 4.956, Average Loss: 5.257, avg. samples / sec: 334.73
Iteration:   3820, Loss function: 5.255, Average Loss: 5.252, avg. samples / sec: 304.84
Iteration:   3840, Loss function: 4.842, Average Loss: 5.249, avg. samples / sec: 326.34
Iteration:   3860, Loss function: 4.825, Average Loss: 5.244, avg. samples / sec: 324.45
Iteration:   3880, Loss function: 4.859, Average Loss: 5.238, avg. samples / sec: 318.06
Iteration:   3900, Loss function: 5.063, Average Loss: 5.232, avg. samples / sec: 302.52
Iteration:   3920, Loss function: 5.203, Average Loss: 5.226, avg. samples / sec: 309.90
Iteration:   3940, Loss function: 4.951, Average Loss: 5.221, avg. samples / sec: 276.86
Iteration:   3960, Loss function: 4.953, Average Loss: 5.218, avg. samples / sec: 309.32
Iteration:   3980, Loss function: 4.797, Average Loss: 5.213, avg. samples / sec: 304.04
Iteration:   4000, Loss function: 5.174, Average Loss: 5.210, avg. samples / sec: 320.00
Iteration:   4020, Loss function: 5.041, Average Loss: 5.205, avg. samples / sec: 312.39
Iteration:   4040, Loss function: 5.047, Average Loss: 5.202, avg. samples / sec: 291.01
Iteration:   4060, Loss function: 5.167, Average Loss: 5.198, avg. samples / sec: 300.07
Iteration:   4080, Loss function: 5.221, Average Loss: 5.193, avg. samples / sec: 219.53
Iteration:   4100, Loss function: 5.081, Average Loss: 5.189, avg. samples / sec: 316.92
:::MLLOG {"namespace": "", "time_ms": 1639152075625, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152075638, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.907, Average Loss: 5.185, avg. samples / sec: 234.50
Iteration:   4140, Loss function: 4.989, Average Loss: 5.180, avg. samples / sec: 235.34
Iteration:   4160, Loss function: 4.824, Average Loss: 5.174, avg. samples / sec: 202.87
Iteration:   4180, Loss function: 4.916, Average Loss: 5.168, avg. samples / sec: 284.46
Iteration:   4200, Loss function: 4.815, Average Loss: 5.165, avg. samples / sec: 337.57
Iteration:   4220, Loss function: 4.789, Average Loss: 5.160, avg. samples / sec: 336.42
Iteration:   4240, Loss function: 4.844, Average Loss: 5.155, avg. samples / sec: 336.03
Iteration:   4260, Loss function: 5.186, Average Loss: 5.151, avg. samples / sec: 238.01
Iteration:   4280, Loss function: 5.163, Average Loss: 5.146, avg. samples / sec: 307.19
Iteration:   4300, Loss function: 4.784, Average Loss: 5.140, avg. samples / sec: 302.07
Iteration:   4320, Loss function: 4.748, Average Loss: 5.135, avg. samples / sec: 288.78
Iteration:   4340, Loss function: 4.821, Average Loss: 5.130, avg. samples / sec: 312.79
Iteration:   4360, Loss function: 4.800, Average Loss: 5.126, avg. samples / sec: 329.02
Iteration:   4380, Loss function: 4.971, Average Loss: 5.122, avg. samples / sec: 311.21
Iteration:   4400, Loss function: 5.021, Average Loss: 5.117, avg. samples / sec: 267.63
Iteration:   4420, Loss function: 4.898, Average Loss: 5.113, avg. samples / sec: 237.83
Iteration:   4440, Loss function: 4.870, Average Loss: 5.107, avg. samples / sec: 317.15
Iteration:   4460, Loss function: 5.022, Average Loss: 5.104, avg. samples / sec: 328.56
Iteration:   4480, Loss function: 5.197, Average Loss: 5.101, avg. samples / sec: 299.11
Iteration:   4500, Loss function: 4.868, Average Loss: 5.097, avg. samples / sec: 321.87
Iteration:   4520, Loss function: 4.768, Average Loss: 5.093, avg. samples / sec: 302.90
Iteration:   4540, Loss function: 5.035, Average Loss: 5.088, avg. samples / sec: 317.70
Iteration:   4560, Loss function: 4.737, Average Loss: 5.084, avg. samples / sec: 320.66
Iteration:   4580, Loss function: 4.726, Average Loss: 5.082, avg. samples / sec: 327.46
Iteration:   4600, Loss function: 4.884, Average Loss: 5.078, avg. samples / sec: 317.38
Iteration:   4620, Loss function: 4.785, Average Loss: 5.074, avg. samples / sec: 250.35
Iteration:   4640, Loss function: 4.704, Average Loss: 5.069, avg. samples / sec: 310.75
Iteration:   4660, Loss function: 4.675, Average Loss: 5.066, avg. samples / sec: 328.70
Iteration:   4680, Loss function: 5.252, Average Loss: 5.061, avg. samples / sec: 325.68
Iteration:   4700, Loss function: 4.742, Average Loss: 5.057, avg. samples / sec: 256.83
Iteration:   4720, Loss function: 4.894, Average Loss: 5.052, avg. samples / sec: 312.23
Iteration:   4740, Loss function: 4.973, Average Loss: 5.048, avg. samples / sec: 298.22
Iteration:   4760, Loss function: 4.651, Average Loss: 5.045, avg. samples / sec: 332.88
Iteration:   4780, Loss function: 4.971, Average Loss: 5.041, avg. samples / sec: 319.79
Iteration:   4800, Loss function: 4.946, Average Loss: 5.038, avg. samples / sec: 245.36
Iteration:   4820, Loss function: 4.637, Average Loss: 5.034, avg. samples / sec: 244.93
Iteration:   4840, Loss function: 5.127, Average Loss: 5.030, avg. samples / sec: 336.53
Iteration:   4860, Loss function: 4.813, Average Loss: 5.026, avg. samples / sec: 331.48
Iteration:   4880, Loss function: 5.290, Average Loss: 5.022, avg. samples / sec: 327.31
Iteration:   4900, Loss function: 4.412, Average Loss: 5.019, avg. samples / sec: 326.94
Iteration:   4920, Loss function: 4.703, Average Loss: 5.015, avg. samples / sec: 306.50
Iteration:   4940, Loss function: 4.702, Average Loss: 5.011, avg. samples / sec: 248.50
Iteration:   4960, Loss function: 4.668, Average Loss: 5.008, avg. samples / sec: 322.65
Iteration:   4980, Loss function: 4.710, Average Loss: 5.005, avg. samples / sec: 225.83
Iteration:   5000, Loss function: 4.956, Average Loss: 5.001, avg. samples / sec: 275.35
Iteration:   5020, Loss function: 5.058, Average Loss: 4.997, avg. samples / sec: 267.74
Iteration:   5040, Loss function: 4.903, Average Loss: 4.995, avg. samples / sec: 278.79
Iteration:   5060, Loss function: 4.728, Average Loss: 4.991, avg. samples / sec: 311.07
Iteration:   5080, Loss function: 4.569, Average Loss: 4.988, avg. samples / sec: 327.39
Iteration:   5100, Loss function: 4.814, Average Loss: 4.985, avg. samples / sec: 299.24
Iteration:   5120, Loss function: 4.604, Average Loss: 4.982, avg. samples / sec: 258.33
Iteration:   5140, Loss function: 4.903, Average Loss: 4.978, avg. samples / sec: 312.21
:::MLLOG {"namespace": "", "time_ms": 1639152476604, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 87.87 s
:::MLLOG {"namespace": "", "time_ms": 1639152564734, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152564740, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152564741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.778, Average Loss: 4.973, avg. samples / sec: 23.56
DONE (t=7.31s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10794
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21857
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09589
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19242
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13828
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21621
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21621
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10794 AP goal: 0.10000
Iteration:   5180, Loss function: 4.753, Average Loss: 4.969, avg. samples / sec: 327.02
:::MLLOG {"namespace": "", "time_ms": 1639152579075, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579076, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10794184963004934, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579076, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152582930, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152594
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:54 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:39 PM'
START TIMING RUN WAS 2021-12-10 03:32:39 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:54 PM'
ENDING TIMING RUN AT 2021-12-10 04:09:54 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
+ result=2235
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2235,nvidia,2021-12-10 03:32:39 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2235,nvidia,2021-12-10 03:32:39 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
