+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-29cpq.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-29cpq.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-29cpq.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-d0146f40-d527-5cf7-b686-12fa40555093
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-d0146f40-d527-5cf7-b686-12fa40555093'
Found 1 MIG instances: MIG-d0146f40-d527-5cf7-b686-12fa40555093
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150356
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:36 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:36 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:36 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:36 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-29cpq to the sync file ...
run-ssd--1-29cpq Found 5 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
run-ssd--1-29cpq Found 23 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
    19	run-ssd--1-lh68c
    20	run-ssd--1-477tc
    21	run-ssd--1-8dgvk
    22	run-ssd--1-n6g64
    23	run-ssd--1-tph8l
Fri Dec 10 15:32:46 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150370076, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150370532, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1765757328, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1765757328
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150374907, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374908, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150476884, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150476885, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150483011, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483012, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150483422, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150483423, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150483425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.351, Average Loss: 0.022, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.079, Average Loss: 0.451, avg. samples / sec: 189.76
Iteration:     40, Loss function: 20.597, Average Loss: 0.853, avg. samples / sec: 246.68
Iteration:     60, Loss function: 20.305, Average Loss: 1.243, avg. samples / sec: 242.61
Iteration:     80, Loss function: 19.915, Average Loss: 1.615, avg. samples / sec: 249.07
Iteration:    100, Loss function: 15.047, Average Loss: 1.937, avg. samples / sec: 255.27
Iteration:    120, Loss function: 11.107, Average Loss: 2.142, avg. samples / sec: 255.04
Iteration:    140, Loss function: 9.542, Average Loss: 2.298, avg. samples / sec: 262.73
Iteration:    160, Loss function: 8.924, Average Loss: 2.437, avg. samples / sec: 264.78
Iteration:    180, Loss function: 8.991, Average Loss: 2.566, avg. samples / sec: 257.85
Iteration:    200, Loss function: 8.711, Average Loss: 2.691, avg. samples / sec: 261.19
Iteration:    220, Loss function: 8.755, Average Loss: 2.812, avg. samples / sec: 267.94
Iteration:    240, Loss function: 8.853, Average Loss: 2.936, avg. samples / sec: 297.28
Iteration:    260, Loss function: 8.724, Average Loss: 3.050, avg. samples / sec: 282.33
Iteration:    280, Loss function: 8.256, Average Loss: 3.159, avg. samples / sec: 311.37
Iteration:    300, Loss function: 8.320, Average Loss: 3.262, avg. samples / sec: 289.29
Iteration:    320, Loss function: 8.272, Average Loss: 3.362, avg. samples / sec: 230.90
Iteration:    340, Loss function: 8.267, Average Loss: 3.460, avg. samples / sec: 311.06
Iteration:    360, Loss function: 7.986, Average Loss: 3.552, avg. samples / sec: 273.44
Iteration:    380, Loss function: 7.977, Average Loss: 3.643, avg. samples / sec: 292.41
Iteration:    400, Loss function: 8.012, Average Loss: 3.728, avg. samples / sec: 235.96
Iteration:    420, Loss function: 7.588, Average Loss: 3.809, avg. samples / sec: 217.42
Iteration:    440, Loss function: 7.844, Average Loss: 3.887, avg. samples / sec: 254.27
Iteration:    460, Loss function: 7.865, Average Loss: 3.964, avg. samples / sec: 267.35
Iteration:    480, Loss function: 7.417, Average Loss: 4.038, avg. samples / sec: 306.72
Iteration:    500, Loss function: 7.516, Average Loss: 4.109, avg. samples / sec: 326.34
Iteration:    520, Loss function: 7.579, Average Loss: 4.177, avg. samples / sec: 305.79
Iteration:    540, Loss function: 7.559, Average Loss: 4.242, avg. samples / sec: 334.24
Iteration:    560, Loss function: 7.184, Average Loss: 4.306, avg. samples / sec: 324.29
Iteration:    580, Loss function: 7.178, Average Loss: 4.367, avg. samples / sec: 242.81
Iteration:    600, Loss function: 7.395, Average Loss: 4.426, avg. samples / sec: 266.00
Iteration:    620, Loss function: 6.942, Average Loss: 4.481, avg. samples / sec: 311.13
Iteration:    640, Loss function: 6.986, Average Loss: 4.536, avg. samples / sec: 266.92
Iteration:    660, Loss function: 7.192, Average Loss: 4.589, avg. samples / sec: 309.04
Iteration:    680, Loss function: 7.239, Average Loss: 4.640, avg. samples / sec: 315.00
Iteration:    700, Loss function: 7.060, Average Loss: 4.688, avg. samples / sec: 260.10
Iteration:    720, Loss function: 7.019, Average Loss: 4.737, avg. samples / sec: 221.20
Iteration:    740, Loss function: 6.903, Average Loss: 4.782, avg. samples / sec: 296.02
Iteration:    760, Loss function: 6.928, Average Loss: 4.825, avg. samples / sec: 231.89
Iteration:    780, Loss function: 6.901, Average Loss: 4.867, avg. samples / sec: 304.84
Iteration:    800, Loss function: 7.168, Average Loss: 4.906, avg. samples / sec: 318.29
Iteration:    820, Loss function: 6.713, Average Loss: 4.944, avg. samples / sec: 317.04
Iteration:    840, Loss function: 6.723, Average Loss: 4.980, avg. samples / sec: 325.62
Iteration:    860, Loss function: 6.670, Average Loss: 5.014, avg. samples / sec: 303.01
Iteration:    880, Loss function: 6.794, Average Loss: 5.048, avg. samples / sec: 224.34
Iteration:    900, Loss function: 6.815, Average Loss: 5.078, avg. samples / sec: 278.50
Iteration:    920, Loss function: 6.637, Average Loss: 5.107, avg. samples / sec: 316.51
Iteration:    940, Loss function: 6.843, Average Loss: 5.136, avg. samples / sec: 273.21
Iteration:    960, Loss function: 6.528, Average Loss: 5.164, avg. samples / sec: 270.37
Iteration:    980, Loss function: 6.373, Average Loss: 5.191, avg. samples / sec: 330.73
Iteration:   1000, Loss function: 6.576, Average Loss: 5.217, avg. samples / sec: 282.15
Iteration:   1020, Loss function: 6.289, Average Loss: 5.242, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639150913315, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150913316, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.518, Average Loss: 5.266, avg. samples / sec: 318.80
Iteration:   1060, Loss function: 6.344, Average Loss: 5.289, avg. samples / sec: 334.28
Iteration:   1080, Loss function: 6.413, Average Loss: 5.310, avg. samples / sec: 331.25
Iteration:   1100, Loss function: 6.109, Average Loss: 5.329, avg. samples / sec: 323.08
Iteration:   1120, Loss function: 6.246, Average Loss: 5.348, avg. samples / sec: 310.91
Iteration:   1140, Loss function: 6.329, Average Loss: 5.367, avg. samples / sec: 330.34
Iteration:   1160, Loss function: 6.134, Average Loss: 5.384, avg. samples / sec: 329.43
Iteration:   1180, Loss function: 6.385, Average Loss: 5.401, avg. samples / sec: 336.67
Iteration:   1200, Loss function: 6.220, Average Loss: 5.418, avg. samples / sec: 302.41
Iteration:   1220, Loss function: 6.223, Average Loss: 5.433, avg. samples / sec: 304.52
Iteration:   1240, Loss function: 6.147, Average Loss: 5.446, avg. samples / sec: 231.74
Iteration:   1260, Loss function: 6.098, Average Loss: 5.458, avg. samples / sec: 269.18
Iteration:   1280, Loss function: 5.930, Average Loss: 5.470, avg. samples / sec: 303.53
Iteration:   1300, Loss function: 6.049, Average Loss: 5.483, avg. samples / sec: 325.53
Iteration:   1320, Loss function: 6.258, Average Loss: 5.496, avg. samples / sec: 321.73
Iteration:   1340, Loss function: 5.863, Average Loss: 5.506, avg. samples / sec: 327.19
Iteration:   1360, Loss function: 5.894, Average Loss: 5.518, avg. samples / sec: 338.44
Iteration:   1380, Loss function: 6.143, Average Loss: 5.527, avg. samples / sec: 297.90
Iteration:   1400, Loss function: 6.301, Average Loss: 5.536, avg. samples / sec: 323.43
Iteration:   1420, Loss function: 5.952, Average Loss: 5.545, avg. samples / sec: 274.53
Iteration:   1440, Loss function: 6.482, Average Loss: 5.553, avg. samples / sec: 265.97
Iteration:   1460, Loss function: 6.042, Average Loss: 5.561, avg. samples / sec: 217.55
Iteration:   1480, Loss function: 5.898, Average Loss: 5.569, avg. samples / sec: 311.23
Iteration:   1500, Loss function: 6.194, Average Loss: 5.576, avg. samples / sec: 336.96
Iteration:   1520, Loss function: 5.964, Average Loss: 5.582, avg. samples / sec: 331.83
Iteration:   1540, Loss function: 5.996, Average Loss: 5.586, avg. samples / sec: 317.44
Iteration:   1560, Loss function: 5.706, Average Loss: 5.590, avg. samples / sec: 317.29
Iteration:   1580, Loss function: 5.640, Average Loss: 5.595, avg. samples / sec: 320.12
Iteration:   1600, Loss function: 6.149, Average Loss: 5.600, avg. samples / sec: 209.11
Iteration:   1620, Loss function: 5.843, Average Loss: 5.605, avg. samples / sec: 271.35
Iteration:   1640, Loss function: 5.939, Average Loss: 5.608, avg. samples / sec: 228.34
Iteration:   1660, Loss function: 5.770, Average Loss: 5.611, avg. samples / sec: 317.60
Iteration:   1680, Loss function: 5.772, Average Loss: 5.614, avg. samples / sec: 328.30
Iteration:   1700, Loss function: 5.461, Average Loss: 5.617, avg. samples / sec: 335.12
Iteration:   1720, Loss function: 5.630, Average Loss: 5.619, avg. samples / sec: 333.66
Iteration:   1740, Loss function: 5.798, Average Loss: 5.621, avg. samples / sec: 327.72
Iteration:   1760, Loss function: 5.589, Average Loss: 5.623, avg. samples / sec: 295.53
Iteration:   1780, Loss function: 5.745, Average Loss: 5.624, avg. samples / sec: 320.46
Iteration:   1800, Loss function: 5.710, Average Loss: 5.627, avg. samples / sec: 331.77
Iteration:   1820, Loss function: 5.928, Average Loss: 5.628, avg. samples / sec: 318.06
Iteration:   1840, Loss function: 5.822, Average Loss: 5.630, avg. samples / sec: 309.93
Iteration:   1860, Loss function: 5.724, Average Loss: 5.629, avg. samples / sec: 308.40
Iteration:   1880, Loss function: 5.751, Average Loss: 5.630, avg. samples / sec: 287.11
Iteration:   1900, Loss function: 5.894, Average Loss: 5.631, avg. samples / sec: 270.66
Iteration:   1920, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 299.13
Iteration:   1940, Loss function: 5.826, Average Loss: 5.630, avg. samples / sec: 262.79
Iteration:   1960, Loss function: 5.640, Average Loss: 5.629, avg. samples / sec: 269.53
Iteration:   1980, Loss function: 5.807, Average Loss: 5.629, avg. samples / sec: 332.50
Iteration:   2000, Loss function: 5.614, Average Loss: 5.629, avg. samples / sec: 309.96
Iteration:   2020, Loss function: 5.503, Average Loss: 5.627, avg. samples / sec: 317.51
Iteration:   2040, Loss function: 5.602, Average Loss: 5.627, avg. samples / sec: 317.95
:::MLLOG {"namespace": "", "time_ms": 1639151303132, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151303168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.428, Average Loss: 5.625, avg. samples / sec: 314.53
Iteration:   2080, Loss function: 5.088, Average Loss: 5.622, avg. samples / sec: 316.71
Iteration:   2100, Loss function: 5.393, Average Loss: 5.620, avg. samples / sec: 306.32
Iteration:   2120, Loss function: 5.259, Average Loss: 5.617, avg. samples / sec: 333.90
Iteration:   2140, Loss function: 5.577, Average Loss: 5.614, avg. samples / sec: 328.08
Iteration:   2160, Loss function: 5.373, Average Loss: 5.611, avg. samples / sec: 326.14
Iteration:   2180, Loss function: 5.433, Average Loss: 5.609, avg. samples / sec: 262.74
Iteration:   2200, Loss function: 5.479, Average Loss: 5.605, avg. samples / sec: 271.26
Iteration:   2220, Loss function: 5.492, Average Loss: 5.603, avg. samples / sec: 278.12
Iteration:   2240, Loss function: 5.354, Average Loss: 5.600, avg. samples / sec: 323.53
Iteration:   2260, Loss function: 5.418, Average Loss: 5.597, avg. samples / sec: 288.65
Iteration:   2280, Loss function: 5.240, Average Loss: 5.594, avg. samples / sec: 244.78
Iteration:   2300, Loss function: 5.096, Average Loss: 5.591, avg. samples / sec: 320.93
Iteration:   2320, Loss function: 5.359, Average Loss: 5.589, avg. samples / sec: 304.74
Iteration:   2340, Loss function: 5.430, Average Loss: 5.586, avg. samples / sec: 277.90
Iteration:   2360, Loss function: 5.430, Average Loss: 5.582, avg. samples / sec: 287.64
Iteration:   2380, Loss function: 5.322, Average Loss: 5.579, avg. samples / sec: 298.27
Iteration:   2400, Loss function: 5.424, Average Loss: 5.575, avg. samples / sec: 280.99
Iteration:   2420, Loss function: 5.575, Average Loss: 5.571, avg. samples / sec: 241.63
Iteration:   2440, Loss function: 5.374, Average Loss: 5.567, avg. samples / sec: 293.68
Iteration:   2460, Loss function: 5.119, Average Loss: 5.563, avg. samples / sec: 322.78
Iteration:   2480, Loss function: 5.456, Average Loss: 5.560, avg. samples / sec: 338.10
Iteration:   2500, Loss function: 5.314, Average Loss: 5.555, avg. samples / sec: 332.65
Iteration:   2520, Loss function: 5.220, Average Loss: 5.550, avg. samples / sec: 307.86
Iteration:   2540, Loss function: 5.372, Average Loss: 5.546, avg. samples / sec: 313.19
Iteration:   2560, Loss function: 5.317, Average Loss: 5.543, avg. samples / sec: 326.27
Iteration:   2580, Loss function: 5.354, Average Loss: 5.538, avg. samples / sec: 299.08
Iteration:   2600, Loss function: 5.266, Average Loss: 5.535, avg. samples / sec: 326.20
Iteration:   2620, Loss function: 5.349, Average Loss: 5.531, avg. samples / sec: 300.05
Iteration:   2640, Loss function: 5.143, Average Loss: 5.527, avg. samples / sec: 248.74
Iteration:   2660, Loss function: 5.089, Average Loss: 5.524, avg. samples / sec: 211.72
Iteration:   2680, Loss function: 5.189, Average Loss: 5.521, avg. samples / sec: 260.93
Iteration:   2700, Loss function: 5.135, Average Loss: 5.516, avg. samples / sec: 241.95
Iteration:   2720, Loss function: 5.270, Average Loss: 5.512, avg. samples / sec: 266.01
Iteration:   2740, Loss function: 5.072, Average Loss: 5.507, avg. samples / sec: 318.61
Iteration:   2760, Loss function: 4.955, Average Loss: 5.501, avg. samples / sec: 322.33
Iteration:   2780, Loss function: 5.517, Average Loss: 5.497, avg. samples / sec: 285.93
Iteration:   2800, Loss function: 5.197, Average Loss: 5.493, avg. samples / sec: 332.93
Iteration:   2820, Loss function: 5.308, Average Loss: 5.489, avg. samples / sec: 328.98
Iteration:   2840, Loss function: 5.133, Average Loss: 5.484, avg. samples / sec: 307.72
Iteration:   2860, Loss function: 5.139, Average Loss: 5.479, avg. samples / sec: 318.00
Iteration:   2880, Loss function: 5.333, Average Loss: 5.474, avg. samples / sec: 332.51
Iteration:   2900, Loss function: 5.028, Average Loss: 5.469, avg. samples / sec: 294.06
Iteration:   2920, Loss function: 5.036, Average Loss: 5.463, avg. samples / sec: 331.14
Iteration:   2940, Loss function: 4.991, Average Loss: 5.459, avg. samples / sec: 330.09
Iteration:   2960, Loss function: 5.378, Average Loss: 5.454, avg. samples / sec: 321.92
Iteration:   2980, Loss function: 5.066, Average Loss: 5.451, avg. samples / sec: 279.29
Iteration:   3000, Loss function: 5.414, Average Loss: 5.446, avg. samples / sec: 286.50
Iteration:   3020, Loss function: 5.372, Average Loss: 5.440, avg. samples / sec: 319.89
Iteration:   3040, Loss function: 5.123, Average Loss: 5.436, avg. samples / sec: 317.90
Iteration:   3060, Loss function: 5.104, Average Loss: 5.429, avg. samples / sec: 291.40
Iteration:   3080, Loss function: 4.866, Average Loss: 5.423, avg. samples / sec: 332.78
:::MLLOG {"namespace": "", "time_ms": 1639151696981, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151696997, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.068, Average Loss: 5.419, avg. samples / sec: 324.63
Iteration:   3120, Loss function: 5.063, Average Loss: 5.413, avg. samples / sec: 322.63
Iteration:   3140, Loss function: 5.212, Average Loss: 5.408, avg. samples / sec: 338.62
Iteration:   3160, Loss function: 5.546, Average Loss: 5.404, avg. samples / sec: 327.31
Iteration:   3180, Loss function: 5.016, Average Loss: 5.400, avg. samples / sec: 327.55
Iteration:   3200, Loss function: 5.113, Average Loss: 5.394, avg. samples / sec: 330.56
Iteration:   3220, Loss function: 5.177, Average Loss: 5.389, avg. samples / sec: 323.58
Iteration:   3240, Loss function: 5.188, Average Loss: 5.384, avg. samples / sec: 336.85
Iteration:   3260, Loss function: 4.842, Average Loss: 5.378, avg. samples / sec: 307.02
Iteration:   3280, Loss function: 4.787, Average Loss: 5.372, avg. samples / sec: 195.59
Iteration:   3300, Loss function: 4.711, Average Loss: 5.367, avg. samples / sec: 296.02
Iteration:   3320, Loss function: 4.882, Average Loss: 5.362, avg. samples / sec: 268.71
Iteration:   3340, Loss function: 4.988, Average Loss: 5.357, avg. samples / sec: 285.30
Iteration:   3360, Loss function: 5.170, Average Loss: 5.350, avg. samples / sec: 301.93
Iteration:   3380, Loss function: 5.153, Average Loss: 5.343, avg. samples / sec: 276.98
Iteration:   3400, Loss function: 4.818, Average Loss: 5.338, avg. samples / sec: 329.79
Iteration:   3420, Loss function: 5.208, Average Loss: 5.333, avg. samples / sec: 311.15
Iteration:   3440, Loss function: 5.101, Average Loss: 5.328, avg. samples / sec: 336.17
Iteration:   3460, Loss function: 5.374, Average Loss: 5.323, avg. samples / sec: 336.68
Iteration:   3480, Loss function: 5.250, Average Loss: 5.318, avg. samples / sec: 325.56
Iteration:   3500, Loss function: 5.351, Average Loss: 5.315, avg. samples / sec: 310.49
Iteration:   3520, Loss function: 5.158, Average Loss: 5.312, avg. samples / sec: 333.43
Iteration:   3540, Loss function: 4.845, Average Loss: 5.306, avg. samples / sec: 328.10
Iteration:   3560, Loss function: 4.989, Average Loss: 5.303, avg. samples / sec: 321.32
Iteration:   3580, Loss function: 4.997, Average Loss: 5.298, avg. samples / sec: 310.36
Iteration:   3600, Loss function: 5.125, Average Loss: 5.293, avg. samples / sec: 338.96
Iteration:   3620, Loss function: 4.756, Average Loss: 5.289, avg. samples / sec: 319.58
Iteration:   3640, Loss function: 4.702, Average Loss: 5.284, avg. samples / sec: 338.64
Iteration:   3660, Loss function: 5.098, Average Loss: 5.279, avg. samples / sec: 332.73
Iteration:   3680, Loss function: 5.119, Average Loss: 5.274, avg. samples / sec: 336.06
Iteration:   3700, Loss function: 4.892, Average Loss: 5.269, avg. samples / sec: 322.29
Iteration:   3720, Loss function: 4.995, Average Loss: 5.262, avg. samples / sec: 295.12
Iteration:   3740, Loss function: 5.208, Average Loss: 5.258, avg. samples / sec: 270.96
Iteration:   3760, Loss function: 4.981, Average Loss: 5.254, avg. samples / sec: 255.59
Iteration:   3780, Loss function: 4.965, Average Loss: 5.249, avg. samples / sec: 300.66
Iteration:   3800, Loss function: 5.077, Average Loss: 5.246, avg. samples / sec: 241.32
Iteration:   3820, Loss function: 5.145, Average Loss: 5.242, avg. samples / sec: 221.14
Iteration:   3840, Loss function: 4.840, Average Loss: 5.237, avg. samples / sec: 252.15
Iteration:   3860, Loss function: 5.036, Average Loss: 5.232, avg. samples / sec: 327.37
Iteration:   3880, Loss function: 5.142, Average Loss: 5.226, avg. samples / sec: 339.07
Iteration:   3900, Loss function: 5.101, Average Loss: 5.221, avg. samples / sec: 300.36
Iteration:   3920, Loss function: 4.957, Average Loss: 5.215, avg. samples / sec: 309.51
Iteration:   3940, Loss function: 5.120, Average Loss: 5.210, avg. samples / sec: 321.35
Iteration:   3960, Loss function: 4.932, Average Loss: 5.207, avg. samples / sec: 321.26
Iteration:   3980, Loss function: 4.917, Average Loss: 5.202, avg. samples / sec: 325.06
Iteration:   4000, Loss function: 4.981, Average Loss: 5.199, avg. samples / sec: 288.90
Iteration:   4020, Loss function: 5.055, Average Loss: 5.194, avg. samples / sec: 313.65
Iteration:   4040, Loss function: 5.158, Average Loss: 5.191, avg. samples / sec: 289.13
Iteration:   4060, Loss function: 5.236, Average Loss: 5.187, avg. samples / sec: 323.46
Iteration:   4080, Loss function: 5.040, Average Loss: 5.183, avg. samples / sec: 306.84
Iteration:   4100, Loss function: 5.263, Average Loss: 5.180, avg. samples / sec: 308.61
:::MLLOG {"namespace": "", "time_ms": 1639152082773, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152082787, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.102, Average Loss: 5.176, avg. samples / sec: 310.19
Iteration:   4140, Loss function: 4.925, Average Loss: 5.171, avg. samples / sec: 284.71
Iteration:   4160, Loss function: 4.975, Average Loss: 5.165, avg. samples / sec: 331.78
Iteration:   4180, Loss function: 4.910, Average Loss: 5.159, avg. samples / sec: 331.46
Iteration:   4200, Loss function: 4.724, Average Loss: 5.154, avg. samples / sec: 289.59
Iteration:   4220, Loss function: 4.736, Average Loss: 5.148, avg. samples / sec: 244.42
Iteration:   4240, Loss function: 4.955, Average Loss: 5.144, avg. samples / sec: 295.58
Iteration:   4260, Loss function: 5.149, Average Loss: 5.139, avg. samples / sec: 331.46
Iteration:   4280, Loss function: 5.001, Average Loss: 5.134, avg. samples / sec: 307.11
Iteration:   4300, Loss function: 4.803, Average Loss: 5.128, avg. samples / sec: 321.43
Iteration:   4320, Loss function: 4.786, Average Loss: 5.123, avg. samples / sec: 225.77
Iteration:   4340, Loss function: 4.728, Average Loss: 5.117, avg. samples / sec: 313.85
Iteration:   4360, Loss function: 4.862, Average Loss: 5.113, avg. samples / sec: 310.01
Iteration:   4380, Loss function: 5.208, Average Loss: 5.108, avg. samples / sec: 331.22
Iteration:   4400, Loss function: 4.831, Average Loss: 5.104, avg. samples / sec: 313.50
Iteration:   4420, Loss function: 4.901, Average Loss: 5.099, avg. samples / sec: 336.10
Iteration:   4440, Loss function: 4.788, Average Loss: 5.094, avg. samples / sec: 323.27
Iteration:   4460, Loss function: 5.175, Average Loss: 5.091, avg. samples / sec: 336.20
Iteration:   4480, Loss function: 4.924, Average Loss: 5.089, avg. samples / sec: 300.28
Iteration:   4500, Loss function: 4.737, Average Loss: 5.085, avg. samples / sec: 291.18
Iteration:   4520, Loss function: 4.652, Average Loss: 5.080, avg. samples / sec: 326.92
Iteration:   4540, Loss function: 4.894, Average Loss: 5.075, avg. samples / sec: 329.12
Iteration:   4560, Loss function: 4.907, Average Loss: 5.071, avg. samples / sec: 341.06
Iteration:   4580, Loss function: 4.777, Average Loss: 5.068, avg. samples / sec: 321.07
Iteration:   4600, Loss function: 4.802, Average Loss: 5.065, avg. samples / sec: 329.84
Iteration:   4620, Loss function: 4.774, Average Loss: 5.061, avg. samples / sec: 324.02
Iteration:   4640, Loss function: 4.749, Average Loss: 5.056, avg. samples / sec: 331.86
Iteration:   4660, Loss function: 5.085, Average Loss: 5.052, avg. samples / sec: 317.90
Iteration:   4680, Loss function: 5.161, Average Loss: 5.048, avg. samples / sec: 306.14
Iteration:   4700, Loss function: 4.726, Average Loss: 5.044, avg. samples / sec: 312.46
Iteration:   4720, Loss function: 4.882, Average Loss: 5.039, avg. samples / sec: 320.59
Iteration:   4740, Loss function: 4.672, Average Loss: 5.036, avg. samples / sec: 327.26
Iteration:   4760, Loss function: 4.681, Average Loss: 5.032, avg. samples / sec: 321.38
Iteration:   4780, Loss function: 5.099, Average Loss: 5.027, avg. samples / sec: 319.44
Iteration:   4800, Loss function: 4.895, Average Loss: 5.023, avg. samples / sec: 304.56
Iteration:   4820, Loss function: 4.702, Average Loss: 5.019, avg. samples / sec: 295.90
Iteration:   4840, Loss function: 5.187, Average Loss: 5.015, avg. samples / sec: 263.35
Iteration:   4860, Loss function: 4.683, Average Loss: 5.010, avg. samples / sec: 313.96
Iteration:   4880, Loss function: 5.164, Average Loss: 5.007, avg. samples / sec: 265.79
Iteration:   4900, Loss function: 4.576, Average Loss: 5.003, avg. samples / sec: 233.16
Iteration:   4920, Loss function: 4.851, Average Loss: 5.000, avg. samples / sec: 306.95
Iteration:   4940, Loss function: 4.655, Average Loss: 4.996, avg. samples / sec: 306.42
Iteration:   4960, Loss function: 4.733, Average Loss: 4.993, avg. samples / sec: 318.65
Iteration:   4980, Loss function: 4.623, Average Loss: 4.989, avg. samples / sec: 323.47
Iteration:   5000, Loss function: 4.843, Average Loss: 4.986, avg. samples / sec: 287.44
Iteration:   5020, Loss function: 5.107, Average Loss: 4.983, avg. samples / sec: 310.52
Iteration:   5040, Loss function: 4.625, Average Loss: 4.980, avg. samples / sec: 333.16
Iteration:   5060, Loss function: 4.652, Average Loss: 4.976, avg. samples / sec: 326.03
Iteration:   5080, Loss function: 4.558, Average Loss: 4.972, avg. samples / sec: 322.79
Iteration:   5100, Loss function: 4.766, Average Loss: 4.970, avg. samples / sec: 303.00
Iteration:   5120, Loss function: 4.610, Average Loss: 4.967, avg. samples / sec: 332.56
Iteration:   5140, Loss function: 4.921, Average Loss: 4.963, avg. samples / sec: 316.41
:::MLLOG {"namespace": "", "time_ms": 1639152464393, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 100.26 s
:::MLLOG {"namespace": "", "time_ms": 1639152564865, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152564885, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152564886, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=3.03s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.856, Average Loss: 4.959, avg. samples / sec: 20.86
DONE (t=7.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10947
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22252
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09676
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19604
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14092
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20745
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10947 AP goal: 0.10000
Iteration:   5180, Loss function: 4.742, Average Loss: 4.954, avg. samples / sec: 315.36
:::MLLOG {"namespace": "", "time_ms": 1639152579630, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579631, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10946630325841068, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579632, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152584027, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:09:54 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:09:54 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150370076, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150370532, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1765757328, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1765757328
:::MLLOG {"namespace": "", "time_ms": 1639150374907, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374908, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374912, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150476884, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150476885, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150483011, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483012, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150483422, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150483423, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150483425, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.351, Average Loss: 0.022, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.079, Average Loss: 0.451, avg. samples / sec: 189.76
Iteration:     40, Loss function: 20.597, Average Loss: 0.853, avg. samples / sec: 246.68
Iteration:     60, Loss function: 20.305, Average Loss: 1.243, avg. samples / sec: 242.61
Iteration:     80, Loss function: 19.915, Average Loss: 1.615, avg. samples / sec: 249.07
Iteration:    100, Loss function: 15.047, Average Loss: 1.937, avg. samples / sec: 255.27
Iteration:    120, Loss function: 11.107, Average Loss: 2.142, avg. samples / sec: 255.04
Iteration:    140, Loss function: 9.542, Average Loss: 2.298, avg. samples / sec: 262.73
Iteration:    160, Loss function: 8.924, Average Loss: 2.437, avg. samples / sec: 264.78
Iteration:    180, Loss function: 8.991, Average Loss: 2.566, avg. samples / sec: 257.85
Iteration:    200, Loss function: 8.711, Average Loss: 2.691, avg. samples / sec: 261.19
Iteration:    220, Loss function: 8.755, Average Loss: 2.812, avg. samples / sec: 267.94
Iteration:    240, Loss function: 8.853, Average Loss: 2.936, avg. samples / sec: 297.28
Iteration:    260, Loss function: 8.724, Average Loss: 3.050, avg. samples / sec: 282.33
Iteration:    280, Loss function: 8.256, Average Loss: 3.159, avg. samples / sec: 311.37
Iteration:    300, Loss function: 8.320, Average Loss: 3.262, avg. samples / sec: 289.29
Iteration:    320, Loss function: 8.272, Average Loss: 3.362, avg. samples / sec: 230.90
Iteration:    340, Loss function: 8.267, Average Loss: 3.460, avg. samples / sec: 311.06
Iteration:    360, Loss function: 7.986, Average Loss: 3.552, avg. samples / sec: 273.44
Iteration:    380, Loss function: 7.977, Average Loss: 3.643, avg. samples / sec: 292.41
Iteration:    400, Loss function: 8.012, Average Loss: 3.728, avg. samples / sec: 235.96
Iteration:    420, Loss function: 7.588, Average Loss: 3.809, avg. samples / sec: 217.42
Iteration:    440, Loss function: 7.844, Average Loss: 3.887, avg. samples / sec: 254.27
Iteration:    460, Loss function: 7.865, Average Loss: 3.964, avg. samples / sec: 267.35
Iteration:    480, Loss function: 7.417, Average Loss: 4.038, avg. samples / sec: 306.72
Iteration:    500, Loss function: 7.516, Average Loss: 4.109, avg. samples / sec: 326.34
Iteration:    520, Loss function: 7.579, Average Loss: 4.177, avg. samples / sec: 305.79
Iteration:    540, Loss function: 7.559, Average Loss: 4.242, avg. samples / sec: 334.24
Iteration:    560, Loss function: 7.184, Average Loss: 4.306, avg. samples / sec: 324.29
Iteration:    580, Loss function: 7.178, Average Loss: 4.367, avg. samples / sec: 242.81
Iteration:    600, Loss function: 7.395, Average Loss: 4.426, avg. samples / sec: 266.00
Iteration:    620, Loss function: 6.942, Average Loss: 4.481, avg. samples / sec: 311.13
Iteration:    640, Loss function: 6.986, Average Loss: 4.536, avg. samples / sec: 266.92
Iteration:    660, Loss function: 7.192, Average Loss: 4.589, avg. samples / sec: 309.04
Iteration:    680, Loss function: 7.239, Average Loss: 4.640, avg. samples / sec: 315.00
Iteration:    700, Loss function: 7.060, Average Loss: 4.688, avg. samples / sec: 260.10
Iteration:    720, Loss function: 7.019, Average Loss: 4.737, avg. samples / sec: 221.20
Iteration:    740, Loss function: 6.903, Average Loss: 4.782, avg. samples / sec: 296.02
Iteration:    760, Loss function: 6.928, Average Loss: 4.825, avg. samples / sec: 231.89
Iteration:    780, Loss function: 6.901, Average Loss: 4.867, avg. samples / sec: 304.84
Iteration:    800, Loss function: 7.168, Average Loss: 4.906, avg. samples / sec: 318.29
Iteration:    820, Loss function: 6.713, Average Loss: 4.944, avg. samples / sec: 317.04
Iteration:    840, Loss function: 6.723, Average Loss: 4.980, avg. samples / sec: 325.62
Iteration:    860, Loss function: 6.670, Average Loss: 5.014, avg. samples / sec: 303.01
Iteration:    880, Loss function: 6.794, Average Loss: 5.048, avg. samples / sec: 224.34
Iteration:    900, Loss function: 6.815, Average Loss: 5.078, avg. samples / sec: 278.50
Iteration:    920, Loss function: 6.637, Average Loss: 5.107, avg. samples / sec: 316.51
Iteration:    940, Loss function: 6.843, Average Loss: 5.136, avg. samples / sec: 273.21
Iteration:    960, Loss function: 6.528, Average Loss: 5.164, avg. samples / sec: 270.37
Iteration:    980, Loss function: 6.373, Average Loss: 5.191, avg. samples / sec: 330.73
Iteration:   1000, Loss function: 6.576, Average Loss: 5.217, avg. samples / sec: 282.15
Iteration:   1020, Loss function: 6.289, Average Loss: 5.242, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639150913315, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150913316, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.518, Average Loss: 5.266, avg. samples / sec: 318.80
Iteration:   1060, Loss function: 6.344, Average Loss: 5.289, avg. samples / sec: 334.28
Iteration:   1080, Loss function: 6.413, Average Loss: 5.310, avg. samples / sec: 331.25
Iteration:   1100, Loss function: 6.109, Average Loss: 5.329, avg. samples / sec: 323.08
Iteration:   1120, Loss function: 6.246, Average Loss: 5.348, avg. samples / sec: 310.91
Iteration:   1140, Loss function: 6.329, Average Loss: 5.367, avg. samples / sec: 330.34
Iteration:   1160, Loss function: 6.134, Average Loss: 5.384, avg. samples / sec: 329.43
Iteration:   1180, Loss function: 6.385, Average Loss: 5.401, avg. samples / sec: 336.67
Iteration:   1200, Loss function: 6.220, Average Loss: 5.418, avg. samples / sec: 302.41
Iteration:   1220, Loss function: 6.223, Average Loss: 5.433, avg. samples / sec: 304.52
Iteration:   1240, Loss function: 6.147, Average Loss: 5.446, avg. samples / sec: 231.74
Iteration:   1260, Loss function: 6.098, Average Loss: 5.458, avg. samples / sec: 269.18
Iteration:   1280, Loss function: 5.930, Average Loss: 5.470, avg. samples / sec: 303.53
Iteration:   1300, Loss function: 6.049, Average Loss: 5.483, avg. samples / sec: 325.53
Iteration:   1320, Loss function: 6.258, Average Loss: 5.496, avg. samples / sec: 321.73
Iteration:   1340, Loss function: 5.863, Average Loss: 5.506, avg. samples / sec: 327.19
Iteration:   1360, Loss function: 5.894, Average Loss: 5.518, avg. samples / sec: 338.44
Iteration:   1380, Loss function: 6.143, Average Loss: 5.527, avg. samples / sec: 297.90
Iteration:   1400, Loss function: 6.301, Average Loss: 5.536, avg. samples / sec: 323.43
Iteration:   1420, Loss function: 5.952, Average Loss: 5.545, avg. samples / sec: 274.53
Iteration:   1440, Loss function: 6.482, Average Loss: 5.553, avg. samples / sec: 265.97
Iteration:   1460, Loss function: 6.042, Average Loss: 5.561, avg. samples / sec: 217.55
Iteration:   1480, Loss function: 5.898, Average Loss: 5.569, avg. samples / sec: 311.23
Iteration:   1500, Loss function: 6.194, Average Loss: 5.576, avg. samples / sec: 336.96
Iteration:   1520, Loss function: 5.964, Average Loss: 5.582, avg. samples / sec: 331.83
Iteration:   1540, Loss function: 5.996, Average Loss: 5.586, avg. samples / sec: 317.44
Iteration:   1560, Loss function: 5.706, Average Loss: 5.590, avg. samples / sec: 317.29
Iteration:   1580, Loss function: 5.640, Average Loss: 5.595, avg. samples / sec: 320.12
Iteration:   1600, Loss function: 6.149, Average Loss: 5.600, avg. samples / sec: 209.11
Iteration:   1620, Loss function: 5.843, Average Loss: 5.605, avg. samples / sec: 271.35
Iteration:   1640, Loss function: 5.939, Average Loss: 5.608, avg. samples / sec: 228.34
Iteration:   1660, Loss function: 5.770, Average Loss: 5.611, avg. samples / sec: 317.60
Iteration:   1680, Loss function: 5.772, Average Loss: 5.614, avg. samples / sec: 328.30
Iteration:   1700, Loss function: 5.461, Average Loss: 5.617, avg. samples / sec: 335.12
Iteration:   1720, Loss function: 5.630, Average Loss: 5.619, avg. samples / sec: 333.66
Iteration:   1740, Loss function: 5.798, Average Loss: 5.621, avg. samples / sec: 327.72
Iteration:   1760, Loss function: 5.589, Average Loss: 5.623, avg. samples / sec: 295.53
Iteration:   1780, Loss function: 5.745, Average Loss: 5.624, avg. samples / sec: 320.46
Iteration:   1800, Loss function: 5.710, Average Loss: 5.627, avg. samples / sec: 331.77
Iteration:   1820, Loss function: 5.928, Average Loss: 5.628, avg. samples / sec: 318.06
Iteration:   1840, Loss function: 5.822, Average Loss: 5.630, avg. samples / sec: 309.93
Iteration:   1860, Loss function: 5.724, Average Loss: 5.629, avg. samples / sec: 308.40
Iteration:   1880, Loss function: 5.751, Average Loss: 5.630, avg. samples / sec: 287.11
Iteration:   1900, Loss function: 5.894, Average Loss: 5.631, avg. samples / sec: 270.66
Iteration:   1920, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 299.13
Iteration:   1940, Loss function: 5.826, Average Loss: 5.630, avg. samples / sec: 262.79
Iteration:   1960, Loss function: 5.640, Average Loss: 5.629, avg. samples / sec: 269.53
Iteration:   1980, Loss function: 5.807, Average Loss: 5.629, avg. samples / sec: 332.50
Iteration:   2000, Loss function: 5.614, Average Loss: 5.629, avg. samples / sec: 309.96
Iteration:   2020, Loss function: 5.503, Average Loss: 5.627, avg. samples / sec: 317.51
Iteration:   2040, Loss function: 5.602, Average Loss: 5.627, avg. samples / sec: 317.95
:::MLLOG {"namespace": "", "time_ms": 1639151303132, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151303168, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.428, Average Loss: 5.625, avg. samples / sec: 314.53
Iteration:   2080, Loss function: 5.088, Average Loss: 5.622, avg. samples / sec: 316.71
Iteration:   2100, Loss function: 5.393, Average Loss: 5.620, avg. samples / sec: 306.32
Iteration:   2120, Loss function: 5.259, Average Loss: 5.617, avg. samples / sec: 333.90
Iteration:   2140, Loss function: 5.577, Average Loss: 5.614, avg. samples / sec: 328.08
Iteration:   2160, Loss function: 5.373, Average Loss: 5.611, avg. samples / sec: 326.14
Iteration:   2180, Loss function: 5.433, Average Loss: 5.609, avg. samples / sec: 262.74
Iteration:   2200, Loss function: 5.479, Average Loss: 5.605, avg. samples / sec: 271.26
Iteration:   2220, Loss function: 5.492, Average Loss: 5.603, avg. samples / sec: 278.12
Iteration:   2240, Loss function: 5.354, Average Loss: 5.600, avg. samples / sec: 323.53
Iteration:   2260, Loss function: 5.418, Average Loss: 5.597, avg. samples / sec: 288.65
Iteration:   2280, Loss function: 5.240, Average Loss: 5.594, avg. samples / sec: 244.78
Iteration:   2300, Loss function: 5.096, Average Loss: 5.591, avg. samples / sec: 320.93
Iteration:   2320, Loss function: 5.359, Average Loss: 5.589, avg. samples / sec: 304.74
Iteration:   2340, Loss function: 5.430, Average Loss: 5.586, avg. samples / sec: 277.90
Iteration:   2360, Loss function: 5.430, Average Loss: 5.582, avg. samples / sec: 287.64
Iteration:   2380, Loss function: 5.322, Average Loss: 5.579, avg. samples / sec: 298.27
Iteration:   2400, Loss function: 5.424, Average Loss: 5.575, avg. samples / sec: 280.99
Iteration:   2420, Loss function: 5.575, Average Loss: 5.571, avg. samples / sec: 241.63
Iteration:   2440, Loss function: 5.374, Average Loss: 5.567, avg. samples / sec: 293.68
Iteration:   2460, Loss function: 5.119, Average Loss: 5.563, avg. samples / sec: 322.78
Iteration:   2480, Loss function: 5.456, Average Loss: 5.560, avg. samples / sec: 338.10
Iteration:   2500, Loss function: 5.314, Average Loss: 5.555, avg. samples / sec: 332.65
Iteration:   2520, Loss function: 5.220, Average Loss: 5.550, avg. samples / sec: 307.86
Iteration:   2540, Loss function: 5.372, Average Loss: 5.546, avg. samples / sec: 313.19
Iteration:   2560, Loss function: 5.317, Average Loss: 5.543, avg. samples / sec: 326.27
Iteration:   2580, Loss function: 5.354, Average Loss: 5.538, avg. samples / sec: 299.08
Iteration:   2600, Loss function: 5.266, Average Loss: 5.535, avg. samples / sec: 326.20
Iteration:   2620, Loss function: 5.349, Average Loss: 5.531, avg. samples / sec: 300.05
Iteration:   2640, Loss function: 5.143, Average Loss: 5.527, avg. samples / sec: 248.74
Iteration:   2660, Loss function: 5.089, Average Loss: 5.524, avg. samples / sec: 211.72
Iteration:   2680, Loss function: 5.189, Average Loss: 5.521, avg. samples / sec: 260.93
Iteration:   2700, Loss function: 5.135, Average Loss: 5.516, avg. samples / sec: 241.95
Iteration:   2720, Loss function: 5.270, Average Loss: 5.512, avg. samples / sec: 266.01
Iteration:   2740, Loss function: 5.072, Average Loss: 5.507, avg. samples / sec: 318.61
Iteration:   2760, Loss function: 4.955, Average Loss: 5.501, avg. samples / sec: 322.33
Iteration:   2780, Loss function: 5.517, Average Loss: 5.497, avg. samples / sec: 285.93
Iteration:   2800, Loss function: 5.197, Average Loss: 5.493, avg. samples / sec: 332.93
Iteration:   2820, Loss function: 5.308, Average Loss: 5.489, avg. samples / sec: 328.98
Iteration:   2840, Loss function: 5.133, Average Loss: 5.484, avg. samples / sec: 307.72
Iteration:   2860, Loss function: 5.139, Average Loss: 5.479, avg. samples / sec: 318.00
Iteration:   2880, Loss function: 5.333, Average Loss: 5.474, avg. samples / sec: 332.51
Iteration:   2900, Loss function: 5.028, Average Loss: 5.469, avg. samples / sec: 294.06
Iteration:   2920, Loss function: 5.036, Average Loss: 5.463, avg. samples / sec: 331.14
Iteration:   2940, Loss function: 4.991, Average Loss: 5.459, avg. samples / sec: 330.09
Iteration:   2960, Loss function: 5.378, Average Loss: 5.454, avg. samples / sec: 321.92
Iteration:   2980, Loss function: 5.066, Average Loss: 5.451, avg. samples / sec: 279.29
Iteration:   3000, Loss function: 5.414, Average Loss: 5.446, avg. samples / sec: 286.50
Iteration:   3020, Loss function: 5.372, Average Loss: 5.440, avg. samples / sec: 319.89
Iteration:   3040, Loss function: 5.123, Average Loss: 5.436, avg. samples / sec: 317.90
Iteration:   3060, Loss function: 5.104, Average Loss: 5.429, avg. samples / sec: 291.40
Iteration:   3080, Loss function: 4.866, Average Loss: 5.423, avg. samples / sec: 332.78
:::MLLOG {"namespace": "", "time_ms": 1639151696981, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151696997, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.068, Average Loss: 5.419, avg. samples / sec: 324.63
Iteration:   3120, Loss function: 5.063, Average Loss: 5.413, avg. samples / sec: 322.63
Iteration:   3140, Loss function: 5.212, Average Loss: 5.408, avg. samples / sec: 338.62
Iteration:   3160, Loss function: 5.546, Average Loss: 5.404, avg. samples / sec: 327.31
Iteration:   3180, Loss function: 5.016, Average Loss: 5.400, avg. samples / sec: 327.55
Iteration:   3200, Loss function: 5.113, Average Loss: 5.394, avg. samples / sec: 330.56
Iteration:   3220, Loss function: 5.177, Average Loss: 5.389, avg. samples / sec: 323.58
Iteration:   3240, Loss function: 5.188, Average Loss: 5.384, avg. samples / sec: 336.85
Iteration:   3260, Loss function: 4.842, Average Loss: 5.378, avg. samples / sec: 307.02
Iteration:   3280, Loss function: 4.787, Average Loss: 5.372, avg. samples / sec: 195.59
Iteration:   3300, Loss function: 4.711, Average Loss: 5.367, avg. samples / sec: 296.02
Iteration:   3320, Loss function: 4.882, Average Loss: 5.362, avg. samples / sec: 268.71
Iteration:   3340, Loss function: 4.988, Average Loss: 5.357, avg. samples / sec: 285.30
Iteration:   3360, Loss function: 5.170, Average Loss: 5.350, avg. samples / sec: 301.93
Iteration:   3380, Loss function: 5.153, Average Loss: 5.343, avg. samples / sec: 276.98
Iteration:   3400, Loss function: 4.818, Average Loss: 5.338, avg. samples / sec: 329.79
Iteration:   3420, Loss function: 5.208, Average Loss: 5.333, avg. samples / sec: 311.15
Iteration:   3440, Loss function: 5.101, Average Loss: 5.328, avg. samples / sec: 336.17
Iteration:   3460, Loss function: 5.374, Average Loss: 5.323, avg. samples / sec: 336.68
Iteration:   3480, Loss function: 5.250, Average Loss: 5.318, avg. samples / sec: 325.56
Iteration:   3500, Loss function: 5.351, Average Loss: 5.315, avg. samples / sec: 310.49
Iteration:   3520, Loss function: 5.158, Average Loss: 5.312, avg. samples / sec: 333.43
Iteration:   3540, Loss function: 4.845, Average Loss: 5.306, avg. samples / sec: 328.10
Iteration:   3560, Loss function: 4.989, Average Loss: 5.303, avg. samples / sec: 321.32
Iteration:   3580, Loss function: 4.997, Average Loss: 5.298, avg. samples / sec: 310.36
Iteration:   3600, Loss function: 5.125, Average Loss: 5.293, avg. samples / sec: 338.96
Iteration:   3620, Loss function: 4.756, Average Loss: 5.289, avg. samples / sec: 319.58
Iteration:   3640, Loss function: 4.702, Average Loss: 5.284, avg. samples / sec: 338.64
Iteration:   3660, Loss function: 5.098, Average Loss: 5.279, avg. samples / sec: 332.73
Iteration:   3680, Loss function: 5.119, Average Loss: 5.274, avg. samples / sec: 336.06
Iteration:   3700, Loss function: 4.892, Average Loss: 5.269, avg. samples / sec: 322.29
Iteration:   3720, Loss function: 4.995, Average Loss: 5.262, avg. samples / sec: 295.12
Iteration:   3740, Loss function: 5.208, Average Loss: 5.258, avg. samples / sec: 270.96
Iteration:   3760, Loss function: 4.981, Average Loss: 5.254, avg. samples / sec: 255.59
Iteration:   3780, Loss function: 4.965, Average Loss: 5.249, avg. samples / sec: 300.66
Iteration:   3800, Loss function: 5.077, Average Loss: 5.246, avg. samples / sec: 241.32
Iteration:   3820, Loss function: 5.145, Average Loss: 5.242, avg. samples / sec: 221.14
Iteration:   3840, Loss function: 4.840, Average Loss: 5.237, avg. samples / sec: 252.15
Iteration:   3860, Loss function: 5.036, Average Loss: 5.232, avg. samples / sec: 327.37
Iteration:   3880, Loss function: 5.142, Average Loss: 5.226, avg. samples / sec: 339.07
Iteration:   3900, Loss function: 5.101, Average Loss: 5.221, avg. samples / sec: 300.36
Iteration:   3920, Loss function: 4.957, Average Loss: 5.215, avg. samples / sec: 309.51
Iteration:   3940, Loss function: 5.120, Average Loss: 5.210, avg. samples / sec: 321.35
Iteration:   3960, Loss function: 4.932, Average Loss: 5.207, avg. samples / sec: 321.26
Iteration:   3980, Loss function: 4.917, Average Loss: 5.202, avg. samples / sec: 325.06
Iteration:   4000, Loss function: 4.981, Average Loss: 5.199, avg. samples / sec: 288.90
Iteration:   4020, Loss function: 5.055, Average Loss: 5.194, avg. samples / sec: 313.65
Iteration:   4040, Loss function: 5.158, Average Loss: 5.191, avg. samples / sec: 289.13
Iteration:   4060, Loss function: 5.236, Average Loss: 5.187, avg. samples / sec: 323.46
Iteration:   4080, Loss function: 5.040, Average Loss: 5.183, avg. samples / sec: 306.84
Iteration:   4100, Loss function: 5.263, Average Loss: 5.180, avg. samples / sec: 308.61
:::MLLOG {"namespace": "", "time_ms": 1639152082773, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152082787, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.102, Average Loss: 5.176, avg. samples / sec: 310.19
Iteration:   4140, Loss function: 4.925, Average Loss: 5.171, avg. samples / sec: 284.71
Iteration:   4160, Loss function: 4.975, Average Loss: 5.165, avg. samples / sec: 331.78
Iteration:   4180, Loss function: 4.910, Average Loss: 5.159, avg. samples / sec: 331.46
Iteration:   4200, Loss function: 4.724, Average Loss: 5.154, avg. samples / sec: 289.59
Iteration:   4220, Loss function: 4.736, Average Loss: 5.148, avg. samples / sec: 244.42
Iteration:   4240, Loss function: 4.955, Average Loss: 5.144, avg. samples / sec: 295.58
Iteration:   4260, Loss function: 5.149, Average Loss: 5.139, avg. samples / sec: 331.46
Iteration:   4280, Loss function: 5.001, Average Loss: 5.134, avg. samples / sec: 307.11
Iteration:   4300, Loss function: 4.803, Average Loss: 5.128, avg. samples / sec: 321.43
Iteration:   4320, Loss function: 4.786, Average Loss: 5.123, avg. samples / sec: 225.77
Iteration:   4340, Loss function: 4.728, Average Loss: 5.117, avg. samples / sec: 313.85
Iteration:   4360, Loss function: 4.862, Average Loss: 5.113, avg. samples / sec: 310.01
Iteration:   4380, Loss function: 5.208, Average Loss: 5.108, avg. samples / sec: 331.22
Iteration:   4400, Loss function: 4.831, Average Loss: 5.104, avg. samples / sec: 313.50
Iteration:   4420, Loss function: 4.901, Average Loss: 5.099, avg. samples / sec: 336.10
Iteration:   4440, Loss function: 4.788, Average Loss: 5.094, avg. samples / sec: 323.27
Iteration:   4460, Loss function: 5.175, Average Loss: 5.091, avg. samples / sec: 336.20
Iteration:   4480, Loss function: 4.924, Average Loss: 5.089, avg. samples / sec: 300.28
Iteration:   4500, Loss function: 4.737, Average Loss: 5.085, avg. samples / sec: 291.18
Iteration:   4520, Loss function: 4.652, Average Loss: 5.080, avg. samples / sec: 326.92
Iteration:   4540, Loss function: 4.894, Average Loss: 5.075, avg. samples / sec: 329.12
Iteration:   4560, Loss function: 4.907, Average Loss: 5.071, avg. samples / sec: 341.06
Iteration:   4580, Loss function: 4.777, Average Loss: 5.068, avg. samples / sec: 321.07
Iteration:   4600, Loss function: 4.802, Average Loss: 5.065, avg. samples / sec: 329.84
Iteration:   4620, Loss function: 4.774, Average Loss: 5.061, avg. samples / sec: 324.02
Iteration:   4640, Loss function: 4.749, Average Loss: 5.056, avg. samples / sec: 331.86
Iteration:   4660, Loss function: 5.085, Average Loss: 5.052, avg. samples / sec: 317.90
Iteration:   4680, Loss function: 5.161, Average Loss: 5.048, avg. samples / sec: 306.14
Iteration:   4700, Loss function: 4.726, Average Loss: 5.044, avg. samples / sec: 312.46
Iteration:   4720, Loss function: 4.882, Average Loss: 5.039, avg. samples / sec: 320.59
Iteration:   4740, Loss function: 4.672, Average Loss: 5.036, avg. samples / sec: 327.26
Iteration:   4760, Loss function: 4.681, Average Loss: 5.032, avg. samples / sec: 321.38
Iteration:   4780, Loss function: 5.099, Average Loss: 5.027, avg. samples / sec: 319.44
Iteration:   4800, Loss function: 4.895, Average Loss: 5.023, avg. samples / sec: 304.56
Iteration:   4820, Loss function: 4.702, Average Loss: 5.019, avg. samples / sec: 295.90
Iteration:   4840, Loss function: 5.187, Average Loss: 5.015, avg. samples / sec: 263.35
Iteration:   4860, Loss function: 4.683, Average Loss: 5.010, avg. samples / sec: 313.96
Iteration:   4880, Loss function: 5.164, Average Loss: 5.007, avg. samples / sec: 265.79
Iteration:   4900, Loss function: 4.576, Average Loss: 5.003, avg. samples / sec: 233.16
Iteration:   4920, Loss function: 4.851, Average Loss: 5.000, avg. samples / sec: 306.95
Iteration:   4940, Loss function: 4.655, Average Loss: 4.996, avg. samples / sec: 306.42
Iteration:   4960, Loss function: 4.733, Average Loss: 4.993, avg. samples / sec: 318.65
Iteration:   4980, Loss function: 4.623, Average Loss: 4.989, avg. samples / sec: 323.47
Iteration:   5000, Loss function: 4.843, Average Loss: 4.986, avg. samples / sec: 287.44
Iteration:   5020, Loss function: 5.107, Average Loss: 4.983, avg. samples / sec: 310.52
Iteration:   5040, Loss function: 4.625, Average Loss: 4.980, avg. samples / sec: 333.16
Iteration:   5060, Loss function: 4.652, Average Loss: 4.976, avg. samples / sec: 326.03
Iteration:   5080, Loss function: 4.558, Average Loss: 4.972, avg. samples / sec: 322.79
Iteration:   5100, Loss function: 4.766, Average Loss: 4.970, avg. samples / sec: 303.00
Iteration:   5120, Loss function: 4.610, Average Loss: 4.967, avg. samples / sec: 332.56
Iteration:   5140, Loss function: 4.921, Average Loss: 4.963, avg. samples / sec: 316.41
:::MLLOG {"namespace": "", "time_ms": 1639152464393, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 100.26 s
:::MLLOG {"namespace": "", "time_ms": 1639152564865, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152564885, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152564886, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=3.03s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.856, Average Loss: 4.959, avg. samples / sec: 20.86
DONE (t=7.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10947
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22252
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09676
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19604
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14092
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20745
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10947 AP goal: 0.10000
Iteration:   5180, Loss function: 4.742, Average Loss: 4.954, avg. samples / sec: 315.36
:::MLLOG {"namespace": "", "time_ms": 1639152579630, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579631, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10946630325841068, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152579632, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152584027, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152595
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:09:55 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:36 PM'
START TIMING RUN WAS 2021-12-10 03:32:36 PM
ENDING TIMING RUN AT 2021-12-10 04:09:55 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:09:55 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
+ result=2239
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-10 03:32:36 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-10 03:32:36 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
