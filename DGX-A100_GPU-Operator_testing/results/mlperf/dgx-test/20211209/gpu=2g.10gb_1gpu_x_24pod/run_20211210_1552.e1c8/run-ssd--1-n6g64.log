+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-n6g64.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-n6g64.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-n6g64.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea'
Found 1 MIG instances: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150361
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:41 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:41 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:41 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:41 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-n6g64 to the sync file ...
run-ssd--1-n6g64 Found 22 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
    11	run-ssd--1-c4889
    12	run-ssd--1-x9kjn
    13	run-ssd--1-tfhdx
    14	run-ssd--1-zjbkz
    15	run-ssd--1-2qvjx
    16	run-ssd--1-9lzhc
    17	run-ssd--1-5tmkm
    18	run-ssd--1-x7m56
    19	run-ssd--1-lh68c
    20	run-ssd--1-477tc
    21	run-ssd--1-8dgvk
    22	run-ssd--1-n6g64
Fri Dec 10 15:32:46 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ tee -a /tmp/ssd_all.log
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
:::MLLOG {"namespace": "", "time_ms": 1639150369507, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369944, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1080309689, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1080309689
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150374527, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374528, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150476999, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150476999, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150483042, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483044, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150483464, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150483465, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150483469, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.832, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.139, Average Loss: 0.456, avg. samples / sec: 179.02
Iteration:     40, Loss function: 20.704, Average Loss: 0.857, avg. samples / sec: 236.54
Iteration:     60, Loss function: 20.389, Average Loss: 1.247, avg. samples / sec: 217.41
Iteration:     80, Loss function: 19.853, Average Loss: 1.620, avg. samples / sec: 247.21
Iteration:    100, Loss function: 15.780, Average Loss: 1.948, avg. samples / sec: 236.69
Iteration:    120, Loss function: 11.851, Average Loss: 2.161, avg. samples / sec: 241.97
Iteration:    140, Loss function: 9.976, Average Loss: 2.324, avg. samples / sec: 233.52
Iteration:    160, Loss function: 9.250, Average Loss: 2.466, avg. samples / sec: 269.76
Iteration:    180, Loss function: 9.221, Average Loss: 2.598, avg. samples / sec: 251.56
Iteration:    200, Loss function: 8.851, Average Loss: 2.724, avg. samples / sec: 287.91
Iteration:    220, Loss function: 8.519, Average Loss: 2.844, avg. samples / sec: 299.02
Iteration:    240, Loss function: 8.651, Average Loss: 2.961, avg. samples / sec: 290.48
Iteration:    260, Loss function: 8.763, Average Loss: 3.075, avg. samples / sec: 280.64
Iteration:    280, Loss function: 8.412, Average Loss: 3.185, avg. samples / sec: 306.56
Iteration:    300, Loss function: 8.366, Average Loss: 3.288, avg. samples / sec: 293.94
Iteration:    320, Loss function: 8.443, Average Loss: 3.388, avg. samples / sec: 227.00
Iteration:    340, Loss function: 8.403, Average Loss: 3.486, avg. samples / sec: 306.91
Iteration:    360, Loss function: 7.891, Average Loss: 3.578, avg. samples / sec: 280.17
Iteration:    380, Loss function: 8.073, Average Loss: 3.668, avg. samples / sec: 270.67
Iteration:    400, Loss function: 8.027, Average Loss: 3.752, avg. samples / sec: 327.71
Iteration:    420, Loss function: 7.618, Average Loss: 3.833, avg. samples / sec: 309.70
Iteration:    440, Loss function: 7.690, Average Loss: 3.912, avg. samples / sec: 329.63
Iteration:    460, Loss function: 7.719, Average Loss: 3.987, avg. samples / sec: 335.14
Iteration:    480, Loss function: 7.634, Average Loss: 4.059, avg. samples / sec: 307.92
Iteration:    500, Loss function: 7.617, Average Loss: 4.130, avg. samples / sec: 297.58
Iteration:    520, Loss function: 7.517, Average Loss: 4.199, avg. samples / sec: 201.93
Iteration:    540, Loss function: 7.310, Average Loss: 4.263, avg. samples / sec: 273.12
Iteration:    560, Loss function: 7.261, Average Loss: 4.326, avg. samples / sec: 259.62
Iteration:    580, Loss function: 7.259, Average Loss: 4.387, avg. samples / sec: 315.40
Iteration:    600, Loss function: 7.235, Average Loss: 4.446, avg. samples / sec: 298.68
Iteration:    620, Loss function: 7.099, Average Loss: 4.501, avg. samples / sec: 293.79
Iteration:    640, Loss function: 7.011, Average Loss: 4.555, avg. samples / sec: 289.69
Iteration:    660, Loss function: 7.156, Average Loss: 4.607, avg. samples / sec: 333.85
Iteration:    680, Loss function: 7.179, Average Loss: 4.657, avg. samples / sec: 307.26
Iteration:    700, Loss function: 6.770, Average Loss: 4.705, avg. samples / sec: 293.27
Iteration:    720, Loss function: 7.141, Average Loss: 4.754, avg. samples / sec: 316.14
Iteration:    740, Loss function: 6.838, Average Loss: 4.798, avg. samples / sec: 330.91
Iteration:    760, Loss function: 7.142, Average Loss: 4.842, avg. samples / sec: 329.55
Iteration:    780, Loss function: 6.819, Average Loss: 4.883, avg. samples / sec: 315.98
Iteration:    800, Loss function: 7.238, Average Loss: 4.923, avg. samples / sec: 264.99
Iteration:    820, Loss function: 6.763, Average Loss: 4.961, avg. samples / sec: 321.30
Iteration:    840, Loss function: 6.709, Average Loss: 4.996, avg. samples / sec: 326.77
Iteration:    860, Loss function: 6.861, Average Loss: 5.029, avg. samples / sec: 312.72
Iteration:    880, Loss function: 6.711, Average Loss: 5.061, avg. samples / sec: 298.82
Iteration:    900, Loss function: 6.745, Average Loss: 5.092, avg. samples / sec: 309.15
Iteration:    920, Loss function: 6.595, Average Loss: 5.120, avg. samples / sec: 321.47
Iteration:    940, Loss function: 6.699, Average Loss: 5.149, avg. samples / sec: 326.22
Iteration:    960, Loss function: 6.427, Average Loss: 5.178, avg. samples / sec: 327.68
Iteration:    980, Loss function: 6.595, Average Loss: 5.205, avg. samples / sec: 330.61
Iteration:   1000, Loss function: 6.557, Average Loss: 5.229, avg. samples / sec: 337.45
Iteration:   1020, Loss function: 6.433, Average Loss: 5.252, avg. samples / sec: 333.48
:::MLLOG {"namespace": "", "time_ms": 1639150896865, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150896867, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.520, Average Loss: 5.275, avg. samples / sec: 315.02
Iteration:   1060, Loss function: 6.474, Average Loss: 5.298, avg. samples / sec: 313.07
Iteration:   1080, Loss function: 6.259, Average Loss: 5.319, avg. samples / sec: 313.41
Iteration:   1100, Loss function: 6.244, Average Loss: 5.338, avg. samples / sec: 328.40
Iteration:   1120, Loss function: 6.099, Average Loss: 5.358, avg. samples / sec: 321.22
Iteration:   1140, Loss function: 6.505, Average Loss: 5.376, avg. samples / sec: 318.45
Iteration:   1160, Loss function: 6.131, Average Loss: 5.393, avg. samples / sec: 306.35
Iteration:   1180, Loss function: 6.288, Average Loss: 5.409, avg. samples / sec: 324.39
Iteration:   1200, Loss function: 6.255, Average Loss: 5.424, avg. samples / sec: 307.86
Iteration:   1220, Loss function: 6.166, Average Loss: 5.439, avg. samples / sec: 308.77
Iteration:   1240, Loss function: 6.174, Average Loss: 5.452, avg. samples / sec: 259.92
Iteration:   1260, Loss function: 5.979, Average Loss: 5.465, avg. samples / sec: 305.17
Iteration:   1280, Loss function: 5.945, Average Loss: 5.478, avg. samples / sec: 271.87
Iteration:   1300, Loss function: 6.001, Average Loss: 5.490, avg. samples / sec: 249.96
Iteration:   1320, Loss function: 6.100, Average Loss: 5.502, avg. samples / sec: 330.33
Iteration:   1340, Loss function: 5.777, Average Loss: 5.514, avg. samples / sec: 302.73
Iteration:   1360, Loss function: 6.061, Average Loss: 5.526, avg. samples / sec: 326.16
Iteration:   1380, Loss function: 6.209, Average Loss: 5.536, avg. samples / sec: 243.23
Iteration:   1400, Loss function: 6.062, Average Loss: 5.544, avg. samples / sec: 288.93
Iteration:   1420, Loss function: 5.997, Average Loss: 5.552, avg. samples / sec: 284.88
Iteration:   1440, Loss function: 6.385, Average Loss: 5.561, avg. samples / sec: 304.72
Iteration:   1460, Loss function: 6.045, Average Loss: 5.570, avg. samples / sec: 332.55
Iteration:   1480, Loss function: 5.982, Average Loss: 5.577, avg. samples / sec: 297.80
Iteration:   1500, Loss function: 6.012, Average Loss: 5.585, avg. samples / sec: 318.17
Iteration:   1520, Loss function: 6.004, Average Loss: 5.590, avg. samples / sec: 321.43
Iteration:   1540, Loss function: 5.978, Average Loss: 5.595, avg. samples / sec: 325.09
Iteration:   1560, Loss function: 5.590, Average Loss: 5.600, avg. samples / sec: 336.01
Iteration:   1580, Loss function: 5.657, Average Loss: 5.604, avg. samples / sec: 329.96
Iteration:   1600, Loss function: 6.060, Average Loss: 5.610, avg. samples / sec: 264.20
Iteration:   1620, Loss function: 5.831, Average Loss: 5.615, avg. samples / sec: 328.17
Iteration:   1640, Loss function: 5.988, Average Loss: 5.618, avg. samples / sec: 212.03
Iteration:   1660, Loss function: 5.805, Average Loss: 5.622, avg. samples / sec: 290.64
Iteration:   1680, Loss function: 5.760, Average Loss: 5.626, avg. samples / sec: 266.20
Iteration:   1700, Loss function: 5.309, Average Loss: 5.630, avg. samples / sec: 295.66
Iteration:   1720, Loss function: 5.722, Average Loss: 5.632, avg. samples / sec: 291.07
Iteration:   1740, Loss function: 5.783, Average Loss: 5.634, avg. samples / sec: 330.44
Iteration:   1760, Loss function: 5.505, Average Loss: 5.636, avg. samples / sec: 334.17
Iteration:   1780, Loss function: 5.608, Average Loss: 5.637, avg. samples / sec: 316.33
Iteration:   1800, Loss function: 5.480, Average Loss: 5.638, avg. samples / sec: 325.24
Iteration:   1820, Loss function: 5.912, Average Loss: 5.640, avg. samples / sec: 326.21
Iteration:   1840, Loss function: 5.872, Average Loss: 5.641, avg. samples / sec: 317.25
Iteration:   1860, Loss function: 5.588, Average Loss: 5.640, avg. samples / sec: 340.44
Iteration:   1880, Loss function: 5.969, Average Loss: 5.642, avg. samples / sec: 335.87
Iteration:   1900, Loss function: 5.654, Average Loss: 5.643, avg. samples / sec: 320.62
Iteration:   1920, Loss function: 5.786, Average Loss: 5.642, avg. samples / sec: 282.84
Iteration:   1940, Loss function: 5.979, Average Loss: 5.642, avg. samples / sec: 276.70
Iteration:   1960, Loss function: 5.517, Average Loss: 5.642, avg. samples / sec: 247.70
Iteration:   1980, Loss function: 5.713, Average Loss: 5.641, avg. samples / sec: 293.73
Iteration:   2000, Loss function: 5.525, Average Loss: 5.640, avg. samples / sec: 273.71
Iteration:   2020, Loss function: 5.554, Average Loss: 5.638, avg. samples / sec: 256.11
Iteration:   2040, Loss function: 5.864, Average Loss: 5.638, avg. samples / sec: 252.56
:::MLLOG {"namespace": "", "time_ms": 1639151291562, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151291572, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.432, Average Loss: 5.636, avg. samples / sec: 275.73
Iteration:   2080, Loss function: 5.061, Average Loss: 5.633, avg. samples / sec: 303.51
Iteration:   2100, Loss function: 5.511, Average Loss: 5.631, avg. samples / sec: 320.22
Iteration:   2120, Loss function: 5.361, Average Loss: 5.629, avg. samples / sec: 323.83
Iteration:   2140, Loss function: 5.467, Average Loss: 5.626, avg. samples / sec: 325.47
Iteration:   2160, Loss function: 5.388, Average Loss: 5.623, avg. samples / sec: 322.70
Iteration:   2180, Loss function: 5.431, Average Loss: 5.621, avg. samples / sec: 322.04
Iteration:   2200, Loss function: 5.413, Average Loss: 5.618, avg. samples / sec: 248.34
Iteration:   2220, Loss function: 5.481, Average Loss: 5.616, avg. samples / sec: 208.08
Iteration:   2240, Loss function: 5.394, Average Loss: 5.613, avg. samples / sec: 242.38
Iteration:   2260, Loss function: 5.468, Average Loss: 5.610, avg. samples / sec: 303.44
Iteration:   2280, Loss function: 5.157, Average Loss: 5.607, avg. samples / sec: 270.47
Iteration:   2300, Loss function: 5.138, Average Loss: 5.604, avg. samples / sec: 314.15
Iteration:   2320, Loss function: 5.335, Average Loss: 5.602, avg. samples / sec: 245.74
Iteration:   2340, Loss function: 5.564, Average Loss: 5.598, avg. samples / sec: 240.51
Iteration:   2360, Loss function: 5.260, Average Loss: 5.595, avg. samples / sec: 204.44
Iteration:   2380, Loss function: 5.300, Average Loss: 5.592, avg. samples / sec: 282.03
Iteration:   2400, Loss function: 5.578, Average Loss: 5.588, avg. samples / sec: 183.77
Iteration:   2420, Loss function: 5.564, Average Loss: 5.584, avg. samples / sec: 220.97
Iteration:   2440, Loss function: 5.457, Average Loss: 5.582, avg. samples / sec: 236.59
Iteration:   2460, Loss function: 5.149, Average Loss: 5.577, avg. samples / sec: 321.30
Iteration:   2480, Loss function: 5.320, Average Loss: 5.574, avg. samples / sec: 308.20
Iteration:   2500, Loss function: 5.469, Average Loss: 5.569, avg. samples / sec: 311.84
Iteration:   2520, Loss function: 5.250, Average Loss: 5.564, avg. samples / sec: 337.28
Iteration:   2540, Loss function: 5.398, Average Loss: 5.561, avg. samples / sec: 318.42
Iteration:   2560, Loss function: 5.392, Average Loss: 5.556, avg. samples / sec: 334.93
Iteration:   2580, Loss function: 5.185, Average Loss: 5.553, avg. samples / sec: 323.99
Iteration:   2600, Loss function: 5.347, Average Loss: 5.550, avg. samples / sec: 327.71
Iteration:   2620, Loss function: 5.417, Average Loss: 5.545, avg. samples / sec: 337.15
Iteration:   2640, Loss function: 5.221, Average Loss: 5.543, avg. samples / sec: 329.90
Iteration:   2660, Loss function: 5.130, Average Loss: 5.539, avg. samples / sec: 245.70
Iteration:   2680, Loss function: 5.181, Average Loss: 5.536, avg. samples / sec: 255.90
Iteration:   2700, Loss function: 5.244, Average Loss: 5.531, avg. samples / sec: 306.80
Iteration:   2720, Loss function: 5.233, Average Loss: 5.526, avg. samples / sec: 264.75
Iteration:   2740, Loss function: 5.131, Average Loss: 5.522, avg. samples / sec: 325.10
Iteration:   2760, Loss function: 4.975, Average Loss: 5.517, avg. samples / sec: 328.63
Iteration:   2780, Loss function: 5.452, Average Loss: 5.513, avg. samples / sec: 290.43
Iteration:   2800, Loss function: 5.528, Average Loss: 5.508, avg. samples / sec: 256.77
Iteration:   2820, Loss function: 5.474, Average Loss: 5.504, avg. samples / sec: 327.44
Iteration:   2840, Loss function: 5.172, Average Loss: 5.500, avg. samples / sec: 336.16
Iteration:   2860, Loss function: 5.170, Average Loss: 5.495, avg. samples / sec: 333.44
Iteration:   2880, Loss function: 5.286, Average Loss: 5.490, avg. samples / sec: 334.33
Iteration:   2900, Loss function: 5.088, Average Loss: 5.485, avg. samples / sec: 323.34
Iteration:   2920, Loss function: 5.163, Average Loss: 5.480, avg. samples / sec: 332.58
Iteration:   2940, Loss function: 5.016, Average Loss: 5.476, avg. samples / sec: 297.35
Iteration:   2960, Loss function: 5.331, Average Loss: 5.472, avg. samples / sec: 278.16
Iteration:   2980, Loss function: 5.325, Average Loss: 5.468, avg. samples / sec: 328.04
Iteration:   3000, Loss function: 5.411, Average Loss: 5.463, avg. samples / sec: 280.49
Iteration:   3020, Loss function: 5.071, Average Loss: 5.457, avg. samples / sec: 327.65
Iteration:   3040, Loss function: 5.345, Average Loss: 5.452, avg. samples / sec: 250.89
Iteration:   3060, Loss function: 5.005, Average Loss: 5.445, avg. samples / sec: 315.48
Iteration:   3080, Loss function: 4.799, Average Loss: 5.439, avg. samples / sec: 206.64
:::MLLOG {"namespace": "", "time_ms": 1639151702269, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151702270, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.224, Average Loss: 5.434, avg. samples / sec: 192.65
Iteration:   3120, Loss function: 5.067, Average Loss: 5.428, avg. samples / sec: 197.39
Iteration:   3140, Loss function: 5.142, Average Loss: 5.423, avg. samples / sec: 162.76
Iteration:   3160, Loss function: 5.486, Average Loss: 5.418, avg. samples / sec: 318.18
Iteration:   3180, Loss function: 4.983, Average Loss: 5.414, avg. samples / sec: 335.28
Iteration:   3200, Loss function: 5.214, Average Loss: 5.410, avg. samples / sec: 321.30
Iteration:   3220, Loss function: 5.063, Average Loss: 5.404, avg. samples / sec: 313.20
Iteration:   3240, Loss function: 5.196, Average Loss: 5.400, avg. samples / sec: 317.85
Iteration:   3260, Loss function: 5.021, Average Loss: 5.394, avg. samples / sec: 294.00
Iteration:   3280, Loss function: 4.861, Average Loss: 5.388, avg. samples / sec: 323.46
Iteration:   3300, Loss function: 4.771, Average Loss: 5.382, avg. samples / sec: 323.97
Iteration:   3320, Loss function: 5.020, Average Loss: 5.377, avg. samples / sec: 325.57
Iteration:   3340, Loss function: 5.063, Average Loss: 5.374, avg. samples / sec: 326.29
Iteration:   3360, Loss function: 5.215, Average Loss: 5.368, avg. samples / sec: 295.38
Iteration:   3380, Loss function: 5.398, Average Loss: 5.362, avg. samples / sec: 264.67
Iteration:   3400, Loss function: 4.984, Average Loss: 5.357, avg. samples / sec: 207.01
Iteration:   3420, Loss function: 5.196, Average Loss: 5.352, avg. samples / sec: 262.95
Iteration:   3440, Loss function: 4.776, Average Loss: 5.347, avg. samples / sec: 283.28
Iteration:   3460, Loss function: 5.083, Average Loss: 5.342, avg. samples / sec: 324.98
Iteration:   3480, Loss function: 5.012, Average Loss: 5.337, avg. samples / sec: 307.34
Iteration:   3500, Loss function: 5.200, Average Loss: 5.333, avg. samples / sec: 319.88
Iteration:   3520, Loss function: 4.985, Average Loss: 5.329, avg. samples / sec: 311.83
Iteration:   3540, Loss function: 5.110, Average Loss: 5.324, avg. samples / sec: 330.10
Iteration:   3560, Loss function: 5.010, Average Loss: 5.321, avg. samples / sec: 339.60
Iteration:   3580, Loss function: 5.252, Average Loss: 5.317, avg. samples / sec: 302.95
Iteration:   3600, Loss function: 5.216, Average Loss: 5.312, avg. samples / sec: 277.21
Iteration:   3620, Loss function: 4.861, Average Loss: 5.308, avg. samples / sec: 327.66
Iteration:   3640, Loss function: 4.752, Average Loss: 5.303, avg. samples / sec: 295.25
Iteration:   3660, Loss function: 5.129, Average Loss: 5.299, avg. samples / sec: 290.34
Iteration:   3680, Loss function: 5.171, Average Loss: 5.294, avg. samples / sec: 313.21
Iteration:   3700, Loss function: 5.157, Average Loss: 5.289, avg. samples / sec: 328.39
Iteration:   3720, Loss function: 4.896, Average Loss: 5.282, avg. samples / sec: 315.56
Iteration:   3740, Loss function: 5.177, Average Loss: 5.279, avg. samples / sec: 337.36
Iteration:   3760, Loss function: 5.105, Average Loss: 5.275, avg. samples / sec: 289.43
Iteration:   3780, Loss function: 5.042, Average Loss: 5.270, avg. samples / sec: 330.22
Iteration:   3800, Loss function: 5.052, Average Loss: 5.267, avg. samples / sec: 311.95
Iteration:   3820, Loss function: 5.315, Average Loss: 5.262, avg. samples / sec: 336.49
Iteration:   3840, Loss function: 4.830, Average Loss: 5.258, avg. samples / sec: 321.62
Iteration:   3860, Loss function: 4.882, Average Loss: 5.252, avg. samples / sec: 290.01
Iteration:   3880, Loss function: 5.108, Average Loss: 5.247, avg. samples / sec: 306.37
Iteration:   3900, Loss function: 5.129, Average Loss: 5.242, avg. samples / sec: 295.43
Iteration:   3920, Loss function: 5.250, Average Loss: 5.236, avg. samples / sec: 286.15
Iteration:   3940, Loss function: 4.906, Average Loss: 5.231, avg. samples / sec: 322.93
Iteration:   3960, Loss function: 4.853, Average Loss: 5.226, avg. samples / sec: 275.99
Iteration:   3980, Loss function: 4.838, Average Loss: 5.222, avg. samples / sec: 283.62
Iteration:   4000, Loss function: 5.055, Average Loss: 5.217, avg. samples / sec: 297.98
Iteration:   4020, Loss function: 5.100, Average Loss: 5.212, avg. samples / sec: 319.35
Iteration:   4040, Loss function: 5.101, Average Loss: 5.209, avg. samples / sec: 247.70
Iteration:   4060, Loss function: 5.112, Average Loss: 5.204, avg. samples / sec: 304.32
Iteration:   4080, Loss function: 5.232, Average Loss: 5.199, avg. samples / sec: 318.23
Iteration:   4100, Loss function: 5.192, Average Loss: 5.196, avg. samples / sec: 295.50
:::MLLOG {"namespace": "", "time_ms": 1639152105112, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152105125, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.065, Average Loss: 5.192, avg. samples / sec: 270.76
Iteration:   4140, Loss function: 4.967, Average Loss: 5.187, avg. samples / sec: 330.12
Iteration:   4160, Loss function: 5.013, Average Loss: 5.180, avg. samples / sec: 308.32
Iteration:   4180, Loss function: 5.015, Average Loss: 5.175, avg. samples / sec: 330.16
Iteration:   4200, Loss function: 4.963, Average Loss: 5.171, avg. samples / sec: 330.92
Iteration:   4220, Loss function: 4.663, Average Loss: 5.165, avg. samples / sec: 329.96
Iteration:   4240, Loss function: 5.004, Average Loss: 5.160, avg. samples / sec: 303.26
Iteration:   4260, Loss function: 4.962, Average Loss: 5.156, avg. samples / sec: 320.39
Iteration:   4280, Loss function: 4.807, Average Loss: 5.150, avg. samples / sec: 272.49
Iteration:   4300, Loss function: 4.892, Average Loss: 5.144, avg. samples / sec: 257.89
Iteration:   4320, Loss function: 4.712, Average Loss: 5.139, avg. samples / sec: 322.03
Iteration:   4340, Loss function: 4.749, Average Loss: 5.133, avg. samples / sec: 284.50
Iteration:   4360, Loss function: 4.923, Average Loss: 5.129, avg. samples / sec: 271.56
Iteration:   4380, Loss function: 5.048, Average Loss: 5.125, avg. samples / sec: 327.85
Iteration:   4400, Loss function: 4.925, Average Loss: 5.121, avg. samples / sec: 327.93
Iteration:   4420, Loss function: 4.743, Average Loss: 5.116, avg. samples / sec: 317.00
Iteration:   4440, Loss function: 4.955, Average Loss: 5.111, avg. samples / sec: 310.93
Iteration:   4460, Loss function: 5.059, Average Loss: 5.107, avg. samples / sec: 332.36
Iteration:   4480, Loss function: 5.178, Average Loss: 5.104, avg. samples / sec: 320.93
Iteration:   4500, Loss function: 4.916, Average Loss: 5.101, avg. samples / sec: 329.55
Iteration:   4520, Loss function: 4.886, Average Loss: 5.097, avg. samples / sec: 329.30
Iteration:   4540, Loss function: 5.276, Average Loss: 5.092, avg. samples / sec: 329.48
Iteration:   4560, Loss function: 4.796, Average Loss: 5.089, avg. samples / sec: 314.23
Iteration:   4580, Loss function: 4.749, Average Loss: 5.086, avg. samples / sec: 256.21
Iteration:   4600, Loss function: 4.913, Average Loss: 5.083, avg. samples / sec: 307.82
Iteration:   4620, Loss function: 4.744, Average Loss: 5.078, avg. samples / sec: 322.39
Iteration:   4640, Loss function: 4.686, Average Loss: 5.073, avg. samples / sec: 240.09
Iteration:   4660, Loss function: 4.664, Average Loss: 5.069, avg. samples / sec: 309.00
Iteration:   4680, Loss function: 5.196, Average Loss: 5.064, avg. samples / sec: 306.85
Iteration:   4700, Loss function: 4.668, Average Loss: 5.060, avg. samples / sec: 273.13
Iteration:   4720, Loss function: 4.728, Average Loss: 5.055, avg. samples / sec: 217.55
Iteration:   4740, Loss function: 4.627, Average Loss: 5.051, avg. samples / sec: 278.90
Iteration:   4760, Loss function: 4.620, Average Loss: 5.047, avg. samples / sec: 308.24
Iteration:   4780, Loss function: 5.023, Average Loss: 5.043, avg. samples / sec: 326.35
Iteration:   4800, Loss function: 4.688, Average Loss: 5.040, avg. samples / sec: 275.49
Iteration:   4820, Loss function: 4.879, Average Loss: 5.036, avg. samples / sec: 244.07
Iteration:   4840, Loss function: 5.316, Average Loss: 5.032, avg. samples / sec: 257.55
Iteration:   4860, Loss function: 4.650, Average Loss: 5.028, avg. samples / sec: 251.31
Iteration:   4880, Loss function: 5.264, Average Loss: 5.024, avg. samples / sec: 289.90
Iteration:   4900, Loss function: 4.526, Average Loss: 5.020, avg. samples / sec: 289.47
Iteration:   4920, Loss function: 4.580, Average Loss: 5.016, avg. samples / sec: 270.07
Iteration:   4940, Loss function: 4.693, Average Loss: 5.012, avg. samples / sec: 286.05
Iteration:   4960, Loss function: 4.644, Average Loss: 5.009, avg. samples / sec: 313.42
Iteration:   4980, Loss function: 4.491, Average Loss: 5.004, avg. samples / sec: 329.60
Iteration:   5000, Loss function: 4.777, Average Loss: 5.001, avg. samples / sec: 327.55
Iteration:   5020, Loss function: 5.063, Average Loss: 4.997, avg. samples / sec: 331.88
Iteration:   5040, Loss function: 4.741, Average Loss: 4.994, avg. samples / sec: 322.14
Iteration:   5060, Loss function: 4.844, Average Loss: 4.991, avg. samples / sec: 311.75
Iteration:   5080, Loss function: 4.498, Average Loss: 4.987, avg. samples / sec: 299.99
Iteration:   5100, Loss function: 4.624, Average Loss: 4.984, avg. samples / sec: 309.56
Iteration:   5120, Loss function: 4.626, Average Loss: 4.981, avg. samples / sec: 200.69
Iteration:   5140, Loss function: 4.809, Average Loss: 4.977, avg. samples / sec: 330.13
:::MLLOG {"namespace": "", "time_ms": 1639152501512, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 85.05 s
:::MLLOG {"namespace": "", "time_ms": 1639152586685, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152586687, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152586687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.74s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10119
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20941
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.08687
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18018
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13203
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19281
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10119 AP goal: 0.10000
Iteration:   5160, Loss function: 4.808, Average Loss: 4.974, avg. samples / sec: 24.20
:::MLLOG {"namespace": "", "time_ms": 1639152594642, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594643, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10118760164126724, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594643, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152596154, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:01 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:01 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150369507, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150369944, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1080309689, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1080309689
:::MLLOG {"namespace": "", "time_ms": 1639150374527, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150374528, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150374533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150476999, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150476999, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150483042, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150483044, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.22s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150483464, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150483465, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150483469, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.832, Average Loss: 0.023, avg. samples / sec: 1.03
Iteration:     20, Loss function: 21.139, Average Loss: 0.456, avg. samples / sec: 179.02
Iteration:     40, Loss function: 20.704, Average Loss: 0.857, avg. samples / sec: 236.54
Iteration:     60, Loss function: 20.389, Average Loss: 1.247, avg. samples / sec: 217.41
Iteration:     80, Loss function: 19.853, Average Loss: 1.620, avg. samples / sec: 247.21
Iteration:    100, Loss function: 15.780, Average Loss: 1.948, avg. samples / sec: 236.69
Iteration:    120, Loss function: 11.851, Average Loss: 2.161, avg. samples / sec: 241.97
Iteration:    140, Loss function: 9.976, Average Loss: 2.324, avg. samples / sec: 233.52
Iteration:    160, Loss function: 9.250, Average Loss: 2.466, avg. samples / sec: 269.76
Iteration:    180, Loss function: 9.221, Average Loss: 2.598, avg. samples / sec: 251.56
Iteration:    200, Loss function: 8.851, Average Loss: 2.724, avg. samples / sec: 287.91
Iteration:    220, Loss function: 8.519, Average Loss: 2.844, avg. samples / sec: 299.02
Iteration:    240, Loss function: 8.651, Average Loss: 2.961, avg. samples / sec: 290.48
Iteration:    260, Loss function: 8.763, Average Loss: 3.075, avg. samples / sec: 280.64
Iteration:    280, Loss function: 8.412, Average Loss: 3.185, avg. samples / sec: 306.56
Iteration:    300, Loss function: 8.366, Average Loss: 3.288, avg. samples / sec: 293.94
Iteration:    320, Loss function: 8.443, Average Loss: 3.388, avg. samples / sec: 227.00
Iteration:    340, Loss function: 8.403, Average Loss: 3.486, avg. samples / sec: 306.91
Iteration:    360, Loss function: 7.891, Average Loss: 3.578, avg. samples / sec: 280.17
Iteration:    380, Loss function: 8.073, Average Loss: 3.668, avg. samples / sec: 270.67
Iteration:    400, Loss function: 8.027, Average Loss: 3.752, avg. samples / sec: 327.71
Iteration:    420, Loss function: 7.618, Average Loss: 3.833, avg. samples / sec: 309.70
Iteration:    440, Loss function: 7.690, Average Loss: 3.912, avg. samples / sec: 329.63
Iteration:    460, Loss function: 7.719, Average Loss: 3.987, avg. samples / sec: 335.14
Iteration:    480, Loss function: 7.634, Average Loss: 4.059, avg. samples / sec: 307.92
Iteration:    500, Loss function: 7.617, Average Loss: 4.130, avg. samples / sec: 297.58
Iteration:    520, Loss function: 7.517, Average Loss: 4.199, avg. samples / sec: 201.93
Iteration:    540, Loss function: 7.310, Average Loss: 4.263, avg. samples / sec: 273.12
Iteration:    560, Loss function: 7.261, Average Loss: 4.326, avg. samples / sec: 259.62
Iteration:    580, Loss function: 7.259, Average Loss: 4.387, avg. samples / sec: 315.40
Iteration:    600, Loss function: 7.235, Average Loss: 4.446, avg. samples / sec: 298.68
Iteration:    620, Loss function: 7.099, Average Loss: 4.501, avg. samples / sec: 293.79
Iteration:    640, Loss function: 7.011, Average Loss: 4.555, avg. samples / sec: 289.69
Iteration:    660, Loss function: 7.156, Average Loss: 4.607, avg. samples / sec: 333.85
Iteration:    680, Loss function: 7.179, Average Loss: 4.657, avg. samples / sec: 307.26
Iteration:    700, Loss function: 6.770, Average Loss: 4.705, avg. samples / sec: 293.27
Iteration:    720, Loss function: 7.141, Average Loss: 4.754, avg. samples / sec: 316.14
Iteration:    740, Loss function: 6.838, Average Loss: 4.798, avg. samples / sec: 330.91
Iteration:    760, Loss function: 7.142, Average Loss: 4.842, avg. samples / sec: 329.55
Iteration:    780, Loss function: 6.819, Average Loss: 4.883, avg. samples / sec: 315.98
Iteration:    800, Loss function: 7.238, Average Loss: 4.923, avg. samples / sec: 264.99
Iteration:    820, Loss function: 6.763, Average Loss: 4.961, avg. samples / sec: 321.30
Iteration:    840, Loss function: 6.709, Average Loss: 4.996, avg. samples / sec: 326.77
Iteration:    860, Loss function: 6.861, Average Loss: 5.029, avg. samples / sec: 312.72
Iteration:    880, Loss function: 6.711, Average Loss: 5.061, avg. samples / sec: 298.82
Iteration:    900, Loss function: 6.745, Average Loss: 5.092, avg. samples / sec: 309.15
Iteration:    920, Loss function: 6.595, Average Loss: 5.120, avg. samples / sec: 321.47
Iteration:    940, Loss function: 6.699, Average Loss: 5.149, avg. samples / sec: 326.22
Iteration:    960, Loss function: 6.427, Average Loss: 5.178, avg. samples / sec: 327.68
Iteration:    980, Loss function: 6.595, Average Loss: 5.205, avg. samples / sec: 330.61
Iteration:   1000, Loss function: 6.557, Average Loss: 5.229, avg. samples / sec: 337.45
Iteration:   1020, Loss function: 6.433, Average Loss: 5.252, avg. samples / sec: 333.48
:::MLLOG {"namespace": "", "time_ms": 1639150896865, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150896867, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.520, Average Loss: 5.275, avg. samples / sec: 315.02
Iteration:   1060, Loss function: 6.474, Average Loss: 5.298, avg. samples / sec: 313.07
Iteration:   1080, Loss function: 6.259, Average Loss: 5.319, avg. samples / sec: 313.41
Iteration:   1100, Loss function: 6.244, Average Loss: 5.338, avg. samples / sec: 328.40
Iteration:   1120, Loss function: 6.099, Average Loss: 5.358, avg. samples / sec: 321.22
Iteration:   1140, Loss function: 6.505, Average Loss: 5.376, avg. samples / sec: 318.45
Iteration:   1160, Loss function: 6.131, Average Loss: 5.393, avg. samples / sec: 306.35
Iteration:   1180, Loss function: 6.288, Average Loss: 5.409, avg. samples / sec: 324.39
Iteration:   1200, Loss function: 6.255, Average Loss: 5.424, avg. samples / sec: 307.86
Iteration:   1220, Loss function: 6.166, Average Loss: 5.439, avg. samples / sec: 308.77
Iteration:   1240, Loss function: 6.174, Average Loss: 5.452, avg. samples / sec: 259.92
Iteration:   1260, Loss function: 5.979, Average Loss: 5.465, avg. samples / sec: 305.17
Iteration:   1280, Loss function: 5.945, Average Loss: 5.478, avg. samples / sec: 271.87
Iteration:   1300, Loss function: 6.001, Average Loss: 5.490, avg. samples / sec: 249.96
Iteration:   1320, Loss function: 6.100, Average Loss: 5.502, avg. samples / sec: 330.33
Iteration:   1340, Loss function: 5.777, Average Loss: 5.514, avg. samples / sec: 302.73
Iteration:   1360, Loss function: 6.061, Average Loss: 5.526, avg. samples / sec: 326.16
Iteration:   1380, Loss function: 6.209, Average Loss: 5.536, avg. samples / sec: 243.23
Iteration:   1400, Loss function: 6.062, Average Loss: 5.544, avg. samples / sec: 288.93
Iteration:   1420, Loss function: 5.997, Average Loss: 5.552, avg. samples / sec: 284.88
Iteration:   1440, Loss function: 6.385, Average Loss: 5.561, avg. samples / sec: 304.72
Iteration:   1460, Loss function: 6.045, Average Loss: 5.570, avg. samples / sec: 332.55
Iteration:   1480, Loss function: 5.982, Average Loss: 5.577, avg. samples / sec: 297.80
Iteration:   1500, Loss function: 6.012, Average Loss: 5.585, avg. samples / sec: 318.17
Iteration:   1520, Loss function: 6.004, Average Loss: 5.590, avg. samples / sec: 321.43
Iteration:   1540, Loss function: 5.978, Average Loss: 5.595, avg. samples / sec: 325.09
Iteration:   1560, Loss function: 5.590, Average Loss: 5.600, avg. samples / sec: 336.01
Iteration:   1580, Loss function: 5.657, Average Loss: 5.604, avg. samples / sec: 329.96
Iteration:   1600, Loss function: 6.060, Average Loss: 5.610, avg. samples / sec: 264.20
Iteration:   1620, Loss function: 5.831, Average Loss: 5.615, avg. samples / sec: 328.17
Iteration:   1640, Loss function: 5.988, Average Loss: 5.618, avg. samples / sec: 212.03
Iteration:   1660, Loss function: 5.805, Average Loss: 5.622, avg. samples / sec: 290.64
Iteration:   1680, Loss function: 5.760, Average Loss: 5.626, avg. samples / sec: 266.20
Iteration:   1700, Loss function: 5.309, Average Loss: 5.630, avg. samples / sec: 295.66
Iteration:   1720, Loss function: 5.722, Average Loss: 5.632, avg. samples / sec: 291.07
Iteration:   1740, Loss function: 5.783, Average Loss: 5.634, avg. samples / sec: 330.44
Iteration:   1760, Loss function: 5.505, Average Loss: 5.636, avg. samples / sec: 334.17
Iteration:   1780, Loss function: 5.608, Average Loss: 5.637, avg. samples / sec: 316.33
Iteration:   1800, Loss function: 5.480, Average Loss: 5.638, avg. samples / sec: 325.24
Iteration:   1820, Loss function: 5.912, Average Loss: 5.640, avg. samples / sec: 326.21
Iteration:   1840, Loss function: 5.872, Average Loss: 5.641, avg. samples / sec: 317.25
Iteration:   1860, Loss function: 5.588, Average Loss: 5.640, avg. samples / sec: 340.44
Iteration:   1880, Loss function: 5.969, Average Loss: 5.642, avg. samples / sec: 335.87
Iteration:   1900, Loss function: 5.654, Average Loss: 5.643, avg. samples / sec: 320.62
Iteration:   1920, Loss function: 5.786, Average Loss: 5.642, avg. samples / sec: 282.84
Iteration:   1940, Loss function: 5.979, Average Loss: 5.642, avg. samples / sec: 276.70
Iteration:   1960, Loss function: 5.517, Average Loss: 5.642, avg. samples / sec: 247.70
Iteration:   1980, Loss function: 5.713, Average Loss: 5.641, avg. samples / sec: 293.73
Iteration:   2000, Loss function: 5.525, Average Loss: 5.640, avg. samples / sec: 273.71
Iteration:   2020, Loss function: 5.554, Average Loss: 5.638, avg. samples / sec: 256.11
Iteration:   2040, Loss function: 5.864, Average Loss: 5.638, avg. samples / sec: 252.56
:::MLLOG {"namespace": "", "time_ms": 1639151291562, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151291572, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.432, Average Loss: 5.636, avg. samples / sec: 275.73
Iteration:   2080, Loss function: 5.061, Average Loss: 5.633, avg. samples / sec: 303.51
Iteration:   2100, Loss function: 5.511, Average Loss: 5.631, avg. samples / sec: 320.22
Iteration:   2120, Loss function: 5.361, Average Loss: 5.629, avg. samples / sec: 323.83
Iteration:   2140, Loss function: 5.467, Average Loss: 5.626, avg. samples / sec: 325.47
Iteration:   2160, Loss function: 5.388, Average Loss: 5.623, avg. samples / sec: 322.70
Iteration:   2180, Loss function: 5.431, Average Loss: 5.621, avg. samples / sec: 322.04
Iteration:   2200, Loss function: 5.413, Average Loss: 5.618, avg. samples / sec: 248.34
Iteration:   2220, Loss function: 5.481, Average Loss: 5.616, avg. samples / sec: 208.08
Iteration:   2240, Loss function: 5.394, Average Loss: 5.613, avg. samples / sec: 242.38
Iteration:   2260, Loss function: 5.468, Average Loss: 5.610, avg. samples / sec: 303.44
Iteration:   2280, Loss function: 5.157, Average Loss: 5.607, avg. samples / sec: 270.47
Iteration:   2300, Loss function: 5.138, Average Loss: 5.604, avg. samples / sec: 314.15
Iteration:   2320, Loss function: 5.335, Average Loss: 5.602, avg. samples / sec: 245.74
Iteration:   2340, Loss function: 5.564, Average Loss: 5.598, avg. samples / sec: 240.51
Iteration:   2360, Loss function: 5.260, Average Loss: 5.595, avg. samples / sec: 204.44
Iteration:   2380, Loss function: 5.300, Average Loss: 5.592, avg. samples / sec: 282.03
Iteration:   2400, Loss function: 5.578, Average Loss: 5.588, avg. samples / sec: 183.77
Iteration:   2420, Loss function: 5.564, Average Loss: 5.584, avg. samples / sec: 220.97
Iteration:   2440, Loss function: 5.457, Average Loss: 5.582, avg. samples / sec: 236.59
Iteration:   2460, Loss function: 5.149, Average Loss: 5.577, avg. samples / sec: 321.30
Iteration:   2480, Loss function: 5.320, Average Loss: 5.574, avg. samples / sec: 308.20
Iteration:   2500, Loss function: 5.469, Average Loss: 5.569, avg. samples / sec: 311.84
Iteration:   2520, Loss function: 5.250, Average Loss: 5.564, avg. samples / sec: 337.28
Iteration:   2540, Loss function: 5.398, Average Loss: 5.561, avg. samples / sec: 318.42
Iteration:   2560, Loss function: 5.392, Average Loss: 5.556, avg. samples / sec: 334.93
Iteration:   2580, Loss function: 5.185, Average Loss: 5.553, avg. samples / sec: 323.99
Iteration:   2600, Loss function: 5.347, Average Loss: 5.550, avg. samples / sec: 327.71
Iteration:   2620, Loss function: 5.417, Average Loss: 5.545, avg. samples / sec: 337.15
Iteration:   2640, Loss function: 5.221, Average Loss: 5.543, avg. samples / sec: 329.90
Iteration:   2660, Loss function: 5.130, Average Loss: 5.539, avg. samples / sec: 245.70
Iteration:   2680, Loss function: 5.181, Average Loss: 5.536, avg. samples / sec: 255.90
Iteration:   2700, Loss function: 5.244, Average Loss: 5.531, avg. samples / sec: 306.80
Iteration:   2720, Loss function: 5.233, Average Loss: 5.526, avg. samples / sec: 264.75
Iteration:   2740, Loss function: 5.131, Average Loss: 5.522, avg. samples / sec: 325.10
Iteration:   2760, Loss function: 4.975, Average Loss: 5.517, avg. samples / sec: 328.63
Iteration:   2780, Loss function: 5.452, Average Loss: 5.513, avg. samples / sec: 290.43
Iteration:   2800, Loss function: 5.528, Average Loss: 5.508, avg. samples / sec: 256.77
Iteration:   2820, Loss function: 5.474, Average Loss: 5.504, avg. samples / sec: 327.44
Iteration:   2840, Loss function: 5.172, Average Loss: 5.500, avg. samples / sec: 336.16
Iteration:   2860, Loss function: 5.170, Average Loss: 5.495, avg. samples / sec: 333.44
Iteration:   2880, Loss function: 5.286, Average Loss: 5.490, avg. samples / sec: 334.33
Iteration:   2900, Loss function: 5.088, Average Loss: 5.485, avg. samples / sec: 323.34
Iteration:   2920, Loss function: 5.163, Average Loss: 5.480, avg. samples / sec: 332.58
Iteration:   2940, Loss function: 5.016, Average Loss: 5.476, avg. samples / sec: 297.35
Iteration:   2960, Loss function: 5.331, Average Loss: 5.472, avg. samples / sec: 278.16
Iteration:   2980, Loss function: 5.325, Average Loss: 5.468, avg. samples / sec: 328.04
Iteration:   3000, Loss function: 5.411, Average Loss: 5.463, avg. samples / sec: 280.49
Iteration:   3020, Loss function: 5.071, Average Loss: 5.457, avg. samples / sec: 327.65
Iteration:   3040, Loss function: 5.345, Average Loss: 5.452, avg. samples / sec: 250.89
Iteration:   3060, Loss function: 5.005, Average Loss: 5.445, avg. samples / sec: 315.48
Iteration:   3080, Loss function: 4.799, Average Loss: 5.439, avg. samples / sec: 206.64
:::MLLOG {"namespace": "", "time_ms": 1639151702269, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151702270, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.224, Average Loss: 5.434, avg. samples / sec: 192.65
Iteration:   3120, Loss function: 5.067, Average Loss: 5.428, avg. samples / sec: 197.39
Iteration:   3140, Loss function: 5.142, Average Loss: 5.423, avg. samples / sec: 162.76
Iteration:   3160, Loss function: 5.486, Average Loss: 5.418, avg. samples / sec: 318.18
Iteration:   3180, Loss function: 4.983, Average Loss: 5.414, avg. samples / sec: 335.28
Iteration:   3200, Loss function: 5.214, Average Loss: 5.410, avg. samples / sec: 321.30
Iteration:   3220, Loss function: 5.063, Average Loss: 5.404, avg. samples / sec: 313.20
Iteration:   3240, Loss function: 5.196, Average Loss: 5.400, avg. samples / sec: 317.85
Iteration:   3260, Loss function: 5.021, Average Loss: 5.394, avg. samples / sec: 294.00
Iteration:   3280, Loss function: 4.861, Average Loss: 5.388, avg. samples / sec: 323.46
Iteration:   3300, Loss function: 4.771, Average Loss: 5.382, avg. samples / sec: 323.97
Iteration:   3320, Loss function: 5.020, Average Loss: 5.377, avg. samples / sec: 325.57
Iteration:   3340, Loss function: 5.063, Average Loss: 5.374, avg. samples / sec: 326.29
Iteration:   3360, Loss function: 5.215, Average Loss: 5.368, avg. samples / sec: 295.38
Iteration:   3380, Loss function: 5.398, Average Loss: 5.362, avg. samples / sec: 264.67
Iteration:   3400, Loss function: 4.984, Average Loss: 5.357, avg. samples / sec: 207.01
Iteration:   3420, Loss function: 5.196, Average Loss: 5.352, avg. samples / sec: 262.95
Iteration:   3440, Loss function: 4.776, Average Loss: 5.347, avg. samples / sec: 283.28
Iteration:   3460, Loss function: 5.083, Average Loss: 5.342, avg. samples / sec: 324.98
Iteration:   3480, Loss function: 5.012, Average Loss: 5.337, avg. samples / sec: 307.34
Iteration:   3500, Loss function: 5.200, Average Loss: 5.333, avg. samples / sec: 319.88
Iteration:   3520, Loss function: 4.985, Average Loss: 5.329, avg. samples / sec: 311.83
Iteration:   3540, Loss function: 5.110, Average Loss: 5.324, avg. samples / sec: 330.10
Iteration:   3560, Loss function: 5.010, Average Loss: 5.321, avg. samples / sec: 339.60
Iteration:   3580, Loss function: 5.252, Average Loss: 5.317, avg. samples / sec: 302.95
Iteration:   3600, Loss function: 5.216, Average Loss: 5.312, avg. samples / sec: 277.21
Iteration:   3620, Loss function: 4.861, Average Loss: 5.308, avg. samples / sec: 327.66
Iteration:   3640, Loss function: 4.752, Average Loss: 5.303, avg. samples / sec: 295.25
Iteration:   3660, Loss function: 5.129, Average Loss: 5.299, avg. samples / sec: 290.34
Iteration:   3680, Loss function: 5.171, Average Loss: 5.294, avg. samples / sec: 313.21
Iteration:   3700, Loss function: 5.157, Average Loss: 5.289, avg. samples / sec: 328.39
Iteration:   3720, Loss function: 4.896, Average Loss: 5.282, avg. samples / sec: 315.56
Iteration:   3740, Loss function: 5.177, Average Loss: 5.279, avg. samples / sec: 337.36
Iteration:   3760, Loss function: 5.105, Average Loss: 5.275, avg. samples / sec: 289.43
Iteration:   3780, Loss function: 5.042, Average Loss: 5.270, avg. samples / sec: 330.22
Iteration:   3800, Loss function: 5.052, Average Loss: 5.267, avg. samples / sec: 311.95
Iteration:   3820, Loss function: 5.315, Average Loss: 5.262, avg. samples / sec: 336.49
Iteration:   3840, Loss function: 4.830, Average Loss: 5.258, avg. samples / sec: 321.62
Iteration:   3860, Loss function: 4.882, Average Loss: 5.252, avg. samples / sec: 290.01
Iteration:   3880, Loss function: 5.108, Average Loss: 5.247, avg. samples / sec: 306.37
Iteration:   3900, Loss function: 5.129, Average Loss: 5.242, avg. samples / sec: 295.43
Iteration:   3920, Loss function: 5.250, Average Loss: 5.236, avg. samples / sec: 286.15
Iteration:   3940, Loss function: 4.906, Average Loss: 5.231, avg. samples / sec: 322.93
Iteration:   3960, Loss function: 4.853, Average Loss: 5.226, avg. samples / sec: 275.99
Iteration:   3980, Loss function: 4.838, Average Loss: 5.222, avg. samples / sec: 283.62
Iteration:   4000, Loss function: 5.055, Average Loss: 5.217, avg. samples / sec: 297.98
Iteration:   4020, Loss function: 5.100, Average Loss: 5.212, avg. samples / sec: 319.35
Iteration:   4040, Loss function: 5.101, Average Loss: 5.209, avg. samples / sec: 247.70
Iteration:   4060, Loss function: 5.112, Average Loss: 5.204, avg. samples / sec: 304.32
Iteration:   4080, Loss function: 5.232, Average Loss: 5.199, avg. samples / sec: 318.23
Iteration:   4100, Loss function: 5.192, Average Loss: 5.196, avg. samples / sec: 295.50
:::MLLOG {"namespace": "", "time_ms": 1639152105112, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152105125, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.065, Average Loss: 5.192, avg. samples / sec: 270.76
Iteration:   4140, Loss function: 4.967, Average Loss: 5.187, avg. samples / sec: 330.12
Iteration:   4160, Loss function: 5.013, Average Loss: 5.180, avg. samples / sec: 308.32
Iteration:   4180, Loss function: 5.015, Average Loss: 5.175, avg. samples / sec: 330.16
Iteration:   4200, Loss function: 4.963, Average Loss: 5.171, avg. samples / sec: 330.92
Iteration:   4220, Loss function: 4.663, Average Loss: 5.165, avg. samples / sec: 329.96
Iteration:   4240, Loss function: 5.004, Average Loss: 5.160, avg. samples / sec: 303.26
Iteration:   4260, Loss function: 4.962, Average Loss: 5.156, avg. samples / sec: 320.39
Iteration:   4280, Loss function: 4.807, Average Loss: 5.150, avg. samples / sec: 272.49
Iteration:   4300, Loss function: 4.892, Average Loss: 5.144, avg. samples / sec: 257.89
Iteration:   4320, Loss function: 4.712, Average Loss: 5.139, avg. samples / sec: 322.03
Iteration:   4340, Loss function: 4.749, Average Loss: 5.133, avg. samples / sec: 284.50
Iteration:   4360, Loss function: 4.923, Average Loss: 5.129, avg. samples / sec: 271.56
Iteration:   4380, Loss function: 5.048, Average Loss: 5.125, avg. samples / sec: 327.85
Iteration:   4400, Loss function: 4.925, Average Loss: 5.121, avg. samples / sec: 327.93
Iteration:   4420, Loss function: 4.743, Average Loss: 5.116, avg. samples / sec: 317.00
Iteration:   4440, Loss function: 4.955, Average Loss: 5.111, avg. samples / sec: 310.93
Iteration:   4460, Loss function: 5.059, Average Loss: 5.107, avg. samples / sec: 332.36
Iteration:   4480, Loss function: 5.178, Average Loss: 5.104, avg. samples / sec: 320.93
Iteration:   4500, Loss function: 4.916, Average Loss: 5.101, avg. samples / sec: 329.55
Iteration:   4520, Loss function: 4.886, Average Loss: 5.097, avg. samples / sec: 329.30
Iteration:   4540, Loss function: 5.276, Average Loss: 5.092, avg. samples / sec: 329.48
Iteration:   4560, Loss function: 4.796, Average Loss: 5.089, avg. samples / sec: 314.23
Iteration:   4580, Loss function: 4.749, Average Loss: 5.086, avg. samples / sec: 256.21
Iteration:   4600, Loss function: 4.913, Average Loss: 5.083, avg. samples / sec: 307.82
Iteration:   4620, Loss function: 4.744, Average Loss: 5.078, avg. samples / sec: 322.39
Iteration:   4640, Loss function: 4.686, Average Loss: 5.073, avg. samples / sec: 240.09
Iteration:   4660, Loss function: 4.664, Average Loss: 5.069, avg. samples / sec: 309.00
Iteration:   4680, Loss function: 5.196, Average Loss: 5.064, avg. samples / sec: 306.85
Iteration:   4700, Loss function: 4.668, Average Loss: 5.060, avg. samples / sec: 273.13
Iteration:   4720, Loss function: 4.728, Average Loss: 5.055, avg. samples / sec: 217.55
Iteration:   4740, Loss function: 4.627, Average Loss: 5.051, avg. samples / sec: 278.90
Iteration:   4760, Loss function: 4.620, Average Loss: 5.047, avg. samples / sec: 308.24
Iteration:   4780, Loss function: 5.023, Average Loss: 5.043, avg. samples / sec: 326.35
Iteration:   4800, Loss function: 4.688, Average Loss: 5.040, avg. samples / sec: 275.49
Iteration:   4820, Loss function: 4.879, Average Loss: 5.036, avg. samples / sec: 244.07
Iteration:   4840, Loss function: 5.316, Average Loss: 5.032, avg. samples / sec: 257.55
Iteration:   4860, Loss function: 4.650, Average Loss: 5.028, avg. samples / sec: 251.31
Iteration:   4880, Loss function: 5.264, Average Loss: 5.024, avg. samples / sec: 289.90
Iteration:   4900, Loss function: 4.526, Average Loss: 5.020, avg. samples / sec: 289.47
Iteration:   4920, Loss function: 4.580, Average Loss: 5.016, avg. samples / sec: 270.07
Iteration:   4940, Loss function: 4.693, Average Loss: 5.012, avg. samples / sec: 286.05
Iteration:   4960, Loss function: 4.644, Average Loss: 5.009, avg. samples / sec: 313.42
Iteration:   4980, Loss function: 4.491, Average Loss: 5.004, avg. samples / sec: 329.60
Iteration:   5000, Loss function: 4.777, Average Loss: 5.001, avg. samples / sec: 327.55
Iteration:   5020, Loss function: 5.063, Average Loss: 4.997, avg. samples / sec: 331.88
Iteration:   5040, Loss function: 4.741, Average Loss: 4.994, avg. samples / sec: 322.14
Iteration:   5060, Loss function: 4.844, Average Loss: 4.991, avg. samples / sec: 311.75
Iteration:   5080, Loss function: 4.498, Average Loss: 4.987, avg. samples / sec: 299.99
Iteration:   5100, Loss function: 4.624, Average Loss: 4.984, avg. samples / sec: 309.56
Iteration:   5120, Loss function: 4.626, Average Loss: 4.981, avg. samples / sec: 200.69
Iteration:   5140, Loss function: 4.809, Average Loss: 4.977, avg. samples / sec: 330.13
:::MLLOG {"namespace": "", "time_ms": 1639152501512, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 85.05 s
:::MLLOG {"namespace": "", "time_ms": 1639152586685, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152586687, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152586687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.74s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10119
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20941
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.08687
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18018
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13203
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19281
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20522
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10119 AP goal: 0.10000
Iteration:   5160, Loss function: 4.808, Average Loss: 4.974, avg. samples / sec: 24.20
:::MLLOG {"namespace": "", "time_ms": 1639152594642, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594643, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10118760164126724, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594643, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152596154, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152601
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:01 PM'
START TIMING RUN WAS 2021-12-10 03:32:41 PM
ENDING TIMING RUN AT 2021-12-10 04:10:01 PM
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:41 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:01 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
+ result=2240
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-10 03:32:41 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2240,nvidia,2021-12-10 03:32:41 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
