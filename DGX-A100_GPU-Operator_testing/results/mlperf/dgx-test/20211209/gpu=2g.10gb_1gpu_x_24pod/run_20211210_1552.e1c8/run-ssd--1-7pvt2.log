+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-7pvt2.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-7pvt2.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-7pvt2.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db'
Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150358
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:38 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:38 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:38 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-7pvt2 to the sync file ...
run-ssd--1-7pvt2 Found 10 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
     9	run-ssd--1-pkxwz
    10	run-ssd--1-7pvt2
Fri Dec 10 15:32:43 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365010, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365149, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2696039478, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2696039478
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150367253, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150367253, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150367258, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150367258, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472011, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472011, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150473777, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473778, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474218, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474219, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474221, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.541, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.089, Average Loss: 0.453, avg. samples / sec: 286.17
Iteration:     40, Loss function: 20.834, Average Loss: 0.855, avg. samples / sec: 295.47
Iteration:     60, Loss function: 20.306, Average Loss: 1.244, avg. samples / sec: 257.54
Iteration:     80, Loss function: 19.388, Average Loss: 1.613, avg. samples / sec: 267.67
Iteration:    100, Loss function: 13.318, Average Loss: 1.911, avg. samples / sec: 260.99
Iteration:    120, Loss function: 10.374, Average Loss: 2.101, avg. samples / sec: 275.89
Iteration:    140, Loss function: 9.660, Average Loss: 2.255, avg. samples / sec: 249.54
Iteration:    160, Loss function: 8.919, Average Loss: 2.394, avg. samples / sec: 271.91
Iteration:    180, Loss function: 8.828, Average Loss: 2.523, avg. samples / sec: 286.12
Iteration:    200, Loss function: 8.743, Average Loss: 2.649, avg. samples / sec: 284.92
Iteration:    220, Loss function: 8.555, Average Loss: 2.771, avg. samples / sec: 275.88
Iteration:    240, Loss function: 8.595, Average Loss: 2.890, avg. samples / sec: 277.82
Iteration:    260, Loss function: 8.769, Average Loss: 3.005, avg. samples / sec: 257.24
Iteration:    280, Loss function: 8.511, Average Loss: 3.117, avg. samples / sec: 290.56
Iteration:    300, Loss function: 8.426, Average Loss: 3.225, avg. samples / sec: 306.78
Iteration:    320, Loss function: 8.502, Average Loss: 3.328, avg. samples / sec: 294.52
Iteration:    340, Loss function: 8.252, Average Loss: 3.426, avg. samples / sec: 289.22
Iteration:    360, Loss function: 7.980, Average Loss: 3.521, avg. samples / sec: 269.97
Iteration:    380, Loss function: 7.979, Average Loss: 3.612, avg. samples / sec: 259.07
Iteration:    400, Loss function: 8.082, Average Loss: 3.697, avg. samples / sec: 289.10
Iteration:    420, Loss function: 7.731, Average Loss: 3.781, avg. samples / sec: 234.71
Iteration:    440, Loss function: 7.750, Average Loss: 3.861, avg. samples / sec: 296.75
Iteration:    460, Loss function: 7.811, Average Loss: 3.939, avg. samples / sec: 221.87
Iteration:    480, Loss function: 7.401, Average Loss: 4.013, avg. samples / sec: 288.59
Iteration:    500, Loss function: 7.513, Average Loss: 4.085, avg. samples / sec: 311.74
Iteration:    520, Loss function: 7.622, Average Loss: 4.153, avg. samples / sec: 318.75
Iteration:    540, Loss function: 7.565, Average Loss: 4.219, avg. samples / sec: 302.20
Iteration:    560, Loss function: 7.268, Average Loss: 4.282, avg. samples / sec: 175.26
Iteration:    580, Loss function: 7.158, Average Loss: 4.345, avg. samples / sec: 280.39
Iteration:    600, Loss function: 7.305, Average Loss: 4.404, avg. samples / sec: 313.21
Iteration:    620, Loss function: 7.138, Average Loss: 4.461, avg. samples / sec: 311.57
Iteration:    640, Loss function: 7.275, Average Loss: 4.516, avg. samples / sec: 308.74
Iteration:    660, Loss function: 7.290, Average Loss: 4.570, avg. samples / sec: 326.21
Iteration:    680, Loss function: 7.375, Average Loss: 4.622, avg. samples / sec: 318.81
Iteration:    700, Loss function: 6.785, Average Loss: 4.670, avg. samples / sec: 337.49
Iteration:    720, Loss function: 6.921, Average Loss: 4.719, avg. samples / sec: 327.38
Iteration:    740, Loss function: 6.860, Average Loss: 4.764, avg. samples / sec: 314.09
Iteration:    760, Loss function: 6.937, Average Loss: 4.808, avg. samples / sec: 311.96
Iteration:    780, Loss function: 6.847, Average Loss: 4.852, avg. samples / sec: 328.05
Iteration:    800, Loss function: 7.129, Average Loss: 4.890, avg. samples / sec: 322.59
Iteration:    820, Loss function: 6.917, Average Loss: 4.928, avg. samples / sec: 329.24
Iteration:    840, Loss function: 6.662, Average Loss: 4.964, avg. samples / sec: 325.01
Iteration:    860, Loss function: 6.795, Average Loss: 4.999, avg. samples / sec: 305.96
Iteration:    880, Loss function: 6.802, Average Loss: 5.031, avg. samples / sec: 264.90
Iteration:    900, Loss function: 6.993, Average Loss: 5.063, avg. samples / sec: 310.74
Iteration:    920, Loss function: 6.529, Average Loss: 5.092, avg. samples / sec: 307.98
Iteration:    940, Loss function: 6.769, Average Loss: 5.122, avg. samples / sec: 310.20
Iteration:    960, Loss function: 6.365, Average Loss: 5.151, avg. samples / sec: 314.31
Iteration:    980, Loss function: 6.555, Average Loss: 5.179, avg. samples / sec: 320.39
Iteration:   1000, Loss function: 6.765, Average Loss: 5.205, avg. samples / sec: 207.71
Iteration:   1020, Loss function: 6.253, Average Loss: 5.229, avg. samples / sec: 327.98
:::MLLOG {"namespace": "", "time_ms": 1639150883829, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150883842, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.502, Average Loss: 5.253, avg. samples / sec: 215.48
Iteration:   1060, Loss function: 6.175, Average Loss: 5.276, avg. samples / sec: 164.35
Iteration:   1080, Loss function: 6.432, Average Loss: 5.299, avg. samples / sec: 237.34
Iteration:   1100, Loss function: 6.084, Average Loss: 5.319, avg. samples / sec: 182.83
Iteration:   1120, Loss function: 6.235, Average Loss: 5.339, avg. samples / sec: 236.30
Iteration:   1140, Loss function: 6.264, Average Loss: 5.358, avg. samples / sec: 261.54
Iteration:   1160, Loss function: 6.064, Average Loss: 5.376, avg. samples / sec: 278.29
Iteration:   1180, Loss function: 6.218, Average Loss: 5.392, avg. samples / sec: 313.76
Iteration:   1200, Loss function: 6.172, Average Loss: 5.409, avg. samples / sec: 317.74
Iteration:   1220, Loss function: 6.398, Average Loss: 5.425, avg. samples / sec: 307.51
Iteration:   1240, Loss function: 6.079, Average Loss: 5.438, avg. samples / sec: 323.99
Iteration:   1260, Loss function: 5.947, Average Loss: 5.451, avg. samples / sec: 318.69
Iteration:   1280, Loss function: 5.975, Average Loss: 5.464, avg. samples / sec: 308.36
Iteration:   1300, Loss function: 6.263, Average Loss: 5.477, avg. samples / sec: 321.87
Iteration:   1320, Loss function: 6.137, Average Loss: 5.489, avg. samples / sec: 318.14
Iteration:   1340, Loss function: 5.881, Average Loss: 5.500, avg. samples / sec: 312.27
Iteration:   1360, Loss function: 5.940, Average Loss: 5.510, avg. samples / sec: 329.01
Iteration:   1380, Loss function: 6.060, Average Loss: 5.520, avg. samples / sec: 323.18
Iteration:   1400, Loss function: 6.114, Average Loss: 5.529, avg. samples / sec: 324.85
Iteration:   1420, Loss function: 5.953, Average Loss: 5.538, avg. samples / sec: 303.62
Iteration:   1440, Loss function: 6.484, Average Loss: 5.546, avg. samples / sec: 327.39
Iteration:   1460, Loss function: 6.043, Average Loss: 5.555, avg. samples / sec: 321.19
Iteration:   1480, Loss function: 5.918, Average Loss: 5.563, avg. samples / sec: 330.10
Iteration:   1500, Loss function: 6.177, Average Loss: 5.572, avg. samples / sec: 324.80
Iteration:   1520, Loss function: 6.080, Average Loss: 5.578, avg. samples / sec: 261.14
Iteration:   1540, Loss function: 5.976, Average Loss: 5.583, avg. samples / sec: 209.59
Iteration:   1560, Loss function: 5.844, Average Loss: 5.588, avg. samples / sec: 271.37
Iteration:   1580, Loss function: 5.590, Average Loss: 5.594, avg. samples / sec: 311.98
Iteration:   1600, Loss function: 6.039, Average Loss: 5.600, avg. samples / sec: 332.82
Iteration:   1620, Loss function: 5.786, Average Loss: 5.605, avg. samples / sec: 314.10
Iteration:   1640, Loss function: 5.882, Average Loss: 5.609, avg. samples / sec: 327.12
Iteration:   1660, Loss function: 5.840, Average Loss: 5.613, avg. samples / sec: 332.06
Iteration:   1680, Loss function: 5.588, Average Loss: 5.616, avg. samples / sec: 315.01
Iteration:   1700, Loss function: 5.325, Average Loss: 5.619, avg. samples / sec: 311.67
Iteration:   1720, Loss function: 5.580, Average Loss: 5.622, avg. samples / sec: 322.11
Iteration:   1740, Loss function: 5.885, Average Loss: 5.624, avg. samples / sec: 329.95
Iteration:   1760, Loss function: 5.417, Average Loss: 5.625, avg. samples / sec: 335.62
Iteration:   1780, Loss function: 5.519, Average Loss: 5.627, avg. samples / sec: 329.60
Iteration:   1800, Loss function: 5.725, Average Loss: 5.630, avg. samples / sec: 271.83
Iteration:   1820, Loss function: 5.957, Average Loss: 5.632, avg. samples / sec: 286.05
Iteration:   1840, Loss function: 5.948, Average Loss: 5.633, avg. samples / sec: 240.23
Iteration:   1860, Loss function: 5.680, Average Loss: 5.633, avg. samples / sec: 225.46
Iteration:   1880, Loss function: 5.898, Average Loss: 5.634, avg. samples / sec: 291.78
Iteration:   1900, Loss function: 5.787, Average Loss: 5.636, avg. samples / sec: 311.32
Iteration:   1920, Loss function: 5.664, Average Loss: 5.636, avg. samples / sec: 335.52
Iteration:   1940, Loss function: 5.860, Average Loss: 5.635, avg. samples / sec: 313.23
Iteration:   1960, Loss function: 5.538, Average Loss: 5.634, avg. samples / sec: 284.38
Iteration:   1980, Loss function: 5.547, Average Loss: 5.633, avg. samples / sec: 211.50
Iteration:   2000, Loss function: 5.634, Average Loss: 5.632, avg. samples / sec: 238.10
Iteration:   2020, Loss function: 5.638, Average Loss: 5.632, avg. samples / sec: 321.20
Iteration:   2040, Loss function: 5.725, Average Loss: 5.631, avg. samples / sec: 291.30
:::MLLOG {"namespace": "", "time_ms": 1639151295840, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151295842, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.487, Average Loss: 5.630, avg. samples / sec: 312.37
Iteration:   2080, Loss function: 5.086, Average Loss: 5.628, avg. samples / sec: 272.51
Iteration:   2100, Loss function: 5.403, Average Loss: 5.626, avg. samples / sec: 334.09
Iteration:   2120, Loss function: 5.218, Average Loss: 5.624, avg. samples / sec: 318.19
Iteration:   2140, Loss function: 5.497, Average Loss: 5.621, avg. samples / sec: 324.92
Iteration:   2160, Loss function: 5.597, Average Loss: 5.619, avg. samples / sec: 329.41
Iteration:   2180, Loss function: 5.352, Average Loss: 5.616, avg. samples / sec: 289.37
Iteration:   2200, Loss function: 5.386, Average Loss: 5.611, avg. samples / sec: 336.95
Iteration:   2220, Loss function: 5.481, Average Loss: 5.609, avg. samples / sec: 322.29
Iteration:   2240, Loss function: 5.401, Average Loss: 5.607, avg. samples / sec: 315.11
Iteration:   2260, Loss function: 5.514, Average Loss: 5.604, avg. samples / sec: 300.72
Iteration:   2280, Loss function: 5.130, Average Loss: 5.601, avg. samples / sec: 301.95
Iteration:   2300, Loss function: 5.254, Average Loss: 5.598, avg. samples / sec: 316.06
Iteration:   2320, Loss function: 5.242, Average Loss: 5.595, avg. samples / sec: 299.10
Iteration:   2340, Loss function: 5.547, Average Loss: 5.593, avg. samples / sec: 339.15
Iteration:   2360, Loss function: 5.321, Average Loss: 5.589, avg. samples / sec: 319.94
Iteration:   2380, Loss function: 5.551, Average Loss: 5.585, avg. samples / sec: 308.16
Iteration:   2400, Loss function: 5.553, Average Loss: 5.583, avg. samples / sec: 331.93
Iteration:   2420, Loss function: 5.603, Average Loss: 5.580, avg. samples / sec: 325.20
Iteration:   2440, Loss function: 5.572, Average Loss: 5.577, avg. samples / sec: 335.81
Iteration:   2460, Loss function: 5.247, Average Loss: 5.574, avg. samples / sec: 331.83
Iteration:   2480, Loss function: 5.438, Average Loss: 5.570, avg. samples / sec: 325.59
Iteration:   2500, Loss function: 5.407, Average Loss: 5.567, avg. samples / sec: 337.83
Iteration:   2520, Loss function: 5.404, Average Loss: 5.562, avg. samples / sec: 328.47
Iteration:   2540, Loss function: 5.367, Average Loss: 5.559, avg. samples / sec: 295.46
Iteration:   2560, Loss function: 5.287, Average Loss: 5.556, avg. samples / sec: 265.74
Iteration:   2580, Loss function: 5.456, Average Loss: 5.553, avg. samples / sec: 307.51
Iteration:   2600, Loss function: 5.502, Average Loss: 5.550, avg. samples / sec: 293.53
Iteration:   2620, Loss function: 5.572, Average Loss: 5.545, avg. samples / sec: 290.01
Iteration:   2640, Loss function: 5.190, Average Loss: 5.543, avg. samples / sec: 308.20
Iteration:   2660, Loss function: 5.207, Average Loss: 5.540, avg. samples / sec: 338.45
Iteration:   2680, Loss function: 5.225, Average Loss: 5.536, avg. samples / sec: 329.26
Iteration:   2700, Loss function: 5.132, Average Loss: 5.532, avg. samples / sec: 328.69
Iteration:   2720, Loss function: 5.278, Average Loss: 5.527, avg. samples / sec: 296.00
Iteration:   2740, Loss function: 5.082, Average Loss: 5.522, avg. samples / sec: 237.47
Iteration:   2760, Loss function: 4.880, Average Loss: 5.517, avg. samples / sec: 223.44
Iteration:   2780, Loss function: 5.677, Average Loss: 5.514, avg. samples / sec: 190.38
Iteration:   2800, Loss function: 5.261, Average Loss: 5.509, avg. samples / sec: 248.54
Iteration:   2820, Loss function: 5.496, Average Loss: 5.505, avg. samples / sec: 271.31
Iteration:   2840, Loss function: 5.092, Average Loss: 5.500, avg. samples / sec: 302.82
Iteration:   2860, Loss function: 5.074, Average Loss: 5.495, avg. samples / sec: 330.18
Iteration:   2880, Loss function: 5.292, Average Loss: 5.491, avg. samples / sec: 324.80
Iteration:   2900, Loss function: 5.106, Average Loss: 5.486, avg. samples / sec: 321.74
Iteration:   2920, Loss function: 5.299, Average Loss: 5.481, avg. samples / sec: 305.99
Iteration:   2940, Loss function: 5.006, Average Loss: 5.478, avg. samples / sec: 314.72
Iteration:   2960, Loss function: 5.277, Average Loss: 5.473, avg. samples / sec: 322.34
Iteration:   2980, Loss function: 5.330, Average Loss: 5.470, avg. samples / sec: 319.93
Iteration:   3000, Loss function: 5.480, Average Loss: 5.466, avg. samples / sec: 322.46
Iteration:   3020, Loss function: 5.144, Average Loss: 5.460, avg. samples / sec: 256.24
Iteration:   3040, Loss function: 5.225, Average Loss: 5.455, avg. samples / sec: 291.79
Iteration:   3060, Loss function: 4.961, Average Loss: 5.449, avg. samples / sec: 338.15
Iteration:   3080, Loss function: 4.922, Average Loss: 5.443, avg. samples / sec: 304.46
:::MLLOG {"namespace": "", "time_ms": 1639151683209, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151683211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.107, Average Loss: 5.438, avg. samples / sec: 217.99
Iteration:   3120, Loss function: 4.909, Average Loss: 5.432, avg. samples / sec: 256.43
Iteration:   3140, Loss function: 4.965, Average Loss: 5.427, avg. samples / sec: 250.36
Iteration:   3160, Loss function: 5.331, Average Loss: 5.421, avg. samples / sec: 270.82
Iteration:   3180, Loss function: 4.964, Average Loss: 5.416, avg. samples / sec: 287.01
Iteration:   3200, Loss function: 5.244, Average Loss: 5.412, avg. samples / sec: 225.63
Iteration:   3220, Loss function: 5.076, Average Loss: 5.407, avg. samples / sec: 321.26
Iteration:   3240, Loss function: 5.290, Average Loss: 5.401, avg. samples / sec: 268.73
Iteration:   3260, Loss function: 5.003, Average Loss: 5.395, avg. samples / sec: 308.64
Iteration:   3280, Loss function: 4.809, Average Loss: 5.389, avg. samples / sec: 300.40
Iteration:   3300, Loss function: 4.913, Average Loss: 5.383, avg. samples / sec: 305.02
Iteration:   3320, Loss function: 4.902, Average Loss: 5.378, avg. samples / sec: 311.77
Iteration:   3340, Loss function: 5.081, Average Loss: 5.374, avg. samples / sec: 298.39
Iteration:   3360, Loss function: 5.053, Average Loss: 5.367, avg. samples / sec: 314.22
Iteration:   3380, Loss function: 5.211, Average Loss: 5.361, avg. samples / sec: 311.43
Iteration:   3400, Loss function: 5.002, Average Loss: 5.356, avg. samples / sec: 295.74
Iteration:   3420, Loss function: 5.272, Average Loss: 5.351, avg. samples / sec: 295.43
Iteration:   3440, Loss function: 4.875, Average Loss: 5.346, avg. samples / sec: 329.55
Iteration:   3460, Loss function: 5.066, Average Loss: 5.341, avg. samples / sec: 325.33
Iteration:   3480, Loss function: 5.208, Average Loss: 5.336, avg. samples / sec: 328.75
Iteration:   3500, Loss function: 5.300, Average Loss: 5.332, avg. samples / sec: 300.96
Iteration:   3520, Loss function: 4.984, Average Loss: 5.328, avg. samples / sec: 282.57
Iteration:   3540, Loss function: 4.902, Average Loss: 5.323, avg. samples / sec: 315.96
Iteration:   3560, Loss function: 4.909, Average Loss: 5.319, avg. samples / sec: 211.92
Iteration:   3580, Loss function: 5.113, Average Loss: 5.315, avg. samples / sec: 241.32
Iteration:   3600, Loss function: 5.000, Average Loss: 5.309, avg. samples / sec: 302.68
Iteration:   3620, Loss function: 4.743, Average Loss: 5.304, avg. samples / sec: 223.70
Iteration:   3640, Loss function: 4.913, Average Loss: 5.299, avg. samples / sec: 268.92
Iteration:   3660, Loss function: 5.104, Average Loss: 5.294, avg. samples / sec: 261.95
Iteration:   3680, Loss function: 5.122, Average Loss: 5.288, avg. samples / sec: 288.47
Iteration:   3700, Loss function: 4.997, Average Loss: 5.284, avg. samples / sec: 326.83
Iteration:   3720, Loss function: 4.917, Average Loss: 5.277, avg. samples / sec: 296.51
Iteration:   3740, Loss function: 5.066, Average Loss: 5.272, avg. samples / sec: 298.98
Iteration:   3760, Loss function: 5.053, Average Loss: 5.268, avg. samples / sec: 306.50
Iteration:   3780, Loss function: 5.062, Average Loss: 5.263, avg. samples / sec: 298.60
Iteration:   3800, Loss function: 5.122, Average Loss: 5.259, avg. samples / sec: 328.57
Iteration:   3820, Loss function: 5.272, Average Loss: 5.255, avg. samples / sec: 290.85
Iteration:   3840, Loss function: 4.902, Average Loss: 5.250, avg. samples / sec: 332.36
Iteration:   3860, Loss function: 4.974, Average Loss: 5.244, avg. samples / sec: 298.44
Iteration:   3880, Loss function: 5.032, Average Loss: 5.238, avg. samples / sec: 316.83
Iteration:   3900, Loss function: 5.035, Average Loss: 5.233, avg. samples / sec: 321.38
Iteration:   3920, Loss function: 4.963, Average Loss: 5.227, avg. samples / sec: 306.66
Iteration:   3940, Loss function: 5.118, Average Loss: 5.223, avg. samples / sec: 323.93
Iteration:   3960, Loss function: 4.816, Average Loss: 5.218, avg. samples / sec: 275.69
Iteration:   3980, Loss function: 4.741, Average Loss: 5.213, avg. samples / sec: 259.48
Iteration:   4000, Loss function: 5.240, Average Loss: 5.210, avg. samples / sec: 290.19
Iteration:   4020, Loss function: 5.000, Average Loss: 5.205, avg. samples / sec: 316.49
Iteration:   4040, Loss function: 5.324, Average Loss: 5.202, avg. samples / sec: 296.47
Iteration:   4060, Loss function: 5.187, Average Loss: 5.199, avg. samples / sec: 253.30
Iteration:   4080, Loss function: 5.164, Average Loss: 5.195, avg. samples / sec: 316.92
Iteration:   4100, Loss function: 5.028, Average Loss: 5.191, avg. samples / sec: 314.10
:::MLLOG {"namespace": "", "time_ms": 1639152089902, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152089904, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.960, Average Loss: 5.188, avg. samples / sec: 320.68
Iteration:   4140, Loss function: 4.974, Average Loss: 5.183, avg. samples / sec: 223.74
Iteration:   4160, Loss function: 4.952, Average Loss: 5.176, avg. samples / sec: 298.13
Iteration:   4180, Loss function: 4.937, Average Loss: 5.170, avg. samples / sec: 227.15
Iteration:   4200, Loss function: 4.776, Average Loss: 5.166, avg. samples / sec: 232.85
Iteration:   4220, Loss function: 4.768, Average Loss: 5.162, avg. samples / sec: 320.76
Iteration:   4240, Loss function: 4.825, Average Loss: 5.157, avg. samples / sec: 331.25
Iteration:   4260, Loss function: 4.990, Average Loss: 5.152, avg. samples / sec: 317.44
Iteration:   4280, Loss function: 5.081, Average Loss: 5.146, avg. samples / sec: 328.78
Iteration:   4300, Loss function: 4.686, Average Loss: 5.140, avg. samples / sec: 322.89
Iteration:   4320, Loss function: 4.754, Average Loss: 5.135, avg. samples / sec: 326.55
Iteration:   4340, Loss function: 4.820, Average Loss: 5.129, avg. samples / sec: 307.34
Iteration:   4360, Loss function: 4.939, Average Loss: 5.123, avg. samples / sec: 248.18
Iteration:   4380, Loss function: 5.120, Average Loss: 5.120, avg. samples / sec: 321.27
Iteration:   4400, Loss function: 5.025, Average Loss: 5.116, avg. samples / sec: 305.79
Iteration:   4420, Loss function: 5.044, Average Loss: 5.111, avg. samples / sec: 299.04
Iteration:   4440, Loss function: 4.897, Average Loss: 5.107, avg. samples / sec: 336.86
Iteration:   4460, Loss function: 5.028, Average Loss: 5.103, avg. samples / sec: 283.81
Iteration:   4480, Loss function: 4.918, Average Loss: 5.100, avg. samples / sec: 322.23
Iteration:   4500, Loss function: 4.913, Average Loss: 5.097, avg. samples / sec: 326.53
Iteration:   4520, Loss function: 4.669, Average Loss: 5.093, avg. samples / sec: 322.36
Iteration:   4540, Loss function: 5.046, Average Loss: 5.088, avg. samples / sec: 322.29
Iteration:   4560, Loss function: 4.813, Average Loss: 5.083, avg. samples / sec: 317.43
Iteration:   4580, Loss function: 4.718, Average Loss: 5.081, avg. samples / sec: 328.73
Iteration:   4600, Loss function: 4.842, Average Loss: 5.078, avg. samples / sec: 268.55
Iteration:   4620, Loss function: 4.762, Average Loss: 5.074, avg. samples / sec: 286.28
Iteration:   4640, Loss function: 4.823, Average Loss: 5.068, avg. samples / sec: 308.28
Iteration:   4660, Loss function: 4.922, Average Loss: 5.064, avg. samples / sec: 181.56
Iteration:   4680, Loss function: 5.366, Average Loss: 5.061, avg. samples / sec: 304.54
Iteration:   4700, Loss function: 4.785, Average Loss: 5.057, avg. samples / sec: 239.25
Iteration:   4720, Loss function: 4.643, Average Loss: 5.052, avg. samples / sec: 321.72
Iteration:   4740, Loss function: 4.834, Average Loss: 5.049, avg. samples / sec: 328.46
Iteration:   4760, Loss function: 4.776, Average Loss: 5.045, avg. samples / sec: 319.70
Iteration:   4780, Loss function: 5.072, Average Loss: 5.041, avg. samples / sec: 292.98
Iteration:   4800, Loss function: 4.835, Average Loss: 5.039, avg. samples / sec: 254.88
Iteration:   4820, Loss function: 4.851, Average Loss: 5.035, avg. samples / sec: 259.28
Iteration:   4840, Loss function: 4.931, Average Loss: 5.032, avg. samples / sec: 271.35
Iteration:   4860, Loss function: 4.705, Average Loss: 5.027, avg. samples / sec: 295.29
Iteration:   4880, Loss function: 5.042, Average Loss: 5.023, avg. samples / sec: 319.18
Iteration:   4900, Loss function: 4.692, Average Loss: 5.019, avg. samples / sec: 304.16
Iteration:   4920, Loss function: 4.747, Average Loss: 5.015, avg. samples / sec: 311.56
Iteration:   4940, Loss function: 4.812, Average Loss: 5.010, avg. samples / sec: 302.08
Iteration:   4960, Loss function: 4.715, Average Loss: 5.007, avg. samples / sec: 330.98
Iteration:   4980, Loss function: 4.596, Average Loss: 5.003, avg. samples / sec: 250.53
Iteration:   5000, Loss function: 4.858, Average Loss: 5.000, avg. samples / sec: 187.61
Iteration:   5020, Loss function: 5.160, Average Loss: 4.997, avg. samples / sec: 267.57
Iteration:   5040, Loss function: 4.922, Average Loss: 4.994, avg. samples / sec: 290.89
Iteration:   5060, Loss function: 4.774, Average Loss: 4.991, avg. samples / sec: 267.11
Iteration:   5080, Loss function: 4.590, Average Loss: 4.987, avg. samples / sec: 274.29
Iteration:   5100, Loss function: 4.981, Average Loss: 4.984, avg. samples / sec: 317.13
Iteration:   5120, Loss function: 4.566, Average Loss: 4.982, avg. samples / sec: 331.20
Iteration:   5140, Loss function: 4.847, Average Loss: 4.978, avg. samples / sec: 271.06
:::MLLOG {"namespace": "", "time_ms": 1639152498282, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.03 s
:::MLLOG {"namespace": "", "time_ms": 1639152590423, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152590493, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590496, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.91s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10453
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20862
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09522
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18508
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20837
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20837
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10453 AP goal: 0.10000
Iteration:   5160, Loss function: 4.941, Average Loss: 4.973, avg. samples / sec: 22.67
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10453383408386449, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152599474, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:02 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:02 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150365010, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150365149, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2696039478, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2696039478
:::MLLOG {"namespace": "", "time_ms": 1639150367253, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150367253, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150367258, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150367258, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150367259, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150472011, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150472011, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150473777, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473778, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474218, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474219, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474221, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.541, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.089, Average Loss: 0.453, avg. samples / sec: 286.17
Iteration:     40, Loss function: 20.834, Average Loss: 0.855, avg. samples / sec: 295.47
Iteration:     60, Loss function: 20.306, Average Loss: 1.244, avg. samples / sec: 257.54
Iteration:     80, Loss function: 19.388, Average Loss: 1.613, avg. samples / sec: 267.67
Iteration:    100, Loss function: 13.318, Average Loss: 1.911, avg. samples / sec: 260.99
Iteration:    120, Loss function: 10.374, Average Loss: 2.101, avg. samples / sec: 275.89
Iteration:    140, Loss function: 9.660, Average Loss: 2.255, avg. samples / sec: 249.54
Iteration:    160, Loss function: 8.919, Average Loss: 2.394, avg. samples / sec: 271.91
Iteration:    180, Loss function: 8.828, Average Loss: 2.523, avg. samples / sec: 286.12
Iteration:    200, Loss function: 8.743, Average Loss: 2.649, avg. samples / sec: 284.92
Iteration:    220, Loss function: 8.555, Average Loss: 2.771, avg. samples / sec: 275.88
Iteration:    240, Loss function: 8.595, Average Loss: 2.890, avg. samples / sec: 277.82
Iteration:    260, Loss function: 8.769, Average Loss: 3.005, avg. samples / sec: 257.24
Iteration:    280, Loss function: 8.511, Average Loss: 3.117, avg. samples / sec: 290.56
Iteration:    300, Loss function: 8.426, Average Loss: 3.225, avg. samples / sec: 306.78
Iteration:    320, Loss function: 8.502, Average Loss: 3.328, avg. samples / sec: 294.52
Iteration:    340, Loss function: 8.252, Average Loss: 3.426, avg. samples / sec: 289.22
Iteration:    360, Loss function: 7.980, Average Loss: 3.521, avg. samples / sec: 269.97
Iteration:    380, Loss function: 7.979, Average Loss: 3.612, avg. samples / sec: 259.07
Iteration:    400, Loss function: 8.082, Average Loss: 3.697, avg. samples / sec: 289.10
Iteration:    420, Loss function: 7.731, Average Loss: 3.781, avg. samples / sec: 234.71
Iteration:    440, Loss function: 7.750, Average Loss: 3.861, avg. samples / sec: 296.75
Iteration:    460, Loss function: 7.811, Average Loss: 3.939, avg. samples / sec: 221.87
Iteration:    480, Loss function: 7.401, Average Loss: 4.013, avg. samples / sec: 288.59
Iteration:    500, Loss function: 7.513, Average Loss: 4.085, avg. samples / sec: 311.74
Iteration:    520, Loss function: 7.622, Average Loss: 4.153, avg. samples / sec: 318.75
Iteration:    540, Loss function: 7.565, Average Loss: 4.219, avg. samples / sec: 302.20
Iteration:    560, Loss function: 7.268, Average Loss: 4.282, avg. samples / sec: 175.26
Iteration:    580, Loss function: 7.158, Average Loss: 4.345, avg. samples / sec: 280.39
Iteration:    600, Loss function: 7.305, Average Loss: 4.404, avg. samples / sec: 313.21
Iteration:    620, Loss function: 7.138, Average Loss: 4.461, avg. samples / sec: 311.57
Iteration:    640, Loss function: 7.275, Average Loss: 4.516, avg. samples / sec: 308.74
Iteration:    660, Loss function: 7.290, Average Loss: 4.570, avg. samples / sec: 326.21
Iteration:    680, Loss function: 7.375, Average Loss: 4.622, avg. samples / sec: 318.81
Iteration:    700, Loss function: 6.785, Average Loss: 4.670, avg. samples / sec: 337.49
Iteration:    720, Loss function: 6.921, Average Loss: 4.719, avg. samples / sec: 327.38
Iteration:    740, Loss function: 6.860, Average Loss: 4.764, avg. samples / sec: 314.09
Iteration:    760, Loss function: 6.937, Average Loss: 4.808, avg. samples / sec: 311.96
Iteration:    780, Loss function: 6.847, Average Loss: 4.852, avg. samples / sec: 328.05
Iteration:    800, Loss function: 7.129, Average Loss: 4.890, avg. samples / sec: 322.59
Iteration:    820, Loss function: 6.917, Average Loss: 4.928, avg. samples / sec: 329.24
Iteration:    840, Loss function: 6.662, Average Loss: 4.964, avg. samples / sec: 325.01
Iteration:    860, Loss function: 6.795, Average Loss: 4.999, avg. samples / sec: 305.96
Iteration:    880, Loss function: 6.802, Average Loss: 5.031, avg. samples / sec: 264.90
Iteration:    900, Loss function: 6.993, Average Loss: 5.063, avg. samples / sec: 310.74
Iteration:    920, Loss function: 6.529, Average Loss: 5.092, avg. samples / sec: 307.98
Iteration:    940, Loss function: 6.769, Average Loss: 5.122, avg. samples / sec: 310.20
Iteration:    960, Loss function: 6.365, Average Loss: 5.151, avg. samples / sec: 314.31
Iteration:    980, Loss function: 6.555, Average Loss: 5.179, avg. samples / sec: 320.39
Iteration:   1000, Loss function: 6.765, Average Loss: 5.205, avg. samples / sec: 207.71
Iteration:   1020, Loss function: 6.253, Average Loss: 5.229, avg. samples / sec: 327.98
:::MLLOG {"namespace": "", "time_ms": 1639150883829, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150883842, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.502, Average Loss: 5.253, avg. samples / sec: 215.48
Iteration:   1060, Loss function: 6.175, Average Loss: 5.276, avg. samples / sec: 164.35
Iteration:   1080, Loss function: 6.432, Average Loss: 5.299, avg. samples / sec: 237.34
Iteration:   1100, Loss function: 6.084, Average Loss: 5.319, avg. samples / sec: 182.83
Iteration:   1120, Loss function: 6.235, Average Loss: 5.339, avg. samples / sec: 236.30
Iteration:   1140, Loss function: 6.264, Average Loss: 5.358, avg. samples / sec: 261.54
Iteration:   1160, Loss function: 6.064, Average Loss: 5.376, avg. samples / sec: 278.29
Iteration:   1180, Loss function: 6.218, Average Loss: 5.392, avg. samples / sec: 313.76
Iteration:   1200, Loss function: 6.172, Average Loss: 5.409, avg. samples / sec: 317.74
Iteration:   1220, Loss function: 6.398, Average Loss: 5.425, avg. samples / sec: 307.51
Iteration:   1240, Loss function: 6.079, Average Loss: 5.438, avg. samples / sec: 323.99
Iteration:   1260, Loss function: 5.947, Average Loss: 5.451, avg. samples / sec: 318.69
Iteration:   1280, Loss function: 5.975, Average Loss: 5.464, avg. samples / sec: 308.36
Iteration:   1300, Loss function: 6.263, Average Loss: 5.477, avg. samples / sec: 321.87
Iteration:   1320, Loss function: 6.137, Average Loss: 5.489, avg. samples / sec: 318.14
Iteration:   1340, Loss function: 5.881, Average Loss: 5.500, avg. samples / sec: 312.27
Iteration:   1360, Loss function: 5.940, Average Loss: 5.510, avg. samples / sec: 329.01
Iteration:   1380, Loss function: 6.060, Average Loss: 5.520, avg. samples / sec: 323.18
Iteration:   1400, Loss function: 6.114, Average Loss: 5.529, avg. samples / sec: 324.85
Iteration:   1420, Loss function: 5.953, Average Loss: 5.538, avg. samples / sec: 303.62
Iteration:   1440, Loss function: 6.484, Average Loss: 5.546, avg. samples / sec: 327.39
Iteration:   1460, Loss function: 6.043, Average Loss: 5.555, avg. samples / sec: 321.19
Iteration:   1480, Loss function: 5.918, Average Loss: 5.563, avg. samples / sec: 330.10
Iteration:   1500, Loss function: 6.177, Average Loss: 5.572, avg. samples / sec: 324.80
Iteration:   1520, Loss function: 6.080, Average Loss: 5.578, avg. samples / sec: 261.14
Iteration:   1540, Loss function: 5.976, Average Loss: 5.583, avg. samples / sec: 209.59
Iteration:   1560, Loss function: 5.844, Average Loss: 5.588, avg. samples / sec: 271.37
Iteration:   1580, Loss function: 5.590, Average Loss: 5.594, avg. samples / sec: 311.98
Iteration:   1600, Loss function: 6.039, Average Loss: 5.600, avg. samples / sec: 332.82
Iteration:   1620, Loss function: 5.786, Average Loss: 5.605, avg. samples / sec: 314.10
Iteration:   1640, Loss function: 5.882, Average Loss: 5.609, avg. samples / sec: 327.12
Iteration:   1660, Loss function: 5.840, Average Loss: 5.613, avg. samples / sec: 332.06
Iteration:   1680, Loss function: 5.588, Average Loss: 5.616, avg. samples / sec: 315.01
Iteration:   1700, Loss function: 5.325, Average Loss: 5.619, avg. samples / sec: 311.67
Iteration:   1720, Loss function: 5.580, Average Loss: 5.622, avg. samples / sec: 322.11
Iteration:   1740, Loss function: 5.885, Average Loss: 5.624, avg. samples / sec: 329.95
Iteration:   1760, Loss function: 5.417, Average Loss: 5.625, avg. samples / sec: 335.62
Iteration:   1780, Loss function: 5.519, Average Loss: 5.627, avg. samples / sec: 329.60
Iteration:   1800, Loss function: 5.725, Average Loss: 5.630, avg. samples / sec: 271.83
Iteration:   1820, Loss function: 5.957, Average Loss: 5.632, avg. samples / sec: 286.05
Iteration:   1840, Loss function: 5.948, Average Loss: 5.633, avg. samples / sec: 240.23
Iteration:   1860, Loss function: 5.680, Average Loss: 5.633, avg. samples / sec: 225.46
Iteration:   1880, Loss function: 5.898, Average Loss: 5.634, avg. samples / sec: 291.78
Iteration:   1900, Loss function: 5.787, Average Loss: 5.636, avg. samples / sec: 311.32
Iteration:   1920, Loss function: 5.664, Average Loss: 5.636, avg. samples / sec: 335.52
Iteration:   1940, Loss function: 5.860, Average Loss: 5.635, avg. samples / sec: 313.23
Iteration:   1960, Loss function: 5.538, Average Loss: 5.634, avg. samples / sec: 284.38
Iteration:   1980, Loss function: 5.547, Average Loss: 5.633, avg. samples / sec: 211.50
Iteration:   2000, Loss function: 5.634, Average Loss: 5.632, avg. samples / sec: 238.10
Iteration:   2020, Loss function: 5.638, Average Loss: 5.632, avg. samples / sec: 321.20
Iteration:   2040, Loss function: 5.725, Average Loss: 5.631, avg. samples / sec: 291.30
:::MLLOG {"namespace": "", "time_ms": 1639151295840, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151295842, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.487, Average Loss: 5.630, avg. samples / sec: 312.37
Iteration:   2080, Loss function: 5.086, Average Loss: 5.628, avg. samples / sec: 272.51
Iteration:   2100, Loss function: 5.403, Average Loss: 5.626, avg. samples / sec: 334.09
Iteration:   2120, Loss function: 5.218, Average Loss: 5.624, avg. samples / sec: 318.19
Iteration:   2140, Loss function: 5.497, Average Loss: 5.621, avg. samples / sec: 324.92
Iteration:   2160, Loss function: 5.597, Average Loss: 5.619, avg. samples / sec: 329.41
Iteration:   2180, Loss function: 5.352, Average Loss: 5.616, avg. samples / sec: 289.37
Iteration:   2200, Loss function: 5.386, Average Loss: 5.611, avg. samples / sec: 336.95
Iteration:   2220, Loss function: 5.481, Average Loss: 5.609, avg. samples / sec: 322.29
Iteration:   2240, Loss function: 5.401, Average Loss: 5.607, avg. samples / sec: 315.11
Iteration:   2260, Loss function: 5.514, Average Loss: 5.604, avg. samples / sec: 300.72
Iteration:   2280, Loss function: 5.130, Average Loss: 5.601, avg. samples / sec: 301.95
Iteration:   2300, Loss function: 5.254, Average Loss: 5.598, avg. samples / sec: 316.06
Iteration:   2320, Loss function: 5.242, Average Loss: 5.595, avg. samples / sec: 299.10
Iteration:   2340, Loss function: 5.547, Average Loss: 5.593, avg. samples / sec: 339.15
Iteration:   2360, Loss function: 5.321, Average Loss: 5.589, avg. samples / sec: 319.94
Iteration:   2380, Loss function: 5.551, Average Loss: 5.585, avg. samples / sec: 308.16
Iteration:   2400, Loss function: 5.553, Average Loss: 5.583, avg. samples / sec: 331.93
Iteration:   2420, Loss function: 5.603, Average Loss: 5.580, avg. samples / sec: 325.20
Iteration:   2440, Loss function: 5.572, Average Loss: 5.577, avg. samples / sec: 335.81
Iteration:   2460, Loss function: 5.247, Average Loss: 5.574, avg. samples / sec: 331.83
Iteration:   2480, Loss function: 5.438, Average Loss: 5.570, avg. samples / sec: 325.59
Iteration:   2500, Loss function: 5.407, Average Loss: 5.567, avg. samples / sec: 337.83
Iteration:   2520, Loss function: 5.404, Average Loss: 5.562, avg. samples / sec: 328.47
Iteration:   2540, Loss function: 5.367, Average Loss: 5.559, avg. samples / sec: 295.46
Iteration:   2560, Loss function: 5.287, Average Loss: 5.556, avg. samples / sec: 265.74
Iteration:   2580, Loss function: 5.456, Average Loss: 5.553, avg. samples / sec: 307.51
Iteration:   2600, Loss function: 5.502, Average Loss: 5.550, avg. samples / sec: 293.53
Iteration:   2620, Loss function: 5.572, Average Loss: 5.545, avg. samples / sec: 290.01
Iteration:   2640, Loss function: 5.190, Average Loss: 5.543, avg. samples / sec: 308.20
Iteration:   2660, Loss function: 5.207, Average Loss: 5.540, avg. samples / sec: 338.45
Iteration:   2680, Loss function: 5.225, Average Loss: 5.536, avg. samples / sec: 329.26
Iteration:   2700, Loss function: 5.132, Average Loss: 5.532, avg. samples / sec: 328.69
Iteration:   2720, Loss function: 5.278, Average Loss: 5.527, avg. samples / sec: 296.00
Iteration:   2740, Loss function: 5.082, Average Loss: 5.522, avg. samples / sec: 237.47
Iteration:   2760, Loss function: 4.880, Average Loss: 5.517, avg. samples / sec: 223.44
Iteration:   2780, Loss function: 5.677, Average Loss: 5.514, avg. samples / sec: 190.38
Iteration:   2800, Loss function: 5.261, Average Loss: 5.509, avg. samples / sec: 248.54
Iteration:   2820, Loss function: 5.496, Average Loss: 5.505, avg. samples / sec: 271.31
Iteration:   2840, Loss function: 5.092, Average Loss: 5.500, avg. samples / sec: 302.82
Iteration:   2860, Loss function: 5.074, Average Loss: 5.495, avg. samples / sec: 330.18
Iteration:   2880, Loss function: 5.292, Average Loss: 5.491, avg. samples / sec: 324.80
Iteration:   2900, Loss function: 5.106, Average Loss: 5.486, avg. samples / sec: 321.74
Iteration:   2920, Loss function: 5.299, Average Loss: 5.481, avg. samples / sec: 305.99
Iteration:   2940, Loss function: 5.006, Average Loss: 5.478, avg. samples / sec: 314.72
Iteration:   2960, Loss function: 5.277, Average Loss: 5.473, avg. samples / sec: 322.34
Iteration:   2980, Loss function: 5.330, Average Loss: 5.470, avg. samples / sec: 319.93
Iteration:   3000, Loss function: 5.480, Average Loss: 5.466, avg. samples / sec: 322.46
Iteration:   3020, Loss function: 5.144, Average Loss: 5.460, avg. samples / sec: 256.24
Iteration:   3040, Loss function: 5.225, Average Loss: 5.455, avg. samples / sec: 291.79
Iteration:   3060, Loss function: 4.961, Average Loss: 5.449, avg. samples / sec: 338.15
Iteration:   3080, Loss function: 4.922, Average Loss: 5.443, avg. samples / sec: 304.46
:::MLLOG {"namespace": "", "time_ms": 1639151683209, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151683211, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.107, Average Loss: 5.438, avg. samples / sec: 217.99
Iteration:   3120, Loss function: 4.909, Average Loss: 5.432, avg. samples / sec: 256.43
Iteration:   3140, Loss function: 4.965, Average Loss: 5.427, avg. samples / sec: 250.36
Iteration:   3160, Loss function: 5.331, Average Loss: 5.421, avg. samples / sec: 270.82
Iteration:   3180, Loss function: 4.964, Average Loss: 5.416, avg. samples / sec: 287.01
Iteration:   3200, Loss function: 5.244, Average Loss: 5.412, avg. samples / sec: 225.63
Iteration:   3220, Loss function: 5.076, Average Loss: 5.407, avg. samples / sec: 321.26
Iteration:   3240, Loss function: 5.290, Average Loss: 5.401, avg. samples / sec: 268.73
Iteration:   3260, Loss function: 5.003, Average Loss: 5.395, avg. samples / sec: 308.64
Iteration:   3280, Loss function: 4.809, Average Loss: 5.389, avg. samples / sec: 300.40
Iteration:   3300, Loss function: 4.913, Average Loss: 5.383, avg. samples / sec: 305.02
Iteration:   3320, Loss function: 4.902, Average Loss: 5.378, avg. samples / sec: 311.77
Iteration:   3340, Loss function: 5.081, Average Loss: 5.374, avg. samples / sec: 298.39
Iteration:   3360, Loss function: 5.053, Average Loss: 5.367, avg. samples / sec: 314.22
Iteration:   3380, Loss function: 5.211, Average Loss: 5.361, avg. samples / sec: 311.43
Iteration:   3400, Loss function: 5.002, Average Loss: 5.356, avg. samples / sec: 295.74
Iteration:   3420, Loss function: 5.272, Average Loss: 5.351, avg. samples / sec: 295.43
Iteration:   3440, Loss function: 4.875, Average Loss: 5.346, avg. samples / sec: 329.55
Iteration:   3460, Loss function: 5.066, Average Loss: 5.341, avg. samples / sec: 325.33
Iteration:   3480, Loss function: 5.208, Average Loss: 5.336, avg. samples / sec: 328.75
Iteration:   3500, Loss function: 5.300, Average Loss: 5.332, avg. samples / sec: 300.96
Iteration:   3520, Loss function: 4.984, Average Loss: 5.328, avg. samples / sec: 282.57
Iteration:   3540, Loss function: 4.902, Average Loss: 5.323, avg. samples / sec: 315.96
Iteration:   3560, Loss function: 4.909, Average Loss: 5.319, avg. samples / sec: 211.92
Iteration:   3580, Loss function: 5.113, Average Loss: 5.315, avg. samples / sec: 241.32
Iteration:   3600, Loss function: 5.000, Average Loss: 5.309, avg. samples / sec: 302.68
Iteration:   3620, Loss function: 4.743, Average Loss: 5.304, avg. samples / sec: 223.70
Iteration:   3640, Loss function: 4.913, Average Loss: 5.299, avg. samples / sec: 268.92
Iteration:   3660, Loss function: 5.104, Average Loss: 5.294, avg. samples / sec: 261.95
Iteration:   3680, Loss function: 5.122, Average Loss: 5.288, avg. samples / sec: 288.47
Iteration:   3700, Loss function: 4.997, Average Loss: 5.284, avg. samples / sec: 326.83
Iteration:   3720, Loss function: 4.917, Average Loss: 5.277, avg. samples / sec: 296.51
Iteration:   3740, Loss function: 5.066, Average Loss: 5.272, avg. samples / sec: 298.98
Iteration:   3760, Loss function: 5.053, Average Loss: 5.268, avg. samples / sec: 306.50
Iteration:   3780, Loss function: 5.062, Average Loss: 5.263, avg. samples / sec: 298.60
Iteration:   3800, Loss function: 5.122, Average Loss: 5.259, avg. samples / sec: 328.57
Iteration:   3820, Loss function: 5.272, Average Loss: 5.255, avg. samples / sec: 290.85
Iteration:   3840, Loss function: 4.902, Average Loss: 5.250, avg. samples / sec: 332.36
Iteration:   3860, Loss function: 4.974, Average Loss: 5.244, avg. samples / sec: 298.44
Iteration:   3880, Loss function: 5.032, Average Loss: 5.238, avg. samples / sec: 316.83
Iteration:   3900, Loss function: 5.035, Average Loss: 5.233, avg. samples / sec: 321.38
Iteration:   3920, Loss function: 4.963, Average Loss: 5.227, avg. samples / sec: 306.66
Iteration:   3940, Loss function: 5.118, Average Loss: 5.223, avg. samples / sec: 323.93
Iteration:   3960, Loss function: 4.816, Average Loss: 5.218, avg. samples / sec: 275.69
Iteration:   3980, Loss function: 4.741, Average Loss: 5.213, avg. samples / sec: 259.48
Iteration:   4000, Loss function: 5.240, Average Loss: 5.210, avg. samples / sec: 290.19
Iteration:   4020, Loss function: 5.000, Average Loss: 5.205, avg. samples / sec: 316.49
Iteration:   4040, Loss function: 5.324, Average Loss: 5.202, avg. samples / sec: 296.47
Iteration:   4060, Loss function: 5.187, Average Loss: 5.199, avg. samples / sec: 253.30
Iteration:   4080, Loss function: 5.164, Average Loss: 5.195, avg. samples / sec: 316.92
Iteration:   4100, Loss function: 5.028, Average Loss: 5.191, avg. samples / sec: 314.10
:::MLLOG {"namespace": "", "time_ms": 1639152089902, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152089904, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.960, Average Loss: 5.188, avg. samples / sec: 320.68
Iteration:   4140, Loss function: 4.974, Average Loss: 5.183, avg. samples / sec: 223.74
Iteration:   4160, Loss function: 4.952, Average Loss: 5.176, avg. samples / sec: 298.13
Iteration:   4180, Loss function: 4.937, Average Loss: 5.170, avg. samples / sec: 227.15
Iteration:   4200, Loss function: 4.776, Average Loss: 5.166, avg. samples / sec: 232.85
Iteration:   4220, Loss function: 4.768, Average Loss: 5.162, avg. samples / sec: 320.76
Iteration:   4240, Loss function: 4.825, Average Loss: 5.157, avg. samples / sec: 331.25
Iteration:   4260, Loss function: 4.990, Average Loss: 5.152, avg. samples / sec: 317.44
Iteration:   4280, Loss function: 5.081, Average Loss: 5.146, avg. samples / sec: 328.78
Iteration:   4300, Loss function: 4.686, Average Loss: 5.140, avg. samples / sec: 322.89
Iteration:   4320, Loss function: 4.754, Average Loss: 5.135, avg. samples / sec: 326.55
Iteration:   4340, Loss function: 4.820, Average Loss: 5.129, avg. samples / sec: 307.34
Iteration:   4360, Loss function: 4.939, Average Loss: 5.123, avg. samples / sec: 248.18
Iteration:   4380, Loss function: 5.120, Average Loss: 5.120, avg. samples / sec: 321.27
Iteration:   4400, Loss function: 5.025, Average Loss: 5.116, avg. samples / sec: 305.79
Iteration:   4420, Loss function: 5.044, Average Loss: 5.111, avg. samples / sec: 299.04
Iteration:   4440, Loss function: 4.897, Average Loss: 5.107, avg. samples / sec: 336.86
Iteration:   4460, Loss function: 5.028, Average Loss: 5.103, avg. samples / sec: 283.81
Iteration:   4480, Loss function: 4.918, Average Loss: 5.100, avg. samples / sec: 322.23
Iteration:   4500, Loss function: 4.913, Average Loss: 5.097, avg. samples / sec: 326.53
Iteration:   4520, Loss function: 4.669, Average Loss: 5.093, avg. samples / sec: 322.36
Iteration:   4540, Loss function: 5.046, Average Loss: 5.088, avg. samples / sec: 322.29
Iteration:   4560, Loss function: 4.813, Average Loss: 5.083, avg. samples / sec: 317.43
Iteration:   4580, Loss function: 4.718, Average Loss: 5.081, avg. samples / sec: 328.73
Iteration:   4600, Loss function: 4.842, Average Loss: 5.078, avg. samples / sec: 268.55
Iteration:   4620, Loss function: 4.762, Average Loss: 5.074, avg. samples / sec: 286.28
Iteration:   4640, Loss function: 4.823, Average Loss: 5.068, avg. samples / sec: 308.28
Iteration:   4660, Loss function: 4.922, Average Loss: 5.064, avg. samples / sec: 181.56
Iteration:   4680, Loss function: 5.366, Average Loss: 5.061, avg. samples / sec: 304.54
Iteration:   4700, Loss function: 4.785, Average Loss: 5.057, avg. samples / sec: 239.25
Iteration:   4720, Loss function: 4.643, Average Loss: 5.052, avg. samples / sec: 321.72
Iteration:   4740, Loss function: 4.834, Average Loss: 5.049, avg. samples / sec: 328.46
Iteration:   4760, Loss function: 4.776, Average Loss: 5.045, avg. samples / sec: 319.70
Iteration:   4780, Loss function: 5.072, Average Loss: 5.041, avg. samples / sec: 292.98
Iteration:   4800, Loss function: 4.835, Average Loss: 5.039, avg. samples / sec: 254.88
Iteration:   4820, Loss function: 4.851, Average Loss: 5.035, avg. samples / sec: 259.28
Iteration:   4840, Loss function: 4.931, Average Loss: 5.032, avg. samples / sec: 271.35
Iteration:   4860, Loss function: 4.705, Average Loss: 5.027, avg. samples / sec: 295.29
Iteration:   4880, Loss function: 5.042, Average Loss: 5.023, avg. samples / sec: 319.18
Iteration:   4900, Loss function: 4.692, Average Loss: 5.019, avg. samples / sec: 304.16
Iteration:   4920, Loss function: 4.747, Average Loss: 5.015, avg. samples / sec: 311.56
Iteration:   4940, Loss function: 4.812, Average Loss: 5.010, avg. samples / sec: 302.08
Iteration:   4960, Loss function: 4.715, Average Loss: 5.007, avg. samples / sec: 330.98
Iteration:   4980, Loss function: 4.596, Average Loss: 5.003, avg. samples / sec: 250.53
Iteration:   5000, Loss function: 4.858, Average Loss: 5.000, avg. samples / sec: 187.61
Iteration:   5020, Loss function: 5.160, Average Loss: 4.997, avg. samples / sec: 267.57
Iteration:   5040, Loss function: 4.922, Average Loss: 4.994, avg. samples / sec: 290.89
Iteration:   5060, Loss function: 4.774, Average Loss: 4.991, avg. samples / sec: 267.11
Iteration:   5080, Loss function: 4.590, Average Loss: 4.987, avg. samples / sec: 274.29
Iteration:   5100, Loss function: 4.981, Average Loss: 4.984, avg. samples / sec: 317.13
Iteration:   5120, Loss function: 4.566, Average Loss: 4.982, avg. samples / sec: 331.20
Iteration:   5140, Loss function: 4.847, Average Loss: 4.978, avg. samples / sec: 271.06
:::MLLOG {"namespace": "", "time_ms": 1639152498282, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.03 s
:::MLLOG {"namespace": "", "time_ms": 1639152590423, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152590493, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152590496, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.91s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.91s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10453
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20862
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09522
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18508
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13413
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19708
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20837
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20837
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10453 AP goal: 0.10000
Iteration:   5160, Loss function: 4.941, Average Loss: 4.973, avg. samples / sec: 22.67
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10453383408386449, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152597834, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152599474, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152602
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:02 PM'
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:38 PM'
START TIMING RUN WAS 2021-12-10 03:32:38 PM
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:02 PM'
ENDING TIMING RUN AT 2021-12-10 04:10:02 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ result=2244
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-10 03:32:38 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-10 03:32:38 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
