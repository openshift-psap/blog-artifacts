+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd--1-ft6fc.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd--1-ft6fc.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd--1-ft6fc.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f
+ echo 'Found 1 MIG instances: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639150357
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-10 03:32:37 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-10 03:32:37 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-10_10-32-14 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\0\_\1\0\-\3\2\-\1\4 ]]
+ set +x
Fri Dec 10 15:32:37 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-ssd--1-ft6fc to the sync file ...
run-ssd--1-ft6fc Found 8 Pods, waiting to have 24 ...
     1	run-ssd--1-wt7dd
     2	run-ssd--1-dmtgp
     3	run-ssd--1-hhm9h
     4	run-ssd--1-mzbpq
     5	run-ssd--1-29cpq
     6	run-ssd--1-djc94
     7	run-ssd--1-z4n6j
     8	run-ssd--1-ft6fc
Fri Dec 10 15:32:42 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364727, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364840, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1875089284, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1875089284
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639150366938, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150366938, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150366944, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150366944, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150471881, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150471881, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639150473611, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473612, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474026, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474027, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474029, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.590, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.143, Average Loss: 0.454, avg. samples / sec: 300.51
Iteration:     40, Loss function: 20.899, Average Loss: 0.857, avg. samples / sec: 286.79
Iteration:     60, Loss function: 20.373, Average Loss: 1.246, avg. samples / sec: 260.71
Iteration:     80, Loss function: 19.700, Average Loss: 1.618, avg. samples / sec: 260.08
Iteration:    100, Loss function: 15.023, Average Loss: 1.939, avg. samples / sec: 262.37
Iteration:    120, Loss function: 10.674, Average Loss: 2.143, avg. samples / sec: 271.95
Iteration:    140, Loss function: 9.412, Average Loss: 2.294, avg. samples / sec: 293.92
Iteration:    160, Loss function: 9.122, Average Loss: 2.432, avg. samples / sec: 272.93
Iteration:    180, Loss function: 9.077, Average Loss: 2.560, avg. samples / sec: 287.19
Iteration:    200, Loss function: 8.496, Average Loss: 2.684, avg. samples / sec: 289.91
Iteration:    220, Loss function: 8.691, Average Loss: 2.805, avg. samples / sec: 284.99
Iteration:    240, Loss function: 8.707, Average Loss: 2.924, avg. samples / sec: 278.08
Iteration:    260, Loss function: 8.785, Average Loss: 3.036, avg. samples / sec: 272.69
Iteration:    280, Loss function: 8.335, Average Loss: 3.146, avg. samples / sec: 278.06
Iteration:    300, Loss function: 8.254, Average Loss: 3.253, avg. samples / sec: 312.93
Iteration:    320, Loss function: 8.301, Average Loss: 3.354, avg. samples / sec: 241.19
Iteration:    340, Loss function: 8.371, Average Loss: 3.451, avg. samples / sec: 264.10
Iteration:    360, Loss function: 7.868, Average Loss: 3.545, avg. samples / sec: 301.87
Iteration:    380, Loss function: 7.958, Average Loss: 3.635, avg. samples / sec: 317.40
Iteration:    400, Loss function: 8.036, Average Loss: 3.719, avg. samples / sec: 288.00
Iteration:    420, Loss function: 7.805, Average Loss: 3.805, avg. samples / sec: 314.60
Iteration:    440, Loss function: 7.925, Average Loss: 3.889, avg. samples / sec: 303.57
Iteration:    460, Loss function: 7.670, Average Loss: 3.966, avg. samples / sec: 297.85
Iteration:    480, Loss function: 7.521, Average Loss: 4.039, avg. samples / sec: 326.33
Iteration:    500, Loss function: 7.582, Average Loss: 4.109, avg. samples / sec: 296.25
Iteration:    520, Loss function: 7.671, Average Loss: 4.178, avg. samples / sec: 318.37
Iteration:    540, Loss function: 7.516, Average Loss: 4.244, avg. samples / sec: 339.18
Iteration:    560, Loss function: 7.124, Average Loss: 4.306, avg. samples / sec: 305.56
Iteration:    580, Loss function: 7.264, Average Loss: 4.367, avg. samples / sec: 326.71
Iteration:    600, Loss function: 7.404, Average Loss: 4.428, avg. samples / sec: 304.79
Iteration:    620, Loss function: 7.129, Average Loss: 4.483, avg. samples / sec: 209.10
Iteration:    640, Loss function: 6.825, Average Loss: 4.537, avg. samples / sec: 238.87
Iteration:    660, Loss function: 6.993, Average Loss: 4.589, avg. samples / sec: 285.10
Iteration:    680, Loss function: 7.279, Average Loss: 4.640, avg. samples / sec: 250.96
Iteration:    700, Loss function: 6.835, Average Loss: 4.689, avg. samples / sec: 333.91
Iteration:    720, Loss function: 6.944, Average Loss: 4.739, avg. samples / sec: 323.88
Iteration:    740, Loss function: 6.999, Average Loss: 4.783, avg. samples / sec: 252.58
Iteration:    760, Loss function: 7.250, Average Loss: 4.827, avg. samples / sec: 289.94
Iteration:    780, Loss function: 6.793, Average Loss: 4.870, avg. samples / sec: 298.00
Iteration:    800, Loss function: 7.114, Average Loss: 4.910, avg. samples / sec: 226.53
Iteration:    820, Loss function: 6.791, Average Loss: 4.948, avg. samples / sec: 278.94
Iteration:    840, Loss function: 6.751, Average Loss: 4.984, avg. samples / sec: 257.71
Iteration:    860, Loss function: 6.899, Average Loss: 5.019, avg. samples / sec: 316.71
Iteration:    880, Loss function: 6.621, Average Loss: 5.052, avg. samples / sec: 320.29
Iteration:    900, Loss function: 6.791, Average Loss: 5.084, avg. samples / sec: 329.73
Iteration:    920, Loss function: 6.463, Average Loss: 5.113, avg. samples / sec: 321.08
Iteration:    940, Loss function: 6.894, Average Loss: 5.142, avg. samples / sec: 319.95
Iteration:    960, Loss function: 6.461, Average Loss: 5.171, avg. samples / sec: 314.08
Iteration:    980, Loss function: 6.547, Average Loss: 5.199, avg. samples / sec: 317.04
Iteration:   1000, Loss function: 6.521, Average Loss: 5.224, avg. samples / sec: 326.16
Iteration:   1020, Loss function: 6.499, Average Loss: 5.249, avg. samples / sec: 329.05
:::MLLOG {"namespace": "", "time_ms": 1639150879583, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150879584, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.496, Average Loss: 5.273, avg. samples / sec: 325.94
Iteration:   1060, Loss function: 6.436, Average Loss: 5.297, avg. samples / sec: 256.41
Iteration:   1080, Loss function: 6.415, Average Loss: 5.318, avg. samples / sec: 315.91
Iteration:   1100, Loss function: 6.153, Average Loss: 5.338, avg. samples / sec: 294.36
Iteration:   1120, Loss function: 6.275, Average Loss: 5.358, avg. samples / sec: 251.67
Iteration:   1140, Loss function: 6.384, Average Loss: 5.377, avg. samples / sec: 221.19
Iteration:   1160, Loss function: 6.187, Average Loss: 5.394, avg. samples / sec: 226.44
Iteration:   1180, Loss function: 6.244, Average Loss: 5.411, avg. samples / sec: 265.26
Iteration:   1200, Loss function: 6.378, Average Loss: 5.428, avg. samples / sec: 290.23
Iteration:   1220, Loss function: 6.137, Average Loss: 5.443, avg. samples / sec: 234.50
Iteration:   1240, Loss function: 6.173, Average Loss: 5.457, avg. samples / sec: 304.01
Iteration:   1260, Loss function: 6.003, Average Loss: 5.470, avg. samples / sec: 323.42
Iteration:   1280, Loss function: 6.026, Average Loss: 5.482, avg. samples / sec: 283.03
Iteration:   1300, Loss function: 6.026, Average Loss: 5.495, avg. samples / sec: 303.22
Iteration:   1320, Loss function: 5.987, Average Loss: 5.506, avg. samples / sec: 317.50
Iteration:   1340, Loss function: 5.811, Average Loss: 5.517, avg. samples / sec: 288.67
Iteration:   1360, Loss function: 6.189, Average Loss: 5.528, avg. samples / sec: 264.90
Iteration:   1380, Loss function: 6.028, Average Loss: 5.538, avg. samples / sec: 321.59
Iteration:   1400, Loss function: 6.064, Average Loss: 5.547, avg. samples / sec: 323.09
Iteration:   1420, Loss function: 5.954, Average Loss: 5.555, avg. samples / sec: 326.88
Iteration:   1440, Loss function: 6.463, Average Loss: 5.564, avg. samples / sec: 332.26
Iteration:   1460, Loss function: 6.259, Average Loss: 5.572, avg. samples / sec: 316.70
Iteration:   1480, Loss function: 6.005, Average Loss: 5.581, avg. samples / sec: 333.79
Iteration:   1500, Loss function: 6.086, Average Loss: 5.590, avg. samples / sec: 327.19
Iteration:   1520, Loss function: 5.965, Average Loss: 5.595, avg. samples / sec: 330.49
Iteration:   1540, Loss function: 5.882, Average Loss: 5.599, avg. samples / sec: 299.14
Iteration:   1560, Loss function: 5.730, Average Loss: 5.604, avg. samples / sec: 334.30
Iteration:   1580, Loss function: 5.519, Average Loss: 5.609, avg. samples / sec: 329.28
Iteration:   1600, Loss function: 6.021, Average Loss: 5.614, avg. samples / sec: 273.97
Iteration:   1620, Loss function: 5.779, Average Loss: 5.619, avg. samples / sec: 332.82
Iteration:   1640, Loss function: 5.861, Average Loss: 5.622, avg. samples / sec: 328.01
Iteration:   1660, Loss function: 5.994, Average Loss: 5.626, avg. samples / sec: 251.27
Iteration:   1680, Loss function: 5.849, Average Loss: 5.630, avg. samples / sec: 314.83
Iteration:   1700, Loss function: 5.527, Average Loss: 5.634, avg. samples / sec: 282.73
Iteration:   1720, Loss function: 5.671, Average Loss: 5.636, avg. samples / sec: 231.30
Iteration:   1740, Loss function: 5.823, Average Loss: 5.638, avg. samples / sec: 249.46
Iteration:   1760, Loss function: 5.568, Average Loss: 5.640, avg. samples / sec: 265.39
Iteration:   1780, Loss function: 5.576, Average Loss: 5.642, avg. samples / sec: 224.81
Iteration:   1800, Loss function: 5.602, Average Loss: 5.644, avg. samples / sec: 178.95
Iteration:   1820, Loss function: 6.016, Average Loss: 5.646, avg. samples / sec: 286.82
Iteration:   1840, Loss function: 6.037, Average Loss: 5.647, avg. samples / sec: 331.64
Iteration:   1860, Loss function: 5.677, Average Loss: 5.645, avg. samples / sec: 282.79
Iteration:   1880, Loss function: 6.069, Average Loss: 5.647, avg. samples / sec: 299.32
Iteration:   1900, Loss function: 5.780, Average Loss: 5.649, avg. samples / sec: 315.47
Iteration:   1920, Loss function: 5.823, Average Loss: 5.649, avg. samples / sec: 336.44
Iteration:   1940, Loss function: 5.833, Average Loss: 5.649, avg. samples / sec: 339.24
Iteration:   1960, Loss function: 5.556, Average Loss: 5.648, avg. samples / sec: 295.68
Iteration:   1980, Loss function: 5.613, Average Loss: 5.647, avg. samples / sec: 287.69
Iteration:   2000, Loss function: 5.463, Average Loss: 5.647, avg. samples / sec: 226.85
Iteration:   2020, Loss function: 5.747, Average Loss: 5.647, avg. samples / sec: 330.02
Iteration:   2040, Loss function: 5.645, Average Loss: 5.646, avg. samples / sec: 240.11
:::MLLOG {"namespace": "", "time_ms": 1639151291597, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151291600, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.594, Average Loss: 5.644, avg. samples / sec: 282.04
Iteration:   2080, Loss function: 4.994, Average Loss: 5.642, avg. samples / sec: 276.66
Iteration:   2100, Loss function: 5.455, Average Loss: 5.640, avg. samples / sec: 327.04
Iteration:   2120, Loss function: 5.236, Average Loss: 5.636, avg. samples / sec: 336.39
Iteration:   2140, Loss function: 5.546, Average Loss: 5.633, avg. samples / sec: 322.77
Iteration:   2160, Loss function: 5.374, Average Loss: 5.631, avg. samples / sec: 328.34
Iteration:   2180, Loss function: 5.387, Average Loss: 5.629, avg. samples / sec: 337.18
Iteration:   2200, Loss function: 5.517, Average Loss: 5.623, avg. samples / sec: 224.08
Iteration:   2220, Loss function: 5.585, Average Loss: 5.621, avg. samples / sec: 238.00
Iteration:   2240, Loss function: 5.386, Average Loss: 5.619, avg. samples / sec: 269.41
Iteration:   2260, Loss function: 5.391, Average Loss: 5.615, avg. samples / sec: 324.01
Iteration:   2280, Loss function: 5.128, Average Loss: 5.613, avg. samples / sec: 301.70
Iteration:   2300, Loss function: 5.302, Average Loss: 5.610, avg. samples / sec: 321.31
Iteration:   2320, Loss function: 5.152, Average Loss: 5.607, avg. samples / sec: 321.87
Iteration:   2340, Loss function: 5.592, Average Loss: 5.604, avg. samples / sec: 332.16
Iteration:   2360, Loss function: 5.400, Average Loss: 5.600, avg. samples / sec: 332.18
Iteration:   2380, Loss function: 5.330, Average Loss: 5.597, avg. samples / sec: 325.15
Iteration:   2400, Loss function: 5.527, Average Loss: 5.593, avg. samples / sec: 311.32
Iteration:   2420, Loss function: 5.534, Average Loss: 5.589, avg. samples / sec: 285.28
Iteration:   2440, Loss function: 5.420, Average Loss: 5.586, avg. samples / sec: 328.21
Iteration:   2460, Loss function: 5.240, Average Loss: 5.583, avg. samples / sec: 327.23
Iteration:   2480, Loss function: 5.422, Average Loss: 5.580, avg. samples / sec: 336.34
Iteration:   2500, Loss function: 5.401, Average Loss: 5.576, avg. samples / sec: 295.84
Iteration:   2520, Loss function: 5.446, Average Loss: 5.571, avg. samples / sec: 298.38
Iteration:   2540, Loss function: 5.325, Average Loss: 5.568, avg. samples / sec: 305.84
Iteration:   2560, Loss function: 5.236, Average Loss: 5.564, avg. samples / sec: 319.47
Iteration:   2580, Loss function: 5.341, Average Loss: 5.560, avg. samples / sec: 315.29
Iteration:   2600, Loss function: 5.304, Average Loss: 5.557, avg. samples / sec: 273.55
Iteration:   2620, Loss function: 5.649, Average Loss: 5.552, avg. samples / sec: 310.29
Iteration:   2640, Loss function: 5.083, Average Loss: 5.548, avg. samples / sec: 329.10
Iteration:   2660, Loss function: 5.285, Average Loss: 5.545, avg. samples / sec: 320.74
Iteration:   2680, Loss function: 5.153, Average Loss: 5.542, avg. samples / sec: 289.94
Iteration:   2700, Loss function: 5.172, Average Loss: 5.537, avg. samples / sec: 322.30
Iteration:   2720, Loss function: 5.433, Average Loss: 5.533, avg. samples / sec: 317.75
Iteration:   2740, Loss function: 4.934, Average Loss: 5.529, avg. samples / sec: 328.01
Iteration:   2760, Loss function: 5.050, Average Loss: 5.524, avg. samples / sec: 315.84
Iteration:   2780, Loss function: 5.600, Average Loss: 5.520, avg. samples / sec: 330.92
Iteration:   2800, Loss function: 5.447, Average Loss: 5.516, avg. samples / sec: 338.17
Iteration:   2820, Loss function: 5.392, Average Loss: 5.512, avg. samples / sec: 238.05
Iteration:   2840, Loss function: 5.288, Average Loss: 5.508, avg. samples / sec: 262.71
Iteration:   2860, Loss function: 5.012, Average Loss: 5.502, avg. samples / sec: 304.69
Iteration:   2880, Loss function: 5.334, Average Loss: 5.498, avg. samples / sec: 227.46
Iteration:   2900, Loss function: 5.167, Average Loss: 5.493, avg. samples / sec: 266.81
Iteration:   2920, Loss function: 5.210, Average Loss: 5.488, avg. samples / sec: 164.08
Iteration:   2940, Loss function: 4.856, Average Loss: 5.485, avg. samples / sec: 276.62
Iteration:   2960, Loss function: 5.367, Average Loss: 5.479, avg. samples / sec: 234.91
Iteration:   2980, Loss function: 5.225, Average Loss: 5.476, avg. samples / sec: 300.50
Iteration:   3000, Loss function: 5.281, Average Loss: 5.470, avg. samples / sec: 276.71
Iteration:   3020, Loss function: 5.249, Average Loss: 5.464, avg. samples / sec: 313.71
Iteration:   3040, Loss function: 5.150, Average Loss: 5.459, avg. samples / sec: 291.98
Iteration:   3060, Loss function: 4.815, Average Loss: 5.452, avg. samples / sec: 304.09
Iteration:   3080, Loss function: 4.959, Average Loss: 5.446, avg. samples / sec: 282.70
:::MLLOG {"namespace": "", "time_ms": 1639151690837, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151690839, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.219, Average Loss: 5.440, avg. samples / sec: 309.24
Iteration:   3120, Loss function: 4.917, Average Loss: 5.434, avg. samples / sec: 339.07
Iteration:   3140, Loss function: 5.141, Average Loss: 5.429, avg. samples / sec: 331.84
Iteration:   3160, Loss function: 5.511, Average Loss: 5.424, avg. samples / sec: 317.89
Iteration:   3180, Loss function: 4.940, Average Loss: 5.419, avg. samples / sec: 279.88
Iteration:   3200, Loss function: 5.342, Average Loss: 5.413, avg. samples / sec: 334.75
Iteration:   3220, Loss function: 5.107, Average Loss: 5.407, avg. samples / sec: 332.35
Iteration:   3240, Loss function: 5.171, Average Loss: 5.402, avg. samples / sec: 327.27
Iteration:   3260, Loss function: 4.803, Average Loss: 5.397, avg. samples / sec: 315.50
Iteration:   3280, Loss function: 4.775, Average Loss: 5.390, avg. samples / sec: 277.45
Iteration:   3300, Loss function: 4.719, Average Loss: 5.384, avg. samples / sec: 254.68
Iteration:   3320, Loss function: 4.877, Average Loss: 5.379, avg. samples / sec: 270.95
Iteration:   3340, Loss function: 5.040, Average Loss: 5.374, avg. samples / sec: 304.33
Iteration:   3360, Loss function: 5.223, Average Loss: 5.368, avg. samples / sec: 323.12
Iteration:   3380, Loss function: 5.320, Average Loss: 5.361, avg. samples / sec: 328.05
Iteration:   3400, Loss function: 4.813, Average Loss: 5.356, avg. samples / sec: 332.04
Iteration:   3420, Loss function: 5.317, Average Loss: 5.350, avg. samples / sec: 302.70
Iteration:   3440, Loss function: 4.765, Average Loss: 5.346, avg. samples / sec: 313.71
Iteration:   3460, Loss function: 5.148, Average Loss: 5.340, avg. samples / sec: 321.63
Iteration:   3480, Loss function: 5.049, Average Loss: 5.335, avg. samples / sec: 289.53
Iteration:   3500, Loss function: 5.192, Average Loss: 5.332, avg. samples / sec: 329.14
Iteration:   3520, Loss function: 5.152, Average Loss: 5.328, avg. samples / sec: 314.04
Iteration:   3540, Loss function: 5.139, Average Loss: 5.324, avg. samples / sec: 290.20
Iteration:   3560, Loss function: 5.103, Average Loss: 5.321, avg. samples / sec: 338.12
Iteration:   3580, Loss function: 5.125, Average Loss: 5.317, avg. samples / sec: 336.56
Iteration:   3600, Loss function: 5.084, Average Loss: 5.311, avg. samples / sec: 315.38
Iteration:   3620, Loss function: 4.907, Average Loss: 5.306, avg. samples / sec: 311.02
Iteration:   3640, Loss function: 4.789, Average Loss: 5.301, avg. samples / sec: 321.55
Iteration:   3660, Loss function: 5.086, Average Loss: 5.295, avg. samples / sec: 333.08
Iteration:   3680, Loss function: 4.965, Average Loss: 5.289, avg. samples / sec: 339.53
Iteration:   3700, Loss function: 4.965, Average Loss: 5.284, avg. samples / sec: 324.73
Iteration:   3720, Loss function: 4.941, Average Loss: 5.278, avg. samples / sec: 320.86
Iteration:   3740, Loss function: 5.200, Average Loss: 5.273, avg. samples / sec: 315.83
Iteration:   3760, Loss function: 5.119, Average Loss: 5.269, avg. samples / sec: 255.23
Iteration:   3780, Loss function: 5.189, Average Loss: 5.264, avg. samples / sec: 299.60
Iteration:   3800, Loss function: 5.111, Average Loss: 5.261, avg. samples / sec: 244.46
Iteration:   3820, Loss function: 5.149, Average Loss: 5.257, avg. samples / sec: 189.95
Iteration:   3840, Loss function: 4.868, Average Loss: 5.253, avg. samples / sec: 251.08
Iteration:   3860, Loss function: 4.781, Average Loss: 5.248, avg. samples / sec: 295.57
Iteration:   3880, Loss function: 4.845, Average Loss: 5.243, avg. samples / sec: 306.33
Iteration:   3900, Loss function: 5.437, Average Loss: 5.238, avg. samples / sec: 270.14
Iteration:   3920, Loss function: 5.317, Average Loss: 5.233, avg. samples / sec: 289.03
Iteration:   3940, Loss function: 5.066, Average Loss: 5.228, avg. samples / sec: 300.03
Iteration:   3960, Loss function: 4.821, Average Loss: 5.224, avg. samples / sec: 318.52
Iteration:   3980, Loss function: 4.839, Average Loss: 5.219, avg. samples / sec: 298.23
Iteration:   4000, Loss function: 5.202, Average Loss: 5.215, avg. samples / sec: 320.21
Iteration:   4020, Loss function: 4.958, Average Loss: 5.209, avg. samples / sec: 314.32
Iteration:   4040, Loss function: 5.049, Average Loss: 5.206, avg. samples / sec: 309.38
Iteration:   4060, Loss function: 5.486, Average Loss: 5.203, avg. samples / sec: 277.33
Iteration:   4080, Loss function: 5.146, Average Loss: 5.199, avg. samples / sec: 324.71
Iteration:   4100, Loss function: 5.165, Average Loss: 5.196, avg. samples / sec: 313.75
:::MLLOG {"namespace": "", "time_ms": 1639152078660, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152078666, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.932, Average Loss: 5.192, avg. samples / sec: 330.11
Iteration:   4140, Loss function: 4.769, Average Loss: 5.186, avg. samples / sec: 336.16
Iteration:   4160, Loss function: 4.908, Average Loss: 5.180, avg. samples / sec: 301.64
Iteration:   4180, Loss function: 4.978, Average Loss: 5.175, avg. samples / sec: 248.23
Iteration:   4200, Loss function: 4.803, Average Loss: 5.170, avg. samples / sec: 325.65
Iteration:   4220, Loss function: 4.896, Average Loss: 5.164, avg. samples / sec: 339.98
Iteration:   4240, Loss function: 5.044, Average Loss: 5.160, avg. samples / sec: 314.10
Iteration:   4260, Loss function: 5.242, Average Loss: 5.155, avg. samples / sec: 317.65
Iteration:   4280, Loss function: 5.000, Average Loss: 5.149, avg. samples / sec: 198.74
Iteration:   4300, Loss function: 4.724, Average Loss: 5.143, avg. samples / sec: 324.75
Iteration:   4320, Loss function: 4.857, Average Loss: 5.138, avg. samples / sec: 334.96
Iteration:   4340, Loss function: 4.692, Average Loss: 5.132, avg. samples / sec: 322.43
Iteration:   4360, Loss function: 4.845, Average Loss: 5.128, avg. samples / sec: 288.99
Iteration:   4380, Loss function: 5.115, Average Loss: 5.124, avg. samples / sec: 306.94
Iteration:   4400, Loss function: 5.107, Average Loss: 5.120, avg. samples / sec: 334.59
Iteration:   4420, Loss function: 4.782, Average Loss: 5.115, avg. samples / sec: 324.09
Iteration:   4440, Loss function: 4.834, Average Loss: 5.110, avg. samples / sec: 337.65
Iteration:   4460, Loss function: 5.027, Average Loss: 5.105, avg. samples / sec: 299.72
Iteration:   4480, Loss function: 5.064, Average Loss: 5.103, avg. samples / sec: 237.74
Iteration:   4500, Loss function: 5.012, Average Loss: 5.100, avg. samples / sec: 283.02
Iteration:   4520, Loss function: 4.697, Average Loss: 5.096, avg. samples / sec: 326.11
Iteration:   4540, Loss function: 4.956, Average Loss: 5.092, avg. samples / sec: 314.04
Iteration:   4560, Loss function: 4.709, Average Loss: 5.088, avg. samples / sec: 325.43
Iteration:   4580, Loss function: 4.655, Average Loss: 5.085, avg. samples / sec: 327.21
Iteration:   4600, Loss function: 4.842, Average Loss: 5.081, avg. samples / sec: 288.46
Iteration:   4620, Loss function: 4.746, Average Loss: 5.076, avg. samples / sec: 265.25
Iteration:   4640, Loss function: 4.762, Average Loss: 5.071, avg. samples / sec: 289.38
Iteration:   4660, Loss function: 4.883, Average Loss: 5.068, avg. samples / sec: 313.05
Iteration:   4680, Loss function: 5.375, Average Loss: 5.063, avg. samples / sec: 271.77
Iteration:   4700, Loss function: 4.709, Average Loss: 5.059, avg. samples / sec: 306.80
Iteration:   4720, Loss function: 4.680, Average Loss: 5.055, avg. samples / sec: 329.87
Iteration:   4740, Loss function: 4.827, Average Loss: 5.051, avg. samples / sec: 320.78
Iteration:   4760, Loss function: 4.539, Average Loss: 5.047, avg. samples / sec: 324.87
Iteration:   4780, Loss function: 5.071, Average Loss: 5.043, avg. samples / sec: 326.19
Iteration:   4800, Loss function: 4.921, Average Loss: 5.041, avg. samples / sec: 305.97
Iteration:   4820, Loss function: 4.805, Average Loss: 5.037, avg. samples / sec: 255.89
Iteration:   4840, Loss function: 5.065, Average Loss: 5.034, avg. samples / sec: 319.35
Iteration:   4860, Loss function: 4.655, Average Loss: 5.029, avg. samples / sec: 235.17
Iteration:   4880, Loss function: 5.250, Average Loss: 5.025, avg. samples / sec: 229.86
Iteration:   4900, Loss function: 4.488, Average Loss: 5.020, avg. samples / sec: 260.53
Iteration:   4920, Loss function: 4.687, Average Loss: 5.017, avg. samples / sec: 287.81
Iteration:   4940, Loss function: 4.891, Average Loss: 5.014, avg. samples / sec: 240.84
Iteration:   4960, Loss function: 4.678, Average Loss: 5.011, avg. samples / sec: 306.09
Iteration:   4980, Loss function: 4.719, Average Loss: 5.007, avg. samples / sec: 326.74
Iteration:   5000, Loss function: 4.895, Average Loss: 5.004, avg. samples / sec: 303.30
Iteration:   5020, Loss function: 5.157, Average Loss: 5.001, avg. samples / sec: 302.69
Iteration:   5040, Loss function: 4.873, Average Loss: 4.999, avg. samples / sec: 293.81
Iteration:   5060, Loss function: 4.782, Average Loss: 4.995, avg. samples / sec: 328.23
Iteration:   5080, Loss function: 4.597, Average Loss: 4.992, avg. samples / sec: 299.39
Iteration:   5100, Loss function: 4.758, Average Loss: 4.988, avg. samples / sec: 316.39
Iteration:   5120, Loss function: 4.604, Average Loss: 4.985, avg. samples / sec: 318.92
Iteration:   5140, Loss function: 5.020, Average Loss: 4.981, avg. samples / sec: 282.62
:::MLLOG {"namespace": "", "time_ms": 1639152475024, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 111.10 s
:::MLLOG {"namespace": "", "time_ms": 1639152586271, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152586287, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152586291, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10925
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22022
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09911
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19195
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13852
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10925 AP goal: 0.10000
Iteration:   5160, Loss function: 4.969, Average Loss: 4.977, avg. samples / sec: 18.80
:::MLLOG {"namespace": "", "time_ms": 1639152594532, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594533, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10924964766991255, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594533, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152596113, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 10 16:10:01 UTC 2021: done waiting for 1 executions'
Fri Dec 10 16:10:01 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639150364727, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639150364840, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1875089284, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1875089284
:::MLLOG {"namespace": "", "time_ms": 1639150366938, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639150366938, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639150366944, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639150366944, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639150366945, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639150471881, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639150471881, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639150473611, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639150473612, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.20s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639150474026, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639150474027, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639150474029, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.590, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.143, Average Loss: 0.454, avg. samples / sec: 300.51
Iteration:     40, Loss function: 20.899, Average Loss: 0.857, avg. samples / sec: 286.79
Iteration:     60, Loss function: 20.373, Average Loss: 1.246, avg. samples / sec: 260.71
Iteration:     80, Loss function: 19.700, Average Loss: 1.618, avg. samples / sec: 260.08
Iteration:    100, Loss function: 15.023, Average Loss: 1.939, avg. samples / sec: 262.37
Iteration:    120, Loss function: 10.674, Average Loss: 2.143, avg. samples / sec: 271.95
Iteration:    140, Loss function: 9.412, Average Loss: 2.294, avg. samples / sec: 293.92
Iteration:    160, Loss function: 9.122, Average Loss: 2.432, avg. samples / sec: 272.93
Iteration:    180, Loss function: 9.077, Average Loss: 2.560, avg. samples / sec: 287.19
Iteration:    200, Loss function: 8.496, Average Loss: 2.684, avg. samples / sec: 289.91
Iteration:    220, Loss function: 8.691, Average Loss: 2.805, avg. samples / sec: 284.99
Iteration:    240, Loss function: 8.707, Average Loss: 2.924, avg. samples / sec: 278.08
Iteration:    260, Loss function: 8.785, Average Loss: 3.036, avg. samples / sec: 272.69
Iteration:    280, Loss function: 8.335, Average Loss: 3.146, avg. samples / sec: 278.06
Iteration:    300, Loss function: 8.254, Average Loss: 3.253, avg. samples / sec: 312.93
Iteration:    320, Loss function: 8.301, Average Loss: 3.354, avg. samples / sec: 241.19
Iteration:    340, Loss function: 8.371, Average Loss: 3.451, avg. samples / sec: 264.10
Iteration:    360, Loss function: 7.868, Average Loss: 3.545, avg. samples / sec: 301.87
Iteration:    380, Loss function: 7.958, Average Loss: 3.635, avg. samples / sec: 317.40
Iteration:    400, Loss function: 8.036, Average Loss: 3.719, avg. samples / sec: 288.00
Iteration:    420, Loss function: 7.805, Average Loss: 3.805, avg. samples / sec: 314.60
Iteration:    440, Loss function: 7.925, Average Loss: 3.889, avg. samples / sec: 303.57
Iteration:    460, Loss function: 7.670, Average Loss: 3.966, avg. samples / sec: 297.85
Iteration:    480, Loss function: 7.521, Average Loss: 4.039, avg. samples / sec: 326.33
Iteration:    500, Loss function: 7.582, Average Loss: 4.109, avg. samples / sec: 296.25
Iteration:    520, Loss function: 7.671, Average Loss: 4.178, avg. samples / sec: 318.37
Iteration:    540, Loss function: 7.516, Average Loss: 4.244, avg. samples / sec: 339.18
Iteration:    560, Loss function: 7.124, Average Loss: 4.306, avg. samples / sec: 305.56
Iteration:    580, Loss function: 7.264, Average Loss: 4.367, avg. samples / sec: 326.71
Iteration:    600, Loss function: 7.404, Average Loss: 4.428, avg. samples / sec: 304.79
Iteration:    620, Loss function: 7.129, Average Loss: 4.483, avg. samples / sec: 209.10
Iteration:    640, Loss function: 6.825, Average Loss: 4.537, avg. samples / sec: 238.87
Iteration:    660, Loss function: 6.993, Average Loss: 4.589, avg. samples / sec: 285.10
Iteration:    680, Loss function: 7.279, Average Loss: 4.640, avg. samples / sec: 250.96
Iteration:    700, Loss function: 6.835, Average Loss: 4.689, avg. samples / sec: 333.91
Iteration:    720, Loss function: 6.944, Average Loss: 4.739, avg. samples / sec: 323.88
Iteration:    740, Loss function: 6.999, Average Loss: 4.783, avg. samples / sec: 252.58
Iteration:    760, Loss function: 7.250, Average Loss: 4.827, avg. samples / sec: 289.94
Iteration:    780, Loss function: 6.793, Average Loss: 4.870, avg. samples / sec: 298.00
Iteration:    800, Loss function: 7.114, Average Loss: 4.910, avg. samples / sec: 226.53
Iteration:    820, Loss function: 6.791, Average Loss: 4.948, avg. samples / sec: 278.94
Iteration:    840, Loss function: 6.751, Average Loss: 4.984, avg. samples / sec: 257.71
Iteration:    860, Loss function: 6.899, Average Loss: 5.019, avg. samples / sec: 316.71
Iteration:    880, Loss function: 6.621, Average Loss: 5.052, avg. samples / sec: 320.29
Iteration:    900, Loss function: 6.791, Average Loss: 5.084, avg. samples / sec: 329.73
Iteration:    920, Loss function: 6.463, Average Loss: 5.113, avg. samples / sec: 321.08
Iteration:    940, Loss function: 6.894, Average Loss: 5.142, avg. samples / sec: 319.95
Iteration:    960, Loss function: 6.461, Average Loss: 5.171, avg. samples / sec: 314.08
Iteration:    980, Loss function: 6.547, Average Loss: 5.199, avg. samples / sec: 317.04
Iteration:   1000, Loss function: 6.521, Average Loss: 5.224, avg. samples / sec: 326.16
Iteration:   1020, Loss function: 6.499, Average Loss: 5.249, avg. samples / sec: 329.05
:::MLLOG {"namespace": "", "time_ms": 1639150879583, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639150879584, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.496, Average Loss: 5.273, avg. samples / sec: 325.94
Iteration:   1060, Loss function: 6.436, Average Loss: 5.297, avg. samples / sec: 256.41
Iteration:   1080, Loss function: 6.415, Average Loss: 5.318, avg. samples / sec: 315.91
Iteration:   1100, Loss function: 6.153, Average Loss: 5.338, avg. samples / sec: 294.36
Iteration:   1120, Loss function: 6.275, Average Loss: 5.358, avg. samples / sec: 251.67
Iteration:   1140, Loss function: 6.384, Average Loss: 5.377, avg. samples / sec: 221.19
Iteration:   1160, Loss function: 6.187, Average Loss: 5.394, avg. samples / sec: 226.44
Iteration:   1180, Loss function: 6.244, Average Loss: 5.411, avg. samples / sec: 265.26
Iteration:   1200, Loss function: 6.378, Average Loss: 5.428, avg. samples / sec: 290.23
Iteration:   1220, Loss function: 6.137, Average Loss: 5.443, avg. samples / sec: 234.50
Iteration:   1240, Loss function: 6.173, Average Loss: 5.457, avg. samples / sec: 304.01
Iteration:   1260, Loss function: 6.003, Average Loss: 5.470, avg. samples / sec: 323.42
Iteration:   1280, Loss function: 6.026, Average Loss: 5.482, avg. samples / sec: 283.03
Iteration:   1300, Loss function: 6.026, Average Loss: 5.495, avg. samples / sec: 303.22
Iteration:   1320, Loss function: 5.987, Average Loss: 5.506, avg. samples / sec: 317.50
Iteration:   1340, Loss function: 5.811, Average Loss: 5.517, avg. samples / sec: 288.67
Iteration:   1360, Loss function: 6.189, Average Loss: 5.528, avg. samples / sec: 264.90
Iteration:   1380, Loss function: 6.028, Average Loss: 5.538, avg. samples / sec: 321.59
Iteration:   1400, Loss function: 6.064, Average Loss: 5.547, avg. samples / sec: 323.09
Iteration:   1420, Loss function: 5.954, Average Loss: 5.555, avg. samples / sec: 326.88
Iteration:   1440, Loss function: 6.463, Average Loss: 5.564, avg. samples / sec: 332.26
Iteration:   1460, Loss function: 6.259, Average Loss: 5.572, avg. samples / sec: 316.70
Iteration:   1480, Loss function: 6.005, Average Loss: 5.581, avg. samples / sec: 333.79
Iteration:   1500, Loss function: 6.086, Average Loss: 5.590, avg. samples / sec: 327.19
Iteration:   1520, Loss function: 5.965, Average Loss: 5.595, avg. samples / sec: 330.49
Iteration:   1540, Loss function: 5.882, Average Loss: 5.599, avg. samples / sec: 299.14
Iteration:   1560, Loss function: 5.730, Average Loss: 5.604, avg. samples / sec: 334.30
Iteration:   1580, Loss function: 5.519, Average Loss: 5.609, avg. samples / sec: 329.28
Iteration:   1600, Loss function: 6.021, Average Loss: 5.614, avg. samples / sec: 273.97
Iteration:   1620, Loss function: 5.779, Average Loss: 5.619, avg. samples / sec: 332.82
Iteration:   1640, Loss function: 5.861, Average Loss: 5.622, avg. samples / sec: 328.01
Iteration:   1660, Loss function: 5.994, Average Loss: 5.626, avg. samples / sec: 251.27
Iteration:   1680, Loss function: 5.849, Average Loss: 5.630, avg. samples / sec: 314.83
Iteration:   1700, Loss function: 5.527, Average Loss: 5.634, avg. samples / sec: 282.73
Iteration:   1720, Loss function: 5.671, Average Loss: 5.636, avg. samples / sec: 231.30
Iteration:   1740, Loss function: 5.823, Average Loss: 5.638, avg. samples / sec: 249.46
Iteration:   1760, Loss function: 5.568, Average Loss: 5.640, avg. samples / sec: 265.39
Iteration:   1780, Loss function: 5.576, Average Loss: 5.642, avg. samples / sec: 224.81
Iteration:   1800, Loss function: 5.602, Average Loss: 5.644, avg. samples / sec: 178.95
Iteration:   1820, Loss function: 6.016, Average Loss: 5.646, avg. samples / sec: 286.82
Iteration:   1840, Loss function: 6.037, Average Loss: 5.647, avg. samples / sec: 331.64
Iteration:   1860, Loss function: 5.677, Average Loss: 5.645, avg. samples / sec: 282.79
Iteration:   1880, Loss function: 6.069, Average Loss: 5.647, avg. samples / sec: 299.32
Iteration:   1900, Loss function: 5.780, Average Loss: 5.649, avg. samples / sec: 315.47
Iteration:   1920, Loss function: 5.823, Average Loss: 5.649, avg. samples / sec: 336.44
Iteration:   1940, Loss function: 5.833, Average Loss: 5.649, avg. samples / sec: 339.24
Iteration:   1960, Loss function: 5.556, Average Loss: 5.648, avg. samples / sec: 295.68
Iteration:   1980, Loss function: 5.613, Average Loss: 5.647, avg. samples / sec: 287.69
Iteration:   2000, Loss function: 5.463, Average Loss: 5.647, avg. samples / sec: 226.85
Iteration:   2020, Loss function: 5.747, Average Loss: 5.647, avg. samples / sec: 330.02
Iteration:   2040, Loss function: 5.645, Average Loss: 5.646, avg. samples / sec: 240.11
:::MLLOG {"namespace": "", "time_ms": 1639151291597, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639151291600, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.594, Average Loss: 5.644, avg. samples / sec: 282.04
Iteration:   2080, Loss function: 4.994, Average Loss: 5.642, avg. samples / sec: 276.66
Iteration:   2100, Loss function: 5.455, Average Loss: 5.640, avg. samples / sec: 327.04
Iteration:   2120, Loss function: 5.236, Average Loss: 5.636, avg. samples / sec: 336.39
Iteration:   2140, Loss function: 5.546, Average Loss: 5.633, avg. samples / sec: 322.77
Iteration:   2160, Loss function: 5.374, Average Loss: 5.631, avg. samples / sec: 328.34
Iteration:   2180, Loss function: 5.387, Average Loss: 5.629, avg. samples / sec: 337.18
Iteration:   2200, Loss function: 5.517, Average Loss: 5.623, avg. samples / sec: 224.08
Iteration:   2220, Loss function: 5.585, Average Loss: 5.621, avg. samples / sec: 238.00
Iteration:   2240, Loss function: 5.386, Average Loss: 5.619, avg. samples / sec: 269.41
Iteration:   2260, Loss function: 5.391, Average Loss: 5.615, avg. samples / sec: 324.01
Iteration:   2280, Loss function: 5.128, Average Loss: 5.613, avg. samples / sec: 301.70
Iteration:   2300, Loss function: 5.302, Average Loss: 5.610, avg. samples / sec: 321.31
Iteration:   2320, Loss function: 5.152, Average Loss: 5.607, avg. samples / sec: 321.87
Iteration:   2340, Loss function: 5.592, Average Loss: 5.604, avg. samples / sec: 332.16
Iteration:   2360, Loss function: 5.400, Average Loss: 5.600, avg. samples / sec: 332.18
Iteration:   2380, Loss function: 5.330, Average Loss: 5.597, avg. samples / sec: 325.15
Iteration:   2400, Loss function: 5.527, Average Loss: 5.593, avg. samples / sec: 311.32
Iteration:   2420, Loss function: 5.534, Average Loss: 5.589, avg. samples / sec: 285.28
Iteration:   2440, Loss function: 5.420, Average Loss: 5.586, avg. samples / sec: 328.21
Iteration:   2460, Loss function: 5.240, Average Loss: 5.583, avg. samples / sec: 327.23
Iteration:   2480, Loss function: 5.422, Average Loss: 5.580, avg. samples / sec: 336.34
Iteration:   2500, Loss function: 5.401, Average Loss: 5.576, avg. samples / sec: 295.84
Iteration:   2520, Loss function: 5.446, Average Loss: 5.571, avg. samples / sec: 298.38
Iteration:   2540, Loss function: 5.325, Average Loss: 5.568, avg. samples / sec: 305.84
Iteration:   2560, Loss function: 5.236, Average Loss: 5.564, avg. samples / sec: 319.47
Iteration:   2580, Loss function: 5.341, Average Loss: 5.560, avg. samples / sec: 315.29
Iteration:   2600, Loss function: 5.304, Average Loss: 5.557, avg. samples / sec: 273.55
Iteration:   2620, Loss function: 5.649, Average Loss: 5.552, avg. samples / sec: 310.29
Iteration:   2640, Loss function: 5.083, Average Loss: 5.548, avg. samples / sec: 329.10
Iteration:   2660, Loss function: 5.285, Average Loss: 5.545, avg. samples / sec: 320.74
Iteration:   2680, Loss function: 5.153, Average Loss: 5.542, avg. samples / sec: 289.94
Iteration:   2700, Loss function: 5.172, Average Loss: 5.537, avg. samples / sec: 322.30
Iteration:   2720, Loss function: 5.433, Average Loss: 5.533, avg. samples / sec: 317.75
Iteration:   2740, Loss function: 4.934, Average Loss: 5.529, avg. samples / sec: 328.01
Iteration:   2760, Loss function: 5.050, Average Loss: 5.524, avg. samples / sec: 315.84
Iteration:   2780, Loss function: 5.600, Average Loss: 5.520, avg. samples / sec: 330.92
Iteration:   2800, Loss function: 5.447, Average Loss: 5.516, avg. samples / sec: 338.17
Iteration:   2820, Loss function: 5.392, Average Loss: 5.512, avg. samples / sec: 238.05
Iteration:   2840, Loss function: 5.288, Average Loss: 5.508, avg. samples / sec: 262.71
Iteration:   2860, Loss function: 5.012, Average Loss: 5.502, avg. samples / sec: 304.69
Iteration:   2880, Loss function: 5.334, Average Loss: 5.498, avg. samples / sec: 227.46
Iteration:   2900, Loss function: 5.167, Average Loss: 5.493, avg. samples / sec: 266.81
Iteration:   2920, Loss function: 5.210, Average Loss: 5.488, avg. samples / sec: 164.08
Iteration:   2940, Loss function: 4.856, Average Loss: 5.485, avg. samples / sec: 276.62
Iteration:   2960, Loss function: 5.367, Average Loss: 5.479, avg. samples / sec: 234.91
Iteration:   2980, Loss function: 5.225, Average Loss: 5.476, avg. samples / sec: 300.50
Iteration:   3000, Loss function: 5.281, Average Loss: 5.470, avg. samples / sec: 276.71
Iteration:   3020, Loss function: 5.249, Average Loss: 5.464, avg. samples / sec: 313.71
Iteration:   3040, Loss function: 5.150, Average Loss: 5.459, avg. samples / sec: 291.98
Iteration:   3060, Loss function: 4.815, Average Loss: 5.452, avg. samples / sec: 304.09
Iteration:   3080, Loss function: 4.959, Average Loss: 5.446, avg. samples / sec: 282.70
:::MLLOG {"namespace": "", "time_ms": 1639151690837, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639151690839, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.219, Average Loss: 5.440, avg. samples / sec: 309.24
Iteration:   3120, Loss function: 4.917, Average Loss: 5.434, avg. samples / sec: 339.07
Iteration:   3140, Loss function: 5.141, Average Loss: 5.429, avg. samples / sec: 331.84
Iteration:   3160, Loss function: 5.511, Average Loss: 5.424, avg. samples / sec: 317.89
Iteration:   3180, Loss function: 4.940, Average Loss: 5.419, avg. samples / sec: 279.88
Iteration:   3200, Loss function: 5.342, Average Loss: 5.413, avg. samples / sec: 334.75
Iteration:   3220, Loss function: 5.107, Average Loss: 5.407, avg. samples / sec: 332.35
Iteration:   3240, Loss function: 5.171, Average Loss: 5.402, avg. samples / sec: 327.27
Iteration:   3260, Loss function: 4.803, Average Loss: 5.397, avg. samples / sec: 315.50
Iteration:   3280, Loss function: 4.775, Average Loss: 5.390, avg. samples / sec: 277.45
Iteration:   3300, Loss function: 4.719, Average Loss: 5.384, avg. samples / sec: 254.68
Iteration:   3320, Loss function: 4.877, Average Loss: 5.379, avg. samples / sec: 270.95
Iteration:   3340, Loss function: 5.040, Average Loss: 5.374, avg. samples / sec: 304.33
Iteration:   3360, Loss function: 5.223, Average Loss: 5.368, avg. samples / sec: 323.12
Iteration:   3380, Loss function: 5.320, Average Loss: 5.361, avg. samples / sec: 328.05
Iteration:   3400, Loss function: 4.813, Average Loss: 5.356, avg. samples / sec: 332.04
Iteration:   3420, Loss function: 5.317, Average Loss: 5.350, avg. samples / sec: 302.70
Iteration:   3440, Loss function: 4.765, Average Loss: 5.346, avg. samples / sec: 313.71
Iteration:   3460, Loss function: 5.148, Average Loss: 5.340, avg. samples / sec: 321.63
Iteration:   3480, Loss function: 5.049, Average Loss: 5.335, avg. samples / sec: 289.53
Iteration:   3500, Loss function: 5.192, Average Loss: 5.332, avg. samples / sec: 329.14
Iteration:   3520, Loss function: 5.152, Average Loss: 5.328, avg. samples / sec: 314.04
Iteration:   3540, Loss function: 5.139, Average Loss: 5.324, avg. samples / sec: 290.20
Iteration:   3560, Loss function: 5.103, Average Loss: 5.321, avg. samples / sec: 338.12
Iteration:   3580, Loss function: 5.125, Average Loss: 5.317, avg. samples / sec: 336.56
Iteration:   3600, Loss function: 5.084, Average Loss: 5.311, avg. samples / sec: 315.38
Iteration:   3620, Loss function: 4.907, Average Loss: 5.306, avg. samples / sec: 311.02
Iteration:   3640, Loss function: 4.789, Average Loss: 5.301, avg. samples / sec: 321.55
Iteration:   3660, Loss function: 5.086, Average Loss: 5.295, avg. samples / sec: 333.08
Iteration:   3680, Loss function: 4.965, Average Loss: 5.289, avg. samples / sec: 339.53
Iteration:   3700, Loss function: 4.965, Average Loss: 5.284, avg. samples / sec: 324.73
Iteration:   3720, Loss function: 4.941, Average Loss: 5.278, avg. samples / sec: 320.86
Iteration:   3740, Loss function: 5.200, Average Loss: 5.273, avg. samples / sec: 315.83
Iteration:   3760, Loss function: 5.119, Average Loss: 5.269, avg. samples / sec: 255.23
Iteration:   3780, Loss function: 5.189, Average Loss: 5.264, avg. samples / sec: 299.60
Iteration:   3800, Loss function: 5.111, Average Loss: 5.261, avg. samples / sec: 244.46
Iteration:   3820, Loss function: 5.149, Average Loss: 5.257, avg. samples / sec: 189.95
Iteration:   3840, Loss function: 4.868, Average Loss: 5.253, avg. samples / sec: 251.08
Iteration:   3860, Loss function: 4.781, Average Loss: 5.248, avg. samples / sec: 295.57
Iteration:   3880, Loss function: 4.845, Average Loss: 5.243, avg. samples / sec: 306.33
Iteration:   3900, Loss function: 5.437, Average Loss: 5.238, avg. samples / sec: 270.14
Iteration:   3920, Loss function: 5.317, Average Loss: 5.233, avg. samples / sec: 289.03
Iteration:   3940, Loss function: 5.066, Average Loss: 5.228, avg. samples / sec: 300.03
Iteration:   3960, Loss function: 4.821, Average Loss: 5.224, avg. samples / sec: 318.52
Iteration:   3980, Loss function: 4.839, Average Loss: 5.219, avg. samples / sec: 298.23
Iteration:   4000, Loss function: 5.202, Average Loss: 5.215, avg. samples / sec: 320.21
Iteration:   4020, Loss function: 4.958, Average Loss: 5.209, avg. samples / sec: 314.32
Iteration:   4040, Loss function: 5.049, Average Loss: 5.206, avg. samples / sec: 309.38
Iteration:   4060, Loss function: 5.486, Average Loss: 5.203, avg. samples / sec: 277.33
Iteration:   4080, Loss function: 5.146, Average Loss: 5.199, avg. samples / sec: 324.71
Iteration:   4100, Loss function: 5.165, Average Loss: 5.196, avg. samples / sec: 313.75
:::MLLOG {"namespace": "", "time_ms": 1639152078660, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639152078666, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.932, Average Loss: 5.192, avg. samples / sec: 330.11
Iteration:   4140, Loss function: 4.769, Average Loss: 5.186, avg. samples / sec: 336.16
Iteration:   4160, Loss function: 4.908, Average Loss: 5.180, avg. samples / sec: 301.64
Iteration:   4180, Loss function: 4.978, Average Loss: 5.175, avg. samples / sec: 248.23
Iteration:   4200, Loss function: 4.803, Average Loss: 5.170, avg. samples / sec: 325.65
Iteration:   4220, Loss function: 4.896, Average Loss: 5.164, avg. samples / sec: 339.98
Iteration:   4240, Loss function: 5.044, Average Loss: 5.160, avg. samples / sec: 314.10
Iteration:   4260, Loss function: 5.242, Average Loss: 5.155, avg. samples / sec: 317.65
Iteration:   4280, Loss function: 5.000, Average Loss: 5.149, avg. samples / sec: 198.74
Iteration:   4300, Loss function: 4.724, Average Loss: 5.143, avg. samples / sec: 324.75
Iteration:   4320, Loss function: 4.857, Average Loss: 5.138, avg. samples / sec: 334.96
Iteration:   4340, Loss function: 4.692, Average Loss: 5.132, avg. samples / sec: 322.43
Iteration:   4360, Loss function: 4.845, Average Loss: 5.128, avg. samples / sec: 288.99
Iteration:   4380, Loss function: 5.115, Average Loss: 5.124, avg. samples / sec: 306.94
Iteration:   4400, Loss function: 5.107, Average Loss: 5.120, avg. samples / sec: 334.59
Iteration:   4420, Loss function: 4.782, Average Loss: 5.115, avg. samples / sec: 324.09
Iteration:   4440, Loss function: 4.834, Average Loss: 5.110, avg. samples / sec: 337.65
Iteration:   4460, Loss function: 5.027, Average Loss: 5.105, avg. samples / sec: 299.72
Iteration:   4480, Loss function: 5.064, Average Loss: 5.103, avg. samples / sec: 237.74
Iteration:   4500, Loss function: 5.012, Average Loss: 5.100, avg. samples / sec: 283.02
Iteration:   4520, Loss function: 4.697, Average Loss: 5.096, avg. samples / sec: 326.11
Iteration:   4540, Loss function: 4.956, Average Loss: 5.092, avg. samples / sec: 314.04
Iteration:   4560, Loss function: 4.709, Average Loss: 5.088, avg. samples / sec: 325.43
Iteration:   4580, Loss function: 4.655, Average Loss: 5.085, avg. samples / sec: 327.21
Iteration:   4600, Loss function: 4.842, Average Loss: 5.081, avg. samples / sec: 288.46
Iteration:   4620, Loss function: 4.746, Average Loss: 5.076, avg. samples / sec: 265.25
Iteration:   4640, Loss function: 4.762, Average Loss: 5.071, avg. samples / sec: 289.38
Iteration:   4660, Loss function: 4.883, Average Loss: 5.068, avg. samples / sec: 313.05
Iteration:   4680, Loss function: 5.375, Average Loss: 5.063, avg. samples / sec: 271.77
Iteration:   4700, Loss function: 4.709, Average Loss: 5.059, avg. samples / sec: 306.80
Iteration:   4720, Loss function: 4.680, Average Loss: 5.055, avg. samples / sec: 329.87
Iteration:   4740, Loss function: 4.827, Average Loss: 5.051, avg. samples / sec: 320.78
Iteration:   4760, Loss function: 4.539, Average Loss: 5.047, avg. samples / sec: 324.87
Iteration:   4780, Loss function: 5.071, Average Loss: 5.043, avg. samples / sec: 326.19
Iteration:   4800, Loss function: 4.921, Average Loss: 5.041, avg. samples / sec: 305.97
Iteration:   4820, Loss function: 4.805, Average Loss: 5.037, avg. samples / sec: 255.89
Iteration:   4840, Loss function: 5.065, Average Loss: 5.034, avg. samples / sec: 319.35
Iteration:   4860, Loss function: 4.655, Average Loss: 5.029, avg. samples / sec: 235.17
Iteration:   4880, Loss function: 5.250, Average Loss: 5.025, avg. samples / sec: 229.86
Iteration:   4900, Loss function: 4.488, Average Loss: 5.020, avg. samples / sec: 260.53
Iteration:   4920, Loss function: 4.687, Average Loss: 5.017, avg. samples / sec: 287.81
Iteration:   4940, Loss function: 4.891, Average Loss: 5.014, avg. samples / sec: 240.84
Iteration:   4960, Loss function: 4.678, Average Loss: 5.011, avg. samples / sec: 306.09
Iteration:   4980, Loss function: 4.719, Average Loss: 5.007, avg. samples / sec: 326.74
Iteration:   5000, Loss function: 4.895, Average Loss: 5.004, avg. samples / sec: 303.30
Iteration:   5020, Loss function: 5.157, Average Loss: 5.001, avg. samples / sec: 302.69
Iteration:   5040, Loss function: 4.873, Average Loss: 4.999, avg. samples / sec: 293.81
Iteration:   5060, Loss function: 4.782, Average Loss: 4.995, avg. samples / sec: 328.23
Iteration:   5080, Loss function: 4.597, Average Loss: 4.992, avg. samples / sec: 299.39
Iteration:   5100, Loss function: 4.758, Average Loss: 4.988, avg. samples / sec: 316.39
Iteration:   5120, Loss function: 4.604, Average Loss: 4.985, avg. samples / sec: 318.92
Iteration:   5140, Loss function: 5.020, Average Loss: 4.981, avg. samples / sec: 282.62
:::MLLOG {"namespace": "", "time_ms": 1639152475024, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 111.10 s
:::MLLOG {"namespace": "", "time_ms": 1639152586271, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639152586287, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152586291, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.16s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.98s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10925
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22022
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09911
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19195
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13852
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20407
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21662
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10925 AP goal: 0.10000
Iteration:   5160, Loss function: 4.969, Average Loss: 4.977, avg. samples / sec: 18.80
:::MLLOG {"namespace": "", "time_ms": 1639152594532, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594533, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10924964766991255, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152594533, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639152596113, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639152601
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-10 04:10:01 PM'
START TIMING RUN WAS 2021-12-10 03:32:37 PM
+ echo 'START TIMING RUN WAS 2021-12-10 03:32:37 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-10 04:10:01 PM'
ENDING TIMING RUN AT 2021-12-10 04:10:01 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-bc883dd7-516e-5b7c-9476-e8efa1c5616f)
+ result=2244
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-10 03:32:37 PM'
RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-10 03:32:37 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
