8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea
+ echo 'Found 1 MIG instances: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765252
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:52 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:52 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:52 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:52 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-fbqms to the sync file ...
run-mlperf--1-fbqms Found 20 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
    16	run-mlperf--1-pgt2r
    17	run-mlperf--1-rrqzl
    18	run-mlperf--1-sbgrm
    19	run-mlperf--1-pvnvk
    20	run-mlperf--1-fbqms
Fri Dec 17 18:20:57 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259901, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260399, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2009208963, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2009208963
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765265302, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765265302, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765265309, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765265309, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765368056, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765368056, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765373045, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765373046, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765373447, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765373448, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765373449, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.772, Average Loss: 0.024, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.293, Average Loss: 0.469, avg. samples / sec: 208.93
Iteration:     40, Loss function: 20.839, Average Loss: 0.871, avg. samples / sec: 229.06
Iteration:     60, Loss function: 20.420, Average Loss: 1.260, avg. samples / sec: 263.96
Iteration:     80, Loss function: 20.070, Average Loss: 1.634, avg. samples / sec: 251.22
Iteration:    100, Loss function: 15.335, Average Loss: 1.960, avg. samples / sec: 281.01
Iteration:    120, Loss function: 11.327, Average Loss: 2.166, avg. samples / sec: 261.17
Iteration:    140, Loss function: 9.941, Average Loss: 2.329, avg. samples / sec: 265.89
Iteration:    160, Loss function: 9.153, Average Loss: 2.470, avg. samples / sec: 263.54
Iteration:    180, Loss function: 9.033, Average Loss: 2.600, avg. samples / sec: 267.19
Iteration:    200, Loss function: 8.731, Average Loss: 2.725, avg. samples / sec: 299.48
Iteration:    220, Loss function: 8.628, Average Loss: 2.847, avg. samples / sec: 269.89
Iteration:    240, Loss function: 8.602, Average Loss: 2.963, avg. samples / sec: 313.18
Iteration:    260, Loss function: 9.113, Average Loss: 3.078, avg. samples / sec: 287.71
Iteration:    280, Loss function: 8.443, Average Loss: 3.190, avg. samples / sec: 314.73
Iteration:    300, Loss function: 8.309, Average Loss: 3.293, avg. samples / sec: 321.02
Iteration:    320, Loss function: 8.306, Average Loss: 3.394, avg. samples / sec: 225.20
Iteration:    340, Loss function: 8.371, Average Loss: 3.493, avg. samples / sec: 279.53
Iteration:    360, Loss function: 8.226, Average Loss: 3.587, avg. samples / sec: 319.41
Iteration:    380, Loss function: 7.920, Average Loss: 3.676, avg. samples / sec: 295.25
Iteration:    400, Loss function: 7.940, Average Loss: 3.760, avg. samples / sec: 255.59
Iteration:    420, Loss function: 7.650, Average Loss: 3.842, avg. samples / sec: 281.62
Iteration:    440, Loss function: 7.796, Average Loss: 3.921, avg. samples / sec: 285.14
Iteration:    460, Loss function: 7.937, Average Loss: 3.996, avg. samples / sec: 301.95
Iteration:    480, Loss function: 7.430, Average Loss: 4.071, avg. samples / sec: 337.08
Iteration:    500, Loss function: 7.461, Average Loss: 4.141, avg. samples / sec: 326.48
Iteration:    520, Loss function: 7.613, Average Loss: 4.208, avg. samples / sec: 270.20
Iteration:    540, Loss function: 7.521, Average Loss: 4.273, avg. samples / sec: 267.36
Iteration:    560, Loss function: 7.289, Average Loss: 4.336, avg. samples / sec: 320.87
Iteration:    580, Loss function: 7.402, Average Loss: 4.396, avg. samples / sec: 328.02
Iteration:    600, Loss function: 7.172, Average Loss: 4.456, avg. samples / sec: 302.67
Iteration:    620, Loss function: 6.950, Average Loss: 4.510, avg. samples / sec: 312.23
Iteration:    640, Loss function: 7.034, Average Loss: 4.565, avg. samples / sec: 289.47
Iteration:    660, Loss function: 7.274, Average Loss: 4.618, avg. samples / sec: 319.97
Iteration:    680, Loss function: 7.478, Average Loss: 4.670, avg. samples / sec: 295.09
Iteration:    700, Loss function: 6.826, Average Loss: 4.718, avg. samples / sec: 327.89
Iteration:    720, Loss function: 7.026, Average Loss: 4.766, avg. samples / sec: 333.88
Iteration:    740, Loss function: 6.895, Average Loss: 4.810, avg. samples / sec: 337.77
Iteration:    760, Loss function: 7.150, Average Loss: 4.853, avg. samples / sec: 310.49
Iteration:    780, Loss function: 6.726, Average Loss: 4.895, avg. samples / sec: 225.86
Iteration:    800, Loss function: 7.380, Average Loss: 4.935, avg. samples / sec: 305.66
Iteration:    820, Loss function: 6.881, Average Loss: 4.972, avg. samples / sec: 310.25
Iteration:    840, Loss function: 6.707, Average Loss: 5.008, avg. samples / sec: 262.09
Iteration:    860, Loss function: 6.922, Average Loss: 5.042, avg. samples / sec: 325.93
Iteration:    880, Loss function: 6.794, Average Loss: 5.075, avg. samples / sec: 329.54
Iteration:    900, Loss function: 6.639, Average Loss: 5.106, avg. samples / sec: 315.05
Iteration:    920, Loss function: 6.810, Average Loss: 5.136, avg. samples / sec: 329.22
Iteration:    940, Loss function: 6.767, Average Loss: 5.166, avg. samples / sec: 280.59
Iteration:    960, Loss function: 6.317, Average Loss: 5.194, avg. samples / sec: 284.99
Iteration:    980, Loss function: 6.439, Average Loss: 5.222, avg. samples / sec: 331.58
Iteration:   1000, Loss function: 6.757, Average Loss: 5.247, avg. samples / sec: 304.18
Iteration:   1020, Loss function: 6.381, Average Loss: 5.272, avg. samples / sec: 290.44
:::MLLOG {"namespace": "", "time_ms": 1639765780917, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765780919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.538, Average Loss: 5.296, avg. samples / sec: 322.75
Iteration:   1060, Loss function: 6.369, Average Loss: 5.319, avg. samples / sec: 313.57
Iteration:   1080, Loss function: 6.308, Average Loss: 5.339, avg. samples / sec: 236.27
Iteration:   1100, Loss function: 6.268, Average Loss: 5.359, avg. samples / sec: 323.48
Iteration:   1120, Loss function: 6.216, Average Loss: 5.377, avg. samples / sec: 325.68
Iteration:   1140, Loss function: 6.452, Average Loss: 5.396, avg. samples / sec: 322.41
Iteration:   1160, Loss function: 6.005, Average Loss: 5.413, avg. samples / sec: 307.54
Iteration:   1180, Loss function: 6.148, Average Loss: 5.429, avg. samples / sec: 321.33
Iteration:   1200, Loss function: 6.149, Average Loss: 5.445, avg. samples / sec: 243.37
Iteration:   1220, Loss function: 6.213, Average Loss: 5.461, avg. samples / sec: 261.71
Iteration:   1240, Loss function: 5.979, Average Loss: 5.474, avg. samples / sec: 338.00
Iteration:   1260, Loss function: 6.231, Average Loss: 5.486, avg. samples / sec: 281.30
Iteration:   1280, Loss function: 5.933, Average Loss: 5.498, avg. samples / sec: 327.36
Iteration:   1300, Loss function: 6.064, Average Loss: 5.511, avg. samples / sec: 325.04
Iteration:   1320, Loss function: 6.026, Average Loss: 5.522, avg. samples / sec: 333.87
Iteration:   1340, Loss function: 5.714, Average Loss: 5.532, avg. samples / sec: 326.51
Iteration:   1360, Loss function: 5.974, Average Loss: 5.542, avg. samples / sec: 334.16
Iteration:   1380, Loss function: 6.058, Average Loss: 5.551, avg. samples / sec: 330.71
Iteration:   1400, Loss function: 6.108, Average Loss: 5.559, avg. samples / sec: 300.48
Iteration:   1420, Loss function: 5.890, Average Loss: 5.566, avg. samples / sec: 298.67
Iteration:   1440, Loss function: 6.388, Average Loss: 5.574, avg. samples / sec: 306.23
Iteration:   1460, Loss function: 6.201, Average Loss: 5.582, avg. samples / sec: 250.82
Iteration:   1480, Loss function: 6.015, Average Loss: 5.590, avg. samples / sec: 257.96
Iteration:   1500, Loss function: 6.003, Average Loss: 5.598, avg. samples / sec: 176.56
Iteration:   1520, Loss function: 5.926, Average Loss: 5.604, avg. samples / sec: 172.60
Iteration:   1540, Loss function: 5.994, Average Loss: 5.608, avg. samples / sec: 244.35
Iteration:   1560, Loss function: 5.691, Average Loss: 5.613, avg. samples / sec: 206.85
Iteration:   1580, Loss function: 5.553, Average Loss: 5.617, avg. samples / sec: 207.32
Iteration:   1600, Loss function: 6.165, Average Loss: 5.622, avg. samples / sec: 333.80
Iteration:   1620, Loss function: 5.784, Average Loss: 5.627, avg. samples / sec: 331.56
Iteration:   1640, Loss function: 6.023, Average Loss: 5.629, avg. samples / sec: 305.15
Iteration:   1660, Loss function: 5.865, Average Loss: 5.634, avg. samples / sec: 304.84
Iteration:   1680, Loss function: 5.769, Average Loss: 5.636, avg. samples / sec: 318.11
Iteration:   1700, Loss function: 5.482, Average Loss: 5.639, avg. samples / sec: 313.49
Iteration:   1720, Loss function: 5.685, Average Loss: 5.641, avg. samples / sec: 307.52
Iteration:   1740, Loss function: 5.801, Average Loss: 5.644, avg. samples / sec: 244.43
Iteration:   1760, Loss function: 5.684, Average Loss: 5.646, avg. samples / sec: 337.67
Iteration:   1780, Loss function: 5.538, Average Loss: 5.647, avg. samples / sec: 324.46
Iteration:   1800, Loss function: 5.699, Average Loss: 5.650, avg. samples / sec: 328.14
Iteration:   1820, Loss function: 5.872, Average Loss: 5.652, avg. samples / sec: 327.62
Iteration:   1840, Loss function: 5.913, Average Loss: 5.653, avg. samples / sec: 330.83
Iteration:   1860, Loss function: 5.671, Average Loss: 5.653, avg. samples / sec: 257.12
Iteration:   1880, Loss function: 5.996, Average Loss: 5.654, avg. samples / sec: 307.35
Iteration:   1900, Loss function: 5.950, Average Loss: 5.656, avg. samples / sec: 278.55
Iteration:   1920, Loss function: 5.775, Average Loss: 5.655, avg. samples / sec: 317.88
Iteration:   1940, Loss function: 5.804, Average Loss: 5.653, avg. samples / sec: 321.77
Iteration:   1960, Loss function: 5.680, Average Loss: 5.652, avg. samples / sec: 246.81
Iteration:   1980, Loss function: 5.726, Average Loss: 5.652, avg. samples / sec: 281.57
Iteration:   2000, Loss function: 5.607, Average Loss: 5.651, avg. samples / sec: 240.34
Iteration:   2020, Loss function: 5.626, Average Loss: 5.650, avg. samples / sec: 293.71
Iteration:   2040, Loss function: 5.631, Average Loss: 5.649, avg. samples / sec: 220.38
:::MLLOG {"namespace": "", "time_ms": 1639766195980, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766195995, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.526, Average Loss: 5.647, avg. samples / sec: 256.92
Iteration:   2080, Loss function: 5.188, Average Loss: 5.645, avg. samples / sec: 322.06
Iteration:   2100, Loss function: 5.532, Average Loss: 5.643, avg. samples / sec: 234.30
Iteration:   2120, Loss function: 5.211, Average Loss: 5.639, avg. samples / sec: 280.93
Iteration:   2140, Loss function: 5.522, Average Loss: 5.635, avg. samples / sec: 289.27
Iteration:   2160, Loss function: 5.478, Average Loss: 5.632, avg. samples / sec: 246.32
Iteration:   2180, Loss function: 5.467, Average Loss: 5.630, avg. samples / sec: 321.32
Iteration:   2200, Loss function: 5.523, Average Loss: 5.627, avg. samples / sec: 326.36
Iteration:   2220, Loss function: 5.609, Average Loss: 5.625, avg. samples / sec: 330.64
Iteration:   2240, Loss function: 5.476, Average Loss: 5.622, avg. samples / sec: 276.38
Iteration:   2260, Loss function: 5.534, Average Loss: 5.618, avg. samples / sec: 311.15
Iteration:   2280, Loss function: 5.240, Average Loss: 5.615, avg. samples / sec: 318.29
Iteration:   2300, Loss function: 5.278, Average Loss: 5.612, avg. samples / sec: 313.60
Iteration:   2320, Loss function: 5.422, Average Loss: 5.609, avg. samples / sec: 305.17
Iteration:   2340, Loss function: 5.342, Average Loss: 5.605, avg. samples / sec: 303.78
Iteration:   2360, Loss function: 5.395, Average Loss: 5.601, avg. samples / sec: 320.09
Iteration:   2380, Loss function: 5.309, Average Loss: 5.596, avg. samples / sec: 334.92
Iteration:   2400, Loss function: 5.616, Average Loss: 5.592, avg. samples / sec: 293.43
Iteration:   2420, Loss function: 5.466, Average Loss: 5.588, avg. samples / sec: 246.04
Iteration:   2440, Loss function: 5.425, Average Loss: 5.585, avg. samples / sec: 300.92
Iteration:   2460, Loss function: 5.222, Average Loss: 5.581, avg. samples / sec: 248.58
Iteration:   2480, Loss function: 5.303, Average Loss: 5.577, avg. samples / sec: 316.71
Iteration:   2500, Loss function: 5.308, Average Loss: 5.573, avg. samples / sec: 223.19
Iteration:   2520, Loss function: 5.367, Average Loss: 5.568, avg. samples / sec: 313.94
Iteration:   2540, Loss function: 5.406, Average Loss: 5.564, avg. samples / sec: 332.23
Iteration:   2560, Loss function: 5.361, Average Loss: 5.562, avg. samples / sec: 325.36
Iteration:   2580, Loss function: 5.384, Average Loss: 5.558, avg. samples / sec: 311.98
Iteration:   2600, Loss function: 5.442, Average Loss: 5.555, avg. samples / sec: 286.15
Iteration:   2620, Loss function: 5.429, Average Loss: 5.550, avg. samples / sec: 324.55
Iteration:   2640, Loss function: 5.157, Average Loss: 5.547, avg. samples / sec: 325.75
Iteration:   2660, Loss function: 5.131, Average Loss: 5.544, avg. samples / sec: 289.08
Iteration:   2680, Loss function: 5.196, Average Loss: 5.539, avg. samples / sec: 308.54
Iteration:   2700, Loss function: 5.451, Average Loss: 5.535, avg. samples / sec: 244.27
Iteration:   2720, Loss function: 5.287, Average Loss: 5.531, avg. samples / sec: 316.11
Iteration:   2740, Loss function: 4.933, Average Loss: 5.526, avg. samples / sec: 321.38
Iteration:   2760, Loss function: 4.953, Average Loss: 5.520, avg. samples / sec: 268.87
Iteration:   2780, Loss function: 5.593, Average Loss: 5.517, avg. samples / sec: 288.77
Iteration:   2800, Loss function: 5.295, Average Loss: 5.512, avg. samples / sec: 296.02
Iteration:   2820, Loss function: 5.535, Average Loss: 5.507, avg. samples / sec: 330.79
Iteration:   2840, Loss function: 5.019, Average Loss: 5.502, avg. samples / sec: 284.63
Iteration:   2860, Loss function: 5.058, Average Loss: 5.496, avg. samples / sec: 255.76
Iteration:   2880, Loss function: 5.368, Average Loss: 5.492, avg. samples / sec: 321.33
Iteration:   2900, Loss function: 5.078, Average Loss: 5.487, avg. samples / sec: 315.30
Iteration:   2920, Loss function: 5.201, Average Loss: 5.481, avg. samples / sec: 271.99
Iteration:   2940, Loss function: 4.883, Average Loss: 5.476, avg. samples / sec: 314.32
Iteration:   2960, Loss function: 5.321, Average Loss: 5.471, avg. samples / sec: 340.68
Iteration:   2980, Loss function: 5.255, Average Loss: 5.468, avg. samples / sec: 335.59
Iteration:   3000, Loss function: 5.290, Average Loss: 5.462, avg. samples / sec: 333.18
Iteration:   3020, Loss function: 5.337, Average Loss: 5.456, avg. samples / sec: 340.21
Iteration:   3040, Loss function: 5.138, Average Loss: 5.451, avg. samples / sec: 316.92
Iteration:   3060, Loss function: 5.071, Average Loss: 5.445, avg. samples / sec: 314.31
Iteration:   3080, Loss function: 5.098, Average Loss: 5.440, avg. samples / sec: 328.97
:::MLLOG {"namespace": "", "time_ms": 1639766587720, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766587721, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.284, Average Loss: 5.436, avg. samples / sec: 299.03
Iteration:   3120, Loss function: 5.061, Average Loss: 5.430, avg. samples / sec: 227.06
Iteration:   3140, Loss function: 5.037, Average Loss: 5.426, avg. samples / sec: 260.10
Iteration:   3160, Loss function: 5.425, Average Loss: 5.420, avg. samples / sec: 281.00
Iteration:   3180, Loss function: 4.997, Average Loss: 5.415, avg. samples / sec: 300.72
Iteration:   3200, Loss function: 5.288, Average Loss: 5.410, avg. samples / sec: 287.47
Iteration:   3220, Loss function: 5.256, Average Loss: 5.404, avg. samples / sec: 288.48
Iteration:   3240, Loss function: 5.065, Average Loss: 5.400, avg. samples / sec: 321.27
Iteration:   3260, Loss function: 5.004, Average Loss: 5.394, avg. samples / sec: 301.81
Iteration:   3280, Loss function: 4.802, Average Loss: 5.389, avg. samples / sec: 301.29
Iteration:   3300, Loss function: 4.759, Average Loss: 5.383, avg. samples / sec: 301.33
Iteration:   3320, Loss function: 4.972, Average Loss: 5.378, avg. samples / sec: 317.76
Iteration:   3340, Loss function: 5.083, Average Loss: 5.374, avg. samples / sec: 327.65
Iteration:   3360, Loss function: 5.034, Average Loss: 5.368, avg. samples / sec: 316.27
Iteration:   3380, Loss function: 5.149, Average Loss: 5.360, avg. samples / sec: 314.10
Iteration:   3400, Loss function: 4.852, Average Loss: 5.356, avg. samples / sec: 313.54
Iteration:   3420, Loss function: 5.344, Average Loss: 5.351, avg. samples / sec: 278.18
Iteration:   3440, Loss function: 4.846, Average Loss: 5.345, avg. samples / sec: 316.59
Iteration:   3460, Loss function: 5.135, Average Loss: 5.340, avg. samples / sec: 335.49
Iteration:   3480, Loss function: 5.153, Average Loss: 5.336, avg. samples / sec: 335.12
Iteration:   3500, Loss function: 5.056, Average Loss: 5.331, avg. samples / sec: 285.45
Iteration:   3520, Loss function: 5.105, Average Loss: 5.327, avg. samples / sec: 324.34
Iteration:   3540, Loss function: 4.863, Average Loss: 5.322, avg. samples / sec: 313.55
Iteration:   3560, Loss function: 4.940, Average Loss: 5.319, avg. samples / sec: 335.48
Iteration:   3580, Loss function: 5.128, Average Loss: 5.314, avg. samples / sec: 320.22
Iteration:   3600, Loss function: 5.098, Average Loss: 5.308, avg. samples / sec: 329.93
Iteration:   3620, Loss function: 4.868, Average Loss: 5.304, avg. samples / sec: 294.68
Iteration:   3640, Loss function: 4.757, Average Loss: 5.299, avg. samples / sec: 278.51
Iteration:   3660, Loss function: 4.986, Average Loss: 5.294, avg. samples / sec: 265.64
Iteration:   3680, Loss function: 5.003, Average Loss: 5.287, avg. samples / sec: 261.53
Iteration:   3700, Loss function: 4.897, Average Loss: 5.282, avg. samples / sec: 264.28
Iteration:   3720, Loss function: 5.060, Average Loss: 5.276, avg. samples / sec: 307.02
Iteration:   3740, Loss function: 5.102, Average Loss: 5.272, avg. samples / sec: 310.44
Iteration:   3760, Loss function: 5.063, Average Loss: 5.267, avg. samples / sec: 272.34
Iteration:   3780, Loss function: 4.949, Average Loss: 5.262, avg. samples / sec: 257.36
Iteration:   3800, Loss function: 4.996, Average Loss: 5.258, avg. samples / sec: 330.00
Iteration:   3820, Loss function: 5.208, Average Loss: 5.252, avg. samples / sec: 290.64
Iteration:   3840, Loss function: 4.719, Average Loss: 5.247, avg. samples / sec: 297.48
Iteration:   3860, Loss function: 4.954, Average Loss: 5.242, avg. samples / sec: 293.46
Iteration:   3880, Loss function: 4.989, Average Loss: 5.237, avg. samples / sec: 243.85
Iteration:   3900, Loss function: 5.040, Average Loss: 5.233, avg. samples / sec: 330.91
Iteration:   3920, Loss function: 5.170, Average Loss: 5.228, avg. samples / sec: 292.89
Iteration:   3940, Loss function: 5.066, Average Loss: 5.224, avg. samples / sec: 307.96
Iteration:   3960, Loss function: 4.900, Average Loss: 5.221, avg. samples / sec: 328.93
Iteration:   3980, Loss function: 4.950, Average Loss: 5.216, avg. samples / sec: 335.67
Iteration:   4000, Loss function: 5.213, Average Loss: 5.212, avg. samples / sec: 306.85
Iteration:   4020, Loss function: 5.035, Average Loss: 5.207, avg. samples / sec: 324.20
Iteration:   4040, Loss function: 5.073, Average Loss: 5.204, avg. samples / sec: 273.96
Iteration:   4060, Loss function: 5.021, Average Loss: 5.199, avg. samples / sec: 281.28
Iteration:   4080, Loss function: 5.101, Average Loss: 5.194, avg. samples / sec: 328.22
Iteration:   4100, Loss function: 5.026, Average Loss: 5.190, avg. samples / sec: 329.29
:::MLLOG {"namespace": "", "time_ms": 1639766980566, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766980567, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.084, Average Loss: 5.187, avg. samples / sec: 328.57
Iteration:   4140, Loss function: 4.938, Average Loss: 5.182, avg. samples / sec: 315.71
Iteration:   4160, Loss function: 4.865, Average Loss: 5.175, avg. samples / sec: 273.02
Iteration:   4180, Loss function: 4.970, Average Loss: 5.170, avg. samples / sec: 299.46
Iteration:   4200, Loss function: 4.863, Average Loss: 5.166, avg. samples / sec: 305.50
Iteration:   4220, Loss function: 4.800, Average Loss: 5.160, avg. samples / sec: 298.34
Iteration:   4240, Loss function: 5.018, Average Loss: 5.156, avg. samples / sec: 284.67
Iteration:   4260, Loss function: 5.023, Average Loss: 5.152, avg. samples / sec: 288.85
Iteration:   4280, Loss function: 5.058, Average Loss: 5.146, avg. samples / sec: 291.57
Iteration:   4300, Loss function: 4.772, Average Loss: 5.140, avg. samples / sec: 323.33
Iteration:   4320, Loss function: 4.778, Average Loss: 5.134, avg. samples / sec: 320.59
Iteration:   4340, Loss function: 4.829, Average Loss: 5.128, avg. samples / sec: 284.64
Iteration:   4360, Loss function: 4.904, Average Loss: 5.124, avg. samples / sec: 270.19
Iteration:   4380, Loss function: 5.118, Average Loss: 5.119, avg. samples / sec: 281.14
Iteration:   4400, Loss function: 4.848, Average Loss: 5.116, avg. samples / sec: 319.97
Iteration:   4420, Loss function: 4.965, Average Loss: 5.111, avg. samples / sec: 327.81
Iteration:   4440, Loss function: 4.981, Average Loss: 5.107, avg. samples / sec: 291.37
Iteration:   4460, Loss function: 5.274, Average Loss: 5.103, avg. samples / sec: 236.41
Iteration:   4480, Loss function: 5.091, Average Loss: 5.100, avg. samples / sec: 316.63
Iteration:   4500, Loss function: 4.907, Average Loss: 5.096, avg. samples / sec: 336.89
Iteration:   4520, Loss function: 4.707, Average Loss: 5.092, avg. samples / sec: 332.96
Iteration:   4540, Loss function: 5.079, Average Loss: 5.087, avg. samples / sec: 276.33
Iteration:   4560, Loss function: 4.879, Average Loss: 5.083, avg. samples / sec: 305.85
Iteration:   4580, Loss function: 4.715, Average Loss: 5.080, avg. samples / sec: 276.52
Iteration:   4600, Loss function: 4.858, Average Loss: 5.077, avg. samples / sec: 273.18
Iteration:   4620, Loss function: 4.889, Average Loss: 5.072, avg. samples / sec: 328.12
Iteration:   4640, Loss function: 4.824, Average Loss: 5.067, avg. samples / sec: 329.54
Iteration:   4660, Loss function: 4.711, Average Loss: 5.063, avg. samples / sec: 316.26
Iteration:   4680, Loss function: 5.193, Average Loss: 5.058, avg. samples / sec: 321.41
Iteration:   4700, Loss function: 4.675, Average Loss: 5.054, avg. samples / sec: 328.34
Iteration:   4720, Loss function: 4.759, Average Loss: 5.050, avg. samples / sec: 307.05
Iteration:   4740, Loss function: 4.671, Average Loss: 5.045, avg. samples / sec: 312.09
Iteration:   4760, Loss function: 4.748, Average Loss: 5.042, avg. samples / sec: 315.03
Iteration:   4780, Loss function: 5.117, Average Loss: 5.038, avg. samples / sec: 295.80
Iteration:   4800, Loss function: 5.103, Average Loss: 5.036, avg. samples / sec: 291.26
Iteration:   4820, Loss function: 4.561, Average Loss: 5.033, avg. samples / sec: 242.95
Iteration:   4840, Loss function: 4.920, Average Loss: 5.029, avg. samples / sec: 267.52
Iteration:   4860, Loss function: 4.640, Average Loss: 5.024, avg. samples / sec: 319.86
Iteration:   4880, Loss function: 5.184, Average Loss: 5.020, avg. samples / sec: 296.56
Iteration:   4900, Loss function: 4.589, Average Loss: 5.016, avg. samples / sec: 316.46
Iteration:   4920, Loss function: 4.709, Average Loss: 5.012, avg. samples / sec: 327.11
Iteration:   4940, Loss function: 4.993, Average Loss: 5.008, avg. samples / sec: 325.49
Iteration:   4960, Loss function: 4.789, Average Loss: 5.005, avg. samples / sec: 318.48
Iteration:   4980, Loss function: 4.540, Average Loss: 5.002, avg. samples / sec: 317.97
Iteration:   5000, Loss function: 4.799, Average Loss: 4.997, avg. samples / sec: 331.97
Iteration:   5020, Loss function: 5.153, Average Loss: 4.994, avg. samples / sec: 324.76
Iteration:   5040, Loss function: 4.957, Average Loss: 4.991, avg. samples / sec: 305.72
Iteration:   5060, Loss function: 4.822, Average Loss: 4.989, avg. samples / sec: 328.92
Iteration:   5080, Loss function: 4.637, Average Loss: 4.985, avg. samples / sec: 317.87
Iteration:   5100, Loss function: 4.865, Average Loss: 4.982, avg. samples / sec: 252.91
Iteration:   5120, Loss function: 4.552, Average Loss: 4.979, avg. samples / sec: 335.42
Iteration:   5140, Loss function: 4.667, Average Loss: 4.975, avg. samples / sec: 309.46
:::MLLOG {"namespace": "", "time_ms": 1639767368564, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 107.74 s
:::MLLOG {"namespace": "", "time_ms": 1639767476386, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767476389, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767476401, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.87s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.58s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10457
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20954
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09574
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18643
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19856
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20972
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20972
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10457 AP goal: 0.10000
Iteration:   5160, Loss function: 4.861, Average Loss: 4.971, avg. samples / sec: 19.74
:::MLLOG {"namespace": "", "time_ms": 1639767483035, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483036, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10456705926325185, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483036, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485887, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions'
Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259901, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260399, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2009208963, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2009208963
:::MLLOG {"namespace": "", "time_ms": 1639765265302, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765265302, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765265308, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765265309, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765265309, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765368056, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765368056, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765373045, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765373046, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765373447, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765373448, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765373449, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.772, Average Loss: 0.024, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.293, Average Loss: 0.469, avg. samples / sec: 208.93
Iteration:     40, Loss function: 20.839, Average Loss: 0.871, avg. samples / sec: 229.06
Iteration:     60, Loss function: 20.420, Average Loss: 1.260, avg. samples / sec: 263.96
Iteration:     80, Loss function: 20.070, Average Loss: 1.634, avg. samples / sec: 251.22
Iteration:    100, Loss function: 15.335, Average Loss: 1.960, avg. samples / sec: 281.01
Iteration:    120, Loss function: 11.327, Average Loss: 2.166, avg. samples / sec: 261.17
Iteration:    140, Loss function: 9.941, Average Loss: 2.329, avg. samples / sec: 265.89
Iteration:    160, Loss function: 9.153, Average Loss: 2.470, avg. samples / sec: 263.54
Iteration:    180, Loss function: 9.033, Average Loss: 2.600, avg. samples / sec: 267.19
Iteration:    200, Loss function: 8.731, Average Loss: 2.725, avg. samples / sec: 299.48
Iteration:    220, Loss function: 8.628, Average Loss: 2.847, avg. samples / sec: 269.89
Iteration:    240, Loss function: 8.602, Average Loss: 2.963, avg. samples / sec: 313.18
Iteration:    260, Loss function: 9.113, Average Loss: 3.078, avg. samples / sec: 287.71
Iteration:    280, Loss function: 8.443, Average Loss: 3.190, avg. samples / sec: 314.73
Iteration:    300, Loss function: 8.309, Average Loss: 3.293, avg. samples / sec: 321.02
Iteration:    320, Loss function: 8.306, Average Loss: 3.394, avg. samples / sec: 225.20
Iteration:    340, Loss function: 8.371, Average Loss: 3.493, avg. samples / sec: 279.53
Iteration:    360, Loss function: 8.226, Average Loss: 3.587, avg. samples / sec: 319.41
Iteration:    380, Loss function: 7.920, Average Loss: 3.676, avg. samples / sec: 295.25
Iteration:    400, Loss function: 7.940, Average Loss: 3.760, avg. samples / sec: 255.59
Iteration:    420, Loss function: 7.650, Average Loss: 3.842, avg. samples / sec: 281.62
Iteration:    440, Loss function: 7.796, Average Loss: 3.921, avg. samples / sec: 285.14
Iteration:    460, Loss function: 7.937, Average Loss: 3.996, avg. samples / sec: 301.95
Iteration:    480, Loss function: 7.430, Average Loss: 4.071, avg. samples / sec: 337.08
Iteration:    500, Loss function: 7.461, Average Loss: 4.141, avg. samples / sec: 326.48
Iteration:    520, Loss function: 7.613, Average Loss: 4.208, avg. samples / sec: 270.20
Iteration:    540, Loss function: 7.521, Average Loss: 4.273, avg. samples / sec: 267.36
Iteration:    560, Loss function: 7.289, Average Loss: 4.336, avg. samples / sec: 320.87
Iteration:    580, Loss function: 7.402, Average Loss: 4.396, avg. samples / sec: 328.02
Iteration:    600, Loss function: 7.172, Average Loss: 4.456, avg. samples / sec: 302.67
Iteration:    620, Loss function: 6.950, Average Loss: 4.510, avg. samples / sec: 312.23
Iteration:    640, Loss function: 7.034, Average Loss: 4.565, avg. samples / sec: 289.47
Iteration:    660, Loss function: 7.274, Average Loss: 4.618, avg. samples / sec: 319.97
Iteration:    680, Loss function: 7.478, Average Loss: 4.670, avg. samples / sec: 295.09
Iteration:    700, Loss function: 6.826, Average Loss: 4.718, avg. samples / sec: 327.89
Iteration:    720, Loss function: 7.026, Average Loss: 4.766, avg. samples / sec: 333.88
Iteration:    740, Loss function: 6.895, Average Loss: 4.810, avg. samples / sec: 337.77
Iteration:    760, Loss function: 7.150, Average Loss: 4.853, avg. samples / sec: 310.49
Iteration:    780, Loss function: 6.726, Average Loss: 4.895, avg. samples / sec: 225.86
Iteration:    800, Loss function: 7.380, Average Loss: 4.935, avg. samples / sec: 305.66
Iteration:    820, Loss function: 6.881, Average Loss: 4.972, avg. samples / sec: 310.25
Iteration:    840, Loss function: 6.707, Average Loss: 5.008, avg. samples / sec: 262.09
Iteration:    860, Loss function: 6.922, Average Loss: 5.042, avg. samples / sec: 325.93
Iteration:    880, Loss function: 6.794, Average Loss: 5.075, avg. samples / sec: 329.54
Iteration:    900, Loss function: 6.639, Average Loss: 5.106, avg. samples / sec: 315.05
Iteration:    920, Loss function: 6.810, Average Loss: 5.136, avg. samples / sec: 329.22
Iteration:    940, Loss function: 6.767, Average Loss: 5.166, avg. samples / sec: 280.59
Iteration:    960, Loss function: 6.317, Average Loss: 5.194, avg. samples / sec: 284.99
Iteration:    980, Loss function: 6.439, Average Loss: 5.222, avg. samples / sec: 331.58
Iteration:   1000, Loss function: 6.757, Average Loss: 5.247, avg. samples / sec: 304.18
Iteration:   1020, Loss function: 6.381, Average Loss: 5.272, avg. samples / sec: 290.44
:::MLLOG {"namespace": "", "time_ms": 1639765780917, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765780919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.538, Average Loss: 5.296, avg. samples / sec: 322.75
Iteration:   1060, Loss function: 6.369, Average Loss: 5.319, avg. samples / sec: 313.57
Iteration:   1080, Loss function: 6.308, Average Loss: 5.339, avg. samples / sec: 236.27
Iteration:   1100, Loss function: 6.268, Average Loss: 5.359, avg. samples / sec: 323.48
Iteration:   1120, Loss function: 6.216, Average Loss: 5.377, avg. samples / sec: 325.68
Iteration:   1140, Loss function: 6.452, Average Loss: 5.396, avg. samples / sec: 322.41
Iteration:   1160, Loss function: 6.005, Average Loss: 5.413, avg. samples / sec: 307.54
Iteration:   1180, Loss function: 6.148, Average Loss: 5.429, avg. samples / sec: 321.33
Iteration:   1200, Loss function: 6.149, Average Loss: 5.445, avg. samples / sec: 243.37
Iteration:   1220, Loss function: 6.213, Average Loss: 5.461, avg. samples / sec: 261.71
Iteration:   1240, Loss function: 5.979, Average Loss: 5.474, avg. samples / sec: 338.00
Iteration:   1260, Loss function: 6.231, Average Loss: 5.486, avg. samples / sec: 281.30
Iteration:   1280, Loss function: 5.933, Average Loss: 5.498, avg. samples / sec: 327.36
Iteration:   1300, Loss function: 6.064, Average Loss: 5.511, avg. samples / sec: 325.04
Iteration:   1320, Loss function: 6.026, Average Loss: 5.522, avg. samples / sec: 333.87
Iteration:   1340, Loss function: 5.714, Average Loss: 5.532, avg. samples / sec: 326.51
Iteration:   1360, Loss function: 5.974, Average Loss: 5.542, avg. samples / sec: 334.16
Iteration:   1380, Loss function: 6.058, Average Loss: 5.551, avg. samples / sec: 330.71
Iteration:   1400, Loss function: 6.108, Average Loss: 5.559, avg. samples / sec: 300.48
Iteration:   1420, Loss function: 5.890, Average Loss: 5.566, avg. samples / sec: 298.67
Iteration:   1440, Loss function: 6.388, Average Loss: 5.574, avg. samples / sec: 306.23
Iteration:   1460, Loss function: 6.201, Average Loss: 5.582, avg. samples / sec: 250.82
Iteration:   1480, Loss function: 6.015, Average Loss: 5.590, avg. samples / sec: 257.96
Iteration:   1500, Loss function: 6.003, Average Loss: 5.598, avg. samples / sec: 176.56
Iteration:   1520, Loss function: 5.926, Average Loss: 5.604, avg. samples / sec: 172.60
Iteration:   1540, Loss function: 5.994, Average Loss: 5.608, avg. samples / sec: 244.35
Iteration:   1560, Loss function: 5.691, Average Loss: 5.613, avg. samples / sec: 206.85
Iteration:   1580, Loss function: 5.553, Average Loss: 5.617, avg. samples / sec: 207.32
Iteration:   1600, Loss function: 6.165, Average Loss: 5.622, avg. samples / sec: 333.80
Iteration:   1620, Loss function: 5.784, Average Loss: 5.627, avg. samples / sec: 331.56
Iteration:   1640, Loss function: 6.023, Average Loss: 5.629, avg. samples / sec: 305.15
Iteration:   1660, Loss function: 5.865, Average Loss: 5.634, avg. samples / sec: 304.84
Iteration:   1680, Loss function: 5.769, Average Loss: 5.636, avg. samples / sec: 318.11
Iteration:   1700, Loss function: 5.482, Average Loss: 5.639, avg. samples / sec: 313.49
Iteration:   1720, Loss function: 5.685, Average Loss: 5.641, avg. samples / sec: 307.52
Iteration:   1740, Loss function: 5.801, Average Loss: 5.644, avg. samples / sec: 244.43
Iteration:   1760, Loss function: 5.684, Average Loss: 5.646, avg. samples / sec: 337.67
Iteration:   1780, Loss function: 5.538, Average Loss: 5.647, avg. samples / sec: 324.46
Iteration:   1800, Loss function: 5.699, Average Loss: 5.650, avg. samples / sec: 328.14
Iteration:   1820, Loss function: 5.872, Average Loss: 5.652, avg. samples / sec: 327.62
Iteration:   1840, Loss function: 5.913, Average Loss: 5.653, avg. samples / sec: 330.83
Iteration:   1860, Loss function: 5.671, Average Loss: 5.653, avg. samples / sec: 257.12
Iteration:   1880, Loss function: 5.996, Average Loss: 5.654, avg. samples / sec: 307.35
Iteration:   1900, Loss function: 5.950, Average Loss: 5.656, avg. samples / sec: 278.55
Iteration:   1920, Loss function: 5.775, Average Loss: 5.655, avg. samples / sec: 317.88
Iteration:   1940, Loss function: 5.804, Average Loss: 5.653, avg. samples / sec: 321.77
Iteration:   1960, Loss function: 5.680, Average Loss: 5.652, avg. samples / sec: 246.81
Iteration:   1980, Loss function: 5.726, Average Loss: 5.652, avg. samples / sec: 281.57
Iteration:   2000, Loss function: 5.607, Average Loss: 5.651, avg. samples / sec: 240.34
Iteration:   2020, Loss function: 5.626, Average Loss: 5.650, avg. samples / sec: 293.71
Iteration:   2040, Loss function: 5.631, Average Loss: 5.649, avg. samples / sec: 220.38
:::MLLOG {"namespace": "", "time_ms": 1639766195980, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766195995, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.526, Average Loss: 5.647, avg. samples / sec: 256.92
Iteration:   2080, Loss function: 5.188, Average Loss: 5.645, avg. samples / sec: 322.06
Iteration:   2100, Loss function: 5.532, Average Loss: 5.643, avg. samples / sec: 234.30
Iteration:   2120, Loss function: 5.211, Average Loss: 5.639, avg. samples / sec: 280.93
Iteration:   2140, Loss function: 5.522, Average Loss: 5.635, avg. samples / sec: 289.27
Iteration:   2160, Loss function: 5.478, Average Loss: 5.632, avg. samples / sec: 246.32
Iteration:   2180, Loss function: 5.467, Average Loss: 5.630, avg. samples / sec: 321.32
Iteration:   2200, Loss function: 5.523, Average Loss: 5.627, avg. samples / sec: 326.36
Iteration:   2220, Loss function: 5.609, Average Loss: 5.625, avg. samples / sec: 330.64
Iteration:   2240, Loss function: 5.476, Average Loss: 5.622, avg. samples / sec: 276.38
Iteration:   2260, Loss function: 5.534, Average Loss: 5.618, avg. samples / sec: 311.15
Iteration:   2280, Loss function: 5.240, Average Loss: 5.615, avg. samples / sec: 318.29
Iteration:   2300, Loss function: 5.278, Average Loss: 5.612, avg. samples / sec: 313.60
Iteration:   2320, Loss function: 5.422, Average Loss: 5.609, avg. samples / sec: 305.17
Iteration:   2340, Loss function: 5.342, Average Loss: 5.605, avg. samples / sec: 303.78
Iteration:   2360, Loss function: 5.395, Average Loss: 5.601, avg. samples / sec: 320.09
Iteration:   2380, Loss function: 5.309, Average Loss: 5.596, avg. samples / sec: 334.92
Iteration:   2400, Loss function: 5.616, Average Loss: 5.592, avg. samples / sec: 293.43
Iteration:   2420, Loss function: 5.466, Average Loss: 5.588, avg. samples / sec: 246.04
Iteration:   2440, Loss function: 5.425, Average Loss: 5.585, avg. samples / sec: 300.92
Iteration:   2460, Loss function: 5.222, Average Loss: 5.581, avg. samples / sec: 248.58
Iteration:   2480, Loss function: 5.303, Average Loss: 5.577, avg. samples / sec: 316.71
Iteration:   2500, Loss function: 5.308, Average Loss: 5.573, avg. samples / sec: 223.19
Iteration:   2520, Loss function: 5.367, Average Loss: 5.568, avg. samples / sec: 313.94
Iteration:   2540, Loss function: 5.406, Average Loss: 5.564, avg. samples / sec: 332.23
Iteration:   2560, Loss function: 5.361, Average Loss: 5.562, avg. samples / sec: 325.36
Iteration:   2580, Loss function: 5.384, Average Loss: 5.558, avg. samples / sec: 311.98
Iteration:   2600, Loss function: 5.442, Average Loss: 5.555, avg. samples / sec: 286.15
Iteration:   2620, Loss function: 5.429, Average Loss: 5.550, avg. samples / sec: 324.55
Iteration:   2640, Loss function: 5.157, Average Loss: 5.547, avg. samples / sec: 325.75
Iteration:   2660, Loss function: 5.131, Average Loss: 5.544, avg. samples / sec: 289.08
Iteration:   2680, Loss function: 5.196, Average Loss: 5.539, avg. samples / sec: 308.54
Iteration:   2700, Loss function: 5.451, Average Loss: 5.535, avg. samples / sec: 244.27
Iteration:   2720, Loss function: 5.287, Average Loss: 5.531, avg. samples / sec: 316.11
Iteration:   2740, Loss function: 4.933, Average Loss: 5.526, avg. samples / sec: 321.38
Iteration:   2760, Loss function: 4.953, Average Loss: 5.520, avg. samples / sec: 268.87
Iteration:   2780, Loss function: 5.593, Average Loss: 5.517, avg. samples / sec: 288.77
Iteration:   2800, Loss function: 5.295, Average Loss: 5.512, avg. samples / sec: 296.02
Iteration:   2820, Loss function: 5.535, Average Loss: 5.507, avg. samples / sec: 330.79
Iteration:   2840, Loss function: 5.019, Average Loss: 5.502, avg. samples / sec: 284.63
Iteration:   2860, Loss function: 5.058, Average Loss: 5.496, avg. samples / sec: 255.76
Iteration:   2880, Loss function: 5.368, Average Loss: 5.492, avg. samples / sec: 321.33
Iteration:   2900, Loss function: 5.078, Average Loss: 5.487, avg. samples / sec: 315.30
Iteration:   2920, Loss function: 5.201, Average Loss: 5.481, avg. samples / sec: 271.99
Iteration:   2940, Loss function: 4.883, Average Loss: 5.476, avg. samples / sec: 314.32
Iteration:   2960, Loss function: 5.321, Average Loss: 5.471, avg. samples / sec: 340.68
Iteration:   2980, Loss function: 5.255, Average Loss: 5.468, avg. samples / sec: 335.59
Iteration:   3000, Loss function: 5.290, Average Loss: 5.462, avg. samples / sec: 333.18
Iteration:   3020, Loss function: 5.337, Average Loss: 5.456, avg. samples / sec: 340.21
Iteration:   3040, Loss function: 5.138, Average Loss: 5.451, avg. samples / sec: 316.92
Iteration:   3060, Loss function: 5.071, Average Loss: 5.445, avg. samples / sec: 314.31
Iteration:   3080, Loss function: 5.098, Average Loss: 5.440, avg. samples / sec: 328.97
:::MLLOG {"namespace": "", "time_ms": 1639766587720, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766587721, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.284, Average Loss: 5.436, avg. samples / sec: 299.03
Iteration:   3120, Loss function: 5.061, Average Loss: 5.430, avg. samples / sec: 227.06
Iteration:   3140, Loss function: 5.037, Average Loss: 5.426, avg. samples / sec: 260.10
Iteration:   3160, Loss function: 5.425, Average Loss: 5.420, avg. samples / sec: 281.00
Iteration:   3180, Loss function: 4.997, Average Loss: 5.415, avg. samples / sec: 300.72
Iteration:   3200, Loss function: 5.288, Average Loss: 5.410, avg. samples / sec: 287.47
Iteration:   3220, Loss function: 5.256, Average Loss: 5.404, avg. samples / sec: 288.48
Iteration:   3240, Loss function: 5.065, Average Loss: 5.400, avg. samples / sec: 321.27
Iteration:   3260, Loss function: 5.004, Average Loss: 5.394, avg. samples / sec: 301.81
Iteration:   3280, Loss function: 4.802, Average Loss: 5.389, avg. samples / sec: 301.29
Iteration:   3300, Loss function: 4.759, Average Loss: 5.383, avg. samples / sec: 301.33
Iteration:   3320, Loss function: 4.972, Average Loss: 5.378, avg. samples / sec: 317.76
Iteration:   3340, Loss function: 5.083, Average Loss: 5.374, avg. samples / sec: 327.65
Iteration:   3360, Loss function: 5.034, Average Loss: 5.368, avg. samples / sec: 316.27
Iteration:   3380, Loss function: 5.149, Average Loss: 5.360, avg. samples / sec: 314.10
Iteration:   3400, Loss function: 4.852, Average Loss: 5.356, avg. samples / sec: 313.54
Iteration:   3420, Loss function: 5.344, Average Loss: 5.351, avg. samples / sec: 278.18
Iteration:   3440, Loss function: 4.846, Average Loss: 5.345, avg. samples / sec: 316.59
Iteration:   3460, Loss function: 5.135, Average Loss: 5.340, avg. samples / sec: 335.49
Iteration:   3480, Loss function: 5.153, Average Loss: 5.336, avg. samples / sec: 335.12
Iteration:   3500, Loss function: 5.056, Average Loss: 5.331, avg. samples / sec: 285.45
Iteration:   3520, Loss function: 5.105, Average Loss: 5.327, avg. samples / sec: 324.34
Iteration:   3540, Loss function: 4.863, Average Loss: 5.322, avg. samples / sec: 313.55
Iteration:   3560, Loss function: 4.940, Average Loss: 5.319, avg. samples / sec: 335.48
Iteration:   3580, Loss function: 5.128, Average Loss: 5.314, avg. samples / sec: 320.22
Iteration:   3600, Loss function: 5.098, Average Loss: 5.308, avg. samples / sec: 329.93
Iteration:   3620, Loss function: 4.868, Average Loss: 5.304, avg. samples / sec: 294.68
Iteration:   3640, Loss function: 4.757, Average Loss: 5.299, avg. samples / sec: 278.51
Iteration:   3660, Loss function: 4.986, Average Loss: 5.294, avg. samples / sec: 265.64
Iteration:   3680, Loss function: 5.003, Average Loss: 5.287, avg. samples / sec: 261.53
Iteration:   3700, Loss function: 4.897, Average Loss: 5.282, avg. samples / sec: 264.28
Iteration:   3720, Loss function: 5.060, Average Loss: 5.276, avg. samples / sec: 307.02
Iteration:   3740, Loss function: 5.102, Average Loss: 5.272, avg. samples / sec: 310.44
Iteration:   3760, Loss function: 5.063, Average Loss: 5.267, avg. samples / sec: 272.34
Iteration:   3780, Loss function: 4.949, Average Loss: 5.262, avg. samples / sec: 257.36
Iteration:   3800, Loss function: 4.996, Average Loss: 5.258, avg. samples / sec: 330.00
Iteration:   3820, Loss function: 5.208, Average Loss: 5.252, avg. samples / sec: 290.64
Iteration:   3840, Loss function: 4.719, Average Loss: 5.247, avg. samples / sec: 297.48
Iteration:   3860, Loss function: 4.954, Average Loss: 5.242, avg. samples / sec: 293.46
Iteration:   3880, Loss function: 4.989, Average Loss: 5.237, avg. samples / sec: 243.85
Iteration:   3900, Loss function: 5.040, Average Loss: 5.233, avg. samples / sec: 330.91
Iteration:   3920, Loss function: 5.170, Average Loss: 5.228, avg. samples / sec: 292.89
Iteration:   3940, Loss function: 5.066, Average Loss: 5.224, avg. samples / sec: 307.96
Iteration:   3960, Loss function: 4.900, Average Loss: 5.221, avg. samples / sec: 328.93
Iteration:   3980, Loss function: 4.950, Average Loss: 5.216, avg. samples / sec: 335.67
Iteration:   4000, Loss function: 5.213, Average Loss: 5.212, avg. samples / sec: 306.85
Iteration:   4020, Loss function: 5.035, Average Loss: 5.207, avg. samples / sec: 324.20
Iteration:   4040, Loss function: 5.073, Average Loss: 5.204, avg. samples / sec: 273.96
Iteration:   4060, Loss function: 5.021, Average Loss: 5.199, avg. samples / sec: 281.28
Iteration:   4080, Loss function: 5.101, Average Loss: 5.194, avg. samples / sec: 328.22
Iteration:   4100, Loss function: 5.026, Average Loss: 5.190, avg. samples / sec: 329.29
:::MLLOG {"namespace": "", "time_ms": 1639766980566, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766980567, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.084, Average Loss: 5.187, avg. samples / sec: 328.57
Iteration:   4140, Loss function: 4.938, Average Loss: 5.182, avg. samples / sec: 315.71
Iteration:   4160, Loss function: 4.865, Average Loss: 5.175, avg. samples / sec: 273.02
Iteration:   4180, Loss function: 4.970, Average Loss: 5.170, avg. samples / sec: 299.46
Iteration:   4200, Loss function: 4.863, Average Loss: 5.166, avg. samples / sec: 305.50
Iteration:   4220, Loss function: 4.800, Average Loss: 5.160, avg. samples / sec: 298.34
Iteration:   4240, Loss function: 5.018, Average Loss: 5.156, avg. samples / sec: 284.67
Iteration:   4260, Loss function: 5.023, Average Loss: 5.152, avg. samples / sec: 288.85
Iteration:   4280, Loss function: 5.058, Average Loss: 5.146, avg. samples / sec: 291.57
Iteration:   4300, Loss function: 4.772, Average Loss: 5.140, avg. samples / sec: 323.33
Iteration:   4320, Loss function: 4.778, Average Loss: 5.134, avg. samples / sec: 320.59
Iteration:   4340, Loss function: 4.829, Average Loss: 5.128, avg. samples / sec: 284.64
Iteration:   4360, Loss function: 4.904, Average Loss: 5.124, avg. samples / sec: 270.19
Iteration:   4380, Loss function: 5.118, Average Loss: 5.119, avg. samples / sec: 281.14
Iteration:   4400, Loss function: 4.848, Average Loss: 5.116, avg. samples / sec: 319.97
Iteration:   4420, Loss function: 4.965, Average Loss: 5.111, avg. samples / sec: 327.81
Iteration:   4440, Loss function: 4.981, Average Loss: 5.107, avg. samples / sec: 291.37
Iteration:   4460, Loss function: 5.274, Average Loss: 5.103, avg. samples / sec: 236.41
Iteration:   4480, Loss function: 5.091, Average Loss: 5.100, avg. samples / sec: 316.63
Iteration:   4500, Loss function: 4.907, Average Loss: 5.096, avg. samples / sec: 336.89
Iteration:   4520, Loss function: 4.707, Average Loss: 5.092, avg. samples / sec: 332.96
Iteration:   4540, Loss function: 5.079, Average Loss: 5.087, avg. samples / sec: 276.33
Iteration:   4560, Loss function: 4.879, Average Loss: 5.083, avg. samples / sec: 305.85
Iteration:   4580, Loss function: 4.715, Average Loss: 5.080, avg. samples / sec: 276.52
Iteration:   4600, Loss function: 4.858, Average Loss: 5.077, avg. samples / sec: 273.18
Iteration:   4620, Loss function: 4.889, Average Loss: 5.072, avg. samples / sec: 328.12
Iteration:   4640, Loss function: 4.824, Average Loss: 5.067, avg. samples / sec: 329.54
Iteration:   4660, Loss function: 4.711, Average Loss: 5.063, avg. samples / sec: 316.26
Iteration:   4680, Loss function: 5.193, Average Loss: 5.058, avg. samples / sec: 321.41
Iteration:   4700, Loss function: 4.675, Average Loss: 5.054, avg. samples / sec: 328.34
Iteration:   4720, Loss function: 4.759, Average Loss: 5.050, avg. samples / sec: 307.05
Iteration:   4740, Loss function: 4.671, Average Loss: 5.045, avg. samples / sec: 312.09
Iteration:   4760, Loss function: 4.748, Average Loss: 5.042, avg. samples / sec: 315.03
Iteration:   4780, Loss function: 5.117, Average Loss: 5.038, avg. samples / sec: 295.80
Iteration:   4800, Loss function: 5.103, Average Loss: 5.036, avg. samples / sec: 291.26
Iteration:   4820, Loss function: 4.561, Average Loss: 5.033, avg. samples / sec: 242.95
Iteration:   4840, Loss function: 4.920, Average Loss: 5.029, avg. samples / sec: 267.52
Iteration:   4860, Loss function: 4.640, Average Loss: 5.024, avg. samples / sec: 319.86
Iteration:   4880, Loss function: 5.184, Average Loss: 5.020, avg. samples / sec: 296.56
Iteration:   4900, Loss function: 4.589, Average Loss: 5.016, avg. samples / sec: 316.46
Iteration:   4920, Loss function: 4.709, Average Loss: 5.012, avg. samples / sec: 327.11
Iteration:   4940, Loss function: 4.993, Average Loss: 5.008, avg. samples / sec: 325.49
Iteration:   4960, Loss function: 4.789, Average Loss: 5.005, avg. samples / sec: 318.48
Iteration:   4980, Loss function: 4.540, Average Loss: 5.002, avg. samples / sec: 317.97
Iteration:   5000, Loss function: 4.799, Average Loss: 4.997, avg. samples / sec: 331.97
Iteration:   5020, Loss function: 5.153, Average Loss: 4.994, avg. samples / sec: 324.76
Iteration:   5040, Loss function: 4.957, Average Loss: 4.991, avg. samples / sec: 305.72
Iteration:   5060, Loss function: 4.822, Average Loss: 4.989, avg. samples / sec: 328.92
Iteration:   5080, Loss function: 4.637, Average Loss: 4.985, avg. samples / sec: 317.87
Iteration:   5100, Loss function: 4.865, Average Loss: 4.982, avg. samples / sec: 252.91
Iteration:   5120, Loss function: 4.552, Average Loss: 4.979, avg. samples / sec: 335.42
Iteration:   5140, Loss function: 4.667, Average Loss: 4.975, avg. samples / sec: 309.46
:::MLLOG {"namespace": "", "time_ms": 1639767368564, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 107.74 s
:::MLLOG {"namespace": "", "time_ms": 1639767476386, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767476389, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767476401, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.87s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.58s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10457
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20954
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09574
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18643
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19856
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20972
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20972
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10457 AP goal: 0.10000
Iteration:   5160, Loss function: 4.861, Average Loss: 4.971, avg. samples / sec: 19.74
:::MLLOG {"namespace": "", "time_ms": 1639767483035, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483036, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10456705926325185, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483036, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485887, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767491
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:11 PM'
START TIMING RUN WAS 2021-12-17 06:20:52 PM
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:52 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:11 PM'
ENDING TIMING RUN AT 2021-12-17 06:58:11 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-0b62d1d0-1cc1-556d-90d7-df9c695133ea)
+ result=2239
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-17 06:20:52 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2239,nvidia,2021-12-17 06:20:52 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
