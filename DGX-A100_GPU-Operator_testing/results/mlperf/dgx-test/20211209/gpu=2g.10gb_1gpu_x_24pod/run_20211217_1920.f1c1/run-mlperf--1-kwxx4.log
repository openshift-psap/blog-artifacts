8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-d0146f40-d527-5cf7-b686-12fa40555093
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-d0146f40-d527-5cf7-b686-12fa40555093
+ echo 'Found 1 MIG instances: MIG-d0146f40-d527-5cf7-b686-12fa40555093'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765250
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:50 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:50 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:50 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:50 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-kwxx4 to the sync file ...
run-mlperf--1-kwxx4 Found 13 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
Fri Dec 17 18:20:55 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765257802, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765258132, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2604304690, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2604304690
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765261898, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765261899, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765261904, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765366590, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765366590, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765369080, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765369080, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765369689, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765369691, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765369694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.500, Average Loss: 0.023, avg. samples / sec: 1.05
Iteration:     20, Loss function: 21.038, Average Loss: 0.453, avg. samples / sec: 254.73
Iteration:     40, Loss function: 20.704, Average Loss: 0.855, avg. samples / sec: 248.34
Iteration:     60, Loss function: 20.409, Average Loss: 1.244, avg. samples / sec: 263.72
Iteration:     80, Loss function: 19.950, Average Loss: 1.618, avg. samples / sec: 256.69
Iteration:    100, Loss function: 16.002, Average Loss: 1.950, avg. samples / sec: 227.90
Iteration:    120, Loss function: 11.297, Average Loss: 2.163, avg. samples / sec: 287.58
Iteration:    140, Loss function: 9.857, Average Loss: 2.322, avg. samples / sec: 268.24
Iteration:    160, Loss function: 9.069, Average Loss: 2.460, avg. samples / sec: 260.93
Iteration:    180, Loss function: 8.874, Average Loss: 2.588, avg. samples / sec: 265.29
Iteration:    200, Loss function: 8.763, Average Loss: 2.712, avg. samples / sec: 265.28
Iteration:    220, Loss function: 8.613, Average Loss: 2.832, avg. samples / sec: 267.32
Iteration:    240, Loss function: 8.586, Average Loss: 2.948, avg. samples / sec: 294.30
Iteration:    260, Loss function: 8.872, Average Loss: 3.063, avg. samples / sec: 276.83
Iteration:    280, Loss function: 8.551, Average Loss: 3.175, avg. samples / sec: 314.80
Iteration:    300, Loss function: 8.337, Average Loss: 3.279, avg. samples / sec: 316.70
Iteration:    320, Loss function: 8.393, Average Loss: 3.378, avg. samples / sec: 267.56
Iteration:    340, Loss function: 8.453, Average Loss: 3.476, avg. samples / sec: 304.83
Iteration:    360, Loss function: 8.020, Average Loss: 3.571, avg. samples / sec: 298.60
Iteration:    380, Loss function: 7.848, Average Loss: 3.659, avg. samples / sec: 241.23
Iteration:    400, Loss function: 7.926, Average Loss: 3.743, avg. samples / sec: 313.65
Iteration:    420, Loss function: 7.574, Average Loss: 3.823, avg. samples / sec: 310.70
Iteration:    440, Loss function: 7.781, Average Loss: 3.901, avg. samples / sec: 295.19
Iteration:    460, Loss function: 7.615, Average Loss: 3.976, avg. samples / sec: 291.04
Iteration:    480, Loss function: 7.366, Average Loss: 4.048, avg. samples / sec: 324.62
Iteration:    500, Loss function: 7.564, Average Loss: 4.119, avg. samples / sec: 275.08
Iteration:    520, Loss function: 7.395, Average Loss: 4.187, avg. samples / sec: 317.69
Iteration:    540, Loss function: 7.599, Average Loss: 4.252, avg. samples / sec: 281.13
Iteration:    560, Loss function: 7.335, Average Loss: 4.314, avg. samples / sec: 327.65
Iteration:    580, Loss function: 7.179, Average Loss: 4.373, avg. samples / sec: 193.36
Iteration:    600, Loss function: 7.343, Average Loss: 4.434, avg. samples / sec: 266.57
Iteration:    620, Loss function: 6.908, Average Loss: 4.491, avg. samples / sec: 252.15
Iteration:    640, Loss function: 6.892, Average Loss: 4.546, avg. samples / sec: 283.41
Iteration:    660, Loss function: 7.247, Average Loss: 4.598, avg. samples / sec: 311.29
Iteration:    680, Loss function: 7.196, Average Loss: 4.649, avg. samples / sec: 319.10
Iteration:    700, Loss function: 6.755, Average Loss: 4.696, avg. samples / sec: 322.99
Iteration:    720, Loss function: 6.891, Average Loss: 4.745, avg. samples / sec: 337.81
Iteration:    740, Loss function: 6.878, Average Loss: 4.790, avg. samples / sec: 336.35
Iteration:    760, Loss function: 7.114, Average Loss: 4.833, avg. samples / sec: 324.86
Iteration:    780, Loss function: 6.785, Average Loss: 4.876, avg. samples / sec: 324.06
Iteration:    800, Loss function: 7.246, Average Loss: 4.915, avg. samples / sec: 335.12
Iteration:    820, Loss function: 6.742, Average Loss: 4.953, avg. samples / sec: 326.39
Iteration:    840, Loss function: 6.788, Average Loss: 4.989, avg. samples / sec: 296.92
Iteration:    860, Loss function: 6.624, Average Loss: 5.022, avg. samples / sec: 317.86
Iteration:    880, Loss function: 6.718, Average Loss: 5.054, avg. samples / sec: 316.87
Iteration:    900, Loss function: 6.944, Average Loss: 5.085, avg. samples / sec: 298.32
Iteration:    920, Loss function: 6.721, Average Loss: 5.115, avg. samples / sec: 303.63
Iteration:    940, Loss function: 6.689, Average Loss: 5.146, avg. samples / sec: 321.90
Iteration:    960, Loss function: 6.321, Average Loss: 5.174, avg. samples / sec: 316.67
Iteration:    980, Loss function: 6.574, Average Loss: 5.202, avg. samples / sec: 307.73
Iteration:   1000, Loss function: 6.624, Average Loss: 5.227, avg. samples / sec: 265.41
Iteration:   1020, Loss function: 6.313, Average Loss: 5.252, avg. samples / sec: 314.25
:::MLLOG {"namespace": "", "time_ms": 1639765776965, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765776966, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.686, Average Loss: 5.276, avg. samples / sec: 308.00
Iteration:   1060, Loss function: 6.414, Average Loss: 5.299, avg. samples / sec: 228.28
Iteration:   1080, Loss function: 6.377, Average Loss: 5.321, avg. samples / sec: 267.69
Iteration:   1100, Loss function: 6.312, Average Loss: 5.341, avg. samples / sec: 287.61
Iteration:   1120, Loss function: 6.150, Average Loss: 5.360, avg. samples / sec: 325.38
Iteration:   1140, Loss function: 6.456, Average Loss: 5.379, avg. samples / sec: 335.38
Iteration:   1160, Loss function: 6.141, Average Loss: 5.396, avg. samples / sec: 271.88
Iteration:   1180, Loss function: 6.237, Average Loss: 5.412, avg. samples / sec: 322.65
Iteration:   1200, Loss function: 6.137, Average Loss: 5.429, avg. samples / sec: 320.12
Iteration:   1220, Loss function: 6.015, Average Loss: 5.443, avg. samples / sec: 335.08
Iteration:   1240, Loss function: 6.056, Average Loss: 5.456, avg. samples / sec: 277.74
Iteration:   1260, Loss function: 6.053, Average Loss: 5.468, avg. samples / sec: 329.65
Iteration:   1280, Loss function: 5.889, Average Loss: 5.481, avg. samples / sec: 259.35
Iteration:   1300, Loss function: 6.218, Average Loss: 5.493, avg. samples / sec: 248.65
Iteration:   1320, Loss function: 6.120, Average Loss: 5.506, avg. samples / sec: 285.41
Iteration:   1340, Loss function: 5.793, Average Loss: 5.516, avg. samples / sec: 309.43
Iteration:   1360, Loss function: 5.989, Average Loss: 5.526, avg. samples / sec: 324.73
Iteration:   1380, Loss function: 6.111, Average Loss: 5.536, avg. samples / sec: 303.29
Iteration:   1400, Loss function: 6.270, Average Loss: 5.546, avg. samples / sec: 325.21
Iteration:   1420, Loss function: 5.744, Average Loss: 5.554, avg. samples / sec: 322.50
Iteration:   1440, Loss function: 6.383, Average Loss: 5.561, avg. samples / sec: 320.74
Iteration:   1460, Loss function: 6.209, Average Loss: 5.570, avg. samples / sec: 267.32
Iteration:   1480, Loss function: 5.937, Average Loss: 5.578, avg. samples / sec: 309.82
Iteration:   1500, Loss function: 5.984, Average Loss: 5.585, avg. samples / sec: 322.26
Iteration:   1520, Loss function: 5.911, Average Loss: 5.591, avg. samples / sec: 240.48
Iteration:   1540, Loss function: 5.887, Average Loss: 5.596, avg. samples / sec: 324.59
Iteration:   1560, Loss function: 5.618, Average Loss: 5.600, avg. samples / sec: 333.60
Iteration:   1580, Loss function: 5.687, Average Loss: 5.606, avg. samples / sec: 328.95
Iteration:   1600, Loss function: 6.181, Average Loss: 5.612, avg. samples / sec: 328.29
Iteration:   1620, Loss function: 5.705, Average Loss: 5.617, avg. samples / sec: 308.00
Iteration:   1640, Loss function: 5.854, Average Loss: 5.621, avg. samples / sec: 285.21
Iteration:   1660, Loss function: 5.982, Average Loss: 5.625, avg. samples / sec: 256.19
Iteration:   1680, Loss function: 5.748, Average Loss: 5.628, avg. samples / sec: 297.46
Iteration:   1700, Loss function: 5.335, Average Loss: 5.632, avg. samples / sec: 328.59
Iteration:   1720, Loss function: 5.661, Average Loss: 5.635, avg. samples / sec: 332.22
Iteration:   1740, Loss function: 5.837, Average Loss: 5.637, avg. samples / sec: 209.88
Iteration:   1760, Loss function: 5.626, Average Loss: 5.639, avg. samples / sec: 313.80
Iteration:   1780, Loss function: 5.752, Average Loss: 5.640, avg. samples / sec: 324.64
Iteration:   1800, Loss function: 5.559, Average Loss: 5.642, avg. samples / sec: 283.55
Iteration:   1820, Loss function: 5.773, Average Loss: 5.644, avg. samples / sec: 272.60
Iteration:   1840, Loss function: 6.024, Average Loss: 5.646, avg. samples / sec: 320.77
Iteration:   1860, Loss function: 5.754, Average Loss: 5.646, avg. samples / sec: 305.98
Iteration:   1880, Loss function: 5.813, Average Loss: 5.648, avg. samples / sec: 315.96
Iteration:   1900, Loss function: 6.023, Average Loss: 5.649, avg. samples / sec: 316.72
Iteration:   1920, Loss function: 5.583, Average Loss: 5.649, avg. samples / sec: 319.79
Iteration:   1940, Loss function: 5.830, Average Loss: 5.649, avg. samples / sec: 314.57
Iteration:   1960, Loss function: 5.686, Average Loss: 5.648, avg. samples / sec: 317.06
Iteration:   1980, Loss function: 5.711, Average Loss: 5.648, avg. samples / sec: 315.24
Iteration:   2000, Loss function: 5.606, Average Loss: 5.647, avg. samples / sec: 298.29
Iteration:   2020, Loss function: 5.706, Average Loss: 5.646, avg. samples / sec: 303.76
Iteration:   2040, Loss function: 5.746, Average Loss: 5.646, avg. samples / sec: 336.80
:::MLLOG {"namespace": "", "time_ms": 1639766168641, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766168643, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.602, Average Loss: 5.644, avg. samples / sec: 324.61
Iteration:   2080, Loss function: 5.058, Average Loss: 5.642, avg. samples / sec: 332.78
Iteration:   2100, Loss function: 5.485, Average Loss: 5.640, avg. samples / sec: 296.96
Iteration:   2120, Loss function: 5.307, Average Loss: 5.637, avg. samples / sec: 324.28
Iteration:   2140, Loss function: 5.471, Average Loss: 5.634, avg. samples / sec: 310.96
Iteration:   2160, Loss function: 5.379, Average Loss: 5.632, avg. samples / sec: 325.20
Iteration:   2180, Loss function: 5.207, Average Loss: 5.630, avg. samples / sec: 319.85
Iteration:   2200, Loss function: 5.419, Average Loss: 5.626, avg. samples / sec: 285.10
Iteration:   2220, Loss function: 5.553, Average Loss: 5.623, avg. samples / sec: 283.30
Iteration:   2240, Loss function: 5.519, Average Loss: 5.620, avg. samples / sec: 284.30
Iteration:   2260, Loss function: 5.423, Average Loss: 5.616, avg. samples / sec: 277.50
Iteration:   2280, Loss function: 5.265, Average Loss: 5.613, avg. samples / sec: 320.55
Iteration:   2300, Loss function: 5.167, Average Loss: 5.610, avg. samples / sec: 308.62
Iteration:   2320, Loss function: 5.409, Average Loss: 5.608, avg. samples / sec: 323.77
Iteration:   2340, Loss function: 5.412, Average Loss: 5.604, avg. samples / sec: 328.78
Iteration:   2360, Loss function: 5.275, Average Loss: 5.600, avg. samples / sec: 321.19
Iteration:   2380, Loss function: 5.437, Average Loss: 5.597, avg. samples / sec: 322.03
Iteration:   2400, Loss function: 5.691, Average Loss: 5.593, avg. samples / sec: 313.56
Iteration:   2420, Loss function: 5.399, Average Loss: 5.589, avg. samples / sec: 321.24
Iteration:   2440, Loss function: 5.451, Average Loss: 5.585, avg. samples / sec: 335.45
Iteration:   2460, Loss function: 5.091, Average Loss: 5.581, avg. samples / sec: 327.39
Iteration:   2480, Loss function: 5.479, Average Loss: 5.577, avg. samples / sec: 331.07
Iteration:   2500, Loss function: 5.286, Average Loss: 5.573, avg. samples / sec: 330.46
Iteration:   2520, Loss function: 5.353, Average Loss: 5.569, avg. samples / sec: 321.14
Iteration:   2540, Loss function: 5.410, Average Loss: 5.566, avg. samples / sec: 299.62
Iteration:   2560, Loss function: 5.329, Average Loss: 5.562, avg. samples / sec: 308.08
Iteration:   2580, Loss function: 5.333, Average Loss: 5.558, avg. samples / sec: 341.16
Iteration:   2600, Loss function: 5.400, Average Loss: 5.555, avg. samples / sec: 321.66
Iteration:   2620, Loss function: 5.573, Average Loss: 5.550, avg. samples / sec: 257.07
Iteration:   2640, Loss function: 5.209, Average Loss: 5.547, avg. samples / sec: 273.87
Iteration:   2660, Loss function: 5.077, Average Loss: 5.543, avg. samples / sec: 234.98
Iteration:   2680, Loss function: 5.179, Average Loss: 5.541, avg. samples / sec: 230.63
Iteration:   2700, Loss function: 5.169, Average Loss: 5.537, avg. samples / sec: 330.62
Iteration:   2720, Loss function: 5.358, Average Loss: 5.534, avg. samples / sec: 307.65
Iteration:   2740, Loss function: 5.013, Average Loss: 5.529, avg. samples / sec: 335.87
Iteration:   2760, Loss function: 4.870, Average Loss: 5.524, avg. samples / sec: 297.18
Iteration:   2780, Loss function: 5.363, Average Loss: 5.521, avg. samples / sec: 235.68
Iteration:   2800, Loss function: 5.302, Average Loss: 5.517, avg. samples / sec: 270.97
Iteration:   2820, Loss function: 5.350, Average Loss: 5.513, avg. samples / sec: 328.78
Iteration:   2840, Loss function: 5.145, Average Loss: 5.508, avg. samples / sec: 326.25
Iteration:   2860, Loss function: 5.149, Average Loss: 5.503, avg. samples / sec: 282.73
Iteration:   2880, Loss function: 5.309, Average Loss: 5.499, avg. samples / sec: 313.55
Iteration:   2900, Loss function: 4.987, Average Loss: 5.495, avg. samples / sec: 322.86
Iteration:   2920, Loss function: 5.243, Average Loss: 5.490, avg. samples / sec: 306.37
Iteration:   2940, Loss function: 4.987, Average Loss: 5.485, avg. samples / sec: 222.30
Iteration:   2960, Loss function: 5.294, Average Loss: 5.482, avg. samples / sec: 293.01
Iteration:   2980, Loss function: 5.191, Average Loss: 5.478, avg. samples / sec: 293.22
Iteration:   3000, Loss function: 5.385, Average Loss: 5.471, avg. samples / sec: 310.50
Iteration:   3020, Loss function: 5.216, Average Loss: 5.465, avg. samples / sec: 328.25
Iteration:   3040, Loss function: 5.178, Average Loss: 5.459, avg. samples / sec: 324.76
Iteration:   3060, Loss function: 5.116, Average Loss: 5.454, avg. samples / sec: 295.13
Iteration:   3080, Loss function: 4.859, Average Loss: 5.449, avg. samples / sec: 288.41
:::MLLOG {"namespace": "", "time_ms": 1639766557668, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766557669, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.175, Average Loss: 5.444, avg. samples / sec: 230.68
Iteration:   3120, Loss function: 5.000, Average Loss: 5.437, avg. samples / sec: 317.71
Iteration:   3140, Loss function: 4.947, Average Loss: 5.432, avg. samples / sec: 323.04
Iteration:   3160, Loss function: 5.581, Average Loss: 5.425, avg. samples / sec: 317.95
Iteration:   3180, Loss function: 4.963, Average Loss: 5.420, avg. samples / sec: 316.02
Iteration:   3200, Loss function: 5.370, Average Loss: 5.416, avg. samples / sec: 265.38
Iteration:   3220, Loss function: 4.968, Average Loss: 5.412, avg. samples / sec: 321.52
Iteration:   3240, Loss function: 5.211, Average Loss: 5.406, avg. samples / sec: 320.89
Iteration:   3260, Loss function: 4.921, Average Loss: 5.401, avg. samples / sec: 321.04
Iteration:   3280, Loss function: 4.805, Average Loss: 5.394, avg. samples / sec: 279.86
Iteration:   3300, Loss function: 4.916, Average Loss: 5.387, avg. samples / sec: 254.09
Iteration:   3320, Loss function: 4.931, Average Loss: 5.383, avg. samples / sec: 321.48
Iteration:   3340, Loss function: 5.106, Average Loss: 5.378, avg. samples / sec: 322.86
Iteration:   3360, Loss function: 5.139, Average Loss: 5.371, avg. samples / sec: 314.73
Iteration:   3380, Loss function: 5.203, Average Loss: 5.365, avg. samples / sec: 284.14
Iteration:   3400, Loss function: 4.791, Average Loss: 5.361, avg. samples / sec: 183.49
Iteration:   3420, Loss function: 5.030, Average Loss: 5.356, avg. samples / sec: 288.89
Iteration:   3440, Loss function: 4.960, Average Loss: 5.351, avg. samples / sec: 323.35
Iteration:   3460, Loss function: 5.166, Average Loss: 5.347, avg. samples / sec: 331.71
Iteration:   3480, Loss function: 5.299, Average Loss: 5.342, avg. samples / sec: 292.19
Iteration:   3500, Loss function: 5.072, Average Loss: 5.338, avg. samples / sec: 312.94
Iteration:   3520, Loss function: 5.187, Average Loss: 5.333, avg. samples / sec: 318.74
Iteration:   3540, Loss function: 5.069, Average Loss: 5.329, avg. samples / sec: 322.37
Iteration:   3560, Loss function: 4.894, Average Loss: 5.325, avg. samples / sec: 328.86
Iteration:   3580, Loss function: 4.924, Average Loss: 5.321, avg. samples / sec: 295.89
Iteration:   3600, Loss function: 5.208, Average Loss: 5.315, avg. samples / sec: 301.35
Iteration:   3620, Loss function: 4.870, Average Loss: 5.310, avg. samples / sec: 310.40
Iteration:   3640, Loss function: 4.940, Average Loss: 5.305, avg. samples / sec: 310.17
Iteration:   3660, Loss function: 4.941, Average Loss: 5.300, avg. samples / sec: 311.68
Iteration:   3680, Loss function: 5.143, Average Loss: 5.293, avg. samples / sec: 283.87
Iteration:   3700, Loss function: 4.989, Average Loss: 5.287, avg. samples / sec: 287.02
Iteration:   3720, Loss function: 4.879, Average Loss: 5.280, avg. samples / sec: 266.23
Iteration:   3740, Loss function: 5.286, Average Loss: 5.277, avg. samples / sec: 300.92
Iteration:   3760, Loss function: 4.923, Average Loss: 5.273, avg. samples / sec: 259.44
Iteration:   3780, Loss function: 5.196, Average Loss: 5.268, avg. samples / sec: 325.78
Iteration:   3800, Loss function: 5.003, Average Loss: 5.264, avg. samples / sec: 321.32
Iteration:   3820, Loss function: 5.122, Average Loss: 5.259, avg. samples / sec: 305.97
Iteration:   3840, Loss function: 4.724, Average Loss: 5.255, avg. samples / sec: 288.04
Iteration:   3860, Loss function: 4.987, Average Loss: 5.250, avg. samples / sec: 305.36
Iteration:   3880, Loss function: 4.879, Average Loss: 5.244, avg. samples / sec: 325.41
Iteration:   3900, Loss function: 5.312, Average Loss: 5.239, avg. samples / sec: 314.89
Iteration:   3920, Loss function: 5.212, Average Loss: 5.234, avg. samples / sec: 316.62
Iteration:   3940, Loss function: 4.931, Average Loss: 5.229, avg. samples / sec: 319.66
Iteration:   3960, Loss function: 4.826, Average Loss: 5.224, avg. samples / sec: 311.76
Iteration:   3980, Loss function: 4.636, Average Loss: 5.218, avg. samples / sec: 323.40
Iteration:   4000, Loss function: 5.041, Average Loss: 5.214, avg. samples / sec: 290.10
Iteration:   4020, Loss function: 4.957, Average Loss: 5.209, avg. samples / sec: 259.85
Iteration:   4040, Loss function: 5.081, Average Loss: 5.205, avg. samples / sec: 319.91
Iteration:   4060, Loss function: 5.208, Average Loss: 5.202, avg. samples / sec: 307.46
Iteration:   4080, Loss function: 5.134, Average Loss: 5.197, avg. samples / sec: 247.39
Iteration:   4100, Loss function: 5.197, Average Loss: 5.195, avg. samples / sec: 313.33
:::MLLOG {"namespace": "", "time_ms": 1639766954372, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766954383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.890, Average Loss: 5.191, avg. samples / sec: 220.58
Iteration:   4140, Loss function: 4.874, Average Loss: 5.186, avg. samples / sec: 283.21
Iteration:   4160, Loss function: 4.977, Average Loss: 5.179, avg. samples / sec: 303.14
Iteration:   4180, Loss function: 4.992, Average Loss: 5.173, avg. samples / sec: 317.27
Iteration:   4200, Loss function: 4.875, Average Loss: 5.169, avg. samples / sec: 331.30
Iteration:   4220, Loss function: 4.848, Average Loss: 5.164, avg. samples / sec: 315.24
Iteration:   4240, Loss function: 4.751, Average Loss: 5.159, avg. samples / sec: 211.92
Iteration:   4260, Loss function: 5.045, Average Loss: 5.154, avg. samples / sec: 290.28
Iteration:   4280, Loss function: 4.952, Average Loss: 5.149, avg. samples / sec: 329.89
Iteration:   4300, Loss function: 4.880, Average Loss: 5.144, avg. samples / sec: 328.91
Iteration:   4320, Loss function: 4.826, Average Loss: 5.139, avg. samples / sec: 274.12
Iteration:   4340, Loss function: 4.861, Average Loss: 5.133, avg. samples / sec: 297.21
Iteration:   4360, Loss function: 4.987, Average Loss: 5.129, avg. samples / sec: 232.14
Iteration:   4380, Loss function: 4.983, Average Loss: 5.124, avg. samples / sec: 261.03
Iteration:   4400, Loss function: 4.967, Average Loss: 5.119, avg. samples / sec: 289.20
Iteration:   4420, Loss function: 5.047, Average Loss: 5.114, avg. samples / sec: 285.72
Iteration:   4440, Loss function: 4.881, Average Loss: 5.109, avg. samples / sec: 288.19
Iteration:   4460, Loss function: 5.094, Average Loss: 5.104, avg. samples / sec: 295.75
Iteration:   4480, Loss function: 5.050, Average Loss: 5.101, avg. samples / sec: 254.74
Iteration:   4500, Loss function: 4.817, Average Loss: 5.098, avg. samples / sec: 253.52
Iteration:   4520, Loss function: 4.738, Average Loss: 5.094, avg. samples / sec: 290.53
Iteration:   4540, Loss function: 5.161, Average Loss: 5.089, avg. samples / sec: 258.60
Iteration:   4560, Loss function: 4.776, Average Loss: 5.085, avg. samples / sec: 226.10
Iteration:   4580, Loss function: 4.711, Average Loss: 5.082, avg. samples / sec: 288.08
Iteration:   4600, Loss function: 4.760, Average Loss: 5.079, avg. samples / sec: 272.12
Iteration:   4620, Loss function: 4.829, Average Loss: 5.074, avg. samples / sec: 335.48
Iteration:   4640, Loss function: 4.733, Average Loss: 5.069, avg. samples / sec: 309.11
Iteration:   4660, Loss function: 4.868, Average Loss: 5.065, avg. samples / sec: 292.60
Iteration:   4680, Loss function: 5.228, Average Loss: 5.060, avg. samples / sec: 329.07
Iteration:   4700, Loss function: 4.823, Average Loss: 5.057, avg. samples / sec: 310.75
Iteration:   4720, Loss function: 4.774, Average Loss: 5.052, avg. samples / sec: 285.81
Iteration:   4740, Loss function: 4.798, Average Loss: 5.048, avg. samples / sec: 322.46
Iteration:   4760, Loss function: 4.858, Average Loss: 5.045, avg. samples / sec: 259.79
Iteration:   4780, Loss function: 4.963, Average Loss: 5.040, avg. samples / sec: 321.75
Iteration:   4800, Loss function: 4.947, Average Loss: 5.038, avg. samples / sec: 320.75
Iteration:   4820, Loss function: 4.660, Average Loss: 5.035, avg. samples / sec: 307.44
Iteration:   4840, Loss function: 5.081, Average Loss: 5.031, avg. samples / sec: 324.37
Iteration:   4860, Loss function: 4.669, Average Loss: 5.027, avg. samples / sec: 309.77
Iteration:   4880, Loss function: 5.168, Average Loss: 5.024, avg. samples / sec: 315.30
Iteration:   4900, Loss function: 4.510, Average Loss: 5.020, avg. samples / sec: 317.91
Iteration:   4920, Loss function: 4.822, Average Loss: 5.016, avg. samples / sec: 298.21
Iteration:   4940, Loss function: 4.758, Average Loss: 5.012, avg. samples / sec: 246.30
Iteration:   4960, Loss function: 4.683, Average Loss: 5.009, avg. samples / sec: 244.99
Iteration:   4980, Loss function: 4.700, Average Loss: 5.005, avg. samples / sec: 294.57
Iteration:   5000, Loss function: 4.970, Average Loss: 5.002, avg. samples / sec: 283.16
Iteration:   5020, Loss function: 5.094, Average Loss: 4.999, avg. samples / sec: 278.04
Iteration:   5040, Loss function: 4.913, Average Loss: 4.996, avg. samples / sec: 305.28
Iteration:   5060, Loss function: 4.709, Average Loss: 4.992, avg. samples / sec: 280.84
Iteration:   5080, Loss function: 4.562, Average Loss: 4.988, avg. samples / sec: 217.00
Iteration:   5100, Loss function: 4.731, Average Loss: 4.986, avg. samples / sec: 275.39
Iteration:   5120, Loss function: 4.622, Average Loss: 4.983, avg. samples / sec: 341.54
Iteration:   5140, Loss function: 4.748, Average Loss: 4.980, avg. samples / sec: 336.73
:::MLLOG {"namespace": "", "time_ms": 1639767363219, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 89.13 s
:::MLLOG {"namespace": "", "time_ms": 1639767452475, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767452517, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767452517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.09s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.108, Average Loss: 4.975, avg. samples / sec: 23.24
DONE (t=7.70s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10667
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21684
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09540
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19530
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20642
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21989
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21989
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10667 AP goal: 0.10000
Iteration:   5180, Loss function: 4.712, Average Loss: 4.970, avg. samples / sec: 308.22
:::MLLOG {"namespace": "", "time_ms": 1639767467736, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767467737, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10666527094448537, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767467738, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767472148, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:00 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:00 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765257802, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765258132, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2604304690, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2604304690
:::MLLOG {"namespace": "", "time_ms": 1639765261898, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765261899, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765261904, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765261905, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765366590, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765366590, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765369080, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765369080, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.24s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765369689, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765369691, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765369694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.500, Average Loss: 0.023, avg. samples / sec: 1.05
Iteration:     20, Loss function: 21.038, Average Loss: 0.453, avg. samples / sec: 254.73
Iteration:     40, Loss function: 20.704, Average Loss: 0.855, avg. samples / sec: 248.34
Iteration:     60, Loss function: 20.409, Average Loss: 1.244, avg. samples / sec: 263.72
Iteration:     80, Loss function: 19.950, Average Loss: 1.618, avg. samples / sec: 256.69
Iteration:    100, Loss function: 16.002, Average Loss: 1.950, avg. samples / sec: 227.90
Iteration:    120, Loss function: 11.297, Average Loss: 2.163, avg. samples / sec: 287.58
Iteration:    140, Loss function: 9.857, Average Loss: 2.322, avg. samples / sec: 268.24
Iteration:    160, Loss function: 9.069, Average Loss: 2.460, avg. samples / sec: 260.93
Iteration:    180, Loss function: 8.874, Average Loss: 2.588, avg. samples / sec: 265.29
Iteration:    200, Loss function: 8.763, Average Loss: 2.712, avg. samples / sec: 265.28
Iteration:    220, Loss function: 8.613, Average Loss: 2.832, avg. samples / sec: 267.32
Iteration:    240, Loss function: 8.586, Average Loss: 2.948, avg. samples / sec: 294.30
Iteration:    260, Loss function: 8.872, Average Loss: 3.063, avg. samples / sec: 276.83
Iteration:    280, Loss function: 8.551, Average Loss: 3.175, avg. samples / sec: 314.80
Iteration:    300, Loss function: 8.337, Average Loss: 3.279, avg. samples / sec: 316.70
Iteration:    320, Loss function: 8.393, Average Loss: 3.378, avg. samples / sec: 267.56
Iteration:    340, Loss function: 8.453, Average Loss: 3.476, avg. samples / sec: 304.83
Iteration:    360, Loss function: 8.020, Average Loss: 3.571, avg. samples / sec: 298.60
Iteration:    380, Loss function: 7.848, Average Loss: 3.659, avg. samples / sec: 241.23
Iteration:    400, Loss function: 7.926, Average Loss: 3.743, avg. samples / sec: 313.65
Iteration:    420, Loss function: 7.574, Average Loss: 3.823, avg. samples / sec: 310.70
Iteration:    440, Loss function: 7.781, Average Loss: 3.901, avg. samples / sec: 295.19
Iteration:    460, Loss function: 7.615, Average Loss: 3.976, avg. samples / sec: 291.04
Iteration:    480, Loss function: 7.366, Average Loss: 4.048, avg. samples / sec: 324.62
Iteration:    500, Loss function: 7.564, Average Loss: 4.119, avg. samples / sec: 275.08
Iteration:    520, Loss function: 7.395, Average Loss: 4.187, avg. samples / sec: 317.69
Iteration:    540, Loss function: 7.599, Average Loss: 4.252, avg. samples / sec: 281.13
Iteration:    560, Loss function: 7.335, Average Loss: 4.314, avg. samples / sec: 327.65
Iteration:    580, Loss function: 7.179, Average Loss: 4.373, avg. samples / sec: 193.36
Iteration:    600, Loss function: 7.343, Average Loss: 4.434, avg. samples / sec: 266.57
Iteration:    620, Loss function: 6.908, Average Loss: 4.491, avg. samples / sec: 252.15
Iteration:    640, Loss function: 6.892, Average Loss: 4.546, avg. samples / sec: 283.41
Iteration:    660, Loss function: 7.247, Average Loss: 4.598, avg. samples / sec: 311.29
Iteration:    680, Loss function: 7.196, Average Loss: 4.649, avg. samples / sec: 319.10
Iteration:    700, Loss function: 6.755, Average Loss: 4.696, avg. samples / sec: 322.99
Iteration:    720, Loss function: 6.891, Average Loss: 4.745, avg. samples / sec: 337.81
Iteration:    740, Loss function: 6.878, Average Loss: 4.790, avg. samples / sec: 336.35
Iteration:    760, Loss function: 7.114, Average Loss: 4.833, avg. samples / sec: 324.86
Iteration:    780, Loss function: 6.785, Average Loss: 4.876, avg. samples / sec: 324.06
Iteration:    800, Loss function: 7.246, Average Loss: 4.915, avg. samples / sec: 335.12
Iteration:    820, Loss function: 6.742, Average Loss: 4.953, avg. samples / sec: 326.39
Iteration:    840, Loss function: 6.788, Average Loss: 4.989, avg. samples / sec: 296.92
Iteration:    860, Loss function: 6.624, Average Loss: 5.022, avg. samples / sec: 317.86
Iteration:    880, Loss function: 6.718, Average Loss: 5.054, avg. samples / sec: 316.87
Iteration:    900, Loss function: 6.944, Average Loss: 5.085, avg. samples / sec: 298.32
Iteration:    920, Loss function: 6.721, Average Loss: 5.115, avg. samples / sec: 303.63
Iteration:    940, Loss function: 6.689, Average Loss: 5.146, avg. samples / sec: 321.90
Iteration:    960, Loss function: 6.321, Average Loss: 5.174, avg. samples / sec: 316.67
Iteration:    980, Loss function: 6.574, Average Loss: 5.202, avg. samples / sec: 307.73
Iteration:   1000, Loss function: 6.624, Average Loss: 5.227, avg. samples / sec: 265.41
Iteration:   1020, Loss function: 6.313, Average Loss: 5.252, avg. samples / sec: 314.25
:::MLLOG {"namespace": "", "time_ms": 1639765776965, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765776966, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.686, Average Loss: 5.276, avg. samples / sec: 308.00
Iteration:   1060, Loss function: 6.414, Average Loss: 5.299, avg. samples / sec: 228.28
Iteration:   1080, Loss function: 6.377, Average Loss: 5.321, avg. samples / sec: 267.69
Iteration:   1100, Loss function: 6.312, Average Loss: 5.341, avg. samples / sec: 287.61
Iteration:   1120, Loss function: 6.150, Average Loss: 5.360, avg. samples / sec: 325.38
Iteration:   1140, Loss function: 6.456, Average Loss: 5.379, avg. samples / sec: 335.38
Iteration:   1160, Loss function: 6.141, Average Loss: 5.396, avg. samples / sec: 271.88
Iteration:   1180, Loss function: 6.237, Average Loss: 5.412, avg. samples / sec: 322.65
Iteration:   1200, Loss function: 6.137, Average Loss: 5.429, avg. samples / sec: 320.12
Iteration:   1220, Loss function: 6.015, Average Loss: 5.443, avg. samples / sec: 335.08
Iteration:   1240, Loss function: 6.056, Average Loss: 5.456, avg. samples / sec: 277.74
Iteration:   1260, Loss function: 6.053, Average Loss: 5.468, avg. samples / sec: 329.65
Iteration:   1280, Loss function: 5.889, Average Loss: 5.481, avg. samples / sec: 259.35
Iteration:   1300, Loss function: 6.218, Average Loss: 5.493, avg. samples / sec: 248.65
Iteration:   1320, Loss function: 6.120, Average Loss: 5.506, avg. samples / sec: 285.41
Iteration:   1340, Loss function: 5.793, Average Loss: 5.516, avg. samples / sec: 309.43
Iteration:   1360, Loss function: 5.989, Average Loss: 5.526, avg. samples / sec: 324.73
Iteration:   1380, Loss function: 6.111, Average Loss: 5.536, avg. samples / sec: 303.29
Iteration:   1400, Loss function: 6.270, Average Loss: 5.546, avg. samples / sec: 325.21
Iteration:   1420, Loss function: 5.744, Average Loss: 5.554, avg. samples / sec: 322.50
Iteration:   1440, Loss function: 6.383, Average Loss: 5.561, avg. samples / sec: 320.74
Iteration:   1460, Loss function: 6.209, Average Loss: 5.570, avg. samples / sec: 267.32
Iteration:   1480, Loss function: 5.937, Average Loss: 5.578, avg. samples / sec: 309.82
Iteration:   1500, Loss function: 5.984, Average Loss: 5.585, avg. samples / sec: 322.26
Iteration:   1520, Loss function: 5.911, Average Loss: 5.591, avg. samples / sec: 240.48
Iteration:   1540, Loss function: 5.887, Average Loss: 5.596, avg. samples / sec: 324.59
Iteration:   1560, Loss function: 5.618, Average Loss: 5.600, avg. samples / sec: 333.60
Iteration:   1580, Loss function: 5.687, Average Loss: 5.606, avg. samples / sec: 328.95
Iteration:   1600, Loss function: 6.181, Average Loss: 5.612, avg. samples / sec: 328.29
Iteration:   1620, Loss function: 5.705, Average Loss: 5.617, avg. samples / sec: 308.00
Iteration:   1640, Loss function: 5.854, Average Loss: 5.621, avg. samples / sec: 285.21
Iteration:   1660, Loss function: 5.982, Average Loss: 5.625, avg. samples / sec: 256.19
Iteration:   1680, Loss function: 5.748, Average Loss: 5.628, avg. samples / sec: 297.46
Iteration:   1700, Loss function: 5.335, Average Loss: 5.632, avg. samples / sec: 328.59
Iteration:   1720, Loss function: 5.661, Average Loss: 5.635, avg. samples / sec: 332.22
Iteration:   1740, Loss function: 5.837, Average Loss: 5.637, avg. samples / sec: 209.88
Iteration:   1760, Loss function: 5.626, Average Loss: 5.639, avg. samples / sec: 313.80
Iteration:   1780, Loss function: 5.752, Average Loss: 5.640, avg. samples / sec: 324.64
Iteration:   1800, Loss function: 5.559, Average Loss: 5.642, avg. samples / sec: 283.55
Iteration:   1820, Loss function: 5.773, Average Loss: 5.644, avg. samples / sec: 272.60
Iteration:   1840, Loss function: 6.024, Average Loss: 5.646, avg. samples / sec: 320.77
Iteration:   1860, Loss function: 5.754, Average Loss: 5.646, avg. samples / sec: 305.98
Iteration:   1880, Loss function: 5.813, Average Loss: 5.648, avg. samples / sec: 315.96
Iteration:   1900, Loss function: 6.023, Average Loss: 5.649, avg. samples / sec: 316.72
Iteration:   1920, Loss function: 5.583, Average Loss: 5.649, avg. samples / sec: 319.79
Iteration:   1940, Loss function: 5.830, Average Loss: 5.649, avg. samples / sec: 314.57
Iteration:   1960, Loss function: 5.686, Average Loss: 5.648, avg. samples / sec: 317.06
Iteration:   1980, Loss function: 5.711, Average Loss: 5.648, avg. samples / sec: 315.24
Iteration:   2000, Loss function: 5.606, Average Loss: 5.647, avg. samples / sec: 298.29
Iteration:   2020, Loss function: 5.706, Average Loss: 5.646, avg. samples / sec: 303.76
Iteration:   2040, Loss function: 5.746, Average Loss: 5.646, avg. samples / sec: 336.80
:::MLLOG {"namespace": "", "time_ms": 1639766168641, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766168643, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.602, Average Loss: 5.644, avg. samples / sec: 324.61
Iteration:   2080, Loss function: 5.058, Average Loss: 5.642, avg. samples / sec: 332.78
Iteration:   2100, Loss function: 5.485, Average Loss: 5.640, avg. samples / sec: 296.96
Iteration:   2120, Loss function: 5.307, Average Loss: 5.637, avg. samples / sec: 324.28
Iteration:   2140, Loss function: 5.471, Average Loss: 5.634, avg. samples / sec: 310.96
Iteration:   2160, Loss function: 5.379, Average Loss: 5.632, avg. samples / sec: 325.20
Iteration:   2180, Loss function: 5.207, Average Loss: 5.630, avg. samples / sec: 319.85
Iteration:   2200, Loss function: 5.419, Average Loss: 5.626, avg. samples / sec: 285.10
Iteration:   2220, Loss function: 5.553, Average Loss: 5.623, avg. samples / sec: 283.30
Iteration:   2240, Loss function: 5.519, Average Loss: 5.620, avg. samples / sec: 284.30
Iteration:   2260, Loss function: 5.423, Average Loss: 5.616, avg. samples / sec: 277.50
Iteration:   2280, Loss function: 5.265, Average Loss: 5.613, avg. samples / sec: 320.55
Iteration:   2300, Loss function: 5.167, Average Loss: 5.610, avg. samples / sec: 308.62
Iteration:   2320, Loss function: 5.409, Average Loss: 5.608, avg. samples / sec: 323.77
Iteration:   2340, Loss function: 5.412, Average Loss: 5.604, avg. samples / sec: 328.78
Iteration:   2360, Loss function: 5.275, Average Loss: 5.600, avg. samples / sec: 321.19
Iteration:   2380, Loss function: 5.437, Average Loss: 5.597, avg. samples / sec: 322.03
Iteration:   2400, Loss function: 5.691, Average Loss: 5.593, avg. samples / sec: 313.56
Iteration:   2420, Loss function: 5.399, Average Loss: 5.589, avg. samples / sec: 321.24
Iteration:   2440, Loss function: 5.451, Average Loss: 5.585, avg. samples / sec: 335.45
Iteration:   2460, Loss function: 5.091, Average Loss: 5.581, avg. samples / sec: 327.39
Iteration:   2480, Loss function: 5.479, Average Loss: 5.577, avg. samples / sec: 331.07
Iteration:   2500, Loss function: 5.286, Average Loss: 5.573, avg. samples / sec: 330.46
Iteration:   2520, Loss function: 5.353, Average Loss: 5.569, avg. samples / sec: 321.14
Iteration:   2540, Loss function: 5.410, Average Loss: 5.566, avg. samples / sec: 299.62
Iteration:   2560, Loss function: 5.329, Average Loss: 5.562, avg. samples / sec: 308.08
Iteration:   2580, Loss function: 5.333, Average Loss: 5.558, avg. samples / sec: 341.16
Iteration:   2600, Loss function: 5.400, Average Loss: 5.555, avg. samples / sec: 321.66
Iteration:   2620, Loss function: 5.573, Average Loss: 5.550, avg. samples / sec: 257.07
Iteration:   2640, Loss function: 5.209, Average Loss: 5.547, avg. samples / sec: 273.87
Iteration:   2660, Loss function: 5.077, Average Loss: 5.543, avg. samples / sec: 234.98
Iteration:   2680, Loss function: 5.179, Average Loss: 5.541, avg. samples / sec: 230.63
Iteration:   2700, Loss function: 5.169, Average Loss: 5.537, avg. samples / sec: 330.62
Iteration:   2720, Loss function: 5.358, Average Loss: 5.534, avg. samples / sec: 307.65
Iteration:   2740, Loss function: 5.013, Average Loss: 5.529, avg. samples / sec: 335.87
Iteration:   2760, Loss function: 4.870, Average Loss: 5.524, avg. samples / sec: 297.18
Iteration:   2780, Loss function: 5.363, Average Loss: 5.521, avg. samples / sec: 235.68
Iteration:   2800, Loss function: 5.302, Average Loss: 5.517, avg. samples / sec: 270.97
Iteration:   2820, Loss function: 5.350, Average Loss: 5.513, avg. samples / sec: 328.78
Iteration:   2840, Loss function: 5.145, Average Loss: 5.508, avg. samples / sec: 326.25
Iteration:   2860, Loss function: 5.149, Average Loss: 5.503, avg. samples / sec: 282.73
Iteration:   2880, Loss function: 5.309, Average Loss: 5.499, avg. samples / sec: 313.55
Iteration:   2900, Loss function: 4.987, Average Loss: 5.495, avg. samples / sec: 322.86
Iteration:   2920, Loss function: 5.243, Average Loss: 5.490, avg. samples / sec: 306.37
Iteration:   2940, Loss function: 4.987, Average Loss: 5.485, avg. samples / sec: 222.30
Iteration:   2960, Loss function: 5.294, Average Loss: 5.482, avg. samples / sec: 293.01
Iteration:   2980, Loss function: 5.191, Average Loss: 5.478, avg. samples / sec: 293.22
Iteration:   3000, Loss function: 5.385, Average Loss: 5.471, avg. samples / sec: 310.50
Iteration:   3020, Loss function: 5.216, Average Loss: 5.465, avg. samples / sec: 328.25
Iteration:   3040, Loss function: 5.178, Average Loss: 5.459, avg. samples / sec: 324.76
Iteration:   3060, Loss function: 5.116, Average Loss: 5.454, avg. samples / sec: 295.13
Iteration:   3080, Loss function: 4.859, Average Loss: 5.449, avg. samples / sec: 288.41
:::MLLOG {"namespace": "", "time_ms": 1639766557668, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766557669, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.175, Average Loss: 5.444, avg. samples / sec: 230.68
Iteration:   3120, Loss function: 5.000, Average Loss: 5.437, avg. samples / sec: 317.71
Iteration:   3140, Loss function: 4.947, Average Loss: 5.432, avg. samples / sec: 323.04
Iteration:   3160, Loss function: 5.581, Average Loss: 5.425, avg. samples / sec: 317.95
Iteration:   3180, Loss function: 4.963, Average Loss: 5.420, avg. samples / sec: 316.02
Iteration:   3200, Loss function: 5.370, Average Loss: 5.416, avg. samples / sec: 265.38
Iteration:   3220, Loss function: 4.968, Average Loss: 5.412, avg. samples / sec: 321.52
Iteration:   3240, Loss function: 5.211, Average Loss: 5.406, avg. samples / sec: 320.89
Iteration:   3260, Loss function: 4.921, Average Loss: 5.401, avg. samples / sec: 321.04
Iteration:   3280, Loss function: 4.805, Average Loss: 5.394, avg. samples / sec: 279.86
Iteration:   3300, Loss function: 4.916, Average Loss: 5.387, avg. samples / sec: 254.09
Iteration:   3320, Loss function: 4.931, Average Loss: 5.383, avg. samples / sec: 321.48
Iteration:   3340, Loss function: 5.106, Average Loss: 5.378, avg. samples / sec: 322.86
Iteration:   3360, Loss function: 5.139, Average Loss: 5.371, avg. samples / sec: 314.73
Iteration:   3380, Loss function: 5.203, Average Loss: 5.365, avg. samples / sec: 284.14
Iteration:   3400, Loss function: 4.791, Average Loss: 5.361, avg. samples / sec: 183.49
Iteration:   3420, Loss function: 5.030, Average Loss: 5.356, avg. samples / sec: 288.89
Iteration:   3440, Loss function: 4.960, Average Loss: 5.351, avg. samples / sec: 323.35
Iteration:   3460, Loss function: 5.166, Average Loss: 5.347, avg. samples / sec: 331.71
Iteration:   3480, Loss function: 5.299, Average Loss: 5.342, avg. samples / sec: 292.19
Iteration:   3500, Loss function: 5.072, Average Loss: 5.338, avg. samples / sec: 312.94
Iteration:   3520, Loss function: 5.187, Average Loss: 5.333, avg. samples / sec: 318.74
Iteration:   3540, Loss function: 5.069, Average Loss: 5.329, avg. samples / sec: 322.37
Iteration:   3560, Loss function: 4.894, Average Loss: 5.325, avg. samples / sec: 328.86
Iteration:   3580, Loss function: 4.924, Average Loss: 5.321, avg. samples / sec: 295.89
Iteration:   3600, Loss function: 5.208, Average Loss: 5.315, avg. samples / sec: 301.35
Iteration:   3620, Loss function: 4.870, Average Loss: 5.310, avg. samples / sec: 310.40
Iteration:   3640, Loss function: 4.940, Average Loss: 5.305, avg. samples / sec: 310.17
Iteration:   3660, Loss function: 4.941, Average Loss: 5.300, avg. samples / sec: 311.68
Iteration:   3680, Loss function: 5.143, Average Loss: 5.293, avg. samples / sec: 283.87
Iteration:   3700, Loss function: 4.989, Average Loss: 5.287, avg. samples / sec: 287.02
Iteration:   3720, Loss function: 4.879, Average Loss: 5.280, avg. samples / sec: 266.23
Iteration:   3740, Loss function: 5.286, Average Loss: 5.277, avg. samples / sec: 300.92
Iteration:   3760, Loss function: 4.923, Average Loss: 5.273, avg. samples / sec: 259.44
Iteration:   3780, Loss function: 5.196, Average Loss: 5.268, avg. samples / sec: 325.78
Iteration:   3800, Loss function: 5.003, Average Loss: 5.264, avg. samples / sec: 321.32
Iteration:   3820, Loss function: 5.122, Average Loss: 5.259, avg. samples / sec: 305.97
Iteration:   3840, Loss function: 4.724, Average Loss: 5.255, avg. samples / sec: 288.04
Iteration:   3860, Loss function: 4.987, Average Loss: 5.250, avg. samples / sec: 305.36
Iteration:   3880, Loss function: 4.879, Average Loss: 5.244, avg. samples / sec: 325.41
Iteration:   3900, Loss function: 5.312, Average Loss: 5.239, avg. samples / sec: 314.89
Iteration:   3920, Loss function: 5.212, Average Loss: 5.234, avg. samples / sec: 316.62
Iteration:   3940, Loss function: 4.931, Average Loss: 5.229, avg. samples / sec: 319.66
Iteration:   3960, Loss function: 4.826, Average Loss: 5.224, avg. samples / sec: 311.76
Iteration:   3980, Loss function: 4.636, Average Loss: 5.218, avg. samples / sec: 323.40
Iteration:   4000, Loss function: 5.041, Average Loss: 5.214, avg. samples / sec: 290.10
Iteration:   4020, Loss function: 4.957, Average Loss: 5.209, avg. samples / sec: 259.85
Iteration:   4040, Loss function: 5.081, Average Loss: 5.205, avg. samples / sec: 319.91
Iteration:   4060, Loss function: 5.208, Average Loss: 5.202, avg. samples / sec: 307.46
Iteration:   4080, Loss function: 5.134, Average Loss: 5.197, avg. samples / sec: 247.39
Iteration:   4100, Loss function: 5.197, Average Loss: 5.195, avg. samples / sec: 313.33
:::MLLOG {"namespace": "", "time_ms": 1639766954372, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766954383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.890, Average Loss: 5.191, avg. samples / sec: 220.58
Iteration:   4140, Loss function: 4.874, Average Loss: 5.186, avg. samples / sec: 283.21
Iteration:   4160, Loss function: 4.977, Average Loss: 5.179, avg. samples / sec: 303.14
Iteration:   4180, Loss function: 4.992, Average Loss: 5.173, avg. samples / sec: 317.27
Iteration:   4200, Loss function: 4.875, Average Loss: 5.169, avg. samples / sec: 331.30
Iteration:   4220, Loss function: 4.848, Average Loss: 5.164, avg. samples / sec: 315.24
Iteration:   4240, Loss function: 4.751, Average Loss: 5.159, avg. samples / sec: 211.92
Iteration:   4260, Loss function: 5.045, Average Loss: 5.154, avg. samples / sec: 290.28
Iteration:   4280, Loss function: 4.952, Average Loss: 5.149, avg. samples / sec: 329.89
Iteration:   4300, Loss function: 4.880, Average Loss: 5.144, avg. samples / sec: 328.91
Iteration:   4320, Loss function: 4.826, Average Loss: 5.139, avg. samples / sec: 274.12
Iteration:   4340, Loss function: 4.861, Average Loss: 5.133, avg. samples / sec: 297.21
Iteration:   4360, Loss function: 4.987, Average Loss: 5.129, avg. samples / sec: 232.14
Iteration:   4380, Loss function: 4.983, Average Loss: 5.124, avg. samples / sec: 261.03
Iteration:   4400, Loss function: 4.967, Average Loss: 5.119, avg. samples / sec: 289.20
Iteration:   4420, Loss function: 5.047, Average Loss: 5.114, avg. samples / sec: 285.72
Iteration:   4440, Loss function: 4.881, Average Loss: 5.109, avg. samples / sec: 288.19
Iteration:   4460, Loss function: 5.094, Average Loss: 5.104, avg. samples / sec: 295.75
Iteration:   4480, Loss function: 5.050, Average Loss: 5.101, avg. samples / sec: 254.74
Iteration:   4500, Loss function: 4.817, Average Loss: 5.098, avg. samples / sec: 253.52
Iteration:   4520, Loss function: 4.738, Average Loss: 5.094, avg. samples / sec: 290.53
Iteration:   4540, Loss function: 5.161, Average Loss: 5.089, avg. samples / sec: 258.60
Iteration:   4560, Loss function: 4.776, Average Loss: 5.085, avg. samples / sec: 226.10
Iteration:   4580, Loss function: 4.711, Average Loss: 5.082, avg. samples / sec: 288.08
Iteration:   4600, Loss function: 4.760, Average Loss: 5.079, avg. samples / sec: 272.12
Iteration:   4620, Loss function: 4.829, Average Loss: 5.074, avg. samples / sec: 335.48
Iteration:   4640, Loss function: 4.733, Average Loss: 5.069, avg. samples / sec: 309.11
Iteration:   4660, Loss function: 4.868, Average Loss: 5.065, avg. samples / sec: 292.60
Iteration:   4680, Loss function: 5.228, Average Loss: 5.060, avg. samples / sec: 329.07
Iteration:   4700, Loss function: 4.823, Average Loss: 5.057, avg. samples / sec: 310.75
Iteration:   4720, Loss function: 4.774, Average Loss: 5.052, avg. samples / sec: 285.81
Iteration:   4740, Loss function: 4.798, Average Loss: 5.048, avg. samples / sec: 322.46
Iteration:   4760, Loss function: 4.858, Average Loss: 5.045, avg. samples / sec: 259.79
Iteration:   4780, Loss function: 4.963, Average Loss: 5.040, avg. samples / sec: 321.75
Iteration:   4800, Loss function: 4.947, Average Loss: 5.038, avg. samples / sec: 320.75
Iteration:   4820, Loss function: 4.660, Average Loss: 5.035, avg. samples / sec: 307.44
Iteration:   4840, Loss function: 5.081, Average Loss: 5.031, avg. samples / sec: 324.37
Iteration:   4860, Loss function: 4.669, Average Loss: 5.027, avg. samples / sec: 309.77
Iteration:   4880, Loss function: 5.168, Average Loss: 5.024, avg. samples / sec: 315.30
Iteration:   4900, Loss function: 4.510, Average Loss: 5.020, avg. samples / sec: 317.91
Iteration:   4920, Loss function: 4.822, Average Loss: 5.016, avg. samples / sec: 298.21
Iteration:   4940, Loss function: 4.758, Average Loss: 5.012, avg. samples / sec: 246.30
Iteration:   4960, Loss function: 4.683, Average Loss: 5.009, avg. samples / sec: 244.99
Iteration:   4980, Loss function: 4.700, Average Loss: 5.005, avg. samples / sec: 294.57
Iteration:   5000, Loss function: 4.970, Average Loss: 5.002, avg. samples / sec: 283.16
Iteration:   5020, Loss function: 5.094, Average Loss: 4.999, avg. samples / sec: 278.04
Iteration:   5040, Loss function: 4.913, Average Loss: 4.996, avg. samples / sec: 305.28
Iteration:   5060, Loss function: 4.709, Average Loss: 4.992, avg. samples / sec: 280.84
Iteration:   5080, Loss function: 4.562, Average Loss: 4.988, avg. samples / sec: 217.00
Iteration:   5100, Loss function: 4.731, Average Loss: 4.986, avg. samples / sec: 275.39
Iteration:   5120, Loss function: 4.622, Average Loss: 4.983, avg. samples / sec: 341.54
Iteration:   5140, Loss function: 4.748, Average Loss: 4.980, avg. samples / sec: 336.73
:::MLLOG {"namespace": "", "time_ms": 1639767363219, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 89.13 s
:::MLLOG {"namespace": "", "time_ms": 1639767452475, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767452517, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767452517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.09s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.108, Average Loss: 4.975, avg. samples / sec: 23.24
DONE (t=7.70s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10667
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21684
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09540
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19530
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20642
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21989
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21989
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10667 AP goal: 0.10000
Iteration:   5180, Loss function: 4.712, Average Loss: 4.970, avg. samples / sec: 308.22
:::MLLOG {"namespace": "", "time_ms": 1639767467736, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767467737, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10666527094448537, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767467738, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767472148, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767480
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:00 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:50 PM'
START TIMING RUN WAS 2021-12-17 06:20:50 PM
ENDING TIMING RUN AT 2021-12-17 06:58:00 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:00 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-d0146f40-d527-5cf7-b686-12fa40555093)
+ result=2230
RESULT,SINGLE_STAGE_DETECTOR,,2230,nvidia,2021-12-17 06:20:50 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2230,nvidia,2021-12-17 06:20:50 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
