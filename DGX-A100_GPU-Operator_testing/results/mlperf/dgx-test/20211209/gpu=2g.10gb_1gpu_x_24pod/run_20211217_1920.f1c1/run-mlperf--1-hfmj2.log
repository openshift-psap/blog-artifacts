8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-88095807-c0f1-543b-9430-ee4ac687a18e)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-88095807-c0f1-543b-9430-ee4ac687a18e
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-88095807-c0f1-543b-9430-ee4ac687a18e
+ echo 'Found 1 MIG instances: MIG-88095807-c0f1-543b-9430-ee4ac687a18e'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765247
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:47 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:47 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:47 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:47 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-hfmj2 to the sync file ...
run-mlperf--1-hfmj2 Found 5 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
run-mlperf--1-hfmj2 Found 20 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
    16	run-mlperf--1-pgt2r
    17	run-mlperf--1-rrqzl
    18	run-mlperf--1-sbgrm
    19	run-mlperf--1-pvnvk
    20	run-mlperf--1-fbqms
Fri Dec 17 18:20:57 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-88095807-c0f1-543b-9430-ee4ac687a18e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259869, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260556, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4218759065, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4218759065
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765266470, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266470, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369063, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369064, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765374614, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765374614, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375010, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375011, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.562, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.021, Average Loss: 0.454, avg. samples / sec: 198.97
Iteration:     40, Loss function: 20.746, Average Loss: 0.855, avg. samples / sec: 256.04
Iteration:     60, Loss function: 20.506, Average Loss: 1.245, avg. samples / sec: 254.68
Iteration:     80, Loss function: 19.945, Average Loss: 1.619, avg. samples / sec: 256.26
Iteration:    100, Loss function: 15.578, Average Loss: 1.947, avg. samples / sec: 254.14
Iteration:    120, Loss function: 10.897, Average Loss: 2.152, avg. samples / sec: 265.47
Iteration:    140, Loss function: 9.412, Average Loss: 2.306, avg. samples / sec: 273.95
Iteration:    160, Loss function: 9.031, Average Loss: 2.443, avg. samples / sec: 257.19
Iteration:    180, Loss function: 8.968, Average Loss: 2.571, avg. samples / sec: 291.60
Iteration:    200, Loss function: 8.452, Average Loss: 2.695, avg. samples / sec: 296.71
Iteration:    220, Loss function: 8.592, Average Loss: 2.814, avg. samples / sec: 255.50
Iteration:    240, Loss function: 9.042, Average Loss: 2.934, avg. samples / sec: 296.44
Iteration:    260, Loss function: 8.841, Average Loss: 3.051, avg. samples / sec: 316.74
Iteration:    280, Loss function: 8.556, Average Loss: 3.162, avg. samples / sec: 321.51
Iteration:    300, Loss function: 8.332, Average Loss: 3.265, avg. samples / sec: 304.71
Iteration:    320, Loss function: 8.474, Average Loss: 3.366, avg. samples / sec: 211.13
Iteration:    340, Loss function: 8.418, Average Loss: 3.466, avg. samples / sec: 312.15
Iteration:    360, Loss function: 8.056, Average Loss: 3.560, avg. samples / sec: 277.34
Iteration:    380, Loss function: 7.924, Average Loss: 3.649, avg. samples / sec: 293.86
Iteration:    400, Loss function: 7.936, Average Loss: 3.734, avg. samples / sec: 320.77
Iteration:    420, Loss function: 7.572, Average Loss: 3.815, avg. samples / sec: 285.08
Iteration:    440, Loss function: 7.700, Average Loss: 3.894, avg. samples / sec: 274.68
Iteration:    460, Loss function: 7.677, Average Loss: 3.970, avg. samples / sec: 238.77
Iteration:    480, Loss function: 7.424, Average Loss: 4.044, avg. samples / sec: 316.29
Iteration:    500, Loss function: 7.564, Average Loss: 4.116, avg. samples / sec: 299.74
Iteration:    520, Loss function: 7.568, Average Loss: 4.184, avg. samples / sec: 258.88
Iteration:    540, Loss function: 7.618, Average Loss: 4.249, avg. samples / sec: 296.48
Iteration:    560, Loss function: 7.109, Average Loss: 4.312, avg. samples / sec: 315.54
Iteration:    580, Loss function: 7.305, Average Loss: 4.372, avg. samples / sec: 321.20
Iteration:    600, Loss function: 7.640, Average Loss: 4.432, avg. samples / sec: 328.54
Iteration:    620, Loss function: 7.020, Average Loss: 4.489, avg. samples / sec: 325.47
Iteration:    640, Loss function: 6.877, Average Loss: 4.543, avg. samples / sec: 322.38
Iteration:    660, Loss function: 7.108, Average Loss: 4.595, avg. samples / sec: 315.88
Iteration:    680, Loss function: 7.151, Average Loss: 4.645, avg. samples / sec: 318.07
Iteration:    700, Loss function: 6.984, Average Loss: 4.693, avg. samples / sec: 317.96
Iteration:    720, Loss function: 6.964, Average Loss: 4.743, avg. samples / sec: 337.34
Iteration:    740, Loss function: 6.844, Average Loss: 4.788, avg. samples / sec: 309.30
Iteration:    760, Loss function: 7.074, Average Loss: 4.832, avg. samples / sec: 242.10
Iteration:    780, Loss function: 6.836, Average Loss: 4.873, avg. samples / sec: 279.89
Iteration:    800, Loss function: 7.325, Average Loss: 4.912, avg. samples / sec: 231.36
Iteration:    820, Loss function: 6.795, Average Loss: 4.950, avg. samples / sec: 274.61
Iteration:    840, Loss function: 6.702, Average Loss: 4.986, avg. samples / sec: 318.86
Iteration:    860, Loss function: 6.847, Average Loss: 5.020, avg. samples / sec: 300.58
Iteration:    880, Loss function: 6.890, Average Loss: 5.053, avg. samples / sec: 316.83
Iteration:    900, Loss function: 6.920, Average Loss: 5.085, avg. samples / sec: 288.14
Iteration:    920, Loss function: 6.727, Average Loss: 5.115, avg. samples / sec: 241.97
Iteration:    940, Loss function: 6.783, Average Loss: 5.145, avg. samples / sec: 268.42
Iteration:    960, Loss function: 6.469, Average Loss: 5.173, avg. samples / sec: 331.28
Iteration:    980, Loss function: 6.393, Average Loss: 5.202, avg. samples / sec: 288.09
Iteration:   1000, Loss function: 6.573, Average Loss: 5.228, avg. samples / sec: 327.68
Iteration:   1020, Loss function: 6.281, Average Loss: 5.252, avg. samples / sec: 290.44
:::MLLOG {"namespace": "", "time_ms": 1639765789661, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765789675, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.311, Average Loss: 5.275, avg. samples / sec: 259.55
Iteration:   1060, Loss function: 6.375, Average Loss: 5.297, avg. samples / sec: 241.66
Iteration:   1080, Loss function: 6.246, Average Loss: 5.319, avg. samples / sec: 333.48
Iteration:   1100, Loss function: 6.057, Average Loss: 5.338, avg. samples / sec: 261.20
Iteration:   1120, Loss function: 6.159, Average Loss: 5.358, avg. samples / sec: 335.35
Iteration:   1140, Loss function: 6.327, Average Loss: 5.376, avg. samples / sec: 296.96
Iteration:   1160, Loss function: 6.085, Average Loss: 5.393, avg. samples / sec: 291.50
Iteration:   1180, Loss function: 6.124, Average Loss: 5.410, avg. samples / sec: 252.76
Iteration:   1200, Loss function: 6.226, Average Loss: 5.425, avg. samples / sec: 234.90
Iteration:   1220, Loss function: 6.326, Average Loss: 5.439, avg. samples / sec: 286.08
Iteration:   1240, Loss function: 6.138, Average Loss: 5.453, avg. samples / sec: 327.36
Iteration:   1260, Loss function: 5.970, Average Loss: 5.466, avg. samples / sec: 315.23
Iteration:   1280, Loss function: 6.135, Average Loss: 5.478, avg. samples / sec: 329.51
Iteration:   1300, Loss function: 6.244, Average Loss: 5.491, avg. samples / sec: 326.75
Iteration:   1320, Loss function: 5.967, Average Loss: 5.502, avg. samples / sec: 336.12
Iteration:   1340, Loss function: 5.727, Average Loss: 5.512, avg. samples / sec: 295.32
Iteration:   1360, Loss function: 6.043, Average Loss: 5.522, avg. samples / sec: 332.56
Iteration:   1380, Loss function: 6.160, Average Loss: 5.532, avg. samples / sec: 328.21
Iteration:   1400, Loss function: 6.100, Average Loss: 5.540, avg. samples / sec: 234.11
Iteration:   1420, Loss function: 5.939, Average Loss: 5.547, avg. samples / sec: 300.68
Iteration:   1440, Loss function: 6.361, Average Loss: 5.555, avg. samples / sec: 299.39
Iteration:   1460, Loss function: 6.041, Average Loss: 5.563, avg. samples / sec: 266.50
Iteration:   1480, Loss function: 5.943, Average Loss: 5.571, avg. samples / sec: 285.52
Iteration:   1500, Loss function: 6.035, Average Loss: 5.580, avg. samples / sec: 280.33
Iteration:   1520, Loss function: 6.113, Average Loss: 5.587, avg. samples / sec: 209.21
Iteration:   1540, Loss function: 5.954, Average Loss: 5.591, avg. samples / sec: 253.90
Iteration:   1560, Loss function: 5.701, Average Loss: 5.595, avg. samples / sec: 216.74
Iteration:   1580, Loss function: 5.718, Average Loss: 5.601, avg. samples / sec: 288.57
Iteration:   1600, Loss function: 6.199, Average Loss: 5.606, avg. samples / sec: 278.14
Iteration:   1620, Loss function: 5.796, Average Loss: 5.610, avg. samples / sec: 334.64
Iteration:   1640, Loss function: 5.874, Average Loss: 5.614, avg. samples / sec: 255.87
Iteration:   1660, Loss function: 5.952, Average Loss: 5.618, avg. samples / sec: 299.91
Iteration:   1680, Loss function: 5.605, Average Loss: 5.621, avg. samples / sec: 321.91
Iteration:   1700, Loss function: 5.615, Average Loss: 5.625, avg. samples / sec: 308.61
Iteration:   1720, Loss function: 5.780, Average Loss: 5.627, avg. samples / sec: 316.88
Iteration:   1740, Loss function: 5.870, Average Loss: 5.630, avg. samples / sec: 322.34
Iteration:   1760, Loss function: 5.565, Average Loss: 5.632, avg. samples / sec: 330.30
Iteration:   1780, Loss function: 5.631, Average Loss: 5.634, avg. samples / sec: 317.17
Iteration:   1800, Loss function: 5.662, Average Loss: 5.637, avg. samples / sec: 323.02
Iteration:   1820, Loss function: 5.843, Average Loss: 5.640, avg. samples / sec: 339.45
Iteration:   1840, Loss function: 6.022, Average Loss: 5.642, avg. samples / sec: 331.54
Iteration:   1860, Loss function: 5.668, Average Loss: 5.642, avg. samples / sec: 312.71
Iteration:   1880, Loss function: 5.920, Average Loss: 5.643, avg. samples / sec: 272.66
Iteration:   1900, Loss function: 5.854, Average Loss: 5.644, avg. samples / sec: 316.19
Iteration:   1920, Loss function: 5.730, Average Loss: 5.644, avg. samples / sec: 338.07
Iteration:   1940, Loss function: 5.832, Average Loss: 5.644, avg. samples / sec: 332.51
Iteration:   1960, Loss function: 5.562, Average Loss: 5.643, avg. samples / sec: 261.32
Iteration:   1980, Loss function: 5.593, Average Loss: 5.642, avg. samples / sec: 314.10
Iteration:   2000, Loss function: 5.492, Average Loss: 5.642, avg. samples / sec: 304.56
Iteration:   2020, Loss function: 5.599, Average Loss: 5.640, avg. samples / sec: 248.06
Iteration:   2040, Loss function: 5.658, Average Loss: 5.640, avg. samples / sec: 286.83
:::MLLOG {"namespace": "", "time_ms": 1639766191089, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766191091, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.384, Average Loss: 5.638, avg. samples / sec: 332.71
Iteration:   2080, Loss function: 5.033, Average Loss: 5.635, avg. samples / sec: 304.12
Iteration:   2100, Loss function: 5.609, Average Loss: 5.633, avg. samples / sec: 315.60
Iteration:   2120, Loss function: 5.380, Average Loss: 5.630, avg. samples / sec: 326.18
Iteration:   2140, Loss function: 5.210, Average Loss: 5.627, avg. samples / sec: 331.30
Iteration:   2160, Loss function: 5.364, Average Loss: 5.624, avg. samples / sec: 335.99
Iteration:   2180, Loss function: 5.263, Average Loss: 5.622, avg. samples / sec: 288.35
Iteration:   2200, Loss function: 5.566, Average Loss: 5.618, avg. samples / sec: 305.88
Iteration:   2220, Loss function: 5.524, Average Loss: 5.615, avg. samples / sec: 209.63
Iteration:   2240, Loss function: 5.458, Average Loss: 5.612, avg. samples / sec: 188.92
Iteration:   2260, Loss function: 5.330, Average Loss: 5.608, avg. samples / sec: 326.67
Iteration:   2280, Loss function: 5.285, Average Loss: 5.605, avg. samples / sec: 332.40
Iteration:   2300, Loss function: 5.334, Average Loss: 5.603, avg. samples / sec: 330.25
Iteration:   2320, Loss function: 5.315, Average Loss: 5.601, avg. samples / sec: 266.36
Iteration:   2340, Loss function: 5.527, Average Loss: 5.598, avg. samples / sec: 295.52
Iteration:   2360, Loss function: 5.359, Average Loss: 5.595, avg. samples / sec: 318.40
Iteration:   2380, Loss function: 5.482, Average Loss: 5.591, avg. samples / sec: 325.01
Iteration:   2400, Loss function: 5.562, Average Loss: 5.587, avg. samples / sec: 317.14
Iteration:   2420, Loss function: 5.552, Average Loss: 5.583, avg. samples / sec: 330.41
Iteration:   2440, Loss function: 5.447, Average Loss: 5.580, avg. samples / sec: 297.30
Iteration:   2460, Loss function: 5.291, Average Loss: 5.577, avg. samples / sec: 305.22
Iteration:   2480, Loss function: 5.402, Average Loss: 5.573, avg. samples / sec: 325.12
Iteration:   2500, Loss function: 5.391, Average Loss: 5.569, avg. samples / sec: 334.65
Iteration:   2520, Loss function: 5.384, Average Loss: 5.563, avg. samples / sec: 305.27
Iteration:   2540, Loss function: 5.492, Average Loss: 5.561, avg. samples / sec: 319.58
Iteration:   2560, Loss function: 5.363, Average Loss: 5.557, avg. samples / sec: 325.76
Iteration:   2580, Loss function: 5.273, Average Loss: 5.553, avg. samples / sec: 319.60
Iteration:   2600, Loss function: 5.351, Average Loss: 5.550, avg. samples / sec: 280.33
Iteration:   2620, Loss function: 5.537, Average Loss: 5.546, avg. samples / sec: 328.85
Iteration:   2640, Loss function: 5.258, Average Loss: 5.543, avg. samples / sec: 276.00
Iteration:   2660, Loss function: 5.114, Average Loss: 5.539, avg. samples / sec: 317.71
Iteration:   2680, Loss function: 5.201, Average Loss: 5.536, avg. samples / sec: 316.77
Iteration:   2700, Loss function: 5.290, Average Loss: 5.531, avg. samples / sec: 273.65
Iteration:   2720, Loss function: 5.379, Average Loss: 5.527, avg. samples / sec: 326.76
Iteration:   2740, Loss function: 5.046, Average Loss: 5.523, avg. samples / sec: 290.96
Iteration:   2760, Loss function: 4.860, Average Loss: 5.518, avg. samples / sec: 261.94
Iteration:   2780, Loss function: 5.378, Average Loss: 5.514, avg. samples / sec: 269.54
Iteration:   2800, Loss function: 5.271, Average Loss: 5.509, avg. samples / sec: 305.61
Iteration:   2820, Loss function: 5.492, Average Loss: 5.504, avg. samples / sec: 247.07
Iteration:   2840, Loss function: 5.157, Average Loss: 5.500, avg. samples / sec: 318.79
Iteration:   2860, Loss function: 5.199, Average Loss: 5.494, avg. samples / sec: 327.08
Iteration:   2880, Loss function: 5.275, Average Loss: 5.489, avg. samples / sec: 318.77
Iteration:   2900, Loss function: 5.037, Average Loss: 5.485, avg. samples / sec: 331.98
Iteration:   2920, Loss function: 5.182, Average Loss: 5.479, avg. samples / sec: 318.92
Iteration:   2940, Loss function: 5.069, Average Loss: 5.475, avg. samples / sec: 313.17
Iteration:   2960, Loss function: 5.351, Average Loss: 5.471, avg. samples / sec: 330.64
Iteration:   2980, Loss function: 5.364, Average Loss: 5.467, avg. samples / sec: 341.68
Iteration:   3000, Loss function: 5.284, Average Loss: 5.461, avg. samples / sec: 334.89
Iteration:   3020, Loss function: 5.280, Average Loss: 5.455, avg. samples / sec: 323.17
Iteration:   3040, Loss function: 5.145, Average Loss: 5.450, avg. samples / sec: 319.09
Iteration:   3060, Loss function: 5.059, Average Loss: 5.444, avg. samples / sec: 329.22
Iteration:   3080, Loss function: 4.935, Average Loss: 5.438, avg. samples / sec: 320.44
:::MLLOG {"namespace": "", "time_ms": 1639766576566, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766576576, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.146, Average Loss: 5.433, avg. samples / sec: 313.04
Iteration:   3120, Loss function: 5.018, Average Loss: 5.427, avg. samples / sec: 331.79
Iteration:   3140, Loss function: 5.252, Average Loss: 5.422, avg. samples / sec: 296.57
Iteration:   3160, Loss function: 5.478, Average Loss: 5.416, avg. samples / sec: 316.05
Iteration:   3180, Loss function: 4.861, Average Loss: 5.411, avg. samples / sec: 334.81
Iteration:   3200, Loss function: 5.298, Average Loss: 5.406, avg. samples / sec: 333.34
Iteration:   3220, Loss function: 5.104, Average Loss: 5.401, avg. samples / sec: 286.62
Iteration:   3240, Loss function: 5.154, Average Loss: 5.396, avg. samples / sec: 257.64
Iteration:   3260, Loss function: 5.040, Average Loss: 5.391, avg. samples / sec: 257.35
Iteration:   3280, Loss function: 4.777, Average Loss: 5.385, avg. samples / sec: 291.19
Iteration:   3300, Loss function: 4.864, Average Loss: 5.379, avg. samples / sec: 332.71
Iteration:   3320, Loss function: 5.010, Average Loss: 5.372, avg. samples / sec: 203.29
Iteration:   3340, Loss function: 5.071, Average Loss: 5.367, avg. samples / sec: 315.93
Iteration:   3360, Loss function: 5.194, Average Loss: 5.361, avg. samples / sec: 326.51
Iteration:   3380, Loss function: 5.194, Average Loss: 5.355, avg. samples / sec: 329.90
Iteration:   3400, Loss function: 4.699, Average Loss: 5.349, avg. samples / sec: 245.02
Iteration:   3420, Loss function: 5.019, Average Loss: 5.344, avg. samples / sec: 301.64
Iteration:   3440, Loss function: 4.805, Average Loss: 5.339, avg. samples / sec: 309.62
Iteration:   3460, Loss function: 5.344, Average Loss: 5.334, avg. samples / sec: 255.45
Iteration:   3480, Loss function: 5.248, Average Loss: 5.330, avg. samples / sec: 336.09
Iteration:   3500, Loss function: 5.214, Average Loss: 5.326, avg. samples / sec: 324.33
Iteration:   3520, Loss function: 5.124, Average Loss: 5.323, avg. samples / sec: 315.52
Iteration:   3540, Loss function: 4.935, Average Loss: 5.318, avg. samples / sec: 332.05
Iteration:   3560, Loss function: 4.992, Average Loss: 5.314, avg. samples / sec: 306.00
Iteration:   3580, Loss function: 5.100, Average Loss: 5.310, avg. samples / sec: 251.10
Iteration:   3600, Loss function: 5.173, Average Loss: 5.304, avg. samples / sec: 302.54
Iteration:   3620, Loss function: 4.840, Average Loss: 5.299, avg. samples / sec: 324.75
Iteration:   3640, Loss function: 4.827, Average Loss: 5.293, avg. samples / sec: 248.16
Iteration:   3660, Loss function: 4.903, Average Loss: 5.289, avg. samples / sec: 219.86
Iteration:   3680, Loss function: 5.078, Average Loss: 5.283, avg. samples / sec: 260.94
Iteration:   3700, Loss function: 5.156, Average Loss: 5.277, avg. samples / sec: 274.16
Iteration:   3720, Loss function: 5.008, Average Loss: 5.270, avg. samples / sec: 296.36
Iteration:   3740, Loss function: 5.016, Average Loss: 5.266, avg. samples / sec: 282.47
Iteration:   3760, Loss function: 5.125, Average Loss: 5.262, avg. samples / sec: 283.79
Iteration:   3780, Loss function: 4.974, Average Loss: 5.257, avg. samples / sec: 298.01
Iteration:   3800, Loss function: 5.152, Average Loss: 5.254, avg. samples / sec: 326.55
Iteration:   3820, Loss function: 5.124, Average Loss: 5.249, avg. samples / sec: 334.60
Iteration:   3840, Loss function: 4.748, Average Loss: 5.245, avg. samples / sec: 296.67
Iteration:   3860, Loss function: 4.855, Average Loss: 5.240, avg. samples / sec: 284.76
Iteration:   3880, Loss function: 4.893, Average Loss: 5.234, avg. samples / sec: 327.38
Iteration:   3900, Loss function: 5.123, Average Loss: 5.230, avg. samples / sec: 212.19
Iteration:   3920, Loss function: 5.145, Average Loss: 5.224, avg. samples / sec: 225.31
Iteration:   3940, Loss function: 4.908, Average Loss: 5.219, avg. samples / sec: 278.63
Iteration:   3960, Loss function: 4.818, Average Loss: 5.215, avg. samples / sec: 275.89
Iteration:   3980, Loss function: 4.992, Average Loss: 5.210, avg. samples / sec: 320.28
Iteration:   4000, Loss function: 5.030, Average Loss: 5.205, avg. samples / sec: 310.28
Iteration:   4020, Loss function: 5.057, Average Loss: 5.201, avg. samples / sec: 317.10
Iteration:   4040, Loss function: 5.106, Average Loss: 5.197, avg. samples / sec: 337.01
Iteration:   4060, Loss function: 5.057, Average Loss: 5.193, avg. samples / sec: 248.44
Iteration:   4080, Loss function: 5.092, Average Loss: 5.188, avg. samples / sec: 291.76
Iteration:   4100, Loss function: 5.104, Average Loss: 5.185, avg. samples / sec: 206.39
:::MLLOG {"namespace": "", "time_ms": 1639766985683, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766985685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.948, Average Loss: 5.182, avg. samples / sec: 317.17
Iteration:   4140, Loss function: 5.058, Average Loss: 5.177, avg. samples / sec: 322.78
Iteration:   4160, Loss function: 5.183, Average Loss: 5.171, avg. samples / sec: 326.28
Iteration:   4180, Loss function: 5.019, Average Loss: 5.165, avg. samples / sec: 324.61
Iteration:   4200, Loss function: 4.765, Average Loss: 5.160, avg. samples / sec: 323.24
Iteration:   4220, Loss function: 4.569, Average Loss: 5.155, avg. samples / sec: 332.39
Iteration:   4240, Loss function: 4.736, Average Loss: 5.149, avg. samples / sec: 301.96
Iteration:   4260, Loss function: 4.999, Average Loss: 5.145, avg. samples / sec: 310.98
Iteration:   4280, Loss function: 4.962, Average Loss: 5.139, avg. samples / sec: 312.27
Iteration:   4300, Loss function: 4.690, Average Loss: 5.134, avg. samples / sec: 325.73
Iteration:   4320, Loss function: 4.881, Average Loss: 5.129, avg. samples / sec: 305.90
Iteration:   4340, Loss function: 4.718, Average Loss: 5.123, avg. samples / sec: 316.60
Iteration:   4360, Loss function: 4.897, Average Loss: 5.118, avg. samples / sec: 309.08
Iteration:   4380, Loss function: 5.106, Average Loss: 5.114, avg. samples / sec: 268.15
Iteration:   4400, Loss function: 4.861, Average Loss: 5.109, avg. samples / sec: 323.81
Iteration:   4420, Loss function: 4.831, Average Loss: 5.104, avg. samples / sec: 302.63
Iteration:   4440, Loss function: 4.928, Average Loss: 5.099, avg. samples / sec: 331.77
Iteration:   4460, Loss function: 5.194, Average Loss: 5.095, avg. samples / sec: 313.92
Iteration:   4480, Loss function: 5.181, Average Loss: 5.092, avg. samples / sec: 319.26
Iteration:   4500, Loss function: 4.764, Average Loss: 5.088, avg. samples / sec: 291.79
Iteration:   4520, Loss function: 4.694, Average Loss: 5.083, avg. samples / sec: 215.56
Iteration:   4540, Loss function: 5.069, Average Loss: 5.078, avg. samples / sec: 322.97
Iteration:   4560, Loss function: 4.803, Average Loss: 5.074, avg. samples / sec: 318.22
Iteration:   4580, Loss function: 4.938, Average Loss: 5.071, avg. samples / sec: 310.07
Iteration:   4600, Loss function: 4.860, Average Loss: 5.068, avg. samples / sec: 306.91
Iteration:   4620, Loss function: 4.886, Average Loss: 5.065, avg. samples / sec: 303.44
Iteration:   4640, Loss function: 4.949, Average Loss: 5.060, avg. samples / sec: 306.73
Iteration:   4660, Loss function: 4.807, Average Loss: 5.056, avg. samples / sec: 325.33
Iteration:   4680, Loss function: 5.198, Average Loss: 5.051, avg. samples / sec: 335.44
Iteration:   4700, Loss function: 4.662, Average Loss: 5.048, avg. samples / sec: 313.52
Iteration:   4720, Loss function: 4.911, Average Loss: 5.044, avg. samples / sec: 299.46
Iteration:   4740, Loss function: 4.695, Average Loss: 5.040, avg. samples / sec: 251.67
Iteration:   4760, Loss function: 4.528, Average Loss: 5.036, avg. samples / sec: 260.86
Iteration:   4780, Loss function: 5.070, Average Loss: 5.032, avg. samples / sec: 318.19
Iteration:   4800, Loss function: 4.789, Average Loss: 5.030, avg. samples / sec: 303.97
Iteration:   4820, Loss function: 4.856, Average Loss: 5.026, avg. samples / sec: 276.54
Iteration:   4840, Loss function: 5.078, Average Loss: 5.023, avg. samples / sec: 261.47
Iteration:   4860, Loss function: 4.724, Average Loss: 5.019, avg. samples / sec: 295.67
Iteration:   4880, Loss function: 5.172, Average Loss: 5.015, avg. samples / sec: 309.09
Iteration:   4900, Loss function: 4.579, Average Loss: 5.011, avg. samples / sec: 312.43
Iteration:   4920, Loss function: 4.713, Average Loss: 5.007, avg. samples / sec: 299.02
Iteration:   4940, Loss function: 4.759, Average Loss: 5.003, avg. samples / sec: 321.22
Iteration:   4960, Loss function: 4.632, Average Loss: 4.999, avg. samples / sec: 325.03
Iteration:   4980, Loss function: 4.654, Average Loss: 4.996, avg. samples / sec: 318.63
Iteration:   5000, Loss function: 5.111, Average Loss: 4.993, avg. samples / sec: 285.56
Iteration:   5020, Loss function: 5.212, Average Loss: 4.990, avg. samples / sec: 303.23
Iteration:   5040, Loss function: 4.876, Average Loss: 4.987, avg. samples / sec: 294.55
Iteration:   5060, Loss function: 4.693, Average Loss: 4.984, avg. samples / sec: 330.03
Iteration:   5080, Loss function: 4.495, Average Loss: 4.978, avg. samples / sec: 294.54
Iteration:   5100, Loss function: 4.790, Average Loss: 4.977, avg. samples / sec: 307.25
Iteration:   5120, Loss function: 4.863, Average Loss: 4.974, avg. samples / sec: 316.26
Iteration:   5140, Loss function: 4.843, Average Loss: 4.971, avg. samples / sec: 319.98
:::MLLOG {"namespace": "", "time_ms": 1639767370814, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.96 s
:::MLLOG {"namespace": "", "time_ms": 1639767466887, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767466891, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767466891, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.018, Average Loss: 4.967, avg. samples / sec: 21.79
DONE (t=7.52s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10563
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21720
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09332
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19119
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13862
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20555
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10563 AP goal: 0.10000
Iteration:   5180, Loss function: 4.751, Average Loss: 4.962, avg. samples / sec: 341.02
:::MLLOG {"namespace": "", "time_ms": 1639767481093, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767481094, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10562955020010059, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767481094, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767484673, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259869, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260556, "event_type": "POINT_IN_TIME", "key": "seed", "value": 4218759065, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 4218759065
:::MLLOG {"namespace": "", "time_ms": 1639765266470, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266470, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266474, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266475, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369063, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369064, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765374614, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765374614, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375010, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375011, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.562, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.021, Average Loss: 0.454, avg. samples / sec: 198.97
Iteration:     40, Loss function: 20.746, Average Loss: 0.855, avg. samples / sec: 256.04
Iteration:     60, Loss function: 20.506, Average Loss: 1.245, avg. samples / sec: 254.68
Iteration:     80, Loss function: 19.945, Average Loss: 1.619, avg. samples / sec: 256.26
Iteration:    100, Loss function: 15.578, Average Loss: 1.947, avg. samples / sec: 254.14
Iteration:    120, Loss function: 10.897, Average Loss: 2.152, avg. samples / sec: 265.47
Iteration:    140, Loss function: 9.412, Average Loss: 2.306, avg. samples / sec: 273.95
Iteration:    160, Loss function: 9.031, Average Loss: 2.443, avg. samples / sec: 257.19
Iteration:    180, Loss function: 8.968, Average Loss: 2.571, avg. samples / sec: 291.60
Iteration:    200, Loss function: 8.452, Average Loss: 2.695, avg. samples / sec: 296.71
Iteration:    220, Loss function: 8.592, Average Loss: 2.814, avg. samples / sec: 255.50
Iteration:    240, Loss function: 9.042, Average Loss: 2.934, avg. samples / sec: 296.44
Iteration:    260, Loss function: 8.841, Average Loss: 3.051, avg. samples / sec: 316.74
Iteration:    280, Loss function: 8.556, Average Loss: 3.162, avg. samples / sec: 321.51
Iteration:    300, Loss function: 8.332, Average Loss: 3.265, avg. samples / sec: 304.71
Iteration:    320, Loss function: 8.474, Average Loss: 3.366, avg. samples / sec: 211.13
Iteration:    340, Loss function: 8.418, Average Loss: 3.466, avg. samples / sec: 312.15
Iteration:    360, Loss function: 8.056, Average Loss: 3.560, avg. samples / sec: 277.34
Iteration:    380, Loss function: 7.924, Average Loss: 3.649, avg. samples / sec: 293.86
Iteration:    400, Loss function: 7.936, Average Loss: 3.734, avg. samples / sec: 320.77
Iteration:    420, Loss function: 7.572, Average Loss: 3.815, avg. samples / sec: 285.08
Iteration:    440, Loss function: 7.700, Average Loss: 3.894, avg. samples / sec: 274.68
Iteration:    460, Loss function: 7.677, Average Loss: 3.970, avg. samples / sec: 238.77
Iteration:    480, Loss function: 7.424, Average Loss: 4.044, avg. samples / sec: 316.29
Iteration:    500, Loss function: 7.564, Average Loss: 4.116, avg. samples / sec: 299.74
Iteration:    520, Loss function: 7.568, Average Loss: 4.184, avg. samples / sec: 258.88
Iteration:    540, Loss function: 7.618, Average Loss: 4.249, avg. samples / sec: 296.48
Iteration:    560, Loss function: 7.109, Average Loss: 4.312, avg. samples / sec: 315.54
Iteration:    580, Loss function: 7.305, Average Loss: 4.372, avg. samples / sec: 321.20
Iteration:    600, Loss function: 7.640, Average Loss: 4.432, avg. samples / sec: 328.54
Iteration:    620, Loss function: 7.020, Average Loss: 4.489, avg. samples / sec: 325.47
Iteration:    640, Loss function: 6.877, Average Loss: 4.543, avg. samples / sec: 322.38
Iteration:    660, Loss function: 7.108, Average Loss: 4.595, avg. samples / sec: 315.88
Iteration:    680, Loss function: 7.151, Average Loss: 4.645, avg. samples / sec: 318.07
Iteration:    700, Loss function: 6.984, Average Loss: 4.693, avg. samples / sec: 317.96
Iteration:    720, Loss function: 6.964, Average Loss: 4.743, avg. samples / sec: 337.34
Iteration:    740, Loss function: 6.844, Average Loss: 4.788, avg. samples / sec: 309.30
Iteration:    760, Loss function: 7.074, Average Loss: 4.832, avg. samples / sec: 242.10
Iteration:    780, Loss function: 6.836, Average Loss: 4.873, avg. samples / sec: 279.89
Iteration:    800, Loss function: 7.325, Average Loss: 4.912, avg. samples / sec: 231.36
Iteration:    820, Loss function: 6.795, Average Loss: 4.950, avg. samples / sec: 274.61
Iteration:    840, Loss function: 6.702, Average Loss: 4.986, avg. samples / sec: 318.86
Iteration:    860, Loss function: 6.847, Average Loss: 5.020, avg. samples / sec: 300.58
Iteration:    880, Loss function: 6.890, Average Loss: 5.053, avg. samples / sec: 316.83
Iteration:    900, Loss function: 6.920, Average Loss: 5.085, avg. samples / sec: 288.14
Iteration:    920, Loss function: 6.727, Average Loss: 5.115, avg. samples / sec: 241.97
Iteration:    940, Loss function: 6.783, Average Loss: 5.145, avg. samples / sec: 268.42
Iteration:    960, Loss function: 6.469, Average Loss: 5.173, avg. samples / sec: 331.28
Iteration:    980, Loss function: 6.393, Average Loss: 5.202, avg. samples / sec: 288.09
Iteration:   1000, Loss function: 6.573, Average Loss: 5.228, avg. samples / sec: 327.68
Iteration:   1020, Loss function: 6.281, Average Loss: 5.252, avg. samples / sec: 290.44
:::MLLOG {"namespace": "", "time_ms": 1639765789661, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765789675, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.311, Average Loss: 5.275, avg. samples / sec: 259.55
Iteration:   1060, Loss function: 6.375, Average Loss: 5.297, avg. samples / sec: 241.66
Iteration:   1080, Loss function: 6.246, Average Loss: 5.319, avg. samples / sec: 333.48
Iteration:   1100, Loss function: 6.057, Average Loss: 5.338, avg. samples / sec: 261.20
Iteration:   1120, Loss function: 6.159, Average Loss: 5.358, avg. samples / sec: 335.35
Iteration:   1140, Loss function: 6.327, Average Loss: 5.376, avg. samples / sec: 296.96
Iteration:   1160, Loss function: 6.085, Average Loss: 5.393, avg. samples / sec: 291.50
Iteration:   1180, Loss function: 6.124, Average Loss: 5.410, avg. samples / sec: 252.76
Iteration:   1200, Loss function: 6.226, Average Loss: 5.425, avg. samples / sec: 234.90
Iteration:   1220, Loss function: 6.326, Average Loss: 5.439, avg. samples / sec: 286.08
Iteration:   1240, Loss function: 6.138, Average Loss: 5.453, avg. samples / sec: 327.36
Iteration:   1260, Loss function: 5.970, Average Loss: 5.466, avg. samples / sec: 315.23
Iteration:   1280, Loss function: 6.135, Average Loss: 5.478, avg. samples / sec: 329.51
Iteration:   1300, Loss function: 6.244, Average Loss: 5.491, avg. samples / sec: 326.75
Iteration:   1320, Loss function: 5.967, Average Loss: 5.502, avg. samples / sec: 336.12
Iteration:   1340, Loss function: 5.727, Average Loss: 5.512, avg. samples / sec: 295.32
Iteration:   1360, Loss function: 6.043, Average Loss: 5.522, avg. samples / sec: 332.56
Iteration:   1380, Loss function: 6.160, Average Loss: 5.532, avg. samples / sec: 328.21
Iteration:   1400, Loss function: 6.100, Average Loss: 5.540, avg. samples / sec: 234.11
Iteration:   1420, Loss function: 5.939, Average Loss: 5.547, avg. samples / sec: 300.68
Iteration:   1440, Loss function: 6.361, Average Loss: 5.555, avg. samples / sec: 299.39
Iteration:   1460, Loss function: 6.041, Average Loss: 5.563, avg. samples / sec: 266.50
Iteration:   1480, Loss function: 5.943, Average Loss: 5.571, avg. samples / sec: 285.52
Iteration:   1500, Loss function: 6.035, Average Loss: 5.580, avg. samples / sec: 280.33
Iteration:   1520, Loss function: 6.113, Average Loss: 5.587, avg. samples / sec: 209.21
Iteration:   1540, Loss function: 5.954, Average Loss: 5.591, avg. samples / sec: 253.90
Iteration:   1560, Loss function: 5.701, Average Loss: 5.595, avg. samples / sec: 216.74
Iteration:   1580, Loss function: 5.718, Average Loss: 5.601, avg. samples / sec: 288.57
Iteration:   1600, Loss function: 6.199, Average Loss: 5.606, avg. samples / sec: 278.14
Iteration:   1620, Loss function: 5.796, Average Loss: 5.610, avg. samples / sec: 334.64
Iteration:   1640, Loss function: 5.874, Average Loss: 5.614, avg. samples / sec: 255.87
Iteration:   1660, Loss function: 5.952, Average Loss: 5.618, avg. samples / sec: 299.91
Iteration:   1680, Loss function: 5.605, Average Loss: 5.621, avg. samples / sec: 321.91
Iteration:   1700, Loss function: 5.615, Average Loss: 5.625, avg. samples / sec: 308.61
Iteration:   1720, Loss function: 5.780, Average Loss: 5.627, avg. samples / sec: 316.88
Iteration:   1740, Loss function: 5.870, Average Loss: 5.630, avg. samples / sec: 322.34
Iteration:   1760, Loss function: 5.565, Average Loss: 5.632, avg. samples / sec: 330.30
Iteration:   1780, Loss function: 5.631, Average Loss: 5.634, avg. samples / sec: 317.17
Iteration:   1800, Loss function: 5.662, Average Loss: 5.637, avg. samples / sec: 323.02
Iteration:   1820, Loss function: 5.843, Average Loss: 5.640, avg. samples / sec: 339.45
Iteration:   1840, Loss function: 6.022, Average Loss: 5.642, avg. samples / sec: 331.54
Iteration:   1860, Loss function: 5.668, Average Loss: 5.642, avg. samples / sec: 312.71
Iteration:   1880, Loss function: 5.920, Average Loss: 5.643, avg. samples / sec: 272.66
Iteration:   1900, Loss function: 5.854, Average Loss: 5.644, avg. samples / sec: 316.19
Iteration:   1920, Loss function: 5.730, Average Loss: 5.644, avg. samples / sec: 338.07
Iteration:   1940, Loss function: 5.832, Average Loss: 5.644, avg. samples / sec: 332.51
Iteration:   1960, Loss function: 5.562, Average Loss: 5.643, avg. samples / sec: 261.32
Iteration:   1980, Loss function: 5.593, Average Loss: 5.642, avg. samples / sec: 314.10
Iteration:   2000, Loss function: 5.492, Average Loss: 5.642, avg. samples / sec: 304.56
Iteration:   2020, Loss function: 5.599, Average Loss: 5.640, avg. samples / sec: 248.06
Iteration:   2040, Loss function: 5.658, Average Loss: 5.640, avg. samples / sec: 286.83
:::MLLOG {"namespace": "", "time_ms": 1639766191089, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766191091, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.384, Average Loss: 5.638, avg. samples / sec: 332.71
Iteration:   2080, Loss function: 5.033, Average Loss: 5.635, avg. samples / sec: 304.12
Iteration:   2100, Loss function: 5.609, Average Loss: 5.633, avg. samples / sec: 315.60
Iteration:   2120, Loss function: 5.380, Average Loss: 5.630, avg. samples / sec: 326.18
Iteration:   2140, Loss function: 5.210, Average Loss: 5.627, avg. samples / sec: 331.30
Iteration:   2160, Loss function: 5.364, Average Loss: 5.624, avg. samples / sec: 335.99
Iteration:   2180, Loss function: 5.263, Average Loss: 5.622, avg. samples / sec: 288.35
Iteration:   2200, Loss function: 5.566, Average Loss: 5.618, avg. samples / sec: 305.88
Iteration:   2220, Loss function: 5.524, Average Loss: 5.615, avg. samples / sec: 209.63
Iteration:   2240, Loss function: 5.458, Average Loss: 5.612, avg. samples / sec: 188.92
Iteration:   2260, Loss function: 5.330, Average Loss: 5.608, avg. samples / sec: 326.67
Iteration:   2280, Loss function: 5.285, Average Loss: 5.605, avg. samples / sec: 332.40
Iteration:   2300, Loss function: 5.334, Average Loss: 5.603, avg. samples / sec: 330.25
Iteration:   2320, Loss function: 5.315, Average Loss: 5.601, avg. samples / sec: 266.36
Iteration:   2340, Loss function: 5.527, Average Loss: 5.598, avg. samples / sec: 295.52
Iteration:   2360, Loss function: 5.359, Average Loss: 5.595, avg. samples / sec: 318.40
Iteration:   2380, Loss function: 5.482, Average Loss: 5.591, avg. samples / sec: 325.01
Iteration:   2400, Loss function: 5.562, Average Loss: 5.587, avg. samples / sec: 317.14
Iteration:   2420, Loss function: 5.552, Average Loss: 5.583, avg. samples / sec: 330.41
Iteration:   2440, Loss function: 5.447, Average Loss: 5.580, avg. samples / sec: 297.30
Iteration:   2460, Loss function: 5.291, Average Loss: 5.577, avg. samples / sec: 305.22
Iteration:   2480, Loss function: 5.402, Average Loss: 5.573, avg. samples / sec: 325.12
Iteration:   2500, Loss function: 5.391, Average Loss: 5.569, avg. samples / sec: 334.65
Iteration:   2520, Loss function: 5.384, Average Loss: 5.563, avg. samples / sec: 305.27
Iteration:   2540, Loss function: 5.492, Average Loss: 5.561, avg. samples / sec: 319.58
Iteration:   2560, Loss function: 5.363, Average Loss: 5.557, avg. samples / sec: 325.76
Iteration:   2580, Loss function: 5.273, Average Loss: 5.553, avg. samples / sec: 319.60
Iteration:   2600, Loss function: 5.351, Average Loss: 5.550, avg. samples / sec: 280.33
Iteration:   2620, Loss function: 5.537, Average Loss: 5.546, avg. samples / sec: 328.85
Iteration:   2640, Loss function: 5.258, Average Loss: 5.543, avg. samples / sec: 276.00
Iteration:   2660, Loss function: 5.114, Average Loss: 5.539, avg. samples / sec: 317.71
Iteration:   2680, Loss function: 5.201, Average Loss: 5.536, avg. samples / sec: 316.77
Iteration:   2700, Loss function: 5.290, Average Loss: 5.531, avg. samples / sec: 273.65
Iteration:   2720, Loss function: 5.379, Average Loss: 5.527, avg. samples / sec: 326.76
Iteration:   2740, Loss function: 5.046, Average Loss: 5.523, avg. samples / sec: 290.96
Iteration:   2760, Loss function: 4.860, Average Loss: 5.518, avg. samples / sec: 261.94
Iteration:   2780, Loss function: 5.378, Average Loss: 5.514, avg. samples / sec: 269.54
Iteration:   2800, Loss function: 5.271, Average Loss: 5.509, avg. samples / sec: 305.61
Iteration:   2820, Loss function: 5.492, Average Loss: 5.504, avg. samples / sec: 247.07
Iteration:   2840, Loss function: 5.157, Average Loss: 5.500, avg. samples / sec: 318.79
Iteration:   2860, Loss function: 5.199, Average Loss: 5.494, avg. samples / sec: 327.08
Iteration:   2880, Loss function: 5.275, Average Loss: 5.489, avg. samples / sec: 318.77
Iteration:   2900, Loss function: 5.037, Average Loss: 5.485, avg. samples / sec: 331.98
Iteration:   2920, Loss function: 5.182, Average Loss: 5.479, avg. samples / sec: 318.92
Iteration:   2940, Loss function: 5.069, Average Loss: 5.475, avg. samples / sec: 313.17
Iteration:   2960, Loss function: 5.351, Average Loss: 5.471, avg. samples / sec: 330.64
Iteration:   2980, Loss function: 5.364, Average Loss: 5.467, avg. samples / sec: 341.68
Iteration:   3000, Loss function: 5.284, Average Loss: 5.461, avg. samples / sec: 334.89
Iteration:   3020, Loss function: 5.280, Average Loss: 5.455, avg. samples / sec: 323.17
Iteration:   3040, Loss function: 5.145, Average Loss: 5.450, avg. samples / sec: 319.09
Iteration:   3060, Loss function: 5.059, Average Loss: 5.444, avg. samples / sec: 329.22
Iteration:   3080, Loss function: 4.935, Average Loss: 5.438, avg. samples / sec: 320.44
:::MLLOG {"namespace": "", "time_ms": 1639766576566, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766576576, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.146, Average Loss: 5.433, avg. samples / sec: 313.04
Iteration:   3120, Loss function: 5.018, Average Loss: 5.427, avg. samples / sec: 331.79
Iteration:   3140, Loss function: 5.252, Average Loss: 5.422, avg. samples / sec: 296.57
Iteration:   3160, Loss function: 5.478, Average Loss: 5.416, avg. samples / sec: 316.05
Iteration:   3180, Loss function: 4.861, Average Loss: 5.411, avg. samples / sec: 334.81
Iteration:   3200, Loss function: 5.298, Average Loss: 5.406, avg. samples / sec: 333.34
Iteration:   3220, Loss function: 5.104, Average Loss: 5.401, avg. samples / sec: 286.62
Iteration:   3240, Loss function: 5.154, Average Loss: 5.396, avg. samples / sec: 257.64
Iteration:   3260, Loss function: 5.040, Average Loss: 5.391, avg. samples / sec: 257.35
Iteration:   3280, Loss function: 4.777, Average Loss: 5.385, avg. samples / sec: 291.19
Iteration:   3300, Loss function: 4.864, Average Loss: 5.379, avg. samples / sec: 332.71
Iteration:   3320, Loss function: 5.010, Average Loss: 5.372, avg. samples / sec: 203.29
Iteration:   3340, Loss function: 5.071, Average Loss: 5.367, avg. samples / sec: 315.93
Iteration:   3360, Loss function: 5.194, Average Loss: 5.361, avg. samples / sec: 326.51
Iteration:   3380, Loss function: 5.194, Average Loss: 5.355, avg. samples / sec: 329.90
Iteration:   3400, Loss function: 4.699, Average Loss: 5.349, avg. samples / sec: 245.02
Iteration:   3420, Loss function: 5.019, Average Loss: 5.344, avg. samples / sec: 301.64
Iteration:   3440, Loss function: 4.805, Average Loss: 5.339, avg. samples / sec: 309.62
Iteration:   3460, Loss function: 5.344, Average Loss: 5.334, avg. samples / sec: 255.45
Iteration:   3480, Loss function: 5.248, Average Loss: 5.330, avg. samples / sec: 336.09
Iteration:   3500, Loss function: 5.214, Average Loss: 5.326, avg. samples / sec: 324.33
Iteration:   3520, Loss function: 5.124, Average Loss: 5.323, avg. samples / sec: 315.52
Iteration:   3540, Loss function: 4.935, Average Loss: 5.318, avg. samples / sec: 332.05
Iteration:   3560, Loss function: 4.992, Average Loss: 5.314, avg. samples / sec: 306.00
Iteration:   3580, Loss function: 5.100, Average Loss: 5.310, avg. samples / sec: 251.10
Iteration:   3600, Loss function: 5.173, Average Loss: 5.304, avg. samples / sec: 302.54
Iteration:   3620, Loss function: 4.840, Average Loss: 5.299, avg. samples / sec: 324.75
Iteration:   3640, Loss function: 4.827, Average Loss: 5.293, avg. samples / sec: 248.16
Iteration:   3660, Loss function: 4.903, Average Loss: 5.289, avg. samples / sec: 219.86
Iteration:   3680, Loss function: 5.078, Average Loss: 5.283, avg. samples / sec: 260.94
Iteration:   3700, Loss function: 5.156, Average Loss: 5.277, avg. samples / sec: 274.16
Iteration:   3720, Loss function: 5.008, Average Loss: 5.270, avg. samples / sec: 296.36
Iteration:   3740, Loss function: 5.016, Average Loss: 5.266, avg. samples / sec: 282.47
Iteration:   3760, Loss function: 5.125, Average Loss: 5.262, avg. samples / sec: 283.79
Iteration:   3780, Loss function: 4.974, Average Loss: 5.257, avg. samples / sec: 298.01
Iteration:   3800, Loss function: 5.152, Average Loss: 5.254, avg. samples / sec: 326.55
Iteration:   3820, Loss function: 5.124, Average Loss: 5.249, avg. samples / sec: 334.60
Iteration:   3840, Loss function: 4.748, Average Loss: 5.245, avg. samples / sec: 296.67
Iteration:   3860, Loss function: 4.855, Average Loss: 5.240, avg. samples / sec: 284.76
Iteration:   3880, Loss function: 4.893, Average Loss: 5.234, avg. samples / sec: 327.38
Iteration:   3900, Loss function: 5.123, Average Loss: 5.230, avg. samples / sec: 212.19
Iteration:   3920, Loss function: 5.145, Average Loss: 5.224, avg. samples / sec: 225.31
Iteration:   3940, Loss function: 4.908, Average Loss: 5.219, avg. samples / sec: 278.63
Iteration:   3960, Loss function: 4.818, Average Loss: 5.215, avg. samples / sec: 275.89
Iteration:   3980, Loss function: 4.992, Average Loss: 5.210, avg. samples / sec: 320.28
Iteration:   4000, Loss function: 5.030, Average Loss: 5.205, avg. samples / sec: 310.28
Iteration:   4020, Loss function: 5.057, Average Loss: 5.201, avg. samples / sec: 317.10
Iteration:   4040, Loss function: 5.106, Average Loss: 5.197, avg. samples / sec: 337.01
Iteration:   4060, Loss function: 5.057, Average Loss: 5.193, avg. samples / sec: 248.44
Iteration:   4080, Loss function: 5.092, Average Loss: 5.188, avg. samples / sec: 291.76
Iteration:   4100, Loss function: 5.104, Average Loss: 5.185, avg. samples / sec: 206.39
:::MLLOG {"namespace": "", "time_ms": 1639766985683, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766985685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.948, Average Loss: 5.182, avg. samples / sec: 317.17
Iteration:   4140, Loss function: 5.058, Average Loss: 5.177, avg. samples / sec: 322.78
Iteration:   4160, Loss function: 5.183, Average Loss: 5.171, avg. samples / sec: 326.28
Iteration:   4180, Loss function: 5.019, Average Loss: 5.165, avg. samples / sec: 324.61
Iteration:   4200, Loss function: 4.765, Average Loss: 5.160, avg. samples / sec: 323.24
Iteration:   4220, Loss function: 4.569, Average Loss: 5.155, avg. samples / sec: 332.39
Iteration:   4240, Loss function: 4.736, Average Loss: 5.149, avg. samples / sec: 301.96
Iteration:   4260, Loss function: 4.999, Average Loss: 5.145, avg. samples / sec: 310.98
Iteration:   4280, Loss function: 4.962, Average Loss: 5.139, avg. samples / sec: 312.27
Iteration:   4300, Loss function: 4.690, Average Loss: 5.134, avg. samples / sec: 325.73
Iteration:   4320, Loss function: 4.881, Average Loss: 5.129, avg. samples / sec: 305.90
Iteration:   4340, Loss function: 4.718, Average Loss: 5.123, avg. samples / sec: 316.60
Iteration:   4360, Loss function: 4.897, Average Loss: 5.118, avg. samples / sec: 309.08
Iteration:   4380, Loss function: 5.106, Average Loss: 5.114, avg. samples / sec: 268.15
Iteration:   4400, Loss function: 4.861, Average Loss: 5.109, avg. samples / sec: 323.81
Iteration:   4420, Loss function: 4.831, Average Loss: 5.104, avg. samples / sec: 302.63
Iteration:   4440, Loss function: 4.928, Average Loss: 5.099, avg. samples / sec: 331.77
Iteration:   4460, Loss function: 5.194, Average Loss: 5.095, avg. samples / sec: 313.92
Iteration:   4480, Loss function: 5.181, Average Loss: 5.092, avg. samples / sec: 319.26
Iteration:   4500, Loss function: 4.764, Average Loss: 5.088, avg. samples / sec: 291.79
Iteration:   4520, Loss function: 4.694, Average Loss: 5.083, avg. samples / sec: 215.56
Iteration:   4540, Loss function: 5.069, Average Loss: 5.078, avg. samples / sec: 322.97
Iteration:   4560, Loss function: 4.803, Average Loss: 5.074, avg. samples / sec: 318.22
Iteration:   4580, Loss function: 4.938, Average Loss: 5.071, avg. samples / sec: 310.07
Iteration:   4600, Loss function: 4.860, Average Loss: 5.068, avg. samples / sec: 306.91
Iteration:   4620, Loss function: 4.886, Average Loss: 5.065, avg. samples / sec: 303.44
Iteration:   4640, Loss function: 4.949, Average Loss: 5.060, avg. samples / sec: 306.73
Iteration:   4660, Loss function: 4.807, Average Loss: 5.056, avg. samples / sec: 325.33
Iteration:   4680, Loss function: 5.198, Average Loss: 5.051, avg. samples / sec: 335.44
Iteration:   4700, Loss function: 4.662, Average Loss: 5.048, avg. samples / sec: 313.52
Iteration:   4720, Loss function: 4.911, Average Loss: 5.044, avg. samples / sec: 299.46
Iteration:   4740, Loss function: 4.695, Average Loss: 5.040, avg. samples / sec: 251.67
Iteration:   4760, Loss function: 4.528, Average Loss: 5.036, avg. samples / sec: 260.86
Iteration:   4780, Loss function: 5.070, Average Loss: 5.032, avg. samples / sec: 318.19
Iteration:   4800, Loss function: 4.789, Average Loss: 5.030, avg. samples / sec: 303.97
Iteration:   4820, Loss function: 4.856, Average Loss: 5.026, avg. samples / sec: 276.54
Iteration:   4840, Loss function: 5.078, Average Loss: 5.023, avg. samples / sec: 261.47
Iteration:   4860, Loss function: 4.724, Average Loss: 5.019, avg. samples / sec: 295.67
Iteration:   4880, Loss function: 5.172, Average Loss: 5.015, avg. samples / sec: 309.09
Iteration:   4900, Loss function: 4.579, Average Loss: 5.011, avg. samples / sec: 312.43
Iteration:   4920, Loss function: 4.713, Average Loss: 5.007, avg. samples / sec: 299.02
Iteration:   4940, Loss function: 4.759, Average Loss: 5.003, avg. samples / sec: 321.22
Iteration:   4960, Loss function: 4.632, Average Loss: 4.999, avg. samples / sec: 325.03
Iteration:   4980, Loss function: 4.654, Average Loss: 4.996, avg. samples / sec: 318.63
Iteration:   5000, Loss function: 5.111, Average Loss: 4.993, avg. samples / sec: 285.56
Iteration:   5020, Loss function: 5.212, Average Loss: 4.990, avg. samples / sec: 303.23
Iteration:   5040, Loss function: 4.876, Average Loss: 4.987, avg. samples / sec: 294.55
Iteration:   5060, Loss function: 4.693, Average Loss: 4.984, avg. samples / sec: 330.03
Iteration:   5080, Loss function: 4.495, Average Loss: 4.978, avg. samples / sec: 294.54
Iteration:   5100, Loss function: 4.790, Average Loss: 4.977, avg. samples / sec: 307.25
Iteration:   5120, Loss function: 4.863, Average Loss: 4.974, avg. samples / sec: 316.26
Iteration:   5140, Loss function: 4.843, Average Loss: 4.971, avg. samples / sec: 319.98
:::MLLOG {"namespace": "", "time_ms": 1639767370814, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 95.96 s
:::MLLOG {"namespace": "", "time_ms": 1639767466887, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767466891, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767466891, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.14s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.018, Average Loss: 4.967, avg. samples / sec: 21.79
DONE (t=7.52s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10563
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21720
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09332
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19119
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13862
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20555
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21815
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10563 AP goal: 0.10000
Iteration:   5180, Loss function: 4.751, Average Loss: 4.962, avg. samples / sec: 341.02
:::MLLOG {"namespace": "", "time_ms": 1639767481093, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767481094, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10562955020010059, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767481094, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767484673, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767491
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:11 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:47 PM'
START TIMING RUN WAS 2021-12-17 06:20:47 PM
ENDING TIMING RUN AT 2021-12-17 06:58:11 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:11 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-88095807-c0f1-543b-9430-ee4ac687a18e)
+ result=2244
RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-17 06:20:47 PM
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2244,nvidia,2021-12-17 06:20:47 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
