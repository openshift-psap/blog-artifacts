8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-496ca377-45b5-53f0-96f5-35d0f05e0494
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494
+ echo 'Found 1 MIG instances: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765247
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:47 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:47 PM GPU: 1 x 2g.10gb x 24 Pods'
STARTING TIMING RUN AT 2021-12-17 06:20:47 PM GPU: 1 x 2g.10gb x 24 Pods
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:47 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-hxljp to the sync file ...
run-mlperf--1-hxljp Found 6 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
run-mlperf--1-hxljp Found 21 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
    16	run-mlperf--1-pgt2r
    17	run-mlperf--1-rrqzl
    18	run-mlperf--1-sbgrm
    19	run-mlperf--1-pvnvk
    20	run-mlperf--1-fbqms
    21	run-mlperf--1-2lpws
Fri Dec 17 18:20:57 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765261004, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765261667, "event_type": "POINT_IN_TIME", "key": "seed", "value": 679016067, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 679016067
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765266805, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266805, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266810, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369845, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369846, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765375561, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765375563, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375912, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375913, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375914, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.300, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.176, Average Loss: 0.463, avg. samples / sec: 190.66
Iteration:     40, Loss function: 20.807, Average Loss: 0.865, avg. samples / sec: 253.26
Iteration:     60, Loss function: 20.226, Average Loss: 1.255, avg. samples / sec: 254.41
Iteration:     80, Loss function: 19.716, Average Loss: 1.626, avg. samples / sec: 245.17
Iteration:    100, Loss function: 14.740, Average Loss: 1.943, avg. samples / sec: 265.24
Iteration:    120, Loss function: 12.227, Average Loss: 2.147, avg. samples / sec: 261.00
Iteration:    140, Loss function: 9.872, Average Loss: 2.313, avg. samples / sec: 294.13
Iteration:    160, Loss function: 9.397, Average Loss: 2.458, avg. samples / sec: 249.19
Iteration:    180, Loss function: 9.033, Average Loss: 2.591, avg. samples / sec: 276.06
Iteration:    200, Loss function: 8.735, Average Loss: 2.718, avg. samples / sec: 296.90
Iteration:    220, Loss function: 8.531, Average Loss: 2.838, avg. samples / sec: 275.11
Iteration:    240, Loss function: 8.600, Average Loss: 2.954, avg. samples / sec: 278.66
Iteration:    260, Loss function: 8.965, Average Loss: 3.069, avg. samples / sec: 324.15
Iteration:    280, Loss function: 8.727, Average Loss: 3.182, avg. samples / sec: 328.77
Iteration:    300, Loss function: 8.588, Average Loss: 3.288, avg. samples / sec: 300.12
Iteration:    320, Loss function: 8.394, Average Loss: 3.388, avg. samples / sec: 307.96
Iteration:    340, Loss function: 8.367, Average Loss: 3.487, avg. samples / sec: 271.86
Iteration:    360, Loss function: 7.931, Average Loss: 3.580, avg. samples / sec: 312.51
Iteration:    380, Loss function: 8.050, Average Loss: 3.670, avg. samples / sec: 303.33
Iteration:    400, Loss function: 7.778, Average Loss: 3.754, avg. samples / sec: 216.36
Iteration:    420, Loss function: 7.600, Average Loss: 3.836, avg. samples / sec: 288.65
Iteration:    440, Loss function: 8.097, Average Loss: 3.914, avg. samples / sec: 332.50
Iteration:    460, Loss function: 7.649, Average Loss: 3.992, avg. samples / sec: 320.51
Iteration:    480, Loss function: 7.378, Average Loss: 4.065, avg. samples / sec: 310.60
Iteration:    500, Loss function: 7.602, Average Loss: 4.136, avg. samples / sec: 321.29
Iteration:    520, Loss function: 7.510, Average Loss: 4.203, avg. samples / sec: 280.21
Iteration:    540, Loss function: 7.415, Average Loss: 4.269, avg. samples / sec: 241.49
Iteration:    560, Loss function: 7.237, Average Loss: 4.331, avg. samples / sec: 211.35
Iteration:    580, Loss function: 7.172, Average Loss: 4.392, avg. samples / sec: 290.63
Iteration:    600, Loss function: 7.284, Average Loss: 4.452, avg. samples / sec: 297.94
Iteration:    620, Loss function: 6.992, Average Loss: 4.507, avg. samples / sec: 288.59
Iteration:    640, Loss function: 6.892, Average Loss: 4.561, avg. samples / sec: 271.47
Iteration:    660, Loss function: 7.118, Average Loss: 4.613, avg. samples / sec: 320.43
Iteration:    680, Loss function: 7.338, Average Loss: 4.665, avg. samples / sec: 324.54
Iteration:    700, Loss function: 6.914, Average Loss: 4.711, avg. samples / sec: 318.84
Iteration:    720, Loss function: 7.132, Average Loss: 4.760, avg. samples / sec: 292.01
Iteration:    740, Loss function: 6.921, Average Loss: 4.807, avg. samples / sec: 275.39
Iteration:    760, Loss function: 6.868, Average Loss: 4.850, avg. samples / sec: 296.87
Iteration:    780, Loss function: 6.816, Average Loss: 4.891, avg. samples / sec: 215.68
Iteration:    800, Loss function: 7.155, Average Loss: 4.931, avg. samples / sec: 282.58
Iteration:    820, Loss function: 6.755, Average Loss: 4.968, avg. samples / sec: 267.42
Iteration:    840, Loss function: 6.963, Average Loss: 5.005, avg. samples / sec: 312.14
Iteration:    860, Loss function: 6.845, Average Loss: 5.040, avg. samples / sec: 239.18
Iteration:    880, Loss function: 6.729, Average Loss: 5.073, avg. samples / sec: 214.97
Iteration:    900, Loss function: 6.788, Average Loss: 5.104, avg. samples / sec: 248.60
Iteration:    920, Loss function: 6.590, Average Loss: 5.133, avg. samples / sec: 257.20
Iteration:    940, Loss function: 6.696, Average Loss: 5.162, avg. samples / sec: 329.00
Iteration:    960, Loss function: 6.614, Average Loss: 5.191, avg. samples / sec: 280.00
Iteration:    980, Loss function: 6.505, Average Loss: 5.218, avg. samples / sec: 303.19
Iteration:   1000, Loss function: 6.388, Average Loss: 5.242, avg. samples / sec: 276.99
Iteration:   1020, Loss function: 6.355, Average Loss: 5.266, avg. samples / sec: 315.08
:::MLLOG {"namespace": "", "time_ms": 1639765800540, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765800551, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.508, Average Loss: 5.290, avg. samples / sec: 332.45
Iteration:   1060, Loss function: 6.466, Average Loss: 5.313, avg. samples / sec: 318.51
Iteration:   1080, Loss function: 6.420, Average Loss: 5.335, avg. samples / sec: 235.29
Iteration:   1100, Loss function: 6.318, Average Loss: 5.355, avg. samples / sec: 302.57
Iteration:   1120, Loss function: 6.150, Average Loss: 5.375, avg. samples / sec: 324.94
Iteration:   1140, Loss function: 6.463, Average Loss: 5.393, avg. samples / sec: 292.35
Iteration:   1160, Loss function: 6.191, Average Loss: 5.410, avg. samples / sec: 294.83
Iteration:   1180, Loss function: 6.193, Average Loss: 5.427, avg. samples / sec: 292.77
Iteration:   1200, Loss function: 6.212, Average Loss: 5.443, avg. samples / sec: 280.38
Iteration:   1220, Loss function: 6.254, Average Loss: 5.459, avg. samples / sec: 328.63
Iteration:   1240, Loss function: 6.059, Average Loss: 5.473, avg. samples / sec: 328.17
Iteration:   1260, Loss function: 5.901, Average Loss: 5.484, avg. samples / sec: 337.48
Iteration:   1280, Loss function: 5.932, Average Loss: 5.496, avg. samples / sec: 308.33
Iteration:   1300, Loss function: 6.061, Average Loss: 5.509, avg. samples / sec: 323.37
Iteration:   1320, Loss function: 6.081, Average Loss: 5.520, avg. samples / sec: 300.44
Iteration:   1340, Loss function: 5.976, Average Loss: 5.529, avg. samples / sec: 295.71
Iteration:   1360, Loss function: 6.031, Average Loss: 5.540, avg. samples / sec: 321.89
Iteration:   1380, Loss function: 6.123, Average Loss: 5.550, avg. samples / sec: 326.52
Iteration:   1400, Loss function: 6.245, Average Loss: 5.558, avg. samples / sec: 253.74
Iteration:   1420, Loss function: 5.985, Average Loss: 5.566, avg. samples / sec: 304.96
Iteration:   1440, Loss function: 6.376, Average Loss: 5.574, avg. samples / sec: 222.84
Iteration:   1460, Loss function: 6.187, Average Loss: 5.583, avg. samples / sec: 175.95
Iteration:   1480, Loss function: 5.782, Average Loss: 5.590, avg. samples / sec: 246.97
Iteration:   1500, Loss function: 5.998, Average Loss: 5.598, avg. samples / sec: 215.00
Iteration:   1520, Loss function: 6.019, Average Loss: 5.603, avg. samples / sec: 224.13
Iteration:   1540, Loss function: 6.146, Average Loss: 5.608, avg. samples / sec: 269.32
Iteration:   1560, Loss function: 5.849, Average Loss: 5.614, avg. samples / sec: 319.88
Iteration:   1580, Loss function: 5.711, Average Loss: 5.619, avg. samples / sec: 313.62
Iteration:   1600, Loss function: 5.984, Average Loss: 5.623, avg. samples / sec: 302.59
Iteration:   1620, Loss function: 6.080, Average Loss: 5.629, avg. samples / sec: 254.90
Iteration:   1640, Loss function: 6.090, Average Loss: 5.633, avg. samples / sec: 297.92
Iteration:   1660, Loss function: 6.194, Average Loss: 5.638, avg. samples / sec: 212.51
Iteration:   1680, Loss function: 5.698, Average Loss: 5.641, avg. samples / sec: 316.50
Iteration:   1700, Loss function: 5.445, Average Loss: 5.644, avg. samples / sec: 270.13
Iteration:   1720, Loss function: 5.684, Average Loss: 5.646, avg. samples / sec: 235.35
Iteration:   1740, Loss function: 5.975, Average Loss: 5.649, avg. samples / sec: 223.14
Iteration:   1760, Loss function: 5.589, Average Loss: 5.651, avg. samples / sec: 220.35
Iteration:   1780, Loss function: 5.592, Average Loss: 5.651, avg. samples / sec: 298.03
Iteration:   1800, Loss function: 5.543, Average Loss: 5.653, avg. samples / sec: 313.21
Iteration:   1820, Loss function: 5.940, Average Loss: 5.655, avg. samples / sec: 293.39
Iteration:   1840, Loss function: 6.016, Average Loss: 5.657, avg. samples / sec: 230.83
Iteration:   1860, Loss function: 5.613, Average Loss: 5.656, avg. samples / sec: 279.81
Iteration:   1880, Loss function: 5.807, Average Loss: 5.658, avg. samples / sec: 332.22
Iteration:   1900, Loss function: 5.801, Average Loss: 5.660, avg. samples / sec: 308.26
Iteration:   1920, Loss function: 5.645, Average Loss: 5.660, avg. samples / sec: 330.79
Iteration:   1940, Loss function: 5.884, Average Loss: 5.659, avg. samples / sec: 320.90
Iteration:   1960, Loss function: 5.605, Average Loss: 5.658, avg. samples / sec: 272.83
Iteration:   1980, Loss function: 5.755, Average Loss: 5.657, avg. samples / sec: 305.02
Iteration:   2000, Loss function: 5.624, Average Loss: 5.656, avg. samples / sec: 315.65
Iteration:   2020, Loss function: 5.585, Average Loss: 5.654, avg. samples / sec: 223.87
Iteration:   2040, Loss function: 5.578, Average Loss: 5.652, avg. samples / sec: 331.88
:::MLLOG {"namespace": "", "time_ms": 1639766220381, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766220383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.549, Average Loss: 5.651, avg. samples / sec: 325.51
Iteration:   2080, Loss function: 5.131, Average Loss: 5.647, avg. samples / sec: 301.40
Iteration:   2100, Loss function: 5.505, Average Loss: 5.645, avg. samples / sec: 297.36
Iteration:   2120, Loss function: 5.462, Average Loss: 5.642, avg. samples / sec: 293.08
Iteration:   2140, Loss function: 5.621, Average Loss: 5.639, avg. samples / sec: 311.51
Iteration:   2160, Loss function: 5.480, Average Loss: 5.637, avg. samples / sec: 309.14
Iteration:   2180, Loss function: 5.414, Average Loss: 5.634, avg. samples / sec: 326.52
Iteration:   2200, Loss function: 5.477, Average Loss: 5.631, avg. samples / sec: 318.64
Iteration:   2220, Loss function: 5.573, Average Loss: 5.628, avg. samples / sec: 324.14
Iteration:   2240, Loss function: 5.456, Average Loss: 5.624, avg. samples / sec: 315.01
Iteration:   2260, Loss function: 5.313, Average Loss: 5.621, avg. samples / sec: 328.60
Iteration:   2280, Loss function: 5.107, Average Loss: 5.617, avg. samples / sec: 340.05
Iteration:   2300, Loss function: 5.176, Average Loss: 5.615, avg. samples / sec: 308.13
Iteration:   2320, Loss function: 5.514, Average Loss: 5.613, avg. samples / sec: 296.63
Iteration:   2340, Loss function: 5.538, Average Loss: 5.610, avg. samples / sec: 267.52
Iteration:   2360, Loss function: 5.436, Average Loss: 5.605, avg. samples / sec: 330.21
Iteration:   2380, Loss function: 5.412, Average Loss: 5.601, avg. samples / sec: 290.11
Iteration:   2400, Loss function: 5.535, Average Loss: 5.597, avg. samples / sec: 263.74
Iteration:   2420, Loss function: 5.363, Average Loss: 5.592, avg. samples / sec: 323.89
Iteration:   2440, Loss function: 5.605, Average Loss: 5.590, avg. samples / sec: 327.16
Iteration:   2460, Loss function: 5.172, Average Loss: 5.587, avg. samples / sec: 312.19
Iteration:   2480, Loss function: 5.443, Average Loss: 5.583, avg. samples / sec: 276.03
Iteration:   2500, Loss function: 5.485, Average Loss: 5.580, avg. samples / sec: 230.53
Iteration:   2520, Loss function: 5.366, Average Loss: 5.575, avg. samples / sec: 250.85
Iteration:   2540, Loss function: 5.366, Average Loss: 5.572, avg. samples / sec: 305.91
Iteration:   2560, Loss function: 5.327, Average Loss: 5.569, avg. samples / sec: 232.63
Iteration:   2580, Loss function: 5.209, Average Loss: 5.565, avg. samples / sec: 332.72
Iteration:   2600, Loss function: 5.404, Average Loss: 5.562, avg. samples / sec: 252.90
Iteration:   2620, Loss function: 5.610, Average Loss: 5.556, avg. samples / sec: 314.05
Iteration:   2640, Loss function: 5.221, Average Loss: 5.554, avg. samples / sec: 314.37
Iteration:   2660, Loss function: 5.149, Average Loss: 5.550, avg. samples / sec: 306.73
Iteration:   2680, Loss function: 5.244, Average Loss: 5.545, avg. samples / sec: 280.22
Iteration:   2700, Loss function: 5.292, Average Loss: 5.540, avg. samples / sec: 236.02
Iteration:   2720, Loss function: 5.290, Average Loss: 5.535, avg. samples / sec: 315.11
Iteration:   2740, Loss function: 5.017, Average Loss: 5.531, avg. samples / sec: 318.86
Iteration:   2760, Loss function: 4.868, Average Loss: 5.525, avg. samples / sec: 283.38
Iteration:   2780, Loss function: 5.640, Average Loss: 5.522, avg. samples / sec: 322.66
Iteration:   2800, Loss function: 5.362, Average Loss: 5.517, avg. samples / sec: 316.77
Iteration:   2820, Loss function: 5.458, Average Loss: 5.513, avg. samples / sec: 313.91
Iteration:   2840, Loss function: 5.241, Average Loss: 5.509, avg. samples / sec: 316.28
Iteration:   2860, Loss function: 5.128, Average Loss: 5.503, avg. samples / sec: 326.48
Iteration:   2880, Loss function: 5.336, Average Loss: 5.499, avg. samples / sec: 326.73
Iteration:   2900, Loss function: 5.192, Average Loss: 5.495, avg. samples / sec: 304.93
Iteration:   2920, Loss function: 5.200, Average Loss: 5.490, avg. samples / sec: 230.36
Iteration:   2940, Loss function: 5.009, Average Loss: 5.486, avg. samples / sec: 235.11
Iteration:   2960, Loss function: 5.545, Average Loss: 5.482, avg. samples / sec: 261.80
Iteration:   2980, Loss function: 5.078, Average Loss: 5.478, avg. samples / sec: 315.47
Iteration:   3000, Loss function: 5.365, Average Loss: 5.473, avg. samples / sec: 335.27
Iteration:   3020, Loss function: 5.191, Average Loss: 5.466, avg. samples / sec: 331.86
Iteration:   3040, Loss function: 5.092, Average Loss: 5.461, avg. samples / sec: 310.10
Iteration:   3060, Loss function: 5.127, Average Loss: 5.455, avg. samples / sec: 321.44
Iteration:   3080, Loss function: 4.895, Average Loss: 5.450, avg. samples / sec: 326.45
:::MLLOG {"namespace": "", "time_ms": 1639766614793, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766614795, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.078, Average Loss: 5.445, avg. samples / sec: 307.00
Iteration:   3120, Loss function: 4.961, Average Loss: 5.439, avg. samples / sec: 301.48
Iteration:   3140, Loss function: 5.079, Average Loss: 5.433, avg. samples / sec: 285.62
Iteration:   3160, Loss function: 5.595, Average Loss: 5.427, avg. samples / sec: 271.85
Iteration:   3180, Loss function: 5.086, Average Loss: 5.422, avg. samples / sec: 326.47
Iteration:   3200, Loss function: 5.168, Average Loss: 5.416, avg. samples / sec: 323.15
Iteration:   3220, Loss function: 5.074, Average Loss: 5.410, avg. samples / sec: 304.82
Iteration:   3240, Loss function: 5.116, Average Loss: 5.404, avg. samples / sec: 318.90
Iteration:   3260, Loss function: 4.995, Average Loss: 5.398, avg. samples / sec: 335.48
Iteration:   3280, Loss function: 4.958, Average Loss: 5.392, avg. samples / sec: 316.06
Iteration:   3300, Loss function: 4.786, Average Loss: 5.387, avg. samples / sec: 335.28
Iteration:   3320, Loss function: 4.972, Average Loss: 5.382, avg. samples / sec: 315.02
Iteration:   3340, Loss function: 5.001, Average Loss: 5.378, avg. samples / sec: 330.40
Iteration:   3360, Loss function: 5.219, Average Loss: 5.373, avg. samples / sec: 320.26
Iteration:   3380, Loss function: 5.217, Average Loss: 5.366, avg. samples / sec: 302.32
Iteration:   3400, Loss function: 4.842, Average Loss: 5.361, avg. samples / sec: 276.60
Iteration:   3420, Loss function: 5.238, Average Loss: 5.356, avg. samples / sec: 265.54
Iteration:   3440, Loss function: 5.074, Average Loss: 5.351, avg. samples / sec: 311.90
Iteration:   3460, Loss function: 5.173, Average Loss: 5.345, avg. samples / sec: 280.43
Iteration:   3480, Loss function: 5.009, Average Loss: 5.340, avg. samples / sec: 274.34
Iteration:   3500, Loss function: 5.123, Average Loss: 5.336, avg. samples / sec: 297.28
Iteration:   3520, Loss function: 5.052, Average Loss: 5.332, avg. samples / sec: 314.03
Iteration:   3540, Loss function: 4.994, Average Loss: 5.327, avg. samples / sec: 195.03
Iteration:   3560, Loss function: 5.031, Average Loss: 5.324, avg. samples / sec: 259.62
Iteration:   3580, Loss function: 4.999, Average Loss: 5.320, avg. samples / sec: 240.52
Iteration:   3600, Loss function: 5.157, Average Loss: 5.315, avg. samples / sec: 316.75
Iteration:   3620, Loss function: 4.777, Average Loss: 5.310, avg. samples / sec: 286.99
Iteration:   3640, Loss function: 4.917, Average Loss: 5.306, avg. samples / sec: 283.12
Iteration:   3660, Loss function: 5.235, Average Loss: 5.301, avg. samples / sec: 276.76
Iteration:   3680, Loss function: 5.158, Average Loss: 5.295, avg. samples / sec: 274.61
Iteration:   3700, Loss function: 5.025, Average Loss: 5.290, avg. samples / sec: 273.05
Iteration:   3720, Loss function: 4.784, Average Loss: 5.285, avg. samples / sec: 280.83
Iteration:   3740, Loss function: 5.128, Average Loss: 5.281, avg. samples / sec: 332.31
Iteration:   3760, Loss function: 4.963, Average Loss: 5.277, avg. samples / sec: 317.99
Iteration:   3780, Loss function: 5.109, Average Loss: 5.272, avg. samples / sec: 304.21
Iteration:   3800, Loss function: 5.094, Average Loss: 5.269, avg. samples / sec: 165.76
Iteration:   3820, Loss function: 5.331, Average Loss: 5.265, avg. samples / sec: 263.36
Iteration:   3840, Loss function: 4.729, Average Loss: 5.260, avg. samples / sec: 310.01
Iteration:   3860, Loss function: 4.810, Average Loss: 5.256, avg. samples / sec: 310.30
Iteration:   3880, Loss function: 5.306, Average Loss: 5.250, avg. samples / sec: 329.34
Iteration:   3900, Loss function: 5.249, Average Loss: 5.246, avg. samples / sec: 291.24
Iteration:   3920, Loss function: 5.042, Average Loss: 5.241, avg. samples / sec: 285.65
Iteration:   3940, Loss function: 5.044, Average Loss: 5.235, avg. samples / sec: 313.34
Iteration:   3960, Loss function: 4.840, Average Loss: 5.231, avg. samples / sec: 300.92
Iteration:   3980, Loss function: 4.898, Average Loss: 5.226, avg. samples / sec: 330.34
Iteration:   4000, Loss function: 4.933, Average Loss: 5.222, avg. samples / sec: 327.83
Iteration:   4020, Loss function: 4.874, Average Loss: 5.216, avg. samples / sec: 317.79
Iteration:   4040, Loss function: 5.168, Average Loss: 5.213, avg. samples / sec: 328.40
Iteration:   4060, Loss function: 5.377, Average Loss: 5.209, avg. samples / sec: 334.05
Iteration:   4080, Loss function: 5.048, Average Loss: 5.204, avg. samples / sec: 318.78
Iteration:   4100, Loss function: 5.343, Average Loss: 5.201, avg. samples / sec: 331.10
:::MLLOG {"namespace": "", "time_ms": 1639767014333, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639767014335, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.967, Average Loss: 5.198, avg. samples / sec: 326.40
Iteration:   4140, Loss function: 5.039, Average Loss: 5.193, avg. samples / sec: 320.80
Iteration:   4160, Loss function: 4.893, Average Loss: 5.186, avg. samples / sec: 324.36
Iteration:   4180, Loss function: 5.099, Average Loss: 5.180, avg. samples / sec: 312.86
Iteration:   4200, Loss function: 4.664, Average Loss: 5.175, avg. samples / sec: 298.98
Iteration:   4220, Loss function: 4.884, Average Loss: 5.170, avg. samples / sec: 324.20
Iteration:   4240, Loss function: 4.881, Average Loss: 5.165, avg. samples / sec: 311.94
Iteration:   4260, Loss function: 4.998, Average Loss: 5.160, avg. samples / sec: 296.10
Iteration:   4280, Loss function: 4.970, Average Loss: 5.154, avg. samples / sec: 234.80
Iteration:   4300, Loss function: 4.621, Average Loss: 5.147, avg. samples / sec: 316.56
Iteration:   4320, Loss function: 4.944, Average Loss: 5.142, avg. samples / sec: 309.90
Iteration:   4340, Loss function: 4.733, Average Loss: 5.136, avg. samples / sec: 321.97
Iteration:   4360, Loss function: 4.975, Average Loss: 5.132, avg. samples / sec: 316.61
Iteration:   4380, Loss function: 5.110, Average Loss: 5.128, avg. samples / sec: 325.50
Iteration:   4400, Loss function: 4.888, Average Loss: 5.124, avg. samples / sec: 312.31
Iteration:   4420, Loss function: 4.901, Average Loss: 5.120, avg. samples / sec: 285.00
Iteration:   4440, Loss function: 4.855, Average Loss: 5.115, avg. samples / sec: 279.42
Iteration:   4460, Loss function: 5.088, Average Loss: 5.110, avg. samples / sec: 253.42
Iteration:   4480, Loss function: 4.943, Average Loss: 5.107, avg. samples / sec: 321.74
Iteration:   4500, Loss function: 4.898, Average Loss: 5.105, avg. samples / sec: 263.45
Iteration:   4520, Loss function: 4.626, Average Loss: 5.100, avg. samples / sec: 280.82
Iteration:   4540, Loss function: 5.076, Average Loss: 5.096, avg. samples / sec: 218.29
Iteration:   4560, Loss function: 4.775, Average Loss: 5.092, avg. samples / sec: 319.94
Iteration:   4580, Loss function: 4.817, Average Loss: 5.090, avg. samples / sec: 327.69
Iteration:   4600, Loss function: 4.708, Average Loss: 5.087, avg. samples / sec: 287.69
Iteration:   4620, Loss function: 4.793, Average Loss: 5.083, avg. samples / sec: 278.48
Iteration:   4640, Loss function: 4.845, Average Loss: 5.077, avg. samples / sec: 311.17
Iteration:   4660, Loss function: 4.866, Average Loss: 5.074, avg. samples / sec: 320.64
Iteration:   4680, Loss function: 5.260, Average Loss: 5.069, avg. samples / sec: 256.41
Iteration:   4700, Loss function: 4.875, Average Loss: 5.066, avg. samples / sec: 319.89
Iteration:   4720, Loss function: 4.798, Average Loss: 5.061, avg. samples / sec: 323.61
Iteration:   4740, Loss function: 4.843, Average Loss: 5.057, avg. samples / sec: 302.06
Iteration:   4760, Loss function: 4.677, Average Loss: 5.054, avg. samples / sec: 306.59
Iteration:   4780, Loss function: 5.056, Average Loss: 5.050, avg. samples / sec: 295.07
Iteration:   4800, Loss function: 5.028, Average Loss: 5.048, avg. samples / sec: 323.72
Iteration:   4820, Loss function: 4.813, Average Loss: 5.043, avg. samples / sec: 331.01
Iteration:   4840, Loss function: 5.082, Average Loss: 5.040, avg. samples / sec: 330.57
Iteration:   4860, Loss function: 4.718, Average Loss: 5.036, avg. samples / sec: 319.62
Iteration:   4880, Loss function: 5.136, Average Loss: 5.032, avg. samples / sec: 314.40
Iteration:   4900, Loss function: 4.430, Average Loss: 5.027, avg. samples / sec: 244.69
Iteration:   4920, Loss function: 4.769, Average Loss: 5.024, avg. samples / sec: 244.90
Iteration:   4940, Loss function: 4.805, Average Loss: 5.019, avg. samples / sec: 274.35
Iteration:   4960, Loss function: 4.872, Average Loss: 5.016, avg. samples / sec: 212.95
Iteration:   4980, Loss function: 4.643, Average Loss: 5.012, avg. samples / sec: 322.71
Iteration:   5000, Loss function: 4.978, Average Loss: 5.008, avg. samples / sec: 259.51
Iteration:   5020, Loss function: 5.119, Average Loss: 5.004, avg. samples / sec: 328.73
Iteration:   5040, Loss function: 4.853, Average Loss: 5.001, avg. samples / sec: 320.14
Iteration:   5060, Loss function: 4.621, Average Loss: 4.998, avg. samples / sec: 303.97
Iteration:   5080, Loss function: 4.507, Average Loss: 4.995, avg. samples / sec: 324.88
Iteration:   5100, Loss function: 4.852, Average Loss: 4.992, avg. samples / sec: 323.19
Iteration:   5120, Loss function: 4.661, Average Loss: 4.989, avg. samples / sec: 325.22
Iteration:   5140, Loss function: 4.848, Average Loss: 4.985, avg. samples / sec: 318.96
:::MLLOG {"namespace": "", "time_ms": 1639767413924, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 74.21 s
:::MLLOG {"namespace": "", "time_ms": 1639767488192, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767488233, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767488234, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10320
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20911
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09318
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18851
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19941
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21119
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21119
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10320 AP goal: 0.10000
Iteration:   5160, Loss function: 4.913, Average Loss: 4.980, avg. samples / sec: 26.64
:::MLLOG {"namespace": "", "time_ms": 1639767494406, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494406, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10320172078785268, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494407, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494838, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:16 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:16 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765261004, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765261667, "event_type": "POINT_IN_TIME", "key": "seed", "value": 679016067, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 679016067
:::MLLOG {"namespace": "", "time_ms": 1639765266805, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266805, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266810, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266811, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369845, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369846, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765375561, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765375563, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375912, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375913, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375914, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.300, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.176, Average Loss: 0.463, avg. samples / sec: 190.66
Iteration:     40, Loss function: 20.807, Average Loss: 0.865, avg. samples / sec: 253.26
Iteration:     60, Loss function: 20.226, Average Loss: 1.255, avg. samples / sec: 254.41
Iteration:     80, Loss function: 19.716, Average Loss: 1.626, avg. samples / sec: 245.17
Iteration:    100, Loss function: 14.740, Average Loss: 1.943, avg. samples / sec: 265.24
Iteration:    120, Loss function: 12.227, Average Loss: 2.147, avg. samples / sec: 261.00
Iteration:    140, Loss function: 9.872, Average Loss: 2.313, avg. samples / sec: 294.13
Iteration:    160, Loss function: 9.397, Average Loss: 2.458, avg. samples / sec: 249.19
Iteration:    180, Loss function: 9.033, Average Loss: 2.591, avg. samples / sec: 276.06
Iteration:    200, Loss function: 8.735, Average Loss: 2.718, avg. samples / sec: 296.90
Iteration:    220, Loss function: 8.531, Average Loss: 2.838, avg. samples / sec: 275.11
Iteration:    240, Loss function: 8.600, Average Loss: 2.954, avg. samples / sec: 278.66
Iteration:    260, Loss function: 8.965, Average Loss: 3.069, avg. samples / sec: 324.15
Iteration:    280, Loss function: 8.727, Average Loss: 3.182, avg. samples / sec: 328.77
Iteration:    300, Loss function: 8.588, Average Loss: 3.288, avg. samples / sec: 300.12
Iteration:    320, Loss function: 8.394, Average Loss: 3.388, avg. samples / sec: 307.96
Iteration:    340, Loss function: 8.367, Average Loss: 3.487, avg. samples / sec: 271.86
Iteration:    360, Loss function: 7.931, Average Loss: 3.580, avg. samples / sec: 312.51
Iteration:    380, Loss function: 8.050, Average Loss: 3.670, avg. samples / sec: 303.33
Iteration:    400, Loss function: 7.778, Average Loss: 3.754, avg. samples / sec: 216.36
Iteration:    420, Loss function: 7.600, Average Loss: 3.836, avg. samples / sec: 288.65
Iteration:    440, Loss function: 8.097, Average Loss: 3.914, avg. samples / sec: 332.50
Iteration:    460, Loss function: 7.649, Average Loss: 3.992, avg. samples / sec: 320.51
Iteration:    480, Loss function: 7.378, Average Loss: 4.065, avg. samples / sec: 310.60
Iteration:    500, Loss function: 7.602, Average Loss: 4.136, avg. samples / sec: 321.29
Iteration:    520, Loss function: 7.510, Average Loss: 4.203, avg. samples / sec: 280.21
Iteration:    540, Loss function: 7.415, Average Loss: 4.269, avg. samples / sec: 241.49
Iteration:    560, Loss function: 7.237, Average Loss: 4.331, avg. samples / sec: 211.35
Iteration:    580, Loss function: 7.172, Average Loss: 4.392, avg. samples / sec: 290.63
Iteration:    600, Loss function: 7.284, Average Loss: 4.452, avg. samples / sec: 297.94
Iteration:    620, Loss function: 6.992, Average Loss: 4.507, avg. samples / sec: 288.59
Iteration:    640, Loss function: 6.892, Average Loss: 4.561, avg. samples / sec: 271.47
Iteration:    660, Loss function: 7.118, Average Loss: 4.613, avg. samples / sec: 320.43
Iteration:    680, Loss function: 7.338, Average Loss: 4.665, avg. samples / sec: 324.54
Iteration:    700, Loss function: 6.914, Average Loss: 4.711, avg. samples / sec: 318.84
Iteration:    720, Loss function: 7.132, Average Loss: 4.760, avg. samples / sec: 292.01
Iteration:    740, Loss function: 6.921, Average Loss: 4.807, avg. samples / sec: 275.39
Iteration:    760, Loss function: 6.868, Average Loss: 4.850, avg. samples / sec: 296.87
Iteration:    780, Loss function: 6.816, Average Loss: 4.891, avg. samples / sec: 215.68
Iteration:    800, Loss function: 7.155, Average Loss: 4.931, avg. samples / sec: 282.58
Iteration:    820, Loss function: 6.755, Average Loss: 4.968, avg. samples / sec: 267.42
Iteration:    840, Loss function: 6.963, Average Loss: 5.005, avg. samples / sec: 312.14
Iteration:    860, Loss function: 6.845, Average Loss: 5.040, avg. samples / sec: 239.18
Iteration:    880, Loss function: 6.729, Average Loss: 5.073, avg. samples / sec: 214.97
Iteration:    900, Loss function: 6.788, Average Loss: 5.104, avg. samples / sec: 248.60
Iteration:    920, Loss function: 6.590, Average Loss: 5.133, avg. samples / sec: 257.20
Iteration:    940, Loss function: 6.696, Average Loss: 5.162, avg. samples / sec: 329.00
Iteration:    960, Loss function: 6.614, Average Loss: 5.191, avg. samples / sec: 280.00
Iteration:    980, Loss function: 6.505, Average Loss: 5.218, avg. samples / sec: 303.19
Iteration:   1000, Loss function: 6.388, Average Loss: 5.242, avg. samples / sec: 276.99
Iteration:   1020, Loss function: 6.355, Average Loss: 5.266, avg. samples / sec: 315.08
:::MLLOG {"namespace": "", "time_ms": 1639765800540, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765800551, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.508, Average Loss: 5.290, avg. samples / sec: 332.45
Iteration:   1060, Loss function: 6.466, Average Loss: 5.313, avg. samples / sec: 318.51
Iteration:   1080, Loss function: 6.420, Average Loss: 5.335, avg. samples / sec: 235.29
Iteration:   1100, Loss function: 6.318, Average Loss: 5.355, avg. samples / sec: 302.57
Iteration:   1120, Loss function: 6.150, Average Loss: 5.375, avg. samples / sec: 324.94
Iteration:   1140, Loss function: 6.463, Average Loss: 5.393, avg. samples / sec: 292.35
Iteration:   1160, Loss function: 6.191, Average Loss: 5.410, avg. samples / sec: 294.83
Iteration:   1180, Loss function: 6.193, Average Loss: 5.427, avg. samples / sec: 292.77
Iteration:   1200, Loss function: 6.212, Average Loss: 5.443, avg. samples / sec: 280.38
Iteration:   1220, Loss function: 6.254, Average Loss: 5.459, avg. samples / sec: 328.63
Iteration:   1240, Loss function: 6.059, Average Loss: 5.473, avg. samples / sec: 328.17
Iteration:   1260, Loss function: 5.901, Average Loss: 5.484, avg. samples / sec: 337.48
Iteration:   1280, Loss function: 5.932, Average Loss: 5.496, avg. samples / sec: 308.33
Iteration:   1300, Loss function: 6.061, Average Loss: 5.509, avg. samples / sec: 323.37
Iteration:   1320, Loss function: 6.081, Average Loss: 5.520, avg. samples / sec: 300.44
Iteration:   1340, Loss function: 5.976, Average Loss: 5.529, avg. samples / sec: 295.71
Iteration:   1360, Loss function: 6.031, Average Loss: 5.540, avg. samples / sec: 321.89
Iteration:   1380, Loss function: 6.123, Average Loss: 5.550, avg. samples / sec: 326.52
Iteration:   1400, Loss function: 6.245, Average Loss: 5.558, avg. samples / sec: 253.74
Iteration:   1420, Loss function: 5.985, Average Loss: 5.566, avg. samples / sec: 304.96
Iteration:   1440, Loss function: 6.376, Average Loss: 5.574, avg. samples / sec: 222.84
Iteration:   1460, Loss function: 6.187, Average Loss: 5.583, avg. samples / sec: 175.95
Iteration:   1480, Loss function: 5.782, Average Loss: 5.590, avg. samples / sec: 246.97
Iteration:   1500, Loss function: 5.998, Average Loss: 5.598, avg. samples / sec: 215.00
Iteration:   1520, Loss function: 6.019, Average Loss: 5.603, avg. samples / sec: 224.13
Iteration:   1540, Loss function: 6.146, Average Loss: 5.608, avg. samples / sec: 269.32
Iteration:   1560, Loss function: 5.849, Average Loss: 5.614, avg. samples / sec: 319.88
Iteration:   1580, Loss function: 5.711, Average Loss: 5.619, avg. samples / sec: 313.62
Iteration:   1600, Loss function: 5.984, Average Loss: 5.623, avg. samples / sec: 302.59
Iteration:   1620, Loss function: 6.080, Average Loss: 5.629, avg. samples / sec: 254.90
Iteration:   1640, Loss function: 6.090, Average Loss: 5.633, avg. samples / sec: 297.92
Iteration:   1660, Loss function: 6.194, Average Loss: 5.638, avg. samples / sec: 212.51
Iteration:   1680, Loss function: 5.698, Average Loss: 5.641, avg. samples / sec: 316.50
Iteration:   1700, Loss function: 5.445, Average Loss: 5.644, avg. samples / sec: 270.13
Iteration:   1720, Loss function: 5.684, Average Loss: 5.646, avg. samples / sec: 235.35
Iteration:   1740, Loss function: 5.975, Average Loss: 5.649, avg. samples / sec: 223.14
Iteration:   1760, Loss function: 5.589, Average Loss: 5.651, avg. samples / sec: 220.35
Iteration:   1780, Loss function: 5.592, Average Loss: 5.651, avg. samples / sec: 298.03
Iteration:   1800, Loss function: 5.543, Average Loss: 5.653, avg. samples / sec: 313.21
Iteration:   1820, Loss function: 5.940, Average Loss: 5.655, avg. samples / sec: 293.39
Iteration:   1840, Loss function: 6.016, Average Loss: 5.657, avg. samples / sec: 230.83
Iteration:   1860, Loss function: 5.613, Average Loss: 5.656, avg. samples / sec: 279.81
Iteration:   1880, Loss function: 5.807, Average Loss: 5.658, avg. samples / sec: 332.22
Iteration:   1900, Loss function: 5.801, Average Loss: 5.660, avg. samples / sec: 308.26
Iteration:   1920, Loss function: 5.645, Average Loss: 5.660, avg. samples / sec: 330.79
Iteration:   1940, Loss function: 5.884, Average Loss: 5.659, avg. samples / sec: 320.90
Iteration:   1960, Loss function: 5.605, Average Loss: 5.658, avg. samples / sec: 272.83
Iteration:   1980, Loss function: 5.755, Average Loss: 5.657, avg. samples / sec: 305.02
Iteration:   2000, Loss function: 5.624, Average Loss: 5.656, avg. samples / sec: 315.65
Iteration:   2020, Loss function: 5.585, Average Loss: 5.654, avg. samples / sec: 223.87
Iteration:   2040, Loss function: 5.578, Average Loss: 5.652, avg. samples / sec: 331.88
:::MLLOG {"namespace": "", "time_ms": 1639766220381, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766220383, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.549, Average Loss: 5.651, avg. samples / sec: 325.51
Iteration:   2080, Loss function: 5.131, Average Loss: 5.647, avg. samples / sec: 301.40
Iteration:   2100, Loss function: 5.505, Average Loss: 5.645, avg. samples / sec: 297.36
Iteration:   2120, Loss function: 5.462, Average Loss: 5.642, avg. samples / sec: 293.08
Iteration:   2140, Loss function: 5.621, Average Loss: 5.639, avg. samples / sec: 311.51
Iteration:   2160, Loss function: 5.480, Average Loss: 5.637, avg. samples / sec: 309.14
Iteration:   2180, Loss function: 5.414, Average Loss: 5.634, avg. samples / sec: 326.52
Iteration:   2200, Loss function: 5.477, Average Loss: 5.631, avg. samples / sec: 318.64
Iteration:   2220, Loss function: 5.573, Average Loss: 5.628, avg. samples / sec: 324.14
Iteration:   2240, Loss function: 5.456, Average Loss: 5.624, avg. samples / sec: 315.01
Iteration:   2260, Loss function: 5.313, Average Loss: 5.621, avg. samples / sec: 328.60
Iteration:   2280, Loss function: 5.107, Average Loss: 5.617, avg. samples / sec: 340.05
Iteration:   2300, Loss function: 5.176, Average Loss: 5.615, avg. samples / sec: 308.13
Iteration:   2320, Loss function: 5.514, Average Loss: 5.613, avg. samples / sec: 296.63
Iteration:   2340, Loss function: 5.538, Average Loss: 5.610, avg. samples / sec: 267.52
Iteration:   2360, Loss function: 5.436, Average Loss: 5.605, avg. samples / sec: 330.21
Iteration:   2380, Loss function: 5.412, Average Loss: 5.601, avg. samples / sec: 290.11
Iteration:   2400, Loss function: 5.535, Average Loss: 5.597, avg. samples / sec: 263.74
Iteration:   2420, Loss function: 5.363, Average Loss: 5.592, avg. samples / sec: 323.89
Iteration:   2440, Loss function: 5.605, Average Loss: 5.590, avg. samples / sec: 327.16
Iteration:   2460, Loss function: 5.172, Average Loss: 5.587, avg. samples / sec: 312.19
Iteration:   2480, Loss function: 5.443, Average Loss: 5.583, avg. samples / sec: 276.03
Iteration:   2500, Loss function: 5.485, Average Loss: 5.580, avg. samples / sec: 230.53
Iteration:   2520, Loss function: 5.366, Average Loss: 5.575, avg. samples / sec: 250.85
Iteration:   2540, Loss function: 5.366, Average Loss: 5.572, avg. samples / sec: 305.91
Iteration:   2560, Loss function: 5.327, Average Loss: 5.569, avg. samples / sec: 232.63
Iteration:   2580, Loss function: 5.209, Average Loss: 5.565, avg. samples / sec: 332.72
Iteration:   2600, Loss function: 5.404, Average Loss: 5.562, avg. samples / sec: 252.90
Iteration:   2620, Loss function: 5.610, Average Loss: 5.556, avg. samples / sec: 314.05
Iteration:   2640, Loss function: 5.221, Average Loss: 5.554, avg. samples / sec: 314.37
Iteration:   2660, Loss function: 5.149, Average Loss: 5.550, avg. samples / sec: 306.73
Iteration:   2680, Loss function: 5.244, Average Loss: 5.545, avg. samples / sec: 280.22
Iteration:   2700, Loss function: 5.292, Average Loss: 5.540, avg. samples / sec: 236.02
Iteration:   2720, Loss function: 5.290, Average Loss: 5.535, avg. samples / sec: 315.11
Iteration:   2740, Loss function: 5.017, Average Loss: 5.531, avg. samples / sec: 318.86
Iteration:   2760, Loss function: 4.868, Average Loss: 5.525, avg. samples / sec: 283.38
Iteration:   2780, Loss function: 5.640, Average Loss: 5.522, avg. samples / sec: 322.66
Iteration:   2800, Loss function: 5.362, Average Loss: 5.517, avg. samples / sec: 316.77
Iteration:   2820, Loss function: 5.458, Average Loss: 5.513, avg. samples / sec: 313.91
Iteration:   2840, Loss function: 5.241, Average Loss: 5.509, avg. samples / sec: 316.28
Iteration:   2860, Loss function: 5.128, Average Loss: 5.503, avg. samples / sec: 326.48
Iteration:   2880, Loss function: 5.336, Average Loss: 5.499, avg. samples / sec: 326.73
Iteration:   2900, Loss function: 5.192, Average Loss: 5.495, avg. samples / sec: 304.93
Iteration:   2920, Loss function: 5.200, Average Loss: 5.490, avg. samples / sec: 230.36
Iteration:   2940, Loss function: 5.009, Average Loss: 5.486, avg. samples / sec: 235.11
Iteration:   2960, Loss function: 5.545, Average Loss: 5.482, avg. samples / sec: 261.80
Iteration:   2980, Loss function: 5.078, Average Loss: 5.478, avg. samples / sec: 315.47
Iteration:   3000, Loss function: 5.365, Average Loss: 5.473, avg. samples / sec: 335.27
Iteration:   3020, Loss function: 5.191, Average Loss: 5.466, avg. samples / sec: 331.86
Iteration:   3040, Loss function: 5.092, Average Loss: 5.461, avg. samples / sec: 310.10
Iteration:   3060, Loss function: 5.127, Average Loss: 5.455, avg. samples / sec: 321.44
Iteration:   3080, Loss function: 4.895, Average Loss: 5.450, avg. samples / sec: 326.45
:::MLLOG {"namespace": "", "time_ms": 1639766614793, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766614795, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.078, Average Loss: 5.445, avg. samples / sec: 307.00
Iteration:   3120, Loss function: 4.961, Average Loss: 5.439, avg. samples / sec: 301.48
Iteration:   3140, Loss function: 5.079, Average Loss: 5.433, avg. samples / sec: 285.62
Iteration:   3160, Loss function: 5.595, Average Loss: 5.427, avg. samples / sec: 271.85
Iteration:   3180, Loss function: 5.086, Average Loss: 5.422, avg. samples / sec: 326.47
Iteration:   3200, Loss function: 5.168, Average Loss: 5.416, avg. samples / sec: 323.15
Iteration:   3220, Loss function: 5.074, Average Loss: 5.410, avg. samples / sec: 304.82
Iteration:   3240, Loss function: 5.116, Average Loss: 5.404, avg. samples / sec: 318.90
Iteration:   3260, Loss function: 4.995, Average Loss: 5.398, avg. samples / sec: 335.48
Iteration:   3280, Loss function: 4.958, Average Loss: 5.392, avg. samples / sec: 316.06
Iteration:   3300, Loss function: 4.786, Average Loss: 5.387, avg. samples / sec: 335.28
Iteration:   3320, Loss function: 4.972, Average Loss: 5.382, avg. samples / sec: 315.02
Iteration:   3340, Loss function: 5.001, Average Loss: 5.378, avg. samples / sec: 330.40
Iteration:   3360, Loss function: 5.219, Average Loss: 5.373, avg. samples / sec: 320.26
Iteration:   3380, Loss function: 5.217, Average Loss: 5.366, avg. samples / sec: 302.32
Iteration:   3400, Loss function: 4.842, Average Loss: 5.361, avg. samples / sec: 276.60
Iteration:   3420, Loss function: 5.238, Average Loss: 5.356, avg. samples / sec: 265.54
Iteration:   3440, Loss function: 5.074, Average Loss: 5.351, avg. samples / sec: 311.90
Iteration:   3460, Loss function: 5.173, Average Loss: 5.345, avg. samples / sec: 280.43
Iteration:   3480, Loss function: 5.009, Average Loss: 5.340, avg. samples / sec: 274.34
Iteration:   3500, Loss function: 5.123, Average Loss: 5.336, avg. samples / sec: 297.28
Iteration:   3520, Loss function: 5.052, Average Loss: 5.332, avg. samples / sec: 314.03
Iteration:   3540, Loss function: 4.994, Average Loss: 5.327, avg. samples / sec: 195.03
Iteration:   3560, Loss function: 5.031, Average Loss: 5.324, avg. samples / sec: 259.62
Iteration:   3580, Loss function: 4.999, Average Loss: 5.320, avg. samples / sec: 240.52
Iteration:   3600, Loss function: 5.157, Average Loss: 5.315, avg. samples / sec: 316.75
Iteration:   3620, Loss function: 4.777, Average Loss: 5.310, avg. samples / sec: 286.99
Iteration:   3640, Loss function: 4.917, Average Loss: 5.306, avg. samples / sec: 283.12
Iteration:   3660, Loss function: 5.235, Average Loss: 5.301, avg. samples / sec: 276.76
Iteration:   3680, Loss function: 5.158, Average Loss: 5.295, avg. samples / sec: 274.61
Iteration:   3700, Loss function: 5.025, Average Loss: 5.290, avg. samples / sec: 273.05
Iteration:   3720, Loss function: 4.784, Average Loss: 5.285, avg. samples / sec: 280.83
Iteration:   3740, Loss function: 5.128, Average Loss: 5.281, avg. samples / sec: 332.31
Iteration:   3760, Loss function: 4.963, Average Loss: 5.277, avg. samples / sec: 317.99
Iteration:   3780, Loss function: 5.109, Average Loss: 5.272, avg. samples / sec: 304.21
Iteration:   3800, Loss function: 5.094, Average Loss: 5.269, avg. samples / sec: 165.76
Iteration:   3820, Loss function: 5.331, Average Loss: 5.265, avg. samples / sec: 263.36
Iteration:   3840, Loss function: 4.729, Average Loss: 5.260, avg. samples / sec: 310.01
Iteration:   3860, Loss function: 4.810, Average Loss: 5.256, avg. samples / sec: 310.30
Iteration:   3880, Loss function: 5.306, Average Loss: 5.250, avg. samples / sec: 329.34
Iteration:   3900, Loss function: 5.249, Average Loss: 5.246, avg. samples / sec: 291.24
Iteration:   3920, Loss function: 5.042, Average Loss: 5.241, avg. samples / sec: 285.65
Iteration:   3940, Loss function: 5.044, Average Loss: 5.235, avg. samples / sec: 313.34
Iteration:   3960, Loss function: 4.840, Average Loss: 5.231, avg. samples / sec: 300.92
Iteration:   3980, Loss function: 4.898, Average Loss: 5.226, avg. samples / sec: 330.34
Iteration:   4000, Loss function: 4.933, Average Loss: 5.222, avg. samples / sec: 327.83
Iteration:   4020, Loss function: 4.874, Average Loss: 5.216, avg. samples / sec: 317.79
Iteration:   4040, Loss function: 5.168, Average Loss: 5.213, avg. samples / sec: 328.40
Iteration:   4060, Loss function: 5.377, Average Loss: 5.209, avg. samples / sec: 334.05
Iteration:   4080, Loss function: 5.048, Average Loss: 5.204, avg. samples / sec: 318.78
Iteration:   4100, Loss function: 5.343, Average Loss: 5.201, avg. samples / sec: 331.10
:::MLLOG {"namespace": "", "time_ms": 1639767014333, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639767014335, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.967, Average Loss: 5.198, avg. samples / sec: 326.40
Iteration:   4140, Loss function: 5.039, Average Loss: 5.193, avg. samples / sec: 320.80
Iteration:   4160, Loss function: 4.893, Average Loss: 5.186, avg. samples / sec: 324.36
Iteration:   4180, Loss function: 5.099, Average Loss: 5.180, avg. samples / sec: 312.86
Iteration:   4200, Loss function: 4.664, Average Loss: 5.175, avg. samples / sec: 298.98
Iteration:   4220, Loss function: 4.884, Average Loss: 5.170, avg. samples / sec: 324.20
Iteration:   4240, Loss function: 4.881, Average Loss: 5.165, avg. samples / sec: 311.94
Iteration:   4260, Loss function: 4.998, Average Loss: 5.160, avg. samples / sec: 296.10
Iteration:   4280, Loss function: 4.970, Average Loss: 5.154, avg. samples / sec: 234.80
Iteration:   4300, Loss function: 4.621, Average Loss: 5.147, avg. samples / sec: 316.56
Iteration:   4320, Loss function: 4.944, Average Loss: 5.142, avg. samples / sec: 309.90
Iteration:   4340, Loss function: 4.733, Average Loss: 5.136, avg. samples / sec: 321.97
Iteration:   4360, Loss function: 4.975, Average Loss: 5.132, avg. samples / sec: 316.61
Iteration:   4380, Loss function: 5.110, Average Loss: 5.128, avg. samples / sec: 325.50
Iteration:   4400, Loss function: 4.888, Average Loss: 5.124, avg. samples / sec: 312.31
Iteration:   4420, Loss function: 4.901, Average Loss: 5.120, avg. samples / sec: 285.00
Iteration:   4440, Loss function: 4.855, Average Loss: 5.115, avg. samples / sec: 279.42
Iteration:   4460, Loss function: 5.088, Average Loss: 5.110, avg. samples / sec: 253.42
Iteration:   4480, Loss function: 4.943, Average Loss: 5.107, avg. samples / sec: 321.74
Iteration:   4500, Loss function: 4.898, Average Loss: 5.105, avg. samples / sec: 263.45
Iteration:   4520, Loss function: 4.626, Average Loss: 5.100, avg. samples / sec: 280.82
Iteration:   4540, Loss function: 5.076, Average Loss: 5.096, avg. samples / sec: 218.29
Iteration:   4560, Loss function: 4.775, Average Loss: 5.092, avg. samples / sec: 319.94
Iteration:   4580, Loss function: 4.817, Average Loss: 5.090, avg. samples / sec: 327.69
Iteration:   4600, Loss function: 4.708, Average Loss: 5.087, avg. samples / sec: 287.69
Iteration:   4620, Loss function: 4.793, Average Loss: 5.083, avg. samples / sec: 278.48
Iteration:   4640, Loss function: 4.845, Average Loss: 5.077, avg. samples / sec: 311.17
Iteration:   4660, Loss function: 4.866, Average Loss: 5.074, avg. samples / sec: 320.64
Iteration:   4680, Loss function: 5.260, Average Loss: 5.069, avg. samples / sec: 256.41
Iteration:   4700, Loss function: 4.875, Average Loss: 5.066, avg. samples / sec: 319.89
Iteration:   4720, Loss function: 4.798, Average Loss: 5.061, avg. samples / sec: 323.61
Iteration:   4740, Loss function: 4.843, Average Loss: 5.057, avg. samples / sec: 302.06
Iteration:   4760, Loss function: 4.677, Average Loss: 5.054, avg. samples / sec: 306.59
Iteration:   4780, Loss function: 5.056, Average Loss: 5.050, avg. samples / sec: 295.07
Iteration:   4800, Loss function: 5.028, Average Loss: 5.048, avg. samples / sec: 323.72
Iteration:   4820, Loss function: 4.813, Average Loss: 5.043, avg. samples / sec: 331.01
Iteration:   4840, Loss function: 5.082, Average Loss: 5.040, avg. samples / sec: 330.57
Iteration:   4860, Loss function: 4.718, Average Loss: 5.036, avg. samples / sec: 319.62
Iteration:   4880, Loss function: 5.136, Average Loss: 5.032, avg. samples / sec: 314.40
Iteration:   4900, Loss function: 4.430, Average Loss: 5.027, avg. samples / sec: 244.69
Iteration:   4920, Loss function: 4.769, Average Loss: 5.024, avg. samples / sec: 244.90
Iteration:   4940, Loss function: 4.805, Average Loss: 5.019, avg. samples / sec: 274.35
Iteration:   4960, Loss function: 4.872, Average Loss: 5.016, avg. samples / sec: 212.95
Iteration:   4980, Loss function: 4.643, Average Loss: 5.012, avg. samples / sec: 322.71
Iteration:   5000, Loss function: 4.978, Average Loss: 5.008, avg. samples / sec: 259.51
Iteration:   5020, Loss function: 5.119, Average Loss: 5.004, avg. samples / sec: 328.73
Iteration:   5040, Loss function: 4.853, Average Loss: 5.001, avg. samples / sec: 320.14
Iteration:   5060, Loss function: 4.621, Average Loss: 4.998, avg. samples / sec: 303.97
Iteration:   5080, Loss function: 4.507, Average Loss: 4.995, avg. samples / sec: 324.88
Iteration:   5100, Loss function: 4.852, Average Loss: 4.992, avg. samples / sec: 323.19
Iteration:   5120, Loss function: 4.661, Average Loss: 4.989, avg. samples / sec: 325.22
Iteration:   5140, Loss function: 4.848, Average Loss: 4.985, avg. samples / sec: 318.96
:::MLLOG {"namespace": "", "time_ms": 1639767413924, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 74.21 s
:::MLLOG {"namespace": "", "time_ms": 1639767488192, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767488233, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767488234, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.21s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10320
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.20911
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09318
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18851
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13475
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19941
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21119
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21119
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10320 AP goal: 0.10000
Iteration:   5160, Loss function: 4.913, Average Loss: 4.980, avg. samples / sec: 26.64
:::MLLOG {"namespace": "", "time_ms": 1639767494406, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494406, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10320172078785268, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494407, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767494838, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767496
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:16 PM'
START TIMING RUN WAS 2021-12-17 06:20:47 PM
ENDING TIMING RUN AT 2021-12-17 06:58:16 PM
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:47 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:16 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-496ca377-45b5-53f0-96f5-35d0f05e0494)
+ result=2249
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2249,nvidia,2021-12-17 06:20:47 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2249,nvidia,2021-12-17 06:20:47 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
