8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db'
Found 1 MIG instances: MIG-66ee90df-859a-5875-a31d-129ef2ae71db
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765252
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:52 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:52 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:52 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:52 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-pvnvk to the sync file ...
run-mlperf--1-pvnvk Found 19 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
    16	run-mlperf--1-pgt2r
    17	run-mlperf--1-rrqzl
    18	run-mlperf--1-sbgrm
    19	run-mlperf--1-pvnvk
Fri Dec 17 18:20:57 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259787, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260245, "event_type": "POINT_IN_TIME", "key": "seed", "value": 92985946, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 92985946
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765265431, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765265432, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765265439, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765368543, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765368543, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765373815, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765373816, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765374238, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765374239, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765374240, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.166, Average Loss: 0.022, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.021, Average Loss: 0.449, avg. samples / sec: 209.43
Iteration:     40, Loss function: 20.850, Average Loss: 0.851, avg. samples / sec: 243.30
Iteration:     60, Loss function: 20.369, Average Loss: 1.240, avg. samples / sec: 264.59
Iteration:     80, Loss function: 20.278, Average Loss: 1.616, avg. samples / sec: 255.48
Iteration:    100, Loss function: 17.071, Average Loss: 1.959, avg. samples / sec: 250.41
Iteration:    120, Loss function: 11.955, Average Loss: 2.187, avg. samples / sec: 279.59
Iteration:    140, Loss function: 9.975, Average Loss: 2.358, avg. samples / sec: 287.38
Iteration:    160, Loss function: 9.386, Average Loss: 2.500, avg. samples / sec: 285.04
Iteration:    180, Loss function: 9.036, Average Loss: 2.632, avg. samples / sec: 264.44
Iteration:    200, Loss function: 8.748, Average Loss: 2.757, avg. samples / sec: 290.07
Iteration:    220, Loss function: 8.415, Average Loss: 2.877, avg. samples / sec: 240.78
Iteration:    240, Loss function: 8.606, Average Loss: 2.993, avg. samples / sec: 289.84
Iteration:    260, Loss function: 8.729, Average Loss: 3.106, avg. samples / sec: 290.56
Iteration:    280, Loss function: 8.552, Average Loss: 3.216, avg. samples / sec: 247.64
Iteration:    300, Loss function: 8.313, Average Loss: 3.319, avg. samples / sec: 279.99
Iteration:    320, Loss function: 8.396, Average Loss: 3.419, avg. samples / sec: 302.48
Iteration:    340, Loss function: 8.387, Average Loss: 3.516, avg. samples / sec: 305.35
Iteration:    360, Loss function: 8.125, Average Loss: 3.610, avg. samples / sec: 271.80
Iteration:    380, Loss function: 7.838, Average Loss: 3.698, avg. samples / sec: 296.72
Iteration:    400, Loss function: 7.946, Average Loss: 3.781, avg. samples / sec: 315.85
Iteration:    420, Loss function: 7.845, Average Loss: 3.863, avg. samples / sec: 310.92
Iteration:    440, Loss function: 8.032, Average Loss: 3.944, avg. samples / sec: 276.31
Iteration:    460, Loss function: 7.904, Average Loss: 4.020, avg. samples / sec: 323.86
Iteration:    480, Loss function: 7.568, Average Loss: 4.093, avg. samples / sec: 312.97
Iteration:    500, Loss function: 7.486, Average Loss: 4.164, avg. samples / sec: 284.26
Iteration:    520, Loss function: 7.524, Average Loss: 4.230, avg. samples / sec: 291.28
Iteration:    540, Loss function: 7.397, Average Loss: 4.294, avg. samples / sec: 277.06
Iteration:    560, Loss function: 7.298, Average Loss: 4.356, avg. samples / sec: 265.10
Iteration:    580, Loss function: 7.177, Average Loss: 4.415, avg. samples / sec: 304.80
Iteration:    600, Loss function: 7.294, Average Loss: 4.474, avg. samples / sec: 306.79
Iteration:    620, Loss function: 7.039, Average Loss: 4.529, avg. samples / sec: 266.28
Iteration:    640, Loss function: 6.865, Average Loss: 4.582, avg. samples / sec: 317.97
Iteration:    660, Loss function: 7.213, Average Loss: 4.633, avg. samples / sec: 249.50
Iteration:    680, Loss function: 7.304, Average Loss: 4.685, avg. samples / sec: 162.42
Iteration:    700, Loss function: 6.723, Average Loss: 4.733, avg. samples / sec: 286.54
Iteration:    720, Loss function: 6.958, Average Loss: 4.781, avg. samples / sec: 275.26
Iteration:    740, Loss function: 6.860, Average Loss: 4.825, avg. samples / sec: 192.95
Iteration:    760, Loss function: 7.085, Average Loss: 4.869, avg. samples / sec: 257.59
Iteration:    780, Loss function: 6.705, Average Loss: 4.910, avg. samples / sec: 296.64
Iteration:    800, Loss function: 7.046, Average Loss: 4.949, avg. samples / sec: 223.19
Iteration:    820, Loss function: 6.810, Average Loss: 4.985, avg. samples / sec: 319.31
Iteration:    840, Loss function: 6.756, Average Loss: 5.021, avg. samples / sec: 302.47
Iteration:    860, Loss function: 6.769, Average Loss: 5.055, avg. samples / sec: 333.79
Iteration:    880, Loss function: 6.700, Average Loss: 5.087, avg. samples / sec: 322.88
Iteration:    900, Loss function: 6.976, Average Loss: 5.118, avg. samples / sec: 300.48
Iteration:    920, Loss function: 6.750, Average Loss: 5.147, avg. samples / sec: 264.10
Iteration:    940, Loss function: 6.696, Average Loss: 5.175, avg. samples / sec: 287.00
Iteration:    960, Loss function: 6.388, Average Loss: 5.203, avg. samples / sec: 321.80
Iteration:    980, Loss function: 6.504, Average Loss: 5.230, avg. samples / sec: 264.16
Iteration:   1000, Loss function: 6.457, Average Loss: 5.255, avg. samples / sec: 266.56
Iteration:   1020, Loss function: 6.442, Average Loss: 5.279, avg. samples / sec: 272.20
:::MLLOG {"namespace": "", "time_ms": 1639765804674, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765804687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.448, Average Loss: 5.302, avg. samples / sec: 269.49
Iteration:   1060, Loss function: 6.261, Average Loss: 5.325, avg. samples / sec: 315.50
Iteration:   1080, Loss function: 6.201, Average Loss: 5.346, avg. samples / sec: 319.64
Iteration:   1100, Loss function: 6.202, Average Loss: 5.365, avg. samples / sec: 309.25
Iteration:   1120, Loss function: 6.228, Average Loss: 5.384, avg. samples / sec: 337.61
Iteration:   1140, Loss function: 6.467, Average Loss: 5.402, avg. samples / sec: 335.64
Iteration:   1160, Loss function: 6.101, Average Loss: 5.420, avg. samples / sec: 333.51
Iteration:   1180, Loss function: 6.272, Average Loss: 5.435, avg. samples / sec: 235.38
Iteration:   1200, Loss function: 6.207, Average Loss: 5.450, avg. samples / sec: 316.50
Iteration:   1220, Loss function: 6.274, Average Loss: 5.464, avg. samples / sec: 188.44
Iteration:   1240, Loss function: 6.067, Average Loss: 5.476, avg. samples / sec: 254.96
Iteration:   1260, Loss function: 5.935, Average Loss: 5.489, avg. samples / sec: 274.29
Iteration:   1280, Loss function: 6.048, Average Loss: 5.500, avg. samples / sec: 284.54
Iteration:   1300, Loss function: 6.210, Average Loss: 5.513, avg. samples / sec: 271.27
Iteration:   1320, Loss function: 6.060, Average Loss: 5.525, avg. samples / sec: 317.23
Iteration:   1340, Loss function: 5.830, Average Loss: 5.534, avg. samples / sec: 239.78
Iteration:   1360, Loss function: 6.221, Average Loss: 5.545, avg. samples / sec: 278.23
Iteration:   1380, Loss function: 6.185, Average Loss: 5.555, avg. samples / sec: 230.46
Iteration:   1400, Loss function: 6.062, Average Loss: 5.564, avg. samples / sec: 295.31
Iteration:   1420, Loss function: 5.974, Average Loss: 5.572, avg. samples / sec: 332.94
Iteration:   1440, Loss function: 6.414, Average Loss: 5.579, avg. samples / sec: 327.90
Iteration:   1460, Loss function: 6.076, Average Loss: 5.587, avg. samples / sec: 327.31
Iteration:   1480, Loss function: 5.953, Average Loss: 5.594, avg. samples / sec: 328.40
Iteration:   1500, Loss function: 6.048, Average Loss: 5.602, avg. samples / sec: 333.48
Iteration:   1520, Loss function: 6.021, Average Loss: 5.608, avg. samples / sec: 332.23
Iteration:   1540, Loss function: 6.065, Average Loss: 5.612, avg. samples / sec: 331.69
Iteration:   1560, Loss function: 5.824, Average Loss: 5.617, avg. samples / sec: 305.64
Iteration:   1580, Loss function: 5.555, Average Loss: 5.621, avg. samples / sec: 277.27
Iteration:   1600, Loss function: 6.185, Average Loss: 5.627, avg. samples / sec: 283.57
Iteration:   1620, Loss function: 5.703, Average Loss: 5.630, avg. samples / sec: 313.64
Iteration:   1640, Loss function: 5.883, Average Loss: 5.633, avg. samples / sec: 314.33
Iteration:   1660, Loss function: 5.921, Average Loss: 5.638, avg. samples / sec: 326.69
Iteration:   1680, Loss function: 5.747, Average Loss: 5.641, avg. samples / sec: 341.41
Iteration:   1700, Loss function: 5.464, Average Loss: 5.645, avg. samples / sec: 322.85
Iteration:   1720, Loss function: 5.854, Average Loss: 5.647, avg. samples / sec: 334.60
Iteration:   1740, Loss function: 6.051, Average Loss: 5.650, avg. samples / sec: 316.44
Iteration:   1760, Loss function: 5.510, Average Loss: 5.651, avg. samples / sec: 327.50
Iteration:   1780, Loss function: 5.725, Average Loss: 5.652, avg. samples / sec: 326.27
Iteration:   1800, Loss function: 5.562, Average Loss: 5.654, avg. samples / sec: 325.79
Iteration:   1820, Loss function: 6.005, Average Loss: 5.656, avg. samples / sec: 300.14
Iteration:   1840, Loss function: 5.923, Average Loss: 5.657, avg. samples / sec: 297.91
Iteration:   1860, Loss function: 5.646, Average Loss: 5.656, avg. samples / sec: 307.36
Iteration:   1880, Loss function: 5.926, Average Loss: 5.658, avg. samples / sec: 323.94
Iteration:   1900, Loss function: 5.725, Average Loss: 5.658, avg. samples / sec: 341.03
Iteration:   1920, Loss function: 5.723, Average Loss: 5.657, avg. samples / sec: 324.69
Iteration:   1940, Loss function: 5.804, Average Loss: 5.657, avg. samples / sec: 328.99
Iteration:   1960, Loss function: 5.515, Average Loss: 5.656, avg. samples / sec: 334.56
Iteration:   1980, Loss function: 5.803, Average Loss: 5.655, avg. samples / sec: 327.78
Iteration:   2000, Loss function: 5.620, Average Loss: 5.655, avg. samples / sec: 331.94
Iteration:   2020, Loss function: 5.625, Average Loss: 5.653, avg. samples / sec: 337.74
Iteration:   2040, Loss function: 5.637, Average Loss: 5.653, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639766190233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766190246, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.591, Average Loss: 5.651, avg. samples / sec: 302.10
Iteration:   2080, Loss function: 5.159, Average Loss: 5.648, avg. samples / sec: 298.14
Iteration:   2100, Loss function: 5.566, Average Loss: 5.646, avg. samples / sec: 230.48
Iteration:   2120, Loss function: 5.483, Average Loss: 5.643, avg. samples / sec: 330.57
Iteration:   2140, Loss function: 5.387, Average Loss: 5.640, avg. samples / sec: 335.82
Iteration:   2160, Loss function: 5.464, Average Loss: 5.637, avg. samples / sec: 247.84
Iteration:   2180, Loss function: 5.240, Average Loss: 5.635, avg. samples / sec: 272.23
Iteration:   2200, Loss function: 5.494, Average Loss: 5.631, avg. samples / sec: 311.38
Iteration:   2220, Loss function: 5.644, Average Loss: 5.628, avg. samples / sec: 344.60
Iteration:   2240, Loss function: 5.557, Average Loss: 5.624, avg. samples / sec: 214.45
Iteration:   2260, Loss function: 5.279, Average Loss: 5.621, avg. samples / sec: 217.98
Iteration:   2280, Loss function: 5.175, Average Loss: 5.618, avg. samples / sec: 248.50
Iteration:   2300, Loss function: 5.186, Average Loss: 5.615, avg. samples / sec: 278.71
Iteration:   2320, Loss function: 5.084, Average Loss: 5.612, avg. samples / sec: 240.99
Iteration:   2340, Loss function: 5.621, Average Loss: 5.608, avg. samples / sec: 311.39
Iteration:   2360, Loss function: 5.238, Average Loss: 5.605, avg. samples / sec: 307.20
Iteration:   2380, Loss function: 5.347, Average Loss: 5.602, avg. samples / sec: 274.64
Iteration:   2400, Loss function: 5.471, Average Loss: 5.597, avg. samples / sec: 323.27
Iteration:   2420, Loss function: 5.481, Average Loss: 5.593, avg. samples / sec: 278.10
Iteration:   2440, Loss function: 5.154, Average Loss: 5.589, avg. samples / sec: 267.72
Iteration:   2460, Loss function: 5.087, Average Loss: 5.586, avg. samples / sec: 167.88
Iteration:   2480, Loss function: 5.238, Average Loss: 5.582, avg. samples / sec: 319.78
Iteration:   2500, Loss function: 5.409, Average Loss: 5.578, avg. samples / sec: 299.14
Iteration:   2520, Loss function: 5.300, Average Loss: 5.573, avg. samples / sec: 311.64
Iteration:   2540, Loss function: 5.512, Average Loss: 5.569, avg. samples / sec: 253.34
Iteration:   2560, Loss function: 5.305, Average Loss: 5.565, avg. samples / sec: 303.59
Iteration:   2580, Loss function: 5.225, Average Loss: 5.562, avg. samples / sec: 282.31
Iteration:   2600, Loss function: 5.442, Average Loss: 5.558, avg. samples / sec: 278.15
Iteration:   2620, Loss function: 5.329, Average Loss: 5.553, avg. samples / sec: 275.57
Iteration:   2640, Loss function: 5.175, Average Loss: 5.550, avg. samples / sec: 327.11
Iteration:   2660, Loss function: 5.200, Average Loss: 5.546, avg. samples / sec: 286.68
Iteration:   2680, Loss function: 5.071, Average Loss: 5.541, avg. samples / sec: 272.04
Iteration:   2700, Loss function: 5.070, Average Loss: 5.536, avg. samples / sec: 311.18
Iteration:   2720, Loss function: 5.444, Average Loss: 5.532, avg. samples / sec: 309.24
Iteration:   2740, Loss function: 5.100, Average Loss: 5.527, avg. samples / sec: 313.86
Iteration:   2760, Loss function: 4.872, Average Loss: 5.521, avg. samples / sec: 324.27
Iteration:   2780, Loss function: 5.458, Average Loss: 5.518, avg. samples / sec: 330.31
Iteration:   2800, Loss function: 5.185, Average Loss: 5.513, avg. samples / sec: 290.79
Iteration:   2820, Loss function: 5.332, Average Loss: 5.509, avg. samples / sec: 296.35
Iteration:   2840, Loss function: 5.082, Average Loss: 5.505, avg. samples / sec: 302.52
Iteration:   2860, Loss function: 5.056, Average Loss: 5.500, avg. samples / sec: 309.43
Iteration:   2880, Loss function: 5.316, Average Loss: 5.495, avg. samples / sec: 320.36
Iteration:   2900, Loss function: 5.163, Average Loss: 5.491, avg. samples / sec: 233.30
Iteration:   2920, Loss function: 5.105, Average Loss: 5.485, avg. samples / sec: 237.68
Iteration:   2940, Loss function: 4.959, Average Loss: 5.480, avg. samples / sec: 306.80
Iteration:   2960, Loss function: 5.391, Average Loss: 5.476, avg. samples / sec: 331.65
Iteration:   2980, Loss function: 5.233, Average Loss: 5.473, avg. samples / sec: 320.40
Iteration:   3000, Loss function: 5.196, Average Loss: 5.468, avg. samples / sec: 300.23
Iteration:   3020, Loss function: 5.242, Average Loss: 5.461, avg. samples / sec: 303.59
Iteration:   3040, Loss function: 5.089, Average Loss: 5.456, avg. samples / sec: 310.93
Iteration:   3060, Loss function: 5.060, Average Loss: 5.450, avg. samples / sec: 336.32
Iteration:   3080, Loss function: 5.114, Average Loss: 5.444, avg. samples / sec: 244.32
:::MLLOG {"namespace": "", "time_ms": 1639766603195, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766603196, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.123, Average Loss: 5.439, avg. samples / sec: 330.20
Iteration:   3120, Loss function: 5.079, Average Loss: 5.433, avg. samples / sec: 332.17
Iteration:   3140, Loss function: 5.282, Average Loss: 5.428, avg. samples / sec: 323.05
Iteration:   3160, Loss function: 5.653, Average Loss: 5.423, avg. samples / sec: 253.46
Iteration:   3180, Loss function: 5.180, Average Loss: 5.419, avg. samples / sec: 252.07
Iteration:   3200, Loss function: 5.281, Average Loss: 5.414, avg. samples / sec: 277.49
Iteration:   3220, Loss function: 5.205, Average Loss: 5.408, avg. samples / sec: 267.16
Iteration:   3240, Loss function: 5.289, Average Loss: 5.403, avg. samples / sec: 308.37
Iteration:   3260, Loss function: 5.121, Average Loss: 5.397, avg. samples / sec: 298.93
Iteration:   3280, Loss function: 4.830, Average Loss: 5.392, avg. samples / sec: 311.61
Iteration:   3300, Loss function: 4.809, Average Loss: 5.386, avg. samples / sec: 329.35
Iteration:   3320, Loss function: 5.028, Average Loss: 5.382, avg. samples / sec: 315.48
Iteration:   3340, Loss function: 5.032, Average Loss: 5.377, avg. samples / sec: 313.35
Iteration:   3360, Loss function: 5.074, Average Loss: 5.370, avg. samples / sec: 331.46
Iteration:   3380, Loss function: 5.228, Average Loss: 5.363, avg. samples / sec: 315.27
Iteration:   3400, Loss function: 4.679, Average Loss: 5.358, avg. samples / sec: 295.00
Iteration:   3420, Loss function: 5.141, Average Loss: 5.353, avg. samples / sec: 308.73
Iteration:   3440, Loss function: 4.982, Average Loss: 5.349, avg. samples / sec: 329.66
Iteration:   3460, Loss function: 5.319, Average Loss: 5.343, avg. samples / sec: 332.02
Iteration:   3480, Loss function: 5.168, Average Loss: 5.338, avg. samples / sec: 267.70
Iteration:   3500, Loss function: 5.170, Average Loss: 5.334, avg. samples / sec: 270.95
Iteration:   3520, Loss function: 5.019, Average Loss: 5.330, avg. samples / sec: 280.92
Iteration:   3540, Loss function: 4.961, Average Loss: 5.325, avg. samples / sec: 316.53
Iteration:   3560, Loss function: 4.854, Average Loss: 5.320, avg. samples / sec: 307.52
Iteration:   3580, Loss function: 5.169, Average Loss: 5.316, avg. samples / sec: 251.97
Iteration:   3600, Loss function: 5.311, Average Loss: 5.311, avg. samples / sec: 255.92
Iteration:   3620, Loss function: 4.898, Average Loss: 5.306, avg. samples / sec: 268.55
Iteration:   3640, Loss function: 4.924, Average Loss: 5.300, avg. samples / sec: 274.27
Iteration:   3660, Loss function: 5.054, Average Loss: 5.295, avg. samples / sec: 275.11
Iteration:   3680, Loss function: 5.101, Average Loss: 5.289, avg. samples / sec: 331.01
Iteration:   3700, Loss function: 4.841, Average Loss: 5.284, avg. samples / sec: 309.66
Iteration:   3720, Loss function: 4.946, Average Loss: 5.278, avg. samples / sec: 287.35
Iteration:   3740, Loss function: 5.172, Average Loss: 5.274, avg. samples / sec: 336.68
Iteration:   3760, Loss function: 5.086, Average Loss: 5.270, avg. samples / sec: 329.36
Iteration:   3780, Loss function: 5.175, Average Loss: 5.265, avg. samples / sec: 335.90
Iteration:   3800, Loss function: 5.076, Average Loss: 5.261, avg. samples / sec: 303.96
Iteration:   3820, Loss function: 5.095, Average Loss: 5.256, avg. samples / sec: 307.00
Iteration:   3840, Loss function: 4.842, Average Loss: 5.251, avg. samples / sec: 240.19
Iteration:   3860, Loss function: 4.899, Average Loss: 5.245, avg. samples / sec: 189.17
Iteration:   3880, Loss function: 5.107, Average Loss: 5.240, avg. samples / sec: 295.87
Iteration:   3900, Loss function: 5.113, Average Loss: 5.235, avg. samples / sec: 316.76
Iteration:   3920, Loss function: 5.075, Average Loss: 5.230, avg. samples / sec: 293.93
Iteration:   3940, Loss function: 4.939, Average Loss: 5.224, avg. samples / sec: 324.18
Iteration:   3960, Loss function: 4.808, Average Loss: 5.220, avg. samples / sec: 322.78
Iteration:   3980, Loss function: 4.879, Average Loss: 5.215, avg. samples / sec: 329.08
Iteration:   4000, Loss function: 4.932, Average Loss: 5.211, avg. samples / sec: 333.25
Iteration:   4020, Loss function: 4.977, Average Loss: 5.206, avg. samples / sec: 329.78
Iteration:   4040, Loss function: 5.160, Average Loss: 5.202, avg. samples / sec: 326.59
Iteration:   4060, Loss function: 5.121, Average Loss: 5.198, avg. samples / sec: 327.70
Iteration:   4080, Loss function: 5.208, Average Loss: 5.193, avg. samples / sec: 326.06
Iteration:   4100, Loss function: 5.063, Average Loss: 5.190, avg. samples / sec: 289.33
:::MLLOG {"namespace": "", "time_ms": 1639766997918, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766997919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.055, Average Loss: 5.186, avg. samples / sec: 289.67
Iteration:   4140, Loss function: 4.970, Average Loss: 5.181, avg. samples / sec: 302.18
Iteration:   4160, Loss function: 4.906, Average Loss: 5.174, avg. samples / sec: 200.64
Iteration:   4180, Loss function: 4.981, Average Loss: 5.168, avg. samples / sec: 225.51
Iteration:   4200, Loss function: 4.701, Average Loss: 5.164, avg. samples / sec: 329.26
Iteration:   4220, Loss function: 4.791, Average Loss: 5.159, avg. samples / sec: 299.22
Iteration:   4240, Loss function: 4.873, Average Loss: 5.155, avg. samples / sec: 312.25
Iteration:   4260, Loss function: 5.061, Average Loss: 5.150, avg. samples / sec: 300.48
Iteration:   4280, Loss function: 4.930, Average Loss: 5.144, avg. samples / sec: 279.97
Iteration:   4300, Loss function: 4.808, Average Loss: 5.138, avg. samples / sec: 328.52
Iteration:   4320, Loss function: 4.767, Average Loss: 5.133, avg. samples / sec: 323.11
Iteration:   4340, Loss function: 4.808, Average Loss: 5.128, avg. samples / sec: 335.83
Iteration:   4360, Loss function: 4.866, Average Loss: 5.123, avg. samples / sec: 334.67
Iteration:   4380, Loss function: 5.180, Average Loss: 5.119, avg. samples / sec: 295.67
Iteration:   4400, Loss function: 4.944, Average Loss: 5.115, avg. samples / sec: 321.59
Iteration:   4420, Loss function: 4.920, Average Loss: 5.110, avg. samples / sec: 328.68
Iteration:   4440, Loss function: 4.874, Average Loss: 5.105, avg. samples / sec: 314.88
Iteration:   4460, Loss function: 5.047, Average Loss: 5.100, avg. samples / sec: 275.35
Iteration:   4480, Loss function: 5.040, Average Loss: 5.097, avg. samples / sec: 294.90
Iteration:   4500, Loss function: 4.883, Average Loss: 5.093, avg. samples / sec: 268.14
Iteration:   4520, Loss function: 4.730, Average Loss: 5.088, avg. samples / sec: 321.18
Iteration:   4540, Loss function: 5.163, Average Loss: 5.084, avg. samples / sec: 288.32
Iteration:   4560, Loss function: 4.777, Average Loss: 5.081, avg. samples / sec: 306.85
Iteration:   4580, Loss function: 4.717, Average Loss: 5.078, avg. samples / sec: 333.66
Iteration:   4600, Loss function: 4.938, Average Loss: 5.074, avg. samples / sec: 332.81
Iteration:   4620, Loss function: 4.740, Average Loss: 5.069, avg. samples / sec: 318.66
Iteration:   4640, Loss function: 4.634, Average Loss: 5.064, avg. samples / sec: 320.84
Iteration:   4660, Loss function: 4.900, Average Loss: 5.060, avg. samples / sec: 322.24
Iteration:   4680, Loss function: 5.388, Average Loss: 5.055, avg. samples / sec: 289.83
Iteration:   4700, Loss function: 4.751, Average Loss: 5.052, avg. samples / sec: 318.07
Iteration:   4720, Loss function: 4.747, Average Loss: 5.047, avg. samples / sec: 306.30
Iteration:   4740, Loss function: 4.637, Average Loss: 5.043, avg. samples / sec: 320.78
Iteration:   4760, Loss function: 4.764, Average Loss: 5.040, avg. samples / sec: 301.12
Iteration:   4780, Loss function: 5.014, Average Loss: 5.036, avg. samples / sec: 312.32
Iteration:   4800, Loss function: 4.845, Average Loss: 5.033, avg. samples / sec: 319.72
Iteration:   4820, Loss function: 4.783, Average Loss: 5.029, avg. samples / sec: 328.84
Iteration:   4840, Loss function: 4.926, Average Loss: 5.025, avg. samples / sec: 330.68
Iteration:   4860, Loss function: 4.789, Average Loss: 5.021, avg. samples / sec: 333.03
Iteration:   4880, Loss function: 5.269, Average Loss: 5.018, avg. samples / sec: 310.93
Iteration:   4900, Loss function: 4.400, Average Loss: 5.014, avg. samples / sec: 332.34
Iteration:   4920, Loss function: 4.733, Average Loss: 5.011, avg. samples / sec: 312.52
Iteration:   4940, Loss function: 4.706, Average Loss: 5.006, avg. samples / sec: 320.11
Iteration:   4960, Loss function: 4.805, Average Loss: 5.003, avg. samples / sec: 315.66
Iteration:   4980, Loss function: 4.596, Average Loss: 5.000, avg. samples / sec: 286.61
Iteration:   5000, Loss function: 4.895, Average Loss: 4.996, avg. samples / sec: 296.42
Iteration:   5020, Loss function: 4.969, Average Loss: 4.993, avg. samples / sec: 204.01
Iteration:   5040, Loss function: 4.996, Average Loss: 4.990, avg. samples / sec: 300.70
Iteration:   5060, Loss function: 4.750, Average Loss: 4.987, avg. samples / sec: 298.87
Iteration:   5080, Loss function: 4.540, Average Loss: 4.983, avg. samples / sec: 265.59
Iteration:   5100, Loss function: 4.788, Average Loss: 4.981, avg. samples / sec: 297.56
Iteration:   5120, Loss function: 4.644, Average Loss: 4.978, avg. samples / sec: 326.35
Iteration:   5140, Loss function: 4.967, Average Loss: 4.974, avg. samples / sec: 321.04
:::MLLOG {"namespace": "", "time_ms": 1639767386694, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.18 s
:::MLLOG {"namespace": "", "time_ms": 1639767478971, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767478973, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767479075, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.64s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10777
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21916
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09562
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19834
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13929
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20456
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10777 AP goal: 0.10000
Iteration:   5160, Loss function: 4.911, Average Loss: 4.969, avg. samples / sec: 22.75
:::MLLOG {"namespace": "", "time_ms": 1639767485780, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485781, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10777036131126214, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485781, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767488298, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:13 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:13 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765259787, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765260245, "event_type": "POINT_IN_TIME", "key": "seed", "value": 92985946, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 92985946
:::MLLOG {"namespace": "", "time_ms": 1639765265431, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765265432, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765265439, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765265440, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765368543, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765368543, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765373815, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765373816, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.21s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765374238, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765374239, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765374240, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.166, Average Loss: 0.022, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.021, Average Loss: 0.449, avg. samples / sec: 209.43
Iteration:     40, Loss function: 20.850, Average Loss: 0.851, avg. samples / sec: 243.30
Iteration:     60, Loss function: 20.369, Average Loss: 1.240, avg. samples / sec: 264.59
Iteration:     80, Loss function: 20.278, Average Loss: 1.616, avg. samples / sec: 255.48
Iteration:    100, Loss function: 17.071, Average Loss: 1.959, avg. samples / sec: 250.41
Iteration:    120, Loss function: 11.955, Average Loss: 2.187, avg. samples / sec: 279.59
Iteration:    140, Loss function: 9.975, Average Loss: 2.358, avg. samples / sec: 287.38
Iteration:    160, Loss function: 9.386, Average Loss: 2.500, avg. samples / sec: 285.04
Iteration:    180, Loss function: 9.036, Average Loss: 2.632, avg. samples / sec: 264.44
Iteration:    200, Loss function: 8.748, Average Loss: 2.757, avg. samples / sec: 290.07
Iteration:    220, Loss function: 8.415, Average Loss: 2.877, avg. samples / sec: 240.78
Iteration:    240, Loss function: 8.606, Average Loss: 2.993, avg. samples / sec: 289.84
Iteration:    260, Loss function: 8.729, Average Loss: 3.106, avg. samples / sec: 290.56
Iteration:    280, Loss function: 8.552, Average Loss: 3.216, avg. samples / sec: 247.64
Iteration:    300, Loss function: 8.313, Average Loss: 3.319, avg. samples / sec: 279.99
Iteration:    320, Loss function: 8.396, Average Loss: 3.419, avg. samples / sec: 302.48
Iteration:    340, Loss function: 8.387, Average Loss: 3.516, avg. samples / sec: 305.35
Iteration:    360, Loss function: 8.125, Average Loss: 3.610, avg. samples / sec: 271.80
Iteration:    380, Loss function: 7.838, Average Loss: 3.698, avg. samples / sec: 296.72
Iteration:    400, Loss function: 7.946, Average Loss: 3.781, avg. samples / sec: 315.85
Iteration:    420, Loss function: 7.845, Average Loss: 3.863, avg. samples / sec: 310.92
Iteration:    440, Loss function: 8.032, Average Loss: 3.944, avg. samples / sec: 276.31
Iteration:    460, Loss function: 7.904, Average Loss: 4.020, avg. samples / sec: 323.86
Iteration:    480, Loss function: 7.568, Average Loss: 4.093, avg. samples / sec: 312.97
Iteration:    500, Loss function: 7.486, Average Loss: 4.164, avg. samples / sec: 284.26
Iteration:    520, Loss function: 7.524, Average Loss: 4.230, avg. samples / sec: 291.28
Iteration:    540, Loss function: 7.397, Average Loss: 4.294, avg. samples / sec: 277.06
Iteration:    560, Loss function: 7.298, Average Loss: 4.356, avg. samples / sec: 265.10
Iteration:    580, Loss function: 7.177, Average Loss: 4.415, avg. samples / sec: 304.80
Iteration:    600, Loss function: 7.294, Average Loss: 4.474, avg. samples / sec: 306.79
Iteration:    620, Loss function: 7.039, Average Loss: 4.529, avg. samples / sec: 266.28
Iteration:    640, Loss function: 6.865, Average Loss: 4.582, avg. samples / sec: 317.97
Iteration:    660, Loss function: 7.213, Average Loss: 4.633, avg. samples / sec: 249.50
Iteration:    680, Loss function: 7.304, Average Loss: 4.685, avg. samples / sec: 162.42
Iteration:    700, Loss function: 6.723, Average Loss: 4.733, avg. samples / sec: 286.54
Iteration:    720, Loss function: 6.958, Average Loss: 4.781, avg. samples / sec: 275.26
Iteration:    740, Loss function: 6.860, Average Loss: 4.825, avg. samples / sec: 192.95
Iteration:    760, Loss function: 7.085, Average Loss: 4.869, avg. samples / sec: 257.59
Iteration:    780, Loss function: 6.705, Average Loss: 4.910, avg. samples / sec: 296.64
Iteration:    800, Loss function: 7.046, Average Loss: 4.949, avg. samples / sec: 223.19
Iteration:    820, Loss function: 6.810, Average Loss: 4.985, avg. samples / sec: 319.31
Iteration:    840, Loss function: 6.756, Average Loss: 5.021, avg. samples / sec: 302.47
Iteration:    860, Loss function: 6.769, Average Loss: 5.055, avg. samples / sec: 333.79
Iteration:    880, Loss function: 6.700, Average Loss: 5.087, avg. samples / sec: 322.88
Iteration:    900, Loss function: 6.976, Average Loss: 5.118, avg. samples / sec: 300.48
Iteration:    920, Loss function: 6.750, Average Loss: 5.147, avg. samples / sec: 264.10
Iteration:    940, Loss function: 6.696, Average Loss: 5.175, avg. samples / sec: 287.00
Iteration:    960, Loss function: 6.388, Average Loss: 5.203, avg. samples / sec: 321.80
Iteration:    980, Loss function: 6.504, Average Loss: 5.230, avg. samples / sec: 264.16
Iteration:   1000, Loss function: 6.457, Average Loss: 5.255, avg. samples / sec: 266.56
Iteration:   1020, Loss function: 6.442, Average Loss: 5.279, avg. samples / sec: 272.20
:::MLLOG {"namespace": "", "time_ms": 1639765804674, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765804687, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.448, Average Loss: 5.302, avg. samples / sec: 269.49
Iteration:   1060, Loss function: 6.261, Average Loss: 5.325, avg. samples / sec: 315.50
Iteration:   1080, Loss function: 6.201, Average Loss: 5.346, avg. samples / sec: 319.64
Iteration:   1100, Loss function: 6.202, Average Loss: 5.365, avg. samples / sec: 309.25
Iteration:   1120, Loss function: 6.228, Average Loss: 5.384, avg. samples / sec: 337.61
Iteration:   1140, Loss function: 6.467, Average Loss: 5.402, avg. samples / sec: 335.64
Iteration:   1160, Loss function: 6.101, Average Loss: 5.420, avg. samples / sec: 333.51
Iteration:   1180, Loss function: 6.272, Average Loss: 5.435, avg. samples / sec: 235.38
Iteration:   1200, Loss function: 6.207, Average Loss: 5.450, avg. samples / sec: 316.50
Iteration:   1220, Loss function: 6.274, Average Loss: 5.464, avg. samples / sec: 188.44
Iteration:   1240, Loss function: 6.067, Average Loss: 5.476, avg. samples / sec: 254.96
Iteration:   1260, Loss function: 5.935, Average Loss: 5.489, avg. samples / sec: 274.29
Iteration:   1280, Loss function: 6.048, Average Loss: 5.500, avg. samples / sec: 284.54
Iteration:   1300, Loss function: 6.210, Average Loss: 5.513, avg. samples / sec: 271.27
Iteration:   1320, Loss function: 6.060, Average Loss: 5.525, avg. samples / sec: 317.23
Iteration:   1340, Loss function: 5.830, Average Loss: 5.534, avg. samples / sec: 239.78
Iteration:   1360, Loss function: 6.221, Average Loss: 5.545, avg. samples / sec: 278.23
Iteration:   1380, Loss function: 6.185, Average Loss: 5.555, avg. samples / sec: 230.46
Iteration:   1400, Loss function: 6.062, Average Loss: 5.564, avg. samples / sec: 295.31
Iteration:   1420, Loss function: 5.974, Average Loss: 5.572, avg. samples / sec: 332.94
Iteration:   1440, Loss function: 6.414, Average Loss: 5.579, avg. samples / sec: 327.90
Iteration:   1460, Loss function: 6.076, Average Loss: 5.587, avg. samples / sec: 327.31
Iteration:   1480, Loss function: 5.953, Average Loss: 5.594, avg. samples / sec: 328.40
Iteration:   1500, Loss function: 6.048, Average Loss: 5.602, avg. samples / sec: 333.48
Iteration:   1520, Loss function: 6.021, Average Loss: 5.608, avg. samples / sec: 332.23
Iteration:   1540, Loss function: 6.065, Average Loss: 5.612, avg. samples / sec: 331.69
Iteration:   1560, Loss function: 5.824, Average Loss: 5.617, avg. samples / sec: 305.64
Iteration:   1580, Loss function: 5.555, Average Loss: 5.621, avg. samples / sec: 277.27
Iteration:   1600, Loss function: 6.185, Average Loss: 5.627, avg. samples / sec: 283.57
Iteration:   1620, Loss function: 5.703, Average Loss: 5.630, avg. samples / sec: 313.64
Iteration:   1640, Loss function: 5.883, Average Loss: 5.633, avg. samples / sec: 314.33
Iteration:   1660, Loss function: 5.921, Average Loss: 5.638, avg. samples / sec: 326.69
Iteration:   1680, Loss function: 5.747, Average Loss: 5.641, avg. samples / sec: 341.41
Iteration:   1700, Loss function: 5.464, Average Loss: 5.645, avg. samples / sec: 322.85
Iteration:   1720, Loss function: 5.854, Average Loss: 5.647, avg. samples / sec: 334.60
Iteration:   1740, Loss function: 6.051, Average Loss: 5.650, avg. samples / sec: 316.44
Iteration:   1760, Loss function: 5.510, Average Loss: 5.651, avg. samples / sec: 327.50
Iteration:   1780, Loss function: 5.725, Average Loss: 5.652, avg. samples / sec: 326.27
Iteration:   1800, Loss function: 5.562, Average Loss: 5.654, avg. samples / sec: 325.79
Iteration:   1820, Loss function: 6.005, Average Loss: 5.656, avg. samples / sec: 300.14
Iteration:   1840, Loss function: 5.923, Average Loss: 5.657, avg. samples / sec: 297.91
Iteration:   1860, Loss function: 5.646, Average Loss: 5.656, avg. samples / sec: 307.36
Iteration:   1880, Loss function: 5.926, Average Loss: 5.658, avg. samples / sec: 323.94
Iteration:   1900, Loss function: 5.725, Average Loss: 5.658, avg. samples / sec: 341.03
Iteration:   1920, Loss function: 5.723, Average Loss: 5.657, avg. samples / sec: 324.69
Iteration:   1940, Loss function: 5.804, Average Loss: 5.657, avg. samples / sec: 328.99
Iteration:   1960, Loss function: 5.515, Average Loss: 5.656, avg. samples / sec: 334.56
Iteration:   1980, Loss function: 5.803, Average Loss: 5.655, avg. samples / sec: 327.78
Iteration:   2000, Loss function: 5.620, Average Loss: 5.655, avg. samples / sec: 331.94
Iteration:   2020, Loss function: 5.625, Average Loss: 5.653, avg. samples / sec: 337.74
Iteration:   2040, Loss function: 5.637, Average Loss: 5.653, avg. samples / sec: 321.45
:::MLLOG {"namespace": "", "time_ms": 1639766190233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766190246, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.591, Average Loss: 5.651, avg. samples / sec: 302.10
Iteration:   2080, Loss function: 5.159, Average Loss: 5.648, avg. samples / sec: 298.14
Iteration:   2100, Loss function: 5.566, Average Loss: 5.646, avg. samples / sec: 230.48
Iteration:   2120, Loss function: 5.483, Average Loss: 5.643, avg. samples / sec: 330.57
Iteration:   2140, Loss function: 5.387, Average Loss: 5.640, avg. samples / sec: 335.82
Iteration:   2160, Loss function: 5.464, Average Loss: 5.637, avg. samples / sec: 247.84
Iteration:   2180, Loss function: 5.240, Average Loss: 5.635, avg. samples / sec: 272.23
Iteration:   2200, Loss function: 5.494, Average Loss: 5.631, avg. samples / sec: 311.38
Iteration:   2220, Loss function: 5.644, Average Loss: 5.628, avg. samples / sec: 344.60
Iteration:   2240, Loss function: 5.557, Average Loss: 5.624, avg. samples / sec: 214.45
Iteration:   2260, Loss function: 5.279, Average Loss: 5.621, avg. samples / sec: 217.98
Iteration:   2280, Loss function: 5.175, Average Loss: 5.618, avg. samples / sec: 248.50
Iteration:   2300, Loss function: 5.186, Average Loss: 5.615, avg. samples / sec: 278.71
Iteration:   2320, Loss function: 5.084, Average Loss: 5.612, avg. samples / sec: 240.99
Iteration:   2340, Loss function: 5.621, Average Loss: 5.608, avg. samples / sec: 311.39
Iteration:   2360, Loss function: 5.238, Average Loss: 5.605, avg. samples / sec: 307.20
Iteration:   2380, Loss function: 5.347, Average Loss: 5.602, avg. samples / sec: 274.64
Iteration:   2400, Loss function: 5.471, Average Loss: 5.597, avg. samples / sec: 323.27
Iteration:   2420, Loss function: 5.481, Average Loss: 5.593, avg. samples / sec: 278.10
Iteration:   2440, Loss function: 5.154, Average Loss: 5.589, avg. samples / sec: 267.72
Iteration:   2460, Loss function: 5.087, Average Loss: 5.586, avg. samples / sec: 167.88
Iteration:   2480, Loss function: 5.238, Average Loss: 5.582, avg. samples / sec: 319.78
Iteration:   2500, Loss function: 5.409, Average Loss: 5.578, avg. samples / sec: 299.14
Iteration:   2520, Loss function: 5.300, Average Loss: 5.573, avg. samples / sec: 311.64
Iteration:   2540, Loss function: 5.512, Average Loss: 5.569, avg. samples / sec: 253.34
Iteration:   2560, Loss function: 5.305, Average Loss: 5.565, avg. samples / sec: 303.59
Iteration:   2580, Loss function: 5.225, Average Loss: 5.562, avg. samples / sec: 282.31
Iteration:   2600, Loss function: 5.442, Average Loss: 5.558, avg. samples / sec: 278.15
Iteration:   2620, Loss function: 5.329, Average Loss: 5.553, avg. samples / sec: 275.57
Iteration:   2640, Loss function: 5.175, Average Loss: 5.550, avg. samples / sec: 327.11
Iteration:   2660, Loss function: 5.200, Average Loss: 5.546, avg. samples / sec: 286.68
Iteration:   2680, Loss function: 5.071, Average Loss: 5.541, avg. samples / sec: 272.04
Iteration:   2700, Loss function: 5.070, Average Loss: 5.536, avg. samples / sec: 311.18
Iteration:   2720, Loss function: 5.444, Average Loss: 5.532, avg. samples / sec: 309.24
Iteration:   2740, Loss function: 5.100, Average Loss: 5.527, avg. samples / sec: 313.86
Iteration:   2760, Loss function: 4.872, Average Loss: 5.521, avg. samples / sec: 324.27
Iteration:   2780, Loss function: 5.458, Average Loss: 5.518, avg. samples / sec: 330.31
Iteration:   2800, Loss function: 5.185, Average Loss: 5.513, avg. samples / sec: 290.79
Iteration:   2820, Loss function: 5.332, Average Loss: 5.509, avg. samples / sec: 296.35
Iteration:   2840, Loss function: 5.082, Average Loss: 5.505, avg. samples / sec: 302.52
Iteration:   2860, Loss function: 5.056, Average Loss: 5.500, avg. samples / sec: 309.43
Iteration:   2880, Loss function: 5.316, Average Loss: 5.495, avg. samples / sec: 320.36
Iteration:   2900, Loss function: 5.163, Average Loss: 5.491, avg. samples / sec: 233.30
Iteration:   2920, Loss function: 5.105, Average Loss: 5.485, avg. samples / sec: 237.68
Iteration:   2940, Loss function: 4.959, Average Loss: 5.480, avg. samples / sec: 306.80
Iteration:   2960, Loss function: 5.391, Average Loss: 5.476, avg. samples / sec: 331.65
Iteration:   2980, Loss function: 5.233, Average Loss: 5.473, avg. samples / sec: 320.40
Iteration:   3000, Loss function: 5.196, Average Loss: 5.468, avg. samples / sec: 300.23
Iteration:   3020, Loss function: 5.242, Average Loss: 5.461, avg. samples / sec: 303.59
Iteration:   3040, Loss function: 5.089, Average Loss: 5.456, avg. samples / sec: 310.93
Iteration:   3060, Loss function: 5.060, Average Loss: 5.450, avg. samples / sec: 336.32
Iteration:   3080, Loss function: 5.114, Average Loss: 5.444, avg. samples / sec: 244.32
:::MLLOG {"namespace": "", "time_ms": 1639766603195, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766603196, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.123, Average Loss: 5.439, avg. samples / sec: 330.20
Iteration:   3120, Loss function: 5.079, Average Loss: 5.433, avg. samples / sec: 332.17
Iteration:   3140, Loss function: 5.282, Average Loss: 5.428, avg. samples / sec: 323.05
Iteration:   3160, Loss function: 5.653, Average Loss: 5.423, avg. samples / sec: 253.46
Iteration:   3180, Loss function: 5.180, Average Loss: 5.419, avg. samples / sec: 252.07
Iteration:   3200, Loss function: 5.281, Average Loss: 5.414, avg. samples / sec: 277.49
Iteration:   3220, Loss function: 5.205, Average Loss: 5.408, avg. samples / sec: 267.16
Iteration:   3240, Loss function: 5.289, Average Loss: 5.403, avg. samples / sec: 308.37
Iteration:   3260, Loss function: 5.121, Average Loss: 5.397, avg. samples / sec: 298.93
Iteration:   3280, Loss function: 4.830, Average Loss: 5.392, avg. samples / sec: 311.61
Iteration:   3300, Loss function: 4.809, Average Loss: 5.386, avg. samples / sec: 329.35
Iteration:   3320, Loss function: 5.028, Average Loss: 5.382, avg. samples / sec: 315.48
Iteration:   3340, Loss function: 5.032, Average Loss: 5.377, avg. samples / sec: 313.35
Iteration:   3360, Loss function: 5.074, Average Loss: 5.370, avg. samples / sec: 331.46
Iteration:   3380, Loss function: 5.228, Average Loss: 5.363, avg. samples / sec: 315.27
Iteration:   3400, Loss function: 4.679, Average Loss: 5.358, avg. samples / sec: 295.00
Iteration:   3420, Loss function: 5.141, Average Loss: 5.353, avg. samples / sec: 308.73
Iteration:   3440, Loss function: 4.982, Average Loss: 5.349, avg. samples / sec: 329.66
Iteration:   3460, Loss function: 5.319, Average Loss: 5.343, avg. samples / sec: 332.02
Iteration:   3480, Loss function: 5.168, Average Loss: 5.338, avg. samples / sec: 267.70
Iteration:   3500, Loss function: 5.170, Average Loss: 5.334, avg. samples / sec: 270.95
Iteration:   3520, Loss function: 5.019, Average Loss: 5.330, avg. samples / sec: 280.92
Iteration:   3540, Loss function: 4.961, Average Loss: 5.325, avg. samples / sec: 316.53
Iteration:   3560, Loss function: 4.854, Average Loss: 5.320, avg. samples / sec: 307.52
Iteration:   3580, Loss function: 5.169, Average Loss: 5.316, avg. samples / sec: 251.97
Iteration:   3600, Loss function: 5.311, Average Loss: 5.311, avg. samples / sec: 255.92
Iteration:   3620, Loss function: 4.898, Average Loss: 5.306, avg. samples / sec: 268.55
Iteration:   3640, Loss function: 4.924, Average Loss: 5.300, avg. samples / sec: 274.27
Iteration:   3660, Loss function: 5.054, Average Loss: 5.295, avg. samples / sec: 275.11
Iteration:   3680, Loss function: 5.101, Average Loss: 5.289, avg. samples / sec: 331.01
Iteration:   3700, Loss function: 4.841, Average Loss: 5.284, avg. samples / sec: 309.66
Iteration:   3720, Loss function: 4.946, Average Loss: 5.278, avg. samples / sec: 287.35
Iteration:   3740, Loss function: 5.172, Average Loss: 5.274, avg. samples / sec: 336.68
Iteration:   3760, Loss function: 5.086, Average Loss: 5.270, avg. samples / sec: 329.36
Iteration:   3780, Loss function: 5.175, Average Loss: 5.265, avg. samples / sec: 335.90
Iteration:   3800, Loss function: 5.076, Average Loss: 5.261, avg. samples / sec: 303.96
Iteration:   3820, Loss function: 5.095, Average Loss: 5.256, avg. samples / sec: 307.00
Iteration:   3840, Loss function: 4.842, Average Loss: 5.251, avg. samples / sec: 240.19
Iteration:   3860, Loss function: 4.899, Average Loss: 5.245, avg. samples / sec: 189.17
Iteration:   3880, Loss function: 5.107, Average Loss: 5.240, avg. samples / sec: 295.87
Iteration:   3900, Loss function: 5.113, Average Loss: 5.235, avg. samples / sec: 316.76
Iteration:   3920, Loss function: 5.075, Average Loss: 5.230, avg. samples / sec: 293.93
Iteration:   3940, Loss function: 4.939, Average Loss: 5.224, avg. samples / sec: 324.18
Iteration:   3960, Loss function: 4.808, Average Loss: 5.220, avg. samples / sec: 322.78
Iteration:   3980, Loss function: 4.879, Average Loss: 5.215, avg. samples / sec: 329.08
Iteration:   4000, Loss function: 4.932, Average Loss: 5.211, avg. samples / sec: 333.25
Iteration:   4020, Loss function: 4.977, Average Loss: 5.206, avg. samples / sec: 329.78
Iteration:   4040, Loss function: 5.160, Average Loss: 5.202, avg. samples / sec: 326.59
Iteration:   4060, Loss function: 5.121, Average Loss: 5.198, avg. samples / sec: 327.70
Iteration:   4080, Loss function: 5.208, Average Loss: 5.193, avg. samples / sec: 326.06
Iteration:   4100, Loss function: 5.063, Average Loss: 5.190, avg. samples / sec: 289.33
:::MLLOG {"namespace": "", "time_ms": 1639766997918, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766997919, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.055, Average Loss: 5.186, avg. samples / sec: 289.67
Iteration:   4140, Loss function: 4.970, Average Loss: 5.181, avg. samples / sec: 302.18
Iteration:   4160, Loss function: 4.906, Average Loss: 5.174, avg. samples / sec: 200.64
Iteration:   4180, Loss function: 4.981, Average Loss: 5.168, avg. samples / sec: 225.51
Iteration:   4200, Loss function: 4.701, Average Loss: 5.164, avg. samples / sec: 329.26
Iteration:   4220, Loss function: 4.791, Average Loss: 5.159, avg. samples / sec: 299.22
Iteration:   4240, Loss function: 4.873, Average Loss: 5.155, avg. samples / sec: 312.25
Iteration:   4260, Loss function: 5.061, Average Loss: 5.150, avg. samples / sec: 300.48
Iteration:   4280, Loss function: 4.930, Average Loss: 5.144, avg. samples / sec: 279.97
Iteration:   4300, Loss function: 4.808, Average Loss: 5.138, avg. samples / sec: 328.52
Iteration:   4320, Loss function: 4.767, Average Loss: 5.133, avg. samples / sec: 323.11
Iteration:   4340, Loss function: 4.808, Average Loss: 5.128, avg. samples / sec: 335.83
Iteration:   4360, Loss function: 4.866, Average Loss: 5.123, avg. samples / sec: 334.67
Iteration:   4380, Loss function: 5.180, Average Loss: 5.119, avg. samples / sec: 295.67
Iteration:   4400, Loss function: 4.944, Average Loss: 5.115, avg. samples / sec: 321.59
Iteration:   4420, Loss function: 4.920, Average Loss: 5.110, avg. samples / sec: 328.68
Iteration:   4440, Loss function: 4.874, Average Loss: 5.105, avg. samples / sec: 314.88
Iteration:   4460, Loss function: 5.047, Average Loss: 5.100, avg. samples / sec: 275.35
Iteration:   4480, Loss function: 5.040, Average Loss: 5.097, avg. samples / sec: 294.90
Iteration:   4500, Loss function: 4.883, Average Loss: 5.093, avg. samples / sec: 268.14
Iteration:   4520, Loss function: 4.730, Average Loss: 5.088, avg. samples / sec: 321.18
Iteration:   4540, Loss function: 5.163, Average Loss: 5.084, avg. samples / sec: 288.32
Iteration:   4560, Loss function: 4.777, Average Loss: 5.081, avg. samples / sec: 306.85
Iteration:   4580, Loss function: 4.717, Average Loss: 5.078, avg. samples / sec: 333.66
Iteration:   4600, Loss function: 4.938, Average Loss: 5.074, avg. samples / sec: 332.81
Iteration:   4620, Loss function: 4.740, Average Loss: 5.069, avg. samples / sec: 318.66
Iteration:   4640, Loss function: 4.634, Average Loss: 5.064, avg. samples / sec: 320.84
Iteration:   4660, Loss function: 4.900, Average Loss: 5.060, avg. samples / sec: 322.24
Iteration:   4680, Loss function: 5.388, Average Loss: 5.055, avg. samples / sec: 289.83
Iteration:   4700, Loss function: 4.751, Average Loss: 5.052, avg. samples / sec: 318.07
Iteration:   4720, Loss function: 4.747, Average Loss: 5.047, avg. samples / sec: 306.30
Iteration:   4740, Loss function: 4.637, Average Loss: 5.043, avg. samples / sec: 320.78
Iteration:   4760, Loss function: 4.764, Average Loss: 5.040, avg. samples / sec: 301.12
Iteration:   4780, Loss function: 5.014, Average Loss: 5.036, avg. samples / sec: 312.32
Iteration:   4800, Loss function: 4.845, Average Loss: 5.033, avg. samples / sec: 319.72
Iteration:   4820, Loss function: 4.783, Average Loss: 5.029, avg. samples / sec: 328.84
Iteration:   4840, Loss function: 4.926, Average Loss: 5.025, avg. samples / sec: 330.68
Iteration:   4860, Loss function: 4.789, Average Loss: 5.021, avg. samples / sec: 333.03
Iteration:   4880, Loss function: 5.269, Average Loss: 5.018, avg. samples / sec: 310.93
Iteration:   4900, Loss function: 4.400, Average Loss: 5.014, avg. samples / sec: 332.34
Iteration:   4920, Loss function: 4.733, Average Loss: 5.011, avg. samples / sec: 312.52
Iteration:   4940, Loss function: 4.706, Average Loss: 5.006, avg. samples / sec: 320.11
Iteration:   4960, Loss function: 4.805, Average Loss: 5.003, avg. samples / sec: 315.66
Iteration:   4980, Loss function: 4.596, Average Loss: 5.000, avg. samples / sec: 286.61
Iteration:   5000, Loss function: 4.895, Average Loss: 4.996, avg. samples / sec: 296.42
Iteration:   5020, Loss function: 4.969, Average Loss: 4.993, avg. samples / sec: 204.01
Iteration:   5040, Loss function: 4.996, Average Loss: 4.990, avg. samples / sec: 300.70
Iteration:   5060, Loss function: 4.750, Average Loss: 4.987, avg. samples / sec: 298.87
Iteration:   5080, Loss function: 4.540, Average Loss: 4.983, avg. samples / sec: 265.59
Iteration:   5100, Loss function: 4.788, Average Loss: 4.981, avg. samples / sec: 297.56
Iteration:   5120, Loss function: 4.644, Average Loss: 4.978, avg. samples / sec: 326.35
Iteration:   5140, Loss function: 4.967, Average Loss: 4.974, avg. samples / sec: 321.04
:::MLLOG {"namespace": "", "time_ms": 1639767386694, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.18 s
:::MLLOG {"namespace": "", "time_ms": 1639767478971, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767478973, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767479075, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.90s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=3.64s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10777
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21916
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09562
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19834
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13929
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20456
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21609
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10777 AP goal: 0.10000
Iteration:   5160, Loss function: 4.911, Average Loss: 4.969, avg. samples / sec: 22.75
:::MLLOG {"namespace": "", "time_ms": 1639767485780, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485781, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10777036131126214, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485781, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767488298, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767493
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:13 PM'
START TIMING RUN WAS 2021-12-17 06:20:52 PM
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:52 PM'
ENDING TIMING RUN AT 2021-12-17 06:58:13 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:13 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 2g.10gb     Device  0: (UUID: MIG-66ee90df-859a-5875-a31d-129ef2ae71db)
+ result=2241
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-17 06:20:52 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2241,nvidia,2021-12-17 06:20:52 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
