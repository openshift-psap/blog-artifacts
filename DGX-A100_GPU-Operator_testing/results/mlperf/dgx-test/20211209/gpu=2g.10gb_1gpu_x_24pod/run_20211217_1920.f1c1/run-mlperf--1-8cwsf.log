8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-c4be375c-234a-5732-a19d-911d04cda8c0
+ MIG_MODE=1
Found 1 MIG instances: MIG-c4be375c-234a-5732-a19d-911d04cda8c0
+ [[ 2g.10gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-c4be375c-234a-5732-a19d-911d04cda8c0'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765248
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:48 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
Setting up the SSD benchmark...
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:48 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-8cwsf to the sync file ...
run-mlperf--1-8cwsf Found 9 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
Fri Dec 17 18:20:53 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255975, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765256103, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2517641530, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2517641530
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765258014, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765258015, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765258022, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765363080, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765363081, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765364418, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765364419, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765364692, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765364693, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765364694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.854, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.085, Average Loss: 0.456, avg. samples / sec: 317.35
Iteration:     40, Loss function: 20.683, Average Loss: 0.857, avg. samples / sec: 291.75
Iteration:     60, Loss function: 20.416, Average Loss: 1.247, avg. samples / sec: 253.99
Iteration:     80, Loss function: 19.980, Average Loss: 1.620, avg. samples / sec: 224.34
Iteration:    100, Loss function: 15.114, Average Loss: 1.942, avg. samples / sec: 262.16
Iteration:    120, Loss function: 10.860, Average Loss: 2.147, avg. samples / sec: 255.56
Iteration:    140, Loss function: 9.523, Average Loss: 2.300, avg. samples / sec: 250.25
Iteration:    160, Loss function: 8.977, Average Loss: 2.437, avg. samples / sec: 283.22
Iteration:    180, Loss function: 8.994, Average Loss: 2.566, avg. samples / sec: 284.81
Iteration:    200, Loss function: 8.779, Average Loss: 2.691, avg. samples / sec: 276.12
Iteration:    220, Loss function: 8.427, Average Loss: 2.811, avg. samples / sec: 251.55
Iteration:    240, Loss function: 8.881, Average Loss: 2.929, avg. samples / sec: 278.71
Iteration:    260, Loss function: 8.866, Average Loss: 3.048, avg. samples / sec: 272.75
Iteration:    280, Loss function: 8.515, Average Loss: 3.159, avg. samples / sec: 292.57
Iteration:    300, Loss function: 8.226, Average Loss: 3.263, avg. samples / sec: 241.99
Iteration:    320, Loss function: 8.416, Average Loss: 3.364, avg. samples / sec: 289.02
Iteration:    340, Loss function: 8.356, Average Loss: 3.463, avg. samples / sec: 243.17
Iteration:    360, Loss function: 7.963, Average Loss: 3.557, avg. samples / sec: 327.50
Iteration:    380, Loss function: 8.040, Average Loss: 3.648, avg. samples / sec: 311.92
Iteration:    400, Loss function: 7.932, Average Loss: 3.734, avg. samples / sec: 234.39
Iteration:    420, Loss function: 7.685, Average Loss: 3.817, avg. samples / sec: 314.62
Iteration:    440, Loss function: 7.843, Average Loss: 3.896, avg. samples / sec: 319.12
Iteration:    460, Loss function: 7.963, Average Loss: 3.973, avg. samples / sec: 288.07
Iteration:    480, Loss function: 7.590, Average Loss: 4.048, avg. samples / sec: 322.05
Iteration:    500, Loss function: 7.597, Average Loss: 4.119, avg. samples / sec: 290.22
Iteration:    520, Loss function: 7.504, Average Loss: 4.187, avg. samples / sec: 278.22
Iteration:    540, Loss function: 7.682, Average Loss: 4.253, avg. samples / sec: 280.36
Iteration:    560, Loss function: 7.196, Average Loss: 4.316, avg. samples / sec: 261.55
Iteration:    580, Loss function: 7.182, Average Loss: 4.377, avg. samples / sec: 320.26
Iteration:    600, Loss function: 7.343, Average Loss: 4.435, avg. samples / sec: 301.60
Iteration:    620, Loss function: 7.127, Average Loss: 4.491, avg. samples / sec: 324.42
Iteration:    640, Loss function: 6.849, Average Loss: 4.545, avg. samples / sec: 317.73
Iteration:    660, Loss function: 7.149, Average Loss: 4.599, avg. samples / sec: 316.90
Iteration:    680, Loss function: 7.332, Average Loss: 4.650, avg. samples / sec: 292.99
Iteration:    700, Loss function: 6.805, Average Loss: 4.698, avg. samples / sec: 309.70
Iteration:    720, Loss function: 7.163, Average Loss: 4.746, avg. samples / sec: 277.79
Iteration:    740, Loss function: 6.958, Average Loss: 4.791, avg. samples / sec: 240.10
Iteration:    760, Loss function: 7.065, Average Loss: 4.834, avg. samples / sec: 254.02
Iteration:    780, Loss function: 6.775, Average Loss: 4.876, avg. samples / sec: 307.45
Iteration:    800, Loss function: 7.044, Average Loss: 4.915, avg. samples / sec: 321.81
Iteration:    820, Loss function: 6.838, Average Loss: 4.954, avg. samples / sec: 318.22
Iteration:    840, Loss function: 6.720, Average Loss: 4.990, avg. samples / sec: 286.12
Iteration:    860, Loss function: 6.823, Average Loss: 5.023, avg. samples / sec: 328.22
Iteration:    880, Loss function: 6.934, Average Loss: 5.056, avg. samples / sec: 285.83
Iteration:    900, Loss function: 6.997, Average Loss: 5.087, avg. samples / sec: 296.34
Iteration:    920, Loss function: 6.576, Average Loss: 5.116, avg. samples / sec: 327.54
Iteration:    940, Loss function: 6.782, Average Loss: 5.145, avg. samples / sec: 333.94
Iteration:    960, Loss function: 6.484, Average Loss: 5.173, avg. samples / sec: 321.53
Iteration:    980, Loss function: 6.578, Average Loss: 5.201, avg. samples / sec: 328.79
Iteration:   1000, Loss function: 6.605, Average Loss: 5.227, avg. samples / sec: 276.53
Iteration:   1020, Loss function: 6.295, Average Loss: 5.250, avg. samples / sec: 229.95
:::MLLOG {"namespace": "", "time_ms": 1639765777740, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765777741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.616, Average Loss: 5.273, avg. samples / sec: 243.05
Iteration:   1060, Loss function: 6.285, Average Loss: 5.295, avg. samples / sec: 323.23
Iteration:   1080, Loss function: 6.341, Average Loss: 5.316, avg. samples / sec: 325.69
Iteration:   1100, Loss function: 6.111, Average Loss: 5.336, avg. samples / sec: 293.36
Iteration:   1120, Loss function: 6.142, Average Loss: 5.354, avg. samples / sec: 261.14
Iteration:   1140, Loss function: 6.454, Average Loss: 5.372, avg. samples / sec: 309.98
Iteration:   1160, Loss function: 6.158, Average Loss: 5.389, avg. samples / sec: 319.20
Iteration:   1180, Loss function: 6.374, Average Loss: 5.406, avg. samples / sec: 250.73
Iteration:   1200, Loss function: 6.073, Average Loss: 5.421, avg. samples / sec: 291.96
Iteration:   1220, Loss function: 6.122, Average Loss: 5.436, avg. samples / sec: 264.11
Iteration:   1240, Loss function: 6.064, Average Loss: 5.448, avg. samples / sec: 330.76
Iteration:   1260, Loss function: 5.883, Average Loss: 5.460, avg. samples / sec: 285.44
Iteration:   1280, Loss function: 5.996, Average Loss: 5.472, avg. samples / sec: 243.65
Iteration:   1300, Loss function: 6.115, Average Loss: 5.484, avg. samples / sec: 305.04
Iteration:   1320, Loss function: 6.226, Average Loss: 5.496, avg. samples / sec: 281.07
Iteration:   1340, Loss function: 5.928, Average Loss: 5.506, avg. samples / sec: 192.07
Iteration:   1360, Loss function: 5.982, Average Loss: 5.516, avg. samples / sec: 295.30
Iteration:   1380, Loss function: 6.234, Average Loss: 5.526, avg. samples / sec: 322.00
Iteration:   1400, Loss function: 5.893, Average Loss: 5.536, avg. samples / sec: 325.16
Iteration:   1420, Loss function: 5.975, Average Loss: 5.544, avg. samples / sec: 322.77
Iteration:   1440, Loss function: 6.230, Average Loss: 5.552, avg. samples / sec: 279.08
Iteration:   1460, Loss function: 6.017, Average Loss: 5.560, avg. samples / sec: 271.65
Iteration:   1480, Loss function: 5.966, Average Loss: 5.569, avg. samples / sec: 270.72
Iteration:   1500, Loss function: 6.106, Average Loss: 5.577, avg. samples / sec: 160.34
Iteration:   1520, Loss function: 6.192, Average Loss: 5.582, avg. samples / sec: 221.31
Iteration:   1540, Loss function: 6.122, Average Loss: 5.586, avg. samples / sec: 261.26
Iteration:   1560, Loss function: 5.632, Average Loss: 5.590, avg. samples / sec: 287.44
Iteration:   1580, Loss function: 5.655, Average Loss: 5.595, avg. samples / sec: 283.48
Iteration:   1600, Loss function: 6.021, Average Loss: 5.601, avg. samples / sec: 344.33
Iteration:   1620, Loss function: 5.853, Average Loss: 5.606, avg. samples / sec: 257.35
Iteration:   1640, Loss function: 5.765, Average Loss: 5.608, avg. samples / sec: 275.78
Iteration:   1660, Loss function: 5.774, Average Loss: 5.613, avg. samples / sec: 294.17
Iteration:   1680, Loss function: 5.690, Average Loss: 5.616, avg. samples / sec: 325.07
Iteration:   1700, Loss function: 5.224, Average Loss: 5.619, avg. samples / sec: 330.32
Iteration:   1720, Loss function: 5.705, Average Loss: 5.621, avg. samples / sec: 298.21
Iteration:   1740, Loss function: 5.862, Average Loss: 5.624, avg. samples / sec: 327.73
Iteration:   1760, Loss function: 5.560, Average Loss: 5.626, avg. samples / sec: 268.96
Iteration:   1780, Loss function: 5.786, Average Loss: 5.628, avg. samples / sec: 207.82
Iteration:   1800, Loss function: 5.591, Average Loss: 5.630, avg. samples / sec: 202.30
Iteration:   1820, Loss function: 6.110, Average Loss: 5.631, avg. samples / sec: 322.32
Iteration:   1840, Loss function: 5.978, Average Loss: 5.632, avg. samples / sec: 299.81
Iteration:   1860, Loss function: 5.672, Average Loss: 5.630, avg. samples / sec: 321.04
Iteration:   1880, Loss function: 5.802, Average Loss: 5.631, avg. samples / sec: 226.39
Iteration:   1900, Loss function: 6.036, Average Loss: 5.632, avg. samples / sec: 310.86
Iteration:   1920, Loss function: 5.874, Average Loss: 5.631, avg. samples / sec: 255.23
Iteration:   1940, Loss function: 5.912, Average Loss: 5.632, avg. samples / sec: 204.69
Iteration:   1960, Loss function: 5.617, Average Loss: 5.631, avg. samples / sec: 255.66
Iteration:   1980, Loss function: 5.609, Average Loss: 5.629, avg. samples / sec: 232.30
Iteration:   2000, Loss function: 5.680, Average Loss: 5.630, avg. samples / sec: 306.93
Iteration:   2020, Loss function: 5.545, Average Loss: 5.628, avg. samples / sec: 306.62
Iteration:   2040, Loss function: 5.709, Average Loss: 5.627, avg. samples / sec: 301.57
:::MLLOG {"namespace": "", "time_ms": 1639766204873, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766204875, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.446, Average Loss: 5.626, avg. samples / sec: 310.24
Iteration:   2080, Loss function: 5.230, Average Loss: 5.623, avg. samples / sec: 315.15
Iteration:   2100, Loss function: 5.431, Average Loss: 5.621, avg. samples / sec: 278.78
Iteration:   2120, Loss function: 5.293, Average Loss: 5.618, avg. samples / sec: 309.58
Iteration:   2140, Loss function: 5.488, Average Loss: 5.616, avg. samples / sec: 307.62
Iteration:   2160, Loss function: 5.300, Average Loss: 5.614, avg. samples / sec: 312.71
Iteration:   2180, Loss function: 5.283, Average Loss: 5.611, avg. samples / sec: 224.01
Iteration:   2200, Loss function: 5.417, Average Loss: 5.607, avg. samples / sec: 284.60
Iteration:   2220, Loss function: 5.433, Average Loss: 5.605, avg. samples / sec: 313.31
Iteration:   2240, Loss function: 5.367, Average Loss: 5.602, avg. samples / sec: 319.24
Iteration:   2260, Loss function: 5.119, Average Loss: 5.598, avg. samples / sec: 211.03
Iteration:   2280, Loss function: 5.408, Average Loss: 5.596, avg. samples / sec: 302.23
Iteration:   2300, Loss function: 5.078, Average Loss: 5.593, avg. samples / sec: 288.85
Iteration:   2320, Loss function: 5.438, Average Loss: 5.591, avg. samples / sec: 327.71
Iteration:   2340, Loss function: 5.340, Average Loss: 5.587, avg. samples / sec: 326.16
Iteration:   2360, Loss function: 5.330, Average Loss: 5.583, avg. samples / sec: 330.55
Iteration:   2380, Loss function: 5.485, Average Loss: 5.580, avg. samples / sec: 318.52
Iteration:   2400, Loss function: 5.539, Average Loss: 5.575, avg. samples / sec: 289.83
Iteration:   2420, Loss function: 5.397, Average Loss: 5.571, avg. samples / sec: 316.47
Iteration:   2440, Loss function: 5.524, Average Loss: 5.568, avg. samples / sec: 262.47
Iteration:   2460, Loss function: 5.085, Average Loss: 5.564, avg. samples / sec: 284.04
Iteration:   2480, Loss function: 5.236, Average Loss: 5.560, avg. samples / sec: 295.79
Iteration:   2500, Loss function: 5.376, Average Loss: 5.556, avg. samples / sec: 209.56
Iteration:   2520, Loss function: 5.356, Average Loss: 5.552, avg. samples / sec: 241.56
Iteration:   2540, Loss function: 5.527, Average Loss: 5.549, avg. samples / sec: 276.32
Iteration:   2560, Loss function: 5.170, Average Loss: 5.545, avg. samples / sec: 251.95
Iteration:   2580, Loss function: 5.116, Average Loss: 5.542, avg. samples / sec: 305.12
Iteration:   2600, Loss function: 5.441, Average Loss: 5.538, avg. samples / sec: 318.76
Iteration:   2620, Loss function: 5.494, Average Loss: 5.534, avg. samples / sec: 308.69
Iteration:   2640, Loss function: 5.252, Average Loss: 5.532, avg. samples / sec: 308.78
Iteration:   2660, Loss function: 5.294, Average Loss: 5.527, avg. samples / sec: 308.24
Iteration:   2680, Loss function: 5.206, Average Loss: 5.523, avg. samples / sec: 306.48
Iteration:   2700, Loss function: 5.205, Average Loss: 5.519, avg. samples / sec: 312.34
Iteration:   2720, Loss function: 5.316, Average Loss: 5.515, avg. samples / sec: 305.03
Iteration:   2740, Loss function: 5.070, Average Loss: 5.510, avg. samples / sec: 323.32
Iteration:   2760, Loss function: 5.079, Average Loss: 5.506, avg. samples / sec: 330.80
Iteration:   2780, Loss function: 5.523, Average Loss: 5.503, avg. samples / sec: 330.43
Iteration:   2800, Loss function: 5.368, Average Loss: 5.497, avg. samples / sec: 302.55
Iteration:   2820, Loss function: 5.371, Average Loss: 5.493, avg. samples / sec: 264.15
Iteration:   2840, Loss function: 5.022, Average Loss: 5.488, avg. samples / sec: 326.32
Iteration:   2860, Loss function: 5.155, Average Loss: 5.483, avg. samples / sec: 325.30
Iteration:   2880, Loss function: 5.277, Average Loss: 5.478, avg. samples / sec: 309.22
Iteration:   2900, Loss function: 5.007, Average Loss: 5.474, avg. samples / sec: 284.33
Iteration:   2920, Loss function: 5.203, Average Loss: 5.468, avg. samples / sec: 325.06
Iteration:   2940, Loss function: 5.002, Average Loss: 5.464, avg. samples / sec: 307.33
Iteration:   2960, Loss function: 5.480, Average Loss: 5.459, avg. samples / sec: 317.69
Iteration:   2980, Loss function: 5.144, Average Loss: 5.455, avg. samples / sec: 302.00
Iteration:   3000, Loss function: 5.216, Average Loss: 5.450, avg. samples / sec: 288.65
Iteration:   3020, Loss function: 5.239, Average Loss: 5.444, avg. samples / sec: 279.76
Iteration:   3040, Loss function: 5.207, Average Loss: 5.438, avg. samples / sec: 303.15
Iteration:   3060, Loss function: 5.034, Average Loss: 5.433, avg. samples / sec: 326.82
Iteration:   3080, Loss function: 4.871, Average Loss: 5.428, avg. samples / sec: 326.80
:::MLLOG {"namespace": "", "time_ms": 1639766601285, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766601287, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.075, Average Loss: 5.423, avg. samples / sec: 330.04
Iteration:   3120, Loss function: 5.042, Average Loss: 5.418, avg. samples / sec: 323.62
Iteration:   3140, Loss function: 5.110, Average Loss: 5.413, avg. samples / sec: 330.69
Iteration:   3160, Loss function: 5.428, Average Loss: 5.408, avg. samples / sec: 300.35
Iteration:   3180, Loss function: 4.976, Average Loss: 5.404, avg. samples / sec: 322.04
Iteration:   3200, Loss function: 4.883, Average Loss: 5.399, avg. samples / sec: 296.02
Iteration:   3220, Loss function: 5.236, Average Loss: 5.393, avg. samples / sec: 299.58
Iteration:   3240, Loss function: 5.072, Average Loss: 5.389, avg. samples / sec: 308.72
Iteration:   3260, Loss function: 5.068, Average Loss: 5.383, avg. samples / sec: 268.60
Iteration:   3280, Loss function: 4.976, Average Loss: 5.378, avg. samples / sec: 335.28
Iteration:   3300, Loss function: 4.835, Average Loss: 5.372, avg. samples / sec: 331.70
Iteration:   3320, Loss function: 4.958, Average Loss: 5.367, avg. samples / sec: 335.99
Iteration:   3340, Loss function: 5.133, Average Loss: 5.363, avg. samples / sec: 318.17
Iteration:   3360, Loss function: 5.111, Average Loss: 5.357, avg. samples / sec: 313.26
Iteration:   3380, Loss function: 5.101, Average Loss: 5.350, avg. samples / sec: 321.59
Iteration:   3400, Loss function: 4.810, Average Loss: 5.345, avg. samples / sec: 317.15
Iteration:   3420, Loss function: 5.127, Average Loss: 5.340, avg. samples / sec: 305.55
Iteration:   3440, Loss function: 4.779, Average Loss: 5.336, avg. samples / sec: 264.54
Iteration:   3460, Loss function: 5.197, Average Loss: 5.331, avg. samples / sec: 326.37
Iteration:   3480, Loss function: 5.151, Average Loss: 5.326, avg. samples / sec: 306.28
Iteration:   3500, Loss function: 5.052, Average Loss: 5.322, avg. samples / sec: 263.43
Iteration:   3520, Loss function: 5.103, Average Loss: 5.319, avg. samples / sec: 269.16
Iteration:   3540, Loss function: 5.075, Average Loss: 5.314, avg. samples / sec: 271.46
Iteration:   3560, Loss function: 4.969, Average Loss: 5.310, avg. samples / sec: 305.14
Iteration:   3580, Loss function: 5.147, Average Loss: 5.305, avg. samples / sec: 313.99
Iteration:   3600, Loss function: 5.319, Average Loss: 5.299, avg. samples / sec: 322.46
Iteration:   3620, Loss function: 4.753, Average Loss: 5.294, avg. samples / sec: 318.22
Iteration:   3640, Loss function: 4.936, Average Loss: 5.288, avg. samples / sec: 320.45
Iteration:   3660, Loss function: 4.935, Average Loss: 5.283, avg. samples / sec: 323.87
Iteration:   3680, Loss function: 5.123, Average Loss: 5.277, avg. samples / sec: 289.00
Iteration:   3700, Loss function: 5.006, Average Loss: 5.272, avg. samples / sec: 313.89
Iteration:   3720, Loss function: 4.909, Average Loss: 5.265, avg. samples / sec: 315.24
Iteration:   3740, Loss function: 5.222, Average Loss: 5.260, avg. samples / sec: 312.39
Iteration:   3760, Loss function: 5.163, Average Loss: 5.256, avg. samples / sec: 284.99
Iteration:   3780, Loss function: 4.918, Average Loss: 5.251, avg. samples / sec: 260.27
Iteration:   3800, Loss function: 4.967, Average Loss: 5.248, avg. samples / sec: 321.88
Iteration:   3820, Loss function: 5.150, Average Loss: 5.243, avg. samples / sec: 306.64
Iteration:   3840, Loss function: 4.903, Average Loss: 5.239, avg. samples / sec: 316.05
Iteration:   3860, Loss function: 4.795, Average Loss: 5.233, avg. samples / sec: 282.87
Iteration:   3880, Loss function: 4.999, Average Loss: 5.227, avg. samples / sec: 322.07
Iteration:   3900, Loss function: 5.073, Average Loss: 5.222, avg. samples / sec: 327.40
Iteration:   3920, Loss function: 5.150, Average Loss: 5.217, avg. samples / sec: 299.06
Iteration:   3940, Loss function: 5.132, Average Loss: 5.212, avg. samples / sec: 281.53
Iteration:   3960, Loss function: 4.985, Average Loss: 5.208, avg. samples / sec: 215.69
Iteration:   3980, Loss function: 4.842, Average Loss: 5.203, avg. samples / sec: 317.28
Iteration:   4000, Loss function: 5.229, Average Loss: 5.199, avg. samples / sec: 303.80
Iteration:   4020, Loss function: 5.038, Average Loss: 5.194, avg. samples / sec: 317.99
Iteration:   4040, Loss function: 4.989, Average Loss: 5.190, avg. samples / sec: 337.02
Iteration:   4060, Loss function: 5.238, Average Loss: 5.187, avg. samples / sec: 321.93
Iteration:   4080, Loss function: 5.087, Average Loss: 5.182, avg. samples / sec: 322.23
Iteration:   4100, Loss function: 5.216, Average Loss: 5.179, avg. samples / sec: 324.46
:::MLLOG {"namespace": "", "time_ms": 1639766986099, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766986112, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.070, Average Loss: 5.175, avg. samples / sec: 312.00
Iteration:   4140, Loss function: 4.991, Average Loss: 5.171, avg. samples / sec: 291.93
Iteration:   4160, Loss function: 4.819, Average Loss: 5.164, avg. samples / sec: 297.33
Iteration:   4180, Loss function: 5.047, Average Loss: 5.157, avg. samples / sec: 331.58
Iteration:   4200, Loss function: 4.812, Average Loss: 5.153, avg. samples / sec: 249.86
Iteration:   4220, Loss function: 4.686, Average Loss: 5.148, avg. samples / sec: 305.27
Iteration:   4240, Loss function: 4.978, Average Loss: 5.144, avg. samples / sec: 325.15
Iteration:   4260, Loss function: 4.965, Average Loss: 5.139, avg. samples / sec: 314.87
Iteration:   4280, Loss function: 5.068, Average Loss: 5.133, avg. samples / sec: 262.03
Iteration:   4300, Loss function: 4.759, Average Loss: 5.127, avg. samples / sec: 261.96
Iteration:   4320, Loss function: 4.786, Average Loss: 5.123, avg. samples / sec: 301.56
Iteration:   4340, Loss function: 4.721, Average Loss: 5.118, avg. samples / sec: 314.14
Iteration:   4360, Loss function: 4.900, Average Loss: 5.113, avg. samples / sec: 302.93
Iteration:   4380, Loss function: 5.000, Average Loss: 5.108, avg. samples / sec: 300.87
Iteration:   4400, Loss function: 4.960, Average Loss: 5.104, avg. samples / sec: 303.63
Iteration:   4420, Loss function: 4.763, Average Loss: 5.099, avg. samples / sec: 308.97
Iteration:   4440, Loss function: 4.871, Average Loss: 5.094, avg. samples / sec: 303.96
Iteration:   4460, Loss function: 5.236, Average Loss: 5.090, avg. samples / sec: 330.49
Iteration:   4480, Loss function: 4.837, Average Loss: 5.086, avg. samples / sec: 328.63
Iteration:   4500, Loss function: 4.816, Average Loss: 5.083, avg. samples / sec: 323.75
Iteration:   4520, Loss function: 4.694, Average Loss: 5.078, avg. samples / sec: 270.73
Iteration:   4540, Loss function: 5.238, Average Loss: 5.074, avg. samples / sec: 279.26
Iteration:   4560, Loss function: 4.668, Average Loss: 5.071, avg. samples / sec: 220.83
Iteration:   4580, Loss function: 4.721, Average Loss: 5.068, avg. samples / sec: 275.49
Iteration:   4600, Loss function: 4.818, Average Loss: 5.065, avg. samples / sec: 310.72
Iteration:   4620, Loss function: 4.734, Average Loss: 5.060, avg. samples / sec: 296.23
Iteration:   4640, Loss function: 4.670, Average Loss: 5.055, avg. samples / sec: 317.42
Iteration:   4660, Loss function: 4.821, Average Loss: 5.052, avg. samples / sec: 333.34
Iteration:   4680, Loss function: 5.165, Average Loss: 5.047, avg. samples / sec: 287.60
Iteration:   4700, Loss function: 4.747, Average Loss: 5.043, avg. samples / sec: 338.91
Iteration:   4720, Loss function: 4.786, Average Loss: 5.039, avg. samples / sec: 320.64
Iteration:   4740, Loss function: 4.985, Average Loss: 5.035, avg. samples / sec: 303.86
Iteration:   4760, Loss function: 4.685, Average Loss: 5.032, avg. samples / sec: 319.17
Iteration:   4780, Loss function: 5.003, Average Loss: 5.028, avg. samples / sec: 313.03
Iteration:   4800, Loss function: 5.044, Average Loss: 5.025, avg. samples / sec: 306.39
Iteration:   4820, Loss function: 4.723, Average Loss: 5.022, avg. samples / sec: 207.37
Iteration:   4840, Loss function: 4.935, Average Loss: 5.019, avg. samples / sec: 320.26
Iteration:   4860, Loss function: 4.903, Average Loss: 5.014, avg. samples / sec: 317.23
Iteration:   4880, Loss function: 5.102, Average Loss: 5.011, avg. samples / sec: 320.35
Iteration:   4900, Loss function: 4.519, Average Loss: 5.007, avg. samples / sec: 303.18
Iteration:   4920, Loss function: 4.695, Average Loss: 5.004, avg. samples / sec: 274.60
Iteration:   4940, Loss function: 4.618, Average Loss: 4.999, avg. samples / sec: 307.35
Iteration:   4960, Loss function: 4.711, Average Loss: 4.996, avg. samples / sec: 309.50
Iteration:   4980, Loss function: 4.680, Average Loss: 4.993, avg. samples / sec: 321.69
Iteration:   5000, Loss function: 4.997, Average Loss: 4.990, avg. samples / sec: 266.92
Iteration:   5020, Loss function: 5.255, Average Loss: 4.986, avg. samples / sec: 292.09
Iteration:   5040, Loss function: 4.732, Average Loss: 4.984, avg. samples / sec: 315.60
Iteration:   5060, Loss function: 4.792, Average Loss: 4.980, avg. samples / sec: 321.90
Iteration:   5080, Loss function: 4.574, Average Loss: 4.976, avg. samples / sec: 323.35
Iteration:   5100, Loss function: 4.642, Average Loss: 4.973, avg. samples / sec: 215.23
Iteration:   5120, Loss function: 4.609, Average Loss: 4.971, avg. samples / sec: 290.59
Iteration:   5140, Loss function: 4.783, Average Loss: 4.968, avg. samples / sec: 293.01
:::MLLOG {"namespace": "", "time_ms": 1639767382697, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.91 s
:::MLLOG {"namespace": "", "time_ms": 1639767475747, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767475790, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475879, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.89s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.32s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10813
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22006
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09729
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19366
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20336
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10813 AP goal: 0.10000
Iteration:   5160, Loss function: 4.907, Average Loss: 4.963, avg. samples / sec: 22.64
:::MLLOG {"namespace": "", "time_ms": 1639767482316, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482317, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10813118132791681, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482317, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485097, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions'
Fri Dec 17 18:58:11 UTC 2021: done waiting for 1 executions
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255975, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765256103, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2517641530, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2517641530
:::MLLOG {"namespace": "", "time_ms": 1639765258014, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765258015, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765258022, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765258023, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765363080, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765363081, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765364418, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765364419, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765364692, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765364693, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765364694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.854, Average Loss: 0.023, avg. samples / sec: 1.07
Iteration:     20, Loss function: 21.085, Average Loss: 0.456, avg. samples / sec: 317.35
Iteration:     40, Loss function: 20.683, Average Loss: 0.857, avg. samples / sec: 291.75
Iteration:     60, Loss function: 20.416, Average Loss: 1.247, avg. samples / sec: 253.99
Iteration:     80, Loss function: 19.980, Average Loss: 1.620, avg. samples / sec: 224.34
Iteration:    100, Loss function: 15.114, Average Loss: 1.942, avg. samples / sec: 262.16
Iteration:    120, Loss function: 10.860, Average Loss: 2.147, avg. samples / sec: 255.56
Iteration:    140, Loss function: 9.523, Average Loss: 2.300, avg. samples / sec: 250.25
Iteration:    160, Loss function: 8.977, Average Loss: 2.437, avg. samples / sec: 283.22
Iteration:    180, Loss function: 8.994, Average Loss: 2.566, avg. samples / sec: 284.81
Iteration:    200, Loss function: 8.779, Average Loss: 2.691, avg. samples / sec: 276.12
Iteration:    220, Loss function: 8.427, Average Loss: 2.811, avg. samples / sec: 251.55
Iteration:    240, Loss function: 8.881, Average Loss: 2.929, avg. samples / sec: 278.71
Iteration:    260, Loss function: 8.866, Average Loss: 3.048, avg. samples / sec: 272.75
Iteration:    280, Loss function: 8.515, Average Loss: 3.159, avg. samples / sec: 292.57
Iteration:    300, Loss function: 8.226, Average Loss: 3.263, avg. samples / sec: 241.99
Iteration:    320, Loss function: 8.416, Average Loss: 3.364, avg. samples / sec: 289.02
Iteration:    340, Loss function: 8.356, Average Loss: 3.463, avg. samples / sec: 243.17
Iteration:    360, Loss function: 7.963, Average Loss: 3.557, avg. samples / sec: 327.50
Iteration:    380, Loss function: 8.040, Average Loss: 3.648, avg. samples / sec: 311.92
Iteration:    400, Loss function: 7.932, Average Loss: 3.734, avg. samples / sec: 234.39
Iteration:    420, Loss function: 7.685, Average Loss: 3.817, avg. samples / sec: 314.62
Iteration:    440, Loss function: 7.843, Average Loss: 3.896, avg. samples / sec: 319.12
Iteration:    460, Loss function: 7.963, Average Loss: 3.973, avg. samples / sec: 288.07
Iteration:    480, Loss function: 7.590, Average Loss: 4.048, avg. samples / sec: 322.05
Iteration:    500, Loss function: 7.597, Average Loss: 4.119, avg. samples / sec: 290.22
Iteration:    520, Loss function: 7.504, Average Loss: 4.187, avg. samples / sec: 278.22
Iteration:    540, Loss function: 7.682, Average Loss: 4.253, avg. samples / sec: 280.36
Iteration:    560, Loss function: 7.196, Average Loss: 4.316, avg. samples / sec: 261.55
Iteration:    580, Loss function: 7.182, Average Loss: 4.377, avg. samples / sec: 320.26
Iteration:    600, Loss function: 7.343, Average Loss: 4.435, avg. samples / sec: 301.60
Iteration:    620, Loss function: 7.127, Average Loss: 4.491, avg. samples / sec: 324.42
Iteration:    640, Loss function: 6.849, Average Loss: 4.545, avg. samples / sec: 317.73
Iteration:    660, Loss function: 7.149, Average Loss: 4.599, avg. samples / sec: 316.90
Iteration:    680, Loss function: 7.332, Average Loss: 4.650, avg. samples / sec: 292.99
Iteration:    700, Loss function: 6.805, Average Loss: 4.698, avg. samples / sec: 309.70
Iteration:    720, Loss function: 7.163, Average Loss: 4.746, avg. samples / sec: 277.79
Iteration:    740, Loss function: 6.958, Average Loss: 4.791, avg. samples / sec: 240.10
Iteration:    760, Loss function: 7.065, Average Loss: 4.834, avg. samples / sec: 254.02
Iteration:    780, Loss function: 6.775, Average Loss: 4.876, avg. samples / sec: 307.45
Iteration:    800, Loss function: 7.044, Average Loss: 4.915, avg. samples / sec: 321.81
Iteration:    820, Loss function: 6.838, Average Loss: 4.954, avg. samples / sec: 318.22
Iteration:    840, Loss function: 6.720, Average Loss: 4.990, avg. samples / sec: 286.12
Iteration:    860, Loss function: 6.823, Average Loss: 5.023, avg. samples / sec: 328.22
Iteration:    880, Loss function: 6.934, Average Loss: 5.056, avg. samples / sec: 285.83
Iteration:    900, Loss function: 6.997, Average Loss: 5.087, avg. samples / sec: 296.34
Iteration:    920, Loss function: 6.576, Average Loss: 5.116, avg. samples / sec: 327.54
Iteration:    940, Loss function: 6.782, Average Loss: 5.145, avg. samples / sec: 333.94
Iteration:    960, Loss function: 6.484, Average Loss: 5.173, avg. samples / sec: 321.53
Iteration:    980, Loss function: 6.578, Average Loss: 5.201, avg. samples / sec: 328.79
Iteration:   1000, Loss function: 6.605, Average Loss: 5.227, avg. samples / sec: 276.53
Iteration:   1020, Loss function: 6.295, Average Loss: 5.250, avg. samples / sec: 229.95
:::MLLOG {"namespace": "", "time_ms": 1639765777740, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765777741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.616, Average Loss: 5.273, avg. samples / sec: 243.05
Iteration:   1060, Loss function: 6.285, Average Loss: 5.295, avg. samples / sec: 323.23
Iteration:   1080, Loss function: 6.341, Average Loss: 5.316, avg. samples / sec: 325.69
Iteration:   1100, Loss function: 6.111, Average Loss: 5.336, avg. samples / sec: 293.36
Iteration:   1120, Loss function: 6.142, Average Loss: 5.354, avg. samples / sec: 261.14
Iteration:   1140, Loss function: 6.454, Average Loss: 5.372, avg. samples / sec: 309.98
Iteration:   1160, Loss function: 6.158, Average Loss: 5.389, avg. samples / sec: 319.20
Iteration:   1180, Loss function: 6.374, Average Loss: 5.406, avg. samples / sec: 250.73
Iteration:   1200, Loss function: 6.073, Average Loss: 5.421, avg. samples / sec: 291.96
Iteration:   1220, Loss function: 6.122, Average Loss: 5.436, avg. samples / sec: 264.11
Iteration:   1240, Loss function: 6.064, Average Loss: 5.448, avg. samples / sec: 330.76
Iteration:   1260, Loss function: 5.883, Average Loss: 5.460, avg. samples / sec: 285.44
Iteration:   1280, Loss function: 5.996, Average Loss: 5.472, avg. samples / sec: 243.65
Iteration:   1300, Loss function: 6.115, Average Loss: 5.484, avg. samples / sec: 305.04
Iteration:   1320, Loss function: 6.226, Average Loss: 5.496, avg. samples / sec: 281.07
Iteration:   1340, Loss function: 5.928, Average Loss: 5.506, avg. samples / sec: 192.07
Iteration:   1360, Loss function: 5.982, Average Loss: 5.516, avg. samples / sec: 295.30
Iteration:   1380, Loss function: 6.234, Average Loss: 5.526, avg. samples / sec: 322.00
Iteration:   1400, Loss function: 5.893, Average Loss: 5.536, avg. samples / sec: 325.16
Iteration:   1420, Loss function: 5.975, Average Loss: 5.544, avg. samples / sec: 322.77
Iteration:   1440, Loss function: 6.230, Average Loss: 5.552, avg. samples / sec: 279.08
Iteration:   1460, Loss function: 6.017, Average Loss: 5.560, avg. samples / sec: 271.65
Iteration:   1480, Loss function: 5.966, Average Loss: 5.569, avg. samples / sec: 270.72
Iteration:   1500, Loss function: 6.106, Average Loss: 5.577, avg. samples / sec: 160.34
Iteration:   1520, Loss function: 6.192, Average Loss: 5.582, avg. samples / sec: 221.31
Iteration:   1540, Loss function: 6.122, Average Loss: 5.586, avg. samples / sec: 261.26
Iteration:   1560, Loss function: 5.632, Average Loss: 5.590, avg. samples / sec: 287.44
Iteration:   1580, Loss function: 5.655, Average Loss: 5.595, avg. samples / sec: 283.48
Iteration:   1600, Loss function: 6.021, Average Loss: 5.601, avg. samples / sec: 344.33
Iteration:   1620, Loss function: 5.853, Average Loss: 5.606, avg. samples / sec: 257.35
Iteration:   1640, Loss function: 5.765, Average Loss: 5.608, avg. samples / sec: 275.78
Iteration:   1660, Loss function: 5.774, Average Loss: 5.613, avg. samples / sec: 294.17
Iteration:   1680, Loss function: 5.690, Average Loss: 5.616, avg. samples / sec: 325.07
Iteration:   1700, Loss function: 5.224, Average Loss: 5.619, avg. samples / sec: 330.32
Iteration:   1720, Loss function: 5.705, Average Loss: 5.621, avg. samples / sec: 298.21
Iteration:   1740, Loss function: 5.862, Average Loss: 5.624, avg. samples / sec: 327.73
Iteration:   1760, Loss function: 5.560, Average Loss: 5.626, avg. samples / sec: 268.96
Iteration:   1780, Loss function: 5.786, Average Loss: 5.628, avg. samples / sec: 207.82
Iteration:   1800, Loss function: 5.591, Average Loss: 5.630, avg. samples / sec: 202.30
Iteration:   1820, Loss function: 6.110, Average Loss: 5.631, avg. samples / sec: 322.32
Iteration:   1840, Loss function: 5.978, Average Loss: 5.632, avg. samples / sec: 299.81
Iteration:   1860, Loss function: 5.672, Average Loss: 5.630, avg. samples / sec: 321.04
Iteration:   1880, Loss function: 5.802, Average Loss: 5.631, avg. samples / sec: 226.39
Iteration:   1900, Loss function: 6.036, Average Loss: 5.632, avg. samples / sec: 310.86
Iteration:   1920, Loss function: 5.874, Average Loss: 5.631, avg. samples / sec: 255.23
Iteration:   1940, Loss function: 5.912, Average Loss: 5.632, avg. samples / sec: 204.69
Iteration:   1960, Loss function: 5.617, Average Loss: 5.631, avg. samples / sec: 255.66
Iteration:   1980, Loss function: 5.609, Average Loss: 5.629, avg. samples / sec: 232.30
Iteration:   2000, Loss function: 5.680, Average Loss: 5.630, avg. samples / sec: 306.93
Iteration:   2020, Loss function: 5.545, Average Loss: 5.628, avg. samples / sec: 306.62
Iteration:   2040, Loss function: 5.709, Average Loss: 5.627, avg. samples / sec: 301.57
:::MLLOG {"namespace": "", "time_ms": 1639766204873, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766204875, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.446, Average Loss: 5.626, avg. samples / sec: 310.24
Iteration:   2080, Loss function: 5.230, Average Loss: 5.623, avg. samples / sec: 315.15
Iteration:   2100, Loss function: 5.431, Average Loss: 5.621, avg. samples / sec: 278.78
Iteration:   2120, Loss function: 5.293, Average Loss: 5.618, avg. samples / sec: 309.58
Iteration:   2140, Loss function: 5.488, Average Loss: 5.616, avg. samples / sec: 307.62
Iteration:   2160, Loss function: 5.300, Average Loss: 5.614, avg. samples / sec: 312.71
Iteration:   2180, Loss function: 5.283, Average Loss: 5.611, avg. samples / sec: 224.01
Iteration:   2200, Loss function: 5.417, Average Loss: 5.607, avg. samples / sec: 284.60
Iteration:   2220, Loss function: 5.433, Average Loss: 5.605, avg. samples / sec: 313.31
Iteration:   2240, Loss function: 5.367, Average Loss: 5.602, avg. samples / sec: 319.24
Iteration:   2260, Loss function: 5.119, Average Loss: 5.598, avg. samples / sec: 211.03
Iteration:   2280, Loss function: 5.408, Average Loss: 5.596, avg. samples / sec: 302.23
Iteration:   2300, Loss function: 5.078, Average Loss: 5.593, avg. samples / sec: 288.85
Iteration:   2320, Loss function: 5.438, Average Loss: 5.591, avg. samples / sec: 327.71
Iteration:   2340, Loss function: 5.340, Average Loss: 5.587, avg. samples / sec: 326.16
Iteration:   2360, Loss function: 5.330, Average Loss: 5.583, avg. samples / sec: 330.55
Iteration:   2380, Loss function: 5.485, Average Loss: 5.580, avg. samples / sec: 318.52
Iteration:   2400, Loss function: 5.539, Average Loss: 5.575, avg. samples / sec: 289.83
Iteration:   2420, Loss function: 5.397, Average Loss: 5.571, avg. samples / sec: 316.47
Iteration:   2440, Loss function: 5.524, Average Loss: 5.568, avg. samples / sec: 262.47
Iteration:   2460, Loss function: 5.085, Average Loss: 5.564, avg. samples / sec: 284.04
Iteration:   2480, Loss function: 5.236, Average Loss: 5.560, avg. samples / sec: 295.79
Iteration:   2500, Loss function: 5.376, Average Loss: 5.556, avg. samples / sec: 209.56
Iteration:   2520, Loss function: 5.356, Average Loss: 5.552, avg. samples / sec: 241.56
Iteration:   2540, Loss function: 5.527, Average Loss: 5.549, avg. samples / sec: 276.32
Iteration:   2560, Loss function: 5.170, Average Loss: 5.545, avg. samples / sec: 251.95
Iteration:   2580, Loss function: 5.116, Average Loss: 5.542, avg. samples / sec: 305.12
Iteration:   2600, Loss function: 5.441, Average Loss: 5.538, avg. samples / sec: 318.76
Iteration:   2620, Loss function: 5.494, Average Loss: 5.534, avg. samples / sec: 308.69
Iteration:   2640, Loss function: 5.252, Average Loss: 5.532, avg. samples / sec: 308.78
Iteration:   2660, Loss function: 5.294, Average Loss: 5.527, avg. samples / sec: 308.24
Iteration:   2680, Loss function: 5.206, Average Loss: 5.523, avg. samples / sec: 306.48
Iteration:   2700, Loss function: 5.205, Average Loss: 5.519, avg. samples / sec: 312.34
Iteration:   2720, Loss function: 5.316, Average Loss: 5.515, avg. samples / sec: 305.03
Iteration:   2740, Loss function: 5.070, Average Loss: 5.510, avg. samples / sec: 323.32
Iteration:   2760, Loss function: 5.079, Average Loss: 5.506, avg. samples / sec: 330.80
Iteration:   2780, Loss function: 5.523, Average Loss: 5.503, avg. samples / sec: 330.43
Iteration:   2800, Loss function: 5.368, Average Loss: 5.497, avg. samples / sec: 302.55
Iteration:   2820, Loss function: 5.371, Average Loss: 5.493, avg. samples / sec: 264.15
Iteration:   2840, Loss function: 5.022, Average Loss: 5.488, avg. samples / sec: 326.32
Iteration:   2860, Loss function: 5.155, Average Loss: 5.483, avg. samples / sec: 325.30
Iteration:   2880, Loss function: 5.277, Average Loss: 5.478, avg. samples / sec: 309.22
Iteration:   2900, Loss function: 5.007, Average Loss: 5.474, avg. samples / sec: 284.33
Iteration:   2920, Loss function: 5.203, Average Loss: 5.468, avg. samples / sec: 325.06
Iteration:   2940, Loss function: 5.002, Average Loss: 5.464, avg. samples / sec: 307.33
Iteration:   2960, Loss function: 5.480, Average Loss: 5.459, avg. samples / sec: 317.69
Iteration:   2980, Loss function: 5.144, Average Loss: 5.455, avg. samples / sec: 302.00
Iteration:   3000, Loss function: 5.216, Average Loss: 5.450, avg. samples / sec: 288.65
Iteration:   3020, Loss function: 5.239, Average Loss: 5.444, avg. samples / sec: 279.76
Iteration:   3040, Loss function: 5.207, Average Loss: 5.438, avg. samples / sec: 303.15
Iteration:   3060, Loss function: 5.034, Average Loss: 5.433, avg. samples / sec: 326.82
Iteration:   3080, Loss function: 4.871, Average Loss: 5.428, avg. samples / sec: 326.80
:::MLLOG {"namespace": "", "time_ms": 1639766601285, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766601287, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.075, Average Loss: 5.423, avg. samples / sec: 330.04
Iteration:   3120, Loss function: 5.042, Average Loss: 5.418, avg. samples / sec: 323.62
Iteration:   3140, Loss function: 5.110, Average Loss: 5.413, avg. samples / sec: 330.69
Iteration:   3160, Loss function: 5.428, Average Loss: 5.408, avg. samples / sec: 300.35
Iteration:   3180, Loss function: 4.976, Average Loss: 5.404, avg. samples / sec: 322.04
Iteration:   3200, Loss function: 4.883, Average Loss: 5.399, avg. samples / sec: 296.02
Iteration:   3220, Loss function: 5.236, Average Loss: 5.393, avg. samples / sec: 299.58
Iteration:   3240, Loss function: 5.072, Average Loss: 5.389, avg. samples / sec: 308.72
Iteration:   3260, Loss function: 5.068, Average Loss: 5.383, avg. samples / sec: 268.60
Iteration:   3280, Loss function: 4.976, Average Loss: 5.378, avg. samples / sec: 335.28
Iteration:   3300, Loss function: 4.835, Average Loss: 5.372, avg. samples / sec: 331.70
Iteration:   3320, Loss function: 4.958, Average Loss: 5.367, avg. samples / sec: 335.99
Iteration:   3340, Loss function: 5.133, Average Loss: 5.363, avg. samples / sec: 318.17
Iteration:   3360, Loss function: 5.111, Average Loss: 5.357, avg. samples / sec: 313.26
Iteration:   3380, Loss function: 5.101, Average Loss: 5.350, avg. samples / sec: 321.59
Iteration:   3400, Loss function: 4.810, Average Loss: 5.345, avg. samples / sec: 317.15
Iteration:   3420, Loss function: 5.127, Average Loss: 5.340, avg. samples / sec: 305.55
Iteration:   3440, Loss function: 4.779, Average Loss: 5.336, avg. samples / sec: 264.54
Iteration:   3460, Loss function: 5.197, Average Loss: 5.331, avg. samples / sec: 326.37
Iteration:   3480, Loss function: 5.151, Average Loss: 5.326, avg. samples / sec: 306.28
Iteration:   3500, Loss function: 5.052, Average Loss: 5.322, avg. samples / sec: 263.43
Iteration:   3520, Loss function: 5.103, Average Loss: 5.319, avg. samples / sec: 269.16
Iteration:   3540, Loss function: 5.075, Average Loss: 5.314, avg. samples / sec: 271.46
Iteration:   3560, Loss function: 4.969, Average Loss: 5.310, avg. samples / sec: 305.14
Iteration:   3580, Loss function: 5.147, Average Loss: 5.305, avg. samples / sec: 313.99
Iteration:   3600, Loss function: 5.319, Average Loss: 5.299, avg. samples / sec: 322.46
Iteration:   3620, Loss function: 4.753, Average Loss: 5.294, avg. samples / sec: 318.22
Iteration:   3640, Loss function: 4.936, Average Loss: 5.288, avg. samples / sec: 320.45
Iteration:   3660, Loss function: 4.935, Average Loss: 5.283, avg. samples / sec: 323.87
Iteration:   3680, Loss function: 5.123, Average Loss: 5.277, avg. samples / sec: 289.00
Iteration:   3700, Loss function: 5.006, Average Loss: 5.272, avg. samples / sec: 313.89
Iteration:   3720, Loss function: 4.909, Average Loss: 5.265, avg. samples / sec: 315.24
Iteration:   3740, Loss function: 5.222, Average Loss: 5.260, avg. samples / sec: 312.39
Iteration:   3760, Loss function: 5.163, Average Loss: 5.256, avg. samples / sec: 284.99
Iteration:   3780, Loss function: 4.918, Average Loss: 5.251, avg. samples / sec: 260.27
Iteration:   3800, Loss function: 4.967, Average Loss: 5.248, avg. samples / sec: 321.88
Iteration:   3820, Loss function: 5.150, Average Loss: 5.243, avg. samples / sec: 306.64
Iteration:   3840, Loss function: 4.903, Average Loss: 5.239, avg. samples / sec: 316.05
Iteration:   3860, Loss function: 4.795, Average Loss: 5.233, avg. samples / sec: 282.87
Iteration:   3880, Loss function: 4.999, Average Loss: 5.227, avg. samples / sec: 322.07
Iteration:   3900, Loss function: 5.073, Average Loss: 5.222, avg. samples / sec: 327.40
Iteration:   3920, Loss function: 5.150, Average Loss: 5.217, avg. samples / sec: 299.06
Iteration:   3940, Loss function: 5.132, Average Loss: 5.212, avg. samples / sec: 281.53
Iteration:   3960, Loss function: 4.985, Average Loss: 5.208, avg. samples / sec: 215.69
Iteration:   3980, Loss function: 4.842, Average Loss: 5.203, avg. samples / sec: 317.28
Iteration:   4000, Loss function: 5.229, Average Loss: 5.199, avg. samples / sec: 303.80
Iteration:   4020, Loss function: 5.038, Average Loss: 5.194, avg. samples / sec: 317.99
Iteration:   4040, Loss function: 4.989, Average Loss: 5.190, avg. samples / sec: 337.02
Iteration:   4060, Loss function: 5.238, Average Loss: 5.187, avg. samples / sec: 321.93
Iteration:   4080, Loss function: 5.087, Average Loss: 5.182, avg. samples / sec: 322.23
Iteration:   4100, Loss function: 5.216, Average Loss: 5.179, avg. samples / sec: 324.46
:::MLLOG {"namespace": "", "time_ms": 1639766986099, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766986112, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.070, Average Loss: 5.175, avg. samples / sec: 312.00
Iteration:   4140, Loss function: 4.991, Average Loss: 5.171, avg. samples / sec: 291.93
Iteration:   4160, Loss function: 4.819, Average Loss: 5.164, avg. samples / sec: 297.33
Iteration:   4180, Loss function: 5.047, Average Loss: 5.157, avg. samples / sec: 331.58
Iteration:   4200, Loss function: 4.812, Average Loss: 5.153, avg. samples / sec: 249.86
Iteration:   4220, Loss function: 4.686, Average Loss: 5.148, avg. samples / sec: 305.27
Iteration:   4240, Loss function: 4.978, Average Loss: 5.144, avg. samples / sec: 325.15
Iteration:   4260, Loss function: 4.965, Average Loss: 5.139, avg. samples / sec: 314.87
Iteration:   4280, Loss function: 5.068, Average Loss: 5.133, avg. samples / sec: 262.03
Iteration:   4300, Loss function: 4.759, Average Loss: 5.127, avg. samples / sec: 261.96
Iteration:   4320, Loss function: 4.786, Average Loss: 5.123, avg. samples / sec: 301.56
Iteration:   4340, Loss function: 4.721, Average Loss: 5.118, avg. samples / sec: 314.14
Iteration:   4360, Loss function: 4.900, Average Loss: 5.113, avg. samples / sec: 302.93
Iteration:   4380, Loss function: 5.000, Average Loss: 5.108, avg. samples / sec: 300.87
Iteration:   4400, Loss function: 4.960, Average Loss: 5.104, avg. samples / sec: 303.63
Iteration:   4420, Loss function: 4.763, Average Loss: 5.099, avg. samples / sec: 308.97
Iteration:   4440, Loss function: 4.871, Average Loss: 5.094, avg. samples / sec: 303.96
Iteration:   4460, Loss function: 5.236, Average Loss: 5.090, avg. samples / sec: 330.49
Iteration:   4480, Loss function: 4.837, Average Loss: 5.086, avg. samples / sec: 328.63
Iteration:   4500, Loss function: 4.816, Average Loss: 5.083, avg. samples / sec: 323.75
Iteration:   4520, Loss function: 4.694, Average Loss: 5.078, avg. samples / sec: 270.73
Iteration:   4540, Loss function: 5.238, Average Loss: 5.074, avg. samples / sec: 279.26
Iteration:   4560, Loss function: 4.668, Average Loss: 5.071, avg. samples / sec: 220.83
Iteration:   4580, Loss function: 4.721, Average Loss: 5.068, avg. samples / sec: 275.49
Iteration:   4600, Loss function: 4.818, Average Loss: 5.065, avg. samples / sec: 310.72
Iteration:   4620, Loss function: 4.734, Average Loss: 5.060, avg. samples / sec: 296.23
Iteration:   4640, Loss function: 4.670, Average Loss: 5.055, avg. samples / sec: 317.42
Iteration:   4660, Loss function: 4.821, Average Loss: 5.052, avg. samples / sec: 333.34
Iteration:   4680, Loss function: 5.165, Average Loss: 5.047, avg. samples / sec: 287.60
Iteration:   4700, Loss function: 4.747, Average Loss: 5.043, avg. samples / sec: 338.91
Iteration:   4720, Loss function: 4.786, Average Loss: 5.039, avg. samples / sec: 320.64
Iteration:   4740, Loss function: 4.985, Average Loss: 5.035, avg. samples / sec: 303.86
Iteration:   4760, Loss function: 4.685, Average Loss: 5.032, avg. samples / sec: 319.17
Iteration:   4780, Loss function: 5.003, Average Loss: 5.028, avg. samples / sec: 313.03
Iteration:   4800, Loss function: 5.044, Average Loss: 5.025, avg. samples / sec: 306.39
Iteration:   4820, Loss function: 4.723, Average Loss: 5.022, avg. samples / sec: 207.37
Iteration:   4840, Loss function: 4.935, Average Loss: 5.019, avg. samples / sec: 320.26
Iteration:   4860, Loss function: 4.903, Average Loss: 5.014, avg. samples / sec: 317.23
Iteration:   4880, Loss function: 5.102, Average Loss: 5.011, avg. samples / sec: 320.35
Iteration:   4900, Loss function: 4.519, Average Loss: 5.007, avg. samples / sec: 303.18
Iteration:   4920, Loss function: 4.695, Average Loss: 5.004, avg. samples / sec: 274.60
Iteration:   4940, Loss function: 4.618, Average Loss: 4.999, avg. samples / sec: 307.35
Iteration:   4960, Loss function: 4.711, Average Loss: 4.996, avg. samples / sec: 309.50
Iteration:   4980, Loss function: 4.680, Average Loss: 4.993, avg. samples / sec: 321.69
Iteration:   5000, Loss function: 4.997, Average Loss: 4.990, avg. samples / sec: 266.92
Iteration:   5020, Loss function: 5.255, Average Loss: 4.986, avg. samples / sec: 292.09
Iteration:   5040, Loss function: 4.732, Average Loss: 4.984, avg. samples / sec: 315.60
Iteration:   5060, Loss function: 4.792, Average Loss: 4.980, avg. samples / sec: 321.90
Iteration:   5080, Loss function: 4.574, Average Loss: 4.976, avg. samples / sec: 323.35
Iteration:   5100, Loss function: 4.642, Average Loss: 4.973, avg. samples / sec: 215.23
Iteration:   5120, Loss function: 4.609, Average Loss: 4.971, avg. samples / sec: 290.59
Iteration:   5140, Loss function: 4.783, Average Loss: 4.968, avg. samples / sec: 293.01
:::MLLOG {"namespace": "", "time_ms": 1639767382697, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 92.91 s
:::MLLOG {"namespace": "", "time_ms": 1639767475747, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767475790, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475879, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.89s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=4.32s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10813
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22006
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09729
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19366
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13696
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20336
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10813 AP goal: 0.10000
Iteration:   5160, Loss function: 4.907, Average Loss: 4.963, avg. samples / sec: 22.64
:::MLLOG {"namespace": "", "time_ms": 1639767482316, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482317, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10813118132791681, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482317, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767485097, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767491
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:11 PM'
START TIMING RUN WAS 2021-12-17 06:20:48 PM
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:48 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:11 PM'
ENDING TIMING RUN AT 2021-12-17 06:58:11 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-c4be375c-234a-5732-a19d-911d04cda8c0)
+ result=2243
RESULT,SINGLE_STAGE_DETECTOR,,2243,nvidia,2021-12-17 06:20:48 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2243,nvidia,2021-12-17 06:20:48 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
