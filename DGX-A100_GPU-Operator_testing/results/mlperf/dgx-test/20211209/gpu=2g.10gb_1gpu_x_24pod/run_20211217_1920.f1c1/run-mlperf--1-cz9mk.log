8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-47302280-e35a-505b-880f-886d4b4260a1
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-47302280-e35a-505b-880f-886d4b4260a1
+ echo 'Found 1 MIG instances: MIG-47302280-e35a-505b-880f-886d4b4260a1'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765246
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:46 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:46 PM GPU: 1 x 2g.10gb x 24 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:46 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_18-40-22 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ rm -f /data/coco2017/sync/2021-12-17_18-40-22
+ set +x
Fri Dec 17 18:20:46 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-cz9mk to the sync file ...
run-mlperf--1-cz9mk Found 1 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
run-mlperf--1-cz9mk Found 15 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
Fri Dec 17 18:20:56 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765258431, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765258763, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1133084486, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1133084486
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765262349, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765262349, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765262353, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765366929, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765366930, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765369680, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765369681, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.33s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765370405, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765370406, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765370408, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.719, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.155, Average Loss: 0.456, avg. samples / sec: 241.84
Iteration:     40, Loss function: 20.982, Average Loss: 0.858, avg. samples / sec: 240.70
Iteration:     60, Loss function: 20.354, Average Loss: 1.247, avg. samples / sec: 262.40
Iteration:     80, Loss function: 19.746, Average Loss: 1.620, avg. samples / sec: 220.27
Iteration:    100, Loss function: 15.116, Average Loss: 1.942, avg. samples / sec: 247.77
Iteration:    120, Loss function: 11.477, Average Loss: 2.142, avg. samples / sec: 245.59
Iteration:    140, Loss function: 9.722, Average Loss: 2.306, avg. samples / sec: 258.44
Iteration:    160, Loss function: 9.371, Average Loss: 2.450, avg. samples / sec: 270.66
Iteration:    180, Loss function: 9.101, Average Loss: 2.582, avg. samples / sec: 264.63
Iteration:    200, Loss function: 8.646, Average Loss: 2.708, avg. samples / sec: 283.72
Iteration:    220, Loss function: 8.631, Average Loss: 2.829, avg. samples / sec: 308.29
Iteration:    240, Loss function: 8.994, Average Loss: 2.948, avg. samples / sec: 271.62
Iteration:    260, Loss function: 8.785, Average Loss: 3.062, avg. samples / sec: 319.80
Iteration:    280, Loss function: 8.503, Average Loss: 3.172, avg. samples / sec: 298.78
Iteration:    300, Loss function: 8.511, Average Loss: 3.276, avg. samples / sec: 276.78
Iteration:    320, Loss function: 8.381, Average Loss: 3.377, avg. samples / sec: 322.73
Iteration:    340, Loss function: 8.349, Average Loss: 3.475, avg. samples / sec: 280.73
Iteration:    360, Loss function: 7.826, Average Loss: 3.567, avg. samples / sec: 279.06
Iteration:    380, Loss function: 7.837, Average Loss: 3.658, avg. samples / sec: 295.93
Iteration:    400, Loss function: 8.019, Average Loss: 3.743, avg. samples / sec: 311.27
Iteration:    420, Loss function: 7.664, Average Loss: 3.827, avg. samples / sec: 325.02
Iteration:    440, Loss function: 7.848, Average Loss: 3.906, avg. samples / sec: 275.69
Iteration:    460, Loss function: 7.996, Average Loss: 3.982, avg. samples / sec: 241.83
Iteration:    480, Loss function: 7.424, Average Loss: 4.057, avg. samples / sec: 290.63
Iteration:    500, Loss function: 7.659, Average Loss: 4.126, avg. samples / sec: 318.99
Iteration:    520, Loss function: 7.478, Average Loss: 4.193, avg. samples / sec: 315.14
Iteration:    540, Loss function: 7.434, Average Loss: 4.258, avg. samples / sec: 314.41
Iteration:    560, Loss function: 7.163, Average Loss: 4.320, avg. samples / sec: 281.35
Iteration:    580, Loss function: 7.228, Average Loss: 4.380, avg. samples / sec: 326.56
Iteration:    600, Loss function: 7.218, Average Loss: 4.438, avg. samples / sec: 314.74
Iteration:    620, Loss function: 6.992, Average Loss: 4.494, avg. samples / sec: 318.58
Iteration:    640, Loss function: 6.916, Average Loss: 4.549, avg. samples / sec: 304.14
Iteration:    660, Loss function: 7.225, Average Loss: 4.601, avg. samples / sec: 297.12
Iteration:    680, Loss function: 7.350, Average Loss: 4.652, avg. samples / sec: 296.92
Iteration:    700, Loss function: 6.893, Average Loss: 4.700, avg. samples / sec: 203.15
Iteration:    720, Loss function: 6.919, Average Loss: 4.749, avg. samples / sec: 320.08
Iteration:    740, Loss function: 6.966, Average Loss: 4.794, avg. samples / sec: 335.06
Iteration:    760, Loss function: 7.124, Average Loss: 4.837, avg. samples / sec: 328.55
Iteration:    780, Loss function: 6.944, Average Loss: 4.878, avg. samples / sec: 330.96
Iteration:    800, Loss function: 7.123, Average Loss: 4.916, avg. samples / sec: 314.44
Iteration:    820, Loss function: 6.895, Average Loss: 4.954, avg. samples / sec: 312.21
Iteration:    840, Loss function: 6.582, Average Loss: 4.990, avg. samples / sec: 291.02
Iteration:    860, Loss function: 6.685, Average Loss: 5.025, avg. samples / sec: 302.81
Iteration:    880, Loss function: 6.728, Average Loss: 5.057, avg. samples / sec: 297.63
Iteration:    900, Loss function: 6.659, Average Loss: 5.089, avg. samples / sec: 326.98
Iteration:    920, Loss function: 6.731, Average Loss: 5.118, avg. samples / sec: 315.60
Iteration:    940, Loss function: 6.821, Average Loss: 5.148, avg. samples / sec: 328.49
Iteration:    960, Loss function: 6.278, Average Loss: 5.176, avg. samples / sec: 312.16
Iteration:    980, Loss function: 6.501, Average Loss: 5.204, avg. samples / sec: 260.58
Iteration:   1000, Loss function: 6.469, Average Loss: 5.229, avg. samples / sec: 281.42
Iteration:   1020, Loss function: 6.262, Average Loss: 5.252, avg. samples / sec: 231.00
:::MLLOG {"namespace": "", "time_ms": 1639765781007, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765781009, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.504, Average Loss: 5.276, avg. samples / sec: 307.26
Iteration:   1060, Loss function: 6.404, Average Loss: 5.300, avg. samples / sec: 320.43
Iteration:   1080, Loss function: 6.406, Average Loss: 5.321, avg. samples / sec: 321.32
Iteration:   1100, Loss function: 6.065, Average Loss: 5.341, avg. samples / sec: 331.33
Iteration:   1120, Loss function: 6.129, Average Loss: 5.360, avg. samples / sec: 325.22
Iteration:   1140, Loss function: 6.469, Average Loss: 5.379, avg. samples / sec: 307.49
Iteration:   1160, Loss function: 6.217, Average Loss: 5.396, avg. samples / sec: 208.71
Iteration:   1180, Loss function: 6.224, Average Loss: 5.413, avg. samples / sec: 319.52
Iteration:   1200, Loss function: 6.147, Average Loss: 5.428, avg. samples / sec: 320.88
Iteration:   1220, Loss function: 6.097, Average Loss: 5.445, avg. samples / sec: 325.76
Iteration:   1240, Loss function: 6.054, Average Loss: 5.458, avg. samples / sec: 319.10
Iteration:   1260, Loss function: 5.978, Average Loss: 5.471, avg. samples / sec: 271.10
Iteration:   1280, Loss function: 5.947, Average Loss: 5.483, avg. samples / sec: 210.75
Iteration:   1300, Loss function: 6.148, Average Loss: 5.496, avg. samples / sec: 246.90
Iteration:   1320, Loss function: 6.075, Average Loss: 5.508, avg. samples / sec: 221.25
Iteration:   1340, Loss function: 5.819, Average Loss: 5.518, avg. samples / sec: 221.65
Iteration:   1360, Loss function: 6.069, Average Loss: 5.528, avg. samples / sec: 311.15
Iteration:   1380, Loss function: 6.415, Average Loss: 5.538, avg. samples / sec: 291.77
Iteration:   1400, Loss function: 6.103, Average Loss: 5.547, avg. samples / sec: 319.03
Iteration:   1420, Loss function: 5.780, Average Loss: 5.556, avg. samples / sec: 330.31
Iteration:   1440, Loss function: 6.112, Average Loss: 5.564, avg. samples / sec: 338.90
Iteration:   1460, Loss function: 6.136, Average Loss: 5.572, avg. samples / sec: 334.14
Iteration:   1480, Loss function: 5.959, Average Loss: 5.580, avg. samples / sec: 331.54
Iteration:   1500, Loss function: 6.004, Average Loss: 5.588, avg. samples / sec: 320.39
Iteration:   1520, Loss function: 5.960, Average Loss: 5.595, avg. samples / sec: 335.85
Iteration:   1540, Loss function: 5.984, Average Loss: 5.598, avg. samples / sec: 335.44
Iteration:   1560, Loss function: 5.797, Average Loss: 5.603, avg. samples / sec: 318.47
Iteration:   1580, Loss function: 5.579, Average Loss: 5.608, avg. samples / sec: 339.03
Iteration:   1600, Loss function: 6.182, Average Loss: 5.614, avg. samples / sec: 328.10
Iteration:   1620, Loss function: 5.625, Average Loss: 5.617, avg. samples / sec: 323.71
Iteration:   1640, Loss function: 6.055, Average Loss: 5.621, avg. samples / sec: 307.97
Iteration:   1660, Loss function: 5.937, Average Loss: 5.626, avg. samples / sec: 286.96
Iteration:   1680, Loss function: 5.569, Average Loss: 5.629, avg. samples / sec: 307.20
Iteration:   1700, Loss function: 5.470, Average Loss: 5.632, avg. samples / sec: 299.54
Iteration:   1720, Loss function: 5.664, Average Loss: 5.635, avg. samples / sec: 239.64
Iteration:   1740, Loss function: 5.808, Average Loss: 5.637, avg. samples / sec: 305.59
Iteration:   1760, Loss function: 5.494, Average Loss: 5.638, avg. samples / sec: 252.34
Iteration:   1780, Loss function: 5.662, Average Loss: 5.640, avg. samples / sec: 272.42
Iteration:   1800, Loss function: 5.505, Average Loss: 5.642, avg. samples / sec: 295.36
Iteration:   1820, Loss function: 5.935, Average Loss: 5.644, avg. samples / sec: 230.87
Iteration:   1840, Loss function: 5.916, Average Loss: 5.645, avg. samples / sec: 287.62
Iteration:   1860, Loss function: 5.721, Average Loss: 5.645, avg. samples / sec: 314.00
Iteration:   1880, Loss function: 6.019, Average Loss: 5.647, avg. samples / sec: 308.03
Iteration:   1900, Loss function: 6.057, Average Loss: 5.648, avg. samples / sec: 323.35
Iteration:   1920, Loss function: 5.563, Average Loss: 5.647, avg. samples / sec: 304.66
Iteration:   1940, Loss function: 5.770, Average Loss: 5.646, avg. samples / sec: 321.90
Iteration:   1960, Loss function: 5.620, Average Loss: 5.646, avg. samples / sec: 274.11
Iteration:   1980, Loss function: 5.791, Average Loss: 5.644, avg. samples / sec: 274.28
Iteration:   2000, Loss function: 5.645, Average Loss: 5.644, avg. samples / sec: 217.51
Iteration:   2020, Loss function: 5.638, Average Loss: 5.644, avg. samples / sec: 172.21
Iteration:   2040, Loss function: 5.730, Average Loss: 5.643, avg. samples / sec: 218.97
:::MLLOG {"namespace": "", "time_ms": 1639766190770, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766190771, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.509, Average Loss: 5.641, avg. samples / sec: 327.44
Iteration:   2080, Loss function: 5.164, Average Loss: 5.639, avg. samples / sec: 326.15
Iteration:   2100, Loss function: 5.603, Average Loss: 5.637, avg. samples / sec: 320.00
Iteration:   2120, Loss function: 5.216, Average Loss: 5.635, avg. samples / sec: 309.45
Iteration:   2140, Loss function: 5.487, Average Loss: 5.632, avg. samples / sec: 321.26
Iteration:   2160, Loss function: 5.375, Average Loss: 5.630, avg. samples / sec: 281.32
Iteration:   2180, Loss function: 5.264, Average Loss: 5.628, avg. samples / sec: 292.70
Iteration:   2200, Loss function: 5.629, Average Loss: 5.625, avg. samples / sec: 281.76
Iteration:   2220, Loss function: 5.492, Average Loss: 5.622, avg. samples / sec: 295.08
Iteration:   2240, Loss function: 5.419, Average Loss: 5.620, avg. samples / sec: 214.61
Iteration:   2260, Loss function: 5.299, Average Loss: 5.616, avg. samples / sec: 285.21
Iteration:   2280, Loss function: 5.172, Average Loss: 5.613, avg. samples / sec: 325.22
Iteration:   2300, Loss function: 5.068, Average Loss: 5.610, avg. samples / sec: 326.04
Iteration:   2320, Loss function: 5.423, Average Loss: 5.608, avg. samples / sec: 324.37
Iteration:   2340, Loss function: 5.482, Average Loss: 5.604, avg. samples / sec: 325.69
Iteration:   2360, Loss function: 5.433, Average Loss: 5.599, avg. samples / sec: 268.91
Iteration:   2380, Loss function: 5.348, Average Loss: 5.596, avg. samples / sec: 292.42
Iteration:   2400, Loss function: 5.456, Average Loss: 5.592, avg. samples / sec: 241.93
Iteration:   2420, Loss function: 5.490, Average Loss: 5.588, avg. samples / sec: 239.80
Iteration:   2440, Loss function: 5.460, Average Loss: 5.585, avg. samples / sec: 319.49
Iteration:   2460, Loss function: 5.179, Average Loss: 5.581, avg. samples / sec: 309.17
Iteration:   2480, Loss function: 5.304, Average Loss: 5.578, avg. samples / sec: 270.27
Iteration:   2500, Loss function: 5.410, Average Loss: 5.575, avg. samples / sec: 322.04
Iteration:   2520, Loss function: 5.411, Average Loss: 5.570, avg. samples / sec: 282.45
Iteration:   2540, Loss function: 5.554, Average Loss: 5.567, avg. samples / sec: 325.06
Iteration:   2560, Loss function: 5.260, Average Loss: 5.564, avg. samples / sec: 318.76
Iteration:   2580, Loss function: 5.437, Average Loss: 5.560, avg. samples / sec: 318.39
Iteration:   2600, Loss function: 5.407, Average Loss: 5.557, avg. samples / sec: 288.10
Iteration:   2620, Loss function: 5.577, Average Loss: 5.552, avg. samples / sec: 288.97
Iteration:   2640, Loss function: 5.269, Average Loss: 5.550, avg. samples / sec: 305.73
Iteration:   2660, Loss function: 5.208, Average Loss: 5.546, avg. samples / sec: 314.35
Iteration:   2680, Loss function: 5.107, Average Loss: 5.543, avg. samples / sec: 286.55
Iteration:   2700, Loss function: 5.201, Average Loss: 5.538, avg. samples / sec: 290.09
Iteration:   2720, Loss function: 5.452, Average Loss: 5.535, avg. samples / sec: 241.85
Iteration:   2740, Loss function: 5.032, Average Loss: 5.530, avg. samples / sec: 319.97
Iteration:   2760, Loss function: 5.064, Average Loss: 5.525, avg. samples / sec: 314.79
Iteration:   2780, Loss function: 5.605, Average Loss: 5.521, avg. samples / sec: 332.52
Iteration:   2800, Loss function: 5.187, Average Loss: 5.516, avg. samples / sec: 312.38
Iteration:   2820, Loss function: 5.449, Average Loss: 5.512, avg. samples / sec: 271.10
Iteration:   2840, Loss function: 5.139, Average Loss: 5.508, avg. samples / sec: 255.17
Iteration:   2860, Loss function: 5.081, Average Loss: 5.502, avg. samples / sec: 269.47
Iteration:   2880, Loss function: 5.287, Average Loss: 5.498, avg. samples / sec: 312.15
Iteration:   2900, Loss function: 5.107, Average Loss: 5.493, avg. samples / sec: 317.24
Iteration:   2920, Loss function: 5.288, Average Loss: 5.487, avg. samples / sec: 294.90
Iteration:   2940, Loss function: 5.152, Average Loss: 5.483, avg. samples / sec: 221.85
Iteration:   2960, Loss function: 5.439, Average Loss: 5.479, avg. samples / sec: 250.83
Iteration:   2980, Loss function: 5.278, Average Loss: 5.475, avg. samples / sec: 229.89
Iteration:   3000, Loss function: 5.288, Average Loss: 5.470, avg. samples / sec: 262.53
Iteration:   3020, Loss function: 5.318, Average Loss: 5.463, avg. samples / sec: 292.22
Iteration:   3040, Loss function: 5.165, Average Loss: 5.458, avg. samples / sec: 228.56
Iteration:   3060, Loss function: 4.935, Average Loss: 5.452, avg. samples / sec: 330.45
Iteration:   3080, Loss function: 4.876, Average Loss: 5.447, avg. samples / sec: 276.21
:::MLLOG {"namespace": "", "time_ms": 1639766598428, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766598430, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.116, Average Loss: 5.442, avg. samples / sec: 324.87
Iteration:   3120, Loss function: 5.045, Average Loss: 5.435, avg. samples / sec: 297.97
Iteration:   3140, Loss function: 4.963, Average Loss: 5.430, avg. samples / sec: 250.06
Iteration:   3160, Loss function: 5.581, Average Loss: 5.425, avg. samples / sec: 287.07
Iteration:   3180, Loss function: 4.919, Average Loss: 5.421, avg. samples / sec: 292.67
Iteration:   3200, Loss function: 5.302, Average Loss: 5.416, avg. samples / sec: 324.73
Iteration:   3220, Loss function: 5.260, Average Loss: 5.411, avg. samples / sec: 295.92
Iteration:   3240, Loss function: 5.177, Average Loss: 5.405, avg. samples / sec: 287.41
Iteration:   3260, Loss function: 5.107, Average Loss: 5.399, avg. samples / sec: 319.07
Iteration:   3280, Loss function: 4.852, Average Loss: 5.393, avg. samples / sec: 341.25
Iteration:   3300, Loss function: 5.020, Average Loss: 5.388, avg. samples / sec: 242.94
Iteration:   3320, Loss function: 4.922, Average Loss: 5.383, avg. samples / sec: 229.30
Iteration:   3340, Loss function: 5.163, Average Loss: 5.378, avg. samples / sec: 331.67
Iteration:   3360, Loss function: 5.084, Average Loss: 5.372, avg. samples / sec: 309.25
Iteration:   3380, Loss function: 5.249, Average Loss: 5.365, avg. samples / sec: 311.21
Iteration:   3400, Loss function: 4.686, Average Loss: 5.359, avg. samples / sec: 293.90
Iteration:   3420, Loss function: 5.342, Average Loss: 5.354, avg. samples / sec: 322.29
Iteration:   3440, Loss function: 4.962, Average Loss: 5.350, avg. samples / sec: 332.93
Iteration:   3460, Loss function: 5.120, Average Loss: 5.345, avg. samples / sec: 320.56
Iteration:   3480, Loss function: 5.194, Average Loss: 5.340, avg. samples / sec: 302.82
Iteration:   3500, Loss function: 5.307, Average Loss: 5.336, avg. samples / sec: 303.85
Iteration:   3520, Loss function: 5.006, Average Loss: 5.333, avg. samples / sec: 301.66
Iteration:   3540, Loss function: 5.054, Average Loss: 5.328, avg. samples / sec: 292.02
Iteration:   3560, Loss function: 4.958, Average Loss: 5.324, avg. samples / sec: 225.91
Iteration:   3580, Loss function: 5.126, Average Loss: 5.319, avg. samples / sec: 342.54
Iteration:   3600, Loss function: 5.197, Average Loss: 5.313, avg. samples / sec: 278.64
Iteration:   3620, Loss function: 4.968, Average Loss: 5.308, avg. samples / sec: 333.65
Iteration:   3640, Loss function: 4.709, Average Loss: 5.303, avg. samples / sec: 334.63
Iteration:   3660, Loss function: 4.963, Average Loss: 5.299, avg. samples / sec: 273.60
Iteration:   3680, Loss function: 5.166, Average Loss: 5.293, avg. samples / sec: 285.08
Iteration:   3700, Loss function: 4.992, Average Loss: 5.287, avg. samples / sec: 299.38
Iteration:   3720, Loss function: 4.971, Average Loss: 5.281, avg. samples / sec: 278.53
Iteration:   3740, Loss function: 5.250, Average Loss: 5.277, avg. samples / sec: 317.67
Iteration:   3760, Loss function: 5.192, Average Loss: 5.274, avg. samples / sec: 310.16
Iteration:   3780, Loss function: 4.919, Average Loss: 5.269, avg. samples / sec: 285.67
Iteration:   3800, Loss function: 4.982, Average Loss: 5.265, avg. samples / sec: 295.25
Iteration:   3820, Loss function: 5.171, Average Loss: 5.260, avg. samples / sec: 326.40
Iteration:   3840, Loss function: 4.688, Average Loss: 5.255, avg. samples / sec: 314.34
Iteration:   3860, Loss function: 4.901, Average Loss: 5.250, avg. samples / sec: 332.83
Iteration:   3880, Loss function: 4.739, Average Loss: 5.244, avg. samples / sec: 325.28
Iteration:   3900, Loss function: 4.928, Average Loss: 5.239, avg. samples / sec: 301.54
Iteration:   3920, Loss function: 5.190, Average Loss: 5.233, avg. samples / sec: 257.39
Iteration:   3940, Loss function: 5.002, Average Loss: 5.229, avg. samples / sec: 324.38
Iteration:   3960, Loss function: 4.970, Average Loss: 5.225, avg. samples / sec: 300.42
Iteration:   3980, Loss function: 4.766, Average Loss: 5.220, avg. samples / sec: 298.08
Iteration:   4000, Loss function: 5.259, Average Loss: 5.217, avg. samples / sec: 300.97
Iteration:   4020, Loss function: 4.919, Average Loss: 5.212, avg. samples / sec: 330.85
Iteration:   4040, Loss function: 5.027, Average Loss: 5.209, avg. samples / sec: 296.34
Iteration:   4060, Loss function: 5.249, Average Loss: 5.205, avg. samples / sec: 304.43
Iteration:   4080, Loss function: 4.932, Average Loss: 5.201, avg. samples / sec: 210.86
Iteration:   4100, Loss function: 5.019, Average Loss: 5.197, avg. samples / sec: 259.79
:::MLLOG {"namespace": "", "time_ms": 1639766994900, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766994902, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.194, avg. samples / sec: 311.64
Iteration:   4140, Loss function: 4.957, Average Loss: 5.188, avg. samples / sec: 309.03
Iteration:   4160, Loss function: 5.005, Average Loss: 5.183, avg. samples / sec: 288.98
Iteration:   4180, Loss function: 4.667, Average Loss: 5.177, avg. samples / sec: 335.64
Iteration:   4200, Loss function: 4.650, Average Loss: 5.172, avg. samples / sec: 308.35
Iteration:   4220, Loss function: 4.792, Average Loss: 5.167, avg. samples / sec: 255.64
Iteration:   4240, Loss function: 5.071, Average Loss: 5.162, avg. samples / sec: 308.00
Iteration:   4260, Loss function: 4.992, Average Loss: 5.157, avg. samples / sec: 269.44
Iteration:   4280, Loss function: 5.095, Average Loss: 5.151, avg. samples / sec: 261.25
Iteration:   4300, Loss function: 4.815, Average Loss: 5.144, avg. samples / sec: 314.63
Iteration:   4320, Loss function: 4.767, Average Loss: 5.139, avg. samples / sec: 318.07
Iteration:   4340, Loss function: 4.772, Average Loss: 5.134, avg. samples / sec: 300.38
Iteration:   4360, Loss function: 4.829, Average Loss: 5.130, avg. samples / sec: 315.92
Iteration:   4380, Loss function: 5.011, Average Loss: 5.126, avg. samples / sec: 294.30
Iteration:   4400, Loss function: 4.849, Average Loss: 5.122, avg. samples / sec: 308.79
Iteration:   4420, Loss function: 4.937, Average Loss: 5.118, avg. samples / sec: 312.95
Iteration:   4440, Loss function: 5.030, Average Loss: 5.114, avg. samples / sec: 315.05
Iteration:   4460, Loss function: 4.929, Average Loss: 5.109, avg. samples / sec: 242.65
Iteration:   4480, Loss function: 5.052, Average Loss: 5.106, avg. samples / sec: 259.97
Iteration:   4500, Loss function: 4.881, Average Loss: 5.102, avg. samples / sec: 294.55
Iteration:   4520, Loss function: 4.681, Average Loss: 5.098, avg. samples / sec: 285.51
Iteration:   4540, Loss function: 5.178, Average Loss: 5.094, avg. samples / sec: 277.25
Iteration:   4560, Loss function: 4.863, Average Loss: 5.090, avg. samples / sec: 318.84
Iteration:   4580, Loss function: 4.863, Average Loss: 5.088, avg. samples / sec: 319.34
Iteration:   4600, Loss function: 4.991, Average Loss: 5.083, avg. samples / sec: 339.10
Iteration:   4620, Loss function: 4.829, Average Loss: 5.079, avg. samples / sec: 324.48
Iteration:   4640, Loss function: 4.756, Average Loss: 5.074, avg. samples / sec: 322.15
Iteration:   4660, Loss function: 4.756, Average Loss: 5.071, avg. samples / sec: 337.77
Iteration:   4680, Loss function: 5.302, Average Loss: 5.066, avg. samples / sec: 324.01
Iteration:   4700, Loss function: 4.810, Average Loss: 5.062, avg. samples / sec: 291.67
Iteration:   4720, Loss function: 4.756, Average Loss: 5.057, avg. samples / sec: 275.71
Iteration:   4740, Loss function: 4.862, Average Loss: 5.054, avg. samples / sec: 322.75
Iteration:   4760, Loss function: 4.498, Average Loss: 5.049, avg. samples / sec: 236.76
Iteration:   4780, Loss function: 5.177, Average Loss: 5.045, avg. samples / sec: 322.14
Iteration:   4800, Loss function: 4.920, Average Loss: 5.042, avg. samples / sec: 316.35
Iteration:   4820, Loss function: 4.785, Average Loss: 5.039, avg. samples / sec: 322.68
Iteration:   4840, Loss function: 5.021, Average Loss: 5.037, avg. samples / sec: 314.33
Iteration:   4860, Loss function: 4.748, Average Loss: 5.032, avg. samples / sec: 306.19
Iteration:   4880, Loss function: 5.040, Average Loss: 5.028, avg. samples / sec: 332.43
Iteration:   4900, Loss function: 4.366, Average Loss: 5.023, avg. samples / sec: 309.12
Iteration:   4920, Loss function: 4.870, Average Loss: 5.020, avg. samples / sec: 315.31
Iteration:   4940, Loss function: 4.609, Average Loss: 5.015, avg. samples / sec: 321.72
Iteration:   4960, Loss function: 4.614, Average Loss: 5.011, avg. samples / sec: 272.87
Iteration:   4980, Loss function: 4.701, Average Loss: 5.008, avg. samples / sec: 299.86
Iteration:   5000, Loss function: 4.897, Average Loss: 5.004, avg. samples / sec: 286.84
Iteration:   5020, Loss function: 5.141, Average Loss: 5.001, avg. samples / sec: 322.16
Iteration:   5040, Loss function: 4.779, Average Loss: 4.998, avg. samples / sec: 330.80
Iteration:   5060, Loss function: 4.628, Average Loss: 4.994, avg. samples / sec: 311.79
Iteration:   5080, Loss function: 4.685, Average Loss: 4.990, avg. samples / sec: 323.51
Iteration:   5100, Loss function: 4.687, Average Loss: 4.988, avg. samples / sec: 329.71
Iteration:   5120, Loss function: 4.694, Average Loss: 4.985, avg. samples / sec: 325.38
Iteration:   5140, Loss function: 4.892, Average Loss: 4.981, avg. samples / sec: 310.21
:::MLLOG {"namespace": "", "time_ms": 1639767382115, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 100.67 s
:::MLLOG {"namespace": "", "time_ms": 1639767482914, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767482926, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482927, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.84s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.96s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10719
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21984
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09469
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19403
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14009
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10719 AP goal: 0.10000
Iteration:   5160, Loss function: 4.861, Average Loss: 4.977, avg. samples / sec: 21.01
:::MLLOG {"namespace": "", "time_ms": 1639767489439, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767489440, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10719205194137363, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767489440, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767491526, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:14 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:14 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765258431, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765258763, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1133084486, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1133084486
:::MLLOG {"namespace": "", "time_ms": 1639765262349, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765262349, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765262353, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765262354, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765366929, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765366930, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765369680, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765369681, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.33s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765370405, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765370406, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765370408, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.719, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.155, Average Loss: 0.456, avg. samples / sec: 241.84
Iteration:     40, Loss function: 20.982, Average Loss: 0.858, avg. samples / sec: 240.70
Iteration:     60, Loss function: 20.354, Average Loss: 1.247, avg. samples / sec: 262.40
Iteration:     80, Loss function: 19.746, Average Loss: 1.620, avg. samples / sec: 220.27
Iteration:    100, Loss function: 15.116, Average Loss: 1.942, avg. samples / sec: 247.77
Iteration:    120, Loss function: 11.477, Average Loss: 2.142, avg. samples / sec: 245.59
Iteration:    140, Loss function: 9.722, Average Loss: 2.306, avg. samples / sec: 258.44
Iteration:    160, Loss function: 9.371, Average Loss: 2.450, avg. samples / sec: 270.66
Iteration:    180, Loss function: 9.101, Average Loss: 2.582, avg. samples / sec: 264.63
Iteration:    200, Loss function: 8.646, Average Loss: 2.708, avg. samples / sec: 283.72
Iteration:    220, Loss function: 8.631, Average Loss: 2.829, avg. samples / sec: 308.29
Iteration:    240, Loss function: 8.994, Average Loss: 2.948, avg. samples / sec: 271.62
Iteration:    260, Loss function: 8.785, Average Loss: 3.062, avg. samples / sec: 319.80
Iteration:    280, Loss function: 8.503, Average Loss: 3.172, avg. samples / sec: 298.78
Iteration:    300, Loss function: 8.511, Average Loss: 3.276, avg. samples / sec: 276.78
Iteration:    320, Loss function: 8.381, Average Loss: 3.377, avg. samples / sec: 322.73
Iteration:    340, Loss function: 8.349, Average Loss: 3.475, avg. samples / sec: 280.73
Iteration:    360, Loss function: 7.826, Average Loss: 3.567, avg. samples / sec: 279.06
Iteration:    380, Loss function: 7.837, Average Loss: 3.658, avg. samples / sec: 295.93
Iteration:    400, Loss function: 8.019, Average Loss: 3.743, avg. samples / sec: 311.27
Iteration:    420, Loss function: 7.664, Average Loss: 3.827, avg. samples / sec: 325.02
Iteration:    440, Loss function: 7.848, Average Loss: 3.906, avg. samples / sec: 275.69
Iteration:    460, Loss function: 7.996, Average Loss: 3.982, avg. samples / sec: 241.83
Iteration:    480, Loss function: 7.424, Average Loss: 4.057, avg. samples / sec: 290.63
Iteration:    500, Loss function: 7.659, Average Loss: 4.126, avg. samples / sec: 318.99
Iteration:    520, Loss function: 7.478, Average Loss: 4.193, avg. samples / sec: 315.14
Iteration:    540, Loss function: 7.434, Average Loss: 4.258, avg. samples / sec: 314.41
Iteration:    560, Loss function: 7.163, Average Loss: 4.320, avg. samples / sec: 281.35
Iteration:    580, Loss function: 7.228, Average Loss: 4.380, avg. samples / sec: 326.56
Iteration:    600, Loss function: 7.218, Average Loss: 4.438, avg. samples / sec: 314.74
Iteration:    620, Loss function: 6.992, Average Loss: 4.494, avg. samples / sec: 318.58
Iteration:    640, Loss function: 6.916, Average Loss: 4.549, avg. samples / sec: 304.14
Iteration:    660, Loss function: 7.225, Average Loss: 4.601, avg. samples / sec: 297.12
Iteration:    680, Loss function: 7.350, Average Loss: 4.652, avg. samples / sec: 296.92
Iteration:    700, Loss function: 6.893, Average Loss: 4.700, avg. samples / sec: 203.15
Iteration:    720, Loss function: 6.919, Average Loss: 4.749, avg. samples / sec: 320.08
Iteration:    740, Loss function: 6.966, Average Loss: 4.794, avg. samples / sec: 335.06
Iteration:    760, Loss function: 7.124, Average Loss: 4.837, avg. samples / sec: 328.55
Iteration:    780, Loss function: 6.944, Average Loss: 4.878, avg. samples / sec: 330.96
Iteration:    800, Loss function: 7.123, Average Loss: 4.916, avg. samples / sec: 314.44
Iteration:    820, Loss function: 6.895, Average Loss: 4.954, avg. samples / sec: 312.21
Iteration:    840, Loss function: 6.582, Average Loss: 4.990, avg. samples / sec: 291.02
Iteration:    860, Loss function: 6.685, Average Loss: 5.025, avg. samples / sec: 302.81
Iteration:    880, Loss function: 6.728, Average Loss: 5.057, avg. samples / sec: 297.63
Iteration:    900, Loss function: 6.659, Average Loss: 5.089, avg. samples / sec: 326.98
Iteration:    920, Loss function: 6.731, Average Loss: 5.118, avg. samples / sec: 315.60
Iteration:    940, Loss function: 6.821, Average Loss: 5.148, avg. samples / sec: 328.49
Iteration:    960, Loss function: 6.278, Average Loss: 5.176, avg. samples / sec: 312.16
Iteration:    980, Loss function: 6.501, Average Loss: 5.204, avg. samples / sec: 260.58
Iteration:   1000, Loss function: 6.469, Average Loss: 5.229, avg. samples / sec: 281.42
Iteration:   1020, Loss function: 6.262, Average Loss: 5.252, avg. samples / sec: 231.00
:::MLLOG {"namespace": "", "time_ms": 1639765781007, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765781009, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.504, Average Loss: 5.276, avg. samples / sec: 307.26
Iteration:   1060, Loss function: 6.404, Average Loss: 5.300, avg. samples / sec: 320.43
Iteration:   1080, Loss function: 6.406, Average Loss: 5.321, avg. samples / sec: 321.32
Iteration:   1100, Loss function: 6.065, Average Loss: 5.341, avg. samples / sec: 331.33
Iteration:   1120, Loss function: 6.129, Average Loss: 5.360, avg. samples / sec: 325.22
Iteration:   1140, Loss function: 6.469, Average Loss: 5.379, avg. samples / sec: 307.49
Iteration:   1160, Loss function: 6.217, Average Loss: 5.396, avg. samples / sec: 208.71
Iteration:   1180, Loss function: 6.224, Average Loss: 5.413, avg. samples / sec: 319.52
Iteration:   1200, Loss function: 6.147, Average Loss: 5.428, avg. samples / sec: 320.88
Iteration:   1220, Loss function: 6.097, Average Loss: 5.445, avg. samples / sec: 325.76
Iteration:   1240, Loss function: 6.054, Average Loss: 5.458, avg. samples / sec: 319.10
Iteration:   1260, Loss function: 5.978, Average Loss: 5.471, avg. samples / sec: 271.10
Iteration:   1280, Loss function: 5.947, Average Loss: 5.483, avg. samples / sec: 210.75
Iteration:   1300, Loss function: 6.148, Average Loss: 5.496, avg. samples / sec: 246.90
Iteration:   1320, Loss function: 6.075, Average Loss: 5.508, avg. samples / sec: 221.25
Iteration:   1340, Loss function: 5.819, Average Loss: 5.518, avg. samples / sec: 221.65
Iteration:   1360, Loss function: 6.069, Average Loss: 5.528, avg. samples / sec: 311.15
Iteration:   1380, Loss function: 6.415, Average Loss: 5.538, avg. samples / sec: 291.77
Iteration:   1400, Loss function: 6.103, Average Loss: 5.547, avg. samples / sec: 319.03
Iteration:   1420, Loss function: 5.780, Average Loss: 5.556, avg. samples / sec: 330.31
Iteration:   1440, Loss function: 6.112, Average Loss: 5.564, avg. samples / sec: 338.90
Iteration:   1460, Loss function: 6.136, Average Loss: 5.572, avg. samples / sec: 334.14
Iteration:   1480, Loss function: 5.959, Average Loss: 5.580, avg. samples / sec: 331.54
Iteration:   1500, Loss function: 6.004, Average Loss: 5.588, avg. samples / sec: 320.39
Iteration:   1520, Loss function: 5.960, Average Loss: 5.595, avg. samples / sec: 335.85
Iteration:   1540, Loss function: 5.984, Average Loss: 5.598, avg. samples / sec: 335.44
Iteration:   1560, Loss function: 5.797, Average Loss: 5.603, avg. samples / sec: 318.47
Iteration:   1580, Loss function: 5.579, Average Loss: 5.608, avg. samples / sec: 339.03
Iteration:   1600, Loss function: 6.182, Average Loss: 5.614, avg. samples / sec: 328.10
Iteration:   1620, Loss function: 5.625, Average Loss: 5.617, avg. samples / sec: 323.71
Iteration:   1640, Loss function: 6.055, Average Loss: 5.621, avg. samples / sec: 307.97
Iteration:   1660, Loss function: 5.937, Average Loss: 5.626, avg. samples / sec: 286.96
Iteration:   1680, Loss function: 5.569, Average Loss: 5.629, avg. samples / sec: 307.20
Iteration:   1700, Loss function: 5.470, Average Loss: 5.632, avg. samples / sec: 299.54
Iteration:   1720, Loss function: 5.664, Average Loss: 5.635, avg. samples / sec: 239.64
Iteration:   1740, Loss function: 5.808, Average Loss: 5.637, avg. samples / sec: 305.59
Iteration:   1760, Loss function: 5.494, Average Loss: 5.638, avg. samples / sec: 252.34
Iteration:   1780, Loss function: 5.662, Average Loss: 5.640, avg. samples / sec: 272.42
Iteration:   1800, Loss function: 5.505, Average Loss: 5.642, avg. samples / sec: 295.36
Iteration:   1820, Loss function: 5.935, Average Loss: 5.644, avg. samples / sec: 230.87
Iteration:   1840, Loss function: 5.916, Average Loss: 5.645, avg. samples / sec: 287.62
Iteration:   1860, Loss function: 5.721, Average Loss: 5.645, avg. samples / sec: 314.00
Iteration:   1880, Loss function: 6.019, Average Loss: 5.647, avg. samples / sec: 308.03
Iteration:   1900, Loss function: 6.057, Average Loss: 5.648, avg. samples / sec: 323.35
Iteration:   1920, Loss function: 5.563, Average Loss: 5.647, avg. samples / sec: 304.66
Iteration:   1940, Loss function: 5.770, Average Loss: 5.646, avg. samples / sec: 321.90
Iteration:   1960, Loss function: 5.620, Average Loss: 5.646, avg. samples / sec: 274.11
Iteration:   1980, Loss function: 5.791, Average Loss: 5.644, avg. samples / sec: 274.28
Iteration:   2000, Loss function: 5.645, Average Loss: 5.644, avg. samples / sec: 217.51
Iteration:   2020, Loss function: 5.638, Average Loss: 5.644, avg. samples / sec: 172.21
Iteration:   2040, Loss function: 5.730, Average Loss: 5.643, avg. samples / sec: 218.97
:::MLLOG {"namespace": "", "time_ms": 1639766190770, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766190771, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.509, Average Loss: 5.641, avg. samples / sec: 327.44
Iteration:   2080, Loss function: 5.164, Average Loss: 5.639, avg. samples / sec: 326.15
Iteration:   2100, Loss function: 5.603, Average Loss: 5.637, avg. samples / sec: 320.00
Iteration:   2120, Loss function: 5.216, Average Loss: 5.635, avg. samples / sec: 309.45
Iteration:   2140, Loss function: 5.487, Average Loss: 5.632, avg. samples / sec: 321.26
Iteration:   2160, Loss function: 5.375, Average Loss: 5.630, avg. samples / sec: 281.32
Iteration:   2180, Loss function: 5.264, Average Loss: 5.628, avg. samples / sec: 292.70
Iteration:   2200, Loss function: 5.629, Average Loss: 5.625, avg. samples / sec: 281.76
Iteration:   2220, Loss function: 5.492, Average Loss: 5.622, avg. samples / sec: 295.08
Iteration:   2240, Loss function: 5.419, Average Loss: 5.620, avg. samples / sec: 214.61
Iteration:   2260, Loss function: 5.299, Average Loss: 5.616, avg. samples / sec: 285.21
Iteration:   2280, Loss function: 5.172, Average Loss: 5.613, avg. samples / sec: 325.22
Iteration:   2300, Loss function: 5.068, Average Loss: 5.610, avg. samples / sec: 326.04
Iteration:   2320, Loss function: 5.423, Average Loss: 5.608, avg. samples / sec: 324.37
Iteration:   2340, Loss function: 5.482, Average Loss: 5.604, avg. samples / sec: 325.69
Iteration:   2360, Loss function: 5.433, Average Loss: 5.599, avg. samples / sec: 268.91
Iteration:   2380, Loss function: 5.348, Average Loss: 5.596, avg. samples / sec: 292.42
Iteration:   2400, Loss function: 5.456, Average Loss: 5.592, avg. samples / sec: 241.93
Iteration:   2420, Loss function: 5.490, Average Loss: 5.588, avg. samples / sec: 239.80
Iteration:   2440, Loss function: 5.460, Average Loss: 5.585, avg. samples / sec: 319.49
Iteration:   2460, Loss function: 5.179, Average Loss: 5.581, avg. samples / sec: 309.17
Iteration:   2480, Loss function: 5.304, Average Loss: 5.578, avg. samples / sec: 270.27
Iteration:   2500, Loss function: 5.410, Average Loss: 5.575, avg. samples / sec: 322.04
Iteration:   2520, Loss function: 5.411, Average Loss: 5.570, avg. samples / sec: 282.45
Iteration:   2540, Loss function: 5.554, Average Loss: 5.567, avg. samples / sec: 325.06
Iteration:   2560, Loss function: 5.260, Average Loss: 5.564, avg. samples / sec: 318.76
Iteration:   2580, Loss function: 5.437, Average Loss: 5.560, avg. samples / sec: 318.39
Iteration:   2600, Loss function: 5.407, Average Loss: 5.557, avg. samples / sec: 288.10
Iteration:   2620, Loss function: 5.577, Average Loss: 5.552, avg. samples / sec: 288.97
Iteration:   2640, Loss function: 5.269, Average Loss: 5.550, avg. samples / sec: 305.73
Iteration:   2660, Loss function: 5.208, Average Loss: 5.546, avg. samples / sec: 314.35
Iteration:   2680, Loss function: 5.107, Average Loss: 5.543, avg. samples / sec: 286.55
Iteration:   2700, Loss function: 5.201, Average Loss: 5.538, avg. samples / sec: 290.09
Iteration:   2720, Loss function: 5.452, Average Loss: 5.535, avg. samples / sec: 241.85
Iteration:   2740, Loss function: 5.032, Average Loss: 5.530, avg. samples / sec: 319.97
Iteration:   2760, Loss function: 5.064, Average Loss: 5.525, avg. samples / sec: 314.79
Iteration:   2780, Loss function: 5.605, Average Loss: 5.521, avg. samples / sec: 332.52
Iteration:   2800, Loss function: 5.187, Average Loss: 5.516, avg. samples / sec: 312.38
Iteration:   2820, Loss function: 5.449, Average Loss: 5.512, avg. samples / sec: 271.10
Iteration:   2840, Loss function: 5.139, Average Loss: 5.508, avg. samples / sec: 255.17
Iteration:   2860, Loss function: 5.081, Average Loss: 5.502, avg. samples / sec: 269.47
Iteration:   2880, Loss function: 5.287, Average Loss: 5.498, avg. samples / sec: 312.15
Iteration:   2900, Loss function: 5.107, Average Loss: 5.493, avg. samples / sec: 317.24
Iteration:   2920, Loss function: 5.288, Average Loss: 5.487, avg. samples / sec: 294.90
Iteration:   2940, Loss function: 5.152, Average Loss: 5.483, avg. samples / sec: 221.85
Iteration:   2960, Loss function: 5.439, Average Loss: 5.479, avg. samples / sec: 250.83
Iteration:   2980, Loss function: 5.278, Average Loss: 5.475, avg. samples / sec: 229.89
Iteration:   3000, Loss function: 5.288, Average Loss: 5.470, avg. samples / sec: 262.53
Iteration:   3020, Loss function: 5.318, Average Loss: 5.463, avg. samples / sec: 292.22
Iteration:   3040, Loss function: 5.165, Average Loss: 5.458, avg. samples / sec: 228.56
Iteration:   3060, Loss function: 4.935, Average Loss: 5.452, avg. samples / sec: 330.45
Iteration:   3080, Loss function: 4.876, Average Loss: 5.447, avg. samples / sec: 276.21
:::MLLOG {"namespace": "", "time_ms": 1639766598428, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766598430, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.116, Average Loss: 5.442, avg. samples / sec: 324.87
Iteration:   3120, Loss function: 5.045, Average Loss: 5.435, avg. samples / sec: 297.97
Iteration:   3140, Loss function: 4.963, Average Loss: 5.430, avg. samples / sec: 250.06
Iteration:   3160, Loss function: 5.581, Average Loss: 5.425, avg. samples / sec: 287.07
Iteration:   3180, Loss function: 4.919, Average Loss: 5.421, avg. samples / sec: 292.67
Iteration:   3200, Loss function: 5.302, Average Loss: 5.416, avg. samples / sec: 324.73
Iteration:   3220, Loss function: 5.260, Average Loss: 5.411, avg. samples / sec: 295.92
Iteration:   3240, Loss function: 5.177, Average Loss: 5.405, avg. samples / sec: 287.41
Iteration:   3260, Loss function: 5.107, Average Loss: 5.399, avg. samples / sec: 319.07
Iteration:   3280, Loss function: 4.852, Average Loss: 5.393, avg. samples / sec: 341.25
Iteration:   3300, Loss function: 5.020, Average Loss: 5.388, avg. samples / sec: 242.94
Iteration:   3320, Loss function: 4.922, Average Loss: 5.383, avg. samples / sec: 229.30
Iteration:   3340, Loss function: 5.163, Average Loss: 5.378, avg. samples / sec: 331.67
Iteration:   3360, Loss function: 5.084, Average Loss: 5.372, avg. samples / sec: 309.25
Iteration:   3380, Loss function: 5.249, Average Loss: 5.365, avg. samples / sec: 311.21
Iteration:   3400, Loss function: 4.686, Average Loss: 5.359, avg. samples / sec: 293.90
Iteration:   3420, Loss function: 5.342, Average Loss: 5.354, avg. samples / sec: 322.29
Iteration:   3440, Loss function: 4.962, Average Loss: 5.350, avg. samples / sec: 332.93
Iteration:   3460, Loss function: 5.120, Average Loss: 5.345, avg. samples / sec: 320.56
Iteration:   3480, Loss function: 5.194, Average Loss: 5.340, avg. samples / sec: 302.82
Iteration:   3500, Loss function: 5.307, Average Loss: 5.336, avg. samples / sec: 303.85
Iteration:   3520, Loss function: 5.006, Average Loss: 5.333, avg. samples / sec: 301.66
Iteration:   3540, Loss function: 5.054, Average Loss: 5.328, avg. samples / sec: 292.02
Iteration:   3560, Loss function: 4.958, Average Loss: 5.324, avg. samples / sec: 225.91
Iteration:   3580, Loss function: 5.126, Average Loss: 5.319, avg. samples / sec: 342.54
Iteration:   3600, Loss function: 5.197, Average Loss: 5.313, avg. samples / sec: 278.64
Iteration:   3620, Loss function: 4.968, Average Loss: 5.308, avg. samples / sec: 333.65
Iteration:   3640, Loss function: 4.709, Average Loss: 5.303, avg. samples / sec: 334.63
Iteration:   3660, Loss function: 4.963, Average Loss: 5.299, avg. samples / sec: 273.60
Iteration:   3680, Loss function: 5.166, Average Loss: 5.293, avg. samples / sec: 285.08
Iteration:   3700, Loss function: 4.992, Average Loss: 5.287, avg. samples / sec: 299.38
Iteration:   3720, Loss function: 4.971, Average Loss: 5.281, avg. samples / sec: 278.53
Iteration:   3740, Loss function: 5.250, Average Loss: 5.277, avg. samples / sec: 317.67
Iteration:   3760, Loss function: 5.192, Average Loss: 5.274, avg. samples / sec: 310.16
Iteration:   3780, Loss function: 4.919, Average Loss: 5.269, avg. samples / sec: 285.67
Iteration:   3800, Loss function: 4.982, Average Loss: 5.265, avg. samples / sec: 295.25
Iteration:   3820, Loss function: 5.171, Average Loss: 5.260, avg. samples / sec: 326.40
Iteration:   3840, Loss function: 4.688, Average Loss: 5.255, avg. samples / sec: 314.34
Iteration:   3860, Loss function: 4.901, Average Loss: 5.250, avg. samples / sec: 332.83
Iteration:   3880, Loss function: 4.739, Average Loss: 5.244, avg. samples / sec: 325.28
Iteration:   3900, Loss function: 4.928, Average Loss: 5.239, avg. samples / sec: 301.54
Iteration:   3920, Loss function: 5.190, Average Loss: 5.233, avg. samples / sec: 257.39
Iteration:   3940, Loss function: 5.002, Average Loss: 5.229, avg. samples / sec: 324.38
Iteration:   3960, Loss function: 4.970, Average Loss: 5.225, avg. samples / sec: 300.42
Iteration:   3980, Loss function: 4.766, Average Loss: 5.220, avg. samples / sec: 298.08
Iteration:   4000, Loss function: 5.259, Average Loss: 5.217, avg. samples / sec: 300.97
Iteration:   4020, Loss function: 4.919, Average Loss: 5.212, avg. samples / sec: 330.85
Iteration:   4040, Loss function: 5.027, Average Loss: 5.209, avg. samples / sec: 296.34
Iteration:   4060, Loss function: 5.249, Average Loss: 5.205, avg. samples / sec: 304.43
Iteration:   4080, Loss function: 4.932, Average Loss: 5.201, avg. samples / sec: 210.86
Iteration:   4100, Loss function: 5.019, Average Loss: 5.197, avg. samples / sec: 259.79
:::MLLOG {"namespace": "", "time_ms": 1639766994900, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766994902, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.025, Average Loss: 5.194, avg. samples / sec: 311.64
Iteration:   4140, Loss function: 4.957, Average Loss: 5.188, avg. samples / sec: 309.03
Iteration:   4160, Loss function: 5.005, Average Loss: 5.183, avg. samples / sec: 288.98
Iteration:   4180, Loss function: 4.667, Average Loss: 5.177, avg. samples / sec: 335.64
Iteration:   4200, Loss function: 4.650, Average Loss: 5.172, avg. samples / sec: 308.35
Iteration:   4220, Loss function: 4.792, Average Loss: 5.167, avg. samples / sec: 255.64
Iteration:   4240, Loss function: 5.071, Average Loss: 5.162, avg. samples / sec: 308.00
Iteration:   4260, Loss function: 4.992, Average Loss: 5.157, avg. samples / sec: 269.44
Iteration:   4280, Loss function: 5.095, Average Loss: 5.151, avg. samples / sec: 261.25
Iteration:   4300, Loss function: 4.815, Average Loss: 5.144, avg. samples / sec: 314.63
Iteration:   4320, Loss function: 4.767, Average Loss: 5.139, avg. samples / sec: 318.07
Iteration:   4340, Loss function: 4.772, Average Loss: 5.134, avg. samples / sec: 300.38
Iteration:   4360, Loss function: 4.829, Average Loss: 5.130, avg. samples / sec: 315.92
Iteration:   4380, Loss function: 5.011, Average Loss: 5.126, avg. samples / sec: 294.30
Iteration:   4400, Loss function: 4.849, Average Loss: 5.122, avg. samples / sec: 308.79
Iteration:   4420, Loss function: 4.937, Average Loss: 5.118, avg. samples / sec: 312.95
Iteration:   4440, Loss function: 5.030, Average Loss: 5.114, avg. samples / sec: 315.05
Iteration:   4460, Loss function: 4.929, Average Loss: 5.109, avg. samples / sec: 242.65
Iteration:   4480, Loss function: 5.052, Average Loss: 5.106, avg. samples / sec: 259.97
Iteration:   4500, Loss function: 4.881, Average Loss: 5.102, avg. samples / sec: 294.55
Iteration:   4520, Loss function: 4.681, Average Loss: 5.098, avg. samples / sec: 285.51
Iteration:   4540, Loss function: 5.178, Average Loss: 5.094, avg. samples / sec: 277.25
Iteration:   4560, Loss function: 4.863, Average Loss: 5.090, avg. samples / sec: 318.84
Iteration:   4580, Loss function: 4.863, Average Loss: 5.088, avg. samples / sec: 319.34
Iteration:   4600, Loss function: 4.991, Average Loss: 5.083, avg. samples / sec: 339.10
Iteration:   4620, Loss function: 4.829, Average Loss: 5.079, avg. samples / sec: 324.48
Iteration:   4640, Loss function: 4.756, Average Loss: 5.074, avg. samples / sec: 322.15
Iteration:   4660, Loss function: 4.756, Average Loss: 5.071, avg. samples / sec: 337.77
Iteration:   4680, Loss function: 5.302, Average Loss: 5.066, avg. samples / sec: 324.01
Iteration:   4700, Loss function: 4.810, Average Loss: 5.062, avg. samples / sec: 291.67
Iteration:   4720, Loss function: 4.756, Average Loss: 5.057, avg. samples / sec: 275.71
Iteration:   4740, Loss function: 4.862, Average Loss: 5.054, avg. samples / sec: 322.75
Iteration:   4760, Loss function: 4.498, Average Loss: 5.049, avg. samples / sec: 236.76
Iteration:   4780, Loss function: 5.177, Average Loss: 5.045, avg. samples / sec: 322.14
Iteration:   4800, Loss function: 4.920, Average Loss: 5.042, avg. samples / sec: 316.35
Iteration:   4820, Loss function: 4.785, Average Loss: 5.039, avg. samples / sec: 322.68
Iteration:   4840, Loss function: 5.021, Average Loss: 5.037, avg. samples / sec: 314.33
Iteration:   4860, Loss function: 4.748, Average Loss: 5.032, avg. samples / sec: 306.19
Iteration:   4880, Loss function: 5.040, Average Loss: 5.028, avg. samples / sec: 332.43
Iteration:   4900, Loss function: 4.366, Average Loss: 5.023, avg. samples / sec: 309.12
Iteration:   4920, Loss function: 4.870, Average Loss: 5.020, avg. samples / sec: 315.31
Iteration:   4940, Loss function: 4.609, Average Loss: 5.015, avg. samples / sec: 321.72
Iteration:   4960, Loss function: 4.614, Average Loss: 5.011, avg. samples / sec: 272.87
Iteration:   4980, Loss function: 4.701, Average Loss: 5.008, avg. samples / sec: 299.86
Iteration:   5000, Loss function: 4.897, Average Loss: 5.004, avg. samples / sec: 286.84
Iteration:   5020, Loss function: 5.141, Average Loss: 5.001, avg. samples / sec: 322.16
Iteration:   5040, Loss function: 4.779, Average Loss: 4.998, avg. samples / sec: 330.80
Iteration:   5060, Loss function: 4.628, Average Loss: 4.994, avg. samples / sec: 311.79
Iteration:   5080, Loss function: 4.685, Average Loss: 4.990, avg. samples / sec: 323.51
Iteration:   5100, Loss function: 4.687, Average Loss: 4.988, avg. samples / sec: 329.71
Iteration:   5120, Loss function: 4.694, Average Loss: 4.985, avg. samples / sec: 325.38
Iteration:   5140, Loss function: 4.892, Average Loss: 4.981, avg. samples / sec: 310.21
:::MLLOG {"namespace": "", "time_ms": 1639767382115, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 100.67 s
:::MLLOG {"namespace": "", "time_ms": 1639767482914, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767482926, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767482927, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.84s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.96s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10719
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21984
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09469
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19403
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14009
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21798
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10719 AP goal: 0.10000
Iteration:   5160, Loss function: 4.861, Average Loss: 4.977, avg. samples / sec: 21.01
:::MLLOG {"namespace": "", "time_ms": 1639767489439, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767489440, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10719205194137363, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767489440, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767491526, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767494
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:14 PM'
START TIMING RUN WAS 2021-12-17 06:20:46 PM
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:46 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:14 PM'
ENDING TIMING RUN AT 2021-12-17 06:58:14 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 2g.10gb     Device  0: (UUID: MIG-47302280-e35a-505b-880f-886d4b4260a1)
+ result=2248
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2248,nvidia,2021-12-17 06:20:46 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2248,nvidia,2021-12-17 06:20:46 PM'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
