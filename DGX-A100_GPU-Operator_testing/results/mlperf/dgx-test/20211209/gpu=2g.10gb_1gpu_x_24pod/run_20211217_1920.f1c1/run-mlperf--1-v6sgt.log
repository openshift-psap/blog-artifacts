8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0
+ echo 'Found 1 MIG instances: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765248
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:48 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods
running benchmark
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:48 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-v6sgt to the sync file ...
run-mlperf--1-v6sgt Found 7 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
Fri Dec 17 18:20:53 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255305, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765255491, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3820103729, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3820103729
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765257311, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765257311, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765361623, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765361623, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765362961, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765362961, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765363290, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765363291, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765363292, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.062, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.152, Average Loss: 0.460, avg. samples / sec: 333.16
Iteration:     40, Loss function: 20.864, Average Loss: 0.862, avg. samples / sec: 312.14
Iteration:     60, Loss function: 20.440, Average Loss: 1.252, avg. samples / sec: 279.73
Iteration:     80, Loss function: 20.307, Average Loss: 1.628, avg. samples / sec: 257.71
Iteration:    100, Loss function: 17.524, Average Loss: 1.974, avg. samples / sec: 246.55
Iteration:    120, Loss function: 12.014, Average Loss: 2.208, avg. samples / sec: 268.18
Iteration:    140, Loss function: 9.900, Average Loss: 2.381, avg. samples / sec: 262.38
Iteration:    160, Loss function: 9.400, Average Loss: 2.524, avg. samples / sec: 271.19
Iteration:    180, Loss function: 9.166, Average Loss: 2.656, avg. samples / sec: 279.86
Iteration:    200, Loss function: 8.834, Average Loss: 2.783, avg. samples / sec: 272.63
Iteration:    220, Loss function: 8.605, Average Loss: 2.902, avg. samples / sec: 276.93
Iteration:    240, Loss function: 8.447, Average Loss: 3.018, avg. samples / sec: 282.62
Iteration:    260, Loss function: 8.673, Average Loss: 3.130, avg. samples / sec: 290.38
Iteration:    280, Loss function: 8.551, Average Loss: 3.239, avg. samples / sec: 260.77
Iteration:    300, Loss function: 8.482, Average Loss: 3.342, avg. samples / sec: 289.97
Iteration:    320, Loss function: 8.578, Average Loss: 3.445, avg. samples / sec: 293.44
Iteration:    340, Loss function: 8.593, Average Loss: 3.545, avg. samples / sec: 302.64
Iteration:    360, Loss function: 8.087, Average Loss: 3.638, avg. samples / sec: 323.30
Iteration:    380, Loss function: 8.090, Average Loss: 3.727, avg. samples / sec: 290.29
Iteration:    400, Loss function: 8.003, Average Loss: 3.812, avg. samples / sec: 275.15
Iteration:    420, Loss function: 7.765, Average Loss: 3.894, avg. samples / sec: 317.78
Iteration:    440, Loss function: 7.784, Average Loss: 3.973, avg. samples / sec: 263.56
Iteration:    460, Loss function: 7.905, Average Loss: 4.050, avg. samples / sec: 291.23
Iteration:    480, Loss function: 7.621, Average Loss: 4.123, avg. samples / sec: 329.94
Iteration:    500, Loss function: 7.625, Average Loss: 4.193, avg. samples / sec: 319.02
Iteration:    520, Loss function: 7.633, Average Loss: 4.260, avg. samples / sec: 308.00
Iteration:    540, Loss function: 7.502, Average Loss: 4.325, avg. samples / sec: 252.00
Iteration:    560, Loss function: 7.313, Average Loss: 4.386, avg. samples / sec: 280.70
Iteration:    580, Loss function: 7.317, Average Loss: 4.446, avg. samples / sec: 314.20
Iteration:    600, Loss function: 7.318, Average Loss: 4.504, avg. samples / sec: 319.21
Iteration:    620, Loss function: 7.046, Average Loss: 4.558, avg. samples / sec: 328.65
Iteration:    640, Loss function: 6.948, Average Loss: 4.612, avg. samples / sec: 328.99
Iteration:    660, Loss function: 7.314, Average Loss: 4.664, avg. samples / sec: 301.05
Iteration:    680, Loss function: 7.324, Average Loss: 4.714, avg. samples / sec: 297.47
Iteration:    700, Loss function: 6.766, Average Loss: 4.760, avg. samples / sec: 326.51
Iteration:    720, Loss function: 7.119, Average Loss: 4.810, avg. samples / sec: 320.57
Iteration:    740, Loss function: 6.916, Average Loss: 4.854, avg. samples / sec: 327.10
Iteration:    760, Loss function: 7.052, Average Loss: 4.897, avg. samples / sec: 312.16
Iteration:    780, Loss function: 6.894, Average Loss: 4.939, avg. samples / sec: 301.51
Iteration:    800, Loss function: 7.107, Average Loss: 4.977, avg. samples / sec: 309.05
Iteration:    820, Loss function: 6.861, Average Loss: 5.015, avg. samples / sec: 267.08
Iteration:    840, Loss function: 6.690, Average Loss: 5.050, avg. samples / sec: 275.86
Iteration:    860, Loss function: 6.854, Average Loss: 5.084, avg. samples / sec: 292.60
Iteration:    880, Loss function: 6.823, Average Loss: 5.117, avg. samples / sec: 316.54
Iteration:    900, Loss function: 6.679, Average Loss: 5.148, avg. samples / sec: 268.37
Iteration:    920, Loss function: 6.766, Average Loss: 5.176, avg. samples / sec: 300.84
Iteration:    940, Loss function: 6.749, Average Loss: 5.205, avg. samples / sec: 234.38
Iteration:    960, Loss function: 6.312, Average Loss: 5.232, avg. samples / sec: 224.48
Iteration:    980, Loss function: 6.397, Average Loss: 5.258, avg. samples / sec: 258.04
Iteration:   1000, Loss function: 6.688, Average Loss: 5.283, avg. samples / sec: 327.97
Iteration:   1020, Loss function: 6.245, Average Loss: 5.306, avg. samples / sec: 328.19
:::MLLOG {"namespace": "", "time_ms": 1639765768804, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765768818, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.513, Average Loss: 5.330, avg. samples / sec: 217.79
Iteration:   1060, Loss function: 6.315, Average Loss: 5.352, avg. samples / sec: 304.07
Iteration:   1080, Loss function: 6.345, Average Loss: 5.374, avg. samples / sec: 323.90
Iteration:   1100, Loss function: 6.120, Average Loss: 5.393, avg. samples / sec: 326.35
Iteration:   1120, Loss function: 6.204, Average Loss: 5.411, avg. samples / sec: 264.96
Iteration:   1140, Loss function: 6.449, Average Loss: 5.429, avg. samples / sec: 318.32
Iteration:   1160, Loss function: 6.197, Average Loss: 5.446, avg. samples / sec: 302.91
Iteration:   1180, Loss function: 6.390, Average Loss: 5.462, avg. samples / sec: 330.21
Iteration:   1200, Loss function: 6.203, Average Loss: 5.477, avg. samples / sec: 296.80
Iteration:   1220, Loss function: 6.156, Average Loss: 5.492, avg. samples / sec: 217.91
Iteration:   1240, Loss function: 6.002, Average Loss: 5.503, avg. samples / sec: 252.43
Iteration:   1260, Loss function: 5.978, Average Loss: 5.515, avg. samples / sec: 327.05
Iteration:   1280, Loss function: 6.047, Average Loss: 5.526, avg. samples / sec: 331.86
Iteration:   1300, Loss function: 6.065, Average Loss: 5.538, avg. samples / sec: 197.61
Iteration:   1320, Loss function: 6.247, Average Loss: 5.549, avg. samples / sec: 258.54
Iteration:   1340, Loss function: 5.864, Average Loss: 5.558, avg. samples / sec: 294.11
Iteration:   1360, Loss function: 6.191, Average Loss: 5.569, avg. samples / sec: 328.85
Iteration:   1380, Loss function: 6.207, Average Loss: 5.579, avg. samples / sec: 277.66
Iteration:   1400, Loss function: 6.050, Average Loss: 5.587, avg. samples / sec: 255.70
Iteration:   1420, Loss function: 5.917, Average Loss: 5.594, avg. samples / sec: 246.68
Iteration:   1440, Loss function: 6.250, Average Loss: 5.601, avg. samples / sec: 281.40
Iteration:   1460, Loss function: 6.129, Average Loss: 5.609, avg. samples / sec: 274.88
Iteration:   1480, Loss function: 5.908, Average Loss: 5.617, avg. samples / sec: 321.66
Iteration:   1500, Loss function: 6.301, Average Loss: 5.625, avg. samples / sec: 329.11
Iteration:   1520, Loss function: 5.841, Average Loss: 5.631, avg. samples / sec: 339.70
Iteration:   1540, Loss function: 6.108, Average Loss: 5.635, avg. samples / sec: 329.27
Iteration:   1560, Loss function: 5.863, Average Loss: 5.639, avg. samples / sec: 317.04
Iteration:   1580, Loss function: 5.589, Average Loss: 5.644, avg. samples / sec: 317.50
Iteration:   1600, Loss function: 6.136, Average Loss: 5.649, avg. samples / sec: 323.69
Iteration:   1620, Loss function: 5.640, Average Loss: 5.653, avg. samples / sec: 301.47
Iteration:   1640, Loss function: 6.005, Average Loss: 5.657, avg. samples / sec: 328.17
Iteration:   1660, Loss function: 6.007, Average Loss: 5.661, avg. samples / sec: 292.47
Iteration:   1680, Loss function: 5.755, Average Loss: 5.663, avg. samples / sec: 326.38
Iteration:   1700, Loss function: 5.375, Average Loss: 5.666, avg. samples / sec: 323.89
Iteration:   1720, Loss function: 5.614, Average Loss: 5.668, avg. samples / sec: 342.14
Iteration:   1740, Loss function: 5.755, Average Loss: 5.668, avg. samples / sec: 214.66
Iteration:   1760, Loss function: 5.659, Average Loss: 5.670, avg. samples / sec: 273.93
Iteration:   1780, Loss function: 5.820, Average Loss: 5.670, avg. samples / sec: 303.90
Iteration:   1800, Loss function: 5.789, Average Loss: 5.671, avg. samples / sec: 237.86
Iteration:   1820, Loss function: 5.921, Average Loss: 5.672, avg. samples / sec: 288.65
Iteration:   1840, Loss function: 5.837, Average Loss: 5.672, avg. samples / sec: 309.13
Iteration:   1860, Loss function: 5.486, Average Loss: 5.671, avg. samples / sec: 336.19
Iteration:   1880, Loss function: 5.840, Average Loss: 5.672, avg. samples / sec: 322.99
Iteration:   1900, Loss function: 5.912, Average Loss: 5.673, avg. samples / sec: 325.13
Iteration:   1920, Loss function: 5.697, Average Loss: 5.673, avg. samples / sec: 312.36
Iteration:   1940, Loss function: 5.753, Average Loss: 5.671, avg. samples / sec: 280.59
Iteration:   1960, Loss function: 5.512, Average Loss: 5.669, avg. samples / sec: 328.81
Iteration:   1980, Loss function: 5.728, Average Loss: 5.668, avg. samples / sec: 325.56
Iteration:   2000, Loss function: 5.590, Average Loss: 5.667, avg. samples / sec: 301.28
Iteration:   2020, Loss function: 5.644, Average Loss: 5.665, avg. samples / sec: 326.94
Iteration:   2040, Loss function: 5.663, Average Loss: 5.664, avg. samples / sec: 331.34
:::MLLOG {"namespace": "", "time_ms": 1639766166776, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766166777, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.412, Average Loss: 5.662, avg. samples / sec: 328.71
Iteration:   2080, Loss function: 5.102, Average Loss: 5.660, avg. samples / sec: 330.93
Iteration:   2100, Loss function: 5.464, Average Loss: 5.657, avg. samples / sec: 323.65
Iteration:   2120, Loss function: 5.262, Average Loss: 5.654, avg. samples / sec: 316.44
Iteration:   2140, Loss function: 5.375, Average Loss: 5.649, avg. samples / sec: 317.55
Iteration:   2160, Loss function: 5.491, Average Loss: 5.646, avg. samples / sec: 322.50
Iteration:   2180, Loss function: 5.352, Average Loss: 5.644, avg. samples / sec: 295.02
Iteration:   2200, Loss function: 5.488, Average Loss: 5.639, avg. samples / sec: 285.56
Iteration:   2220, Loss function: 5.448, Average Loss: 5.636, avg. samples / sec: 275.93
Iteration:   2240, Loss function: 5.530, Average Loss: 5.633, avg. samples / sec: 314.61
Iteration:   2260, Loss function: 5.260, Average Loss: 5.628, avg. samples / sec: 315.92
Iteration:   2280, Loss function: 5.260, Average Loss: 5.626, avg. samples / sec: 322.25
Iteration:   2300, Loss function: 5.240, Average Loss: 5.622, avg. samples / sec: 319.61
Iteration:   2320, Loss function: 5.340, Average Loss: 5.619, avg. samples / sec: 309.59
Iteration:   2340, Loss function: 5.629, Average Loss: 5.615, avg. samples / sec: 270.89
Iteration:   2360, Loss function: 5.274, Average Loss: 5.611, avg. samples / sec: 324.97
Iteration:   2380, Loss function: 5.459, Average Loss: 5.607, avg. samples / sec: 311.95
Iteration:   2400, Loss function: 5.482, Average Loss: 5.603, avg. samples / sec: 319.74
Iteration:   2420, Loss function: 5.375, Average Loss: 5.599, avg. samples / sec: 290.17
Iteration:   2440, Loss function: 5.353, Average Loss: 5.595, avg. samples / sec: 299.14
Iteration:   2460, Loss function: 5.119, Average Loss: 5.591, avg. samples / sec: 328.86
Iteration:   2480, Loss function: 5.394, Average Loss: 5.586, avg. samples / sec: 302.56
Iteration:   2500, Loss function: 5.280, Average Loss: 5.581, avg. samples / sec: 306.68
Iteration:   2520, Loss function: 5.403, Average Loss: 5.576, avg. samples / sec: 303.54
Iteration:   2540, Loss function: 5.444, Average Loss: 5.573, avg. samples / sec: 310.63
Iteration:   2560, Loss function: 5.586, Average Loss: 5.569, avg. samples / sec: 332.17
Iteration:   2580, Loss function: 5.376, Average Loss: 5.566, avg. samples / sec: 307.46
Iteration:   2600, Loss function: 5.317, Average Loss: 5.563, avg. samples / sec: 279.25
Iteration:   2620, Loss function: 5.751, Average Loss: 5.558, avg. samples / sec: 325.27
Iteration:   2640, Loss function: 5.257, Average Loss: 5.555, avg. samples / sec: 333.79
Iteration:   2660, Loss function: 5.156, Average Loss: 5.550, avg. samples / sec: 324.98
Iteration:   2680, Loss function: 5.160, Average Loss: 5.545, avg. samples / sec: 324.72
Iteration:   2700, Loss function: 5.287, Average Loss: 5.540, avg. samples / sec: 298.39
Iteration:   2720, Loss function: 5.368, Average Loss: 5.536, avg. samples / sec: 320.95
Iteration:   2740, Loss function: 4.929, Average Loss: 5.531, avg. samples / sec: 277.74
Iteration:   2760, Loss function: 4.959, Average Loss: 5.524, avg. samples / sec: 281.88
Iteration:   2780, Loss function: 5.475, Average Loss: 5.521, avg. samples / sec: 309.92
Iteration:   2800, Loss function: 5.358, Average Loss: 5.516, avg. samples / sec: 272.67
Iteration:   2820, Loss function: 5.258, Average Loss: 5.511, avg. samples / sec: 289.92
Iteration:   2840, Loss function: 5.039, Average Loss: 5.506, avg. samples / sec: 288.67
Iteration:   2860, Loss function: 5.092, Average Loss: 5.500, avg. samples / sec: 307.46
Iteration:   2880, Loss function: 5.305, Average Loss: 5.495, avg. samples / sec: 306.33
Iteration:   2900, Loss function: 5.195, Average Loss: 5.491, avg. samples / sec: 329.98
Iteration:   2920, Loss function: 5.086, Average Loss: 5.485, avg. samples / sec: 338.74
Iteration:   2940, Loss function: 5.078, Average Loss: 5.481, avg. samples / sec: 326.06
Iteration:   2960, Loss function: 5.329, Average Loss: 5.476, avg. samples / sec: 323.01
Iteration:   2980, Loss function: 5.051, Average Loss: 5.471, avg. samples / sec: 308.92
Iteration:   3000, Loss function: 5.162, Average Loss: 5.465, avg. samples / sec: 314.76
Iteration:   3020, Loss function: 5.299, Average Loss: 5.458, avg. samples / sec: 317.65
Iteration:   3040, Loss function: 5.085, Average Loss: 5.453, avg. samples / sec: 336.90
Iteration:   3060, Loss function: 4.850, Average Loss: 5.447, avg. samples / sec: 335.82
Iteration:   3080, Loss function: 4.960, Average Loss: 5.442, avg. samples / sec: 323.40
:::MLLOG {"namespace": "", "time_ms": 1639766545168, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766545170, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.250, Average Loss: 5.436, avg. samples / sec: 304.30
Iteration:   3120, Loss function: 5.103, Average Loss: 5.430, avg. samples / sec: 278.09
Iteration:   3140, Loss function: 4.984, Average Loss: 5.424, avg. samples / sec: 323.29
Iteration:   3160, Loss function: 5.526, Average Loss: 5.419, avg. samples / sec: 319.37
Iteration:   3180, Loss function: 4.972, Average Loss: 5.415, avg. samples / sec: 325.53
Iteration:   3200, Loss function: 5.284, Average Loss: 5.410, avg. samples / sec: 317.38
Iteration:   3220, Loss function: 5.133, Average Loss: 5.404, avg. samples / sec: 332.57
Iteration:   3240, Loss function: 5.127, Average Loss: 5.398, avg. samples / sec: 334.67
Iteration:   3260, Loss function: 5.046, Average Loss: 5.392, avg. samples / sec: 311.70
Iteration:   3280, Loss function: 4.936, Average Loss: 5.386, avg. samples / sec: 274.30
Iteration:   3300, Loss function: 4.768, Average Loss: 5.380, avg. samples / sec: 337.27
Iteration:   3320, Loss function: 4.955, Average Loss: 5.375, avg. samples / sec: 322.88
Iteration:   3340, Loss function: 5.034, Average Loss: 5.370, avg. samples / sec: 329.38
Iteration:   3360, Loss function: 4.948, Average Loss: 5.362, avg. samples / sec: 332.37
Iteration:   3380, Loss function: 5.275, Average Loss: 5.355, avg. samples / sec: 316.51
Iteration:   3400, Loss function: 4.840, Average Loss: 5.350, avg. samples / sec: 268.65
Iteration:   3420, Loss function: 5.037, Average Loss: 5.344, avg. samples / sec: 311.71
Iteration:   3440, Loss function: 4.919, Average Loss: 5.340, avg. samples / sec: 208.31
Iteration:   3460, Loss function: 5.131, Average Loss: 5.334, avg. samples / sec: 231.11
Iteration:   3480, Loss function: 5.212, Average Loss: 5.329, avg. samples / sec: 252.72
Iteration:   3500, Loss function: 5.322, Average Loss: 5.324, avg. samples / sec: 266.65
Iteration:   3520, Loss function: 5.273, Average Loss: 5.322, avg. samples / sec: 280.63
Iteration:   3540, Loss function: 4.838, Average Loss: 5.317, avg. samples / sec: 309.90
Iteration:   3560, Loss function: 4.752, Average Loss: 5.314, avg. samples / sec: 306.16
Iteration:   3580, Loss function: 5.190, Average Loss: 5.310, avg. samples / sec: 297.81
Iteration:   3600, Loss function: 5.298, Average Loss: 5.305, avg. samples / sec: 316.17
Iteration:   3620, Loss function: 4.981, Average Loss: 5.300, avg. samples / sec: 286.09
Iteration:   3640, Loss function: 4.794, Average Loss: 5.294, avg. samples / sec: 329.30
Iteration:   3660, Loss function: 4.993, Average Loss: 5.289, avg. samples / sec: 315.92
Iteration:   3680, Loss function: 5.111, Average Loss: 5.282, avg. samples / sec: 279.79
Iteration:   3700, Loss function: 5.013, Average Loss: 5.276, avg. samples / sec: 291.58
Iteration:   3720, Loss function: 4.978, Average Loss: 5.270, avg. samples / sec: 255.96
Iteration:   3740, Loss function: 5.183, Average Loss: 5.267, avg. samples / sec: 298.09
Iteration:   3760, Loss function: 5.225, Average Loss: 5.263, avg. samples / sec: 285.80
Iteration:   3780, Loss function: 4.985, Average Loss: 5.259, avg. samples / sec: 268.08
Iteration:   3800, Loss function: 5.097, Average Loss: 5.255, avg. samples / sec: 331.45
Iteration:   3820, Loss function: 5.280, Average Loss: 5.249, avg. samples / sec: 315.13
Iteration:   3840, Loss function: 4.702, Average Loss: 5.244, avg. samples / sec: 321.01
Iteration:   3860, Loss function: 5.009, Average Loss: 5.239, avg. samples / sec: 332.56
Iteration:   3880, Loss function: 4.967, Average Loss: 5.233, avg. samples / sec: 326.43
Iteration:   3900, Loss function: 5.256, Average Loss: 5.229, avg. samples / sec: 317.87
Iteration:   3920, Loss function: 5.044, Average Loss: 5.224, avg. samples / sec: 330.50
Iteration:   3940, Loss function: 5.171, Average Loss: 5.219, avg. samples / sec: 304.58
Iteration:   3960, Loss function: 4.828, Average Loss: 5.214, avg. samples / sec: 313.43
Iteration:   3980, Loss function: 4.993, Average Loss: 5.210, avg. samples / sec: 281.30
Iteration:   4000, Loss function: 5.252, Average Loss: 5.206, avg. samples / sec: 285.62
Iteration:   4020, Loss function: 4.985, Average Loss: 5.202, avg. samples / sec: 281.05
Iteration:   4040, Loss function: 5.109, Average Loss: 5.199, avg. samples / sec: 325.95
Iteration:   4060, Loss function: 5.074, Average Loss: 5.194, avg. samples / sec: 329.01
Iteration:   4080, Loss function: 5.070, Average Loss: 5.190, avg. samples / sec: 273.53
Iteration:   4100, Loss function: 5.109, Average Loss: 5.186, avg. samples / sec: 276.82
:::MLLOG {"namespace": "", "time_ms": 1639766938247, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766938249, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.128, Average Loss: 5.182, avg. samples / sec: 295.86
Iteration:   4140, Loss function: 5.020, Average Loss: 5.176, avg. samples / sec: 259.46
Iteration:   4160, Loss function: 4.879, Average Loss: 5.169, avg. samples / sec: 324.22
Iteration:   4180, Loss function: 4.895, Average Loss: 5.163, avg. samples / sec: 265.47
Iteration:   4200, Loss function: 4.846, Average Loss: 5.159, avg. samples / sec: 294.66
Iteration:   4220, Loss function: 4.768, Average Loss: 5.154, avg. samples / sec: 287.56
Iteration:   4240, Loss function: 4.801, Average Loss: 5.148, avg. samples / sec: 288.79
Iteration:   4260, Loss function: 5.213, Average Loss: 5.144, avg. samples / sec: 309.92
Iteration:   4280, Loss function: 4.996, Average Loss: 5.139, avg. samples / sec: 304.77
Iteration:   4300, Loss function: 4.809, Average Loss: 5.133, avg. samples / sec: 286.16
Iteration:   4320, Loss function: 4.845, Average Loss: 5.129, avg. samples / sec: 331.42
Iteration:   4340, Loss function: 4.722, Average Loss: 5.123, avg. samples / sec: 321.49
Iteration:   4360, Loss function: 5.013, Average Loss: 5.119, avg. samples / sec: 339.34
Iteration:   4380, Loss function: 5.079, Average Loss: 5.115, avg. samples / sec: 310.72
Iteration:   4400, Loss function: 4.933, Average Loss: 5.110, avg. samples / sec: 305.10
Iteration:   4420, Loss function: 4.739, Average Loss: 5.106, avg. samples / sec: 326.13
Iteration:   4440, Loss function: 4.845, Average Loss: 5.101, avg. samples / sec: 314.29
Iteration:   4460, Loss function: 5.210, Average Loss: 5.097, avg. samples / sec: 313.36
Iteration:   4480, Loss function: 4.823, Average Loss: 5.093, avg. samples / sec: 291.40
Iteration:   4500, Loss function: 4.746, Average Loss: 5.090, avg. samples / sec: 262.10
Iteration:   4520, Loss function: 4.748, Average Loss: 5.086, avg. samples / sec: 301.09
Iteration:   4540, Loss function: 5.100, Average Loss: 5.081, avg. samples / sec: 298.30
Iteration:   4560, Loss function: 4.499, Average Loss: 5.077, avg. samples / sec: 299.48
Iteration:   4580, Loss function: 4.700, Average Loss: 5.075, avg. samples / sec: 332.60
Iteration:   4600, Loss function: 4.913, Average Loss: 5.071, avg. samples / sec: 319.45
Iteration:   4620, Loss function: 4.740, Average Loss: 5.067, avg. samples / sec: 326.27
Iteration:   4640, Loss function: 4.716, Average Loss: 5.062, avg. samples / sec: 288.71
Iteration:   4660, Loss function: 4.775, Average Loss: 5.059, avg. samples / sec: 321.83
Iteration:   4680, Loss function: 5.243, Average Loss: 5.054, avg. samples / sec: 323.86
Iteration:   4700, Loss function: 4.701, Average Loss: 5.050, avg. samples / sec: 283.03
Iteration:   4720, Loss function: 4.889, Average Loss: 5.046, avg. samples / sec: 323.58
Iteration:   4740, Loss function: 4.879, Average Loss: 5.042, avg. samples / sec: 322.83
Iteration:   4760, Loss function: 4.657, Average Loss: 5.038, avg. samples / sec: 326.26
Iteration:   4780, Loss function: 4.943, Average Loss: 5.034, avg. samples / sec: 285.81
Iteration:   4800, Loss function: 4.882, Average Loss: 5.031, avg. samples / sec: 316.65
Iteration:   4820, Loss function: 4.683, Average Loss: 5.027, avg. samples / sec: 259.11
Iteration:   4840, Loss function: 5.079, Average Loss: 5.024, avg. samples / sec: 261.79
Iteration:   4860, Loss function: 4.831, Average Loss: 5.021, avg. samples / sec: 315.71
Iteration:   4880, Loss function: 5.123, Average Loss: 5.017, avg. samples / sec: 301.25
Iteration:   4900, Loss function: 4.511, Average Loss: 5.012, avg. samples / sec: 312.09
Iteration:   4920, Loss function: 4.663, Average Loss: 5.009, avg. samples / sec: 335.74
Iteration:   4940, Loss function: 4.888, Average Loss: 5.004, avg. samples / sec: 240.70
Iteration:   4960, Loss function: 4.960, Average Loss: 5.001, avg. samples / sec: 304.45
Iteration:   4980, Loss function: 4.704, Average Loss: 4.998, avg. samples / sec: 276.99
Iteration:   5000, Loss function: 5.016, Average Loss: 4.994, avg. samples / sec: 304.35
Iteration:   5020, Loss function: 5.024, Average Loss: 4.992, avg. samples / sec: 321.87
Iteration:   5040, Loss function: 4.893, Average Loss: 4.988, avg. samples / sec: 275.90
Iteration:   5060, Loss function: 4.843, Average Loss: 4.985, avg. samples / sec: 312.48
Iteration:   5080, Loss function: 4.472, Average Loss: 4.981, avg. samples / sec: 304.78
Iteration:   5100, Loss function: 4.752, Average Loss: 4.978, avg. samples / sec: 309.58
Iteration:   5120, Loss function: 4.552, Average Loss: 4.975, avg. samples / sec: 283.15
Iteration:   5140, Loss function: 4.871, Average Loss: 4.971, avg. samples / sec: 309.49
:::MLLOG {"namespace": "", "time_ms": 1639767328512, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 79.50 s
:::MLLOG {"namespace": "", "time_ms": 1639767408401, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767408488, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767408506, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=7.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.829, Average Loss: 4.966, avg. samples / sec: 24.38
DONE (t=10.95s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11094
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22501
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10031
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19892
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11094 AP goal: 0.10000
Iteration:   5180, Loss function: 4.810, Average Loss: 4.961, avg. samples / sec: 327.49
:::MLLOG {"namespace": "", "time_ms": 1639767427881, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767427893, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11093840101472524, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767427893, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767428598, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:57:12 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:57:12 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255305, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765255491, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3820103729, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3820103729
:::MLLOG {"namespace": "", "time_ms": 1639765257311, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765257311, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765257315, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765361623, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765361623, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765362961, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765362961, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765363290, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765363291, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765363292, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.062, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.152, Average Loss: 0.460, avg. samples / sec: 333.16
Iteration:     40, Loss function: 20.864, Average Loss: 0.862, avg. samples / sec: 312.14
Iteration:     60, Loss function: 20.440, Average Loss: 1.252, avg. samples / sec: 279.73
Iteration:     80, Loss function: 20.307, Average Loss: 1.628, avg. samples / sec: 257.71
Iteration:    100, Loss function: 17.524, Average Loss: 1.974, avg. samples / sec: 246.55
Iteration:    120, Loss function: 12.014, Average Loss: 2.208, avg. samples / sec: 268.18
Iteration:    140, Loss function: 9.900, Average Loss: 2.381, avg. samples / sec: 262.38
Iteration:    160, Loss function: 9.400, Average Loss: 2.524, avg. samples / sec: 271.19
Iteration:    180, Loss function: 9.166, Average Loss: 2.656, avg. samples / sec: 279.86
Iteration:    200, Loss function: 8.834, Average Loss: 2.783, avg. samples / sec: 272.63
Iteration:    220, Loss function: 8.605, Average Loss: 2.902, avg. samples / sec: 276.93
Iteration:    240, Loss function: 8.447, Average Loss: 3.018, avg. samples / sec: 282.62
Iteration:    260, Loss function: 8.673, Average Loss: 3.130, avg. samples / sec: 290.38
Iteration:    280, Loss function: 8.551, Average Loss: 3.239, avg. samples / sec: 260.77
Iteration:    300, Loss function: 8.482, Average Loss: 3.342, avg. samples / sec: 289.97
Iteration:    320, Loss function: 8.578, Average Loss: 3.445, avg. samples / sec: 293.44
Iteration:    340, Loss function: 8.593, Average Loss: 3.545, avg. samples / sec: 302.64
Iteration:    360, Loss function: 8.087, Average Loss: 3.638, avg. samples / sec: 323.30
Iteration:    380, Loss function: 8.090, Average Loss: 3.727, avg. samples / sec: 290.29
Iteration:    400, Loss function: 8.003, Average Loss: 3.812, avg. samples / sec: 275.15
Iteration:    420, Loss function: 7.765, Average Loss: 3.894, avg. samples / sec: 317.78
Iteration:    440, Loss function: 7.784, Average Loss: 3.973, avg. samples / sec: 263.56
Iteration:    460, Loss function: 7.905, Average Loss: 4.050, avg. samples / sec: 291.23
Iteration:    480, Loss function: 7.621, Average Loss: 4.123, avg. samples / sec: 329.94
Iteration:    500, Loss function: 7.625, Average Loss: 4.193, avg. samples / sec: 319.02
Iteration:    520, Loss function: 7.633, Average Loss: 4.260, avg. samples / sec: 308.00
Iteration:    540, Loss function: 7.502, Average Loss: 4.325, avg. samples / sec: 252.00
Iteration:    560, Loss function: 7.313, Average Loss: 4.386, avg. samples / sec: 280.70
Iteration:    580, Loss function: 7.317, Average Loss: 4.446, avg. samples / sec: 314.20
Iteration:    600, Loss function: 7.318, Average Loss: 4.504, avg. samples / sec: 319.21
Iteration:    620, Loss function: 7.046, Average Loss: 4.558, avg. samples / sec: 328.65
Iteration:    640, Loss function: 6.948, Average Loss: 4.612, avg. samples / sec: 328.99
Iteration:    660, Loss function: 7.314, Average Loss: 4.664, avg. samples / sec: 301.05
Iteration:    680, Loss function: 7.324, Average Loss: 4.714, avg. samples / sec: 297.47
Iteration:    700, Loss function: 6.766, Average Loss: 4.760, avg. samples / sec: 326.51
Iteration:    720, Loss function: 7.119, Average Loss: 4.810, avg. samples / sec: 320.57
Iteration:    740, Loss function: 6.916, Average Loss: 4.854, avg. samples / sec: 327.10
Iteration:    760, Loss function: 7.052, Average Loss: 4.897, avg. samples / sec: 312.16
Iteration:    780, Loss function: 6.894, Average Loss: 4.939, avg. samples / sec: 301.51
Iteration:    800, Loss function: 7.107, Average Loss: 4.977, avg. samples / sec: 309.05
Iteration:    820, Loss function: 6.861, Average Loss: 5.015, avg. samples / sec: 267.08
Iteration:    840, Loss function: 6.690, Average Loss: 5.050, avg. samples / sec: 275.86
Iteration:    860, Loss function: 6.854, Average Loss: 5.084, avg. samples / sec: 292.60
Iteration:    880, Loss function: 6.823, Average Loss: 5.117, avg. samples / sec: 316.54
Iteration:    900, Loss function: 6.679, Average Loss: 5.148, avg. samples / sec: 268.37
Iteration:    920, Loss function: 6.766, Average Loss: 5.176, avg. samples / sec: 300.84
Iteration:    940, Loss function: 6.749, Average Loss: 5.205, avg. samples / sec: 234.38
Iteration:    960, Loss function: 6.312, Average Loss: 5.232, avg. samples / sec: 224.48
Iteration:    980, Loss function: 6.397, Average Loss: 5.258, avg. samples / sec: 258.04
Iteration:   1000, Loss function: 6.688, Average Loss: 5.283, avg. samples / sec: 327.97
Iteration:   1020, Loss function: 6.245, Average Loss: 5.306, avg. samples / sec: 328.19
:::MLLOG {"namespace": "", "time_ms": 1639765768804, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765768818, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.513, Average Loss: 5.330, avg. samples / sec: 217.79
Iteration:   1060, Loss function: 6.315, Average Loss: 5.352, avg. samples / sec: 304.07
Iteration:   1080, Loss function: 6.345, Average Loss: 5.374, avg. samples / sec: 323.90
Iteration:   1100, Loss function: 6.120, Average Loss: 5.393, avg. samples / sec: 326.35
Iteration:   1120, Loss function: 6.204, Average Loss: 5.411, avg. samples / sec: 264.96
Iteration:   1140, Loss function: 6.449, Average Loss: 5.429, avg. samples / sec: 318.32
Iteration:   1160, Loss function: 6.197, Average Loss: 5.446, avg. samples / sec: 302.91
Iteration:   1180, Loss function: 6.390, Average Loss: 5.462, avg. samples / sec: 330.21
Iteration:   1200, Loss function: 6.203, Average Loss: 5.477, avg. samples / sec: 296.80
Iteration:   1220, Loss function: 6.156, Average Loss: 5.492, avg. samples / sec: 217.91
Iteration:   1240, Loss function: 6.002, Average Loss: 5.503, avg. samples / sec: 252.43
Iteration:   1260, Loss function: 5.978, Average Loss: 5.515, avg. samples / sec: 327.05
Iteration:   1280, Loss function: 6.047, Average Loss: 5.526, avg. samples / sec: 331.86
Iteration:   1300, Loss function: 6.065, Average Loss: 5.538, avg. samples / sec: 197.61
Iteration:   1320, Loss function: 6.247, Average Loss: 5.549, avg. samples / sec: 258.54
Iteration:   1340, Loss function: 5.864, Average Loss: 5.558, avg. samples / sec: 294.11
Iteration:   1360, Loss function: 6.191, Average Loss: 5.569, avg. samples / sec: 328.85
Iteration:   1380, Loss function: 6.207, Average Loss: 5.579, avg. samples / sec: 277.66
Iteration:   1400, Loss function: 6.050, Average Loss: 5.587, avg. samples / sec: 255.70
Iteration:   1420, Loss function: 5.917, Average Loss: 5.594, avg. samples / sec: 246.68
Iteration:   1440, Loss function: 6.250, Average Loss: 5.601, avg. samples / sec: 281.40
Iteration:   1460, Loss function: 6.129, Average Loss: 5.609, avg. samples / sec: 274.88
Iteration:   1480, Loss function: 5.908, Average Loss: 5.617, avg. samples / sec: 321.66
Iteration:   1500, Loss function: 6.301, Average Loss: 5.625, avg. samples / sec: 329.11
Iteration:   1520, Loss function: 5.841, Average Loss: 5.631, avg. samples / sec: 339.70
Iteration:   1540, Loss function: 6.108, Average Loss: 5.635, avg. samples / sec: 329.27
Iteration:   1560, Loss function: 5.863, Average Loss: 5.639, avg. samples / sec: 317.04
Iteration:   1580, Loss function: 5.589, Average Loss: 5.644, avg. samples / sec: 317.50
Iteration:   1600, Loss function: 6.136, Average Loss: 5.649, avg. samples / sec: 323.69
Iteration:   1620, Loss function: 5.640, Average Loss: 5.653, avg. samples / sec: 301.47
Iteration:   1640, Loss function: 6.005, Average Loss: 5.657, avg. samples / sec: 328.17
Iteration:   1660, Loss function: 6.007, Average Loss: 5.661, avg. samples / sec: 292.47
Iteration:   1680, Loss function: 5.755, Average Loss: 5.663, avg. samples / sec: 326.38
Iteration:   1700, Loss function: 5.375, Average Loss: 5.666, avg. samples / sec: 323.89
Iteration:   1720, Loss function: 5.614, Average Loss: 5.668, avg. samples / sec: 342.14
Iteration:   1740, Loss function: 5.755, Average Loss: 5.668, avg. samples / sec: 214.66
Iteration:   1760, Loss function: 5.659, Average Loss: 5.670, avg. samples / sec: 273.93
Iteration:   1780, Loss function: 5.820, Average Loss: 5.670, avg. samples / sec: 303.90
Iteration:   1800, Loss function: 5.789, Average Loss: 5.671, avg. samples / sec: 237.86
Iteration:   1820, Loss function: 5.921, Average Loss: 5.672, avg. samples / sec: 288.65
Iteration:   1840, Loss function: 5.837, Average Loss: 5.672, avg. samples / sec: 309.13
Iteration:   1860, Loss function: 5.486, Average Loss: 5.671, avg. samples / sec: 336.19
Iteration:   1880, Loss function: 5.840, Average Loss: 5.672, avg. samples / sec: 322.99
Iteration:   1900, Loss function: 5.912, Average Loss: 5.673, avg. samples / sec: 325.13
Iteration:   1920, Loss function: 5.697, Average Loss: 5.673, avg. samples / sec: 312.36
Iteration:   1940, Loss function: 5.753, Average Loss: 5.671, avg. samples / sec: 280.59
Iteration:   1960, Loss function: 5.512, Average Loss: 5.669, avg. samples / sec: 328.81
Iteration:   1980, Loss function: 5.728, Average Loss: 5.668, avg. samples / sec: 325.56
Iteration:   2000, Loss function: 5.590, Average Loss: 5.667, avg. samples / sec: 301.28
Iteration:   2020, Loss function: 5.644, Average Loss: 5.665, avg. samples / sec: 326.94
Iteration:   2040, Loss function: 5.663, Average Loss: 5.664, avg. samples / sec: 331.34
:::MLLOG {"namespace": "", "time_ms": 1639766166776, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766166777, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.412, Average Loss: 5.662, avg. samples / sec: 328.71
Iteration:   2080, Loss function: 5.102, Average Loss: 5.660, avg. samples / sec: 330.93
Iteration:   2100, Loss function: 5.464, Average Loss: 5.657, avg. samples / sec: 323.65
Iteration:   2120, Loss function: 5.262, Average Loss: 5.654, avg. samples / sec: 316.44
Iteration:   2140, Loss function: 5.375, Average Loss: 5.649, avg. samples / sec: 317.55
Iteration:   2160, Loss function: 5.491, Average Loss: 5.646, avg. samples / sec: 322.50
Iteration:   2180, Loss function: 5.352, Average Loss: 5.644, avg. samples / sec: 295.02
Iteration:   2200, Loss function: 5.488, Average Loss: 5.639, avg. samples / sec: 285.56
Iteration:   2220, Loss function: 5.448, Average Loss: 5.636, avg. samples / sec: 275.93
Iteration:   2240, Loss function: 5.530, Average Loss: 5.633, avg. samples / sec: 314.61
Iteration:   2260, Loss function: 5.260, Average Loss: 5.628, avg. samples / sec: 315.92
Iteration:   2280, Loss function: 5.260, Average Loss: 5.626, avg. samples / sec: 322.25
Iteration:   2300, Loss function: 5.240, Average Loss: 5.622, avg. samples / sec: 319.61
Iteration:   2320, Loss function: 5.340, Average Loss: 5.619, avg. samples / sec: 309.59
Iteration:   2340, Loss function: 5.629, Average Loss: 5.615, avg. samples / sec: 270.89
Iteration:   2360, Loss function: 5.274, Average Loss: 5.611, avg. samples / sec: 324.97
Iteration:   2380, Loss function: 5.459, Average Loss: 5.607, avg. samples / sec: 311.95
Iteration:   2400, Loss function: 5.482, Average Loss: 5.603, avg. samples / sec: 319.74
Iteration:   2420, Loss function: 5.375, Average Loss: 5.599, avg. samples / sec: 290.17
Iteration:   2440, Loss function: 5.353, Average Loss: 5.595, avg. samples / sec: 299.14
Iteration:   2460, Loss function: 5.119, Average Loss: 5.591, avg. samples / sec: 328.86
Iteration:   2480, Loss function: 5.394, Average Loss: 5.586, avg. samples / sec: 302.56
Iteration:   2500, Loss function: 5.280, Average Loss: 5.581, avg. samples / sec: 306.68
Iteration:   2520, Loss function: 5.403, Average Loss: 5.576, avg. samples / sec: 303.54
Iteration:   2540, Loss function: 5.444, Average Loss: 5.573, avg. samples / sec: 310.63
Iteration:   2560, Loss function: 5.586, Average Loss: 5.569, avg. samples / sec: 332.17
Iteration:   2580, Loss function: 5.376, Average Loss: 5.566, avg. samples / sec: 307.46
Iteration:   2600, Loss function: 5.317, Average Loss: 5.563, avg. samples / sec: 279.25
Iteration:   2620, Loss function: 5.751, Average Loss: 5.558, avg. samples / sec: 325.27
Iteration:   2640, Loss function: 5.257, Average Loss: 5.555, avg. samples / sec: 333.79
Iteration:   2660, Loss function: 5.156, Average Loss: 5.550, avg. samples / sec: 324.98
Iteration:   2680, Loss function: 5.160, Average Loss: 5.545, avg. samples / sec: 324.72
Iteration:   2700, Loss function: 5.287, Average Loss: 5.540, avg. samples / sec: 298.39
Iteration:   2720, Loss function: 5.368, Average Loss: 5.536, avg. samples / sec: 320.95
Iteration:   2740, Loss function: 4.929, Average Loss: 5.531, avg. samples / sec: 277.74
Iteration:   2760, Loss function: 4.959, Average Loss: 5.524, avg. samples / sec: 281.88
Iteration:   2780, Loss function: 5.475, Average Loss: 5.521, avg. samples / sec: 309.92
Iteration:   2800, Loss function: 5.358, Average Loss: 5.516, avg. samples / sec: 272.67
Iteration:   2820, Loss function: 5.258, Average Loss: 5.511, avg. samples / sec: 289.92
Iteration:   2840, Loss function: 5.039, Average Loss: 5.506, avg. samples / sec: 288.67
Iteration:   2860, Loss function: 5.092, Average Loss: 5.500, avg. samples / sec: 307.46
Iteration:   2880, Loss function: 5.305, Average Loss: 5.495, avg. samples / sec: 306.33
Iteration:   2900, Loss function: 5.195, Average Loss: 5.491, avg. samples / sec: 329.98
Iteration:   2920, Loss function: 5.086, Average Loss: 5.485, avg. samples / sec: 338.74
Iteration:   2940, Loss function: 5.078, Average Loss: 5.481, avg. samples / sec: 326.06
Iteration:   2960, Loss function: 5.329, Average Loss: 5.476, avg. samples / sec: 323.01
Iteration:   2980, Loss function: 5.051, Average Loss: 5.471, avg. samples / sec: 308.92
Iteration:   3000, Loss function: 5.162, Average Loss: 5.465, avg. samples / sec: 314.76
Iteration:   3020, Loss function: 5.299, Average Loss: 5.458, avg. samples / sec: 317.65
Iteration:   3040, Loss function: 5.085, Average Loss: 5.453, avg. samples / sec: 336.90
Iteration:   3060, Loss function: 4.850, Average Loss: 5.447, avg. samples / sec: 335.82
Iteration:   3080, Loss function: 4.960, Average Loss: 5.442, avg. samples / sec: 323.40
:::MLLOG {"namespace": "", "time_ms": 1639766545168, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766545170, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.250, Average Loss: 5.436, avg. samples / sec: 304.30
Iteration:   3120, Loss function: 5.103, Average Loss: 5.430, avg. samples / sec: 278.09
Iteration:   3140, Loss function: 4.984, Average Loss: 5.424, avg. samples / sec: 323.29
Iteration:   3160, Loss function: 5.526, Average Loss: 5.419, avg. samples / sec: 319.37
Iteration:   3180, Loss function: 4.972, Average Loss: 5.415, avg. samples / sec: 325.53
Iteration:   3200, Loss function: 5.284, Average Loss: 5.410, avg. samples / sec: 317.38
Iteration:   3220, Loss function: 5.133, Average Loss: 5.404, avg. samples / sec: 332.57
Iteration:   3240, Loss function: 5.127, Average Loss: 5.398, avg. samples / sec: 334.67
Iteration:   3260, Loss function: 5.046, Average Loss: 5.392, avg. samples / sec: 311.70
Iteration:   3280, Loss function: 4.936, Average Loss: 5.386, avg. samples / sec: 274.30
Iteration:   3300, Loss function: 4.768, Average Loss: 5.380, avg. samples / sec: 337.27
Iteration:   3320, Loss function: 4.955, Average Loss: 5.375, avg. samples / sec: 322.88
Iteration:   3340, Loss function: 5.034, Average Loss: 5.370, avg. samples / sec: 329.38
Iteration:   3360, Loss function: 4.948, Average Loss: 5.362, avg. samples / sec: 332.37
Iteration:   3380, Loss function: 5.275, Average Loss: 5.355, avg. samples / sec: 316.51
Iteration:   3400, Loss function: 4.840, Average Loss: 5.350, avg. samples / sec: 268.65
Iteration:   3420, Loss function: 5.037, Average Loss: 5.344, avg. samples / sec: 311.71
Iteration:   3440, Loss function: 4.919, Average Loss: 5.340, avg. samples / sec: 208.31
Iteration:   3460, Loss function: 5.131, Average Loss: 5.334, avg. samples / sec: 231.11
Iteration:   3480, Loss function: 5.212, Average Loss: 5.329, avg. samples / sec: 252.72
Iteration:   3500, Loss function: 5.322, Average Loss: 5.324, avg. samples / sec: 266.65
Iteration:   3520, Loss function: 5.273, Average Loss: 5.322, avg. samples / sec: 280.63
Iteration:   3540, Loss function: 4.838, Average Loss: 5.317, avg. samples / sec: 309.90
Iteration:   3560, Loss function: 4.752, Average Loss: 5.314, avg. samples / sec: 306.16
Iteration:   3580, Loss function: 5.190, Average Loss: 5.310, avg. samples / sec: 297.81
Iteration:   3600, Loss function: 5.298, Average Loss: 5.305, avg. samples / sec: 316.17
Iteration:   3620, Loss function: 4.981, Average Loss: 5.300, avg. samples / sec: 286.09
Iteration:   3640, Loss function: 4.794, Average Loss: 5.294, avg. samples / sec: 329.30
Iteration:   3660, Loss function: 4.993, Average Loss: 5.289, avg. samples / sec: 315.92
Iteration:   3680, Loss function: 5.111, Average Loss: 5.282, avg. samples / sec: 279.79
Iteration:   3700, Loss function: 5.013, Average Loss: 5.276, avg. samples / sec: 291.58
Iteration:   3720, Loss function: 4.978, Average Loss: 5.270, avg. samples / sec: 255.96
Iteration:   3740, Loss function: 5.183, Average Loss: 5.267, avg. samples / sec: 298.09
Iteration:   3760, Loss function: 5.225, Average Loss: 5.263, avg. samples / sec: 285.80
Iteration:   3780, Loss function: 4.985, Average Loss: 5.259, avg. samples / sec: 268.08
Iteration:   3800, Loss function: 5.097, Average Loss: 5.255, avg. samples / sec: 331.45
Iteration:   3820, Loss function: 5.280, Average Loss: 5.249, avg. samples / sec: 315.13
Iteration:   3840, Loss function: 4.702, Average Loss: 5.244, avg. samples / sec: 321.01
Iteration:   3860, Loss function: 5.009, Average Loss: 5.239, avg. samples / sec: 332.56
Iteration:   3880, Loss function: 4.967, Average Loss: 5.233, avg. samples / sec: 326.43
Iteration:   3900, Loss function: 5.256, Average Loss: 5.229, avg. samples / sec: 317.87
Iteration:   3920, Loss function: 5.044, Average Loss: 5.224, avg. samples / sec: 330.50
Iteration:   3940, Loss function: 5.171, Average Loss: 5.219, avg. samples / sec: 304.58
Iteration:   3960, Loss function: 4.828, Average Loss: 5.214, avg. samples / sec: 313.43
Iteration:   3980, Loss function: 4.993, Average Loss: 5.210, avg. samples / sec: 281.30
Iteration:   4000, Loss function: 5.252, Average Loss: 5.206, avg. samples / sec: 285.62
Iteration:   4020, Loss function: 4.985, Average Loss: 5.202, avg. samples / sec: 281.05
Iteration:   4040, Loss function: 5.109, Average Loss: 5.199, avg. samples / sec: 325.95
Iteration:   4060, Loss function: 5.074, Average Loss: 5.194, avg. samples / sec: 329.01
Iteration:   4080, Loss function: 5.070, Average Loss: 5.190, avg. samples / sec: 273.53
Iteration:   4100, Loss function: 5.109, Average Loss: 5.186, avg. samples / sec: 276.82
:::MLLOG {"namespace": "", "time_ms": 1639766938247, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766938249, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.128, Average Loss: 5.182, avg. samples / sec: 295.86
Iteration:   4140, Loss function: 5.020, Average Loss: 5.176, avg. samples / sec: 259.46
Iteration:   4160, Loss function: 4.879, Average Loss: 5.169, avg. samples / sec: 324.22
Iteration:   4180, Loss function: 4.895, Average Loss: 5.163, avg. samples / sec: 265.47
Iteration:   4200, Loss function: 4.846, Average Loss: 5.159, avg. samples / sec: 294.66
Iteration:   4220, Loss function: 4.768, Average Loss: 5.154, avg. samples / sec: 287.56
Iteration:   4240, Loss function: 4.801, Average Loss: 5.148, avg. samples / sec: 288.79
Iteration:   4260, Loss function: 5.213, Average Loss: 5.144, avg. samples / sec: 309.92
Iteration:   4280, Loss function: 4.996, Average Loss: 5.139, avg. samples / sec: 304.77
Iteration:   4300, Loss function: 4.809, Average Loss: 5.133, avg. samples / sec: 286.16
Iteration:   4320, Loss function: 4.845, Average Loss: 5.129, avg. samples / sec: 331.42
Iteration:   4340, Loss function: 4.722, Average Loss: 5.123, avg. samples / sec: 321.49
Iteration:   4360, Loss function: 5.013, Average Loss: 5.119, avg. samples / sec: 339.34
Iteration:   4380, Loss function: 5.079, Average Loss: 5.115, avg. samples / sec: 310.72
Iteration:   4400, Loss function: 4.933, Average Loss: 5.110, avg. samples / sec: 305.10
Iteration:   4420, Loss function: 4.739, Average Loss: 5.106, avg. samples / sec: 326.13
Iteration:   4440, Loss function: 4.845, Average Loss: 5.101, avg. samples / sec: 314.29
Iteration:   4460, Loss function: 5.210, Average Loss: 5.097, avg. samples / sec: 313.36
Iteration:   4480, Loss function: 4.823, Average Loss: 5.093, avg. samples / sec: 291.40
Iteration:   4500, Loss function: 4.746, Average Loss: 5.090, avg. samples / sec: 262.10
Iteration:   4520, Loss function: 4.748, Average Loss: 5.086, avg. samples / sec: 301.09
Iteration:   4540, Loss function: 5.100, Average Loss: 5.081, avg. samples / sec: 298.30
Iteration:   4560, Loss function: 4.499, Average Loss: 5.077, avg. samples / sec: 299.48
Iteration:   4580, Loss function: 4.700, Average Loss: 5.075, avg. samples / sec: 332.60
Iteration:   4600, Loss function: 4.913, Average Loss: 5.071, avg. samples / sec: 319.45
Iteration:   4620, Loss function: 4.740, Average Loss: 5.067, avg. samples / sec: 326.27
Iteration:   4640, Loss function: 4.716, Average Loss: 5.062, avg. samples / sec: 288.71
Iteration:   4660, Loss function: 4.775, Average Loss: 5.059, avg. samples / sec: 321.83
Iteration:   4680, Loss function: 5.243, Average Loss: 5.054, avg. samples / sec: 323.86
Iteration:   4700, Loss function: 4.701, Average Loss: 5.050, avg. samples / sec: 283.03
Iteration:   4720, Loss function: 4.889, Average Loss: 5.046, avg. samples / sec: 323.58
Iteration:   4740, Loss function: 4.879, Average Loss: 5.042, avg. samples / sec: 322.83
Iteration:   4760, Loss function: 4.657, Average Loss: 5.038, avg. samples / sec: 326.26
Iteration:   4780, Loss function: 4.943, Average Loss: 5.034, avg. samples / sec: 285.81
Iteration:   4800, Loss function: 4.882, Average Loss: 5.031, avg. samples / sec: 316.65
Iteration:   4820, Loss function: 4.683, Average Loss: 5.027, avg. samples / sec: 259.11
Iteration:   4840, Loss function: 5.079, Average Loss: 5.024, avg. samples / sec: 261.79
Iteration:   4860, Loss function: 4.831, Average Loss: 5.021, avg. samples / sec: 315.71
Iteration:   4880, Loss function: 5.123, Average Loss: 5.017, avg. samples / sec: 301.25
Iteration:   4900, Loss function: 4.511, Average Loss: 5.012, avg. samples / sec: 312.09
Iteration:   4920, Loss function: 4.663, Average Loss: 5.009, avg. samples / sec: 335.74
Iteration:   4940, Loss function: 4.888, Average Loss: 5.004, avg. samples / sec: 240.70
Iteration:   4960, Loss function: 4.960, Average Loss: 5.001, avg. samples / sec: 304.45
Iteration:   4980, Loss function: 4.704, Average Loss: 4.998, avg. samples / sec: 276.99
Iteration:   5000, Loss function: 5.016, Average Loss: 4.994, avg. samples / sec: 304.35
Iteration:   5020, Loss function: 5.024, Average Loss: 4.992, avg. samples / sec: 321.87
Iteration:   5040, Loss function: 4.893, Average Loss: 4.988, avg. samples / sec: 275.90
Iteration:   5060, Loss function: 4.843, Average Loss: 4.985, avg. samples / sec: 312.48
Iteration:   5080, Loss function: 4.472, Average Loss: 4.981, avg. samples / sec: 304.78
Iteration:   5100, Loss function: 4.752, Average Loss: 4.978, avg. samples / sec: 309.58
Iteration:   5120, Loss function: 4.552, Average Loss: 4.975, avg. samples / sec: 283.15
Iteration:   5140, Loss function: 4.871, Average Loss: 4.971, avg. samples / sec: 309.49
:::MLLOG {"namespace": "", "time_ms": 1639767328512, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 79.50 s
:::MLLOG {"namespace": "", "time_ms": 1639767408401, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767408488, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767408506, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=7.33s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 4.829, Average Loss: 4.966, avg. samples / sec: 24.38
DONE (t=10.95s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11094
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22501
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10031
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19892
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.21047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22348
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11094 AP goal: 0.10000
Iteration:   5180, Loss function: 4.810, Average Loss: 4.961, avg. samples / sec: 327.49
:::MLLOG {"namespace": "", "time_ms": 1639767427881, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767427893, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11093840101472524, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767427893, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767428598, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767432
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:57:12 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:48 PM'
START TIMING RUN WAS 2021-12-17 06:20:48 PM
ENDING TIMING RUN AT 2021-12-17 06:57:12 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:57:12 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-51978471-f0f5-57a7-8d21-6d7eb61106e0)
+ result=2184
RESULT,SINGLE_STAGE_DETECTOR,,2184,nvidia,2021-12-17 06:20:48 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2184,nvidia,2021-12-17 06:20:48 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
