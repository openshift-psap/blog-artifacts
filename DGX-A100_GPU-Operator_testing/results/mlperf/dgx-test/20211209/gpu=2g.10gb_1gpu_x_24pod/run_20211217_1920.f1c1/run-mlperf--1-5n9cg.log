8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36
+ echo 'Found 1 MIG instances: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765253
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:53 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:53 PM GPU: 1 x 2g.10gb x 24 Pods
running benchmark
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:53 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:53 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-5n9cg to the sync file ...
run-mlperf--1-5n9cg Found 23 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
     9	run-mlperf--1-8cwsf
    10	run-mlperf--1-gvfzv
    11	run-mlperf--1-wbcdz
    12	run-mlperf--1-nfj8k
    13	run-mlperf--1-kwxx4
    14	run-mlperf--1-lb9mj
    15	run-mlperf--1-xz9mq
    16	run-mlperf--1-pgt2r
    17	run-mlperf--1-rrqzl
    18	run-mlperf--1-sbgrm
    19	run-mlperf--1-pvnvk
    20	run-mlperf--1-fbqms
    21	run-mlperf--1-2lpws
    22	run-mlperf--1-ddbfr
    23	run-mlperf--1-5n9cg
Fri Dec 17 18:20:58 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
Running on the MIG GPU
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765261198, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765262068, "event_type": "POINT_IN_TIME", "key": "seed", "value": 474282592, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 474282592
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765266840, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266840, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266847, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369435, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369436, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765375115, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765375115, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375513, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375513, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375515, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.817, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.171, Average Loss: 0.457, avg. samples / sec: 208.56
Iteration:     40, Loss function: 20.671, Average Loss: 0.859, avg. samples / sec: 249.18
Iteration:     60, Loss function: 20.233, Average Loss: 1.249, avg. samples / sec: 237.93
Iteration:     80, Loss function: 19.961, Average Loss: 1.623, avg. samples / sec: 244.29
Iteration:    100, Loss function: 15.801, Average Loss: 1.954, avg. samples / sec: 263.73
Iteration:    120, Loss function: 12.107, Average Loss: 2.170, avg. samples / sec: 257.53
Iteration:    140, Loss function: 9.660, Average Loss: 2.332, avg. samples / sec: 240.36
Iteration:    160, Loss function: 9.101, Average Loss: 2.472, avg. samples / sec: 264.89
Iteration:    180, Loss function: 8.790, Average Loss: 2.601, avg. samples / sec: 268.02
Iteration:    200, Loss function: 8.713, Average Loss: 2.726, avg. samples / sec: 291.69
Iteration:    220, Loss function: 8.537, Average Loss: 2.846, avg. samples / sec: 274.47
Iteration:    240, Loss function: 8.596, Average Loss: 2.962, avg. samples / sec: 284.33
Iteration:    260, Loss function: 8.761, Average Loss: 3.076, avg. samples / sec: 298.46
Iteration:    280, Loss function: 8.472, Average Loss: 3.188, avg. samples / sec: 291.50
Iteration:    300, Loss function: 8.279, Average Loss: 3.291, avg. samples / sec: 255.44
Iteration:    320, Loss function: 8.396, Average Loss: 3.391, avg. samples / sec: 282.27
Iteration:    340, Loss function: 8.380, Average Loss: 3.487, avg. samples / sec: 305.05
Iteration:    360, Loss function: 8.218, Average Loss: 3.579, avg. samples / sec: 331.01
Iteration:    380, Loss function: 8.107, Average Loss: 3.670, avg. samples / sec: 304.26
Iteration:    400, Loss function: 8.070, Average Loss: 3.754, avg. samples / sec: 316.49
Iteration:    420, Loss function: 7.695, Average Loss: 3.835, avg. samples / sec: 315.23
Iteration:    440, Loss function: 7.833, Average Loss: 3.913, avg. samples / sec: 285.35
Iteration:    460, Loss function: 7.758, Average Loss: 3.988, avg. samples / sec: 296.89
Iteration:    480, Loss function: 7.336, Average Loss: 4.060, avg. samples / sec: 306.67
Iteration:    500, Loss function: 7.563, Average Loss: 4.130, avg. samples / sec: 296.65
Iteration:    520, Loss function: 7.462, Average Loss: 4.197, avg. samples / sec: 258.79
Iteration:    540, Loss function: 7.413, Average Loss: 4.261, avg. samples / sec: 210.86
Iteration:    560, Loss function: 7.164, Average Loss: 4.324, avg. samples / sec: 316.91
Iteration:    580, Loss function: 7.241, Average Loss: 4.385, avg. samples / sec: 283.44
Iteration:    600, Loss function: 7.299, Average Loss: 4.443, avg. samples / sec: 272.90
Iteration:    620, Loss function: 7.062, Average Loss: 4.498, avg. samples / sec: 320.76
Iteration:    640, Loss function: 6.890, Average Loss: 4.552, avg. samples / sec: 298.78
Iteration:    660, Loss function: 7.280, Average Loss: 4.604, avg. samples / sec: 319.63
Iteration:    680, Loss function: 7.198, Average Loss: 4.654, avg. samples / sec: 326.46
Iteration:    700, Loss function: 6.768, Average Loss: 4.701, avg. samples / sec: 329.15
Iteration:    720, Loss function: 7.057, Average Loss: 4.748, avg. samples / sec: 327.34
Iteration:    740, Loss function: 6.880, Average Loss: 4.793, avg. samples / sec: 326.96
Iteration:    760, Loss function: 7.018, Average Loss: 4.837, avg. samples / sec: 326.74
Iteration:    780, Loss function: 6.695, Average Loss: 4.879, avg. samples / sec: 313.94
Iteration:    800, Loss function: 7.165, Average Loss: 4.918, avg. samples / sec: 324.72
Iteration:    820, Loss function: 6.765, Average Loss: 4.956, avg. samples / sec: 306.36
Iteration:    840, Loss function: 6.702, Average Loss: 4.991, avg. samples / sec: 320.65
Iteration:    860, Loss function: 6.902, Average Loss: 5.025, avg. samples / sec: 323.39
Iteration:    880, Loss function: 6.575, Average Loss: 5.057, avg. samples / sec: 327.36
Iteration:    900, Loss function: 6.675, Average Loss: 5.088, avg. samples / sec: 301.83
Iteration:    920, Loss function: 6.575, Average Loss: 5.116, avg. samples / sec: 224.19
Iteration:    940, Loss function: 6.751, Average Loss: 5.145, avg. samples / sec: 278.47
Iteration:    960, Loss function: 6.178, Average Loss: 5.172, avg. samples / sec: 321.70
Iteration:    980, Loss function: 6.365, Average Loss: 5.199, avg. samples / sec: 327.84
Iteration:   1000, Loss function: 6.565, Average Loss: 5.224, avg. samples / sec: 291.13
Iteration:   1020, Loss function: 6.196, Average Loss: 5.246, avg. samples / sec: 325.88
:::MLLOG {"namespace": "", "time_ms": 1639765784167, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765784169, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.600, Average Loss: 5.270, avg. samples / sec: 320.16
Iteration:   1060, Loss function: 6.207, Average Loss: 5.293, avg. samples / sec: 289.11
Iteration:   1080, Loss function: 6.293, Average Loss: 5.315, avg. samples / sec: 247.02
Iteration:   1100, Loss function: 6.194, Average Loss: 5.334, avg. samples / sec: 272.20
Iteration:   1120, Loss function: 6.209, Average Loss: 5.354, avg. samples / sec: 323.59
Iteration:   1140, Loss function: 6.499, Average Loss: 5.374, avg. samples / sec: 332.35
Iteration:   1160, Loss function: 6.070, Average Loss: 5.390, avg. samples / sec: 273.88
Iteration:   1180, Loss function: 6.091, Average Loss: 5.406, avg. samples / sec: 322.28
Iteration:   1200, Loss function: 6.215, Average Loss: 5.422, avg. samples / sec: 296.75
Iteration:   1220, Loss function: 6.210, Average Loss: 5.436, avg. samples / sec: 309.91
Iteration:   1240, Loss function: 6.082, Average Loss: 5.449, avg. samples / sec: 319.44
Iteration:   1260, Loss function: 6.062, Average Loss: 5.461, avg. samples / sec: 271.50
Iteration:   1280, Loss function: 5.898, Average Loss: 5.473, avg. samples / sec: 248.78
Iteration:   1300, Loss function: 6.121, Average Loss: 5.486, avg. samples / sec: 243.31
Iteration:   1320, Loss function: 6.295, Average Loss: 5.498, avg. samples / sec: 331.57
Iteration:   1340, Loss function: 5.835, Average Loss: 5.508, avg. samples / sec: 327.28
Iteration:   1360, Loss function: 5.860, Average Loss: 5.517, avg. samples / sec: 328.62
Iteration:   1380, Loss function: 6.246, Average Loss: 5.527, avg. samples / sec: 328.03
Iteration:   1400, Loss function: 6.207, Average Loss: 5.536, avg. samples / sec: 325.08
Iteration:   1420, Loss function: 5.891, Average Loss: 5.544, avg. samples / sec: 253.51
Iteration:   1440, Loss function: 6.271, Average Loss: 5.552, avg. samples / sec: 313.20
Iteration:   1460, Loss function: 5.999, Average Loss: 5.560, avg. samples / sec: 272.83
Iteration:   1480, Loss function: 5.864, Average Loss: 5.567, avg. samples / sec: 300.98
Iteration:   1500, Loss function: 5.911, Average Loss: 5.574, avg. samples / sec: 338.53
Iteration:   1520, Loss function: 6.017, Average Loss: 5.580, avg. samples / sec: 323.90
Iteration:   1540, Loss function: 6.043, Average Loss: 5.585, avg. samples / sec: 322.39
Iteration:   1560, Loss function: 5.766, Average Loss: 5.590, avg. samples / sec: 327.46
Iteration:   1580, Loss function: 5.824, Average Loss: 5.595, avg. samples / sec: 316.99
Iteration:   1600, Loss function: 6.211, Average Loss: 5.602, avg. samples / sec: 320.55
Iteration:   1620, Loss function: 5.756, Average Loss: 5.606, avg. samples / sec: 300.27
Iteration:   1640, Loss function: 6.083, Average Loss: 5.610, avg. samples / sec: 247.79
Iteration:   1660, Loss function: 5.914, Average Loss: 5.614, avg. samples / sec: 322.52
Iteration:   1680, Loss function: 5.588, Average Loss: 5.617, avg. samples / sec: 338.36
Iteration:   1700, Loss function: 5.255, Average Loss: 5.620, avg. samples / sec: 276.58
Iteration:   1720, Loss function: 5.634, Average Loss: 5.622, avg. samples / sec: 217.61
Iteration:   1740, Loss function: 5.892, Average Loss: 5.625, avg. samples / sec: 275.02
Iteration:   1760, Loss function: 5.512, Average Loss: 5.627, avg. samples / sec: 332.44
Iteration:   1780, Loss function: 5.715, Average Loss: 5.629, avg. samples / sec: 321.60
Iteration:   1800, Loss function: 5.525, Average Loss: 5.630, avg. samples / sec: 338.70
Iteration:   1820, Loss function: 5.899, Average Loss: 5.632, avg. samples / sec: 328.38
Iteration:   1840, Loss function: 5.940, Average Loss: 5.634, avg. samples / sec: 323.53
Iteration:   1860, Loss function: 5.680, Average Loss: 5.633, avg. samples / sec: 324.69
Iteration:   1880, Loss function: 5.961, Average Loss: 5.635, avg. samples / sec: 327.37
Iteration:   1900, Loss function: 5.904, Average Loss: 5.636, avg. samples / sec: 313.90
Iteration:   1920, Loss function: 5.622, Average Loss: 5.635, avg. samples / sec: 302.37
Iteration:   1940, Loss function: 5.792, Average Loss: 5.634, avg. samples / sec: 257.57
Iteration:   1960, Loss function: 5.503, Average Loss: 5.633, avg. samples / sec: 292.16
Iteration:   1980, Loss function: 5.786, Average Loss: 5.633, avg. samples / sec: 320.72
Iteration:   2000, Loss function: 5.629, Average Loss: 5.632, avg. samples / sec: 325.34
Iteration:   2020, Loss function: 5.590, Average Loss: 5.631, avg. samples / sec: 327.05
Iteration:   2040, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 310.49
:::MLLOG {"namespace": "", "time_ms": 1639766175967, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766175969, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.560, Average Loss: 5.628, avg. samples / sec: 245.91
Iteration:   2080, Loss function: 5.042, Average Loss: 5.625, avg. samples / sec: 260.65
Iteration:   2100, Loss function: 5.486, Average Loss: 5.623, avg. samples / sec: 289.28
Iteration:   2120, Loss function: 5.325, Average Loss: 5.620, avg. samples / sec: 336.65
Iteration:   2140, Loss function: 5.437, Average Loss: 5.617, avg. samples / sec: 321.39
Iteration:   2160, Loss function: 5.475, Average Loss: 5.615, avg. samples / sec: 317.04
Iteration:   2180, Loss function: 5.417, Average Loss: 5.613, avg. samples / sec: 295.26
Iteration:   2200, Loss function: 5.452, Average Loss: 5.610, avg. samples / sec: 315.05
Iteration:   2220, Loss function: 5.357, Average Loss: 5.607, avg. samples / sec: 284.14
Iteration:   2240, Loss function: 5.379, Average Loss: 5.605, avg. samples / sec: 320.38
Iteration:   2260, Loss function: 5.295, Average Loss: 5.602, avg. samples / sec: 299.40
Iteration:   2280, Loss function: 5.259, Average Loss: 5.599, avg. samples / sec: 332.58
Iteration:   2300, Loss function: 5.172, Average Loss: 5.596, avg. samples / sec: 322.92
Iteration:   2320, Loss function: 5.282, Average Loss: 5.593, avg. samples / sec: 326.59
Iteration:   2340, Loss function: 5.400, Average Loss: 5.590, avg. samples / sec: 314.67
Iteration:   2360, Loss function: 5.222, Average Loss: 5.586, avg. samples / sec: 298.27
Iteration:   2380, Loss function: 5.392, Average Loss: 5.583, avg. samples / sec: 325.43
Iteration:   2400, Loss function: 5.609, Average Loss: 5.579, avg. samples / sec: 313.43
Iteration:   2420, Loss function: 5.507, Average Loss: 5.575, avg. samples / sec: 285.87
Iteration:   2440, Loss function: 5.393, Average Loss: 5.572, avg. samples / sec: 264.29
Iteration:   2460, Loss function: 5.416, Average Loss: 5.568, avg. samples / sec: 208.31
Iteration:   2480, Loss function: 5.311, Average Loss: 5.564, avg. samples / sec: 320.70
Iteration:   2500, Loss function: 5.373, Average Loss: 5.560, avg. samples / sec: 323.39
Iteration:   2520, Loss function: 5.357, Average Loss: 5.556, avg. samples / sec: 330.26
Iteration:   2540, Loss function: 5.624, Average Loss: 5.553, avg. samples / sec: 323.70
Iteration:   2560, Loss function: 5.122, Average Loss: 5.549, avg. samples / sec: 325.06
Iteration:   2580, Loss function: 5.244, Average Loss: 5.545, avg. samples / sec: 231.44
Iteration:   2600, Loss function: 5.458, Average Loss: 5.541, avg. samples / sec: 215.89
Iteration:   2620, Loss function: 5.575, Average Loss: 5.535, avg. samples / sec: 260.48
Iteration:   2640, Loss function: 5.352, Average Loss: 5.533, avg. samples / sec: 268.89
Iteration:   2660, Loss function: 5.250, Average Loss: 5.530, avg. samples / sec: 289.92
Iteration:   2680, Loss function: 5.256, Average Loss: 5.527, avg. samples / sec: 301.04
Iteration:   2700, Loss function: 5.063, Average Loss: 5.521, avg. samples / sec: 299.49
Iteration:   2720, Loss function: 5.269, Average Loss: 5.517, avg. samples / sec: 329.09
Iteration:   2740, Loss function: 4.953, Average Loss: 5.512, avg. samples / sec: 323.98
Iteration:   2760, Loss function: 5.045, Average Loss: 5.507, avg. samples / sec: 284.79
Iteration:   2780, Loss function: 5.402, Average Loss: 5.503, avg. samples / sec: 231.82
Iteration:   2800, Loss function: 5.181, Average Loss: 5.498, avg. samples / sec: 314.98
Iteration:   2820, Loss function: 5.234, Average Loss: 5.495, avg. samples / sec: 287.33
Iteration:   2840, Loss function: 5.109, Average Loss: 5.491, avg. samples / sec: 253.51
Iteration:   2860, Loss function: 5.156, Average Loss: 5.486, avg. samples / sec: 262.07
Iteration:   2880, Loss function: 5.334, Average Loss: 5.482, avg. samples / sec: 321.20
Iteration:   2900, Loss function: 5.002, Average Loss: 5.478, avg. samples / sec: 240.78
Iteration:   2920, Loss function: 5.171, Average Loss: 5.472, avg. samples / sec: 294.38
Iteration:   2940, Loss function: 4.883, Average Loss: 5.468, avg. samples / sec: 299.77
Iteration:   2960, Loss function: 5.375, Average Loss: 5.464, avg. samples / sec: 296.49
Iteration:   2980, Loss function: 5.245, Average Loss: 5.460, avg. samples / sec: 276.84
Iteration:   3000, Loss function: 5.320, Average Loss: 5.455, avg. samples / sec: 322.00
Iteration:   3020, Loss function: 5.375, Average Loss: 5.448, avg. samples / sec: 234.40
Iteration:   3040, Loss function: 5.263, Average Loss: 5.444, avg. samples / sec: 266.46
Iteration:   3060, Loss function: 5.165, Average Loss: 5.439, avg. samples / sec: 286.33
Iteration:   3080, Loss function: 4.813, Average Loss: 5.434, avg. samples / sec: 274.51
:::MLLOG {"namespace": "", "time_ms": 1639766582695, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766582697, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.170, Average Loss: 5.430, avg. samples / sec: 261.38
Iteration:   3120, Loss function: 4.955, Average Loss: 5.425, avg. samples / sec: 313.42
Iteration:   3140, Loss function: 4.936, Average Loss: 5.419, avg. samples / sec: 279.09
Iteration:   3160, Loss function: 5.358, Average Loss: 5.413, avg. samples / sec: 267.99
Iteration:   3180, Loss function: 4.855, Average Loss: 5.408, avg. samples / sec: 226.97
Iteration:   3200, Loss function: 5.271, Average Loss: 5.403, avg. samples / sec: 271.32
Iteration:   3220, Loss function: 5.095, Average Loss: 5.398, avg. samples / sec: 246.54
Iteration:   3240, Loss function: 5.379, Average Loss: 5.394, avg. samples / sec: 277.36
Iteration:   3260, Loss function: 4.957, Average Loss: 5.388, avg. samples / sec: 335.56
Iteration:   3280, Loss function: 4.861, Average Loss: 5.383, avg. samples / sec: 306.08
Iteration:   3300, Loss function: 4.917, Average Loss: 5.377, avg. samples / sec: 318.81
Iteration:   3320, Loss function: 4.949, Average Loss: 5.372, avg. samples / sec: 316.60
Iteration:   3340, Loss function: 5.247, Average Loss: 5.368, avg. samples / sec: 326.96
Iteration:   3360, Loss function: 5.057, Average Loss: 5.362, avg. samples / sec: 337.68
Iteration:   3380, Loss function: 5.117, Average Loss: 5.355, avg. samples / sec: 312.91
Iteration:   3400, Loss function: 4.851, Average Loss: 5.350, avg. samples / sec: 247.85
Iteration:   3420, Loss function: 5.114, Average Loss: 5.344, avg. samples / sec: 294.63
Iteration:   3440, Loss function: 4.766, Average Loss: 5.339, avg. samples / sec: 306.03
Iteration:   3460, Loss function: 5.255, Average Loss: 5.333, avg. samples / sec: 269.98
Iteration:   3480, Loss function: 5.158, Average Loss: 5.328, avg. samples / sec: 281.69
Iteration:   3500, Loss function: 5.068, Average Loss: 5.324, avg. samples / sec: 318.36
Iteration:   3520, Loss function: 4.922, Average Loss: 5.320, avg. samples / sec: 323.36
Iteration:   3540, Loss function: 5.089, Average Loss: 5.315, avg. samples / sec: 322.27
Iteration:   3560, Loss function: 4.879, Average Loss: 5.311, avg. samples / sec: 320.79
Iteration:   3580, Loss function: 5.122, Average Loss: 5.307, avg. samples / sec: 307.96
Iteration:   3600, Loss function: 5.052, Average Loss: 5.301, avg. samples / sec: 300.74
Iteration:   3620, Loss function: 4.906, Average Loss: 5.296, avg. samples / sec: 306.17
Iteration:   3640, Loss function: 4.761, Average Loss: 5.291, avg. samples / sec: 325.01
Iteration:   3660, Loss function: 5.038, Average Loss: 5.286, avg. samples / sec: 313.84
Iteration:   3680, Loss function: 5.148, Average Loss: 5.280, avg. samples / sec: 316.87
Iteration:   3700, Loss function: 4.940, Average Loss: 5.275, avg. samples / sec: 295.90
Iteration:   3720, Loss function: 5.105, Average Loss: 5.269, avg. samples / sec: 240.62
Iteration:   3740, Loss function: 5.034, Average Loss: 5.265, avg. samples / sec: 312.61
Iteration:   3760, Loss function: 4.899, Average Loss: 5.261, avg. samples / sec: 295.34
Iteration:   3780, Loss function: 5.178, Average Loss: 5.257, avg. samples / sec: 284.11
Iteration:   3800, Loss function: 5.041, Average Loss: 5.253, avg. samples / sec: 270.08
Iteration:   3820, Loss function: 5.294, Average Loss: 5.249, avg. samples / sec: 248.15
Iteration:   3840, Loss function: 5.039, Average Loss: 5.245, avg. samples / sec: 288.95
Iteration:   3860, Loss function: 4.823, Average Loss: 5.240, avg. samples / sec: 330.31
Iteration:   3880, Loss function: 4.983, Average Loss: 5.234, avg. samples / sec: 326.31
Iteration:   3900, Loss function: 5.092, Average Loss: 5.229, avg. samples / sec: 321.46
Iteration:   3920, Loss function: 5.065, Average Loss: 5.223, avg. samples / sec: 310.35
Iteration:   3940, Loss function: 5.027, Average Loss: 5.217, avg. samples / sec: 277.47
Iteration:   3960, Loss function: 4.830, Average Loss: 5.213, avg. samples / sec: 303.17
Iteration:   3980, Loss function: 4.936, Average Loss: 5.209, avg. samples / sec: 321.84
Iteration:   4000, Loss function: 5.148, Average Loss: 5.205, avg. samples / sec: 290.85
Iteration:   4020, Loss function: 4.968, Average Loss: 5.200, avg. samples / sec: 247.87
Iteration:   4040, Loss function: 4.917, Average Loss: 5.197, avg. samples / sec: 314.17
Iteration:   4060, Loss function: 5.164, Average Loss: 5.193, avg. samples / sec: 314.49
Iteration:   4080, Loss function: 5.056, Average Loss: 5.188, avg. samples / sec: 253.18
Iteration:   4100, Loss function: 5.139, Average Loss: 5.184, avg. samples / sec: 307.01
:::MLLOG {"namespace": "", "time_ms": 1639766983649, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766983651, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.208, Average Loss: 5.181, avg. samples / sec: 206.39
Iteration:   4140, Loss function: 5.026, Average Loss: 5.176, avg. samples / sec: 224.91
Iteration:   4160, Loss function: 4.860, Average Loss: 5.169, avg. samples / sec: 334.45
Iteration:   4180, Loss function: 4.948, Average Loss: 5.163, avg. samples / sec: 320.27
Iteration:   4200, Loss function: 4.735, Average Loss: 5.159, avg. samples / sec: 333.53
Iteration:   4220, Loss function: 4.654, Average Loss: 5.154, avg. samples / sec: 330.33
Iteration:   4240, Loss function: 5.017, Average Loss: 5.149, avg. samples / sec: 304.40
Iteration:   4260, Loss function: 4.910, Average Loss: 5.145, avg. samples / sec: 287.85
Iteration:   4280, Loss function: 4.996, Average Loss: 5.139, avg. samples / sec: 296.18
Iteration:   4300, Loss function: 4.746, Average Loss: 5.133, avg. samples / sec: 331.21
Iteration:   4320, Loss function: 4.671, Average Loss: 5.128, avg. samples / sec: 310.27
Iteration:   4340, Loss function: 4.676, Average Loss: 5.122, avg. samples / sec: 313.07
Iteration:   4360, Loss function: 4.760, Average Loss: 5.117, avg. samples / sec: 324.27
Iteration:   4380, Loss function: 5.094, Average Loss: 5.113, avg. samples / sec: 331.59
Iteration:   4400, Loss function: 4.806, Average Loss: 5.109, avg. samples / sec: 331.44
Iteration:   4420, Loss function: 4.937, Average Loss: 5.104, avg. samples / sec: 320.50
Iteration:   4440, Loss function: 4.853, Average Loss: 5.099, avg. samples / sec: 308.53
Iteration:   4460, Loss function: 5.037, Average Loss: 5.094, avg. samples / sec: 325.06
Iteration:   4480, Loss function: 4.995, Average Loss: 5.091, avg. samples / sec: 332.14
Iteration:   4500, Loss function: 4.953, Average Loss: 5.088, avg. samples / sec: 336.48
Iteration:   4520, Loss function: 4.713, Average Loss: 5.084, avg. samples / sec: 340.35
Iteration:   4540, Loss function: 5.199, Average Loss: 5.079, avg. samples / sec: 290.07
Iteration:   4560, Loss function: 4.724, Average Loss: 5.075, avg. samples / sec: 316.43
Iteration:   4580, Loss function: 5.053, Average Loss: 5.073, avg. samples / sec: 331.31
Iteration:   4600, Loss function: 4.832, Average Loss: 5.069, avg. samples / sec: 321.90
Iteration:   4620, Loss function: 4.813, Average Loss: 5.065, avg. samples / sec: 311.14
Iteration:   4640, Loss function: 4.616, Average Loss: 5.059, avg. samples / sec: 328.98
Iteration:   4660, Loss function: 4.673, Average Loss: 5.057, avg. samples / sec: 305.88
Iteration:   4680, Loss function: 5.196, Average Loss: 5.052, avg. samples / sec: 304.90
Iteration:   4700, Loss function: 4.851, Average Loss: 5.048, avg. samples / sec: 316.56
Iteration:   4720, Loss function: 4.862, Average Loss: 5.043, avg. samples / sec: 320.60
Iteration:   4740, Loss function: 4.748, Average Loss: 5.039, avg. samples / sec: 331.67
Iteration:   4760, Loss function: 4.559, Average Loss: 5.036, avg. samples / sec: 318.49
Iteration:   4780, Loss function: 4.951, Average Loss: 5.031, avg. samples / sec: 288.64
Iteration:   4800, Loss function: 4.944, Average Loss: 5.028, avg. samples / sec: 314.72
Iteration:   4820, Loss function: 4.848, Average Loss: 5.025, avg. samples / sec: 335.78
Iteration:   4840, Loss function: 5.139, Average Loss: 5.021, avg. samples / sec: 273.43
Iteration:   4860, Loss function: 4.656, Average Loss: 5.017, avg. samples / sec: 284.91
Iteration:   4880, Loss function: 5.158, Average Loss: 5.013, avg. samples / sec: 329.20
Iteration:   4900, Loss function: 4.584, Average Loss: 5.009, avg. samples / sec: 289.16
Iteration:   4920, Loss function: 4.707, Average Loss: 5.005, avg. samples / sec: 319.92
Iteration:   4940, Loss function: 4.743, Average Loss: 5.001, avg. samples / sec: 334.31
Iteration:   4960, Loss function: 4.528, Average Loss: 4.998, avg. samples / sec: 312.05
Iteration:   4980, Loss function: 4.593, Average Loss: 4.994, avg. samples / sec: 332.86
Iteration:   5000, Loss function: 4.762, Average Loss: 4.990, avg. samples / sec: 289.80
Iteration:   5020, Loss function: 4.991, Average Loss: 4.988, avg. samples / sec: 309.32
Iteration:   5040, Loss function: 4.737, Average Loss: 4.985, avg. samples / sec: 329.89
Iteration:   5060, Loss function: 4.756, Average Loss: 4.982, avg. samples / sec: 317.46
Iteration:   5080, Loss function: 4.360, Average Loss: 4.977, avg. samples / sec: 298.62
Iteration:   5100, Loss function: 4.815, Average Loss: 4.974, avg. samples / sec: 299.40
Iteration:   5120, Loss function: 4.552, Average Loss: 4.970, avg. samples / sec: 282.53
Iteration:   5140, Loss function: 4.836, Average Loss: 4.966, avg. samples / sec: 331.98
:::MLLOG {"namespace": "", "time_ms": 1639767360843, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 101.54 s
:::MLLOG {"namespace": "", "time_ms": 1639767462521, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767462523, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767462524, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.029, Average Loss: 4.962, avg. samples / sec: 20.90
DONE (t=7.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10314
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21203
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09099
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18509
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13278
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20764
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20764
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10314 AP goal: 0.10000
Iteration:   5180, Loss function: 4.776, Average Loss: 4.958, avg. samples / sec: 324.23
:::MLLOG {"namespace": "", "time_ms": 1639767475933, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475934, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10314260612128913, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475935, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767478231, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:07 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:07 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765261198, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765262068, "event_type": "POINT_IN_TIME", "key": "seed", "value": 474282592, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 474282592
:::MLLOG {"namespace": "", "time_ms": 1639765266840, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765266840, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765266847, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765266848, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765369435, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765369436, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765375115, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765375115, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.18s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765375513, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765375513, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765375515, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.817, Average Loss: 0.023, avg. samples / sec: 1.04
Iteration:     20, Loss function: 21.171, Average Loss: 0.457, avg. samples / sec: 208.56
Iteration:     40, Loss function: 20.671, Average Loss: 0.859, avg. samples / sec: 249.18
Iteration:     60, Loss function: 20.233, Average Loss: 1.249, avg. samples / sec: 237.93
Iteration:     80, Loss function: 19.961, Average Loss: 1.623, avg. samples / sec: 244.29
Iteration:    100, Loss function: 15.801, Average Loss: 1.954, avg. samples / sec: 263.73
Iteration:    120, Loss function: 12.107, Average Loss: 2.170, avg. samples / sec: 257.53
Iteration:    140, Loss function: 9.660, Average Loss: 2.332, avg. samples / sec: 240.36
Iteration:    160, Loss function: 9.101, Average Loss: 2.472, avg. samples / sec: 264.89
Iteration:    180, Loss function: 8.790, Average Loss: 2.601, avg. samples / sec: 268.02
Iteration:    200, Loss function: 8.713, Average Loss: 2.726, avg. samples / sec: 291.69
Iteration:    220, Loss function: 8.537, Average Loss: 2.846, avg. samples / sec: 274.47
Iteration:    240, Loss function: 8.596, Average Loss: 2.962, avg. samples / sec: 284.33
Iteration:    260, Loss function: 8.761, Average Loss: 3.076, avg. samples / sec: 298.46
Iteration:    280, Loss function: 8.472, Average Loss: 3.188, avg. samples / sec: 291.50
Iteration:    300, Loss function: 8.279, Average Loss: 3.291, avg. samples / sec: 255.44
Iteration:    320, Loss function: 8.396, Average Loss: 3.391, avg. samples / sec: 282.27
Iteration:    340, Loss function: 8.380, Average Loss: 3.487, avg. samples / sec: 305.05
Iteration:    360, Loss function: 8.218, Average Loss: 3.579, avg. samples / sec: 331.01
Iteration:    380, Loss function: 8.107, Average Loss: 3.670, avg. samples / sec: 304.26
Iteration:    400, Loss function: 8.070, Average Loss: 3.754, avg. samples / sec: 316.49
Iteration:    420, Loss function: 7.695, Average Loss: 3.835, avg. samples / sec: 315.23
Iteration:    440, Loss function: 7.833, Average Loss: 3.913, avg. samples / sec: 285.35
Iteration:    460, Loss function: 7.758, Average Loss: 3.988, avg. samples / sec: 296.89
Iteration:    480, Loss function: 7.336, Average Loss: 4.060, avg. samples / sec: 306.67
Iteration:    500, Loss function: 7.563, Average Loss: 4.130, avg. samples / sec: 296.65
Iteration:    520, Loss function: 7.462, Average Loss: 4.197, avg. samples / sec: 258.79
Iteration:    540, Loss function: 7.413, Average Loss: 4.261, avg. samples / sec: 210.86
Iteration:    560, Loss function: 7.164, Average Loss: 4.324, avg. samples / sec: 316.91
Iteration:    580, Loss function: 7.241, Average Loss: 4.385, avg. samples / sec: 283.44
Iteration:    600, Loss function: 7.299, Average Loss: 4.443, avg. samples / sec: 272.90
Iteration:    620, Loss function: 7.062, Average Loss: 4.498, avg. samples / sec: 320.76
Iteration:    640, Loss function: 6.890, Average Loss: 4.552, avg. samples / sec: 298.78
Iteration:    660, Loss function: 7.280, Average Loss: 4.604, avg. samples / sec: 319.63
Iteration:    680, Loss function: 7.198, Average Loss: 4.654, avg. samples / sec: 326.46
Iteration:    700, Loss function: 6.768, Average Loss: 4.701, avg. samples / sec: 329.15
Iteration:    720, Loss function: 7.057, Average Loss: 4.748, avg. samples / sec: 327.34
Iteration:    740, Loss function: 6.880, Average Loss: 4.793, avg. samples / sec: 326.96
Iteration:    760, Loss function: 7.018, Average Loss: 4.837, avg. samples / sec: 326.74
Iteration:    780, Loss function: 6.695, Average Loss: 4.879, avg. samples / sec: 313.94
Iteration:    800, Loss function: 7.165, Average Loss: 4.918, avg. samples / sec: 324.72
Iteration:    820, Loss function: 6.765, Average Loss: 4.956, avg. samples / sec: 306.36
Iteration:    840, Loss function: 6.702, Average Loss: 4.991, avg. samples / sec: 320.65
Iteration:    860, Loss function: 6.902, Average Loss: 5.025, avg. samples / sec: 323.39
Iteration:    880, Loss function: 6.575, Average Loss: 5.057, avg. samples / sec: 327.36
Iteration:    900, Loss function: 6.675, Average Loss: 5.088, avg. samples / sec: 301.83
Iteration:    920, Loss function: 6.575, Average Loss: 5.116, avg. samples / sec: 224.19
Iteration:    940, Loss function: 6.751, Average Loss: 5.145, avg. samples / sec: 278.47
Iteration:    960, Loss function: 6.178, Average Loss: 5.172, avg. samples / sec: 321.70
Iteration:    980, Loss function: 6.365, Average Loss: 5.199, avg. samples / sec: 327.84
Iteration:   1000, Loss function: 6.565, Average Loss: 5.224, avg. samples / sec: 291.13
Iteration:   1020, Loss function: 6.196, Average Loss: 5.246, avg. samples / sec: 325.88
:::MLLOG {"namespace": "", "time_ms": 1639765784167, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765784169, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.600, Average Loss: 5.270, avg. samples / sec: 320.16
Iteration:   1060, Loss function: 6.207, Average Loss: 5.293, avg. samples / sec: 289.11
Iteration:   1080, Loss function: 6.293, Average Loss: 5.315, avg. samples / sec: 247.02
Iteration:   1100, Loss function: 6.194, Average Loss: 5.334, avg. samples / sec: 272.20
Iteration:   1120, Loss function: 6.209, Average Loss: 5.354, avg. samples / sec: 323.59
Iteration:   1140, Loss function: 6.499, Average Loss: 5.374, avg. samples / sec: 332.35
Iteration:   1160, Loss function: 6.070, Average Loss: 5.390, avg. samples / sec: 273.88
Iteration:   1180, Loss function: 6.091, Average Loss: 5.406, avg. samples / sec: 322.28
Iteration:   1200, Loss function: 6.215, Average Loss: 5.422, avg. samples / sec: 296.75
Iteration:   1220, Loss function: 6.210, Average Loss: 5.436, avg. samples / sec: 309.91
Iteration:   1240, Loss function: 6.082, Average Loss: 5.449, avg. samples / sec: 319.44
Iteration:   1260, Loss function: 6.062, Average Loss: 5.461, avg. samples / sec: 271.50
Iteration:   1280, Loss function: 5.898, Average Loss: 5.473, avg. samples / sec: 248.78
Iteration:   1300, Loss function: 6.121, Average Loss: 5.486, avg. samples / sec: 243.31
Iteration:   1320, Loss function: 6.295, Average Loss: 5.498, avg. samples / sec: 331.57
Iteration:   1340, Loss function: 5.835, Average Loss: 5.508, avg. samples / sec: 327.28
Iteration:   1360, Loss function: 5.860, Average Loss: 5.517, avg. samples / sec: 328.62
Iteration:   1380, Loss function: 6.246, Average Loss: 5.527, avg. samples / sec: 328.03
Iteration:   1400, Loss function: 6.207, Average Loss: 5.536, avg. samples / sec: 325.08
Iteration:   1420, Loss function: 5.891, Average Loss: 5.544, avg. samples / sec: 253.51
Iteration:   1440, Loss function: 6.271, Average Loss: 5.552, avg. samples / sec: 313.20
Iteration:   1460, Loss function: 5.999, Average Loss: 5.560, avg. samples / sec: 272.83
Iteration:   1480, Loss function: 5.864, Average Loss: 5.567, avg. samples / sec: 300.98
Iteration:   1500, Loss function: 5.911, Average Loss: 5.574, avg. samples / sec: 338.53
Iteration:   1520, Loss function: 6.017, Average Loss: 5.580, avg. samples / sec: 323.90
Iteration:   1540, Loss function: 6.043, Average Loss: 5.585, avg. samples / sec: 322.39
Iteration:   1560, Loss function: 5.766, Average Loss: 5.590, avg. samples / sec: 327.46
Iteration:   1580, Loss function: 5.824, Average Loss: 5.595, avg. samples / sec: 316.99
Iteration:   1600, Loss function: 6.211, Average Loss: 5.602, avg. samples / sec: 320.55
Iteration:   1620, Loss function: 5.756, Average Loss: 5.606, avg. samples / sec: 300.27
Iteration:   1640, Loss function: 6.083, Average Loss: 5.610, avg. samples / sec: 247.79
Iteration:   1660, Loss function: 5.914, Average Loss: 5.614, avg. samples / sec: 322.52
Iteration:   1680, Loss function: 5.588, Average Loss: 5.617, avg. samples / sec: 338.36
Iteration:   1700, Loss function: 5.255, Average Loss: 5.620, avg. samples / sec: 276.58
Iteration:   1720, Loss function: 5.634, Average Loss: 5.622, avg. samples / sec: 217.61
Iteration:   1740, Loss function: 5.892, Average Loss: 5.625, avg. samples / sec: 275.02
Iteration:   1760, Loss function: 5.512, Average Loss: 5.627, avg. samples / sec: 332.44
Iteration:   1780, Loss function: 5.715, Average Loss: 5.629, avg. samples / sec: 321.60
Iteration:   1800, Loss function: 5.525, Average Loss: 5.630, avg. samples / sec: 338.70
Iteration:   1820, Loss function: 5.899, Average Loss: 5.632, avg. samples / sec: 328.38
Iteration:   1840, Loss function: 5.940, Average Loss: 5.634, avg. samples / sec: 323.53
Iteration:   1860, Loss function: 5.680, Average Loss: 5.633, avg. samples / sec: 324.69
Iteration:   1880, Loss function: 5.961, Average Loss: 5.635, avg. samples / sec: 327.37
Iteration:   1900, Loss function: 5.904, Average Loss: 5.636, avg. samples / sec: 313.90
Iteration:   1920, Loss function: 5.622, Average Loss: 5.635, avg. samples / sec: 302.37
Iteration:   1940, Loss function: 5.792, Average Loss: 5.634, avg. samples / sec: 257.57
Iteration:   1960, Loss function: 5.503, Average Loss: 5.633, avg. samples / sec: 292.16
Iteration:   1980, Loss function: 5.786, Average Loss: 5.633, avg. samples / sec: 320.72
Iteration:   2000, Loss function: 5.629, Average Loss: 5.632, avg. samples / sec: 325.34
Iteration:   2020, Loss function: 5.590, Average Loss: 5.631, avg. samples / sec: 327.05
Iteration:   2040, Loss function: 5.787, Average Loss: 5.630, avg. samples / sec: 310.49
:::MLLOG {"namespace": "", "time_ms": 1639766175967, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766175969, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.560, Average Loss: 5.628, avg. samples / sec: 245.91
Iteration:   2080, Loss function: 5.042, Average Loss: 5.625, avg. samples / sec: 260.65
Iteration:   2100, Loss function: 5.486, Average Loss: 5.623, avg. samples / sec: 289.28
Iteration:   2120, Loss function: 5.325, Average Loss: 5.620, avg. samples / sec: 336.65
Iteration:   2140, Loss function: 5.437, Average Loss: 5.617, avg. samples / sec: 321.39
Iteration:   2160, Loss function: 5.475, Average Loss: 5.615, avg. samples / sec: 317.04
Iteration:   2180, Loss function: 5.417, Average Loss: 5.613, avg. samples / sec: 295.26
Iteration:   2200, Loss function: 5.452, Average Loss: 5.610, avg. samples / sec: 315.05
Iteration:   2220, Loss function: 5.357, Average Loss: 5.607, avg. samples / sec: 284.14
Iteration:   2240, Loss function: 5.379, Average Loss: 5.605, avg. samples / sec: 320.38
Iteration:   2260, Loss function: 5.295, Average Loss: 5.602, avg. samples / sec: 299.40
Iteration:   2280, Loss function: 5.259, Average Loss: 5.599, avg. samples / sec: 332.58
Iteration:   2300, Loss function: 5.172, Average Loss: 5.596, avg. samples / sec: 322.92
Iteration:   2320, Loss function: 5.282, Average Loss: 5.593, avg. samples / sec: 326.59
Iteration:   2340, Loss function: 5.400, Average Loss: 5.590, avg. samples / sec: 314.67
Iteration:   2360, Loss function: 5.222, Average Loss: 5.586, avg. samples / sec: 298.27
Iteration:   2380, Loss function: 5.392, Average Loss: 5.583, avg. samples / sec: 325.43
Iteration:   2400, Loss function: 5.609, Average Loss: 5.579, avg. samples / sec: 313.43
Iteration:   2420, Loss function: 5.507, Average Loss: 5.575, avg. samples / sec: 285.87
Iteration:   2440, Loss function: 5.393, Average Loss: 5.572, avg. samples / sec: 264.29
Iteration:   2460, Loss function: 5.416, Average Loss: 5.568, avg. samples / sec: 208.31
Iteration:   2480, Loss function: 5.311, Average Loss: 5.564, avg. samples / sec: 320.70
Iteration:   2500, Loss function: 5.373, Average Loss: 5.560, avg. samples / sec: 323.39
Iteration:   2520, Loss function: 5.357, Average Loss: 5.556, avg. samples / sec: 330.26
Iteration:   2540, Loss function: 5.624, Average Loss: 5.553, avg. samples / sec: 323.70
Iteration:   2560, Loss function: 5.122, Average Loss: 5.549, avg. samples / sec: 325.06
Iteration:   2580, Loss function: 5.244, Average Loss: 5.545, avg. samples / sec: 231.44
Iteration:   2600, Loss function: 5.458, Average Loss: 5.541, avg. samples / sec: 215.89
Iteration:   2620, Loss function: 5.575, Average Loss: 5.535, avg. samples / sec: 260.48
Iteration:   2640, Loss function: 5.352, Average Loss: 5.533, avg. samples / sec: 268.89
Iteration:   2660, Loss function: 5.250, Average Loss: 5.530, avg. samples / sec: 289.92
Iteration:   2680, Loss function: 5.256, Average Loss: 5.527, avg. samples / sec: 301.04
Iteration:   2700, Loss function: 5.063, Average Loss: 5.521, avg. samples / sec: 299.49
Iteration:   2720, Loss function: 5.269, Average Loss: 5.517, avg. samples / sec: 329.09
Iteration:   2740, Loss function: 4.953, Average Loss: 5.512, avg. samples / sec: 323.98
Iteration:   2760, Loss function: 5.045, Average Loss: 5.507, avg. samples / sec: 284.79
Iteration:   2780, Loss function: 5.402, Average Loss: 5.503, avg. samples / sec: 231.82
Iteration:   2800, Loss function: 5.181, Average Loss: 5.498, avg. samples / sec: 314.98
Iteration:   2820, Loss function: 5.234, Average Loss: 5.495, avg. samples / sec: 287.33
Iteration:   2840, Loss function: 5.109, Average Loss: 5.491, avg. samples / sec: 253.51
Iteration:   2860, Loss function: 5.156, Average Loss: 5.486, avg. samples / sec: 262.07
Iteration:   2880, Loss function: 5.334, Average Loss: 5.482, avg. samples / sec: 321.20
Iteration:   2900, Loss function: 5.002, Average Loss: 5.478, avg. samples / sec: 240.78
Iteration:   2920, Loss function: 5.171, Average Loss: 5.472, avg. samples / sec: 294.38
Iteration:   2940, Loss function: 4.883, Average Loss: 5.468, avg. samples / sec: 299.77
Iteration:   2960, Loss function: 5.375, Average Loss: 5.464, avg. samples / sec: 296.49
Iteration:   2980, Loss function: 5.245, Average Loss: 5.460, avg. samples / sec: 276.84
Iteration:   3000, Loss function: 5.320, Average Loss: 5.455, avg. samples / sec: 322.00
Iteration:   3020, Loss function: 5.375, Average Loss: 5.448, avg. samples / sec: 234.40
Iteration:   3040, Loss function: 5.263, Average Loss: 5.444, avg. samples / sec: 266.46
Iteration:   3060, Loss function: 5.165, Average Loss: 5.439, avg. samples / sec: 286.33
Iteration:   3080, Loss function: 4.813, Average Loss: 5.434, avg. samples / sec: 274.51
:::MLLOG {"namespace": "", "time_ms": 1639766582695, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766582697, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.170, Average Loss: 5.430, avg. samples / sec: 261.38
Iteration:   3120, Loss function: 4.955, Average Loss: 5.425, avg. samples / sec: 313.42
Iteration:   3140, Loss function: 4.936, Average Loss: 5.419, avg. samples / sec: 279.09
Iteration:   3160, Loss function: 5.358, Average Loss: 5.413, avg. samples / sec: 267.99
Iteration:   3180, Loss function: 4.855, Average Loss: 5.408, avg. samples / sec: 226.97
Iteration:   3200, Loss function: 5.271, Average Loss: 5.403, avg. samples / sec: 271.32
Iteration:   3220, Loss function: 5.095, Average Loss: 5.398, avg. samples / sec: 246.54
Iteration:   3240, Loss function: 5.379, Average Loss: 5.394, avg. samples / sec: 277.36
Iteration:   3260, Loss function: 4.957, Average Loss: 5.388, avg. samples / sec: 335.56
Iteration:   3280, Loss function: 4.861, Average Loss: 5.383, avg. samples / sec: 306.08
Iteration:   3300, Loss function: 4.917, Average Loss: 5.377, avg. samples / sec: 318.81
Iteration:   3320, Loss function: 4.949, Average Loss: 5.372, avg. samples / sec: 316.60
Iteration:   3340, Loss function: 5.247, Average Loss: 5.368, avg. samples / sec: 326.96
Iteration:   3360, Loss function: 5.057, Average Loss: 5.362, avg. samples / sec: 337.68
Iteration:   3380, Loss function: 5.117, Average Loss: 5.355, avg. samples / sec: 312.91
Iteration:   3400, Loss function: 4.851, Average Loss: 5.350, avg. samples / sec: 247.85
Iteration:   3420, Loss function: 5.114, Average Loss: 5.344, avg. samples / sec: 294.63
Iteration:   3440, Loss function: 4.766, Average Loss: 5.339, avg. samples / sec: 306.03
Iteration:   3460, Loss function: 5.255, Average Loss: 5.333, avg. samples / sec: 269.98
Iteration:   3480, Loss function: 5.158, Average Loss: 5.328, avg. samples / sec: 281.69
Iteration:   3500, Loss function: 5.068, Average Loss: 5.324, avg. samples / sec: 318.36
Iteration:   3520, Loss function: 4.922, Average Loss: 5.320, avg. samples / sec: 323.36
Iteration:   3540, Loss function: 5.089, Average Loss: 5.315, avg. samples / sec: 322.27
Iteration:   3560, Loss function: 4.879, Average Loss: 5.311, avg. samples / sec: 320.79
Iteration:   3580, Loss function: 5.122, Average Loss: 5.307, avg. samples / sec: 307.96
Iteration:   3600, Loss function: 5.052, Average Loss: 5.301, avg. samples / sec: 300.74
Iteration:   3620, Loss function: 4.906, Average Loss: 5.296, avg. samples / sec: 306.17
Iteration:   3640, Loss function: 4.761, Average Loss: 5.291, avg. samples / sec: 325.01
Iteration:   3660, Loss function: 5.038, Average Loss: 5.286, avg. samples / sec: 313.84
Iteration:   3680, Loss function: 5.148, Average Loss: 5.280, avg. samples / sec: 316.87
Iteration:   3700, Loss function: 4.940, Average Loss: 5.275, avg. samples / sec: 295.90
Iteration:   3720, Loss function: 5.105, Average Loss: 5.269, avg. samples / sec: 240.62
Iteration:   3740, Loss function: 5.034, Average Loss: 5.265, avg. samples / sec: 312.61
Iteration:   3760, Loss function: 4.899, Average Loss: 5.261, avg. samples / sec: 295.34
Iteration:   3780, Loss function: 5.178, Average Loss: 5.257, avg. samples / sec: 284.11
Iteration:   3800, Loss function: 5.041, Average Loss: 5.253, avg. samples / sec: 270.08
Iteration:   3820, Loss function: 5.294, Average Loss: 5.249, avg. samples / sec: 248.15
Iteration:   3840, Loss function: 5.039, Average Loss: 5.245, avg. samples / sec: 288.95
Iteration:   3860, Loss function: 4.823, Average Loss: 5.240, avg. samples / sec: 330.31
Iteration:   3880, Loss function: 4.983, Average Loss: 5.234, avg. samples / sec: 326.31
Iteration:   3900, Loss function: 5.092, Average Loss: 5.229, avg. samples / sec: 321.46
Iteration:   3920, Loss function: 5.065, Average Loss: 5.223, avg. samples / sec: 310.35
Iteration:   3940, Loss function: 5.027, Average Loss: 5.217, avg. samples / sec: 277.47
Iteration:   3960, Loss function: 4.830, Average Loss: 5.213, avg. samples / sec: 303.17
Iteration:   3980, Loss function: 4.936, Average Loss: 5.209, avg. samples / sec: 321.84
Iteration:   4000, Loss function: 5.148, Average Loss: 5.205, avg. samples / sec: 290.85
Iteration:   4020, Loss function: 4.968, Average Loss: 5.200, avg. samples / sec: 247.87
Iteration:   4040, Loss function: 4.917, Average Loss: 5.197, avg. samples / sec: 314.17
Iteration:   4060, Loss function: 5.164, Average Loss: 5.193, avg. samples / sec: 314.49
Iteration:   4080, Loss function: 5.056, Average Loss: 5.188, avg. samples / sec: 253.18
Iteration:   4100, Loss function: 5.139, Average Loss: 5.184, avg. samples / sec: 307.01
:::MLLOG {"namespace": "", "time_ms": 1639766983649, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766983651, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.208, Average Loss: 5.181, avg. samples / sec: 206.39
Iteration:   4140, Loss function: 5.026, Average Loss: 5.176, avg. samples / sec: 224.91
Iteration:   4160, Loss function: 4.860, Average Loss: 5.169, avg. samples / sec: 334.45
Iteration:   4180, Loss function: 4.948, Average Loss: 5.163, avg. samples / sec: 320.27
Iteration:   4200, Loss function: 4.735, Average Loss: 5.159, avg. samples / sec: 333.53
Iteration:   4220, Loss function: 4.654, Average Loss: 5.154, avg. samples / sec: 330.33
Iteration:   4240, Loss function: 5.017, Average Loss: 5.149, avg. samples / sec: 304.40
Iteration:   4260, Loss function: 4.910, Average Loss: 5.145, avg. samples / sec: 287.85
Iteration:   4280, Loss function: 4.996, Average Loss: 5.139, avg. samples / sec: 296.18
Iteration:   4300, Loss function: 4.746, Average Loss: 5.133, avg. samples / sec: 331.21
Iteration:   4320, Loss function: 4.671, Average Loss: 5.128, avg. samples / sec: 310.27
Iteration:   4340, Loss function: 4.676, Average Loss: 5.122, avg. samples / sec: 313.07
Iteration:   4360, Loss function: 4.760, Average Loss: 5.117, avg. samples / sec: 324.27
Iteration:   4380, Loss function: 5.094, Average Loss: 5.113, avg. samples / sec: 331.59
Iteration:   4400, Loss function: 4.806, Average Loss: 5.109, avg. samples / sec: 331.44
Iteration:   4420, Loss function: 4.937, Average Loss: 5.104, avg. samples / sec: 320.50
Iteration:   4440, Loss function: 4.853, Average Loss: 5.099, avg. samples / sec: 308.53
Iteration:   4460, Loss function: 5.037, Average Loss: 5.094, avg. samples / sec: 325.06
Iteration:   4480, Loss function: 4.995, Average Loss: 5.091, avg. samples / sec: 332.14
Iteration:   4500, Loss function: 4.953, Average Loss: 5.088, avg. samples / sec: 336.48
Iteration:   4520, Loss function: 4.713, Average Loss: 5.084, avg. samples / sec: 340.35
Iteration:   4540, Loss function: 5.199, Average Loss: 5.079, avg. samples / sec: 290.07
Iteration:   4560, Loss function: 4.724, Average Loss: 5.075, avg. samples / sec: 316.43
Iteration:   4580, Loss function: 5.053, Average Loss: 5.073, avg. samples / sec: 331.31
Iteration:   4600, Loss function: 4.832, Average Loss: 5.069, avg. samples / sec: 321.90
Iteration:   4620, Loss function: 4.813, Average Loss: 5.065, avg. samples / sec: 311.14
Iteration:   4640, Loss function: 4.616, Average Loss: 5.059, avg. samples / sec: 328.98
Iteration:   4660, Loss function: 4.673, Average Loss: 5.057, avg. samples / sec: 305.88
Iteration:   4680, Loss function: 5.196, Average Loss: 5.052, avg. samples / sec: 304.90
Iteration:   4700, Loss function: 4.851, Average Loss: 5.048, avg. samples / sec: 316.56
Iteration:   4720, Loss function: 4.862, Average Loss: 5.043, avg. samples / sec: 320.60
Iteration:   4740, Loss function: 4.748, Average Loss: 5.039, avg. samples / sec: 331.67
Iteration:   4760, Loss function: 4.559, Average Loss: 5.036, avg. samples / sec: 318.49
Iteration:   4780, Loss function: 4.951, Average Loss: 5.031, avg. samples / sec: 288.64
Iteration:   4800, Loss function: 4.944, Average Loss: 5.028, avg. samples / sec: 314.72
Iteration:   4820, Loss function: 4.848, Average Loss: 5.025, avg. samples / sec: 335.78
Iteration:   4840, Loss function: 5.139, Average Loss: 5.021, avg. samples / sec: 273.43
Iteration:   4860, Loss function: 4.656, Average Loss: 5.017, avg. samples / sec: 284.91
Iteration:   4880, Loss function: 5.158, Average Loss: 5.013, avg. samples / sec: 329.20
Iteration:   4900, Loss function: 4.584, Average Loss: 5.009, avg. samples / sec: 289.16
Iteration:   4920, Loss function: 4.707, Average Loss: 5.005, avg. samples / sec: 319.92
Iteration:   4940, Loss function: 4.743, Average Loss: 5.001, avg. samples / sec: 334.31
Iteration:   4960, Loss function: 4.528, Average Loss: 4.998, avg. samples / sec: 312.05
Iteration:   4980, Loss function: 4.593, Average Loss: 4.994, avg. samples / sec: 332.86
Iteration:   5000, Loss function: 4.762, Average Loss: 4.990, avg. samples / sec: 289.80
Iteration:   5020, Loss function: 4.991, Average Loss: 4.988, avg. samples / sec: 309.32
Iteration:   5040, Loss function: 4.737, Average Loss: 4.985, avg. samples / sec: 329.89
Iteration:   5060, Loss function: 4.756, Average Loss: 4.982, avg. samples / sec: 317.46
Iteration:   5080, Loss function: 4.360, Average Loss: 4.977, avg. samples / sec: 298.62
Iteration:   5100, Loss function: 4.815, Average Loss: 4.974, avg. samples / sec: 299.40
Iteration:   5120, Loss function: 4.552, Average Loss: 4.970, avg. samples / sec: 282.53
Iteration:   5140, Loss function: 4.836, Average Loss: 4.966, avg. samples / sec: 331.98
:::MLLOG {"namespace": "", "time_ms": 1639767360843, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 101.54 s
:::MLLOG {"namespace": "", "time_ms": 1639767462521, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767462523, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767462524, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=1.06s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.029, Average Loss: 4.962, avg. samples / sec: 20.90
DONE (t=7.24s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10314
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21203
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09099
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18509
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13278
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19587
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20764
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20764
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10314 AP goal: 0.10000
Iteration:   5180, Loss function: 4.776, Average Loss: 4.958, avg. samples / sec: 324.23
:::MLLOG {"namespace": "", "time_ms": 1639767475933, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475934, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10314260612128913, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767475935, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767478231, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767487
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:07 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:53 PM'
START TIMING RUN WAS 2021-12-17 06:20:53 PM
ENDING TIMING RUN AT 2021-12-17 06:58:07 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:07 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-74513b1e-14cd-5975-8207-1bfb2d5e9c36)
+ result=2234
RESULT,SINGLE_STAGE_DETECTOR,,2234,nvidia,2021-12-17 06:20:53 PM
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2234,nvidia,2021-12-17 06:20:53 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
