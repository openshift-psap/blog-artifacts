8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ MIG_MODE=1
+ [[ 2g.10gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e
+ echo 'Found 1 MIG instances: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639765248
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 06:20:48 PM'
STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods
running benchmark
+ echo 'STARTING TIMING RUN AT 2021-12-17 06:20:48 PM GPU: 1 x 2g.10gb x 24 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
Running in parallel mode.
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_19-20-28 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\9\-\2\0\-\2\8 ]]
+ set +x
Fri Dec 17 18:20:48 UTC 2021 Waiting for all the 24 Pods to start ...
Adding run-mlperf--1-g8xmt to the sync file ...
run-mlperf--1-g8xmt Found 8 Pods, waiting to have 24 ...
     1	run-mlperf--1-cz9mk
     2	run-mlperf--1-2trkb
     3	run-mlperf--1-kbwb5
     4	run-mlperf--1-f5td4
     5	run-mlperf--1-hfmj2
     6	run-mlperf--1-hxljp
     7	run-mlperf--1-v6sgt
     8	run-mlperf--1-g8xmt
Fri Dec 17 18:20:53 UTC 2021 All the 24 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255830, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765255963, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2631880884, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2631880884
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639765257838, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765257839, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765361927, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765361928, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639765363309, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765363309, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765363554, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765363555, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765363556, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.803, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.020, Average Loss: 0.454, avg. samples / sec: 326.78
Iteration:     40, Loss function: 20.829, Average Loss: 0.857, avg. samples / sec: 314.41
Iteration:     60, Loss function: 20.453, Average Loss: 1.247, avg. samples / sec: 280.57
Iteration:     80, Loss function: 20.158, Average Loss: 1.622, avg. samples / sec: 249.63
Iteration:    100, Loss function: 16.646, Average Loss: 1.962, avg. samples / sec: 261.35
Iteration:    120, Loss function: 12.243, Average Loss: 2.189, avg. samples / sec: 282.18
Iteration:    140, Loss function: 9.750, Average Loss: 2.355, avg. samples / sec: 262.27
Iteration:    160, Loss function: 9.202, Average Loss: 2.496, avg. samples / sec: 277.68
Iteration:    180, Loss function: 9.016, Average Loss: 2.625, avg. samples / sec: 277.66
Iteration:    200, Loss function: 8.640, Average Loss: 2.750, avg. samples / sec: 224.22
Iteration:    220, Loss function: 8.558, Average Loss: 2.870, avg. samples / sec: 298.51
Iteration:    240, Loss function: 8.476, Average Loss: 2.984, avg. samples / sec: 291.02
Iteration:    260, Loss function: 8.838, Average Loss: 3.095, avg. samples / sec: 293.34
Iteration:    280, Loss function: 8.444, Average Loss: 3.204, avg. samples / sec: 305.85
Iteration:    300, Loss function: 8.274, Average Loss: 3.306, avg. samples / sec: 266.82
Iteration:    320, Loss function: 8.234, Average Loss: 3.405, avg. samples / sec: 297.83
Iteration:    340, Loss function: 8.194, Average Loss: 3.500, avg. samples / sec: 312.38
Iteration:    360, Loss function: 7.842, Average Loss: 3.591, avg. samples / sec: 305.07
Iteration:    380, Loss function: 7.851, Average Loss: 3.680, avg. samples / sec: 308.14
Iteration:    400, Loss function: 7.894, Average Loss: 3.762, avg. samples / sec: 292.45
Iteration:    420, Loss function: 7.651, Average Loss: 3.843, avg. samples / sec: 249.65
Iteration:    440, Loss function: 7.685, Average Loss: 3.919, avg. samples / sec: 321.38
Iteration:    460, Loss function: 7.854, Average Loss: 3.996, avg. samples / sec: 315.13
Iteration:    480, Loss function: 7.512, Average Loss: 4.068, avg. samples / sec: 311.54
Iteration:    500, Loss function: 7.582, Average Loss: 4.138, avg. samples / sec: 272.80
Iteration:    520, Loss function: 7.492, Average Loss: 4.204, avg. samples / sec: 272.18
Iteration:    540, Loss function: 7.391, Average Loss: 4.269, avg. samples / sec: 303.69
Iteration:    560, Loss function: 7.309, Average Loss: 4.330, avg. samples / sec: 304.87
Iteration:    580, Loss function: 7.077, Average Loss: 4.390, avg. samples / sec: 304.43
Iteration:    600, Loss function: 7.292, Average Loss: 4.447, avg. samples / sec: 312.71
Iteration:    620, Loss function: 6.869, Average Loss: 4.503, avg. samples / sec: 266.46
Iteration:    640, Loss function: 6.732, Average Loss: 4.556, avg. samples / sec: 303.47
Iteration:    660, Loss function: 7.144, Average Loss: 4.607, avg. samples / sec: 252.12
Iteration:    680, Loss function: 7.325, Average Loss: 4.657, avg. samples / sec: 278.00
Iteration:    700, Loss function: 6.821, Average Loss: 4.704, avg. samples / sec: 273.71
Iteration:    720, Loss function: 7.014, Average Loss: 4.752, avg. samples / sec: 295.05
Iteration:    740, Loss function: 6.920, Average Loss: 4.796, avg. samples / sec: 321.05
Iteration:    760, Loss function: 6.958, Average Loss: 4.839, avg. samples / sec: 212.61
Iteration:    780, Loss function: 6.851, Average Loss: 4.880, avg. samples / sec: 314.88
Iteration:    800, Loss function: 7.050, Average Loss: 4.920, avg. samples / sec: 328.06
Iteration:    820, Loss function: 6.758, Average Loss: 4.957, avg. samples / sec: 326.98
Iteration:    840, Loss function: 6.802, Average Loss: 4.993, avg. samples / sec: 332.50
Iteration:    860, Loss function: 6.763, Average Loss: 5.028, avg. samples / sec: 314.09
Iteration:    880, Loss function: 6.749, Average Loss: 5.060, avg. samples / sec: 311.01
Iteration:    900, Loss function: 6.701, Average Loss: 5.091, avg. samples / sec: 277.33
Iteration:    920, Loss function: 6.683, Average Loss: 5.120, avg. samples / sec: 303.03
Iteration:    940, Loss function: 6.874, Average Loss: 5.150, avg. samples / sec: 319.95
Iteration:    960, Loss function: 6.450, Average Loss: 5.179, avg. samples / sec: 302.46
Iteration:    980, Loss function: 6.567, Average Loss: 5.206, avg. samples / sec: 307.29
Iteration:   1000, Loss function: 6.455, Average Loss: 5.232, avg. samples / sec: 320.65
Iteration:   1020, Loss function: 6.300, Average Loss: 5.255, avg. samples / sec: 324.34
:::MLLOG {"namespace": "", "time_ms": 1639765766434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765766448, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.512, Average Loss: 5.278, avg. samples / sec: 292.81
Iteration:   1060, Loss function: 6.284, Average Loss: 5.301, avg. samples / sec: 285.08
Iteration:   1080, Loss function: 6.284, Average Loss: 5.322, avg. samples / sec: 322.14
Iteration:   1100, Loss function: 6.039, Average Loss: 5.340, avg. samples / sec: 280.68
Iteration:   1120, Loss function: 6.151, Average Loss: 5.360, avg. samples / sec: 278.89
Iteration:   1140, Loss function: 6.412, Average Loss: 5.378, avg. samples / sec: 187.19
Iteration:   1160, Loss function: 6.000, Average Loss: 5.394, avg. samples / sec: 328.68
Iteration:   1180, Loss function: 6.373, Average Loss: 5.410, avg. samples / sec: 314.01
Iteration:   1200, Loss function: 6.254, Average Loss: 5.426, avg. samples / sec: 309.80
Iteration:   1220, Loss function: 6.227, Average Loss: 5.441, avg. samples / sec: 318.14
Iteration:   1240, Loss function: 6.118, Average Loss: 5.453, avg. samples / sec: 322.43
Iteration:   1260, Loss function: 6.088, Average Loss: 5.466, avg. samples / sec: 301.79
Iteration:   1280, Loss function: 5.893, Average Loss: 5.477, avg. samples / sec: 244.81
Iteration:   1300, Loss function: 6.137, Average Loss: 5.490, avg. samples / sec: 269.46
Iteration:   1320, Loss function: 6.228, Average Loss: 5.502, avg. samples / sec: 220.94
Iteration:   1340, Loss function: 5.836, Average Loss: 5.512, avg. samples / sec: 266.61
Iteration:   1360, Loss function: 6.017, Average Loss: 5.523, avg. samples / sec: 299.34
Iteration:   1380, Loss function: 6.062, Average Loss: 5.533, avg. samples / sec: 320.26
Iteration:   1400, Loss function: 6.248, Average Loss: 5.542, avg. samples / sec: 329.12
Iteration:   1420, Loss function: 5.827, Average Loss: 5.549, avg. samples / sec: 330.34
Iteration:   1440, Loss function: 6.391, Average Loss: 5.558, avg. samples / sec: 322.32
Iteration:   1460, Loss function: 6.190, Average Loss: 5.566, avg. samples / sec: 307.57
Iteration:   1480, Loss function: 5.855, Average Loss: 5.574, avg. samples / sec: 329.24
Iteration:   1500, Loss function: 6.046, Average Loss: 5.582, avg. samples / sec: 328.60
Iteration:   1520, Loss function: 5.887, Average Loss: 5.587, avg. samples / sec: 308.97
Iteration:   1540, Loss function: 6.112, Average Loss: 5.591, avg. samples / sec: 325.63
Iteration:   1560, Loss function: 5.782, Average Loss: 5.596, avg. samples / sec: 314.18
Iteration:   1580, Loss function: 5.669, Average Loss: 5.601, avg. samples / sec: 330.33
Iteration:   1600, Loss function: 6.083, Average Loss: 5.607, avg. samples / sec: 334.99
Iteration:   1620, Loss function: 5.719, Average Loss: 5.611, avg. samples / sec: 314.18
Iteration:   1640, Loss function: 6.032, Average Loss: 5.615, avg. samples / sec: 325.41
Iteration:   1660, Loss function: 5.940, Average Loss: 5.619, avg. samples / sec: 328.96
Iteration:   1680, Loss function: 5.658, Average Loss: 5.623, avg. samples / sec: 307.91
Iteration:   1700, Loss function: 5.321, Average Loss: 5.627, avg. samples / sec: 332.91
Iteration:   1720, Loss function: 5.793, Average Loss: 5.630, avg. samples / sec: 292.88
Iteration:   1740, Loss function: 5.717, Average Loss: 5.632, avg. samples / sec: 260.65
Iteration:   1760, Loss function: 5.596, Average Loss: 5.634, avg. samples / sec: 203.18
Iteration:   1780, Loss function: 5.659, Average Loss: 5.635, avg. samples / sec: 292.39
Iteration:   1800, Loss function: 5.520, Average Loss: 5.637, avg. samples / sec: 303.53
Iteration:   1820, Loss function: 6.019, Average Loss: 5.639, avg. samples / sec: 290.29
Iteration:   1840, Loss function: 5.943, Average Loss: 5.639, avg. samples / sec: 232.49
Iteration:   1860, Loss function: 5.647, Average Loss: 5.640, avg. samples / sec: 216.81
Iteration:   1880, Loss function: 5.696, Average Loss: 5.642, avg. samples / sec: 227.85
Iteration:   1900, Loss function: 5.802, Average Loss: 5.642, avg. samples / sec: 320.45
Iteration:   1920, Loss function: 5.698, Average Loss: 5.642, avg. samples / sec: 315.14
Iteration:   1940, Loss function: 5.909, Average Loss: 5.642, avg. samples / sec: 300.63
Iteration:   1960, Loss function: 5.635, Average Loss: 5.642, avg. samples / sec: 215.47
Iteration:   1980, Loss function: 5.746, Average Loss: 5.641, avg. samples / sec: 312.24
Iteration:   2000, Loss function: 5.553, Average Loss: 5.641, avg. samples / sec: 323.47
Iteration:   2020, Loss function: 5.603, Average Loss: 5.639, avg. samples / sec: 322.53
Iteration:   2040, Loss function: 5.599, Average Loss: 5.639, avg. samples / sec: 302.75
:::MLLOG {"namespace": "", "time_ms": 1639766171114, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766171116, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.558, Average Loss: 5.637, avg. samples / sec: 327.07
Iteration:   2080, Loss function: 5.244, Average Loss: 5.636, avg. samples / sec: 302.20
Iteration:   2100, Loss function: 5.595, Average Loss: 5.634, avg. samples / sec: 324.02
Iteration:   2120, Loss function: 5.163, Average Loss: 5.630, avg. samples / sec: 323.06
Iteration:   2140, Loss function: 5.368, Average Loss: 5.628, avg. samples / sec: 308.55
Iteration:   2160, Loss function: 5.484, Average Loss: 5.626, avg. samples / sec: 315.42
Iteration:   2180, Loss function: 5.384, Average Loss: 5.624, avg. samples / sec: 298.16
Iteration:   2200, Loss function: 5.579, Average Loss: 5.621, avg. samples / sec: 332.79
Iteration:   2220, Loss function: 5.419, Average Loss: 5.620, avg. samples / sec: 325.94
Iteration:   2240, Loss function: 5.454, Average Loss: 5.617, avg. samples / sec: 315.31
Iteration:   2260, Loss function: 5.478, Average Loss: 5.614, avg. samples / sec: 292.97
Iteration:   2280, Loss function: 5.252, Average Loss: 5.611, avg. samples / sec: 329.19
Iteration:   2300, Loss function: 5.229, Average Loss: 5.609, avg. samples / sec: 315.61
Iteration:   2320, Loss function: 5.181, Average Loss: 5.608, avg. samples / sec: 323.24
Iteration:   2340, Loss function: 5.578, Average Loss: 5.605, avg. samples / sec: 321.05
Iteration:   2360, Loss function: 5.416, Average Loss: 5.600, avg. samples / sec: 319.64
Iteration:   2380, Loss function: 5.356, Average Loss: 5.596, avg. samples / sec: 315.16
Iteration:   2400, Loss function: 5.529, Average Loss: 5.592, avg. samples / sec: 325.01
Iteration:   2420, Loss function: 5.544, Average Loss: 5.588, avg. samples / sec: 336.21
Iteration:   2440, Loss function: 5.444, Average Loss: 5.586, avg. samples / sec: 311.62
Iteration:   2460, Loss function: 5.126, Average Loss: 5.582, avg. samples / sec: 305.07
Iteration:   2480, Loss function: 5.259, Average Loss: 5.578, avg. samples / sec: 279.22
Iteration:   2500, Loss function: 5.513, Average Loss: 5.575, avg. samples / sec: 336.92
Iteration:   2520, Loss function: 5.198, Average Loss: 5.570, avg. samples / sec: 305.45
Iteration:   2540, Loss function: 5.429, Average Loss: 5.567, avg. samples / sec: 327.08
Iteration:   2560, Loss function: 5.461, Average Loss: 5.563, avg. samples / sec: 314.37
Iteration:   2580, Loss function: 5.358, Average Loss: 5.559, avg. samples / sec: 329.66
Iteration:   2600, Loss function: 5.514, Average Loss: 5.556, avg. samples / sec: 317.29
Iteration:   2620, Loss function: 5.515, Average Loss: 5.551, avg. samples / sec: 312.99
Iteration:   2640, Loss function: 5.118, Average Loss: 5.549, avg. samples / sec: 320.54
Iteration:   2660, Loss function: 5.268, Average Loss: 5.545, avg. samples / sec: 331.41
Iteration:   2680, Loss function: 5.123, Average Loss: 5.541, avg. samples / sec: 307.24
Iteration:   2700, Loss function: 5.086, Average Loss: 5.537, avg. samples / sec: 283.54
Iteration:   2720, Loss function: 5.302, Average Loss: 5.533, avg. samples / sec: 237.82
Iteration:   2740, Loss function: 4.928, Average Loss: 5.527, avg. samples / sec: 310.45
Iteration:   2760, Loss function: 5.061, Average Loss: 5.522, avg. samples / sec: 260.24
Iteration:   2780, Loss function: 5.576, Average Loss: 5.518, avg. samples / sec: 293.12
Iteration:   2800, Loss function: 5.348, Average Loss: 5.514, avg. samples / sec: 294.50
Iteration:   2820, Loss function: 5.343, Average Loss: 5.510, avg. samples / sec: 323.68
Iteration:   2840, Loss function: 5.150, Average Loss: 5.506, avg. samples / sec: 321.16
Iteration:   2860, Loss function: 4.964, Average Loss: 5.501, avg. samples / sec: 314.49
Iteration:   2880, Loss function: 5.261, Average Loss: 5.496, avg. samples / sec: 328.42
Iteration:   2900, Loss function: 5.077, Average Loss: 5.492, avg. samples / sec: 291.95
Iteration:   2920, Loss function: 5.367, Average Loss: 5.486, avg. samples / sec: 255.27
Iteration:   2940, Loss function: 4.940, Average Loss: 5.482, avg. samples / sec: 334.62
Iteration:   2960, Loss function: 5.403, Average Loss: 5.478, avg. samples / sec: 326.99
Iteration:   2980, Loss function: 5.194, Average Loss: 5.474, avg. samples / sec: 246.68
Iteration:   3000, Loss function: 5.261, Average Loss: 5.468, avg. samples / sec: 290.37
Iteration:   3020, Loss function: 5.310, Average Loss: 5.461, avg. samples / sec: 319.32
Iteration:   3040, Loss function: 5.287, Average Loss: 5.456, avg. samples / sec: 291.72
Iteration:   3060, Loss function: 4.944, Average Loss: 5.451, avg. samples / sec: 249.86
Iteration:   3080, Loss function: 4.740, Average Loss: 5.445, avg. samples / sec: 336.48
:::MLLOG {"namespace": "", "time_ms": 1639766553484, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766553486, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.106, Average Loss: 5.440, avg. samples / sec: 326.01
Iteration:   3120, Loss function: 4.942, Average Loss: 5.434, avg. samples / sec: 329.77
Iteration:   3140, Loss function: 4.910, Average Loss: 5.429, avg. samples / sec: 327.28
Iteration:   3160, Loss function: 5.325, Average Loss: 5.423, avg. samples / sec: 335.70
Iteration:   3180, Loss function: 4.968, Average Loss: 5.418, avg. samples / sec: 261.61
Iteration:   3200, Loss function: 5.096, Average Loss: 5.413, avg. samples / sec: 318.67
Iteration:   3220, Loss function: 5.112, Average Loss: 5.407, avg. samples / sec: 331.64
Iteration:   3240, Loss function: 5.197, Average Loss: 5.402, avg. samples / sec: 327.11
Iteration:   3260, Loss function: 5.102, Average Loss: 5.397, avg. samples / sec: 280.73
Iteration:   3280, Loss function: 4.715, Average Loss: 5.391, avg. samples / sec: 323.55
Iteration:   3300, Loss function: 4.800, Average Loss: 5.385, avg. samples / sec: 324.20
Iteration:   3320, Loss function: 4.649, Average Loss: 5.380, avg. samples / sec: 311.74
Iteration:   3340, Loss function: 5.090, Average Loss: 5.376, avg. samples / sec: 278.62
Iteration:   3360, Loss function: 5.202, Average Loss: 5.369, avg. samples / sec: 242.82
Iteration:   3380, Loss function: 5.124, Average Loss: 5.363, avg. samples / sec: 254.19
Iteration:   3400, Loss function: 4.795, Average Loss: 5.358, avg. samples / sec: 314.54
Iteration:   3420, Loss function: 5.177, Average Loss: 5.353, avg. samples / sec: 318.57
Iteration:   3440, Loss function: 4.901, Average Loss: 5.348, avg. samples / sec: 323.77
Iteration:   3460, Loss function: 5.286, Average Loss: 5.343, avg. samples / sec: 325.90
Iteration:   3480, Loss function: 5.178, Average Loss: 5.338, avg. samples / sec: 292.79
Iteration:   3500, Loss function: 5.242, Average Loss: 5.333, avg. samples / sec: 293.12
Iteration:   3520, Loss function: 4.965, Average Loss: 5.330, avg. samples / sec: 317.41
Iteration:   3540, Loss function: 4.967, Average Loss: 5.325, avg. samples / sec: 323.57
Iteration:   3560, Loss function: 4.778, Average Loss: 5.322, avg. samples / sec: 224.86
Iteration:   3580, Loss function: 5.143, Average Loss: 5.317, avg. samples / sec: 192.20
Iteration:   3600, Loss function: 5.147, Average Loss: 5.312, avg. samples / sec: 302.55
Iteration:   3620, Loss function: 4.721, Average Loss: 5.307, avg. samples / sec: 321.47
Iteration:   3640, Loss function: 4.720, Average Loss: 5.301, avg. samples / sec: 328.12
Iteration:   3660, Loss function: 5.154, Average Loss: 5.297, avg. samples / sec: 278.48
Iteration:   3680, Loss function: 5.028, Average Loss: 5.290, avg. samples / sec: 292.66
Iteration:   3700, Loss function: 5.090, Average Loss: 5.286, avg. samples / sec: 248.04
Iteration:   3720, Loss function: 4.796, Average Loss: 5.281, avg. samples / sec: 313.50
Iteration:   3740, Loss function: 5.114, Average Loss: 5.278, avg. samples / sec: 284.76
Iteration:   3760, Loss function: 4.993, Average Loss: 5.273, avg. samples / sec: 305.84
Iteration:   3780, Loss function: 5.199, Average Loss: 5.268, avg. samples / sec: 331.30
Iteration:   3800, Loss function: 4.943, Average Loss: 5.264, avg. samples / sec: 325.13
Iteration:   3820, Loss function: 5.142, Average Loss: 5.259, avg. samples / sec: 301.73
Iteration:   3840, Loss function: 4.746, Average Loss: 5.254, avg. samples / sec: 313.47
Iteration:   3860, Loss function: 4.897, Average Loss: 5.249, avg. samples / sec: 261.45
Iteration:   3880, Loss function: 5.007, Average Loss: 5.243, avg. samples / sec: 292.48
Iteration:   3900, Loss function: 5.225, Average Loss: 5.239, avg. samples / sec: 292.65
Iteration:   3920, Loss function: 5.047, Average Loss: 5.233, avg. samples / sec: 310.65
Iteration:   3940, Loss function: 4.896, Average Loss: 5.227, avg. samples / sec: 310.88
Iteration:   3960, Loss function: 4.826, Average Loss: 5.222, avg. samples / sec: 314.57
Iteration:   3980, Loss function: 4.962, Average Loss: 5.217, avg. samples / sec: 193.51
Iteration:   4000, Loss function: 5.180, Average Loss: 5.213, avg. samples / sec: 250.01
Iteration:   4020, Loss function: 5.113, Average Loss: 5.209, avg. samples / sec: 323.72
Iteration:   4040, Loss function: 5.117, Average Loss: 5.205, avg. samples / sec: 296.23
Iteration:   4060, Loss function: 5.252, Average Loss: 5.201, avg. samples / sec: 291.29
Iteration:   4080, Loss function: 5.184, Average Loss: 5.197, avg. samples / sec: 299.73
Iteration:   4100, Loss function: 5.117, Average Loss: 5.194, avg. samples / sec: 244.45
:::MLLOG {"namespace": "", "time_ms": 1639766955385, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766955387, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.953, Average Loss: 5.190, avg. samples / sec: 292.94
Iteration:   4140, Loss function: 5.169, Average Loss: 5.185, avg. samples / sec: 249.29
Iteration:   4160, Loss function: 5.021, Average Loss: 5.179, avg. samples / sec: 303.65
Iteration:   4180, Loss function: 5.031, Average Loss: 5.173, avg. samples / sec: 317.29
Iteration:   4200, Loss function: 4.833, Average Loss: 5.169, avg. samples / sec: 318.96
Iteration:   4220, Loss function: 4.738, Average Loss: 5.164, avg. samples / sec: 327.90
Iteration:   4240, Loss function: 4.772, Average Loss: 5.158, avg. samples / sec: 312.36
Iteration:   4260, Loss function: 5.003, Average Loss: 5.153, avg. samples / sec: 295.90
Iteration:   4280, Loss function: 4.959, Average Loss: 5.147, avg. samples / sec: 302.64
Iteration:   4300, Loss function: 4.730, Average Loss: 5.140, avg. samples / sec: 267.00
Iteration:   4320, Loss function: 4.681, Average Loss: 5.135, avg. samples / sec: 296.33
Iteration:   4340, Loss function: 4.680, Average Loss: 5.130, avg. samples / sec: 321.62
Iteration:   4360, Loss function: 4.906, Average Loss: 5.126, avg. samples / sec: 328.37
Iteration:   4380, Loss function: 5.037, Average Loss: 5.121, avg. samples / sec: 284.56
Iteration:   4400, Loss function: 4.895, Average Loss: 5.117, avg. samples / sec: 248.91
Iteration:   4420, Loss function: 4.998, Average Loss: 5.113, avg. samples / sec: 307.36
Iteration:   4440, Loss function: 4.966, Average Loss: 5.109, avg. samples / sec: 258.28
Iteration:   4460, Loss function: 5.102, Average Loss: 5.106, avg. samples / sec: 199.62
Iteration:   4480, Loss function: 5.103, Average Loss: 5.103, avg. samples / sec: 263.11
Iteration:   4500, Loss function: 4.807, Average Loss: 5.101, avg. samples / sec: 270.51
Iteration:   4520, Loss function: 4.588, Average Loss: 5.096, avg. samples / sec: 323.62
Iteration:   4540, Loss function: 5.107, Average Loss: 5.091, avg. samples / sec: 327.06
Iteration:   4560, Loss function: 4.781, Average Loss: 5.087, avg. samples / sec: 330.42
Iteration:   4580, Loss function: 4.912, Average Loss: 5.085, avg. samples / sec: 334.54
Iteration:   4600, Loss function: 4.987, Average Loss: 5.082, avg. samples / sec: 334.70
Iteration:   4620, Loss function: 4.897, Average Loss: 5.078, avg. samples / sec: 316.93
Iteration:   4640, Loss function: 4.602, Average Loss: 5.073, avg. samples / sec: 324.55
Iteration:   4660, Loss function: 4.899, Average Loss: 5.070, avg. samples / sec: 298.54
Iteration:   4680, Loss function: 5.280, Average Loss: 5.065, avg. samples / sec: 279.78
Iteration:   4700, Loss function: 4.712, Average Loss: 5.061, avg. samples / sec: 204.03
Iteration:   4720, Loss function: 4.661, Average Loss: 5.056, avg. samples / sec: 213.97
Iteration:   4740, Loss function: 4.672, Average Loss: 5.052, avg. samples / sec: 313.07
Iteration:   4760, Loss function: 4.581, Average Loss: 5.048, avg. samples / sec: 327.11
Iteration:   4780, Loss function: 5.105, Average Loss: 5.044, avg. samples / sec: 269.89
Iteration:   4800, Loss function: 4.943, Average Loss: 5.041, avg. samples / sec: 296.44
Iteration:   4820, Loss function: 4.791, Average Loss: 5.037, avg. samples / sec: 320.25
Iteration:   4840, Loss function: 5.053, Average Loss: 5.033, avg. samples / sec: 320.10
Iteration:   4860, Loss function: 4.724, Average Loss: 5.029, avg. samples / sec: 269.99
Iteration:   4880, Loss function: 5.293, Average Loss: 5.026, avg. samples / sec: 330.00
Iteration:   4900, Loss function: 4.517, Average Loss: 5.022, avg. samples / sec: 303.23
Iteration:   4920, Loss function: 4.698, Average Loss: 5.018, avg. samples / sec: 300.85
Iteration:   4940, Loss function: 4.913, Average Loss: 5.014, avg. samples / sec: 311.00
Iteration:   4960, Loss function: 4.831, Average Loss: 5.012, avg. samples / sec: 309.85
Iteration:   4980, Loss function: 4.413, Average Loss: 5.008, avg. samples / sec: 321.09
Iteration:   5000, Loss function: 4.878, Average Loss: 5.005, avg. samples / sec: 313.86
Iteration:   5020, Loss function: 5.258, Average Loss: 5.001, avg. samples / sec: 316.13
Iteration:   5040, Loss function: 5.016, Average Loss: 4.999, avg. samples / sec: 326.57
Iteration:   5060, Loss function: 4.742, Average Loss: 4.995, avg. samples / sec: 320.93
Iteration:   5080, Loss function: 4.458, Average Loss: 4.991, avg. samples / sec: 293.85
Iteration:   5100, Loss function: 4.834, Average Loss: 4.989, avg. samples / sec: 309.62
Iteration:   5120, Loss function: 4.682, Average Loss: 4.985, avg. samples / sec: 297.08
Iteration:   5140, Loss function: 4.682, Average Loss: 4.981, avg. samples / sec: 310.08
:::MLLOG {"namespace": "", "time_ms": 1639767354408, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 111.22 s
:::MLLOG {"namespace": "", "time_ms": 1639767465777, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767465972, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767465973, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=2.10s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.024, Average Loss: 4.976, avg. samples / sec: 18.86
DONE (t=6.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10724
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21605
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09645
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19450
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13801
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10724 AP goal: 0.10000
Iteration:   5180, Loss function: 4.707, Average Loss: 4.970, avg. samples / sec: 339.19
:::MLLOG {"namespace": "", "time_ms": 1639767480284, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767480285, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10724242075097078, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767480285, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483890, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 18:58:10 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 18:58:10 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639765255830, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639765255963, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2631880884, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2631880884
:::MLLOG {"namespace": "", "time_ms": 1639765257838, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639765257839, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639765257844, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639765361927, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639765361928, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639765363309, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639765363309, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639765363554, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639765363555, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639765363556, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.803, Average Loss: 0.023, avg. samples / sec: 1.08
Iteration:     20, Loss function: 21.020, Average Loss: 0.454, avg. samples / sec: 326.78
Iteration:     40, Loss function: 20.829, Average Loss: 0.857, avg. samples / sec: 314.41
Iteration:     60, Loss function: 20.453, Average Loss: 1.247, avg. samples / sec: 280.57
Iteration:     80, Loss function: 20.158, Average Loss: 1.622, avg. samples / sec: 249.63
Iteration:    100, Loss function: 16.646, Average Loss: 1.962, avg. samples / sec: 261.35
Iteration:    120, Loss function: 12.243, Average Loss: 2.189, avg. samples / sec: 282.18
Iteration:    140, Loss function: 9.750, Average Loss: 2.355, avg. samples / sec: 262.27
Iteration:    160, Loss function: 9.202, Average Loss: 2.496, avg. samples / sec: 277.68
Iteration:    180, Loss function: 9.016, Average Loss: 2.625, avg. samples / sec: 277.66
Iteration:    200, Loss function: 8.640, Average Loss: 2.750, avg. samples / sec: 224.22
Iteration:    220, Loss function: 8.558, Average Loss: 2.870, avg. samples / sec: 298.51
Iteration:    240, Loss function: 8.476, Average Loss: 2.984, avg. samples / sec: 291.02
Iteration:    260, Loss function: 8.838, Average Loss: 3.095, avg. samples / sec: 293.34
Iteration:    280, Loss function: 8.444, Average Loss: 3.204, avg. samples / sec: 305.85
Iteration:    300, Loss function: 8.274, Average Loss: 3.306, avg. samples / sec: 266.82
Iteration:    320, Loss function: 8.234, Average Loss: 3.405, avg. samples / sec: 297.83
Iteration:    340, Loss function: 8.194, Average Loss: 3.500, avg. samples / sec: 312.38
Iteration:    360, Loss function: 7.842, Average Loss: 3.591, avg. samples / sec: 305.07
Iteration:    380, Loss function: 7.851, Average Loss: 3.680, avg. samples / sec: 308.14
Iteration:    400, Loss function: 7.894, Average Loss: 3.762, avg. samples / sec: 292.45
Iteration:    420, Loss function: 7.651, Average Loss: 3.843, avg. samples / sec: 249.65
Iteration:    440, Loss function: 7.685, Average Loss: 3.919, avg. samples / sec: 321.38
Iteration:    460, Loss function: 7.854, Average Loss: 3.996, avg. samples / sec: 315.13
Iteration:    480, Loss function: 7.512, Average Loss: 4.068, avg. samples / sec: 311.54
Iteration:    500, Loss function: 7.582, Average Loss: 4.138, avg. samples / sec: 272.80
Iteration:    520, Loss function: 7.492, Average Loss: 4.204, avg. samples / sec: 272.18
Iteration:    540, Loss function: 7.391, Average Loss: 4.269, avg. samples / sec: 303.69
Iteration:    560, Loss function: 7.309, Average Loss: 4.330, avg. samples / sec: 304.87
Iteration:    580, Loss function: 7.077, Average Loss: 4.390, avg. samples / sec: 304.43
Iteration:    600, Loss function: 7.292, Average Loss: 4.447, avg. samples / sec: 312.71
Iteration:    620, Loss function: 6.869, Average Loss: 4.503, avg. samples / sec: 266.46
Iteration:    640, Loss function: 6.732, Average Loss: 4.556, avg. samples / sec: 303.47
Iteration:    660, Loss function: 7.144, Average Loss: 4.607, avg. samples / sec: 252.12
Iteration:    680, Loss function: 7.325, Average Loss: 4.657, avg. samples / sec: 278.00
Iteration:    700, Loss function: 6.821, Average Loss: 4.704, avg. samples / sec: 273.71
Iteration:    720, Loss function: 7.014, Average Loss: 4.752, avg. samples / sec: 295.05
Iteration:    740, Loss function: 6.920, Average Loss: 4.796, avg. samples / sec: 321.05
Iteration:    760, Loss function: 6.958, Average Loss: 4.839, avg. samples / sec: 212.61
Iteration:    780, Loss function: 6.851, Average Loss: 4.880, avg. samples / sec: 314.88
Iteration:    800, Loss function: 7.050, Average Loss: 4.920, avg. samples / sec: 328.06
Iteration:    820, Loss function: 6.758, Average Loss: 4.957, avg. samples / sec: 326.98
Iteration:    840, Loss function: 6.802, Average Loss: 4.993, avg. samples / sec: 332.50
Iteration:    860, Loss function: 6.763, Average Loss: 5.028, avg. samples / sec: 314.09
Iteration:    880, Loss function: 6.749, Average Loss: 5.060, avg. samples / sec: 311.01
Iteration:    900, Loss function: 6.701, Average Loss: 5.091, avg. samples / sec: 277.33
Iteration:    920, Loss function: 6.683, Average Loss: 5.120, avg. samples / sec: 303.03
Iteration:    940, Loss function: 6.874, Average Loss: 5.150, avg. samples / sec: 319.95
Iteration:    960, Loss function: 6.450, Average Loss: 5.179, avg. samples / sec: 302.46
Iteration:    980, Loss function: 6.567, Average Loss: 5.206, avg. samples / sec: 307.29
Iteration:   1000, Loss function: 6.455, Average Loss: 5.232, avg. samples / sec: 320.65
Iteration:   1020, Loss function: 6.300, Average Loss: 5.255, avg. samples / sec: 324.34
:::MLLOG {"namespace": "", "time_ms": 1639765766434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639765766448, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.512, Average Loss: 5.278, avg. samples / sec: 292.81
Iteration:   1060, Loss function: 6.284, Average Loss: 5.301, avg. samples / sec: 285.08
Iteration:   1080, Loss function: 6.284, Average Loss: 5.322, avg. samples / sec: 322.14
Iteration:   1100, Loss function: 6.039, Average Loss: 5.340, avg. samples / sec: 280.68
Iteration:   1120, Loss function: 6.151, Average Loss: 5.360, avg. samples / sec: 278.89
Iteration:   1140, Loss function: 6.412, Average Loss: 5.378, avg. samples / sec: 187.19
Iteration:   1160, Loss function: 6.000, Average Loss: 5.394, avg. samples / sec: 328.68
Iteration:   1180, Loss function: 6.373, Average Loss: 5.410, avg. samples / sec: 314.01
Iteration:   1200, Loss function: 6.254, Average Loss: 5.426, avg. samples / sec: 309.80
Iteration:   1220, Loss function: 6.227, Average Loss: 5.441, avg. samples / sec: 318.14
Iteration:   1240, Loss function: 6.118, Average Loss: 5.453, avg. samples / sec: 322.43
Iteration:   1260, Loss function: 6.088, Average Loss: 5.466, avg. samples / sec: 301.79
Iteration:   1280, Loss function: 5.893, Average Loss: 5.477, avg. samples / sec: 244.81
Iteration:   1300, Loss function: 6.137, Average Loss: 5.490, avg. samples / sec: 269.46
Iteration:   1320, Loss function: 6.228, Average Loss: 5.502, avg. samples / sec: 220.94
Iteration:   1340, Loss function: 5.836, Average Loss: 5.512, avg. samples / sec: 266.61
Iteration:   1360, Loss function: 6.017, Average Loss: 5.523, avg. samples / sec: 299.34
Iteration:   1380, Loss function: 6.062, Average Loss: 5.533, avg. samples / sec: 320.26
Iteration:   1400, Loss function: 6.248, Average Loss: 5.542, avg. samples / sec: 329.12
Iteration:   1420, Loss function: 5.827, Average Loss: 5.549, avg. samples / sec: 330.34
Iteration:   1440, Loss function: 6.391, Average Loss: 5.558, avg. samples / sec: 322.32
Iteration:   1460, Loss function: 6.190, Average Loss: 5.566, avg. samples / sec: 307.57
Iteration:   1480, Loss function: 5.855, Average Loss: 5.574, avg. samples / sec: 329.24
Iteration:   1500, Loss function: 6.046, Average Loss: 5.582, avg. samples / sec: 328.60
Iteration:   1520, Loss function: 5.887, Average Loss: 5.587, avg. samples / sec: 308.97
Iteration:   1540, Loss function: 6.112, Average Loss: 5.591, avg. samples / sec: 325.63
Iteration:   1560, Loss function: 5.782, Average Loss: 5.596, avg. samples / sec: 314.18
Iteration:   1580, Loss function: 5.669, Average Loss: 5.601, avg. samples / sec: 330.33
Iteration:   1600, Loss function: 6.083, Average Loss: 5.607, avg. samples / sec: 334.99
Iteration:   1620, Loss function: 5.719, Average Loss: 5.611, avg. samples / sec: 314.18
Iteration:   1640, Loss function: 6.032, Average Loss: 5.615, avg. samples / sec: 325.41
Iteration:   1660, Loss function: 5.940, Average Loss: 5.619, avg. samples / sec: 328.96
Iteration:   1680, Loss function: 5.658, Average Loss: 5.623, avg. samples / sec: 307.91
Iteration:   1700, Loss function: 5.321, Average Loss: 5.627, avg. samples / sec: 332.91
Iteration:   1720, Loss function: 5.793, Average Loss: 5.630, avg. samples / sec: 292.88
Iteration:   1740, Loss function: 5.717, Average Loss: 5.632, avg. samples / sec: 260.65
Iteration:   1760, Loss function: 5.596, Average Loss: 5.634, avg. samples / sec: 203.18
Iteration:   1780, Loss function: 5.659, Average Loss: 5.635, avg. samples / sec: 292.39
Iteration:   1800, Loss function: 5.520, Average Loss: 5.637, avg. samples / sec: 303.53
Iteration:   1820, Loss function: 6.019, Average Loss: 5.639, avg. samples / sec: 290.29
Iteration:   1840, Loss function: 5.943, Average Loss: 5.639, avg. samples / sec: 232.49
Iteration:   1860, Loss function: 5.647, Average Loss: 5.640, avg. samples / sec: 216.81
Iteration:   1880, Loss function: 5.696, Average Loss: 5.642, avg. samples / sec: 227.85
Iteration:   1900, Loss function: 5.802, Average Loss: 5.642, avg. samples / sec: 320.45
Iteration:   1920, Loss function: 5.698, Average Loss: 5.642, avg. samples / sec: 315.14
Iteration:   1940, Loss function: 5.909, Average Loss: 5.642, avg. samples / sec: 300.63
Iteration:   1960, Loss function: 5.635, Average Loss: 5.642, avg. samples / sec: 215.47
Iteration:   1980, Loss function: 5.746, Average Loss: 5.641, avg. samples / sec: 312.24
Iteration:   2000, Loss function: 5.553, Average Loss: 5.641, avg. samples / sec: 323.47
Iteration:   2020, Loss function: 5.603, Average Loss: 5.639, avg. samples / sec: 322.53
Iteration:   2040, Loss function: 5.599, Average Loss: 5.639, avg. samples / sec: 302.75
:::MLLOG {"namespace": "", "time_ms": 1639766171114, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639766171116, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.558, Average Loss: 5.637, avg. samples / sec: 327.07
Iteration:   2080, Loss function: 5.244, Average Loss: 5.636, avg. samples / sec: 302.20
Iteration:   2100, Loss function: 5.595, Average Loss: 5.634, avg. samples / sec: 324.02
Iteration:   2120, Loss function: 5.163, Average Loss: 5.630, avg. samples / sec: 323.06
Iteration:   2140, Loss function: 5.368, Average Loss: 5.628, avg. samples / sec: 308.55
Iteration:   2160, Loss function: 5.484, Average Loss: 5.626, avg. samples / sec: 315.42
Iteration:   2180, Loss function: 5.384, Average Loss: 5.624, avg. samples / sec: 298.16
Iteration:   2200, Loss function: 5.579, Average Loss: 5.621, avg. samples / sec: 332.79
Iteration:   2220, Loss function: 5.419, Average Loss: 5.620, avg. samples / sec: 325.94
Iteration:   2240, Loss function: 5.454, Average Loss: 5.617, avg. samples / sec: 315.31
Iteration:   2260, Loss function: 5.478, Average Loss: 5.614, avg. samples / sec: 292.97
Iteration:   2280, Loss function: 5.252, Average Loss: 5.611, avg. samples / sec: 329.19
Iteration:   2300, Loss function: 5.229, Average Loss: 5.609, avg. samples / sec: 315.61
Iteration:   2320, Loss function: 5.181, Average Loss: 5.608, avg. samples / sec: 323.24
Iteration:   2340, Loss function: 5.578, Average Loss: 5.605, avg. samples / sec: 321.05
Iteration:   2360, Loss function: 5.416, Average Loss: 5.600, avg. samples / sec: 319.64
Iteration:   2380, Loss function: 5.356, Average Loss: 5.596, avg. samples / sec: 315.16
Iteration:   2400, Loss function: 5.529, Average Loss: 5.592, avg. samples / sec: 325.01
Iteration:   2420, Loss function: 5.544, Average Loss: 5.588, avg. samples / sec: 336.21
Iteration:   2440, Loss function: 5.444, Average Loss: 5.586, avg. samples / sec: 311.62
Iteration:   2460, Loss function: 5.126, Average Loss: 5.582, avg. samples / sec: 305.07
Iteration:   2480, Loss function: 5.259, Average Loss: 5.578, avg. samples / sec: 279.22
Iteration:   2500, Loss function: 5.513, Average Loss: 5.575, avg. samples / sec: 336.92
Iteration:   2520, Loss function: 5.198, Average Loss: 5.570, avg. samples / sec: 305.45
Iteration:   2540, Loss function: 5.429, Average Loss: 5.567, avg. samples / sec: 327.08
Iteration:   2560, Loss function: 5.461, Average Loss: 5.563, avg. samples / sec: 314.37
Iteration:   2580, Loss function: 5.358, Average Loss: 5.559, avg. samples / sec: 329.66
Iteration:   2600, Loss function: 5.514, Average Loss: 5.556, avg. samples / sec: 317.29
Iteration:   2620, Loss function: 5.515, Average Loss: 5.551, avg. samples / sec: 312.99
Iteration:   2640, Loss function: 5.118, Average Loss: 5.549, avg. samples / sec: 320.54
Iteration:   2660, Loss function: 5.268, Average Loss: 5.545, avg. samples / sec: 331.41
Iteration:   2680, Loss function: 5.123, Average Loss: 5.541, avg. samples / sec: 307.24
Iteration:   2700, Loss function: 5.086, Average Loss: 5.537, avg. samples / sec: 283.54
Iteration:   2720, Loss function: 5.302, Average Loss: 5.533, avg. samples / sec: 237.82
Iteration:   2740, Loss function: 4.928, Average Loss: 5.527, avg. samples / sec: 310.45
Iteration:   2760, Loss function: 5.061, Average Loss: 5.522, avg. samples / sec: 260.24
Iteration:   2780, Loss function: 5.576, Average Loss: 5.518, avg. samples / sec: 293.12
Iteration:   2800, Loss function: 5.348, Average Loss: 5.514, avg. samples / sec: 294.50
Iteration:   2820, Loss function: 5.343, Average Loss: 5.510, avg. samples / sec: 323.68
Iteration:   2840, Loss function: 5.150, Average Loss: 5.506, avg. samples / sec: 321.16
Iteration:   2860, Loss function: 4.964, Average Loss: 5.501, avg. samples / sec: 314.49
Iteration:   2880, Loss function: 5.261, Average Loss: 5.496, avg. samples / sec: 328.42
Iteration:   2900, Loss function: 5.077, Average Loss: 5.492, avg. samples / sec: 291.95
Iteration:   2920, Loss function: 5.367, Average Loss: 5.486, avg. samples / sec: 255.27
Iteration:   2940, Loss function: 4.940, Average Loss: 5.482, avg. samples / sec: 334.62
Iteration:   2960, Loss function: 5.403, Average Loss: 5.478, avg. samples / sec: 326.99
Iteration:   2980, Loss function: 5.194, Average Loss: 5.474, avg. samples / sec: 246.68
Iteration:   3000, Loss function: 5.261, Average Loss: 5.468, avg. samples / sec: 290.37
Iteration:   3020, Loss function: 5.310, Average Loss: 5.461, avg. samples / sec: 319.32
Iteration:   3040, Loss function: 5.287, Average Loss: 5.456, avg. samples / sec: 291.72
Iteration:   3060, Loss function: 4.944, Average Loss: 5.451, avg. samples / sec: 249.86
Iteration:   3080, Loss function: 4.740, Average Loss: 5.445, avg. samples / sec: 336.48
:::MLLOG {"namespace": "", "time_ms": 1639766553484, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639766553486, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.106, Average Loss: 5.440, avg. samples / sec: 326.01
Iteration:   3120, Loss function: 4.942, Average Loss: 5.434, avg. samples / sec: 329.77
Iteration:   3140, Loss function: 4.910, Average Loss: 5.429, avg. samples / sec: 327.28
Iteration:   3160, Loss function: 5.325, Average Loss: 5.423, avg. samples / sec: 335.70
Iteration:   3180, Loss function: 4.968, Average Loss: 5.418, avg. samples / sec: 261.61
Iteration:   3200, Loss function: 5.096, Average Loss: 5.413, avg. samples / sec: 318.67
Iteration:   3220, Loss function: 5.112, Average Loss: 5.407, avg. samples / sec: 331.64
Iteration:   3240, Loss function: 5.197, Average Loss: 5.402, avg. samples / sec: 327.11
Iteration:   3260, Loss function: 5.102, Average Loss: 5.397, avg. samples / sec: 280.73
Iteration:   3280, Loss function: 4.715, Average Loss: 5.391, avg. samples / sec: 323.55
Iteration:   3300, Loss function: 4.800, Average Loss: 5.385, avg. samples / sec: 324.20
Iteration:   3320, Loss function: 4.649, Average Loss: 5.380, avg. samples / sec: 311.74
Iteration:   3340, Loss function: 5.090, Average Loss: 5.376, avg. samples / sec: 278.62
Iteration:   3360, Loss function: 5.202, Average Loss: 5.369, avg. samples / sec: 242.82
Iteration:   3380, Loss function: 5.124, Average Loss: 5.363, avg. samples / sec: 254.19
Iteration:   3400, Loss function: 4.795, Average Loss: 5.358, avg. samples / sec: 314.54
Iteration:   3420, Loss function: 5.177, Average Loss: 5.353, avg. samples / sec: 318.57
Iteration:   3440, Loss function: 4.901, Average Loss: 5.348, avg. samples / sec: 323.77
Iteration:   3460, Loss function: 5.286, Average Loss: 5.343, avg. samples / sec: 325.90
Iteration:   3480, Loss function: 5.178, Average Loss: 5.338, avg. samples / sec: 292.79
Iteration:   3500, Loss function: 5.242, Average Loss: 5.333, avg. samples / sec: 293.12
Iteration:   3520, Loss function: 4.965, Average Loss: 5.330, avg. samples / sec: 317.41
Iteration:   3540, Loss function: 4.967, Average Loss: 5.325, avg. samples / sec: 323.57
Iteration:   3560, Loss function: 4.778, Average Loss: 5.322, avg. samples / sec: 224.86
Iteration:   3580, Loss function: 5.143, Average Loss: 5.317, avg. samples / sec: 192.20
Iteration:   3600, Loss function: 5.147, Average Loss: 5.312, avg. samples / sec: 302.55
Iteration:   3620, Loss function: 4.721, Average Loss: 5.307, avg. samples / sec: 321.47
Iteration:   3640, Loss function: 4.720, Average Loss: 5.301, avg. samples / sec: 328.12
Iteration:   3660, Loss function: 5.154, Average Loss: 5.297, avg. samples / sec: 278.48
Iteration:   3680, Loss function: 5.028, Average Loss: 5.290, avg. samples / sec: 292.66
Iteration:   3700, Loss function: 5.090, Average Loss: 5.286, avg. samples / sec: 248.04
Iteration:   3720, Loss function: 4.796, Average Loss: 5.281, avg. samples / sec: 313.50
Iteration:   3740, Loss function: 5.114, Average Loss: 5.278, avg. samples / sec: 284.76
Iteration:   3760, Loss function: 4.993, Average Loss: 5.273, avg. samples / sec: 305.84
Iteration:   3780, Loss function: 5.199, Average Loss: 5.268, avg. samples / sec: 331.30
Iteration:   3800, Loss function: 4.943, Average Loss: 5.264, avg. samples / sec: 325.13
Iteration:   3820, Loss function: 5.142, Average Loss: 5.259, avg. samples / sec: 301.73
Iteration:   3840, Loss function: 4.746, Average Loss: 5.254, avg. samples / sec: 313.47
Iteration:   3860, Loss function: 4.897, Average Loss: 5.249, avg. samples / sec: 261.45
Iteration:   3880, Loss function: 5.007, Average Loss: 5.243, avg. samples / sec: 292.48
Iteration:   3900, Loss function: 5.225, Average Loss: 5.239, avg. samples / sec: 292.65
Iteration:   3920, Loss function: 5.047, Average Loss: 5.233, avg. samples / sec: 310.65
Iteration:   3940, Loss function: 4.896, Average Loss: 5.227, avg. samples / sec: 310.88
Iteration:   3960, Loss function: 4.826, Average Loss: 5.222, avg. samples / sec: 314.57
Iteration:   3980, Loss function: 4.962, Average Loss: 5.217, avg. samples / sec: 193.51
Iteration:   4000, Loss function: 5.180, Average Loss: 5.213, avg. samples / sec: 250.01
Iteration:   4020, Loss function: 5.113, Average Loss: 5.209, avg. samples / sec: 323.72
Iteration:   4040, Loss function: 5.117, Average Loss: 5.205, avg. samples / sec: 296.23
Iteration:   4060, Loss function: 5.252, Average Loss: 5.201, avg. samples / sec: 291.29
Iteration:   4080, Loss function: 5.184, Average Loss: 5.197, avg. samples / sec: 299.73
Iteration:   4100, Loss function: 5.117, Average Loss: 5.194, avg. samples / sec: 244.45
:::MLLOG {"namespace": "", "time_ms": 1639766955385, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639766955387, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.953, Average Loss: 5.190, avg. samples / sec: 292.94
Iteration:   4140, Loss function: 5.169, Average Loss: 5.185, avg. samples / sec: 249.29
Iteration:   4160, Loss function: 5.021, Average Loss: 5.179, avg. samples / sec: 303.65
Iteration:   4180, Loss function: 5.031, Average Loss: 5.173, avg. samples / sec: 317.29
Iteration:   4200, Loss function: 4.833, Average Loss: 5.169, avg. samples / sec: 318.96
Iteration:   4220, Loss function: 4.738, Average Loss: 5.164, avg. samples / sec: 327.90
Iteration:   4240, Loss function: 4.772, Average Loss: 5.158, avg. samples / sec: 312.36
Iteration:   4260, Loss function: 5.003, Average Loss: 5.153, avg. samples / sec: 295.90
Iteration:   4280, Loss function: 4.959, Average Loss: 5.147, avg. samples / sec: 302.64
Iteration:   4300, Loss function: 4.730, Average Loss: 5.140, avg. samples / sec: 267.00
Iteration:   4320, Loss function: 4.681, Average Loss: 5.135, avg. samples / sec: 296.33
Iteration:   4340, Loss function: 4.680, Average Loss: 5.130, avg. samples / sec: 321.62
Iteration:   4360, Loss function: 4.906, Average Loss: 5.126, avg. samples / sec: 328.37
Iteration:   4380, Loss function: 5.037, Average Loss: 5.121, avg. samples / sec: 284.56
Iteration:   4400, Loss function: 4.895, Average Loss: 5.117, avg. samples / sec: 248.91
Iteration:   4420, Loss function: 4.998, Average Loss: 5.113, avg. samples / sec: 307.36
Iteration:   4440, Loss function: 4.966, Average Loss: 5.109, avg. samples / sec: 258.28
Iteration:   4460, Loss function: 5.102, Average Loss: 5.106, avg. samples / sec: 199.62
Iteration:   4480, Loss function: 5.103, Average Loss: 5.103, avg. samples / sec: 263.11
Iteration:   4500, Loss function: 4.807, Average Loss: 5.101, avg. samples / sec: 270.51
Iteration:   4520, Loss function: 4.588, Average Loss: 5.096, avg. samples / sec: 323.62
Iteration:   4540, Loss function: 5.107, Average Loss: 5.091, avg. samples / sec: 327.06
Iteration:   4560, Loss function: 4.781, Average Loss: 5.087, avg. samples / sec: 330.42
Iteration:   4580, Loss function: 4.912, Average Loss: 5.085, avg. samples / sec: 334.54
Iteration:   4600, Loss function: 4.987, Average Loss: 5.082, avg. samples / sec: 334.70
Iteration:   4620, Loss function: 4.897, Average Loss: 5.078, avg. samples / sec: 316.93
Iteration:   4640, Loss function: 4.602, Average Loss: 5.073, avg. samples / sec: 324.55
Iteration:   4660, Loss function: 4.899, Average Loss: 5.070, avg. samples / sec: 298.54
Iteration:   4680, Loss function: 5.280, Average Loss: 5.065, avg. samples / sec: 279.78
Iteration:   4700, Loss function: 4.712, Average Loss: 5.061, avg. samples / sec: 204.03
Iteration:   4720, Loss function: 4.661, Average Loss: 5.056, avg. samples / sec: 213.97
Iteration:   4740, Loss function: 4.672, Average Loss: 5.052, avg. samples / sec: 313.07
Iteration:   4760, Loss function: 4.581, Average Loss: 5.048, avg. samples / sec: 327.11
Iteration:   4780, Loss function: 5.105, Average Loss: 5.044, avg. samples / sec: 269.89
Iteration:   4800, Loss function: 4.943, Average Loss: 5.041, avg. samples / sec: 296.44
Iteration:   4820, Loss function: 4.791, Average Loss: 5.037, avg. samples / sec: 320.25
Iteration:   4840, Loss function: 5.053, Average Loss: 5.033, avg. samples / sec: 320.10
Iteration:   4860, Loss function: 4.724, Average Loss: 5.029, avg. samples / sec: 269.99
Iteration:   4880, Loss function: 5.293, Average Loss: 5.026, avg. samples / sec: 330.00
Iteration:   4900, Loss function: 4.517, Average Loss: 5.022, avg. samples / sec: 303.23
Iteration:   4920, Loss function: 4.698, Average Loss: 5.018, avg. samples / sec: 300.85
Iteration:   4940, Loss function: 4.913, Average Loss: 5.014, avg. samples / sec: 311.00
Iteration:   4960, Loss function: 4.831, Average Loss: 5.012, avg. samples / sec: 309.85
Iteration:   4980, Loss function: 4.413, Average Loss: 5.008, avg. samples / sec: 321.09
Iteration:   5000, Loss function: 4.878, Average Loss: 5.005, avg. samples / sec: 313.86
Iteration:   5020, Loss function: 5.258, Average Loss: 5.001, avg. samples / sec: 316.13
Iteration:   5040, Loss function: 5.016, Average Loss: 4.999, avg. samples / sec: 326.57
Iteration:   5060, Loss function: 4.742, Average Loss: 4.995, avg. samples / sec: 320.93
Iteration:   5080, Loss function: 4.458, Average Loss: 4.991, avg. samples / sec: 293.85
Iteration:   5100, Loss function: 4.834, Average Loss: 4.989, avg. samples / sec: 309.62
Iteration:   5120, Loss function: 4.682, Average Loss: 4.985, avg. samples / sec: 297.08
Iteration:   5140, Loss function: 4.682, Average Loss: 4.981, avg. samples / sec: 310.08
:::MLLOG {"namespace": "", "time_ms": 1639767354408, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 111.22 s
:::MLLOG {"namespace": "", "time_ms": 1639767465777, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639767465972, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767465973, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=2.10s)
Running per image evaluation...
Evaluate annotation type *bbox*
Iteration:   5160, Loss function: 5.024, Average Loss: 4.976, avg. samples / sec: 18.86
DONE (t=6.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10724
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21605
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09645
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19450
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13801
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21829
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10724 AP goal: 0.10000
Iteration:   5180, Loss function: 4.707, Average Loss: 4.970, avg. samples / sec: 339.19
:::MLLOG {"namespace": "", "time_ms": 1639767480284, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767480285, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10724242075097078, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767480285, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639767483890, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639767490
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 06:58:10 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 06:20:48 PM'
START TIMING RUN WAS 2021-12-17 06:20:48 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 06:58:10 PM'
ENDING TIMING RUN AT 2021-12-17 06:58:10 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-bd4c1a2b-57e1-5df5-ac76-30cd1423b65e)
+ result=2242
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-17 06:20:48 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,2242,nvidia,2021-12-17 06:20:48 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods'
ALL FINISHED GPU: 1 x 2g.10gb x 24 Pods
