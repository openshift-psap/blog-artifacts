8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-2a287403-86da-58db-a494-61ae4221004a)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-2a287403-86da-58db-a494-61ae4221004a
+ MIG_MODE=1
Found 1 MIG instances: MIG-2a287403-86da-58db-a494-61ae4221004a
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-2a287403-86da-58db-a494-61ae4221004a'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758768
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:48 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:48 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-2g-10gb--1-ggjwh to the sync file ...
run-mlperf-mig-2g-10gb--1-ggjwh Found 2 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
     2	run-mlperf-mig-2g-10gb--1-ggjwh
Fri Dec 17 16:32:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-2a287403-86da-58db-a494-61ae4221004a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758775099, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758775297, "event_type": "POINT_IN_TIME", "key": "seed", "value": 627346694, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 627346694
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758776963, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758776964, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758776967, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758879755, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758879756, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758881432, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758881432, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758881724, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758881724, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758881727, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.193, Average Loss: 0.022, avg. samples / sec: 1.09
Iteration:     20, Loss function: 20.937, Average Loss: 0.450, avg. samples / sec: 334.91
Iteration:     40, Loss function: 20.725, Average Loss: 0.852, avg. samples / sec: 344.50
Iteration:     60, Loss function: 20.333, Average Loss: 1.242, avg. samples / sec: 345.67
Iteration:     80, Loss function: 19.826, Average Loss: 1.615, avg. samples / sec: 344.24
Iteration:    100, Loss function: 15.049, Average Loss: 1.935, avg. samples / sec: 330.96
Iteration:    120, Loss function: 11.202, Average Loss: 2.141, avg. samples / sec: 348.99
Iteration:    140, Loss function: 9.609, Average Loss: 2.299, avg. samples / sec: 348.89
Iteration:    160, Loss function: 9.148, Average Loss: 2.439, avg. samples / sec: 348.86
Iteration:    180, Loss function: 8.950, Average Loss: 2.570, avg. samples / sec: 349.23
Iteration:    200, Loss function: 8.701, Average Loss: 2.696, avg. samples / sec: 348.84
Iteration:    220, Loss function: 8.535, Average Loss: 2.816, avg. samples / sec: 349.29
Iteration:    240, Loss function: 8.626, Average Loss: 2.936, avg. samples / sec: 350.25
Iteration:    260, Loss function: 8.768, Average Loss: 3.052, avg. samples / sec: 350.15
Iteration:    280, Loss function: 8.396, Average Loss: 3.162, avg. samples / sec: 349.35
Iteration:    300, Loss function: 8.306, Average Loss: 3.266, avg. samples / sec: 322.33
Iteration:    320, Loss function: 8.329, Average Loss: 3.366, avg. samples / sec: 349.55
Iteration:    340, Loss function: 8.323, Average Loss: 3.463, avg. samples / sec: 350.95
Iteration:    360, Loss function: 7.967, Average Loss: 3.555, avg. samples / sec: 351.02
Iteration:    380, Loss function: 8.141, Average Loss: 3.647, avg. samples / sec: 350.54
Iteration:    400, Loss function: 8.089, Average Loss: 3.736, avg. samples / sec: 350.62
Iteration:    420, Loss function: 7.498, Average Loss: 3.818, avg. samples / sec: 350.83
Iteration:    440, Loss function: 7.824, Average Loss: 3.896, avg. samples / sec: 350.76
Iteration:    460, Loss function: 7.797, Average Loss: 3.973, avg. samples / sec: 351.08
Iteration:    480, Loss function: 7.532, Average Loss: 4.046, avg. samples / sec: 336.19
Iteration:    500, Loss function: 7.659, Average Loss: 4.118, avg. samples / sec: 351.00
Iteration:    520, Loss function: 7.469, Average Loss: 4.186, avg. samples / sec: 351.11
Iteration:    540, Loss function: 7.451, Average Loss: 4.253, avg. samples / sec: 351.20
Iteration:    560, Loss function: 7.183, Average Loss: 4.315, avg. samples / sec: 350.81
Iteration:    580, Loss function: 7.319, Average Loss: 4.375, avg. samples / sec: 350.76
Iteration:    600, Loss function: 7.320, Average Loss: 4.434, avg. samples / sec: 350.99
Iteration:    620, Loss function: 7.110, Average Loss: 4.491, avg. samples / sec: 351.18
Iteration:    640, Loss function: 6.975, Average Loss: 4.546, avg. samples / sec: 350.80
Iteration:    660, Loss function: 7.226, Average Loss: 4.598, avg. samples / sec: 350.66
Iteration:    680, Loss function: 7.339, Average Loss: 4.649, avg. samples / sec: 335.00
Iteration:    700, Loss function: 6.797, Average Loss: 4.697, avg. samples / sec: 351.11
Iteration:    720, Loss function: 7.060, Average Loss: 4.745, avg. samples / sec: 351.18
Iteration:    740, Loss function: 6.816, Average Loss: 4.790, avg. samples / sec: 351.41
Iteration:    760, Loss function: 6.973, Average Loss: 4.834, avg. samples / sec: 350.73
Iteration:    780, Loss function: 6.818, Average Loss: 4.877, avg. samples / sec: 351.09
Iteration:    800, Loss function: 7.131, Average Loss: 4.916, avg. samples / sec: 350.79
Iteration:    820, Loss function: 6.874, Average Loss: 4.954, avg. samples / sec: 351.22
Iteration:    840, Loss function: 6.895, Average Loss: 4.990, avg. samples / sec: 350.81
Iteration:    860, Loss function: 6.717, Average Loss: 5.024, avg. samples / sec: 350.97
Iteration:    880, Loss function: 6.654, Average Loss: 5.056, avg. samples / sec: 350.87
Iteration:    900, Loss function: 6.800, Average Loss: 5.087, avg. samples / sec: 350.86
Iteration:    920, Loss function: 6.632, Average Loss: 5.116, avg. samples / sec: 351.00
Iteration:    940, Loss function: 6.819, Average Loss: 5.145, avg. samples / sec: 350.95
Iteration:    960, Loss function: 6.402, Average Loss: 5.174, avg. samples / sec: 351.14
Iteration:    980, Loss function: 6.644, Average Loss: 5.203, avg. samples / sec: 350.45
Iteration:   1000, Loss function: 6.603, Average Loss: 5.228, avg. samples / sec: 351.09
Iteration:   1020, Loss function: 6.412, Average Loss: 5.252, avg. samples / sec: 350.73
:::MLLOG {"namespace": "", "time_ms": 1639759218353, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759218354, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.634, Average Loss: 5.277, avg. samples / sec: 351.01
Iteration:   1060, Loss function: 6.261, Average Loss: 5.300, avg. samples / sec: 351.45
Iteration:   1080, Loss function: 6.296, Average Loss: 5.322, avg. samples / sec: 351.49
Iteration:   1100, Loss function: 6.088, Average Loss: 5.343, avg. samples / sec: 351.39
Iteration:   1120, Loss function: 6.297, Average Loss: 5.363, avg. samples / sec: 351.05
Iteration:   1140, Loss function: 6.391, Average Loss: 5.382, avg. samples / sec: 351.06
Iteration:   1160, Loss function: 6.123, Average Loss: 5.399, avg. samples / sec: 351.33
Iteration:   1180, Loss function: 6.170, Average Loss: 5.416, avg. samples / sec: 351.25
Iteration:   1200, Loss function: 6.189, Average Loss: 5.432, avg. samples / sec: 351.30
Iteration:   1220, Loss function: 6.158, Average Loss: 5.447, avg. samples / sec: 350.91
Iteration:   1240, Loss function: 6.015, Average Loss: 5.459, avg. samples / sec: 351.36
Iteration:   1260, Loss function: 6.117, Average Loss: 5.472, avg. samples / sec: 351.11
Iteration:   1280, Loss function: 5.883, Average Loss: 5.484, avg. samples / sec: 351.38
Iteration:   1300, Loss function: 6.068, Average Loss: 5.498, avg. samples / sec: 351.22
Iteration:   1320, Loss function: 6.320, Average Loss: 5.510, avg. samples / sec: 351.09
Iteration:   1340, Loss function: 5.645, Average Loss: 5.520, avg. samples / sec: 351.27
Iteration:   1360, Loss function: 5.989, Average Loss: 5.530, avg. samples / sec: 351.44
Iteration:   1380, Loss function: 6.106, Average Loss: 5.540, avg. samples / sec: 351.26
Iteration:   1400, Loss function: 6.083, Average Loss: 5.550, avg. samples / sec: 351.54
Iteration:   1420, Loss function: 5.832, Average Loss: 5.558, avg. samples / sec: 351.41
Iteration:   1440, Loss function: 6.329, Average Loss: 5.565, avg. samples / sec: 351.56
Iteration:   1460, Loss function: 6.230, Average Loss: 5.573, avg. samples / sec: 351.48
Iteration:   1480, Loss function: 5.885, Average Loss: 5.581, avg. samples / sec: 351.38
Iteration:   1500, Loss function: 6.201, Average Loss: 5.589, avg. samples / sec: 351.09
Iteration:   1520, Loss function: 5.999, Average Loss: 5.593, avg. samples / sec: 351.29
Iteration:   1540, Loss function: 6.034, Average Loss: 5.597, avg. samples / sec: 351.14
Iteration:   1560, Loss function: 5.637, Average Loss: 5.602, avg. samples / sec: 351.35
Iteration:   1580, Loss function: 5.625, Average Loss: 5.607, avg. samples / sec: 351.64
Iteration:   1600, Loss function: 6.145, Average Loss: 5.611, avg. samples / sec: 351.39
Iteration:   1620, Loss function: 5.713, Average Loss: 5.615, avg. samples / sec: 350.99
Iteration:   1640, Loss function: 6.080, Average Loss: 5.618, avg. samples / sec: 351.34
Iteration:   1660, Loss function: 6.118, Average Loss: 5.623, avg. samples / sec: 351.47
Iteration:   1680, Loss function: 5.573, Average Loss: 5.625, avg. samples / sec: 351.57
Iteration:   1700, Loss function: 5.459, Average Loss: 5.629, avg. samples / sec: 351.22
Iteration:   1720, Loss function: 5.630, Average Loss: 5.631, avg. samples / sec: 351.59
Iteration:   1740, Loss function: 5.987, Average Loss: 5.633, avg. samples / sec: 351.04
Iteration:   1760, Loss function: 5.604, Average Loss: 5.635, avg. samples / sec: 350.99
Iteration:   1780, Loss function: 5.717, Average Loss: 5.636, avg. samples / sec: 351.38
Iteration:   1800, Loss function: 5.526, Average Loss: 5.638, avg. samples / sec: 351.61
Iteration:   1820, Loss function: 5.855, Average Loss: 5.639, avg. samples / sec: 351.36
Iteration:   1840, Loss function: 5.984, Average Loss: 5.640, avg. samples / sec: 351.42
Iteration:   1860, Loss function: 5.515, Average Loss: 5.641, avg. samples / sec: 351.58
Iteration:   1880, Loss function: 5.715, Average Loss: 5.642, avg. samples / sec: 350.98
Iteration:   1900, Loss function: 5.815, Average Loss: 5.642, avg. samples / sec: 351.15
Iteration:   1920, Loss function: 5.762, Average Loss: 5.642, avg. samples / sec: 351.30
Iteration:   1940, Loss function: 5.878, Average Loss: 5.643, avg. samples / sec: 351.44
Iteration:   1960, Loss function: 5.626, Average Loss: 5.643, avg. samples / sec: 351.24
Iteration:   1980, Loss function: 5.658, Average Loss: 5.641, avg. samples / sec: 351.21
Iteration:   2000, Loss function: 5.521, Average Loss: 5.640, avg. samples / sec: 351.28
Iteration:   2020, Loss function: 5.767, Average Loss: 5.638, avg. samples / sec: 351.20
Iteration:   2040, Loss function: 5.741, Average Loss: 5.638, avg. samples / sec: 351.52
:::MLLOG {"namespace": "", "time_ms": 1639759552269, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759552270, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.539, Average Loss: 5.636, avg. samples / sec: 351.65
Iteration:   2080, Loss function: 5.034, Average Loss: 5.634, avg. samples / sec: 351.68
Iteration:   2100, Loss function: 5.528, Average Loss: 5.632, avg. samples / sec: 351.17
Iteration:   2120, Loss function: 5.313, Average Loss: 5.629, avg. samples / sec: 351.08
Iteration:   2140, Loss function: 5.408, Average Loss: 5.626, avg. samples / sec: 351.62
Iteration:   2160, Loss function: 5.390, Average Loss: 5.624, avg. samples / sec: 351.38
Iteration:   2180, Loss function: 5.420, Average Loss: 5.622, avg. samples / sec: 351.46
Iteration:   2200, Loss function: 5.494, Average Loss: 5.618, avg. samples / sec: 351.70
Iteration:   2220, Loss function: 5.702, Average Loss: 5.615, avg. samples / sec: 351.60
Iteration:   2240, Loss function: 5.428, Average Loss: 5.613, avg. samples / sec: 351.52
Iteration:   2260, Loss function: 5.439, Average Loss: 5.609, avg. samples / sec: 351.32
Iteration:   2280, Loss function: 5.290, Average Loss: 5.606, avg. samples / sec: 351.25
Iteration:   2300, Loss function: 5.208, Average Loss: 5.603, avg. samples / sec: 351.23
Iteration:   2320, Loss function: 5.253, Average Loss: 5.600, avg. samples / sec: 351.15
Iteration:   2340, Loss function: 5.370, Average Loss: 5.596, avg. samples / sec: 351.52
Iteration:   2360, Loss function: 5.240, Average Loss: 5.592, avg. samples / sec: 350.92
Iteration:   2380, Loss function: 5.357, Average Loss: 5.587, avg. samples / sec: 351.29
Iteration:   2400, Loss function: 5.645, Average Loss: 5.584, avg. samples / sec: 351.56
Iteration:   2420, Loss function: 5.379, Average Loss: 5.580, avg. samples / sec: 351.25
Iteration:   2440, Loss function: 5.437, Average Loss: 5.577, avg. samples / sec: 351.51
Iteration:   2460, Loss function: 5.049, Average Loss: 5.573, avg. samples / sec: 351.59
Iteration:   2480, Loss function: 5.307, Average Loss: 5.569, avg. samples / sec: 351.04
Iteration:   2500, Loss function: 5.295, Average Loss: 5.565, avg. samples / sec: 350.57
Iteration:   2520, Loss function: 5.140, Average Loss: 5.559, avg. samples / sec: 351.05
Iteration:   2540, Loss function: 5.424, Average Loss: 5.555, avg. samples / sec: 351.31
Iteration:   2560, Loss function: 5.415, Average Loss: 5.552, avg. samples / sec: 351.36
Iteration:   2580, Loss function: 5.296, Average Loss: 5.549, avg. samples / sec: 351.39
Iteration:   2600, Loss function: 5.458, Average Loss: 5.545, avg. samples / sec: 351.03
Iteration:   2620, Loss function: 5.436, Average Loss: 5.540, avg. samples / sec: 351.18
Iteration:   2640, Loss function: 5.012, Average Loss: 5.536, avg. samples / sec: 351.18
Iteration:   2660, Loss function: 5.127, Average Loss: 5.533, avg. samples / sec: 351.17
Iteration:   2680, Loss function: 5.079, Average Loss: 5.529, avg. samples / sec: 350.86
Iteration:   2700, Loss function: 5.048, Average Loss: 5.524, avg. samples / sec: 350.95
Iteration:   2720, Loss function: 5.349, Average Loss: 5.520, avg. samples / sec: 350.81
Iteration:   2740, Loss function: 4.953, Average Loss: 5.516, avg. samples / sec: 350.67
Iteration:   2760, Loss function: 5.127, Average Loss: 5.511, avg. samples / sec: 350.86
Iteration:   2780, Loss function: 5.406, Average Loss: 5.507, avg. samples / sec: 351.14
Iteration:   2800, Loss function: 5.276, Average Loss: 5.501, avg. samples / sec: 350.77
Iteration:   2820, Loss function: 5.453, Average Loss: 5.498, avg. samples / sec: 350.98
Iteration:   2840, Loss function: 5.081, Average Loss: 5.493, avg. samples / sec: 351.30
Iteration:   2860, Loss function: 5.072, Average Loss: 5.488, avg. samples / sec: 351.39
Iteration:   2880, Loss function: 5.217, Average Loss: 5.483, avg. samples / sec: 351.11
Iteration:   2900, Loss function: 5.084, Average Loss: 5.478, avg. samples / sec: 351.23
Iteration:   2920, Loss function: 5.063, Average Loss: 5.472, avg. samples / sec: 351.42
Iteration:   2940, Loss function: 5.154, Average Loss: 5.468, avg. samples / sec: 351.17
Iteration:   2960, Loss function: 5.403, Average Loss: 5.464, avg. samples / sec: 351.14
Iteration:   2980, Loss function: 5.197, Average Loss: 5.460, avg. samples / sec: 351.26
Iteration:   3000, Loss function: 5.213, Average Loss: 5.454, avg. samples / sec: 351.26
Iteration:   3020, Loss function: 5.307, Average Loss: 5.448, avg. samples / sec: 351.23
Iteration:   3040, Loss function: 5.237, Average Loss: 5.443, avg. samples / sec: 351.29
Iteration:   3060, Loss function: 4.954, Average Loss: 5.437, avg. samples / sec: 351.02
Iteration:   3080, Loss function: 4.991, Average Loss: 5.432, avg. samples / sec: 351.29
:::MLLOG {"namespace": "", "time_ms": 1639759885942, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759885943, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.193, Average Loss: 5.427, avg. samples / sec: 351.25
Iteration:   3120, Loss function: 5.044, Average Loss: 5.420, avg. samples / sec: 351.16
Iteration:   3140, Loss function: 5.259, Average Loss: 5.415, avg. samples / sec: 351.39
Iteration:   3160, Loss function: 5.550, Average Loss: 5.409, avg. samples / sec: 351.30
Iteration:   3180, Loss function: 5.165, Average Loss: 5.403, avg. samples / sec: 350.85
Iteration:   3200, Loss function: 5.082, Average Loss: 5.398, avg. samples / sec: 350.81
Iteration:   3220, Loss function: 5.101, Average Loss: 5.393, avg. samples / sec: 350.98
Iteration:   3240, Loss function: 5.209, Average Loss: 5.388, avg. samples / sec: 350.62
Iteration:   3260, Loss function: 5.142, Average Loss: 5.382, avg. samples / sec: 350.88
Iteration:   3280, Loss function: 4.815, Average Loss: 5.375, avg. samples / sec: 350.84
Iteration:   3300, Loss function: 4.762, Average Loss: 5.369, avg. samples / sec: 351.61
Iteration:   3320, Loss function: 5.018, Average Loss: 5.364, avg. samples / sec: 351.88
Iteration:   3340, Loss function: 5.012, Average Loss: 5.359, avg. samples / sec: 352.29
Iteration:   3360, Loss function: 5.137, Average Loss: 5.353, avg. samples / sec: 352.32
Iteration:   3380, Loss function: 5.214, Average Loss: 5.347, avg. samples / sec: 352.15
Iteration:   3400, Loss function: 4.927, Average Loss: 5.342, avg. samples / sec: 351.74
Iteration:   3420, Loss function: 5.051, Average Loss: 5.337, avg. samples / sec: 350.75
Iteration:   3440, Loss function: 4.938, Average Loss: 5.332, avg. samples / sec: 350.66
Iteration:   3460, Loss function: 5.158, Average Loss: 5.327, avg. samples / sec: 351.38
Iteration:   3480, Loss function: 5.158, Average Loss: 5.322, avg. samples / sec: 351.21
Iteration:   3500, Loss function: 5.119, Average Loss: 5.317, avg. samples / sec: 351.01
Iteration:   3520, Loss function: 5.024, Average Loss: 5.314, avg. samples / sec: 351.17
Iteration:   3540, Loss function: 5.158, Average Loss: 5.309, avg. samples / sec: 351.60
Iteration:   3560, Loss function: 4.966, Average Loss: 5.305, avg. samples / sec: 351.71
Iteration:   3580, Loss function: 5.006, Average Loss: 5.300, avg. samples / sec: 351.51
Iteration:   3600, Loss function: 5.032, Average Loss: 5.294, avg. samples / sec: 351.79
Iteration:   3620, Loss function: 4.831, Average Loss: 5.289, avg. samples / sec: 351.84
Iteration:   3640, Loss function: 4.761, Average Loss: 5.283, avg. samples / sec: 351.68
Iteration:   3660, Loss function: 5.043, Average Loss: 5.279, avg. samples / sec: 351.74
Iteration:   3680, Loss function: 5.116, Average Loss: 5.274, avg. samples / sec: 351.83
Iteration:   3700, Loss function: 5.357, Average Loss: 5.269, avg. samples / sec: 351.86
Iteration:   3720, Loss function: 4.957, Average Loss: 5.263, avg. samples / sec: 351.92
Iteration:   3740, Loss function: 5.054, Average Loss: 5.260, avg. samples / sec: 351.87
Iteration:   3760, Loss function: 5.104, Average Loss: 5.257, avg. samples / sec: 351.89
Iteration:   3780, Loss function: 5.146, Average Loss: 5.253, avg. samples / sec: 351.88
Iteration:   3800, Loss function: 5.151, Average Loss: 5.250, avg. samples / sec: 351.88
Iteration:   3820, Loss function: 5.171, Average Loss: 5.245, avg. samples / sec: 351.71
Iteration:   3840, Loss function: 4.752, Average Loss: 5.241, avg. samples / sec: 351.56
Iteration:   3860, Loss function: 4.950, Average Loss: 5.236, avg. samples / sec: 351.57
Iteration:   3880, Loss function: 5.140, Average Loss: 5.230, avg. samples / sec: 351.61
Iteration:   3900, Loss function: 5.011, Average Loss: 5.225, avg. samples / sec: 351.58
Iteration:   3920, Loss function: 5.057, Average Loss: 5.219, avg. samples / sec: 351.22
Iteration:   3940, Loss function: 5.050, Average Loss: 5.213, avg. samples / sec: 351.52
Iteration:   3960, Loss function: 5.038, Average Loss: 5.210, avg. samples / sec: 351.65
Iteration:   3980, Loss function: 4.673, Average Loss: 5.205, avg. samples / sec: 351.80
Iteration:   4000, Loss function: 5.100, Average Loss: 5.201, avg. samples / sec: 351.73
Iteration:   4020, Loss function: 4.758, Average Loss: 5.196, avg. samples / sec: 351.60
Iteration:   4040, Loss function: 5.043, Average Loss: 5.192, avg. samples / sec: 351.44
Iteration:   4060, Loss function: 5.184, Average Loss: 5.189, avg. samples / sec: 351.52
Iteration:   4080, Loss function: 5.155, Average Loss: 5.184, avg. samples / sec: 351.55
Iteration:   4100, Loss function: 5.040, Average Loss: 5.181, avg. samples / sec: 351.24
:::MLLOG {"namespace": "", "time_ms": 1639760219676, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760219677, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.067, Average Loss: 5.177, avg. samples / sec: 351.24
Iteration:   4140, Loss function: 5.102, Average Loss: 5.172, avg. samples / sec: 351.30
Iteration:   4160, Loss function: 4.958, Average Loss: 5.166, avg. samples / sec: 350.89
Iteration:   4180, Loss function: 4.903, Average Loss: 5.160, avg. samples / sec: 350.97
Iteration:   4200, Loss function: 5.032, Average Loss: 5.156, avg. samples / sec: 351.53
Iteration:   4220, Loss function: 4.915, Average Loss: 5.151, avg. samples / sec: 351.26
Iteration:   4240, Loss function: 4.804, Average Loss: 5.146, avg. samples / sec: 351.15
Iteration:   4260, Loss function: 5.088, Average Loss: 5.141, avg. samples / sec: 351.47
Iteration:   4280, Loss function: 5.047, Average Loss: 5.135, avg. samples / sec: 351.68
Iteration:   4300, Loss function: 4.824, Average Loss: 5.129, avg. samples / sec: 351.56
Iteration:   4320, Loss function: 4.722, Average Loss: 5.125, avg. samples / sec: 351.55
Iteration:   4340, Loss function: 4.640, Average Loss: 5.119, avg. samples / sec: 351.41
Iteration:   4360, Loss function: 4.967, Average Loss: 5.115, avg. samples / sec: 351.47
Iteration:   4380, Loss function: 5.019, Average Loss: 5.111, avg. samples / sec: 351.53
Iteration:   4400, Loss function: 4.867, Average Loss: 5.107, avg. samples / sec: 351.46
Iteration:   4420, Loss function: 4.767, Average Loss: 5.102, avg. samples / sec: 351.53
Iteration:   4440, Loss function: 4.745, Average Loss: 5.097, avg. samples / sec: 352.05
Iteration:   4460, Loss function: 4.960, Average Loss: 5.093, avg. samples / sec: 351.75
Iteration:   4480, Loss function: 5.126, Average Loss: 5.090, avg. samples / sec: 351.17
Iteration:   4500, Loss function: 4.925, Average Loss: 5.087, avg. samples / sec: 351.03
Iteration:   4520, Loss function: 4.683, Average Loss: 5.082, avg. samples / sec: 350.89
Iteration:   4540, Loss function: 4.921, Average Loss: 5.078, avg. samples / sec: 350.85
Iteration:   4560, Loss function: 4.681, Average Loss: 5.075, avg. samples / sec: 350.78
Iteration:   4580, Loss function: 4.763, Average Loss: 5.072, avg. samples / sec: 350.78
Iteration:   4600, Loss function: 4.857, Average Loss: 5.068, avg. samples / sec: 351.41
Iteration:   4620, Loss function: 4.787, Average Loss: 5.065, avg. samples / sec: 351.55
Iteration:   4640, Loss function: 4.761, Average Loss: 5.061, avg. samples / sec: 351.41
Iteration:   4660, Loss function: 4.661, Average Loss: 5.057, avg. samples / sec: 351.39
Iteration:   4680, Loss function: 5.264, Average Loss: 5.053, avg. samples / sec: 351.62
Iteration:   4700, Loss function: 4.748, Average Loss: 5.049, avg. samples / sec: 351.75
Iteration:   4720, Loss function: 4.725, Average Loss: 5.045, avg. samples / sec: 351.55
Iteration:   4740, Loss function: 4.772, Average Loss: 5.041, avg. samples / sec: 351.56
Iteration:   4760, Loss function: 4.721, Average Loss: 5.038, avg. samples / sec: 351.51
Iteration:   4780, Loss function: 5.012, Average Loss: 5.035, avg. samples / sec: 351.33
Iteration:   4800, Loss function: 4.997, Average Loss: 5.033, avg. samples / sec: 351.41
Iteration:   4820, Loss function: 4.744, Average Loss: 5.029, avg. samples / sec: 351.52
Iteration:   4840, Loss function: 5.144, Average Loss: 5.025, avg. samples / sec: 351.64
Iteration:   4860, Loss function: 4.634, Average Loss: 5.021, avg. samples / sec: 351.57
Iteration:   4880, Loss function: 5.055, Average Loss: 5.018, avg. samples / sec: 351.64
Iteration:   4900, Loss function: 4.635, Average Loss: 5.015, avg. samples / sec: 351.72
Iteration:   4920, Loss function: 4.849, Average Loss: 5.011, avg. samples / sec: 351.80
Iteration:   4940, Loss function: 4.837, Average Loss: 5.007, avg. samples / sec: 351.48
Iteration:   4960, Loss function: 4.734, Average Loss: 5.004, avg. samples / sec: 351.70
Iteration:   4980, Loss function: 4.731, Average Loss: 5.001, avg. samples / sec: 351.77
Iteration:   5000, Loss function: 4.942, Average Loss: 4.997, avg. samples / sec: 352.10
Iteration:   5020, Loss function: 5.252, Average Loss: 4.993, avg. samples / sec: 351.99
Iteration:   5040, Loss function: 4.826, Average Loss: 4.990, avg. samples / sec: 352.30
Iteration:   5060, Loss function: 4.898, Average Loss: 4.987, avg. samples / sec: 352.07
Iteration:   5080, Loss function: 4.624, Average Loss: 4.983, avg. samples / sec: 351.69
Iteration:   5100, Loss function: 4.741, Average Loss: 4.981, avg. samples / sec: 351.79
Iteration:   5120, Loss function: 4.675, Average Loss: 4.978, avg. samples / sec: 351.79
Iteration:   5140, Loss function: 4.812, Average Loss: 4.974, avg. samples / sec: 351.51
:::MLLOG {"namespace": "", "time_ms": 1639760553411, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.38 s
:::MLLOG {"namespace": "", "time_ms": 1639760586839, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760586884, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760586884, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.60s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.02s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10893
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21934
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09699
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19399
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13914
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10893 AP goal: 0.10000
Iteration:   5160, Loss function: 4.920, Average Loss: 4.969, avg. samples / sec: 57.30
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1089321888451204, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592503, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:03:13 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:03:13 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758775099, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758775297, "event_type": "POINT_IN_TIME", "key": "seed", "value": 627346694, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 627346694
:::MLLOG {"namespace": "", "time_ms": 1639758776963, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758776964, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758776967, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758776968, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758879755, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758879756, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758881432, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758881432, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758881724, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758881724, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758881727, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.193, Average Loss: 0.022, avg. samples / sec: 1.09
Iteration:     20, Loss function: 20.937, Average Loss: 0.450, avg. samples / sec: 334.91
Iteration:     40, Loss function: 20.725, Average Loss: 0.852, avg. samples / sec: 344.50
Iteration:     60, Loss function: 20.333, Average Loss: 1.242, avg. samples / sec: 345.67
Iteration:     80, Loss function: 19.826, Average Loss: 1.615, avg. samples / sec: 344.24
Iteration:    100, Loss function: 15.049, Average Loss: 1.935, avg. samples / sec: 330.96
Iteration:    120, Loss function: 11.202, Average Loss: 2.141, avg. samples / sec: 348.99
Iteration:    140, Loss function: 9.609, Average Loss: 2.299, avg. samples / sec: 348.89
Iteration:    160, Loss function: 9.148, Average Loss: 2.439, avg. samples / sec: 348.86
Iteration:    180, Loss function: 8.950, Average Loss: 2.570, avg. samples / sec: 349.23
Iteration:    200, Loss function: 8.701, Average Loss: 2.696, avg. samples / sec: 348.84
Iteration:    220, Loss function: 8.535, Average Loss: 2.816, avg. samples / sec: 349.29
Iteration:    240, Loss function: 8.626, Average Loss: 2.936, avg. samples / sec: 350.25
Iteration:    260, Loss function: 8.768, Average Loss: 3.052, avg. samples / sec: 350.15
Iteration:    280, Loss function: 8.396, Average Loss: 3.162, avg. samples / sec: 349.35
Iteration:    300, Loss function: 8.306, Average Loss: 3.266, avg. samples / sec: 322.33
Iteration:    320, Loss function: 8.329, Average Loss: 3.366, avg. samples / sec: 349.55
Iteration:    340, Loss function: 8.323, Average Loss: 3.463, avg. samples / sec: 350.95
Iteration:    360, Loss function: 7.967, Average Loss: 3.555, avg. samples / sec: 351.02
Iteration:    380, Loss function: 8.141, Average Loss: 3.647, avg. samples / sec: 350.54
Iteration:    400, Loss function: 8.089, Average Loss: 3.736, avg. samples / sec: 350.62
Iteration:    420, Loss function: 7.498, Average Loss: 3.818, avg. samples / sec: 350.83
Iteration:    440, Loss function: 7.824, Average Loss: 3.896, avg. samples / sec: 350.76
Iteration:    460, Loss function: 7.797, Average Loss: 3.973, avg. samples / sec: 351.08
Iteration:    480, Loss function: 7.532, Average Loss: 4.046, avg. samples / sec: 336.19
Iteration:    500, Loss function: 7.659, Average Loss: 4.118, avg. samples / sec: 351.00
Iteration:    520, Loss function: 7.469, Average Loss: 4.186, avg. samples / sec: 351.11
Iteration:    540, Loss function: 7.451, Average Loss: 4.253, avg. samples / sec: 351.20
Iteration:    560, Loss function: 7.183, Average Loss: 4.315, avg. samples / sec: 350.81
Iteration:    580, Loss function: 7.319, Average Loss: 4.375, avg. samples / sec: 350.76
Iteration:    600, Loss function: 7.320, Average Loss: 4.434, avg. samples / sec: 350.99
Iteration:    620, Loss function: 7.110, Average Loss: 4.491, avg. samples / sec: 351.18
Iteration:    640, Loss function: 6.975, Average Loss: 4.546, avg. samples / sec: 350.80
Iteration:    660, Loss function: 7.226, Average Loss: 4.598, avg. samples / sec: 350.66
Iteration:    680, Loss function: 7.339, Average Loss: 4.649, avg. samples / sec: 335.00
Iteration:    700, Loss function: 6.797, Average Loss: 4.697, avg. samples / sec: 351.11
Iteration:    720, Loss function: 7.060, Average Loss: 4.745, avg. samples / sec: 351.18
Iteration:    740, Loss function: 6.816, Average Loss: 4.790, avg. samples / sec: 351.41
Iteration:    760, Loss function: 6.973, Average Loss: 4.834, avg. samples / sec: 350.73
Iteration:    780, Loss function: 6.818, Average Loss: 4.877, avg. samples / sec: 351.09
Iteration:    800, Loss function: 7.131, Average Loss: 4.916, avg. samples / sec: 350.79
Iteration:    820, Loss function: 6.874, Average Loss: 4.954, avg. samples / sec: 351.22
Iteration:    840, Loss function: 6.895, Average Loss: 4.990, avg. samples / sec: 350.81
Iteration:    860, Loss function: 6.717, Average Loss: 5.024, avg. samples / sec: 350.97
Iteration:    880, Loss function: 6.654, Average Loss: 5.056, avg. samples / sec: 350.87
Iteration:    900, Loss function: 6.800, Average Loss: 5.087, avg. samples / sec: 350.86
Iteration:    920, Loss function: 6.632, Average Loss: 5.116, avg. samples / sec: 351.00
Iteration:    940, Loss function: 6.819, Average Loss: 5.145, avg. samples / sec: 350.95
Iteration:    960, Loss function: 6.402, Average Loss: 5.174, avg. samples / sec: 351.14
Iteration:    980, Loss function: 6.644, Average Loss: 5.203, avg. samples / sec: 350.45
Iteration:   1000, Loss function: 6.603, Average Loss: 5.228, avg. samples / sec: 351.09
Iteration:   1020, Loss function: 6.412, Average Loss: 5.252, avg. samples / sec: 350.73
:::MLLOG {"namespace": "", "time_ms": 1639759218353, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759218354, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.634, Average Loss: 5.277, avg. samples / sec: 351.01
Iteration:   1060, Loss function: 6.261, Average Loss: 5.300, avg. samples / sec: 351.45
Iteration:   1080, Loss function: 6.296, Average Loss: 5.322, avg. samples / sec: 351.49
Iteration:   1100, Loss function: 6.088, Average Loss: 5.343, avg. samples / sec: 351.39
Iteration:   1120, Loss function: 6.297, Average Loss: 5.363, avg. samples / sec: 351.05
Iteration:   1140, Loss function: 6.391, Average Loss: 5.382, avg. samples / sec: 351.06
Iteration:   1160, Loss function: 6.123, Average Loss: 5.399, avg. samples / sec: 351.33
Iteration:   1180, Loss function: 6.170, Average Loss: 5.416, avg. samples / sec: 351.25
Iteration:   1200, Loss function: 6.189, Average Loss: 5.432, avg. samples / sec: 351.30
Iteration:   1220, Loss function: 6.158, Average Loss: 5.447, avg. samples / sec: 350.91
Iteration:   1240, Loss function: 6.015, Average Loss: 5.459, avg. samples / sec: 351.36
Iteration:   1260, Loss function: 6.117, Average Loss: 5.472, avg. samples / sec: 351.11
Iteration:   1280, Loss function: 5.883, Average Loss: 5.484, avg. samples / sec: 351.38
Iteration:   1300, Loss function: 6.068, Average Loss: 5.498, avg. samples / sec: 351.22
Iteration:   1320, Loss function: 6.320, Average Loss: 5.510, avg. samples / sec: 351.09
Iteration:   1340, Loss function: 5.645, Average Loss: 5.520, avg. samples / sec: 351.27
Iteration:   1360, Loss function: 5.989, Average Loss: 5.530, avg. samples / sec: 351.44
Iteration:   1380, Loss function: 6.106, Average Loss: 5.540, avg. samples / sec: 351.26
Iteration:   1400, Loss function: 6.083, Average Loss: 5.550, avg. samples / sec: 351.54
Iteration:   1420, Loss function: 5.832, Average Loss: 5.558, avg. samples / sec: 351.41
Iteration:   1440, Loss function: 6.329, Average Loss: 5.565, avg. samples / sec: 351.56
Iteration:   1460, Loss function: 6.230, Average Loss: 5.573, avg. samples / sec: 351.48
Iteration:   1480, Loss function: 5.885, Average Loss: 5.581, avg. samples / sec: 351.38
Iteration:   1500, Loss function: 6.201, Average Loss: 5.589, avg. samples / sec: 351.09
Iteration:   1520, Loss function: 5.999, Average Loss: 5.593, avg. samples / sec: 351.29
Iteration:   1540, Loss function: 6.034, Average Loss: 5.597, avg. samples / sec: 351.14
Iteration:   1560, Loss function: 5.637, Average Loss: 5.602, avg. samples / sec: 351.35
Iteration:   1580, Loss function: 5.625, Average Loss: 5.607, avg. samples / sec: 351.64
Iteration:   1600, Loss function: 6.145, Average Loss: 5.611, avg. samples / sec: 351.39
Iteration:   1620, Loss function: 5.713, Average Loss: 5.615, avg. samples / sec: 350.99
Iteration:   1640, Loss function: 6.080, Average Loss: 5.618, avg. samples / sec: 351.34
Iteration:   1660, Loss function: 6.118, Average Loss: 5.623, avg. samples / sec: 351.47
Iteration:   1680, Loss function: 5.573, Average Loss: 5.625, avg. samples / sec: 351.57
Iteration:   1700, Loss function: 5.459, Average Loss: 5.629, avg. samples / sec: 351.22
Iteration:   1720, Loss function: 5.630, Average Loss: 5.631, avg. samples / sec: 351.59
Iteration:   1740, Loss function: 5.987, Average Loss: 5.633, avg. samples / sec: 351.04
Iteration:   1760, Loss function: 5.604, Average Loss: 5.635, avg. samples / sec: 350.99
Iteration:   1780, Loss function: 5.717, Average Loss: 5.636, avg. samples / sec: 351.38
Iteration:   1800, Loss function: 5.526, Average Loss: 5.638, avg. samples / sec: 351.61
Iteration:   1820, Loss function: 5.855, Average Loss: 5.639, avg. samples / sec: 351.36
Iteration:   1840, Loss function: 5.984, Average Loss: 5.640, avg. samples / sec: 351.42
Iteration:   1860, Loss function: 5.515, Average Loss: 5.641, avg. samples / sec: 351.58
Iteration:   1880, Loss function: 5.715, Average Loss: 5.642, avg. samples / sec: 350.98
Iteration:   1900, Loss function: 5.815, Average Loss: 5.642, avg. samples / sec: 351.15
Iteration:   1920, Loss function: 5.762, Average Loss: 5.642, avg. samples / sec: 351.30
Iteration:   1940, Loss function: 5.878, Average Loss: 5.643, avg. samples / sec: 351.44
Iteration:   1960, Loss function: 5.626, Average Loss: 5.643, avg. samples / sec: 351.24
Iteration:   1980, Loss function: 5.658, Average Loss: 5.641, avg. samples / sec: 351.21
Iteration:   2000, Loss function: 5.521, Average Loss: 5.640, avg. samples / sec: 351.28
Iteration:   2020, Loss function: 5.767, Average Loss: 5.638, avg. samples / sec: 351.20
Iteration:   2040, Loss function: 5.741, Average Loss: 5.638, avg. samples / sec: 351.52
:::MLLOG {"namespace": "", "time_ms": 1639759552269, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759552270, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.539, Average Loss: 5.636, avg. samples / sec: 351.65
Iteration:   2080, Loss function: 5.034, Average Loss: 5.634, avg. samples / sec: 351.68
Iteration:   2100, Loss function: 5.528, Average Loss: 5.632, avg. samples / sec: 351.17
Iteration:   2120, Loss function: 5.313, Average Loss: 5.629, avg. samples / sec: 351.08
Iteration:   2140, Loss function: 5.408, Average Loss: 5.626, avg. samples / sec: 351.62
Iteration:   2160, Loss function: 5.390, Average Loss: 5.624, avg. samples / sec: 351.38
Iteration:   2180, Loss function: 5.420, Average Loss: 5.622, avg. samples / sec: 351.46
Iteration:   2200, Loss function: 5.494, Average Loss: 5.618, avg. samples / sec: 351.70
Iteration:   2220, Loss function: 5.702, Average Loss: 5.615, avg. samples / sec: 351.60
Iteration:   2240, Loss function: 5.428, Average Loss: 5.613, avg. samples / sec: 351.52
Iteration:   2260, Loss function: 5.439, Average Loss: 5.609, avg. samples / sec: 351.32
Iteration:   2280, Loss function: 5.290, Average Loss: 5.606, avg. samples / sec: 351.25
Iteration:   2300, Loss function: 5.208, Average Loss: 5.603, avg. samples / sec: 351.23
Iteration:   2320, Loss function: 5.253, Average Loss: 5.600, avg. samples / sec: 351.15
Iteration:   2340, Loss function: 5.370, Average Loss: 5.596, avg. samples / sec: 351.52
Iteration:   2360, Loss function: 5.240, Average Loss: 5.592, avg. samples / sec: 350.92
Iteration:   2380, Loss function: 5.357, Average Loss: 5.587, avg. samples / sec: 351.29
Iteration:   2400, Loss function: 5.645, Average Loss: 5.584, avg. samples / sec: 351.56
Iteration:   2420, Loss function: 5.379, Average Loss: 5.580, avg. samples / sec: 351.25
Iteration:   2440, Loss function: 5.437, Average Loss: 5.577, avg. samples / sec: 351.51
Iteration:   2460, Loss function: 5.049, Average Loss: 5.573, avg. samples / sec: 351.59
Iteration:   2480, Loss function: 5.307, Average Loss: 5.569, avg. samples / sec: 351.04
Iteration:   2500, Loss function: 5.295, Average Loss: 5.565, avg. samples / sec: 350.57
Iteration:   2520, Loss function: 5.140, Average Loss: 5.559, avg. samples / sec: 351.05
Iteration:   2540, Loss function: 5.424, Average Loss: 5.555, avg. samples / sec: 351.31
Iteration:   2560, Loss function: 5.415, Average Loss: 5.552, avg. samples / sec: 351.36
Iteration:   2580, Loss function: 5.296, Average Loss: 5.549, avg. samples / sec: 351.39
Iteration:   2600, Loss function: 5.458, Average Loss: 5.545, avg. samples / sec: 351.03
Iteration:   2620, Loss function: 5.436, Average Loss: 5.540, avg. samples / sec: 351.18
Iteration:   2640, Loss function: 5.012, Average Loss: 5.536, avg. samples / sec: 351.18
Iteration:   2660, Loss function: 5.127, Average Loss: 5.533, avg. samples / sec: 351.17
Iteration:   2680, Loss function: 5.079, Average Loss: 5.529, avg. samples / sec: 350.86
Iteration:   2700, Loss function: 5.048, Average Loss: 5.524, avg. samples / sec: 350.95
Iteration:   2720, Loss function: 5.349, Average Loss: 5.520, avg. samples / sec: 350.81
Iteration:   2740, Loss function: 4.953, Average Loss: 5.516, avg. samples / sec: 350.67
Iteration:   2760, Loss function: 5.127, Average Loss: 5.511, avg. samples / sec: 350.86
Iteration:   2780, Loss function: 5.406, Average Loss: 5.507, avg. samples / sec: 351.14
Iteration:   2800, Loss function: 5.276, Average Loss: 5.501, avg. samples / sec: 350.77
Iteration:   2820, Loss function: 5.453, Average Loss: 5.498, avg. samples / sec: 350.98
Iteration:   2840, Loss function: 5.081, Average Loss: 5.493, avg. samples / sec: 351.30
Iteration:   2860, Loss function: 5.072, Average Loss: 5.488, avg. samples / sec: 351.39
Iteration:   2880, Loss function: 5.217, Average Loss: 5.483, avg. samples / sec: 351.11
Iteration:   2900, Loss function: 5.084, Average Loss: 5.478, avg. samples / sec: 351.23
Iteration:   2920, Loss function: 5.063, Average Loss: 5.472, avg. samples / sec: 351.42
Iteration:   2940, Loss function: 5.154, Average Loss: 5.468, avg. samples / sec: 351.17
Iteration:   2960, Loss function: 5.403, Average Loss: 5.464, avg. samples / sec: 351.14
Iteration:   2980, Loss function: 5.197, Average Loss: 5.460, avg. samples / sec: 351.26
Iteration:   3000, Loss function: 5.213, Average Loss: 5.454, avg. samples / sec: 351.26
Iteration:   3020, Loss function: 5.307, Average Loss: 5.448, avg. samples / sec: 351.23
Iteration:   3040, Loss function: 5.237, Average Loss: 5.443, avg. samples / sec: 351.29
Iteration:   3060, Loss function: 4.954, Average Loss: 5.437, avg. samples / sec: 351.02
Iteration:   3080, Loss function: 4.991, Average Loss: 5.432, avg. samples / sec: 351.29
:::MLLOG {"namespace": "", "time_ms": 1639759885942, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759885943, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.193, Average Loss: 5.427, avg. samples / sec: 351.25
Iteration:   3120, Loss function: 5.044, Average Loss: 5.420, avg. samples / sec: 351.16
Iteration:   3140, Loss function: 5.259, Average Loss: 5.415, avg. samples / sec: 351.39
Iteration:   3160, Loss function: 5.550, Average Loss: 5.409, avg. samples / sec: 351.30
Iteration:   3180, Loss function: 5.165, Average Loss: 5.403, avg. samples / sec: 350.85
Iteration:   3200, Loss function: 5.082, Average Loss: 5.398, avg. samples / sec: 350.81
Iteration:   3220, Loss function: 5.101, Average Loss: 5.393, avg. samples / sec: 350.98
Iteration:   3240, Loss function: 5.209, Average Loss: 5.388, avg. samples / sec: 350.62
Iteration:   3260, Loss function: 5.142, Average Loss: 5.382, avg. samples / sec: 350.88
Iteration:   3280, Loss function: 4.815, Average Loss: 5.375, avg. samples / sec: 350.84
Iteration:   3300, Loss function: 4.762, Average Loss: 5.369, avg. samples / sec: 351.61
Iteration:   3320, Loss function: 5.018, Average Loss: 5.364, avg. samples / sec: 351.88
Iteration:   3340, Loss function: 5.012, Average Loss: 5.359, avg. samples / sec: 352.29
Iteration:   3360, Loss function: 5.137, Average Loss: 5.353, avg. samples / sec: 352.32
Iteration:   3380, Loss function: 5.214, Average Loss: 5.347, avg. samples / sec: 352.15
Iteration:   3400, Loss function: 4.927, Average Loss: 5.342, avg. samples / sec: 351.74
Iteration:   3420, Loss function: 5.051, Average Loss: 5.337, avg. samples / sec: 350.75
Iteration:   3440, Loss function: 4.938, Average Loss: 5.332, avg. samples / sec: 350.66
Iteration:   3460, Loss function: 5.158, Average Loss: 5.327, avg. samples / sec: 351.38
Iteration:   3480, Loss function: 5.158, Average Loss: 5.322, avg. samples / sec: 351.21
Iteration:   3500, Loss function: 5.119, Average Loss: 5.317, avg. samples / sec: 351.01
Iteration:   3520, Loss function: 5.024, Average Loss: 5.314, avg. samples / sec: 351.17
Iteration:   3540, Loss function: 5.158, Average Loss: 5.309, avg. samples / sec: 351.60
Iteration:   3560, Loss function: 4.966, Average Loss: 5.305, avg. samples / sec: 351.71
Iteration:   3580, Loss function: 5.006, Average Loss: 5.300, avg. samples / sec: 351.51
Iteration:   3600, Loss function: 5.032, Average Loss: 5.294, avg. samples / sec: 351.79
Iteration:   3620, Loss function: 4.831, Average Loss: 5.289, avg. samples / sec: 351.84
Iteration:   3640, Loss function: 4.761, Average Loss: 5.283, avg. samples / sec: 351.68
Iteration:   3660, Loss function: 5.043, Average Loss: 5.279, avg. samples / sec: 351.74
Iteration:   3680, Loss function: 5.116, Average Loss: 5.274, avg. samples / sec: 351.83
Iteration:   3700, Loss function: 5.357, Average Loss: 5.269, avg. samples / sec: 351.86
Iteration:   3720, Loss function: 4.957, Average Loss: 5.263, avg. samples / sec: 351.92
Iteration:   3740, Loss function: 5.054, Average Loss: 5.260, avg. samples / sec: 351.87
Iteration:   3760, Loss function: 5.104, Average Loss: 5.257, avg. samples / sec: 351.89
Iteration:   3780, Loss function: 5.146, Average Loss: 5.253, avg. samples / sec: 351.88
Iteration:   3800, Loss function: 5.151, Average Loss: 5.250, avg. samples / sec: 351.88
Iteration:   3820, Loss function: 5.171, Average Loss: 5.245, avg. samples / sec: 351.71
Iteration:   3840, Loss function: 4.752, Average Loss: 5.241, avg. samples / sec: 351.56
Iteration:   3860, Loss function: 4.950, Average Loss: 5.236, avg. samples / sec: 351.57
Iteration:   3880, Loss function: 5.140, Average Loss: 5.230, avg. samples / sec: 351.61
Iteration:   3900, Loss function: 5.011, Average Loss: 5.225, avg. samples / sec: 351.58
Iteration:   3920, Loss function: 5.057, Average Loss: 5.219, avg. samples / sec: 351.22
Iteration:   3940, Loss function: 5.050, Average Loss: 5.213, avg. samples / sec: 351.52
Iteration:   3960, Loss function: 5.038, Average Loss: 5.210, avg. samples / sec: 351.65
Iteration:   3980, Loss function: 4.673, Average Loss: 5.205, avg. samples / sec: 351.80
Iteration:   4000, Loss function: 5.100, Average Loss: 5.201, avg. samples / sec: 351.73
Iteration:   4020, Loss function: 4.758, Average Loss: 5.196, avg. samples / sec: 351.60
Iteration:   4040, Loss function: 5.043, Average Loss: 5.192, avg. samples / sec: 351.44
Iteration:   4060, Loss function: 5.184, Average Loss: 5.189, avg. samples / sec: 351.52
Iteration:   4080, Loss function: 5.155, Average Loss: 5.184, avg. samples / sec: 351.55
Iteration:   4100, Loss function: 5.040, Average Loss: 5.181, avg. samples / sec: 351.24
:::MLLOG {"namespace": "", "time_ms": 1639760219676, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760219677, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.067, Average Loss: 5.177, avg. samples / sec: 351.24
Iteration:   4140, Loss function: 5.102, Average Loss: 5.172, avg. samples / sec: 351.30
Iteration:   4160, Loss function: 4.958, Average Loss: 5.166, avg. samples / sec: 350.89
Iteration:   4180, Loss function: 4.903, Average Loss: 5.160, avg. samples / sec: 350.97
Iteration:   4200, Loss function: 5.032, Average Loss: 5.156, avg. samples / sec: 351.53
Iteration:   4220, Loss function: 4.915, Average Loss: 5.151, avg. samples / sec: 351.26
Iteration:   4240, Loss function: 4.804, Average Loss: 5.146, avg. samples / sec: 351.15
Iteration:   4260, Loss function: 5.088, Average Loss: 5.141, avg. samples / sec: 351.47
Iteration:   4280, Loss function: 5.047, Average Loss: 5.135, avg. samples / sec: 351.68
Iteration:   4300, Loss function: 4.824, Average Loss: 5.129, avg. samples / sec: 351.56
Iteration:   4320, Loss function: 4.722, Average Loss: 5.125, avg. samples / sec: 351.55
Iteration:   4340, Loss function: 4.640, Average Loss: 5.119, avg. samples / sec: 351.41
Iteration:   4360, Loss function: 4.967, Average Loss: 5.115, avg. samples / sec: 351.47
Iteration:   4380, Loss function: 5.019, Average Loss: 5.111, avg. samples / sec: 351.53
Iteration:   4400, Loss function: 4.867, Average Loss: 5.107, avg. samples / sec: 351.46
Iteration:   4420, Loss function: 4.767, Average Loss: 5.102, avg. samples / sec: 351.53
Iteration:   4440, Loss function: 4.745, Average Loss: 5.097, avg. samples / sec: 352.05
Iteration:   4460, Loss function: 4.960, Average Loss: 5.093, avg. samples / sec: 351.75
Iteration:   4480, Loss function: 5.126, Average Loss: 5.090, avg. samples / sec: 351.17
Iteration:   4500, Loss function: 4.925, Average Loss: 5.087, avg. samples / sec: 351.03
Iteration:   4520, Loss function: 4.683, Average Loss: 5.082, avg. samples / sec: 350.89
Iteration:   4540, Loss function: 4.921, Average Loss: 5.078, avg. samples / sec: 350.85
Iteration:   4560, Loss function: 4.681, Average Loss: 5.075, avg. samples / sec: 350.78
Iteration:   4580, Loss function: 4.763, Average Loss: 5.072, avg. samples / sec: 350.78
Iteration:   4600, Loss function: 4.857, Average Loss: 5.068, avg. samples / sec: 351.41
Iteration:   4620, Loss function: 4.787, Average Loss: 5.065, avg. samples / sec: 351.55
Iteration:   4640, Loss function: 4.761, Average Loss: 5.061, avg. samples / sec: 351.41
Iteration:   4660, Loss function: 4.661, Average Loss: 5.057, avg. samples / sec: 351.39
Iteration:   4680, Loss function: 5.264, Average Loss: 5.053, avg. samples / sec: 351.62
Iteration:   4700, Loss function: 4.748, Average Loss: 5.049, avg. samples / sec: 351.75
Iteration:   4720, Loss function: 4.725, Average Loss: 5.045, avg. samples / sec: 351.55
Iteration:   4740, Loss function: 4.772, Average Loss: 5.041, avg. samples / sec: 351.56
Iteration:   4760, Loss function: 4.721, Average Loss: 5.038, avg. samples / sec: 351.51
Iteration:   4780, Loss function: 5.012, Average Loss: 5.035, avg. samples / sec: 351.33
Iteration:   4800, Loss function: 4.997, Average Loss: 5.033, avg. samples / sec: 351.41
Iteration:   4820, Loss function: 4.744, Average Loss: 5.029, avg. samples / sec: 351.52
Iteration:   4840, Loss function: 5.144, Average Loss: 5.025, avg. samples / sec: 351.64
Iteration:   4860, Loss function: 4.634, Average Loss: 5.021, avg. samples / sec: 351.57
Iteration:   4880, Loss function: 5.055, Average Loss: 5.018, avg. samples / sec: 351.64
Iteration:   4900, Loss function: 4.635, Average Loss: 5.015, avg. samples / sec: 351.72
Iteration:   4920, Loss function: 4.849, Average Loss: 5.011, avg. samples / sec: 351.80
Iteration:   4940, Loss function: 4.837, Average Loss: 5.007, avg. samples / sec: 351.48
Iteration:   4960, Loss function: 4.734, Average Loss: 5.004, avg. samples / sec: 351.70
Iteration:   4980, Loss function: 4.731, Average Loss: 5.001, avg. samples / sec: 351.77
Iteration:   5000, Loss function: 4.942, Average Loss: 4.997, avg. samples / sec: 352.10
Iteration:   5020, Loss function: 5.252, Average Loss: 4.993, avg. samples / sec: 351.99
Iteration:   5040, Loss function: 4.826, Average Loss: 4.990, avg. samples / sec: 352.30
Iteration:   5060, Loss function: 4.898, Average Loss: 4.987, avg. samples / sec: 352.07
Iteration:   5080, Loss function: 4.624, Average Loss: 4.983, avg. samples / sec: 351.69
Iteration:   5100, Loss function: 4.741, Average Loss: 4.981, avg. samples / sec: 351.79
Iteration:   5120, Loss function: 4.675, Average Loss: 4.978, avg. samples / sec: 351.79
Iteration:   5140, Loss function: 4.812, Average Loss: 4.974, avg. samples / sec: 351.51
:::MLLOG {"namespace": "", "time_ms": 1639760553411, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.38 s
:::MLLOG {"namespace": "", "time_ms": 1639760586839, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760586884, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760586884, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.60s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.02s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10893
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21934
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09699
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19399
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13914
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20410
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21580
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10893 AP goal: 0.10000
Iteration:   5160, Loss function: 4.920, Average Loss: 4.969, avg. samples / sec: 57.30
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1089321888451204, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592226, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760592503, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639760593
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:03:13 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:48 PM'
START TIMING RUN WAS 2021-12-17 04:32:48 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:03:13 PM'
ENDING TIMING RUN AT 2021-12-17 05:03:13 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-eeb0f073-2f03-6035-72a3-7b1ac76c5a72)
  MIG 2g.10gb     Device  0: (UUID: MIG-2a287403-86da-58db-a494-61ae4221004a)
+ result=1825
RESULT,SINGLE_STAGE_DETECTOR,,1825,nvidia,2021-12-17 04:32:48 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1825,nvidia,2021-12-17 04:32:48 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
