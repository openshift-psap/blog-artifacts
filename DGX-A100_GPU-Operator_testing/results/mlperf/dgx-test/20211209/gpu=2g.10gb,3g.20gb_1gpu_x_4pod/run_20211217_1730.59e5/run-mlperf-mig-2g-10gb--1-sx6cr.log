8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a
+ echo 'Found 1 MIG instances: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758770
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:50 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:50 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-2g-10gb--1-sx6cr to the sync file ...
Fri Dec 17 16:32:50 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758772137, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758772246, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2438585000, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2438585000
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758773745, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758773746, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758773750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758773750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758875186, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758875187, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758876565, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758876565, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758876850, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758876851, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758876852, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.596, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.110, Average Loss: 0.454, avg. samples / sec: 335.96
Iteration:     40, Loss function: 20.828, Average Loss: 0.855, avg. samples / sec: 342.01
Iteration:     60, Loss function: 20.395, Average Loss: 1.245, avg. samples / sec: 345.87
Iteration:     80, Loss function: 20.132, Average Loss: 1.620, avg. samples / sec: 346.44
Iteration:    100, Loss function: 16.422, Average Loss: 1.958, avg. samples / sec: 346.21
Iteration:    120, Loss function: 11.320, Average Loss: 2.180, avg. samples / sec: 320.05
Iteration:    140, Loss function: 9.613, Average Loss: 2.336, avg. samples / sec: 347.44
Iteration:    160, Loss function: 8.972, Average Loss: 2.475, avg. samples / sec: 346.95
Iteration:    180, Loss function: 9.007, Average Loss: 2.603, avg. samples / sec: 349.49
Iteration:    200, Loss function: 8.763, Average Loss: 2.727, avg. samples / sec: 347.51
Iteration:    220, Loss function: 8.776, Average Loss: 2.850, avg. samples / sec: 348.68
Iteration:    240, Loss function: 8.688, Average Loss: 2.972, avg. samples / sec: 350.02
Iteration:    260, Loss function: 8.910, Average Loss: 3.084, avg. samples / sec: 349.38
Iteration:    280, Loss function: 8.423, Average Loss: 3.193, avg. samples / sec: 349.97
Iteration:    300, Loss function: 8.428, Average Loss: 3.297, avg. samples / sec: 338.55
Iteration:    320, Loss function: 8.405, Average Loss: 3.398, avg. samples / sec: 349.04
Iteration:    340, Loss function: 8.256, Average Loss: 3.495, avg. samples / sec: 350.79
Iteration:    360, Loss function: 8.070, Average Loss: 3.588, avg. samples / sec: 350.54
Iteration:    380, Loss function: 8.188, Average Loss: 3.679, avg. samples / sec: 350.43
Iteration:    400, Loss function: 8.039, Average Loss: 3.766, avg. samples / sec: 350.21
Iteration:    420, Loss function: 7.798, Average Loss: 3.849, avg. samples / sec: 350.42
Iteration:    440, Loss function: 7.760, Average Loss: 3.927, avg. samples / sec: 350.42
Iteration:    460, Loss function: 7.952, Average Loss: 4.003, avg. samples / sec: 349.96
Iteration:    480, Loss function: 7.492, Average Loss: 4.079, avg. samples / sec: 350.36
Iteration:    500, Loss function: 7.612, Average Loss: 4.149, avg. samples / sec: 350.11
Iteration:    520, Loss function: 7.645, Average Loss: 4.218, avg. samples / sec: 350.28
Iteration:    540, Loss function: 7.523, Average Loss: 4.284, avg. samples / sec: 350.71
Iteration:    560, Loss function: 7.204, Average Loss: 4.346, avg. samples / sec: 350.01
Iteration:    580, Loss function: 7.107, Average Loss: 4.406, avg. samples / sec: 350.97
Iteration:    600, Loss function: 7.544, Average Loss: 4.465, avg. samples / sec: 350.40
Iteration:    620, Loss function: 7.033, Average Loss: 4.520, avg. samples / sec: 350.32
Iteration:    640, Loss function: 6.900, Average Loss: 4.574, avg. samples / sec: 350.72
Iteration:    660, Loss function: 7.033, Average Loss: 4.626, avg. samples / sec: 349.97
Iteration:    680, Loss function: 7.308, Average Loss: 4.677, avg. samples / sec: 351.08
Iteration:    700, Loss function: 6.864, Average Loss: 4.725, avg. samples / sec: 350.67
Iteration:    720, Loss function: 7.107, Average Loss: 4.774, avg. samples / sec: 350.85
Iteration:    740, Loss function: 6.874, Average Loss: 4.819, avg. samples / sec: 350.95
Iteration:    760, Loss function: 6.987, Average Loss: 4.864, avg. samples / sec: 350.79
Iteration:    780, Loss function: 6.905, Average Loss: 4.906, avg. samples / sec: 350.65
Iteration:    800, Loss function: 7.179, Average Loss: 4.945, avg. samples / sec: 350.99
Iteration:    820, Loss function: 7.001, Average Loss: 4.983, avg. samples / sec: 349.76
Iteration:    840, Loss function: 6.817, Average Loss: 5.020, avg. samples / sec: 349.87
Iteration:    860, Loss function: 6.919, Average Loss: 5.054, avg. samples / sec: 350.25
Iteration:    880, Loss function: 6.759, Average Loss: 5.087, avg. samples / sec: 349.56
Iteration:    900, Loss function: 6.992, Average Loss: 5.118, avg. samples / sec: 350.10
Iteration:    920, Loss function: 6.540, Average Loss: 5.148, avg. samples / sec: 350.82
Iteration:    940, Loss function: 6.831, Average Loss: 5.177, avg. samples / sec: 350.75
Iteration:    960, Loss function: 6.396, Average Loss: 5.205, avg. samples / sec: 350.60
Iteration:    980, Loss function: 6.531, Average Loss: 5.231, avg. samples / sec: 350.61
Iteration:   1000, Loss function: 6.579, Average Loss: 5.257, avg. samples / sec: 350.79
Iteration:   1020, Loss function: 6.361, Average Loss: 5.282, avg. samples / sec: 350.26
:::MLLOG {"namespace": "", "time_ms": 1639759213205, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759213206, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.483, Average Loss: 5.305, avg. samples / sec: 350.64
Iteration:   1060, Loss function: 6.373, Average Loss: 5.328, avg. samples / sec: 350.70
Iteration:   1080, Loss function: 6.253, Average Loss: 5.349, avg. samples / sec: 350.77
Iteration:   1100, Loss function: 6.267, Average Loss: 5.368, avg. samples / sec: 350.31
Iteration:   1120, Loss function: 6.164, Average Loss: 5.387, avg. samples / sec: 350.51
Iteration:   1140, Loss function: 6.457, Average Loss: 5.405, avg. samples / sec: 350.74
Iteration:   1160, Loss function: 6.074, Average Loss: 5.422, avg. samples / sec: 350.98
Iteration:   1180, Loss function: 6.154, Average Loss: 5.438, avg. samples / sec: 350.90
Iteration:   1200, Loss function: 6.282, Average Loss: 5.453, avg. samples / sec: 350.68
Iteration:   1220, Loss function: 6.220, Average Loss: 5.468, avg. samples / sec: 350.88
Iteration:   1240, Loss function: 6.029, Average Loss: 5.480, avg. samples / sec: 350.58
Iteration:   1260, Loss function: 6.009, Average Loss: 5.492, avg. samples / sec: 350.63
Iteration:   1280, Loss function: 5.933, Average Loss: 5.504, avg. samples / sec: 350.36
Iteration:   1300, Loss function: 6.269, Average Loss: 5.517, avg. samples / sec: 350.62
Iteration:   1320, Loss function: 6.241, Average Loss: 5.529, avg. samples / sec: 350.35
Iteration:   1340, Loss function: 5.827, Average Loss: 5.538, avg. samples / sec: 349.80
Iteration:   1360, Loss function: 6.054, Average Loss: 5.549, avg. samples / sec: 350.39
Iteration:   1380, Loss function: 6.192, Average Loss: 5.559, avg. samples / sec: 350.20
Iteration:   1400, Loss function: 6.116, Average Loss: 5.567, avg. samples / sec: 350.38
Iteration:   1420, Loss function: 5.963, Average Loss: 5.574, avg. samples / sec: 350.08
Iteration:   1440, Loss function: 6.360, Average Loss: 5.582, avg. samples / sec: 350.52
Iteration:   1460, Loss function: 6.016, Average Loss: 5.590, avg. samples / sec: 350.78
Iteration:   1480, Loss function: 5.918, Average Loss: 5.598, avg. samples / sec: 350.86
Iteration:   1500, Loss function: 6.006, Average Loss: 5.605, avg. samples / sec: 351.09
Iteration:   1520, Loss function: 5.944, Average Loss: 5.611, avg. samples / sec: 350.38
Iteration:   1540, Loss function: 6.150, Average Loss: 5.615, avg. samples / sec: 350.20
Iteration:   1560, Loss function: 5.679, Average Loss: 5.619, avg. samples / sec: 350.56
Iteration:   1580, Loss function: 5.434, Average Loss: 5.624, avg. samples / sec: 350.57
Iteration:   1600, Loss function: 6.119, Average Loss: 5.630, avg. samples / sec: 350.57
Iteration:   1620, Loss function: 5.854, Average Loss: 5.634, avg. samples / sec: 350.79
Iteration:   1640, Loss function: 6.149, Average Loss: 5.636, avg. samples / sec: 350.98
Iteration:   1660, Loss function: 5.931, Average Loss: 5.640, avg. samples / sec: 350.79
Iteration:   1680, Loss function: 5.759, Average Loss: 5.644, avg. samples / sec: 351.06
Iteration:   1700, Loss function: 5.470, Average Loss: 5.647, avg. samples / sec: 350.87
Iteration:   1720, Loss function: 5.672, Average Loss: 5.650, avg. samples / sec: 350.99
Iteration:   1740, Loss function: 5.807, Average Loss: 5.652, avg. samples / sec: 350.58
Iteration:   1760, Loss function: 5.586, Average Loss: 5.654, avg. samples / sec: 350.51
Iteration:   1780, Loss function: 5.726, Average Loss: 5.654, avg. samples / sec: 350.78
Iteration:   1800, Loss function: 5.651, Average Loss: 5.656, avg. samples / sec: 350.59
Iteration:   1820, Loss function: 5.912, Average Loss: 5.657, avg. samples / sec: 350.31
Iteration:   1840, Loss function: 6.000, Average Loss: 5.657, avg. samples / sec: 350.03
Iteration:   1860, Loss function: 5.815, Average Loss: 5.657, avg. samples / sec: 350.20
Iteration:   1880, Loss function: 5.938, Average Loss: 5.658, avg. samples / sec: 350.19
Iteration:   1900, Loss function: 5.820, Average Loss: 5.659, avg. samples / sec: 350.48
Iteration:   1920, Loss function: 5.884, Average Loss: 5.659, avg. samples / sec: 350.53
Iteration:   1940, Loss function: 5.901, Average Loss: 5.658, avg. samples / sec: 350.90
Iteration:   1960, Loss function: 5.572, Average Loss: 5.657, avg. samples / sec: 350.69
Iteration:   1980, Loss function: 5.896, Average Loss: 5.656, avg. samples / sec: 350.76
Iteration:   2000, Loss function: 5.581, Average Loss: 5.656, avg. samples / sec: 350.50
Iteration:   2020, Loss function: 5.591, Average Loss: 5.653, avg. samples / sec: 351.17
Iteration:   2040, Loss function: 5.693, Average Loss: 5.653, avg. samples / sec: 350.90
:::MLLOG {"namespace": "", "time_ms": 1639759547792, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759547793, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.412, Average Loss: 5.651, avg. samples / sec: 351.02
Iteration:   2080, Loss function: 5.193, Average Loss: 5.649, avg. samples / sec: 350.93
Iteration:   2100, Loss function: 5.578, Average Loss: 5.647, avg. samples / sec: 350.83
Iteration:   2120, Loss function: 5.151, Average Loss: 5.643, avg. samples / sec: 350.63
Iteration:   2140, Loss function: 5.452, Average Loss: 5.639, avg. samples / sec: 350.50
Iteration:   2160, Loss function: 5.232, Average Loss: 5.637, avg. samples / sec: 350.48
Iteration:   2180, Loss function: 5.460, Average Loss: 5.634, avg. samples / sec: 350.63
Iteration:   2200, Loss function: 5.445, Average Loss: 5.630, avg. samples / sec: 350.55
Iteration:   2220, Loss function: 5.502, Average Loss: 5.628, avg. samples / sec: 350.25
Iteration:   2240, Loss function: 5.568, Average Loss: 5.626, avg. samples / sec: 350.63
Iteration:   2260, Loss function: 5.250, Average Loss: 5.622, avg. samples / sec: 350.60
Iteration:   2280, Loss function: 5.291, Average Loss: 5.619, avg. samples / sec: 350.39
Iteration:   2300, Loss function: 5.308, Average Loss: 5.616, avg. samples / sec: 350.07
Iteration:   2320, Loss function: 5.301, Average Loss: 5.613, avg. samples / sec: 350.19
Iteration:   2340, Loss function: 5.623, Average Loss: 5.610, avg. samples / sec: 350.12
Iteration:   2360, Loss function: 5.290, Average Loss: 5.606, avg. samples / sec: 350.53
Iteration:   2380, Loss function: 5.399, Average Loss: 5.603, avg. samples / sec: 350.59
Iteration:   2400, Loss function: 5.601, Average Loss: 5.599, avg. samples / sec: 351.10
Iteration:   2420, Loss function: 5.519, Average Loss: 5.595, avg. samples / sec: 350.72
Iteration:   2440, Loss function: 5.559, Average Loss: 5.592, avg. samples / sec: 351.03
Iteration:   2460, Loss function: 5.223, Average Loss: 5.588, avg. samples / sec: 351.14
Iteration:   2480, Loss function: 5.357, Average Loss: 5.584, avg. samples / sec: 351.06
Iteration:   2500, Loss function: 5.381, Average Loss: 5.579, avg. samples / sec: 350.83
Iteration:   2520, Loss function: 5.366, Average Loss: 5.573, avg. samples / sec: 350.81
Iteration:   2540, Loss function: 5.486, Average Loss: 5.570, avg. samples / sec: 350.97
Iteration:   2560, Loss function: 5.346, Average Loss: 5.566, avg. samples / sec: 350.72
Iteration:   2580, Loss function: 5.318, Average Loss: 5.563, avg. samples / sec: 350.65
Iteration:   2600, Loss function: 5.552, Average Loss: 5.560, avg. samples / sec: 350.60
Iteration:   2620, Loss function: 5.313, Average Loss: 5.555, avg. samples / sec: 350.50
Iteration:   2640, Loss function: 5.262, Average Loss: 5.551, avg. samples / sec: 350.61
Iteration:   2660, Loss function: 5.177, Average Loss: 5.547, avg. samples / sec: 350.80
Iteration:   2680, Loss function: 5.166, Average Loss: 5.543, avg. samples / sec: 350.99
Iteration:   2700, Loss function: 5.006, Average Loss: 5.538, avg. samples / sec: 350.83
Iteration:   2720, Loss function: 5.244, Average Loss: 5.534, avg. samples / sec: 350.78
Iteration:   2740, Loss function: 4.910, Average Loss: 5.529, avg. samples / sec: 350.78
Iteration:   2760, Loss function: 4.878, Average Loss: 5.523, avg. samples / sec: 350.89
Iteration:   2780, Loss function: 5.371, Average Loss: 5.519, avg. samples / sec: 350.87
Iteration:   2800, Loss function: 5.289, Average Loss: 5.514, avg. samples / sec: 350.91
Iteration:   2820, Loss function: 5.364, Average Loss: 5.509, avg. samples / sec: 350.70
Iteration:   2840, Loss function: 5.194, Average Loss: 5.505, avg. samples / sec: 350.36
Iteration:   2860, Loss function: 5.135, Average Loss: 5.500, avg. samples / sec: 350.97
Iteration:   2880, Loss function: 5.369, Average Loss: 5.495, avg. samples / sec: 350.82
Iteration:   2900, Loss function: 5.227, Average Loss: 5.491, avg. samples / sec: 351.04
Iteration:   2920, Loss function: 5.334, Average Loss: 5.485, avg. samples / sec: 351.12
Iteration:   2940, Loss function: 5.088, Average Loss: 5.481, avg. samples / sec: 350.50
Iteration:   2960, Loss function: 5.414, Average Loss: 5.477, avg. samples / sec: 350.62
Iteration:   2980, Loss function: 5.208, Average Loss: 5.474, avg. samples / sec: 350.56
Iteration:   3000, Loss function: 5.433, Average Loss: 5.468, avg. samples / sec: 350.63
Iteration:   3020, Loss function: 5.186, Average Loss: 5.461, avg. samples / sec: 350.46
Iteration:   3040, Loss function: 5.117, Average Loss: 5.457, avg. samples / sec: 350.56
Iteration:   3060, Loss function: 4.901, Average Loss: 5.451, avg. samples / sec: 350.35
Iteration:   3080, Loss function: 4.834, Average Loss: 5.446, avg. samples / sec: 350.13
:::MLLOG {"namespace": "", "time_ms": 1639759881989, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759881990, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.316, Average Loss: 5.441, avg. samples / sec: 350.69
Iteration:   3120, Loss function: 4.988, Average Loss: 5.435, avg. samples / sec: 350.55
Iteration:   3140, Loss function: 5.155, Average Loss: 5.430, avg. samples / sec: 350.55
Iteration:   3160, Loss function: 5.391, Average Loss: 5.424, avg. samples / sec: 350.90
Iteration:   3180, Loss function: 5.069, Average Loss: 5.419, avg. samples / sec: 350.31
Iteration:   3200, Loss function: 5.319, Average Loss: 5.413, avg. samples / sec: 350.15
Iteration:   3220, Loss function: 5.181, Average Loss: 5.408, avg. samples / sec: 350.86
Iteration:   3240, Loss function: 5.181, Average Loss: 5.402, avg. samples / sec: 350.78
Iteration:   3260, Loss function: 5.034, Average Loss: 5.396, avg. samples / sec: 350.55
Iteration:   3280, Loss function: 4.877, Average Loss: 5.390, avg. samples / sec: 350.60
Iteration:   3300, Loss function: 4.877, Average Loss: 5.385, avg. samples / sec: 350.64
Iteration:   3320, Loss function: 4.985, Average Loss: 5.380, avg. samples / sec: 351.21
Iteration:   3340, Loss function: 5.077, Average Loss: 5.376, avg. samples / sec: 350.84
Iteration:   3360, Loss function: 5.141, Average Loss: 5.369, avg. samples / sec: 350.74
Iteration:   3380, Loss function: 5.359, Average Loss: 5.363, avg. samples / sec: 350.52
Iteration:   3400, Loss function: 4.887, Average Loss: 5.359, avg. samples / sec: 350.80
Iteration:   3420, Loss function: 5.137, Average Loss: 5.353, avg. samples / sec: 352.28
Iteration:   3440, Loss function: 4.772, Average Loss: 5.348, avg. samples / sec: 352.39
Iteration:   3460, Loss function: 5.218, Average Loss: 5.343, avg. samples / sec: 351.97
Iteration:   3480, Loss function: 5.203, Average Loss: 5.339, avg. samples / sec: 351.57
Iteration:   3500, Loss function: 5.086, Average Loss: 5.335, avg. samples / sec: 351.59
Iteration:   3520, Loss function: 5.015, Average Loss: 5.332, avg. samples / sec: 351.60
Iteration:   3540, Loss function: 5.018, Average Loss: 5.327, avg. samples / sec: 351.62
Iteration:   3560, Loss function: 5.025, Average Loss: 5.323, avg. samples / sec: 351.75
Iteration:   3580, Loss function: 5.024, Average Loss: 5.319, avg. samples / sec: 351.90
Iteration:   3600, Loss function: 5.113, Average Loss: 5.314, avg. samples / sec: 351.56
Iteration:   3620, Loss function: 4.768, Average Loss: 5.309, avg. samples / sec: 351.65
Iteration:   3640, Loss function: 4.972, Average Loss: 5.305, avg. samples / sec: 351.73
Iteration:   3660, Loss function: 5.218, Average Loss: 5.300, avg. samples / sec: 351.49
Iteration:   3680, Loss function: 5.224, Average Loss: 5.295, avg. samples / sec: 351.27
Iteration:   3700, Loss function: 4.957, Average Loss: 5.290, avg. samples / sec: 351.39
Iteration:   3720, Loss function: 4.908, Average Loss: 5.284, avg. samples / sec: 351.33
Iteration:   3740, Loss function: 5.193, Average Loss: 5.279, avg. samples / sec: 351.47
Iteration:   3760, Loss function: 5.152, Average Loss: 5.275, avg. samples / sec: 351.54
Iteration:   3780, Loss function: 4.790, Average Loss: 5.270, avg. samples / sec: 351.50
Iteration:   3800, Loss function: 4.982, Average Loss: 5.267, avg. samples / sec: 351.60
Iteration:   3820, Loss function: 5.372, Average Loss: 5.262, avg. samples / sec: 351.64
Iteration:   3840, Loss function: 4.795, Average Loss: 5.258, avg. samples / sec: 351.46
Iteration:   3860, Loss function: 4.908, Average Loss: 5.252, avg. samples / sec: 351.54
Iteration:   3880, Loss function: 4.994, Average Loss: 5.246, avg. samples / sec: 351.66
Iteration:   3900, Loss function: 5.036, Average Loss: 5.241, avg. samples / sec: 351.53
Iteration:   3920, Loss function: 5.116, Average Loss: 5.236, avg. samples / sec: 351.65
Iteration:   3940, Loss function: 4.900, Average Loss: 5.231, avg. samples / sec: 351.63
Iteration:   3960, Loss function: 4.790, Average Loss: 5.227, avg. samples / sec: 351.29
Iteration:   3980, Loss function: 4.967, Average Loss: 5.222, avg. samples / sec: 351.58
Iteration:   4000, Loss function: 5.273, Average Loss: 5.218, avg. samples / sec: 351.67
Iteration:   4020, Loss function: 4.895, Average Loss: 5.213, avg. samples / sec: 351.69
Iteration:   4040, Loss function: 5.008, Average Loss: 5.210, avg. samples / sec: 351.55
Iteration:   4060, Loss function: 5.229, Average Loss: 5.205, avg. samples / sec: 351.03
Iteration:   4080, Loss function: 4.954, Average Loss: 5.200, avg. samples / sec: 350.87
Iteration:   4100, Loss function: 5.006, Average Loss: 5.197, avg. samples / sec: 350.78
:::MLLOG {"namespace": "", "time_ms": 1639760215929, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760215929, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.063, Average Loss: 5.193, avg. samples / sec: 351.07
Iteration:   4140, Loss function: 4.738, Average Loss: 5.187, avg. samples / sec: 351.32
Iteration:   4160, Loss function: 4.883, Average Loss: 5.181, avg. samples / sec: 351.27
Iteration:   4180, Loss function: 5.021, Average Loss: 5.174, avg. samples / sec: 351.45
Iteration:   4200, Loss function: 4.929, Average Loss: 5.170, avg. samples / sec: 351.38
Iteration:   4220, Loss function: 4.840, Average Loss: 5.165, avg. samples / sec: 351.20
Iteration:   4240, Loss function: 4.998, Average Loss: 5.160, avg. samples / sec: 350.79
Iteration:   4260, Loss function: 4.974, Average Loss: 5.155, avg. samples / sec: 351.44
Iteration:   4280, Loss function: 4.935, Average Loss: 5.149, avg. samples / sec: 351.64
Iteration:   4300, Loss function: 4.706, Average Loss: 5.143, avg. samples / sec: 351.81
Iteration:   4320, Loss function: 5.088, Average Loss: 5.139, avg. samples / sec: 351.72
Iteration:   4340, Loss function: 4.782, Average Loss: 5.133, avg. samples / sec: 351.53
Iteration:   4360, Loss function: 4.898, Average Loss: 5.129, avg. samples / sec: 351.64
Iteration:   4380, Loss function: 5.129, Average Loss: 5.124, avg. samples / sec: 351.73
Iteration:   4400, Loss function: 4.876, Average Loss: 5.119, avg. samples / sec: 351.73
Iteration:   4420, Loss function: 4.833, Average Loss: 5.115, avg. samples / sec: 351.61
Iteration:   4440, Loss function: 4.724, Average Loss: 5.109, avg. samples / sec: 351.90
Iteration:   4460, Loss function: 5.137, Average Loss: 5.105, avg. samples / sec: 351.81
Iteration:   4480, Loss function: 5.047, Average Loss: 5.102, avg. samples / sec: 351.37
Iteration:   4500, Loss function: 4.986, Average Loss: 5.100, avg. samples / sec: 351.16
Iteration:   4520, Loss function: 4.707, Average Loss: 5.095, avg. samples / sec: 351.60
Iteration:   4540, Loss function: 5.283, Average Loss: 5.090, avg. samples / sec: 352.01
Iteration:   4560, Loss function: 4.696, Average Loss: 5.087, avg. samples / sec: 351.54
Iteration:   4580, Loss function: 4.631, Average Loss: 5.084, avg. samples / sec: 351.79
Iteration:   4600, Loss function: 4.659, Average Loss: 5.080, avg. samples / sec: 351.50
Iteration:   4620, Loss function: 4.672, Average Loss: 5.075, avg. samples / sec: 351.63
Iteration:   4640, Loss function: 4.696, Average Loss: 5.070, avg. samples / sec: 351.68
Iteration:   4660, Loss function: 4.592, Average Loss: 5.066, avg. samples / sec: 351.65
Iteration:   4680, Loss function: 5.299, Average Loss: 5.062, avg. samples / sec: 351.61
Iteration:   4700, Loss function: 5.059, Average Loss: 5.058, avg. samples / sec: 351.46
Iteration:   4720, Loss function: 4.633, Average Loss: 5.053, avg. samples / sec: 351.27
Iteration:   4740, Loss function: 4.769, Average Loss: 5.049, avg. samples / sec: 351.49
Iteration:   4760, Loss function: 4.645, Average Loss: 5.046, avg. samples / sec: 351.35
Iteration:   4780, Loss function: 5.114, Average Loss: 5.043, avg. samples / sec: 350.90
Iteration:   4800, Loss function: 4.886, Average Loss: 5.039, avg. samples / sec: 351.37
Iteration:   4820, Loss function: 4.626, Average Loss: 5.036, avg. samples / sec: 351.53
Iteration:   4840, Loss function: 5.151, Average Loss: 5.032, avg. samples / sec: 351.49
Iteration:   4860, Loss function: 4.668, Average Loss: 5.029, avg. samples / sec: 351.37
Iteration:   4880, Loss function: 5.190, Average Loss: 5.025, avg. samples / sec: 351.19
Iteration:   4900, Loss function: 4.521, Average Loss: 5.021, avg. samples / sec: 351.25
Iteration:   4920, Loss function: 4.759, Average Loss: 5.017, avg. samples / sec: 351.40
Iteration:   4940, Loss function: 4.897, Average Loss: 5.013, avg. samples / sec: 351.30
Iteration:   4960, Loss function: 4.625, Average Loss: 5.009, avg. samples / sec: 351.22
Iteration:   4980, Loss function: 4.629, Average Loss: 5.005, avg. samples / sec: 351.32
Iteration:   5000, Loss function: 4.679, Average Loss: 5.002, avg. samples / sec: 351.01
Iteration:   5020, Loss function: 5.181, Average Loss: 4.998, avg. samples / sec: 351.39
Iteration:   5040, Loss function: 4.738, Average Loss: 4.996, avg. samples / sec: 350.97
Iteration:   5060, Loss function: 4.793, Average Loss: 4.993, avg. samples / sec: 350.76
Iteration:   5080, Loss function: 4.759, Average Loss: 4.989, avg. samples / sec: 351.18
Iteration:   5100, Loss function: 4.685, Average Loss: 4.986, avg. samples / sec: 351.47
Iteration:   5120, Loss function: 4.655, Average Loss: 4.983, avg. samples / sec: 351.46
Iteration:   5140, Loss function: 4.979, Average Loss: 4.979, avg. samples / sec: 352.09
:::MLLOG {"namespace": "", "time_ms": 1639760549714, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.45 s
:::MLLOG {"namespace": "", "time_ms": 1639760583212, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760583252, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760583252, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.63s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11190
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22205
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10358
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19658
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20870
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22082
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22082
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11190 AP goal: 0.10000
Iteration:   5160, Loss function: 4.822, Average Loss: 4.974, avg. samples / sec: 57.19
:::MLLOG {"namespace": "", "time_ms": 1639760588608, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588608, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11189761612462962, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588609, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588890, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:03:10 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:03:10 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758772137, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758772246, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2438585000, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2438585000
:::MLLOG {"namespace": "", "time_ms": 1639758773745, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758773746, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758773749, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758773750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758773750, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758875186, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758875187, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758876565, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758876565, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758876850, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758876851, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758876852, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.596, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.110, Average Loss: 0.454, avg. samples / sec: 335.96
Iteration:     40, Loss function: 20.828, Average Loss: 0.855, avg. samples / sec: 342.01
Iteration:     60, Loss function: 20.395, Average Loss: 1.245, avg. samples / sec: 345.87
Iteration:     80, Loss function: 20.132, Average Loss: 1.620, avg. samples / sec: 346.44
Iteration:    100, Loss function: 16.422, Average Loss: 1.958, avg. samples / sec: 346.21
Iteration:    120, Loss function: 11.320, Average Loss: 2.180, avg. samples / sec: 320.05
Iteration:    140, Loss function: 9.613, Average Loss: 2.336, avg. samples / sec: 347.44
Iteration:    160, Loss function: 8.972, Average Loss: 2.475, avg. samples / sec: 346.95
Iteration:    180, Loss function: 9.007, Average Loss: 2.603, avg. samples / sec: 349.49
Iteration:    200, Loss function: 8.763, Average Loss: 2.727, avg. samples / sec: 347.51
Iteration:    220, Loss function: 8.776, Average Loss: 2.850, avg. samples / sec: 348.68
Iteration:    240, Loss function: 8.688, Average Loss: 2.972, avg. samples / sec: 350.02
Iteration:    260, Loss function: 8.910, Average Loss: 3.084, avg. samples / sec: 349.38
Iteration:    280, Loss function: 8.423, Average Loss: 3.193, avg. samples / sec: 349.97
Iteration:    300, Loss function: 8.428, Average Loss: 3.297, avg. samples / sec: 338.55
Iteration:    320, Loss function: 8.405, Average Loss: 3.398, avg. samples / sec: 349.04
Iteration:    340, Loss function: 8.256, Average Loss: 3.495, avg. samples / sec: 350.79
Iteration:    360, Loss function: 8.070, Average Loss: 3.588, avg. samples / sec: 350.54
Iteration:    380, Loss function: 8.188, Average Loss: 3.679, avg. samples / sec: 350.43
Iteration:    400, Loss function: 8.039, Average Loss: 3.766, avg. samples / sec: 350.21
Iteration:    420, Loss function: 7.798, Average Loss: 3.849, avg. samples / sec: 350.42
Iteration:    440, Loss function: 7.760, Average Loss: 3.927, avg. samples / sec: 350.42
Iteration:    460, Loss function: 7.952, Average Loss: 4.003, avg. samples / sec: 349.96
Iteration:    480, Loss function: 7.492, Average Loss: 4.079, avg. samples / sec: 350.36
Iteration:    500, Loss function: 7.612, Average Loss: 4.149, avg. samples / sec: 350.11
Iteration:    520, Loss function: 7.645, Average Loss: 4.218, avg. samples / sec: 350.28
Iteration:    540, Loss function: 7.523, Average Loss: 4.284, avg. samples / sec: 350.71
Iteration:    560, Loss function: 7.204, Average Loss: 4.346, avg. samples / sec: 350.01
Iteration:    580, Loss function: 7.107, Average Loss: 4.406, avg. samples / sec: 350.97
Iteration:    600, Loss function: 7.544, Average Loss: 4.465, avg. samples / sec: 350.40
Iteration:    620, Loss function: 7.033, Average Loss: 4.520, avg. samples / sec: 350.32
Iteration:    640, Loss function: 6.900, Average Loss: 4.574, avg. samples / sec: 350.72
Iteration:    660, Loss function: 7.033, Average Loss: 4.626, avg. samples / sec: 349.97
Iteration:    680, Loss function: 7.308, Average Loss: 4.677, avg. samples / sec: 351.08
Iteration:    700, Loss function: 6.864, Average Loss: 4.725, avg. samples / sec: 350.67
Iteration:    720, Loss function: 7.107, Average Loss: 4.774, avg. samples / sec: 350.85
Iteration:    740, Loss function: 6.874, Average Loss: 4.819, avg. samples / sec: 350.95
Iteration:    760, Loss function: 6.987, Average Loss: 4.864, avg. samples / sec: 350.79
Iteration:    780, Loss function: 6.905, Average Loss: 4.906, avg. samples / sec: 350.65
Iteration:    800, Loss function: 7.179, Average Loss: 4.945, avg. samples / sec: 350.99
Iteration:    820, Loss function: 7.001, Average Loss: 4.983, avg. samples / sec: 349.76
Iteration:    840, Loss function: 6.817, Average Loss: 5.020, avg. samples / sec: 349.87
Iteration:    860, Loss function: 6.919, Average Loss: 5.054, avg. samples / sec: 350.25
Iteration:    880, Loss function: 6.759, Average Loss: 5.087, avg. samples / sec: 349.56
Iteration:    900, Loss function: 6.992, Average Loss: 5.118, avg. samples / sec: 350.10
Iteration:    920, Loss function: 6.540, Average Loss: 5.148, avg. samples / sec: 350.82
Iteration:    940, Loss function: 6.831, Average Loss: 5.177, avg. samples / sec: 350.75
Iteration:    960, Loss function: 6.396, Average Loss: 5.205, avg. samples / sec: 350.60
Iteration:    980, Loss function: 6.531, Average Loss: 5.231, avg. samples / sec: 350.61
Iteration:   1000, Loss function: 6.579, Average Loss: 5.257, avg. samples / sec: 350.79
Iteration:   1020, Loss function: 6.361, Average Loss: 5.282, avg. samples / sec: 350.26
:::MLLOG {"namespace": "", "time_ms": 1639759213205, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759213206, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.483, Average Loss: 5.305, avg. samples / sec: 350.64
Iteration:   1060, Loss function: 6.373, Average Loss: 5.328, avg. samples / sec: 350.70
Iteration:   1080, Loss function: 6.253, Average Loss: 5.349, avg. samples / sec: 350.77
Iteration:   1100, Loss function: 6.267, Average Loss: 5.368, avg. samples / sec: 350.31
Iteration:   1120, Loss function: 6.164, Average Loss: 5.387, avg. samples / sec: 350.51
Iteration:   1140, Loss function: 6.457, Average Loss: 5.405, avg. samples / sec: 350.74
Iteration:   1160, Loss function: 6.074, Average Loss: 5.422, avg. samples / sec: 350.98
Iteration:   1180, Loss function: 6.154, Average Loss: 5.438, avg. samples / sec: 350.90
Iteration:   1200, Loss function: 6.282, Average Loss: 5.453, avg. samples / sec: 350.68
Iteration:   1220, Loss function: 6.220, Average Loss: 5.468, avg. samples / sec: 350.88
Iteration:   1240, Loss function: 6.029, Average Loss: 5.480, avg. samples / sec: 350.58
Iteration:   1260, Loss function: 6.009, Average Loss: 5.492, avg. samples / sec: 350.63
Iteration:   1280, Loss function: 5.933, Average Loss: 5.504, avg. samples / sec: 350.36
Iteration:   1300, Loss function: 6.269, Average Loss: 5.517, avg. samples / sec: 350.62
Iteration:   1320, Loss function: 6.241, Average Loss: 5.529, avg. samples / sec: 350.35
Iteration:   1340, Loss function: 5.827, Average Loss: 5.538, avg. samples / sec: 349.80
Iteration:   1360, Loss function: 6.054, Average Loss: 5.549, avg. samples / sec: 350.39
Iteration:   1380, Loss function: 6.192, Average Loss: 5.559, avg. samples / sec: 350.20
Iteration:   1400, Loss function: 6.116, Average Loss: 5.567, avg. samples / sec: 350.38
Iteration:   1420, Loss function: 5.963, Average Loss: 5.574, avg. samples / sec: 350.08
Iteration:   1440, Loss function: 6.360, Average Loss: 5.582, avg. samples / sec: 350.52
Iteration:   1460, Loss function: 6.016, Average Loss: 5.590, avg. samples / sec: 350.78
Iteration:   1480, Loss function: 5.918, Average Loss: 5.598, avg. samples / sec: 350.86
Iteration:   1500, Loss function: 6.006, Average Loss: 5.605, avg. samples / sec: 351.09
Iteration:   1520, Loss function: 5.944, Average Loss: 5.611, avg. samples / sec: 350.38
Iteration:   1540, Loss function: 6.150, Average Loss: 5.615, avg. samples / sec: 350.20
Iteration:   1560, Loss function: 5.679, Average Loss: 5.619, avg. samples / sec: 350.56
Iteration:   1580, Loss function: 5.434, Average Loss: 5.624, avg. samples / sec: 350.57
Iteration:   1600, Loss function: 6.119, Average Loss: 5.630, avg. samples / sec: 350.57
Iteration:   1620, Loss function: 5.854, Average Loss: 5.634, avg. samples / sec: 350.79
Iteration:   1640, Loss function: 6.149, Average Loss: 5.636, avg. samples / sec: 350.98
Iteration:   1660, Loss function: 5.931, Average Loss: 5.640, avg. samples / sec: 350.79
Iteration:   1680, Loss function: 5.759, Average Loss: 5.644, avg. samples / sec: 351.06
Iteration:   1700, Loss function: 5.470, Average Loss: 5.647, avg. samples / sec: 350.87
Iteration:   1720, Loss function: 5.672, Average Loss: 5.650, avg. samples / sec: 350.99
Iteration:   1740, Loss function: 5.807, Average Loss: 5.652, avg. samples / sec: 350.58
Iteration:   1760, Loss function: 5.586, Average Loss: 5.654, avg. samples / sec: 350.51
Iteration:   1780, Loss function: 5.726, Average Loss: 5.654, avg. samples / sec: 350.78
Iteration:   1800, Loss function: 5.651, Average Loss: 5.656, avg. samples / sec: 350.59
Iteration:   1820, Loss function: 5.912, Average Loss: 5.657, avg. samples / sec: 350.31
Iteration:   1840, Loss function: 6.000, Average Loss: 5.657, avg. samples / sec: 350.03
Iteration:   1860, Loss function: 5.815, Average Loss: 5.657, avg. samples / sec: 350.20
Iteration:   1880, Loss function: 5.938, Average Loss: 5.658, avg. samples / sec: 350.19
Iteration:   1900, Loss function: 5.820, Average Loss: 5.659, avg. samples / sec: 350.48
Iteration:   1920, Loss function: 5.884, Average Loss: 5.659, avg. samples / sec: 350.53
Iteration:   1940, Loss function: 5.901, Average Loss: 5.658, avg. samples / sec: 350.90
Iteration:   1960, Loss function: 5.572, Average Loss: 5.657, avg. samples / sec: 350.69
Iteration:   1980, Loss function: 5.896, Average Loss: 5.656, avg. samples / sec: 350.76
Iteration:   2000, Loss function: 5.581, Average Loss: 5.656, avg. samples / sec: 350.50
Iteration:   2020, Loss function: 5.591, Average Loss: 5.653, avg. samples / sec: 351.17
Iteration:   2040, Loss function: 5.693, Average Loss: 5.653, avg. samples / sec: 350.90
:::MLLOG {"namespace": "", "time_ms": 1639759547792, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759547793, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.412, Average Loss: 5.651, avg. samples / sec: 351.02
Iteration:   2080, Loss function: 5.193, Average Loss: 5.649, avg. samples / sec: 350.93
Iteration:   2100, Loss function: 5.578, Average Loss: 5.647, avg. samples / sec: 350.83
Iteration:   2120, Loss function: 5.151, Average Loss: 5.643, avg. samples / sec: 350.63
Iteration:   2140, Loss function: 5.452, Average Loss: 5.639, avg. samples / sec: 350.50
Iteration:   2160, Loss function: 5.232, Average Loss: 5.637, avg. samples / sec: 350.48
Iteration:   2180, Loss function: 5.460, Average Loss: 5.634, avg. samples / sec: 350.63
Iteration:   2200, Loss function: 5.445, Average Loss: 5.630, avg. samples / sec: 350.55
Iteration:   2220, Loss function: 5.502, Average Loss: 5.628, avg. samples / sec: 350.25
Iteration:   2240, Loss function: 5.568, Average Loss: 5.626, avg. samples / sec: 350.63
Iteration:   2260, Loss function: 5.250, Average Loss: 5.622, avg. samples / sec: 350.60
Iteration:   2280, Loss function: 5.291, Average Loss: 5.619, avg. samples / sec: 350.39
Iteration:   2300, Loss function: 5.308, Average Loss: 5.616, avg. samples / sec: 350.07
Iteration:   2320, Loss function: 5.301, Average Loss: 5.613, avg. samples / sec: 350.19
Iteration:   2340, Loss function: 5.623, Average Loss: 5.610, avg. samples / sec: 350.12
Iteration:   2360, Loss function: 5.290, Average Loss: 5.606, avg. samples / sec: 350.53
Iteration:   2380, Loss function: 5.399, Average Loss: 5.603, avg. samples / sec: 350.59
Iteration:   2400, Loss function: 5.601, Average Loss: 5.599, avg. samples / sec: 351.10
Iteration:   2420, Loss function: 5.519, Average Loss: 5.595, avg. samples / sec: 350.72
Iteration:   2440, Loss function: 5.559, Average Loss: 5.592, avg. samples / sec: 351.03
Iteration:   2460, Loss function: 5.223, Average Loss: 5.588, avg. samples / sec: 351.14
Iteration:   2480, Loss function: 5.357, Average Loss: 5.584, avg. samples / sec: 351.06
Iteration:   2500, Loss function: 5.381, Average Loss: 5.579, avg. samples / sec: 350.83
Iteration:   2520, Loss function: 5.366, Average Loss: 5.573, avg. samples / sec: 350.81
Iteration:   2540, Loss function: 5.486, Average Loss: 5.570, avg. samples / sec: 350.97
Iteration:   2560, Loss function: 5.346, Average Loss: 5.566, avg. samples / sec: 350.72
Iteration:   2580, Loss function: 5.318, Average Loss: 5.563, avg. samples / sec: 350.65
Iteration:   2600, Loss function: 5.552, Average Loss: 5.560, avg. samples / sec: 350.60
Iteration:   2620, Loss function: 5.313, Average Loss: 5.555, avg. samples / sec: 350.50
Iteration:   2640, Loss function: 5.262, Average Loss: 5.551, avg. samples / sec: 350.61
Iteration:   2660, Loss function: 5.177, Average Loss: 5.547, avg. samples / sec: 350.80
Iteration:   2680, Loss function: 5.166, Average Loss: 5.543, avg. samples / sec: 350.99
Iteration:   2700, Loss function: 5.006, Average Loss: 5.538, avg. samples / sec: 350.83
Iteration:   2720, Loss function: 5.244, Average Loss: 5.534, avg. samples / sec: 350.78
Iteration:   2740, Loss function: 4.910, Average Loss: 5.529, avg. samples / sec: 350.78
Iteration:   2760, Loss function: 4.878, Average Loss: 5.523, avg. samples / sec: 350.89
Iteration:   2780, Loss function: 5.371, Average Loss: 5.519, avg. samples / sec: 350.87
Iteration:   2800, Loss function: 5.289, Average Loss: 5.514, avg. samples / sec: 350.91
Iteration:   2820, Loss function: 5.364, Average Loss: 5.509, avg. samples / sec: 350.70
Iteration:   2840, Loss function: 5.194, Average Loss: 5.505, avg. samples / sec: 350.36
Iteration:   2860, Loss function: 5.135, Average Loss: 5.500, avg. samples / sec: 350.97
Iteration:   2880, Loss function: 5.369, Average Loss: 5.495, avg. samples / sec: 350.82
Iteration:   2900, Loss function: 5.227, Average Loss: 5.491, avg. samples / sec: 351.04
Iteration:   2920, Loss function: 5.334, Average Loss: 5.485, avg. samples / sec: 351.12
Iteration:   2940, Loss function: 5.088, Average Loss: 5.481, avg. samples / sec: 350.50
Iteration:   2960, Loss function: 5.414, Average Loss: 5.477, avg. samples / sec: 350.62
Iteration:   2980, Loss function: 5.208, Average Loss: 5.474, avg. samples / sec: 350.56
Iteration:   3000, Loss function: 5.433, Average Loss: 5.468, avg. samples / sec: 350.63
Iteration:   3020, Loss function: 5.186, Average Loss: 5.461, avg. samples / sec: 350.46
Iteration:   3040, Loss function: 5.117, Average Loss: 5.457, avg. samples / sec: 350.56
Iteration:   3060, Loss function: 4.901, Average Loss: 5.451, avg. samples / sec: 350.35
Iteration:   3080, Loss function: 4.834, Average Loss: 5.446, avg. samples / sec: 350.13
:::MLLOG {"namespace": "", "time_ms": 1639759881989, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759881990, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.316, Average Loss: 5.441, avg. samples / sec: 350.69
Iteration:   3120, Loss function: 4.988, Average Loss: 5.435, avg. samples / sec: 350.55
Iteration:   3140, Loss function: 5.155, Average Loss: 5.430, avg. samples / sec: 350.55
Iteration:   3160, Loss function: 5.391, Average Loss: 5.424, avg. samples / sec: 350.90
Iteration:   3180, Loss function: 5.069, Average Loss: 5.419, avg. samples / sec: 350.31
Iteration:   3200, Loss function: 5.319, Average Loss: 5.413, avg. samples / sec: 350.15
Iteration:   3220, Loss function: 5.181, Average Loss: 5.408, avg. samples / sec: 350.86
Iteration:   3240, Loss function: 5.181, Average Loss: 5.402, avg. samples / sec: 350.78
Iteration:   3260, Loss function: 5.034, Average Loss: 5.396, avg. samples / sec: 350.55
Iteration:   3280, Loss function: 4.877, Average Loss: 5.390, avg. samples / sec: 350.60
Iteration:   3300, Loss function: 4.877, Average Loss: 5.385, avg. samples / sec: 350.64
Iteration:   3320, Loss function: 4.985, Average Loss: 5.380, avg. samples / sec: 351.21
Iteration:   3340, Loss function: 5.077, Average Loss: 5.376, avg. samples / sec: 350.84
Iteration:   3360, Loss function: 5.141, Average Loss: 5.369, avg. samples / sec: 350.74
Iteration:   3380, Loss function: 5.359, Average Loss: 5.363, avg. samples / sec: 350.52
Iteration:   3400, Loss function: 4.887, Average Loss: 5.359, avg. samples / sec: 350.80
Iteration:   3420, Loss function: 5.137, Average Loss: 5.353, avg. samples / sec: 352.28
Iteration:   3440, Loss function: 4.772, Average Loss: 5.348, avg. samples / sec: 352.39
Iteration:   3460, Loss function: 5.218, Average Loss: 5.343, avg. samples / sec: 351.97
Iteration:   3480, Loss function: 5.203, Average Loss: 5.339, avg. samples / sec: 351.57
Iteration:   3500, Loss function: 5.086, Average Loss: 5.335, avg. samples / sec: 351.59
Iteration:   3520, Loss function: 5.015, Average Loss: 5.332, avg. samples / sec: 351.60
Iteration:   3540, Loss function: 5.018, Average Loss: 5.327, avg. samples / sec: 351.62
Iteration:   3560, Loss function: 5.025, Average Loss: 5.323, avg. samples / sec: 351.75
Iteration:   3580, Loss function: 5.024, Average Loss: 5.319, avg. samples / sec: 351.90
Iteration:   3600, Loss function: 5.113, Average Loss: 5.314, avg. samples / sec: 351.56
Iteration:   3620, Loss function: 4.768, Average Loss: 5.309, avg. samples / sec: 351.65
Iteration:   3640, Loss function: 4.972, Average Loss: 5.305, avg. samples / sec: 351.73
Iteration:   3660, Loss function: 5.218, Average Loss: 5.300, avg. samples / sec: 351.49
Iteration:   3680, Loss function: 5.224, Average Loss: 5.295, avg. samples / sec: 351.27
Iteration:   3700, Loss function: 4.957, Average Loss: 5.290, avg. samples / sec: 351.39
Iteration:   3720, Loss function: 4.908, Average Loss: 5.284, avg. samples / sec: 351.33
Iteration:   3740, Loss function: 5.193, Average Loss: 5.279, avg. samples / sec: 351.47
Iteration:   3760, Loss function: 5.152, Average Loss: 5.275, avg. samples / sec: 351.54
Iteration:   3780, Loss function: 4.790, Average Loss: 5.270, avg. samples / sec: 351.50
Iteration:   3800, Loss function: 4.982, Average Loss: 5.267, avg. samples / sec: 351.60
Iteration:   3820, Loss function: 5.372, Average Loss: 5.262, avg. samples / sec: 351.64
Iteration:   3840, Loss function: 4.795, Average Loss: 5.258, avg. samples / sec: 351.46
Iteration:   3860, Loss function: 4.908, Average Loss: 5.252, avg. samples / sec: 351.54
Iteration:   3880, Loss function: 4.994, Average Loss: 5.246, avg. samples / sec: 351.66
Iteration:   3900, Loss function: 5.036, Average Loss: 5.241, avg. samples / sec: 351.53
Iteration:   3920, Loss function: 5.116, Average Loss: 5.236, avg. samples / sec: 351.65
Iteration:   3940, Loss function: 4.900, Average Loss: 5.231, avg. samples / sec: 351.63
Iteration:   3960, Loss function: 4.790, Average Loss: 5.227, avg. samples / sec: 351.29
Iteration:   3980, Loss function: 4.967, Average Loss: 5.222, avg. samples / sec: 351.58
Iteration:   4000, Loss function: 5.273, Average Loss: 5.218, avg. samples / sec: 351.67
Iteration:   4020, Loss function: 4.895, Average Loss: 5.213, avg. samples / sec: 351.69
Iteration:   4040, Loss function: 5.008, Average Loss: 5.210, avg. samples / sec: 351.55
Iteration:   4060, Loss function: 5.229, Average Loss: 5.205, avg. samples / sec: 351.03
Iteration:   4080, Loss function: 4.954, Average Loss: 5.200, avg. samples / sec: 350.87
Iteration:   4100, Loss function: 5.006, Average Loss: 5.197, avg. samples / sec: 350.78
:::MLLOG {"namespace": "", "time_ms": 1639760215929, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760215929, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.063, Average Loss: 5.193, avg. samples / sec: 351.07
Iteration:   4140, Loss function: 4.738, Average Loss: 5.187, avg. samples / sec: 351.32
Iteration:   4160, Loss function: 4.883, Average Loss: 5.181, avg. samples / sec: 351.27
Iteration:   4180, Loss function: 5.021, Average Loss: 5.174, avg. samples / sec: 351.45
Iteration:   4200, Loss function: 4.929, Average Loss: 5.170, avg. samples / sec: 351.38
Iteration:   4220, Loss function: 4.840, Average Loss: 5.165, avg. samples / sec: 351.20
Iteration:   4240, Loss function: 4.998, Average Loss: 5.160, avg. samples / sec: 350.79
Iteration:   4260, Loss function: 4.974, Average Loss: 5.155, avg. samples / sec: 351.44
Iteration:   4280, Loss function: 4.935, Average Loss: 5.149, avg. samples / sec: 351.64
Iteration:   4300, Loss function: 4.706, Average Loss: 5.143, avg. samples / sec: 351.81
Iteration:   4320, Loss function: 5.088, Average Loss: 5.139, avg. samples / sec: 351.72
Iteration:   4340, Loss function: 4.782, Average Loss: 5.133, avg. samples / sec: 351.53
Iteration:   4360, Loss function: 4.898, Average Loss: 5.129, avg. samples / sec: 351.64
Iteration:   4380, Loss function: 5.129, Average Loss: 5.124, avg. samples / sec: 351.73
Iteration:   4400, Loss function: 4.876, Average Loss: 5.119, avg. samples / sec: 351.73
Iteration:   4420, Loss function: 4.833, Average Loss: 5.115, avg. samples / sec: 351.61
Iteration:   4440, Loss function: 4.724, Average Loss: 5.109, avg. samples / sec: 351.90
Iteration:   4460, Loss function: 5.137, Average Loss: 5.105, avg. samples / sec: 351.81
Iteration:   4480, Loss function: 5.047, Average Loss: 5.102, avg. samples / sec: 351.37
Iteration:   4500, Loss function: 4.986, Average Loss: 5.100, avg. samples / sec: 351.16
Iteration:   4520, Loss function: 4.707, Average Loss: 5.095, avg. samples / sec: 351.60
Iteration:   4540, Loss function: 5.283, Average Loss: 5.090, avg. samples / sec: 352.01
Iteration:   4560, Loss function: 4.696, Average Loss: 5.087, avg. samples / sec: 351.54
Iteration:   4580, Loss function: 4.631, Average Loss: 5.084, avg. samples / sec: 351.79
Iteration:   4600, Loss function: 4.659, Average Loss: 5.080, avg. samples / sec: 351.50
Iteration:   4620, Loss function: 4.672, Average Loss: 5.075, avg. samples / sec: 351.63
Iteration:   4640, Loss function: 4.696, Average Loss: 5.070, avg. samples / sec: 351.68
Iteration:   4660, Loss function: 4.592, Average Loss: 5.066, avg. samples / sec: 351.65
Iteration:   4680, Loss function: 5.299, Average Loss: 5.062, avg. samples / sec: 351.61
Iteration:   4700, Loss function: 5.059, Average Loss: 5.058, avg. samples / sec: 351.46
Iteration:   4720, Loss function: 4.633, Average Loss: 5.053, avg. samples / sec: 351.27
Iteration:   4740, Loss function: 4.769, Average Loss: 5.049, avg. samples / sec: 351.49
Iteration:   4760, Loss function: 4.645, Average Loss: 5.046, avg. samples / sec: 351.35
Iteration:   4780, Loss function: 5.114, Average Loss: 5.043, avg. samples / sec: 350.90
Iteration:   4800, Loss function: 4.886, Average Loss: 5.039, avg. samples / sec: 351.37
Iteration:   4820, Loss function: 4.626, Average Loss: 5.036, avg. samples / sec: 351.53
Iteration:   4840, Loss function: 5.151, Average Loss: 5.032, avg. samples / sec: 351.49
Iteration:   4860, Loss function: 4.668, Average Loss: 5.029, avg. samples / sec: 351.37
Iteration:   4880, Loss function: 5.190, Average Loss: 5.025, avg. samples / sec: 351.19
Iteration:   4900, Loss function: 4.521, Average Loss: 5.021, avg. samples / sec: 351.25
Iteration:   4920, Loss function: 4.759, Average Loss: 5.017, avg. samples / sec: 351.40
Iteration:   4940, Loss function: 4.897, Average Loss: 5.013, avg. samples / sec: 351.30
Iteration:   4960, Loss function: 4.625, Average Loss: 5.009, avg. samples / sec: 351.22
Iteration:   4980, Loss function: 4.629, Average Loss: 5.005, avg. samples / sec: 351.32
Iteration:   5000, Loss function: 4.679, Average Loss: 5.002, avg. samples / sec: 351.01
Iteration:   5020, Loss function: 5.181, Average Loss: 4.998, avg. samples / sec: 351.39
Iteration:   5040, Loss function: 4.738, Average Loss: 4.996, avg. samples / sec: 350.97
Iteration:   5060, Loss function: 4.793, Average Loss: 4.993, avg. samples / sec: 350.76
Iteration:   5080, Loss function: 4.759, Average Loss: 4.989, avg. samples / sec: 351.18
Iteration:   5100, Loss function: 4.685, Average Loss: 4.986, avg. samples / sec: 351.47
Iteration:   5120, Loss function: 4.655, Average Loss: 4.983, avg. samples / sec: 351.46
Iteration:   5140, Loss function: 4.979, Average Loss: 4.979, avg. samples / sec: 352.09
:::MLLOG {"namespace": "", "time_ms": 1639760549714, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.45 s
:::MLLOG {"namespace": "", "time_ms": 1639760583212, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760583252, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760583252, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.63s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.17s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11190
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22205
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10358
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19658
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14184
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20870
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22082
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22082
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11190 AP goal: 0.10000
Iteration:   5160, Loss function: 4.822, Average Loss: 4.974, avg. samples / sec: 57.19
:::MLLOG {"namespace": "", "time_ms": 1639760588608, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588608, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11189761612462962, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588609, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588890, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639760590
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:03:10 PM'
START TIMING RUN WAS 2021-12-17 04:32:50 PM
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:50 PM'
ENDING TIMING RUN AT 2021-12-17 05:03:10 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:03:10 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
+ result=1820
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,1820,nvidia,2021-12-17 04:32:50 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1820,nvidia,2021-12-17 04:32:50 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
