8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 3g.20gb     Device  0: (UUID: MIG-4313b2d5-471b-5871-9275-839c208e08d4)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-4313b2d5-471b-5871-9275-839c208e08d4
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-4313b2d5-471b-5871-9275-839c208e08d4'
Found 1 MIG instances: MIG-4313b2d5-471b-5871-9275-839c208e08d4
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758770
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:50 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
Setting up the SSD benchmark...
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:50 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-3g-20gb--1-rcrls to the sync file ...
run-mlperf-mig-3g-20gb--1-rcrls Found 7 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
     2	run-mlperf-mig-2g-10gb--1-ggjwh
     3	run-mlperf-mig-3g-20gb--1-r7rqb
     4	run-mlperf-mig-2g-10gb--1-jgktz
     5	run-mlperf-mig-3g-20gb--1-c7j5c
     6	run-mlperf-mig-3g-20gb--1-klqk6
     7	run-mlperf-mig-3g-20gb--1-rcrls
Fri Dec 17 16:32:55 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 3g.20gb     Device  0: (UUID: MIG-4313b2d5-471b-5871-9275-839c208e08d4)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777343, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777498, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3110307010, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3110307010
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758779407, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779408, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758825747, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758825747, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758827162, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758827163, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827422, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827422, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827423, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.755, Average Loss: 0.023, avg. samples / sec: 2.39
Iteration:     20, Loss function: 21.268, Average Loss: 0.457, avg. samples / sec: 524.13
Iteration:     40, Loss function: 20.771, Average Loss: 0.859, avg. samples / sec: 537.53
Iteration:     60, Loss function: 20.342, Average Loss: 1.247, avg. samples / sec: 539.78
Iteration:     80, Loss function: 19.458, Average Loss: 1.618, avg. samples / sec: 539.50
Iteration:    100, Loss function: 13.995, Average Loss: 1.925, avg. samples / sec: 442.28
Iteration:    120, Loss function: 10.461, Average Loss: 2.118, avg. samples / sec: 538.03
Iteration:    140, Loss function: 9.512, Average Loss: 2.269, avg. samples / sec: 540.09
Iteration:    160, Loss function: 9.028, Average Loss: 2.408, avg. samples / sec: 540.18
Iteration:    180, Loss function: 8.889, Average Loss: 2.537, avg. samples / sec: 540.21
Iteration:    200, Loss function: 8.463, Average Loss: 2.662, avg. samples / sec: 539.42
Iteration:    220, Loss function: 8.725, Average Loss: 2.784, avg. samples / sec: 541.06
Iteration:    240, Loss function: 8.860, Average Loss: 2.906, avg. samples / sec: 542.03
Iteration:    260, Loss function: 8.826, Average Loss: 3.022, avg. samples / sec: 537.72
Iteration:    280, Loss function: 8.584, Average Loss: 3.131, avg. samples / sec: 539.07
Iteration:    300, Loss function: 8.586, Average Loss: 3.236, avg. samples / sec: 539.42
Iteration:    320, Loss function: 8.400, Average Loss: 3.338, avg. samples / sec: 538.46
Iteration:    340, Loss function: 8.327, Average Loss: 3.436, avg. samples / sec: 537.97
Iteration:    360, Loss function: 8.186, Average Loss: 3.529, avg. samples / sec: 540.20
Iteration:    380, Loss function: 7.857, Average Loss: 3.620, avg. samples / sec: 538.80
Iteration:    400, Loss function: 7.990, Average Loss: 3.705, avg. samples / sec: 536.77
Iteration:    420, Loss function: 7.993, Average Loss: 3.789, avg. samples / sec: 538.32
Iteration:    440, Loss function: 7.890, Average Loss: 3.872, avg. samples / sec: 543.15
Iteration:    460, Loss function: 7.556, Average Loss: 3.949, avg. samples / sec: 539.09
Iteration:    480, Loss function: 7.522, Average Loss: 4.024, avg. samples / sec: 539.03
Iteration:    500, Loss function: 7.693, Average Loss: 4.096, avg. samples / sec: 540.05
Iteration:    520, Loss function: 7.501, Average Loss: 4.165, avg. samples / sec: 540.67
Iteration:    540, Loss function: 7.514, Average Loss: 4.233, avg. samples / sec: 543.15
Iteration:    560, Loss function: 7.042, Average Loss: 4.296, avg. samples / sec: 540.00
Iteration:    580, Loss function: 7.284, Average Loss: 4.357, avg. samples / sec: 540.09
Iteration:    600, Loss function: 7.516, Average Loss: 4.419, avg. samples / sec: 541.56
Iteration:    620, Loss function: 7.027, Average Loss: 4.477, avg. samples / sec: 540.92
Iteration:    640, Loss function: 6.803, Average Loss: 4.531, avg. samples / sec: 541.98
Iteration:    660, Loss function: 7.067, Average Loss: 4.583, avg. samples / sec: 541.70
Iteration:    680, Loss function: 7.228, Average Loss: 4.635, avg. samples / sec: 536.30
Iteration:    700, Loss function: 6.868, Average Loss: 4.683, avg. samples / sec: 540.29
Iteration:    720, Loss function: 6.971, Average Loss: 4.731, avg. samples / sec: 535.13
Iteration:    740, Loss function: 7.013, Average Loss: 4.776, avg. samples / sec: 541.39
Iteration:    760, Loss function: 7.192, Average Loss: 4.821, avg. samples / sec: 538.42
Iteration:    780, Loss function: 6.860, Average Loss: 4.864, avg. samples / sec: 540.04
Iteration:    800, Loss function: 7.207, Average Loss: 4.904, avg. samples / sec: 541.24
Iteration:    820, Loss function: 6.874, Average Loss: 4.943, avg. samples / sec: 540.21
Iteration:    840, Loss function: 6.747, Average Loss: 4.981, avg. samples / sec: 541.37
Iteration:    860, Loss function: 6.766, Average Loss: 5.015, avg. samples / sec: 538.60
Iteration:    880, Loss function: 6.708, Average Loss: 5.048, avg. samples / sec: 540.17
Iteration:    900, Loss function: 6.772, Average Loss: 5.080, avg. samples / sec: 542.21
Iteration:    920, Loss function: 6.733, Average Loss: 5.111, avg. samples / sec: 541.65
Iteration:    940, Loss function: 6.755, Average Loss: 5.142, avg. samples / sec: 541.19
Iteration:    960, Loss function: 6.524, Average Loss: 5.171, avg. samples / sec: 540.41
Iteration:    980, Loss function: 6.464, Average Loss: 5.199, avg. samples / sec: 539.86
Iteration:   1000, Loss function: 6.701, Average Loss: 5.226, avg. samples / sec: 541.77
Iteration:   1020, Loss function: 6.433, Average Loss: 5.249, avg. samples / sec: 542.96
:::MLLOG {"namespace": "", "time_ms": 1639759045603, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759045604, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.519, Average Loss: 5.274, avg. samples / sec: 542.03
Iteration:   1060, Loss function: 6.302, Average Loss: 5.297, avg. samples / sec: 540.77
Iteration:   1080, Loss function: 6.390, Average Loss: 5.318, avg. samples / sec: 543.72
Iteration:   1100, Loss function: 6.138, Average Loss: 5.339, avg. samples / sec: 541.76
Iteration:   1120, Loss function: 6.209, Average Loss: 5.358, avg. samples / sec: 540.89
Iteration:   1140, Loss function: 6.341, Average Loss: 5.377, avg. samples / sec: 540.67
Iteration:   1160, Loss function: 6.123, Average Loss: 5.394, avg. samples / sec: 539.61
Iteration:   1180, Loss function: 6.162, Average Loss: 5.411, avg. samples / sec: 538.09
Iteration:   1200, Loss function: 6.118, Average Loss: 5.427, avg. samples / sec: 542.74
Iteration:   1220, Loss function: 6.070, Average Loss: 5.442, avg. samples / sec: 541.23
Iteration:   1240, Loss function: 6.144, Average Loss: 5.456, avg. samples / sec: 542.03
Iteration:   1260, Loss function: 6.052, Average Loss: 5.469, avg. samples / sec: 540.67
Iteration:   1280, Loss function: 5.896, Average Loss: 5.481, avg. samples / sec: 540.47
Iteration:   1300, Loss function: 6.092, Average Loss: 5.494, avg. samples / sec: 543.44
Iteration:   1320, Loss function: 6.265, Average Loss: 5.507, avg. samples / sec: 543.56
Iteration:   1340, Loss function: 5.939, Average Loss: 5.517, avg. samples / sec: 543.23
Iteration:   1360, Loss function: 6.015, Average Loss: 5.529, avg. samples / sec: 543.64
Iteration:   1380, Loss function: 6.048, Average Loss: 5.538, avg. samples / sec: 541.90
Iteration:   1400, Loss function: 6.145, Average Loss: 5.546, avg. samples / sec: 543.03
Iteration:   1420, Loss function: 5.879, Average Loss: 5.554, avg. samples / sec: 539.86
Iteration:   1440, Loss function: 6.254, Average Loss: 5.562, avg. samples / sec: 542.68
Iteration:   1460, Loss function: 6.199, Average Loss: 5.571, avg. samples / sec: 542.68
Iteration:   1480, Loss function: 5.800, Average Loss: 5.580, avg. samples / sec: 540.65
Iteration:   1500, Loss function: 6.014, Average Loss: 5.589, avg. samples / sec: 539.95
Iteration:   1520, Loss function: 5.815, Average Loss: 5.595, avg. samples / sec: 540.90
Iteration:   1540, Loss function: 6.042, Average Loss: 5.599, avg. samples / sec: 540.98
Iteration:   1560, Loss function: 5.736, Average Loss: 5.603, avg. samples / sec: 542.31
Iteration:   1580, Loss function: 5.700, Average Loss: 5.607, avg. samples / sec: 541.38
Iteration:   1600, Loss function: 6.009, Average Loss: 5.614, avg. samples / sec: 542.04
Iteration:   1620, Loss function: 5.800, Average Loss: 5.619, avg. samples / sec: 541.26
Iteration:   1640, Loss function: 5.854, Average Loss: 5.623, avg. samples / sec: 540.09
Iteration:   1660, Loss function: 5.979, Average Loss: 5.627, avg. samples / sec: 540.01
Iteration:   1680, Loss function: 5.826, Average Loss: 5.630, avg. samples / sec: 542.47
Iteration:   1700, Loss function: 5.382, Average Loss: 5.633, avg. samples / sec: 542.18
Iteration:   1720, Loss function: 5.604, Average Loss: 5.636, avg. samples / sec: 539.99
Iteration:   1740, Loss function: 5.802, Average Loss: 5.638, avg. samples / sec: 538.90
Iteration:   1760, Loss function: 5.445, Average Loss: 5.639, avg. samples / sec: 539.78
Iteration:   1780, Loss function: 5.568, Average Loss: 5.640, avg. samples / sec: 540.23
Iteration:   1800, Loss function: 5.591, Average Loss: 5.643, avg. samples / sec: 541.67
Iteration:   1820, Loss function: 5.911, Average Loss: 5.645, avg. samples / sec: 539.34
Iteration:   1840, Loss function: 5.962, Average Loss: 5.646, avg. samples / sec: 540.21
Iteration:   1860, Loss function: 5.624, Average Loss: 5.646, avg. samples / sec: 540.07
Iteration:   1880, Loss function: 5.772, Average Loss: 5.647, avg. samples / sec: 537.70
Iteration:   1900, Loss function: 5.926, Average Loss: 5.648, avg. samples / sec: 541.29
Iteration:   1920, Loss function: 5.770, Average Loss: 5.649, avg. samples / sec: 541.66
Iteration:   1940, Loss function: 5.829, Average Loss: 5.648, avg. samples / sec: 541.95
Iteration:   1960, Loss function: 5.585, Average Loss: 5.647, avg. samples / sec: 541.34
Iteration:   1980, Loss function: 5.734, Average Loss: 5.647, avg. samples / sec: 539.61
Iteration:   2000, Loss function: 5.568, Average Loss: 5.648, avg. samples / sec: 541.06
Iteration:   2020, Loss function: 5.879, Average Loss: 5.646, avg. samples / sec: 541.26
Iteration:   2040, Loss function: 5.628, Average Loss: 5.646, avg. samples / sec: 542.06
:::MLLOG {"namespace": "", "time_ms": 1639759262357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759262358, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.515, Average Loss: 5.644, avg. samples / sec: 543.09
Iteration:   2080, Loss function: 5.203, Average Loss: 5.641, avg. samples / sec: 542.82
Iteration:   2100, Loss function: 5.566, Average Loss: 5.639, avg. samples / sec: 541.72
Iteration:   2120, Loss function: 5.321, Average Loss: 5.635, avg. samples / sec: 540.14
Iteration:   2140, Loss function: 5.380, Average Loss: 5.632, avg. samples / sec: 541.93
Iteration:   2160, Loss function: 5.552, Average Loss: 5.631, avg. samples / sec: 540.38
Iteration:   2180, Loss function: 5.350, Average Loss: 5.628, avg. samples / sec: 541.10
Iteration:   2200, Loss function: 5.513, Average Loss: 5.624, avg. samples / sec: 537.60
Iteration:   2220, Loss function: 5.690, Average Loss: 5.621, avg. samples / sec: 538.68
Iteration:   2240, Loss function: 5.444, Average Loss: 5.619, avg. samples / sec: 537.36
Iteration:   2260, Loss function: 5.431, Average Loss: 5.616, avg. samples / sec: 542.11
Iteration:   2280, Loss function: 5.209, Average Loss: 5.613, avg. samples / sec: 538.77
Iteration:   2300, Loss function: 5.270, Average Loss: 5.610, avg. samples / sec: 540.99
Iteration:   2320, Loss function: 5.207, Average Loss: 5.607, avg. samples / sec: 541.94
Iteration:   2340, Loss function: 5.501, Average Loss: 5.604, avg. samples / sec: 540.18
Iteration:   2360, Loss function: 5.344, Average Loss: 5.601, avg. samples / sec: 541.86
Iteration:   2380, Loss function: 5.425, Average Loss: 5.597, avg. samples / sec: 540.67
Iteration:   2400, Loss function: 5.630, Average Loss: 5.594, avg. samples / sec: 539.85
Iteration:   2420, Loss function: 5.455, Average Loss: 5.590, avg. samples / sec: 541.69
Iteration:   2440, Loss function: 5.385, Average Loss: 5.587, avg. samples / sec: 539.80
Iteration:   2460, Loss function: 5.232, Average Loss: 5.583, avg. samples / sec: 542.14
Iteration:   2480, Loss function: 5.459, Average Loss: 5.581, avg. samples / sec: 543.01
Iteration:   2500, Loss function: 5.400, Average Loss: 5.577, avg. samples / sec: 541.23
Iteration:   2520, Loss function: 5.313, Average Loss: 5.571, avg. samples / sec: 541.36
Iteration:   2540, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 543.48
Iteration:   2560, Loss function: 5.153, Average Loss: 5.565, avg. samples / sec: 538.62
Iteration:   2580, Loss function: 5.215, Average Loss: 5.563, avg. samples / sec: 539.72
Iteration:   2600, Loss function: 5.482, Average Loss: 5.560, avg. samples / sec: 541.25
Iteration:   2620, Loss function: 5.475, Average Loss: 5.556, avg. samples / sec: 542.18
Iteration:   2640, Loss function: 5.457, Average Loss: 5.553, avg. samples / sec: 541.37
Iteration:   2660, Loss function: 5.170, Average Loss: 5.550, avg. samples / sec: 542.90
Iteration:   2680, Loss function: 5.168, Average Loss: 5.546, avg. samples / sec: 542.25
Iteration:   2700, Loss function: 5.134, Average Loss: 5.541, avg. samples / sec: 541.22
Iteration:   2720, Loss function: 5.249, Average Loss: 5.535, avg. samples / sec: 539.48
Iteration:   2740, Loss function: 5.062, Average Loss: 5.530, avg. samples / sec: 539.77
Iteration:   2760, Loss function: 5.058, Average Loss: 5.525, avg. samples / sec: 540.95
Iteration:   2780, Loss function: 5.538, Average Loss: 5.521, avg. samples / sec: 540.39
Iteration:   2800, Loss function: 5.244, Average Loss: 5.516, avg. samples / sec: 539.46
Iteration:   2820, Loss function: 5.500, Average Loss: 5.512, avg. samples / sec: 541.95
Iteration:   2840, Loss function: 5.051, Average Loss: 5.507, avg. samples / sec: 539.48
Iteration:   2860, Loss function: 5.177, Average Loss: 5.502, avg. samples / sec: 538.93
Iteration:   2880, Loss function: 5.209, Average Loss: 5.497, avg. samples / sec: 542.29
Iteration:   2900, Loss function: 5.254, Average Loss: 5.493, avg. samples / sec: 540.99
Iteration:   2920, Loss function: 5.423, Average Loss: 5.487, avg. samples / sec: 541.71
Iteration:   2940, Loss function: 5.140, Average Loss: 5.482, avg. samples / sec: 542.22
Iteration:   2960, Loss function: 5.317, Average Loss: 5.478, avg. samples / sec: 540.13
Iteration:   2980, Loss function: 5.263, Average Loss: 5.474, avg. samples / sec: 542.33
Iteration:   3000, Loss function: 5.252, Average Loss: 5.468, avg. samples / sec: 539.89
Iteration:   3020, Loss function: 5.290, Average Loss: 5.461, avg. samples / sec: 542.31
Iteration:   3040, Loss function: 5.291, Average Loss: 5.456, avg. samples / sec: 543.53
Iteration:   3060, Loss function: 5.018, Average Loss: 5.450, avg. samples / sec: 543.60
Iteration:   3080, Loss function: 4.956, Average Loss: 5.445, avg. samples / sec: 541.99
:::MLLOG {"namespace": "", "time_ms": 1639759478985, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759478986, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.122, Average Loss: 5.441, avg. samples / sec: 539.46
Iteration:   3120, Loss function: 5.063, Average Loss: 5.434, avg. samples / sec: 540.89
Iteration:   3140, Loss function: 5.147, Average Loss: 5.429, avg. samples / sec: 539.10
Iteration:   3160, Loss function: 5.410, Average Loss: 5.424, avg. samples / sec: 539.37
Iteration:   3180, Loss function: 4.953, Average Loss: 5.419, avg. samples / sec: 542.65
Iteration:   3200, Loss function: 5.326, Average Loss: 5.414, avg. samples / sec: 539.72
Iteration:   3220, Loss function: 5.169, Average Loss: 5.409, avg. samples / sec: 542.09
Iteration:   3240, Loss function: 5.295, Average Loss: 5.405, avg. samples / sec: 540.65
Iteration:   3260, Loss function: 4.980, Average Loss: 5.399, avg. samples / sec: 542.29
Iteration:   3280, Loss function: 4.778, Average Loss: 5.392, avg. samples / sec: 540.75
Iteration:   3300, Loss function: 4.682, Average Loss: 5.387, avg. samples / sec: 543.43
Iteration:   3320, Loss function: 4.914, Average Loss: 5.382, avg. samples / sec: 537.56
Iteration:   3340, Loss function: 5.222, Average Loss: 5.379, avg. samples / sec: 539.10
Iteration:   3360, Loss function: 5.039, Average Loss: 5.373, avg. samples / sec: 541.18
Iteration:   3380, Loss function: 5.173, Average Loss: 5.368, avg. samples / sec: 540.20
Iteration:   3400, Loss function: 4.881, Average Loss: 5.363, avg. samples / sec: 541.40
Iteration:   3420, Loss function: 5.086, Average Loss: 5.357, avg. samples / sec: 539.32
Iteration:   3440, Loss function: 4.817, Average Loss: 5.352, avg. samples / sec: 541.86
Iteration:   3460, Loss function: 5.377, Average Loss: 5.348, avg. samples / sec: 542.33
Iteration:   3480, Loss function: 5.293, Average Loss: 5.343, avg. samples / sec: 541.89
Iteration:   3500, Loss function: 5.183, Average Loss: 5.338, avg. samples / sec: 541.27
Iteration:   3520, Loss function: 4.921, Average Loss: 5.334, avg. samples / sec: 540.94
Iteration:   3540, Loss function: 4.913, Average Loss: 5.330, avg. samples / sec: 540.25
Iteration:   3560, Loss function: 4.992, Average Loss: 5.326, avg. samples / sec: 539.04
Iteration:   3580, Loss function: 5.004, Average Loss: 5.321, avg. samples / sec: 540.59
Iteration:   3600, Loss function: 5.163, Average Loss: 5.315, avg. samples / sec: 541.14
Iteration:   3620, Loss function: 4.891, Average Loss: 5.310, avg. samples / sec: 540.10
Iteration:   3640, Loss function: 4.698, Average Loss: 5.304, avg. samples / sec: 538.95
Iteration:   3660, Loss function: 5.054, Average Loss: 5.298, avg. samples / sec: 540.16
Iteration:   3680, Loss function: 5.148, Average Loss: 5.292, avg. samples / sec: 540.28
Iteration:   3700, Loss function: 5.179, Average Loss: 5.287, avg. samples / sec: 541.00
Iteration:   3720, Loss function: 4.840, Average Loss: 5.282, avg. samples / sec: 541.11
Iteration:   3740, Loss function: 5.126, Average Loss: 5.277, avg. samples / sec: 540.96
Iteration:   3760, Loss function: 5.014, Average Loss: 5.274, avg. samples / sec: 539.31
Iteration:   3780, Loss function: 5.095, Average Loss: 5.269, avg. samples / sec: 540.74
Iteration:   3800, Loss function: 5.066, Average Loss: 5.266, avg. samples / sec: 541.19
Iteration:   3820, Loss function: 5.277, Average Loss: 5.261, avg. samples / sec: 543.15
Iteration:   3840, Loss function: 4.895, Average Loss: 5.257, avg. samples / sec: 539.24
Iteration:   3860, Loss function: 4.875, Average Loss: 5.251, avg. samples / sec: 543.03
Iteration:   3880, Loss function: 5.154, Average Loss: 5.246, avg. samples / sec: 543.03
Iteration:   3900, Loss function: 5.070, Average Loss: 5.241, avg. samples / sec: 539.00
Iteration:   3920, Loss function: 5.007, Average Loss: 5.235, avg. samples / sec: 539.81
Iteration:   3940, Loss function: 5.021, Average Loss: 5.229, avg. samples / sec: 541.67
Iteration:   3960, Loss function: 4.847, Average Loss: 5.225, avg. samples / sec: 539.01
Iteration:   3980, Loss function: 4.894, Average Loss: 5.220, avg. samples / sec: 542.27
Iteration:   4000, Loss function: 5.056, Average Loss: 5.216, avg. samples / sec: 541.76
Iteration:   4020, Loss function: 4.998, Average Loss: 5.211, avg. samples / sec: 543.40
Iteration:   4040, Loss function: 5.164, Average Loss: 5.207, avg. samples / sec: 543.43
Iteration:   4060, Loss function: 5.266, Average Loss: 5.203, avg. samples / sec: 541.24
Iteration:   4080, Loss function: 5.078, Average Loss: 5.198, avg. samples / sec: 539.45
Iteration:   4100, Loss function: 5.100, Average Loss: 5.195, avg. samples / sec: 541.46
:::MLLOG {"namespace": "", "time_ms": 1639759695899, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759695900, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.962, Average Loss: 5.192, avg. samples / sec: 539.06
Iteration:   4140, Loss function: 4.912, Average Loss: 5.187, avg. samples / sec: 538.77
Iteration:   4160, Loss function: 5.083, Average Loss: 5.181, avg. samples / sec: 542.44
Iteration:   4180, Loss function: 5.027, Average Loss: 5.175, avg. samples / sec: 541.60
Iteration:   4200, Loss function: 4.744, Average Loss: 5.170, avg. samples / sec: 539.87
Iteration:   4220, Loss function: 4.913, Average Loss: 5.166, avg. samples / sec: 540.96
Iteration:   4240, Loss function: 4.868, Average Loss: 5.162, avg. samples / sec: 540.90
Iteration:   4260, Loss function: 5.206, Average Loss: 5.158, avg. samples / sec: 542.49
Iteration:   4280, Loss function: 4.834, Average Loss: 5.152, avg. samples / sec: 541.96
Iteration:   4300, Loss function: 4.978, Average Loss: 5.146, avg. samples / sec: 540.81
Iteration:   4320, Loss function: 4.826, Average Loss: 5.141, avg. samples / sec: 539.80
Iteration:   4340, Loss function: 4.781, Average Loss: 5.136, avg. samples / sec: 541.04
Iteration:   4360, Loss function: 4.918, Average Loss: 5.132, avg. samples / sec: 539.60
Iteration:   4380, Loss function: 5.023, Average Loss: 5.126, avg. samples / sec: 541.63
Iteration:   4400, Loss function: 4.843, Average Loss: 5.122, avg. samples / sec: 541.55
Iteration:   4420, Loss function: 4.870, Average Loss: 5.117, avg. samples / sec: 540.68
Iteration:   4440, Loss function: 4.857, Average Loss: 5.113, avg. samples / sec: 541.91
Iteration:   4460, Loss function: 5.066, Average Loss: 5.108, avg. samples / sec: 540.84
Iteration:   4480, Loss function: 5.232, Average Loss: 5.105, avg. samples / sec: 541.64
Iteration:   4500, Loss function: 4.873, Average Loss: 5.101, avg. samples / sec: 541.19
Iteration:   4520, Loss function: 4.920, Average Loss: 5.097, avg. samples / sec: 541.75
Iteration:   4540, Loss function: 5.090, Average Loss: 5.093, avg. samples / sec: 539.19
Iteration:   4560, Loss function: 4.761, Average Loss: 5.088, avg. samples / sec: 542.45
Iteration:   4580, Loss function: 4.613, Average Loss: 5.085, avg. samples / sec: 538.24
Iteration:   4600, Loss function: 4.848, Average Loss: 5.081, avg. samples / sec: 540.52
Iteration:   4620, Loss function: 4.679, Average Loss: 5.076, avg. samples / sec: 539.82
Iteration:   4640, Loss function: 4.744, Average Loss: 5.071, avg. samples / sec: 539.03
Iteration:   4660, Loss function: 4.889, Average Loss: 5.069, avg. samples / sec: 542.30
Iteration:   4680, Loss function: 5.344, Average Loss: 5.064, avg. samples / sec: 541.26
Iteration:   4700, Loss function: 4.698, Average Loss: 5.061, avg. samples / sec: 540.88
Iteration:   4720, Loss function: 4.818, Average Loss: 5.055, avg. samples / sec: 540.70
Iteration:   4740, Loss function: 4.746, Average Loss: 5.052, avg. samples / sec: 540.04
Iteration:   4760, Loss function: 4.656, Average Loss: 5.049, avg. samples / sec: 541.02
Iteration:   4780, Loss function: 4.988, Average Loss: 5.045, avg. samples / sec: 542.49
Iteration:   4800, Loss function: 4.803, Average Loss: 5.043, avg. samples / sec: 541.49
Iteration:   4820, Loss function: 4.774, Average Loss: 5.040, avg. samples / sec: 541.56
Iteration:   4840, Loss function: 5.260, Average Loss: 5.037, avg. samples / sec: 537.28
Iteration:   4860, Loss function: 4.757, Average Loss: 5.034, avg. samples / sec: 541.01
Iteration:   4880, Loss function: 5.249, Average Loss: 5.031, avg. samples / sec: 538.04
Iteration:   4900, Loss function: 4.528, Average Loss: 5.026, avg. samples / sec: 536.99
Iteration:   4920, Loss function: 4.900, Average Loss: 5.023, avg. samples / sec: 543.26
Iteration:   4940, Loss function: 4.839, Average Loss: 5.019, avg. samples / sec: 542.41
Iteration:   4960, Loss function: 4.654, Average Loss: 5.015, avg. samples / sec: 540.14
Iteration:   4980, Loss function: 4.795, Average Loss: 5.011, avg. samples / sec: 542.90
Iteration:   5000, Loss function: 4.741, Average Loss: 5.007, avg. samples / sec: 539.85
Iteration:   5020, Loss function: 5.110, Average Loss: 5.003, avg. samples / sec: 541.91
Iteration:   5040, Loss function: 4.987, Average Loss: 5.000, avg. samples / sec: 540.56
Iteration:   5060, Loss function: 4.845, Average Loss: 4.997, avg. samples / sec: 541.36
Iteration:   5080, Loss function: 4.620, Average Loss: 4.992, avg. samples / sec: 542.83
Iteration:   5100, Loss function: 4.924, Average Loss: 4.990, avg. samples / sec: 542.96
Iteration:   5120, Loss function: 4.669, Average Loss: 4.988, avg. samples / sec: 544.21
Iteration:   5140, Loss function: 4.811, Average Loss: 4.985, avg. samples / sec: 541.79
:::MLLOG {"namespace": "", "time_ms": 1639759912746, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.15 s
:::MLLOG {"namespace": "", "time_ms": 1639759943955, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759944007, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759944012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.69s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.53s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10833
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21753
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09772
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19396
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13994
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21956
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21956
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10833 AP goal: 0.10000
Iteration:   5160, Loss function: 4.829, Average Loss: 4.980, avg. samples / sec: 64.37
:::MLLOG {"namespace": "", "time_ms": 1639759947531, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947532, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10833149363586785, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947532, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947741, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 16:52:28 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 16:52:28 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777343, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777498, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3110307010, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3110307010
:::MLLOG {"namespace": "", "time_ms": 1639758779407, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779408, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779412, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758825747, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758825747, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758827162, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758827163, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827422, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827422, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827423, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.755, Average Loss: 0.023, avg. samples / sec: 2.39
Iteration:     20, Loss function: 21.268, Average Loss: 0.457, avg. samples / sec: 524.13
Iteration:     40, Loss function: 20.771, Average Loss: 0.859, avg. samples / sec: 537.53
Iteration:     60, Loss function: 20.342, Average Loss: 1.247, avg. samples / sec: 539.78
Iteration:     80, Loss function: 19.458, Average Loss: 1.618, avg. samples / sec: 539.50
Iteration:    100, Loss function: 13.995, Average Loss: 1.925, avg. samples / sec: 442.28
Iteration:    120, Loss function: 10.461, Average Loss: 2.118, avg. samples / sec: 538.03
Iteration:    140, Loss function: 9.512, Average Loss: 2.269, avg. samples / sec: 540.09
Iteration:    160, Loss function: 9.028, Average Loss: 2.408, avg. samples / sec: 540.18
Iteration:    180, Loss function: 8.889, Average Loss: 2.537, avg. samples / sec: 540.21
Iteration:    200, Loss function: 8.463, Average Loss: 2.662, avg. samples / sec: 539.42
Iteration:    220, Loss function: 8.725, Average Loss: 2.784, avg. samples / sec: 541.06
Iteration:    240, Loss function: 8.860, Average Loss: 2.906, avg. samples / sec: 542.03
Iteration:    260, Loss function: 8.826, Average Loss: 3.022, avg. samples / sec: 537.72
Iteration:    280, Loss function: 8.584, Average Loss: 3.131, avg. samples / sec: 539.07
Iteration:    300, Loss function: 8.586, Average Loss: 3.236, avg. samples / sec: 539.42
Iteration:    320, Loss function: 8.400, Average Loss: 3.338, avg. samples / sec: 538.46
Iteration:    340, Loss function: 8.327, Average Loss: 3.436, avg. samples / sec: 537.97
Iteration:    360, Loss function: 8.186, Average Loss: 3.529, avg. samples / sec: 540.20
Iteration:    380, Loss function: 7.857, Average Loss: 3.620, avg. samples / sec: 538.80
Iteration:    400, Loss function: 7.990, Average Loss: 3.705, avg. samples / sec: 536.77
Iteration:    420, Loss function: 7.993, Average Loss: 3.789, avg. samples / sec: 538.32
Iteration:    440, Loss function: 7.890, Average Loss: 3.872, avg. samples / sec: 543.15
Iteration:    460, Loss function: 7.556, Average Loss: 3.949, avg. samples / sec: 539.09
Iteration:    480, Loss function: 7.522, Average Loss: 4.024, avg. samples / sec: 539.03
Iteration:    500, Loss function: 7.693, Average Loss: 4.096, avg. samples / sec: 540.05
Iteration:    520, Loss function: 7.501, Average Loss: 4.165, avg. samples / sec: 540.67
Iteration:    540, Loss function: 7.514, Average Loss: 4.233, avg. samples / sec: 543.15
Iteration:    560, Loss function: 7.042, Average Loss: 4.296, avg. samples / sec: 540.00
Iteration:    580, Loss function: 7.284, Average Loss: 4.357, avg. samples / sec: 540.09
Iteration:    600, Loss function: 7.516, Average Loss: 4.419, avg. samples / sec: 541.56
Iteration:    620, Loss function: 7.027, Average Loss: 4.477, avg. samples / sec: 540.92
Iteration:    640, Loss function: 6.803, Average Loss: 4.531, avg. samples / sec: 541.98
Iteration:    660, Loss function: 7.067, Average Loss: 4.583, avg. samples / sec: 541.70
Iteration:    680, Loss function: 7.228, Average Loss: 4.635, avg. samples / sec: 536.30
Iteration:    700, Loss function: 6.868, Average Loss: 4.683, avg. samples / sec: 540.29
Iteration:    720, Loss function: 6.971, Average Loss: 4.731, avg. samples / sec: 535.13
Iteration:    740, Loss function: 7.013, Average Loss: 4.776, avg. samples / sec: 541.39
Iteration:    760, Loss function: 7.192, Average Loss: 4.821, avg. samples / sec: 538.42
Iteration:    780, Loss function: 6.860, Average Loss: 4.864, avg. samples / sec: 540.04
Iteration:    800, Loss function: 7.207, Average Loss: 4.904, avg. samples / sec: 541.24
Iteration:    820, Loss function: 6.874, Average Loss: 4.943, avg. samples / sec: 540.21
Iteration:    840, Loss function: 6.747, Average Loss: 4.981, avg. samples / sec: 541.37
Iteration:    860, Loss function: 6.766, Average Loss: 5.015, avg. samples / sec: 538.60
Iteration:    880, Loss function: 6.708, Average Loss: 5.048, avg. samples / sec: 540.17
Iteration:    900, Loss function: 6.772, Average Loss: 5.080, avg. samples / sec: 542.21
Iteration:    920, Loss function: 6.733, Average Loss: 5.111, avg. samples / sec: 541.65
Iteration:    940, Loss function: 6.755, Average Loss: 5.142, avg. samples / sec: 541.19
Iteration:    960, Loss function: 6.524, Average Loss: 5.171, avg. samples / sec: 540.41
Iteration:    980, Loss function: 6.464, Average Loss: 5.199, avg. samples / sec: 539.86
Iteration:   1000, Loss function: 6.701, Average Loss: 5.226, avg. samples / sec: 541.77
Iteration:   1020, Loss function: 6.433, Average Loss: 5.249, avg. samples / sec: 542.96
:::MLLOG {"namespace": "", "time_ms": 1639759045603, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759045604, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.519, Average Loss: 5.274, avg. samples / sec: 542.03
Iteration:   1060, Loss function: 6.302, Average Loss: 5.297, avg. samples / sec: 540.77
Iteration:   1080, Loss function: 6.390, Average Loss: 5.318, avg. samples / sec: 543.72
Iteration:   1100, Loss function: 6.138, Average Loss: 5.339, avg. samples / sec: 541.76
Iteration:   1120, Loss function: 6.209, Average Loss: 5.358, avg. samples / sec: 540.89
Iteration:   1140, Loss function: 6.341, Average Loss: 5.377, avg. samples / sec: 540.67
Iteration:   1160, Loss function: 6.123, Average Loss: 5.394, avg. samples / sec: 539.61
Iteration:   1180, Loss function: 6.162, Average Loss: 5.411, avg. samples / sec: 538.09
Iteration:   1200, Loss function: 6.118, Average Loss: 5.427, avg. samples / sec: 542.74
Iteration:   1220, Loss function: 6.070, Average Loss: 5.442, avg. samples / sec: 541.23
Iteration:   1240, Loss function: 6.144, Average Loss: 5.456, avg. samples / sec: 542.03
Iteration:   1260, Loss function: 6.052, Average Loss: 5.469, avg. samples / sec: 540.67
Iteration:   1280, Loss function: 5.896, Average Loss: 5.481, avg. samples / sec: 540.47
Iteration:   1300, Loss function: 6.092, Average Loss: 5.494, avg. samples / sec: 543.44
Iteration:   1320, Loss function: 6.265, Average Loss: 5.507, avg. samples / sec: 543.56
Iteration:   1340, Loss function: 5.939, Average Loss: 5.517, avg. samples / sec: 543.23
Iteration:   1360, Loss function: 6.015, Average Loss: 5.529, avg. samples / sec: 543.64
Iteration:   1380, Loss function: 6.048, Average Loss: 5.538, avg. samples / sec: 541.90
Iteration:   1400, Loss function: 6.145, Average Loss: 5.546, avg. samples / sec: 543.03
Iteration:   1420, Loss function: 5.879, Average Loss: 5.554, avg. samples / sec: 539.86
Iteration:   1440, Loss function: 6.254, Average Loss: 5.562, avg. samples / sec: 542.68
Iteration:   1460, Loss function: 6.199, Average Loss: 5.571, avg. samples / sec: 542.68
Iteration:   1480, Loss function: 5.800, Average Loss: 5.580, avg. samples / sec: 540.65
Iteration:   1500, Loss function: 6.014, Average Loss: 5.589, avg. samples / sec: 539.95
Iteration:   1520, Loss function: 5.815, Average Loss: 5.595, avg. samples / sec: 540.90
Iteration:   1540, Loss function: 6.042, Average Loss: 5.599, avg. samples / sec: 540.98
Iteration:   1560, Loss function: 5.736, Average Loss: 5.603, avg. samples / sec: 542.31
Iteration:   1580, Loss function: 5.700, Average Loss: 5.607, avg. samples / sec: 541.38
Iteration:   1600, Loss function: 6.009, Average Loss: 5.614, avg. samples / sec: 542.04
Iteration:   1620, Loss function: 5.800, Average Loss: 5.619, avg. samples / sec: 541.26
Iteration:   1640, Loss function: 5.854, Average Loss: 5.623, avg. samples / sec: 540.09
Iteration:   1660, Loss function: 5.979, Average Loss: 5.627, avg. samples / sec: 540.01
Iteration:   1680, Loss function: 5.826, Average Loss: 5.630, avg. samples / sec: 542.47
Iteration:   1700, Loss function: 5.382, Average Loss: 5.633, avg. samples / sec: 542.18
Iteration:   1720, Loss function: 5.604, Average Loss: 5.636, avg. samples / sec: 539.99
Iteration:   1740, Loss function: 5.802, Average Loss: 5.638, avg. samples / sec: 538.90
Iteration:   1760, Loss function: 5.445, Average Loss: 5.639, avg. samples / sec: 539.78
Iteration:   1780, Loss function: 5.568, Average Loss: 5.640, avg. samples / sec: 540.23
Iteration:   1800, Loss function: 5.591, Average Loss: 5.643, avg. samples / sec: 541.67
Iteration:   1820, Loss function: 5.911, Average Loss: 5.645, avg. samples / sec: 539.34
Iteration:   1840, Loss function: 5.962, Average Loss: 5.646, avg. samples / sec: 540.21
Iteration:   1860, Loss function: 5.624, Average Loss: 5.646, avg. samples / sec: 540.07
Iteration:   1880, Loss function: 5.772, Average Loss: 5.647, avg. samples / sec: 537.70
Iteration:   1900, Loss function: 5.926, Average Loss: 5.648, avg. samples / sec: 541.29
Iteration:   1920, Loss function: 5.770, Average Loss: 5.649, avg. samples / sec: 541.66
Iteration:   1940, Loss function: 5.829, Average Loss: 5.648, avg. samples / sec: 541.95
Iteration:   1960, Loss function: 5.585, Average Loss: 5.647, avg. samples / sec: 541.34
Iteration:   1980, Loss function: 5.734, Average Loss: 5.647, avg. samples / sec: 539.61
Iteration:   2000, Loss function: 5.568, Average Loss: 5.648, avg. samples / sec: 541.06
Iteration:   2020, Loss function: 5.879, Average Loss: 5.646, avg. samples / sec: 541.26
Iteration:   2040, Loss function: 5.628, Average Loss: 5.646, avg. samples / sec: 542.06
:::MLLOG {"namespace": "", "time_ms": 1639759262357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759262358, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.515, Average Loss: 5.644, avg. samples / sec: 543.09
Iteration:   2080, Loss function: 5.203, Average Loss: 5.641, avg. samples / sec: 542.82
Iteration:   2100, Loss function: 5.566, Average Loss: 5.639, avg. samples / sec: 541.72
Iteration:   2120, Loss function: 5.321, Average Loss: 5.635, avg. samples / sec: 540.14
Iteration:   2140, Loss function: 5.380, Average Loss: 5.632, avg. samples / sec: 541.93
Iteration:   2160, Loss function: 5.552, Average Loss: 5.631, avg. samples / sec: 540.38
Iteration:   2180, Loss function: 5.350, Average Loss: 5.628, avg. samples / sec: 541.10
Iteration:   2200, Loss function: 5.513, Average Loss: 5.624, avg. samples / sec: 537.60
Iteration:   2220, Loss function: 5.690, Average Loss: 5.621, avg. samples / sec: 538.68
Iteration:   2240, Loss function: 5.444, Average Loss: 5.619, avg. samples / sec: 537.36
Iteration:   2260, Loss function: 5.431, Average Loss: 5.616, avg. samples / sec: 542.11
Iteration:   2280, Loss function: 5.209, Average Loss: 5.613, avg. samples / sec: 538.77
Iteration:   2300, Loss function: 5.270, Average Loss: 5.610, avg. samples / sec: 540.99
Iteration:   2320, Loss function: 5.207, Average Loss: 5.607, avg. samples / sec: 541.94
Iteration:   2340, Loss function: 5.501, Average Loss: 5.604, avg. samples / sec: 540.18
Iteration:   2360, Loss function: 5.344, Average Loss: 5.601, avg. samples / sec: 541.86
Iteration:   2380, Loss function: 5.425, Average Loss: 5.597, avg. samples / sec: 540.67
Iteration:   2400, Loss function: 5.630, Average Loss: 5.594, avg. samples / sec: 539.85
Iteration:   2420, Loss function: 5.455, Average Loss: 5.590, avg. samples / sec: 541.69
Iteration:   2440, Loss function: 5.385, Average Loss: 5.587, avg. samples / sec: 539.80
Iteration:   2460, Loss function: 5.232, Average Loss: 5.583, avg. samples / sec: 542.14
Iteration:   2480, Loss function: 5.459, Average Loss: 5.581, avg. samples / sec: 543.01
Iteration:   2500, Loss function: 5.400, Average Loss: 5.577, avg. samples / sec: 541.23
Iteration:   2520, Loss function: 5.313, Average Loss: 5.571, avg. samples / sec: 541.36
Iteration:   2540, Loss function: 5.392, Average Loss: 5.569, avg. samples / sec: 543.48
Iteration:   2560, Loss function: 5.153, Average Loss: 5.565, avg. samples / sec: 538.62
Iteration:   2580, Loss function: 5.215, Average Loss: 5.563, avg. samples / sec: 539.72
Iteration:   2600, Loss function: 5.482, Average Loss: 5.560, avg. samples / sec: 541.25
Iteration:   2620, Loss function: 5.475, Average Loss: 5.556, avg. samples / sec: 542.18
Iteration:   2640, Loss function: 5.457, Average Loss: 5.553, avg. samples / sec: 541.37
Iteration:   2660, Loss function: 5.170, Average Loss: 5.550, avg. samples / sec: 542.90
Iteration:   2680, Loss function: 5.168, Average Loss: 5.546, avg. samples / sec: 542.25
Iteration:   2700, Loss function: 5.134, Average Loss: 5.541, avg. samples / sec: 541.22
Iteration:   2720, Loss function: 5.249, Average Loss: 5.535, avg. samples / sec: 539.48
Iteration:   2740, Loss function: 5.062, Average Loss: 5.530, avg. samples / sec: 539.77
Iteration:   2760, Loss function: 5.058, Average Loss: 5.525, avg. samples / sec: 540.95
Iteration:   2780, Loss function: 5.538, Average Loss: 5.521, avg. samples / sec: 540.39
Iteration:   2800, Loss function: 5.244, Average Loss: 5.516, avg. samples / sec: 539.46
Iteration:   2820, Loss function: 5.500, Average Loss: 5.512, avg. samples / sec: 541.95
Iteration:   2840, Loss function: 5.051, Average Loss: 5.507, avg. samples / sec: 539.48
Iteration:   2860, Loss function: 5.177, Average Loss: 5.502, avg. samples / sec: 538.93
Iteration:   2880, Loss function: 5.209, Average Loss: 5.497, avg. samples / sec: 542.29
Iteration:   2900, Loss function: 5.254, Average Loss: 5.493, avg. samples / sec: 540.99
Iteration:   2920, Loss function: 5.423, Average Loss: 5.487, avg. samples / sec: 541.71
Iteration:   2940, Loss function: 5.140, Average Loss: 5.482, avg. samples / sec: 542.22
Iteration:   2960, Loss function: 5.317, Average Loss: 5.478, avg. samples / sec: 540.13
Iteration:   2980, Loss function: 5.263, Average Loss: 5.474, avg. samples / sec: 542.33
Iteration:   3000, Loss function: 5.252, Average Loss: 5.468, avg. samples / sec: 539.89
Iteration:   3020, Loss function: 5.290, Average Loss: 5.461, avg. samples / sec: 542.31
Iteration:   3040, Loss function: 5.291, Average Loss: 5.456, avg. samples / sec: 543.53
Iteration:   3060, Loss function: 5.018, Average Loss: 5.450, avg. samples / sec: 543.60
Iteration:   3080, Loss function: 4.956, Average Loss: 5.445, avg. samples / sec: 541.99
:::MLLOG {"namespace": "", "time_ms": 1639759478985, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759478986, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.122, Average Loss: 5.441, avg. samples / sec: 539.46
Iteration:   3120, Loss function: 5.063, Average Loss: 5.434, avg. samples / sec: 540.89
Iteration:   3140, Loss function: 5.147, Average Loss: 5.429, avg. samples / sec: 539.10
Iteration:   3160, Loss function: 5.410, Average Loss: 5.424, avg. samples / sec: 539.37
Iteration:   3180, Loss function: 4.953, Average Loss: 5.419, avg. samples / sec: 542.65
Iteration:   3200, Loss function: 5.326, Average Loss: 5.414, avg. samples / sec: 539.72
Iteration:   3220, Loss function: 5.169, Average Loss: 5.409, avg. samples / sec: 542.09
Iteration:   3240, Loss function: 5.295, Average Loss: 5.405, avg. samples / sec: 540.65
Iteration:   3260, Loss function: 4.980, Average Loss: 5.399, avg. samples / sec: 542.29
Iteration:   3280, Loss function: 4.778, Average Loss: 5.392, avg. samples / sec: 540.75
Iteration:   3300, Loss function: 4.682, Average Loss: 5.387, avg. samples / sec: 543.43
Iteration:   3320, Loss function: 4.914, Average Loss: 5.382, avg. samples / sec: 537.56
Iteration:   3340, Loss function: 5.222, Average Loss: 5.379, avg. samples / sec: 539.10
Iteration:   3360, Loss function: 5.039, Average Loss: 5.373, avg. samples / sec: 541.18
Iteration:   3380, Loss function: 5.173, Average Loss: 5.368, avg. samples / sec: 540.20
Iteration:   3400, Loss function: 4.881, Average Loss: 5.363, avg. samples / sec: 541.40
Iteration:   3420, Loss function: 5.086, Average Loss: 5.357, avg. samples / sec: 539.32
Iteration:   3440, Loss function: 4.817, Average Loss: 5.352, avg. samples / sec: 541.86
Iteration:   3460, Loss function: 5.377, Average Loss: 5.348, avg. samples / sec: 542.33
Iteration:   3480, Loss function: 5.293, Average Loss: 5.343, avg. samples / sec: 541.89
Iteration:   3500, Loss function: 5.183, Average Loss: 5.338, avg. samples / sec: 541.27
Iteration:   3520, Loss function: 4.921, Average Loss: 5.334, avg. samples / sec: 540.94
Iteration:   3540, Loss function: 4.913, Average Loss: 5.330, avg. samples / sec: 540.25
Iteration:   3560, Loss function: 4.992, Average Loss: 5.326, avg. samples / sec: 539.04
Iteration:   3580, Loss function: 5.004, Average Loss: 5.321, avg. samples / sec: 540.59
Iteration:   3600, Loss function: 5.163, Average Loss: 5.315, avg. samples / sec: 541.14
Iteration:   3620, Loss function: 4.891, Average Loss: 5.310, avg. samples / sec: 540.10
Iteration:   3640, Loss function: 4.698, Average Loss: 5.304, avg. samples / sec: 538.95
Iteration:   3660, Loss function: 5.054, Average Loss: 5.298, avg. samples / sec: 540.16
Iteration:   3680, Loss function: 5.148, Average Loss: 5.292, avg. samples / sec: 540.28
Iteration:   3700, Loss function: 5.179, Average Loss: 5.287, avg. samples / sec: 541.00
Iteration:   3720, Loss function: 4.840, Average Loss: 5.282, avg. samples / sec: 541.11
Iteration:   3740, Loss function: 5.126, Average Loss: 5.277, avg. samples / sec: 540.96
Iteration:   3760, Loss function: 5.014, Average Loss: 5.274, avg. samples / sec: 539.31
Iteration:   3780, Loss function: 5.095, Average Loss: 5.269, avg. samples / sec: 540.74
Iteration:   3800, Loss function: 5.066, Average Loss: 5.266, avg. samples / sec: 541.19
Iteration:   3820, Loss function: 5.277, Average Loss: 5.261, avg. samples / sec: 543.15
Iteration:   3840, Loss function: 4.895, Average Loss: 5.257, avg. samples / sec: 539.24
Iteration:   3860, Loss function: 4.875, Average Loss: 5.251, avg. samples / sec: 543.03
Iteration:   3880, Loss function: 5.154, Average Loss: 5.246, avg. samples / sec: 543.03
Iteration:   3900, Loss function: 5.070, Average Loss: 5.241, avg. samples / sec: 539.00
Iteration:   3920, Loss function: 5.007, Average Loss: 5.235, avg. samples / sec: 539.81
Iteration:   3940, Loss function: 5.021, Average Loss: 5.229, avg. samples / sec: 541.67
Iteration:   3960, Loss function: 4.847, Average Loss: 5.225, avg. samples / sec: 539.01
Iteration:   3980, Loss function: 4.894, Average Loss: 5.220, avg. samples / sec: 542.27
Iteration:   4000, Loss function: 5.056, Average Loss: 5.216, avg. samples / sec: 541.76
Iteration:   4020, Loss function: 4.998, Average Loss: 5.211, avg. samples / sec: 543.40
Iteration:   4040, Loss function: 5.164, Average Loss: 5.207, avg. samples / sec: 543.43
Iteration:   4060, Loss function: 5.266, Average Loss: 5.203, avg. samples / sec: 541.24
Iteration:   4080, Loss function: 5.078, Average Loss: 5.198, avg. samples / sec: 539.45
Iteration:   4100, Loss function: 5.100, Average Loss: 5.195, avg. samples / sec: 541.46
:::MLLOG {"namespace": "", "time_ms": 1639759695899, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759695900, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.962, Average Loss: 5.192, avg. samples / sec: 539.06
Iteration:   4140, Loss function: 4.912, Average Loss: 5.187, avg. samples / sec: 538.77
Iteration:   4160, Loss function: 5.083, Average Loss: 5.181, avg. samples / sec: 542.44
Iteration:   4180, Loss function: 5.027, Average Loss: 5.175, avg. samples / sec: 541.60
Iteration:   4200, Loss function: 4.744, Average Loss: 5.170, avg. samples / sec: 539.87
Iteration:   4220, Loss function: 4.913, Average Loss: 5.166, avg. samples / sec: 540.96
Iteration:   4240, Loss function: 4.868, Average Loss: 5.162, avg. samples / sec: 540.90
Iteration:   4260, Loss function: 5.206, Average Loss: 5.158, avg. samples / sec: 542.49
Iteration:   4280, Loss function: 4.834, Average Loss: 5.152, avg. samples / sec: 541.96
Iteration:   4300, Loss function: 4.978, Average Loss: 5.146, avg. samples / sec: 540.81
Iteration:   4320, Loss function: 4.826, Average Loss: 5.141, avg. samples / sec: 539.80
Iteration:   4340, Loss function: 4.781, Average Loss: 5.136, avg. samples / sec: 541.04
Iteration:   4360, Loss function: 4.918, Average Loss: 5.132, avg. samples / sec: 539.60
Iteration:   4380, Loss function: 5.023, Average Loss: 5.126, avg. samples / sec: 541.63
Iteration:   4400, Loss function: 4.843, Average Loss: 5.122, avg. samples / sec: 541.55
Iteration:   4420, Loss function: 4.870, Average Loss: 5.117, avg. samples / sec: 540.68
Iteration:   4440, Loss function: 4.857, Average Loss: 5.113, avg. samples / sec: 541.91
Iteration:   4460, Loss function: 5.066, Average Loss: 5.108, avg. samples / sec: 540.84
Iteration:   4480, Loss function: 5.232, Average Loss: 5.105, avg. samples / sec: 541.64
Iteration:   4500, Loss function: 4.873, Average Loss: 5.101, avg. samples / sec: 541.19
Iteration:   4520, Loss function: 4.920, Average Loss: 5.097, avg. samples / sec: 541.75
Iteration:   4540, Loss function: 5.090, Average Loss: 5.093, avg. samples / sec: 539.19
Iteration:   4560, Loss function: 4.761, Average Loss: 5.088, avg. samples / sec: 542.45
Iteration:   4580, Loss function: 4.613, Average Loss: 5.085, avg. samples / sec: 538.24
Iteration:   4600, Loss function: 4.848, Average Loss: 5.081, avg. samples / sec: 540.52
Iteration:   4620, Loss function: 4.679, Average Loss: 5.076, avg. samples / sec: 539.82
Iteration:   4640, Loss function: 4.744, Average Loss: 5.071, avg. samples / sec: 539.03
Iteration:   4660, Loss function: 4.889, Average Loss: 5.069, avg. samples / sec: 542.30
Iteration:   4680, Loss function: 5.344, Average Loss: 5.064, avg. samples / sec: 541.26
Iteration:   4700, Loss function: 4.698, Average Loss: 5.061, avg. samples / sec: 540.88
Iteration:   4720, Loss function: 4.818, Average Loss: 5.055, avg. samples / sec: 540.70
Iteration:   4740, Loss function: 4.746, Average Loss: 5.052, avg. samples / sec: 540.04
Iteration:   4760, Loss function: 4.656, Average Loss: 5.049, avg. samples / sec: 541.02
Iteration:   4780, Loss function: 4.988, Average Loss: 5.045, avg. samples / sec: 542.49
Iteration:   4800, Loss function: 4.803, Average Loss: 5.043, avg. samples / sec: 541.49
Iteration:   4820, Loss function: 4.774, Average Loss: 5.040, avg. samples / sec: 541.56
Iteration:   4840, Loss function: 5.260, Average Loss: 5.037, avg. samples / sec: 537.28
Iteration:   4860, Loss function: 4.757, Average Loss: 5.034, avg. samples / sec: 541.01
Iteration:   4880, Loss function: 5.249, Average Loss: 5.031, avg. samples / sec: 538.04
Iteration:   4900, Loss function: 4.528, Average Loss: 5.026, avg. samples / sec: 536.99
Iteration:   4920, Loss function: 4.900, Average Loss: 5.023, avg. samples / sec: 543.26
Iteration:   4940, Loss function: 4.839, Average Loss: 5.019, avg. samples / sec: 542.41
Iteration:   4960, Loss function: 4.654, Average Loss: 5.015, avg. samples / sec: 540.14
Iteration:   4980, Loss function: 4.795, Average Loss: 5.011, avg. samples / sec: 542.90
Iteration:   5000, Loss function: 4.741, Average Loss: 5.007, avg. samples / sec: 539.85
Iteration:   5020, Loss function: 5.110, Average Loss: 5.003, avg. samples / sec: 541.91
Iteration:   5040, Loss function: 4.987, Average Loss: 5.000, avg. samples / sec: 540.56
Iteration:   5060, Loss function: 4.845, Average Loss: 4.997, avg. samples / sec: 541.36
Iteration:   5080, Loss function: 4.620, Average Loss: 4.992, avg. samples / sec: 542.83
Iteration:   5100, Loss function: 4.924, Average Loss: 4.990, avg. samples / sec: 542.96
Iteration:   5120, Loss function: 4.669, Average Loss: 4.988, avg. samples / sec: 544.21
Iteration:   5140, Loss function: 4.811, Average Loss: 4.985, avg. samples / sec: 541.79
:::MLLOG {"namespace": "", "time_ms": 1639759912746, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.15 s
:::MLLOG {"namespace": "", "time_ms": 1639759943955, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759944007, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759944012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.69s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.53s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10833
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21753
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09772
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19396
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13994
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21956
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21956
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10833 AP goal: 0.10000
Iteration:   5160, Loss function: 4.829, Average Loss: 4.980, avg. samples / sec: 64.37
:::MLLOG {"namespace": "", "time_ms": 1639759947531, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947532, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10833149363586785, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947532, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947741, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639759948
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 04:52:28 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:50 PM'
START TIMING RUN WAS 2021-12-17 04:32:50 PM
ENDING TIMING RUN AT 2021-12-17 04:52:28 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 04:52:28 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 3g.20gb     Device  0: (UUID: MIG-4313b2d5-471b-5871-9275-839c208e08d4)
+ result=1178
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1178,nvidia,2021-12-17 04:32:50 PM'
RESULT,SINGLE_STAGE_DETECTOR,,1178,nvidia,2021-12-17 04:32:50 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
