8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-16650044-81e5-5792-b10c-b3a9728acd8e)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-16650044-81e5-5792-b10c-b3a9728acd8e
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-16650044-81e5-5792-b10c-b3a9728acd8e
+ echo 'Found 1 MIG instances: MIG-16650044-81e5-5792-b10c-b3a9728acd8e'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758769
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:49 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-2g-10gb--1-jgktz to the sync file ...
run-mlperf-mig-2g-10gb--1-jgktz Found 4 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
     2	run-mlperf-mig-2g-10gb--1-ggjwh
     3	run-mlperf-mig-3g-20gb--1-r7rqb
     4	run-mlperf-mig-2g-10gb--1-jgktz
Fri Dec 17 16:32:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-16650044-81e5-5792-b10c-b3a9728acd8e)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777085, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777185, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1499775177, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1499775177
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758779116, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779116, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779119, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779119, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758880924, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758880924, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758882507, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758882507, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758882797, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758882798, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758882800, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.918, Average Loss: 0.023, avg. samples / sec: 1.10
Iteration:     20, Loss function: 21.204, Average Loss: 0.459, avg. samples / sec: 334.76
Iteration:     40, Loss function: 20.784, Average Loss: 0.861, avg. samples / sec: 344.52
Iteration:     60, Loss function: 20.353, Average Loss: 1.251, avg. samples / sec: 346.33
Iteration:     80, Loss function: 19.877, Average Loss: 1.624, avg. samples / sec: 346.38
Iteration:    100, Loss function: 15.516, Average Loss: 1.948, avg. samples / sec: 334.03
Iteration:    120, Loss function: 11.125, Average Loss: 2.154, avg. samples / sec: 347.22
Iteration:    140, Loss function: 9.584, Average Loss: 2.313, avg. samples / sec: 346.52
Iteration:    160, Loss function: 9.289, Average Loss: 2.453, avg. samples / sec: 349.57
Iteration:    180, Loss function: 9.032, Average Loss: 2.582, avg. samples / sec: 349.94
Iteration:    200, Loss function: 8.724, Average Loss: 2.708, avg. samples / sec: 348.85
Iteration:    220, Loss function: 8.757, Average Loss: 2.831, avg. samples / sec: 348.60
Iteration:    240, Loss function: 8.630, Average Loss: 2.949, avg. samples / sec: 350.28
Iteration:    260, Loss function: 8.736, Average Loss: 3.062, avg. samples / sec: 350.65
Iteration:    280, Loss function: 8.717, Average Loss: 3.173, avg. samples / sec: 348.58
Iteration:    300, Loss function: 8.276, Average Loss: 3.279, avg. samples / sec: 337.92
Iteration:    320, Loss function: 8.405, Average Loss: 3.380, avg. samples / sec: 350.06
Iteration:    340, Loss function: 8.491, Average Loss: 3.478, avg. samples / sec: 350.77
Iteration:    360, Loss function: 8.127, Average Loss: 3.572, avg. samples / sec: 351.29
Iteration:    380, Loss function: 8.310, Average Loss: 3.663, avg. samples / sec: 350.75
Iteration:    400, Loss function: 8.197, Average Loss: 3.752, avg. samples / sec: 350.44
Iteration:    420, Loss function: 7.719, Average Loss: 3.834, avg. samples / sec: 350.32
Iteration:    440, Loss function: 7.780, Average Loss: 3.913, avg. samples / sec: 350.93
Iteration:    460, Loss function: 7.798, Average Loss: 3.989, avg. samples / sec: 351.09
Iteration:    480, Loss function: 7.454, Average Loss: 4.062, avg. samples / sec: 350.70
Iteration:    500, Loss function: 7.674, Average Loss: 4.133, avg. samples / sec: 350.93
Iteration:    520, Loss function: 7.531, Average Loss: 4.202, avg. samples / sec: 350.34
Iteration:    540, Loss function: 7.395, Average Loss: 4.267, avg. samples / sec: 351.16
Iteration:    560, Loss function: 7.187, Average Loss: 4.330, avg. samples / sec: 350.58
Iteration:    580, Loss function: 7.151, Average Loss: 4.390, avg. samples / sec: 350.72
Iteration:    600, Loss function: 7.258, Average Loss: 4.450, avg. samples / sec: 350.94
Iteration:    620, Loss function: 6.970, Average Loss: 4.504, avg. samples / sec: 351.10
Iteration:    640, Loss function: 6.905, Average Loss: 4.560, avg. samples / sec: 351.30
Iteration:    660, Loss function: 7.025, Average Loss: 4.612, avg. samples / sec: 351.31
Iteration:    680, Loss function: 7.193, Average Loss: 4.663, avg. samples / sec: 351.62
Iteration:    700, Loss function: 6.764, Average Loss: 4.710, avg. samples / sec: 351.29
Iteration:    720, Loss function: 6.895, Average Loss: 4.759, avg. samples / sec: 351.45
Iteration:    740, Loss function: 6.977, Average Loss: 4.804, avg. samples / sec: 351.37
Iteration:    760, Loss function: 6.950, Average Loss: 4.847, avg. samples / sec: 351.43
Iteration:    780, Loss function: 6.847, Average Loss: 4.889, avg. samples / sec: 351.70
Iteration:    800, Loss function: 7.120, Average Loss: 4.929, avg. samples / sec: 351.49
Iteration:    820, Loss function: 6.946, Average Loss: 4.967, avg. samples / sec: 351.03
Iteration:    840, Loss function: 6.697, Average Loss: 5.002, avg. samples / sec: 351.32
Iteration:    860, Loss function: 6.642, Average Loss: 5.038, avg. samples / sec: 351.49
Iteration:    880, Loss function: 6.703, Average Loss: 5.070, avg. samples / sec: 350.47
Iteration:    900, Loss function: 6.793, Average Loss: 5.101, avg. samples / sec: 351.10
Iteration:    920, Loss function: 6.621, Average Loss: 5.131, avg. samples / sec: 351.42
Iteration:    940, Loss function: 6.703, Average Loss: 5.161, avg. samples / sec: 351.18
Iteration:    960, Loss function: 6.285, Average Loss: 5.189, avg. samples / sec: 350.95
Iteration:    980, Loss function: 6.385, Average Loss: 5.216, avg. samples / sec: 350.79
Iteration:   1000, Loss function: 6.766, Average Loss: 5.241, avg. samples / sec: 350.83
Iteration:   1020, Loss function: 6.338, Average Loss: 5.265, avg. samples / sec: 350.63
:::MLLOG {"namespace": "", "time_ms": 1639759218357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759218358, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.519, Average Loss: 5.288, avg. samples / sec: 351.59
Iteration:   1060, Loss function: 6.322, Average Loss: 5.310, avg. samples / sec: 351.26
Iteration:   1080, Loss function: 6.352, Average Loss: 5.332, avg. samples / sec: 351.43
Iteration:   1100, Loss function: 6.207, Average Loss: 5.352, avg. samples / sec: 351.49
Iteration:   1120, Loss function: 6.314, Average Loss: 5.372, avg. samples / sec: 351.64
Iteration:   1140, Loss function: 6.389, Average Loss: 5.391, avg. samples / sec: 351.36
Iteration:   1160, Loss function: 6.141, Average Loss: 5.408, avg. samples / sec: 351.47
Iteration:   1180, Loss function: 6.235, Average Loss: 5.425, avg. samples / sec: 351.47
Iteration:   1200, Loss function: 6.286, Average Loss: 5.440, avg. samples / sec: 351.60
Iteration:   1220, Loss function: 5.996, Average Loss: 5.455, avg. samples / sec: 351.32
Iteration:   1240, Loss function: 5.955, Average Loss: 5.468, avg. samples / sec: 351.00
Iteration:   1260, Loss function: 6.056, Average Loss: 5.479, avg. samples / sec: 351.35
Iteration:   1280, Loss function: 5.951, Average Loss: 5.491, avg. samples / sec: 351.18
Iteration:   1300, Loss function: 6.213, Average Loss: 5.505, avg. samples / sec: 351.07
Iteration:   1320, Loss function: 6.103, Average Loss: 5.517, avg. samples / sec: 351.34
Iteration:   1340, Loss function: 5.874, Average Loss: 5.526, avg. samples / sec: 350.94
Iteration:   1360, Loss function: 5.933, Average Loss: 5.536, avg. samples / sec: 351.31
Iteration:   1380, Loss function: 6.152, Average Loss: 5.546, avg. samples / sec: 351.35
Iteration:   1400, Loss function: 6.197, Average Loss: 5.555, avg. samples / sec: 351.05
Iteration:   1420, Loss function: 5.776, Average Loss: 5.563, avg. samples / sec: 351.08
Iteration:   1440, Loss function: 6.157, Average Loss: 5.571, avg. samples / sec: 351.28
Iteration:   1460, Loss function: 6.191, Average Loss: 5.579, avg. samples / sec: 351.37
Iteration:   1480, Loss function: 5.932, Average Loss: 5.587, avg. samples / sec: 351.16
Iteration:   1500, Loss function: 5.969, Average Loss: 5.595, avg. samples / sec: 351.10
Iteration:   1520, Loss function: 6.047, Average Loss: 5.601, avg. samples / sec: 351.14
Iteration:   1540, Loss function: 5.961, Average Loss: 5.605, avg. samples / sec: 351.29
Iteration:   1560, Loss function: 5.658, Average Loss: 5.609, avg. samples / sec: 351.50
Iteration:   1580, Loss function: 5.750, Average Loss: 5.615, avg. samples / sec: 351.48
Iteration:   1600, Loss function: 6.074, Average Loss: 5.621, avg. samples / sec: 351.90
Iteration:   1620, Loss function: 5.669, Average Loss: 5.626, avg. samples / sec: 351.30
Iteration:   1640, Loss function: 5.854, Average Loss: 5.629, avg. samples / sec: 351.49
Iteration:   1660, Loss function: 5.900, Average Loss: 5.633, avg. samples / sec: 351.29
Iteration:   1680, Loss function: 5.786, Average Loss: 5.637, avg. samples / sec: 351.60
Iteration:   1700, Loss function: 5.520, Average Loss: 5.641, avg. samples / sec: 351.56
Iteration:   1720, Loss function: 5.966, Average Loss: 5.644, avg. samples / sec: 351.43
Iteration:   1740, Loss function: 5.872, Average Loss: 5.647, avg. samples / sec: 351.50
Iteration:   1760, Loss function: 5.396, Average Loss: 5.648, avg. samples / sec: 351.30
Iteration:   1780, Loss function: 5.699, Average Loss: 5.650, avg. samples / sec: 351.40
Iteration:   1800, Loss function: 5.527, Average Loss: 5.652, avg. samples / sec: 351.47
Iteration:   1820, Loss function: 6.171, Average Loss: 5.654, avg. samples / sec: 351.17
Iteration:   1840, Loss function: 5.845, Average Loss: 5.654, avg. samples / sec: 351.67
Iteration:   1860, Loss function: 5.623, Average Loss: 5.654, avg. samples / sec: 351.22
Iteration:   1880, Loss function: 5.845, Average Loss: 5.655, avg. samples / sec: 351.42
Iteration:   1900, Loss function: 6.031, Average Loss: 5.657, avg. samples / sec: 351.16
Iteration:   1920, Loss function: 6.006, Average Loss: 5.657, avg. samples / sec: 351.28
Iteration:   1940, Loss function: 5.762, Average Loss: 5.656, avg. samples / sec: 351.32
Iteration:   1960, Loss function: 5.585, Average Loss: 5.654, avg. samples / sec: 351.43
Iteration:   1980, Loss function: 5.796, Average Loss: 5.653, avg. samples / sec: 351.19
Iteration:   2000, Loss function: 5.733, Average Loss: 5.653, avg. samples / sec: 351.20
Iteration:   2020, Loss function: 5.608, Average Loss: 5.652, avg. samples / sec: 351.08
Iteration:   2040, Loss function: 5.751, Average Loss: 5.652, avg. samples / sec: 351.02
:::MLLOG {"namespace": "", "time_ms": 1639759552255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759552257, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.469, Average Loss: 5.649, avg. samples / sec: 351.14
Iteration:   2080, Loss function: 5.155, Average Loss: 5.646, avg. samples / sec: 351.03
Iteration:   2100, Loss function: 5.354, Average Loss: 5.644, avg. samples / sec: 350.75
Iteration:   2120, Loss function: 5.330, Average Loss: 5.640, avg. samples / sec: 351.26
Iteration:   2140, Loss function: 5.570, Average Loss: 5.638, avg. samples / sec: 351.43
Iteration:   2160, Loss function: 5.368, Average Loss: 5.635, avg. samples / sec: 351.56
Iteration:   2180, Loss function: 5.446, Average Loss: 5.633, avg. samples / sec: 351.41
Iteration:   2200, Loss function: 5.584, Average Loss: 5.629, avg. samples / sec: 351.50
Iteration:   2220, Loss function: 5.453, Average Loss: 5.626, avg. samples / sec: 351.41
Iteration:   2240, Loss function: 5.499, Average Loss: 5.623, avg. samples / sec: 351.84
Iteration:   2260, Loss function: 5.339, Average Loss: 5.620, avg. samples / sec: 351.47
Iteration:   2280, Loss function: 5.338, Average Loss: 5.617, avg. samples / sec: 351.34
Iteration:   2300, Loss function: 5.024, Average Loss: 5.613, avg. samples / sec: 350.88
Iteration:   2320, Loss function: 5.253, Average Loss: 5.611, avg. samples / sec: 351.24
Iteration:   2340, Loss function: 5.514, Average Loss: 5.607, avg. samples / sec: 351.39
Iteration:   2360, Loss function: 5.235, Average Loss: 5.603, avg. samples / sec: 351.13
Iteration:   2380, Loss function: 5.485, Average Loss: 5.599, avg. samples / sec: 351.35
Iteration:   2400, Loss function: 5.655, Average Loss: 5.594, avg. samples / sec: 351.31
Iteration:   2420, Loss function: 5.454, Average Loss: 5.591, avg. samples / sec: 351.25
Iteration:   2440, Loss function: 5.367, Average Loss: 5.588, avg. samples / sec: 351.58
Iteration:   2460, Loss function: 5.250, Average Loss: 5.585, avg. samples / sec: 351.75
Iteration:   2480, Loss function: 5.156, Average Loss: 5.581, avg. samples / sec: 351.13
Iteration:   2500, Loss function: 5.517, Average Loss: 5.577, avg. samples / sec: 351.02
Iteration:   2520, Loss function: 5.521, Average Loss: 5.572, avg. samples / sec: 351.38
Iteration:   2540, Loss function: 5.368, Average Loss: 5.569, avg. samples / sec: 351.41
Iteration:   2560, Loss function: 5.143, Average Loss: 5.566, avg. samples / sec: 351.10
Iteration:   2580, Loss function: 5.334, Average Loss: 5.563, avg. samples / sec: 351.55
Iteration:   2600, Loss function: 5.383, Average Loss: 5.560, avg. samples / sec: 351.35
Iteration:   2620, Loss function: 5.460, Average Loss: 5.555, avg. samples / sec: 350.98
Iteration:   2640, Loss function: 5.177, Average Loss: 5.552, avg. samples / sec: 350.74
Iteration:   2660, Loss function: 5.164, Average Loss: 5.548, avg. samples / sec: 351.49
Iteration:   2680, Loss function: 5.203, Average Loss: 5.545, avg. samples / sec: 351.45
Iteration:   2700, Loss function: 5.384, Average Loss: 5.540, avg. samples / sec: 351.57
Iteration:   2720, Loss function: 5.198, Average Loss: 5.536, avg. samples / sec: 351.15
Iteration:   2740, Loss function: 4.979, Average Loss: 5.532, avg. samples / sec: 350.67
Iteration:   2760, Loss function: 5.048, Average Loss: 5.526, avg. samples / sec: 351.36
Iteration:   2780, Loss function: 5.377, Average Loss: 5.522, avg. samples / sec: 351.75
Iteration:   2800, Loss function: 5.375, Average Loss: 5.516, avg. samples / sec: 351.47
Iteration:   2820, Loss function: 5.440, Average Loss: 5.511, avg. samples / sec: 351.45
Iteration:   2840, Loss function: 5.147, Average Loss: 5.506, avg. samples / sec: 350.86
Iteration:   2860, Loss function: 5.256, Average Loss: 5.501, avg. samples / sec: 350.89
Iteration:   2880, Loss function: 5.277, Average Loss: 5.497, avg. samples / sec: 351.11
Iteration:   2900, Loss function: 5.040, Average Loss: 5.492, avg. samples / sec: 351.05
Iteration:   2920, Loss function: 5.096, Average Loss: 5.486, avg. samples / sec: 351.03
Iteration:   2940, Loss function: 5.072, Average Loss: 5.482, avg. samples / sec: 351.25
Iteration:   2960, Loss function: 5.479, Average Loss: 5.477, avg. samples / sec: 351.32
Iteration:   2980, Loss function: 5.229, Average Loss: 5.473, avg. samples / sec: 350.93
Iteration:   3000, Loss function: 5.285, Average Loss: 5.466, avg. samples / sec: 351.14
Iteration:   3020, Loss function: 5.256, Average Loss: 5.460, avg. samples / sec: 350.56
Iteration:   3040, Loss function: 5.206, Average Loss: 5.456, avg. samples / sec: 351.23
Iteration:   3060, Loss function: 4.987, Average Loss: 5.449, avg. samples / sec: 351.47
Iteration:   3080, Loss function: 4.833, Average Loss: 5.443, avg. samples / sec: 351.50
:::MLLOG {"namespace": "", "time_ms": 1639759885889, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759885890, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.127, Average Loss: 5.438, avg. samples / sec: 351.67
Iteration:   3120, Loss function: 5.113, Average Loss: 5.432, avg. samples / sec: 351.15
Iteration:   3140, Loss function: 5.094, Average Loss: 5.427, avg. samples / sec: 351.31
Iteration:   3160, Loss function: 5.407, Average Loss: 5.422, avg. samples / sec: 351.06
Iteration:   3180, Loss function: 5.086, Average Loss: 5.416, avg. samples / sec: 351.13
Iteration:   3200, Loss function: 5.314, Average Loss: 5.411, avg. samples / sec: 350.88
Iteration:   3220, Loss function: 5.135, Average Loss: 5.405, avg. samples / sec: 351.02
Iteration:   3240, Loss function: 5.139, Average Loss: 5.399, avg. samples / sec: 351.26
Iteration:   3260, Loss function: 5.203, Average Loss: 5.393, avg. samples / sec: 351.27
Iteration:   3280, Loss function: 4.910, Average Loss: 5.387, avg. samples / sec: 351.57
Iteration:   3300, Loss function: 4.901, Average Loss: 5.381, avg. samples / sec: 351.36
Iteration:   3320, Loss function: 4.995, Average Loss: 5.377, avg. samples / sec: 352.43
Iteration:   3340, Loss function: 5.237, Average Loss: 5.372, avg. samples / sec: 352.97
Iteration:   3360, Loss function: 5.013, Average Loss: 5.365, avg. samples / sec: 353.03
Iteration:   3380, Loss function: 5.047, Average Loss: 5.358, avg. samples / sec: 352.54
Iteration:   3400, Loss function: 4.893, Average Loss: 5.353, avg. samples / sec: 351.88
Iteration:   3420, Loss function: 5.154, Average Loss: 5.348, avg. samples / sec: 352.13
Iteration:   3440, Loss function: 4.946, Average Loss: 5.342, avg. samples / sec: 352.23
Iteration:   3460, Loss function: 5.222, Average Loss: 5.337, avg. samples / sec: 351.88
Iteration:   3480, Loss function: 5.126, Average Loss: 5.333, avg. samples / sec: 351.91
Iteration:   3500, Loss function: 5.055, Average Loss: 5.329, avg. samples / sec: 352.16
Iteration:   3520, Loss function: 4.879, Average Loss: 5.325, avg. samples / sec: 352.40
Iteration:   3540, Loss function: 5.377, Average Loss: 5.321, avg. samples / sec: 351.54
Iteration:   3560, Loss function: 4.945, Average Loss: 5.317, avg. samples / sec: 351.88
Iteration:   3580, Loss function: 5.058, Average Loss: 5.313, avg. samples / sec: 351.52
Iteration:   3600, Loss function: 5.134, Average Loss: 5.306, avg. samples / sec: 352.21
Iteration:   3620, Loss function: 4.946, Average Loss: 5.302, avg. samples / sec: 352.38
Iteration:   3640, Loss function: 4.669, Average Loss: 5.296, avg. samples / sec: 352.27
Iteration:   3660, Loss function: 5.133, Average Loss: 5.291, avg. samples / sec: 352.26
Iteration:   3680, Loss function: 5.055, Average Loss: 5.285, avg. samples / sec: 352.25
Iteration:   3700, Loss function: 5.024, Average Loss: 5.280, avg. samples / sec: 352.20
Iteration:   3720, Loss function: 4.972, Average Loss: 5.274, avg. samples / sec: 352.06
Iteration:   3740, Loss function: 5.175, Average Loss: 5.271, avg. samples / sec: 351.87
Iteration:   3760, Loss function: 5.182, Average Loss: 5.267, avg. samples / sec: 351.61
Iteration:   3780, Loss function: 5.046, Average Loss: 5.262, avg. samples / sec: 351.78
Iteration:   3800, Loss function: 4.995, Average Loss: 5.258, avg. samples / sec: 351.75
Iteration:   3820, Loss function: 5.194, Average Loss: 5.254, avg. samples / sec: 351.92
Iteration:   3840, Loss function: 4.876, Average Loss: 5.249, avg. samples / sec: 351.78
Iteration:   3860, Loss function: 4.935, Average Loss: 5.244, avg. samples / sec: 351.86
Iteration:   3880, Loss function: 4.958, Average Loss: 5.238, avg. samples / sec: 351.46
Iteration:   3900, Loss function: 5.108, Average Loss: 5.233, avg. samples / sec: 351.53
Iteration:   3920, Loss function: 5.033, Average Loss: 5.228, avg. samples / sec: 351.63
Iteration:   3940, Loss function: 5.140, Average Loss: 5.223, avg. samples / sec: 351.64
Iteration:   3960, Loss function: 4.687, Average Loss: 5.219, avg. samples / sec: 351.40
Iteration:   3980, Loss function: 4.886, Average Loss: 5.214, avg. samples / sec: 352.03
Iteration:   4000, Loss function: 5.239, Average Loss: 5.211, avg. samples / sec: 352.15
Iteration:   4020, Loss function: 4.950, Average Loss: 5.206, avg. samples / sec: 352.33
Iteration:   4040, Loss function: 5.124, Average Loss: 5.202, avg. samples / sec: 352.18
Iteration:   4060, Loss function: 5.138, Average Loss: 5.198, avg. samples / sec: 352.42
Iteration:   4080, Loss function: 5.068, Average Loss: 5.193, avg. samples / sec: 352.30
Iteration:   4100, Loss function: 5.084, Average Loss: 5.190, avg. samples / sec: 352.27
:::MLLOG {"namespace": "", "time_ms": 1639760219260, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760219261, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.949, Average Loss: 5.186, avg. samples / sec: 352.17
Iteration:   4140, Loss function: 4.870, Average Loss: 5.181, avg. samples / sec: 352.25
Iteration:   4160, Loss function: 4.874, Average Loss: 5.174, avg. samples / sec: 352.23
Iteration:   4180, Loss function: 4.963, Average Loss: 5.168, avg. samples / sec: 352.53
Iteration:   4200, Loss function: 4.802, Average Loss: 5.164, avg. samples / sec: 352.57
Iteration:   4220, Loss function: 4.885, Average Loss: 5.158, avg. samples / sec: 352.57
Iteration:   4240, Loss function: 5.039, Average Loss: 5.153, avg. samples / sec: 352.27
Iteration:   4260, Loss function: 5.075, Average Loss: 5.149, avg. samples / sec: 352.33
Iteration:   4280, Loss function: 5.033, Average Loss: 5.143, avg. samples / sec: 352.53
Iteration:   4300, Loss function: 4.748, Average Loss: 5.138, avg. samples / sec: 352.66
Iteration:   4320, Loss function: 4.865, Average Loss: 5.133, avg. samples / sec: 352.74
Iteration:   4340, Loss function: 4.653, Average Loss: 5.128, avg. samples / sec: 352.61
Iteration:   4360, Loss function: 4.844, Average Loss: 5.124, avg. samples / sec: 352.60
Iteration:   4380, Loss function: 4.980, Average Loss: 5.120, avg. samples / sec: 352.54
Iteration:   4400, Loss function: 4.749, Average Loss: 5.115, avg. samples / sec: 352.54
Iteration:   4420, Loss function: 4.782, Average Loss: 5.110, avg. samples / sec: 352.50
Iteration:   4440, Loss function: 5.109, Average Loss: 5.106, avg. samples / sec: 352.43
Iteration:   4460, Loss function: 5.100, Average Loss: 5.102, avg. samples / sec: 352.65
Iteration:   4480, Loss function: 5.067, Average Loss: 5.100, avg. samples / sec: 352.30
Iteration:   4500, Loss function: 4.915, Average Loss: 5.096, avg. samples / sec: 352.49
Iteration:   4520, Loss function: 4.636, Average Loss: 5.092, avg. samples / sec: 352.15
Iteration:   4540, Loss function: 5.112, Average Loss: 5.087, avg. samples / sec: 352.12
Iteration:   4560, Loss function: 4.695, Average Loss: 5.083, avg. samples / sec: 352.11
Iteration:   4580, Loss function: 4.750, Average Loss: 5.080, avg. samples / sec: 352.07
Iteration:   4600, Loss function: 4.711, Average Loss: 5.076, avg. samples / sec: 351.67
Iteration:   4620, Loss function: 4.741, Average Loss: 5.071, avg. samples / sec: 351.82
Iteration:   4640, Loss function: 4.795, Average Loss: 5.066, avg. samples / sec: 351.81
Iteration:   4660, Loss function: 4.557, Average Loss: 5.062, avg. samples / sec: 351.97
Iteration:   4680, Loss function: 5.188, Average Loss: 5.057, avg. samples / sec: 351.97
Iteration:   4700, Loss function: 4.654, Average Loss: 5.053, avg. samples / sec: 351.88
Iteration:   4720, Loss function: 4.770, Average Loss: 5.048, avg. samples / sec: 352.40
Iteration:   4740, Loss function: 4.830, Average Loss: 5.044, avg. samples / sec: 352.39
Iteration:   4760, Loss function: 4.618, Average Loss: 5.041, avg. samples / sec: 352.62
Iteration:   4780, Loss function: 4.954, Average Loss: 5.037, avg. samples / sec: 352.16
Iteration:   4800, Loss function: 4.833, Average Loss: 5.034, avg. samples / sec: 352.04
Iteration:   4820, Loss function: 4.764, Average Loss: 5.031, avg. samples / sec: 352.06
Iteration:   4840, Loss function: 5.058, Average Loss: 5.027, avg. samples / sec: 352.03
Iteration:   4860, Loss function: 4.680, Average Loss: 5.023, avg. samples / sec: 352.10
Iteration:   4880, Loss function: 5.072, Average Loss: 5.020, avg. samples / sec: 352.27
Iteration:   4900, Loss function: 4.590, Average Loss: 5.016, avg. samples / sec: 352.29
Iteration:   4920, Loss function: 4.674, Average Loss: 5.012, avg. samples / sec: 352.29
Iteration:   4940, Loss function: 4.637, Average Loss: 5.008, avg. samples / sec: 352.21
Iteration:   4960, Loss function: 4.680, Average Loss: 5.004, avg. samples / sec: 351.51
Iteration:   4980, Loss function: 4.650, Average Loss: 5.001, avg. samples / sec: 352.08
Iteration:   5000, Loss function: 4.834, Average Loss: 4.997, avg. samples / sec: 352.07
Iteration:   5020, Loss function: 5.037, Average Loss: 4.993, avg. samples / sec: 351.97
Iteration:   5040, Loss function: 4.968, Average Loss: 4.990, avg. samples / sec: 351.73
Iteration:   5060, Loss function: 4.803, Average Loss: 4.987, avg. samples / sec: 352.31
Iteration:   5080, Loss function: 4.454, Average Loss: 4.983, avg. samples / sec: 352.02
Iteration:   5100, Loss function: 4.715, Average Loss: 4.980, avg. samples / sec: 351.06
Iteration:   5120, Loss function: 4.554, Average Loss: 4.978, avg. samples / sec: 351.17
Iteration:   5140, Loss function: 4.862, Average Loss: 4.974, avg. samples / sec: 351.47
:::MLLOG {"namespace": "", "time_ms": 1639760552351, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.60 s
:::MLLOG {"namespace": "", "time_ms": 1639760585000, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760585045, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760585048, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.55s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.93s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10536
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21551
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09384
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19050
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13604
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21258
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21258
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10536 AP goal: 0.10000
Iteration:   5160, Loss function: 4.828, Average Loss: 4.970, avg. samples / sec: 58.45
:::MLLOG {"namespace": "", "time_ms": 1639760590386, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590387, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10536358394292136, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590387, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590664, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:03:11 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:03:11 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777085, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777185, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1499775177, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1499775177
:::MLLOG {"namespace": "", "time_ms": 1639758779116, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779116, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779119, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779119, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779120, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758880924, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758880924, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758882507, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758882507, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758882797, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758882798, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758882800, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.918, Average Loss: 0.023, avg. samples / sec: 1.10
Iteration:     20, Loss function: 21.204, Average Loss: 0.459, avg. samples / sec: 334.76
Iteration:     40, Loss function: 20.784, Average Loss: 0.861, avg. samples / sec: 344.52
Iteration:     60, Loss function: 20.353, Average Loss: 1.251, avg. samples / sec: 346.33
Iteration:     80, Loss function: 19.877, Average Loss: 1.624, avg. samples / sec: 346.38
Iteration:    100, Loss function: 15.516, Average Loss: 1.948, avg. samples / sec: 334.03
Iteration:    120, Loss function: 11.125, Average Loss: 2.154, avg. samples / sec: 347.22
Iteration:    140, Loss function: 9.584, Average Loss: 2.313, avg. samples / sec: 346.52
Iteration:    160, Loss function: 9.289, Average Loss: 2.453, avg. samples / sec: 349.57
Iteration:    180, Loss function: 9.032, Average Loss: 2.582, avg. samples / sec: 349.94
Iteration:    200, Loss function: 8.724, Average Loss: 2.708, avg. samples / sec: 348.85
Iteration:    220, Loss function: 8.757, Average Loss: 2.831, avg. samples / sec: 348.60
Iteration:    240, Loss function: 8.630, Average Loss: 2.949, avg. samples / sec: 350.28
Iteration:    260, Loss function: 8.736, Average Loss: 3.062, avg. samples / sec: 350.65
Iteration:    280, Loss function: 8.717, Average Loss: 3.173, avg. samples / sec: 348.58
Iteration:    300, Loss function: 8.276, Average Loss: 3.279, avg. samples / sec: 337.92
Iteration:    320, Loss function: 8.405, Average Loss: 3.380, avg. samples / sec: 350.06
Iteration:    340, Loss function: 8.491, Average Loss: 3.478, avg. samples / sec: 350.77
Iteration:    360, Loss function: 8.127, Average Loss: 3.572, avg. samples / sec: 351.29
Iteration:    380, Loss function: 8.310, Average Loss: 3.663, avg. samples / sec: 350.75
Iteration:    400, Loss function: 8.197, Average Loss: 3.752, avg. samples / sec: 350.44
Iteration:    420, Loss function: 7.719, Average Loss: 3.834, avg. samples / sec: 350.32
Iteration:    440, Loss function: 7.780, Average Loss: 3.913, avg. samples / sec: 350.93
Iteration:    460, Loss function: 7.798, Average Loss: 3.989, avg. samples / sec: 351.09
Iteration:    480, Loss function: 7.454, Average Loss: 4.062, avg. samples / sec: 350.70
Iteration:    500, Loss function: 7.674, Average Loss: 4.133, avg. samples / sec: 350.93
Iteration:    520, Loss function: 7.531, Average Loss: 4.202, avg. samples / sec: 350.34
Iteration:    540, Loss function: 7.395, Average Loss: 4.267, avg. samples / sec: 351.16
Iteration:    560, Loss function: 7.187, Average Loss: 4.330, avg. samples / sec: 350.58
Iteration:    580, Loss function: 7.151, Average Loss: 4.390, avg. samples / sec: 350.72
Iteration:    600, Loss function: 7.258, Average Loss: 4.450, avg. samples / sec: 350.94
Iteration:    620, Loss function: 6.970, Average Loss: 4.504, avg. samples / sec: 351.10
Iteration:    640, Loss function: 6.905, Average Loss: 4.560, avg. samples / sec: 351.30
Iteration:    660, Loss function: 7.025, Average Loss: 4.612, avg. samples / sec: 351.31
Iteration:    680, Loss function: 7.193, Average Loss: 4.663, avg. samples / sec: 351.62
Iteration:    700, Loss function: 6.764, Average Loss: 4.710, avg. samples / sec: 351.29
Iteration:    720, Loss function: 6.895, Average Loss: 4.759, avg. samples / sec: 351.45
Iteration:    740, Loss function: 6.977, Average Loss: 4.804, avg. samples / sec: 351.37
Iteration:    760, Loss function: 6.950, Average Loss: 4.847, avg. samples / sec: 351.43
Iteration:    780, Loss function: 6.847, Average Loss: 4.889, avg. samples / sec: 351.70
Iteration:    800, Loss function: 7.120, Average Loss: 4.929, avg. samples / sec: 351.49
Iteration:    820, Loss function: 6.946, Average Loss: 4.967, avg. samples / sec: 351.03
Iteration:    840, Loss function: 6.697, Average Loss: 5.002, avg. samples / sec: 351.32
Iteration:    860, Loss function: 6.642, Average Loss: 5.038, avg. samples / sec: 351.49
Iteration:    880, Loss function: 6.703, Average Loss: 5.070, avg. samples / sec: 350.47
Iteration:    900, Loss function: 6.793, Average Loss: 5.101, avg. samples / sec: 351.10
Iteration:    920, Loss function: 6.621, Average Loss: 5.131, avg. samples / sec: 351.42
Iteration:    940, Loss function: 6.703, Average Loss: 5.161, avg. samples / sec: 351.18
Iteration:    960, Loss function: 6.285, Average Loss: 5.189, avg. samples / sec: 350.95
Iteration:    980, Loss function: 6.385, Average Loss: 5.216, avg. samples / sec: 350.79
Iteration:   1000, Loss function: 6.766, Average Loss: 5.241, avg. samples / sec: 350.83
Iteration:   1020, Loss function: 6.338, Average Loss: 5.265, avg. samples / sec: 350.63
:::MLLOG {"namespace": "", "time_ms": 1639759218357, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759218358, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.519, Average Loss: 5.288, avg. samples / sec: 351.59
Iteration:   1060, Loss function: 6.322, Average Loss: 5.310, avg. samples / sec: 351.26
Iteration:   1080, Loss function: 6.352, Average Loss: 5.332, avg. samples / sec: 351.43
Iteration:   1100, Loss function: 6.207, Average Loss: 5.352, avg. samples / sec: 351.49
Iteration:   1120, Loss function: 6.314, Average Loss: 5.372, avg. samples / sec: 351.64
Iteration:   1140, Loss function: 6.389, Average Loss: 5.391, avg. samples / sec: 351.36
Iteration:   1160, Loss function: 6.141, Average Loss: 5.408, avg. samples / sec: 351.47
Iteration:   1180, Loss function: 6.235, Average Loss: 5.425, avg. samples / sec: 351.47
Iteration:   1200, Loss function: 6.286, Average Loss: 5.440, avg. samples / sec: 351.60
Iteration:   1220, Loss function: 5.996, Average Loss: 5.455, avg. samples / sec: 351.32
Iteration:   1240, Loss function: 5.955, Average Loss: 5.468, avg. samples / sec: 351.00
Iteration:   1260, Loss function: 6.056, Average Loss: 5.479, avg. samples / sec: 351.35
Iteration:   1280, Loss function: 5.951, Average Loss: 5.491, avg. samples / sec: 351.18
Iteration:   1300, Loss function: 6.213, Average Loss: 5.505, avg. samples / sec: 351.07
Iteration:   1320, Loss function: 6.103, Average Loss: 5.517, avg. samples / sec: 351.34
Iteration:   1340, Loss function: 5.874, Average Loss: 5.526, avg. samples / sec: 350.94
Iteration:   1360, Loss function: 5.933, Average Loss: 5.536, avg. samples / sec: 351.31
Iteration:   1380, Loss function: 6.152, Average Loss: 5.546, avg. samples / sec: 351.35
Iteration:   1400, Loss function: 6.197, Average Loss: 5.555, avg. samples / sec: 351.05
Iteration:   1420, Loss function: 5.776, Average Loss: 5.563, avg. samples / sec: 351.08
Iteration:   1440, Loss function: 6.157, Average Loss: 5.571, avg. samples / sec: 351.28
Iteration:   1460, Loss function: 6.191, Average Loss: 5.579, avg. samples / sec: 351.37
Iteration:   1480, Loss function: 5.932, Average Loss: 5.587, avg. samples / sec: 351.16
Iteration:   1500, Loss function: 5.969, Average Loss: 5.595, avg. samples / sec: 351.10
Iteration:   1520, Loss function: 6.047, Average Loss: 5.601, avg. samples / sec: 351.14
Iteration:   1540, Loss function: 5.961, Average Loss: 5.605, avg. samples / sec: 351.29
Iteration:   1560, Loss function: 5.658, Average Loss: 5.609, avg. samples / sec: 351.50
Iteration:   1580, Loss function: 5.750, Average Loss: 5.615, avg. samples / sec: 351.48
Iteration:   1600, Loss function: 6.074, Average Loss: 5.621, avg. samples / sec: 351.90
Iteration:   1620, Loss function: 5.669, Average Loss: 5.626, avg. samples / sec: 351.30
Iteration:   1640, Loss function: 5.854, Average Loss: 5.629, avg. samples / sec: 351.49
Iteration:   1660, Loss function: 5.900, Average Loss: 5.633, avg. samples / sec: 351.29
Iteration:   1680, Loss function: 5.786, Average Loss: 5.637, avg. samples / sec: 351.60
Iteration:   1700, Loss function: 5.520, Average Loss: 5.641, avg. samples / sec: 351.56
Iteration:   1720, Loss function: 5.966, Average Loss: 5.644, avg. samples / sec: 351.43
Iteration:   1740, Loss function: 5.872, Average Loss: 5.647, avg. samples / sec: 351.50
Iteration:   1760, Loss function: 5.396, Average Loss: 5.648, avg. samples / sec: 351.30
Iteration:   1780, Loss function: 5.699, Average Loss: 5.650, avg. samples / sec: 351.40
Iteration:   1800, Loss function: 5.527, Average Loss: 5.652, avg. samples / sec: 351.47
Iteration:   1820, Loss function: 6.171, Average Loss: 5.654, avg. samples / sec: 351.17
Iteration:   1840, Loss function: 5.845, Average Loss: 5.654, avg. samples / sec: 351.67
Iteration:   1860, Loss function: 5.623, Average Loss: 5.654, avg. samples / sec: 351.22
Iteration:   1880, Loss function: 5.845, Average Loss: 5.655, avg. samples / sec: 351.42
Iteration:   1900, Loss function: 6.031, Average Loss: 5.657, avg. samples / sec: 351.16
Iteration:   1920, Loss function: 6.006, Average Loss: 5.657, avg. samples / sec: 351.28
Iteration:   1940, Loss function: 5.762, Average Loss: 5.656, avg. samples / sec: 351.32
Iteration:   1960, Loss function: 5.585, Average Loss: 5.654, avg. samples / sec: 351.43
Iteration:   1980, Loss function: 5.796, Average Loss: 5.653, avg. samples / sec: 351.19
Iteration:   2000, Loss function: 5.733, Average Loss: 5.653, avg. samples / sec: 351.20
Iteration:   2020, Loss function: 5.608, Average Loss: 5.652, avg. samples / sec: 351.08
Iteration:   2040, Loss function: 5.751, Average Loss: 5.652, avg. samples / sec: 351.02
:::MLLOG {"namespace": "", "time_ms": 1639759552255, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759552257, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.469, Average Loss: 5.649, avg. samples / sec: 351.14
Iteration:   2080, Loss function: 5.155, Average Loss: 5.646, avg. samples / sec: 351.03
Iteration:   2100, Loss function: 5.354, Average Loss: 5.644, avg. samples / sec: 350.75
Iteration:   2120, Loss function: 5.330, Average Loss: 5.640, avg. samples / sec: 351.26
Iteration:   2140, Loss function: 5.570, Average Loss: 5.638, avg. samples / sec: 351.43
Iteration:   2160, Loss function: 5.368, Average Loss: 5.635, avg. samples / sec: 351.56
Iteration:   2180, Loss function: 5.446, Average Loss: 5.633, avg. samples / sec: 351.41
Iteration:   2200, Loss function: 5.584, Average Loss: 5.629, avg. samples / sec: 351.50
Iteration:   2220, Loss function: 5.453, Average Loss: 5.626, avg. samples / sec: 351.41
Iteration:   2240, Loss function: 5.499, Average Loss: 5.623, avg. samples / sec: 351.84
Iteration:   2260, Loss function: 5.339, Average Loss: 5.620, avg. samples / sec: 351.47
Iteration:   2280, Loss function: 5.338, Average Loss: 5.617, avg. samples / sec: 351.34
Iteration:   2300, Loss function: 5.024, Average Loss: 5.613, avg. samples / sec: 350.88
Iteration:   2320, Loss function: 5.253, Average Loss: 5.611, avg. samples / sec: 351.24
Iteration:   2340, Loss function: 5.514, Average Loss: 5.607, avg. samples / sec: 351.39
Iteration:   2360, Loss function: 5.235, Average Loss: 5.603, avg. samples / sec: 351.13
Iteration:   2380, Loss function: 5.485, Average Loss: 5.599, avg. samples / sec: 351.35
Iteration:   2400, Loss function: 5.655, Average Loss: 5.594, avg. samples / sec: 351.31
Iteration:   2420, Loss function: 5.454, Average Loss: 5.591, avg. samples / sec: 351.25
Iteration:   2440, Loss function: 5.367, Average Loss: 5.588, avg. samples / sec: 351.58
Iteration:   2460, Loss function: 5.250, Average Loss: 5.585, avg. samples / sec: 351.75
Iteration:   2480, Loss function: 5.156, Average Loss: 5.581, avg. samples / sec: 351.13
Iteration:   2500, Loss function: 5.517, Average Loss: 5.577, avg. samples / sec: 351.02
Iteration:   2520, Loss function: 5.521, Average Loss: 5.572, avg. samples / sec: 351.38
Iteration:   2540, Loss function: 5.368, Average Loss: 5.569, avg. samples / sec: 351.41
Iteration:   2560, Loss function: 5.143, Average Loss: 5.566, avg. samples / sec: 351.10
Iteration:   2580, Loss function: 5.334, Average Loss: 5.563, avg. samples / sec: 351.55
Iteration:   2600, Loss function: 5.383, Average Loss: 5.560, avg. samples / sec: 351.35
Iteration:   2620, Loss function: 5.460, Average Loss: 5.555, avg. samples / sec: 350.98
Iteration:   2640, Loss function: 5.177, Average Loss: 5.552, avg. samples / sec: 350.74
Iteration:   2660, Loss function: 5.164, Average Loss: 5.548, avg. samples / sec: 351.49
Iteration:   2680, Loss function: 5.203, Average Loss: 5.545, avg. samples / sec: 351.45
Iteration:   2700, Loss function: 5.384, Average Loss: 5.540, avg. samples / sec: 351.57
Iteration:   2720, Loss function: 5.198, Average Loss: 5.536, avg. samples / sec: 351.15
Iteration:   2740, Loss function: 4.979, Average Loss: 5.532, avg. samples / sec: 350.67
Iteration:   2760, Loss function: 5.048, Average Loss: 5.526, avg. samples / sec: 351.36
Iteration:   2780, Loss function: 5.377, Average Loss: 5.522, avg. samples / sec: 351.75
Iteration:   2800, Loss function: 5.375, Average Loss: 5.516, avg. samples / sec: 351.47
Iteration:   2820, Loss function: 5.440, Average Loss: 5.511, avg. samples / sec: 351.45
Iteration:   2840, Loss function: 5.147, Average Loss: 5.506, avg. samples / sec: 350.86
Iteration:   2860, Loss function: 5.256, Average Loss: 5.501, avg. samples / sec: 350.89
Iteration:   2880, Loss function: 5.277, Average Loss: 5.497, avg. samples / sec: 351.11
Iteration:   2900, Loss function: 5.040, Average Loss: 5.492, avg. samples / sec: 351.05
Iteration:   2920, Loss function: 5.096, Average Loss: 5.486, avg. samples / sec: 351.03
Iteration:   2940, Loss function: 5.072, Average Loss: 5.482, avg. samples / sec: 351.25
Iteration:   2960, Loss function: 5.479, Average Loss: 5.477, avg. samples / sec: 351.32
Iteration:   2980, Loss function: 5.229, Average Loss: 5.473, avg. samples / sec: 350.93
Iteration:   3000, Loss function: 5.285, Average Loss: 5.466, avg. samples / sec: 351.14
Iteration:   3020, Loss function: 5.256, Average Loss: 5.460, avg. samples / sec: 350.56
Iteration:   3040, Loss function: 5.206, Average Loss: 5.456, avg. samples / sec: 351.23
Iteration:   3060, Loss function: 4.987, Average Loss: 5.449, avg. samples / sec: 351.47
Iteration:   3080, Loss function: 4.833, Average Loss: 5.443, avg. samples / sec: 351.50
:::MLLOG {"namespace": "", "time_ms": 1639759885889, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759885890, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.127, Average Loss: 5.438, avg. samples / sec: 351.67
Iteration:   3120, Loss function: 5.113, Average Loss: 5.432, avg. samples / sec: 351.15
Iteration:   3140, Loss function: 5.094, Average Loss: 5.427, avg. samples / sec: 351.31
Iteration:   3160, Loss function: 5.407, Average Loss: 5.422, avg. samples / sec: 351.06
Iteration:   3180, Loss function: 5.086, Average Loss: 5.416, avg. samples / sec: 351.13
Iteration:   3200, Loss function: 5.314, Average Loss: 5.411, avg. samples / sec: 350.88
Iteration:   3220, Loss function: 5.135, Average Loss: 5.405, avg. samples / sec: 351.02
Iteration:   3240, Loss function: 5.139, Average Loss: 5.399, avg. samples / sec: 351.26
Iteration:   3260, Loss function: 5.203, Average Loss: 5.393, avg. samples / sec: 351.27
Iteration:   3280, Loss function: 4.910, Average Loss: 5.387, avg. samples / sec: 351.57
Iteration:   3300, Loss function: 4.901, Average Loss: 5.381, avg. samples / sec: 351.36
Iteration:   3320, Loss function: 4.995, Average Loss: 5.377, avg. samples / sec: 352.43
Iteration:   3340, Loss function: 5.237, Average Loss: 5.372, avg. samples / sec: 352.97
Iteration:   3360, Loss function: 5.013, Average Loss: 5.365, avg. samples / sec: 353.03
Iteration:   3380, Loss function: 5.047, Average Loss: 5.358, avg. samples / sec: 352.54
Iteration:   3400, Loss function: 4.893, Average Loss: 5.353, avg. samples / sec: 351.88
Iteration:   3420, Loss function: 5.154, Average Loss: 5.348, avg. samples / sec: 352.13
Iteration:   3440, Loss function: 4.946, Average Loss: 5.342, avg. samples / sec: 352.23
Iteration:   3460, Loss function: 5.222, Average Loss: 5.337, avg. samples / sec: 351.88
Iteration:   3480, Loss function: 5.126, Average Loss: 5.333, avg. samples / sec: 351.91
Iteration:   3500, Loss function: 5.055, Average Loss: 5.329, avg. samples / sec: 352.16
Iteration:   3520, Loss function: 4.879, Average Loss: 5.325, avg. samples / sec: 352.40
Iteration:   3540, Loss function: 5.377, Average Loss: 5.321, avg. samples / sec: 351.54
Iteration:   3560, Loss function: 4.945, Average Loss: 5.317, avg. samples / sec: 351.88
Iteration:   3580, Loss function: 5.058, Average Loss: 5.313, avg. samples / sec: 351.52
Iteration:   3600, Loss function: 5.134, Average Loss: 5.306, avg. samples / sec: 352.21
Iteration:   3620, Loss function: 4.946, Average Loss: 5.302, avg. samples / sec: 352.38
Iteration:   3640, Loss function: 4.669, Average Loss: 5.296, avg. samples / sec: 352.27
Iteration:   3660, Loss function: 5.133, Average Loss: 5.291, avg. samples / sec: 352.26
Iteration:   3680, Loss function: 5.055, Average Loss: 5.285, avg. samples / sec: 352.25
Iteration:   3700, Loss function: 5.024, Average Loss: 5.280, avg. samples / sec: 352.20
Iteration:   3720, Loss function: 4.972, Average Loss: 5.274, avg. samples / sec: 352.06
Iteration:   3740, Loss function: 5.175, Average Loss: 5.271, avg. samples / sec: 351.87
Iteration:   3760, Loss function: 5.182, Average Loss: 5.267, avg. samples / sec: 351.61
Iteration:   3780, Loss function: 5.046, Average Loss: 5.262, avg. samples / sec: 351.78
Iteration:   3800, Loss function: 4.995, Average Loss: 5.258, avg. samples / sec: 351.75
Iteration:   3820, Loss function: 5.194, Average Loss: 5.254, avg. samples / sec: 351.92
Iteration:   3840, Loss function: 4.876, Average Loss: 5.249, avg. samples / sec: 351.78
Iteration:   3860, Loss function: 4.935, Average Loss: 5.244, avg. samples / sec: 351.86
Iteration:   3880, Loss function: 4.958, Average Loss: 5.238, avg. samples / sec: 351.46
Iteration:   3900, Loss function: 5.108, Average Loss: 5.233, avg. samples / sec: 351.53
Iteration:   3920, Loss function: 5.033, Average Loss: 5.228, avg. samples / sec: 351.63
Iteration:   3940, Loss function: 5.140, Average Loss: 5.223, avg. samples / sec: 351.64
Iteration:   3960, Loss function: 4.687, Average Loss: 5.219, avg. samples / sec: 351.40
Iteration:   3980, Loss function: 4.886, Average Loss: 5.214, avg. samples / sec: 352.03
Iteration:   4000, Loss function: 5.239, Average Loss: 5.211, avg. samples / sec: 352.15
Iteration:   4020, Loss function: 4.950, Average Loss: 5.206, avg. samples / sec: 352.33
Iteration:   4040, Loss function: 5.124, Average Loss: 5.202, avg. samples / sec: 352.18
Iteration:   4060, Loss function: 5.138, Average Loss: 5.198, avg. samples / sec: 352.42
Iteration:   4080, Loss function: 5.068, Average Loss: 5.193, avg. samples / sec: 352.30
Iteration:   4100, Loss function: 5.084, Average Loss: 5.190, avg. samples / sec: 352.27
:::MLLOG {"namespace": "", "time_ms": 1639760219260, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760219261, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.949, Average Loss: 5.186, avg. samples / sec: 352.17
Iteration:   4140, Loss function: 4.870, Average Loss: 5.181, avg. samples / sec: 352.25
Iteration:   4160, Loss function: 4.874, Average Loss: 5.174, avg. samples / sec: 352.23
Iteration:   4180, Loss function: 4.963, Average Loss: 5.168, avg. samples / sec: 352.53
Iteration:   4200, Loss function: 4.802, Average Loss: 5.164, avg. samples / sec: 352.57
Iteration:   4220, Loss function: 4.885, Average Loss: 5.158, avg. samples / sec: 352.57
Iteration:   4240, Loss function: 5.039, Average Loss: 5.153, avg. samples / sec: 352.27
Iteration:   4260, Loss function: 5.075, Average Loss: 5.149, avg. samples / sec: 352.33
Iteration:   4280, Loss function: 5.033, Average Loss: 5.143, avg. samples / sec: 352.53
Iteration:   4300, Loss function: 4.748, Average Loss: 5.138, avg. samples / sec: 352.66
Iteration:   4320, Loss function: 4.865, Average Loss: 5.133, avg. samples / sec: 352.74
Iteration:   4340, Loss function: 4.653, Average Loss: 5.128, avg. samples / sec: 352.61
Iteration:   4360, Loss function: 4.844, Average Loss: 5.124, avg. samples / sec: 352.60
Iteration:   4380, Loss function: 4.980, Average Loss: 5.120, avg. samples / sec: 352.54
Iteration:   4400, Loss function: 4.749, Average Loss: 5.115, avg. samples / sec: 352.54
Iteration:   4420, Loss function: 4.782, Average Loss: 5.110, avg. samples / sec: 352.50
Iteration:   4440, Loss function: 5.109, Average Loss: 5.106, avg. samples / sec: 352.43
Iteration:   4460, Loss function: 5.100, Average Loss: 5.102, avg. samples / sec: 352.65
Iteration:   4480, Loss function: 5.067, Average Loss: 5.100, avg. samples / sec: 352.30
Iteration:   4500, Loss function: 4.915, Average Loss: 5.096, avg. samples / sec: 352.49
Iteration:   4520, Loss function: 4.636, Average Loss: 5.092, avg. samples / sec: 352.15
Iteration:   4540, Loss function: 5.112, Average Loss: 5.087, avg. samples / sec: 352.12
Iteration:   4560, Loss function: 4.695, Average Loss: 5.083, avg. samples / sec: 352.11
Iteration:   4580, Loss function: 4.750, Average Loss: 5.080, avg. samples / sec: 352.07
Iteration:   4600, Loss function: 4.711, Average Loss: 5.076, avg. samples / sec: 351.67
Iteration:   4620, Loss function: 4.741, Average Loss: 5.071, avg. samples / sec: 351.82
Iteration:   4640, Loss function: 4.795, Average Loss: 5.066, avg. samples / sec: 351.81
Iteration:   4660, Loss function: 4.557, Average Loss: 5.062, avg. samples / sec: 351.97
Iteration:   4680, Loss function: 5.188, Average Loss: 5.057, avg. samples / sec: 351.97
Iteration:   4700, Loss function: 4.654, Average Loss: 5.053, avg. samples / sec: 351.88
Iteration:   4720, Loss function: 4.770, Average Loss: 5.048, avg. samples / sec: 352.40
Iteration:   4740, Loss function: 4.830, Average Loss: 5.044, avg. samples / sec: 352.39
Iteration:   4760, Loss function: 4.618, Average Loss: 5.041, avg. samples / sec: 352.62
Iteration:   4780, Loss function: 4.954, Average Loss: 5.037, avg. samples / sec: 352.16
Iteration:   4800, Loss function: 4.833, Average Loss: 5.034, avg. samples / sec: 352.04
Iteration:   4820, Loss function: 4.764, Average Loss: 5.031, avg. samples / sec: 352.06
Iteration:   4840, Loss function: 5.058, Average Loss: 5.027, avg. samples / sec: 352.03
Iteration:   4860, Loss function: 4.680, Average Loss: 5.023, avg. samples / sec: 352.10
Iteration:   4880, Loss function: 5.072, Average Loss: 5.020, avg. samples / sec: 352.27
Iteration:   4900, Loss function: 4.590, Average Loss: 5.016, avg. samples / sec: 352.29
Iteration:   4920, Loss function: 4.674, Average Loss: 5.012, avg. samples / sec: 352.29
Iteration:   4940, Loss function: 4.637, Average Loss: 5.008, avg. samples / sec: 352.21
Iteration:   4960, Loss function: 4.680, Average Loss: 5.004, avg. samples / sec: 351.51
Iteration:   4980, Loss function: 4.650, Average Loss: 5.001, avg. samples / sec: 352.08
Iteration:   5000, Loss function: 4.834, Average Loss: 4.997, avg. samples / sec: 352.07
Iteration:   5020, Loss function: 5.037, Average Loss: 4.993, avg. samples / sec: 351.97
Iteration:   5040, Loss function: 4.968, Average Loss: 4.990, avg. samples / sec: 351.73
Iteration:   5060, Loss function: 4.803, Average Loss: 4.987, avg. samples / sec: 352.31
Iteration:   5080, Loss function: 4.454, Average Loss: 4.983, avg. samples / sec: 352.02
Iteration:   5100, Loss function: 4.715, Average Loss: 4.980, avg. samples / sec: 351.06
Iteration:   5120, Loss function: 4.554, Average Loss: 4.978, avg. samples / sec: 351.17
Iteration:   5140, Loss function: 4.862, Average Loss: 4.974, avg. samples / sec: 351.47
:::MLLOG {"namespace": "", "time_ms": 1639760552351, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.60 s
:::MLLOG {"namespace": "", "time_ms": 1639760585000, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760585045, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760585048, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.55s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.93s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10536
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21551
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09384
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19050
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13604
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21258
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21258
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10536 AP goal: 0.10000
Iteration:   5160, Loss function: 4.828, Average Loss: 4.970, avg. samples / sec: 58.45
:::MLLOG {"namespace": "", "time_ms": 1639760590386, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590387, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10536358394292136, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590387, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760590664, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639760591
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:03:11 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:49 PM'
START TIMING RUN WAS 2021-12-17 04:32:49 PM
ENDING TIMING RUN AT 2021-12-17 05:03:11 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:03:11 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-4fb17cd5-cad8-31a6-34d3-08434d926140)
  MIG 2g.10gb     Device  0: (UUID: MIG-16650044-81e5-5792-b10c-b3a9728acd8e)
+ result=1822
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,1822,nvidia,2021-12-17 04:32:49 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1822,nvidia,2021-12-17 04:32:49 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
