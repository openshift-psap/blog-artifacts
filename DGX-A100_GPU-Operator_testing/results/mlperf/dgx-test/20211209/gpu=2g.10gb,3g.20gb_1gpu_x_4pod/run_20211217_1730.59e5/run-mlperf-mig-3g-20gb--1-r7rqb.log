8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7af93043-695c-54c5-90f5-b698832ab413
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-7af93043-695c-54c5-90f5-b698832ab413
+ echo 'Found 1 MIG instances: MIG-7af93043-695c-54c5-90f5-b698832ab413'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758769
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:49 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
Patching 'bind_launch.py' to err-exit on failure ...
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-3g-20gb--1-r7rqb to the sync file ...
run-mlperf-mig-3g-20gb--1-r7rqb Found 3 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
     2	run-mlperf-mig-2g-10gb--1-ggjwh
     3	run-mlperf-mig-3g-20gb--1-r7rqb
Fri Dec 17 16:32:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758776886, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758776989, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2616521706, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2616521706
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758778854, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758778855, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758778858, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758778858, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758825554, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758825555, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758826984, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758826985, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827283, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827283, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827284, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.654, Average Loss: 0.023, avg. samples / sec: 2.37
Iteration:     20, Loss function: 21.111, Average Loss: 0.455, avg. samples / sec: 523.79
Iteration:     40, Loss function: 20.711, Average Loss: 0.856, avg. samples / sec: 533.53
Iteration:     60, Loss function: 20.365, Average Loss: 1.246, avg. samples / sec: 535.10
Iteration:     80, Loss function: 19.751, Average Loss: 1.619, avg. samples / sec: 535.69
Iteration:    100, Loss function: 14.684, Average Loss: 1.937, avg. samples / sec: 455.27
Iteration:    120, Loss function: 11.265, Average Loss: 2.140, avg. samples / sec: 536.57
Iteration:    140, Loss function: 9.695, Average Loss: 2.298, avg. samples / sec: 537.84
Iteration:    160, Loss function: 9.158, Average Loss: 2.439, avg. samples / sec: 537.86
Iteration:    180, Loss function: 9.173, Average Loss: 2.570, avg. samples / sec: 537.90
Iteration:    200, Loss function: 8.690, Average Loss: 2.695, avg. samples / sec: 538.79
Iteration:    220, Loss function: 8.497, Average Loss: 2.816, avg. samples / sec: 537.56
Iteration:    240, Loss function: 8.547, Average Loss: 2.933, avg. samples / sec: 536.53
Iteration:    260, Loss function: 8.600, Average Loss: 3.044, avg. samples / sec: 532.97
Iteration:    280, Loss function: 8.434, Average Loss: 3.153, avg. samples / sec: 537.55
Iteration:    300, Loss function: 8.261, Average Loss: 3.257, avg. samples / sec: 538.03
Iteration:    320, Loss function: 8.412, Average Loss: 3.360, avg. samples / sec: 537.64
Iteration:    340, Loss function: 8.294, Average Loss: 3.458, avg. samples / sec: 538.61
Iteration:    360, Loss function: 8.076, Average Loss: 3.551, avg. samples / sec: 537.08
Iteration:    380, Loss function: 7.980, Average Loss: 3.640, avg. samples / sec: 538.91
Iteration:    400, Loss function: 7.947, Average Loss: 3.724, avg. samples / sec: 491.64
Iteration:    420, Loss function: 7.708, Average Loss: 3.807, avg. samples / sec: 533.16
Iteration:    440, Loss function: 7.891, Average Loss: 3.886, avg. samples / sec: 536.59
Iteration:    460, Loss function: 7.755, Average Loss: 3.961, avg. samples / sec: 534.90
Iteration:    480, Loss function: 7.464, Average Loss: 4.035, avg. samples / sec: 535.59
Iteration:    500, Loss function: 7.517, Average Loss: 4.105, avg. samples / sec: 536.85
Iteration:    520, Loss function: 7.425, Average Loss: 4.172, avg. samples / sec: 537.04
Iteration:    540, Loss function: 7.493, Average Loss: 4.238, avg. samples / sec: 537.11
Iteration:    560, Loss function: 7.129, Average Loss: 4.300, avg. samples / sec: 538.78
Iteration:    580, Loss function: 7.299, Average Loss: 4.361, avg. samples / sec: 537.94
Iteration:    600, Loss function: 7.334, Average Loss: 4.421, avg. samples / sec: 538.42
Iteration:    620, Loss function: 6.913, Average Loss: 4.476, avg. samples / sec: 537.23
Iteration:    640, Loss function: 6.840, Average Loss: 4.531, avg. samples / sec: 538.70
Iteration:    660, Loss function: 7.221, Average Loss: 4.583, avg. samples / sec: 533.98
Iteration:    680, Loss function: 7.305, Average Loss: 4.634, avg. samples / sec: 537.80
Iteration:    700, Loss function: 6.925, Average Loss: 4.682, avg. samples / sec: 539.92
Iteration:    720, Loss function: 7.174, Average Loss: 4.732, avg. samples / sec: 537.38
Iteration:    740, Loss function: 6.872, Average Loss: 4.776, avg. samples / sec: 538.56
Iteration:    760, Loss function: 6.957, Average Loss: 4.820, avg. samples / sec: 535.62
Iteration:    780, Loss function: 6.699, Average Loss: 4.862, avg. samples / sec: 539.32
Iteration:    800, Loss function: 7.070, Average Loss: 4.900, avg. samples / sec: 539.98
Iteration:    820, Loss function: 6.869, Average Loss: 4.938, avg. samples / sec: 540.28
Iteration:    840, Loss function: 6.668, Average Loss: 4.974, avg. samples / sec: 539.44
Iteration:    860, Loss function: 6.795, Average Loss: 5.009, avg. samples / sec: 538.76
Iteration:    880, Loss function: 6.785, Average Loss: 5.042, avg. samples / sec: 538.40
Iteration:    900, Loss function: 6.803, Average Loss: 5.073, avg. samples / sec: 539.05
Iteration:    920, Loss function: 6.498, Average Loss: 5.102, avg. samples / sec: 538.91
Iteration:    940, Loss function: 6.590, Average Loss: 5.131, avg. samples / sec: 538.59
Iteration:    960, Loss function: 6.338, Average Loss: 5.159, avg. samples / sec: 536.27
Iteration:    980, Loss function: 6.467, Average Loss: 5.186, avg. samples / sec: 538.02
Iteration:   1000, Loss function: 6.572, Average Loss: 5.212, avg. samples / sec: 538.20
Iteration:   1020, Loss function: 6.318, Average Loss: 5.236, avg. samples / sec: 537.07
:::MLLOG {"namespace": "", "time_ms": 1639759046717, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759046718, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.581, Average Loss: 5.260, avg. samples / sec: 538.08
Iteration:   1060, Loss function: 6.352, Average Loss: 5.283, avg. samples / sec: 537.98
Iteration:   1080, Loss function: 6.324, Average Loss: 5.306, avg. samples / sec: 535.88
Iteration:   1100, Loss function: 6.063, Average Loss: 5.326, avg. samples / sec: 538.48
Iteration:   1120, Loss function: 6.328, Average Loss: 5.345, avg. samples / sec: 537.56
Iteration:   1140, Loss function: 6.330, Average Loss: 5.364, avg. samples / sec: 537.19
Iteration:   1160, Loss function: 6.091, Average Loss: 5.382, avg. samples / sec: 539.35
Iteration:   1180, Loss function: 6.346, Average Loss: 5.399, avg. samples / sec: 537.83
Iteration:   1200, Loss function: 6.224, Average Loss: 5.415, avg. samples / sec: 540.53
Iteration:   1220, Loss function: 6.239, Average Loss: 5.430, avg. samples / sec: 540.20
Iteration:   1240, Loss function: 5.998, Average Loss: 5.442, avg. samples / sec: 537.86
Iteration:   1260, Loss function: 5.963, Average Loss: 5.455, avg. samples / sec: 540.65
Iteration:   1280, Loss function: 5.957, Average Loss: 5.467, avg. samples / sec: 540.03
Iteration:   1300, Loss function: 6.149, Average Loss: 5.479, avg. samples / sec: 538.97
Iteration:   1320, Loss function: 6.012, Average Loss: 5.491, avg. samples / sec: 539.29
Iteration:   1340, Loss function: 5.922, Average Loss: 5.501, avg. samples / sec: 538.57
Iteration:   1360, Loss function: 5.953, Average Loss: 5.511, avg. samples / sec: 538.68
Iteration:   1380, Loss function: 6.244, Average Loss: 5.521, avg. samples / sec: 540.63
Iteration:   1400, Loss function: 6.101, Average Loss: 5.530, avg. samples / sec: 538.90
Iteration:   1420, Loss function: 5.967, Average Loss: 5.538, avg. samples / sec: 539.12
Iteration:   1440, Loss function: 6.312, Average Loss: 5.547, avg. samples / sec: 539.45
Iteration:   1460, Loss function: 6.092, Average Loss: 5.556, avg. samples / sec: 538.29
Iteration:   1480, Loss function: 5.979, Average Loss: 5.564, avg. samples / sec: 540.46
Iteration:   1500, Loss function: 6.086, Average Loss: 5.572, avg. samples / sec: 537.53
Iteration:   1520, Loss function: 5.854, Average Loss: 5.577, avg. samples / sec: 536.20
Iteration:   1540, Loss function: 5.964, Average Loss: 5.581, avg. samples / sec: 537.55
Iteration:   1560, Loss function: 5.614, Average Loss: 5.586, avg. samples / sec: 539.78
Iteration:   1580, Loss function: 5.478, Average Loss: 5.591, avg. samples / sec: 536.28
Iteration:   1600, Loss function: 6.100, Average Loss: 5.597, avg. samples / sec: 539.91
Iteration:   1620, Loss function: 5.696, Average Loss: 5.602, avg. samples / sec: 538.14
Iteration:   1640, Loss function: 6.105, Average Loss: 5.605, avg. samples / sec: 538.01
Iteration:   1660, Loss function: 5.914, Average Loss: 5.610, avg. samples / sec: 538.84
Iteration:   1680, Loss function: 5.632, Average Loss: 5.613, avg. samples / sec: 538.67
Iteration:   1700, Loss function: 5.177, Average Loss: 5.616, avg. samples / sec: 538.61
Iteration:   1720, Loss function: 5.746, Average Loss: 5.619, avg. samples / sec: 538.00
Iteration:   1740, Loss function: 5.832, Average Loss: 5.621, avg. samples / sec: 535.48
Iteration:   1760, Loss function: 5.567, Average Loss: 5.624, avg. samples / sec: 537.70
Iteration:   1780, Loss function: 5.676, Average Loss: 5.625, avg. samples / sec: 539.09
Iteration:   1800, Loss function: 5.632, Average Loss: 5.627, avg. samples / sec: 537.60
Iteration:   1820, Loss function: 5.998, Average Loss: 5.629, avg. samples / sec: 539.35
Iteration:   1840, Loss function: 5.980, Average Loss: 5.631, avg. samples / sec: 538.01
Iteration:   1860, Loss function: 5.634, Average Loss: 5.630, avg. samples / sec: 538.39
Iteration:   1880, Loss function: 5.941, Average Loss: 5.632, avg. samples / sec: 538.60
Iteration:   1900, Loss function: 5.982, Average Loss: 5.633, avg. samples / sec: 538.39
Iteration:   1920, Loss function: 5.696, Average Loss: 5.631, avg. samples / sec: 537.39
Iteration:   1940, Loss function: 5.632, Average Loss: 5.630, avg. samples / sec: 536.83
Iteration:   1960, Loss function: 5.731, Average Loss: 5.630, avg. samples / sec: 536.51
Iteration:   1980, Loss function: 5.688, Average Loss: 5.630, avg. samples / sec: 538.76
Iteration:   2000, Loss function: 5.575, Average Loss: 5.630, avg. samples / sec: 537.83
Iteration:   2020, Loss function: 5.689, Average Loss: 5.629, avg. samples / sec: 538.17
Iteration:   2040, Loss function: 5.561, Average Loss: 5.629, avg. samples / sec: 539.09
:::MLLOG {"namespace": "", "time_ms": 1639759264604, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759264606, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.459, Average Loss: 5.627, avg. samples / sec: 538.55
Iteration:   2080, Loss function: 5.013, Average Loss: 5.624, avg. samples / sec: 538.76
Iteration:   2100, Loss function: 5.539, Average Loss: 5.622, avg. samples / sec: 538.00
Iteration:   2120, Loss function: 5.326, Average Loss: 5.619, avg. samples / sec: 536.69
Iteration:   2140, Loss function: 5.358, Average Loss: 5.617, avg. samples / sec: 538.72
Iteration:   2160, Loss function: 5.269, Average Loss: 5.615, avg. samples / sec: 537.77
Iteration:   2180, Loss function: 5.233, Average Loss: 5.612, avg. samples / sec: 538.58
Iteration:   2200, Loss function: 5.560, Average Loss: 5.608, avg. samples / sec: 539.08
Iteration:   2220, Loss function: 5.605, Average Loss: 5.605, avg. samples / sec: 539.03
Iteration:   2240, Loss function: 5.228, Average Loss: 5.603, avg. samples / sec: 538.84
Iteration:   2260, Loss function: 5.366, Average Loss: 5.600, avg. samples / sec: 538.52
Iteration:   2280, Loss function: 5.420, Average Loss: 5.598, avg. samples / sec: 538.98
Iteration:   2300, Loss function: 5.170, Average Loss: 5.596, avg. samples / sec: 537.54
Iteration:   2320, Loss function: 5.300, Average Loss: 5.594, avg. samples / sec: 537.31
Iteration:   2340, Loss function: 5.389, Average Loss: 5.590, avg. samples / sec: 538.99
Iteration:   2360, Loss function: 5.315, Average Loss: 5.587, avg. samples / sec: 539.19
Iteration:   2380, Loss function: 5.327, Average Loss: 5.583, avg. samples / sec: 538.00
Iteration:   2400, Loss function: 5.605, Average Loss: 5.578, avg. samples / sec: 537.20
Iteration:   2420, Loss function: 5.350, Average Loss: 5.573, avg. samples / sec: 538.38
Iteration:   2440, Loss function: 5.569, Average Loss: 5.570, avg. samples / sec: 535.98
Iteration:   2460, Loss function: 5.242, Average Loss: 5.567, avg. samples / sec: 539.66
Iteration:   2480, Loss function: 5.454, Average Loss: 5.563, avg. samples / sec: 534.99
Iteration:   2500, Loss function: 5.302, Average Loss: 5.559, avg. samples / sec: 537.33
Iteration:   2520, Loss function: 5.361, Average Loss: 5.555, avg. samples / sec: 537.18
Iteration:   2540, Loss function: 5.551, Average Loss: 5.551, avg. samples / sec: 537.82
Iteration:   2560, Loss function: 5.282, Average Loss: 5.547, avg. samples / sec: 537.85
Iteration:   2580, Loss function: 5.150, Average Loss: 5.543, avg. samples / sec: 538.29
Iteration:   2600, Loss function: 5.387, Average Loss: 5.539, avg. samples / sec: 538.53
Iteration:   2620, Loss function: 5.501, Average Loss: 5.535, avg. samples / sec: 538.57
Iteration:   2640, Loss function: 5.270, Average Loss: 5.532, avg. samples / sec: 537.49
Iteration:   2660, Loss function: 5.082, Average Loss: 5.529, avg. samples / sec: 538.80
Iteration:   2680, Loss function: 5.216, Average Loss: 5.525, avg. samples / sec: 538.34
Iteration:   2700, Loss function: 5.132, Average Loss: 5.521, avg. samples / sec: 537.52
Iteration:   2720, Loss function: 5.405, Average Loss: 5.517, avg. samples / sec: 538.70
Iteration:   2740, Loss function: 5.106, Average Loss: 5.513, avg. samples / sec: 537.56
Iteration:   2760, Loss function: 5.114, Average Loss: 5.508, avg. samples / sec: 537.80
Iteration:   2780, Loss function: 5.513, Average Loss: 5.504, avg. samples / sec: 537.63
Iteration:   2800, Loss function: 5.189, Average Loss: 5.500, avg. samples / sec: 538.47
Iteration:   2820, Loss function: 5.351, Average Loss: 5.496, avg. samples / sec: 540.10
Iteration:   2840, Loss function: 5.248, Average Loss: 5.492, avg. samples / sec: 539.99
Iteration:   2860, Loss function: 5.010, Average Loss: 5.486, avg. samples / sec: 539.23
Iteration:   2880, Loss function: 5.182, Average Loss: 5.482, avg. samples / sec: 538.06
Iteration:   2900, Loss function: 5.008, Average Loss: 5.477, avg. samples / sec: 538.08
Iteration:   2920, Loss function: 5.061, Average Loss: 5.472, avg. samples / sec: 539.22
Iteration:   2940, Loss function: 4.830, Average Loss: 5.467, avg. samples / sec: 537.65
Iteration:   2960, Loss function: 5.519, Average Loss: 5.463, avg. samples / sec: 538.31
Iteration:   2980, Loss function: 5.191, Average Loss: 5.459, avg. samples / sec: 537.49
Iteration:   3000, Loss function: 5.345, Average Loss: 5.453, avg. samples / sec: 537.40
Iteration:   3020, Loss function: 5.358, Average Loss: 5.447, avg. samples / sec: 538.93
Iteration:   3040, Loss function: 5.308, Average Loss: 5.443, avg. samples / sec: 536.93
Iteration:   3060, Loss function: 5.044, Average Loss: 5.437, avg. samples / sec: 536.71
Iteration:   3080, Loss function: 4.809, Average Loss: 5.431, avg. samples / sec: 538.07
:::MLLOG {"namespace": "", "time_ms": 1639759482401, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759482403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.134, Average Loss: 5.426, avg. samples / sec: 538.54
Iteration:   3120, Loss function: 5.061, Average Loss: 5.420, avg. samples / sec: 539.90
Iteration:   3140, Loss function: 5.329, Average Loss: 5.416, avg. samples / sec: 539.29
Iteration:   3160, Loss function: 5.527, Average Loss: 5.410, avg. samples / sec: 538.86
Iteration:   3180, Loss function: 5.027, Average Loss: 5.406, avg. samples / sec: 538.09
Iteration:   3200, Loss function: 5.106, Average Loss: 5.400, avg. samples / sec: 539.69
Iteration:   3220, Loss function: 5.184, Average Loss: 5.395, avg. samples / sec: 538.54
Iteration:   3240, Loss function: 5.117, Average Loss: 5.389, avg. samples / sec: 537.48
Iteration:   3260, Loss function: 5.112, Average Loss: 5.384, avg. samples / sec: 537.17
Iteration:   3280, Loss function: 4.781, Average Loss: 5.379, avg. samples / sec: 538.45
Iteration:   3300, Loss function: 4.697, Average Loss: 5.373, avg. samples / sec: 537.06
Iteration:   3320, Loss function: 5.009, Average Loss: 5.370, avg. samples / sec: 537.94
Iteration:   3340, Loss function: 5.060, Average Loss: 5.365, avg. samples / sec: 538.30
Iteration:   3360, Loss function: 5.203, Average Loss: 5.359, avg. samples / sec: 536.74
Iteration:   3380, Loss function: 5.213, Average Loss: 5.352, avg. samples / sec: 536.16
Iteration:   3400, Loss function: 4.823, Average Loss: 5.348, avg. samples / sec: 537.91
Iteration:   3420, Loss function: 5.180, Average Loss: 5.343, avg. samples / sec: 539.15
Iteration:   3440, Loss function: 4.807, Average Loss: 5.338, avg. samples / sec: 538.66
Iteration:   3460, Loss function: 5.314, Average Loss: 5.334, avg. samples / sec: 536.48
Iteration:   3480, Loss function: 5.408, Average Loss: 5.330, avg. samples / sec: 537.62
Iteration:   3500, Loss function: 5.320, Average Loss: 5.326, avg. samples / sec: 539.71
Iteration:   3520, Loss function: 4.915, Average Loss: 5.323, avg. samples / sec: 538.67
Iteration:   3540, Loss function: 5.165, Average Loss: 5.318, avg. samples / sec: 538.60
Iteration:   3560, Loss function: 5.015, Average Loss: 5.314, avg. samples / sec: 538.06
Iteration:   3580, Loss function: 5.154, Average Loss: 5.311, avg. samples / sec: 537.85
Iteration:   3600, Loss function: 5.289, Average Loss: 5.305, avg. samples / sec: 540.60
Iteration:   3620, Loss function: 4.674, Average Loss: 5.299, avg. samples / sec: 539.43
Iteration:   3640, Loss function: 4.821, Average Loss: 5.295, avg. samples / sec: 537.26
Iteration:   3660, Loss function: 4.830, Average Loss: 5.290, avg. samples / sec: 536.25
Iteration:   3680, Loss function: 5.157, Average Loss: 5.284, avg. samples / sec: 537.68
Iteration:   3700, Loss function: 4.843, Average Loss: 5.279, avg. samples / sec: 536.86
Iteration:   3720, Loss function: 4.895, Average Loss: 5.273, avg. samples / sec: 536.57
Iteration:   3740, Loss function: 5.137, Average Loss: 5.268, avg. samples / sec: 537.18
Iteration:   3760, Loss function: 4.900, Average Loss: 5.264, avg. samples / sec: 537.93
Iteration:   3780, Loss function: 5.071, Average Loss: 5.258, avg. samples / sec: 538.79
Iteration:   3800, Loss function: 5.018, Average Loss: 5.254, avg. samples / sec: 536.98
Iteration:   3820, Loss function: 5.119, Average Loss: 5.249, avg. samples / sec: 537.03
Iteration:   3840, Loss function: 4.838, Average Loss: 5.244, avg. samples / sec: 537.61
Iteration:   3860, Loss function: 4.834, Average Loss: 5.239, avg. samples / sec: 537.58
Iteration:   3880, Loss function: 5.103, Average Loss: 5.233, avg. samples / sec: 538.20
Iteration:   3900, Loss function: 5.121, Average Loss: 5.228, avg. samples / sec: 537.53
Iteration:   3920, Loss function: 5.114, Average Loss: 5.223, avg. samples / sec: 538.73
Iteration:   3940, Loss function: 5.114, Average Loss: 5.219, avg. samples / sec: 538.15
Iteration:   3960, Loss function: 5.003, Average Loss: 5.215, avg. samples / sec: 538.35
Iteration:   3980, Loss function: 4.963, Average Loss: 5.210, avg. samples / sec: 539.05
Iteration:   4000, Loss function: 5.296, Average Loss: 5.206, avg. samples / sec: 539.16
Iteration:   4020, Loss function: 5.095, Average Loss: 5.203, avg. samples / sec: 537.86
Iteration:   4040, Loss function: 5.075, Average Loss: 5.199, avg. samples / sec: 539.68
Iteration:   4060, Loss function: 5.260, Average Loss: 5.195, avg. samples / sec: 536.52
Iteration:   4080, Loss function: 5.069, Average Loss: 5.190, avg. samples / sec: 539.30
Iteration:   4100, Loss function: 5.166, Average Loss: 5.187, avg. samples / sec: 537.51
:::MLLOG {"namespace": "", "time_ms": 1639759700385, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759700386, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.067, Average Loss: 5.183, avg. samples / sec: 538.78
Iteration:   4140, Loss function: 4.914, Average Loss: 5.178, avg. samples / sec: 539.76
Iteration:   4160, Loss function: 4.812, Average Loss: 5.171, avg. samples / sec: 539.68
Iteration:   4180, Loss function: 4.854, Average Loss: 5.165, avg. samples / sec: 540.30
Iteration:   4200, Loss function: 4.697, Average Loss: 5.161, avg. samples / sec: 538.56
Iteration:   4220, Loss function: 4.913, Average Loss: 5.157, avg. samples / sec: 540.42
Iteration:   4240, Loss function: 4.873, Average Loss: 5.151, avg. samples / sec: 539.39
Iteration:   4260, Loss function: 4.946, Average Loss: 5.146, avg. samples / sec: 537.34
Iteration:   4280, Loss function: 5.196, Average Loss: 5.141, avg. samples / sec: 540.27
Iteration:   4300, Loss function: 4.730, Average Loss: 5.135, avg. samples / sec: 539.32
Iteration:   4320, Loss function: 4.704, Average Loss: 5.130, avg. samples / sec: 537.63
Iteration:   4340, Loss function: 4.566, Average Loss: 5.125, avg. samples / sec: 535.86
Iteration:   4360, Loss function: 4.790, Average Loss: 5.121, avg. samples / sec: 537.64
Iteration:   4380, Loss function: 5.091, Average Loss: 5.117, avg. samples / sec: 538.80
Iteration:   4400, Loss function: 4.980, Average Loss: 5.113, avg. samples / sec: 538.76
Iteration:   4420, Loss function: 4.746, Average Loss: 5.108, avg. samples / sec: 537.18
Iteration:   4440, Loss function: 4.865, Average Loss: 5.103, avg. samples / sec: 537.54
Iteration:   4460, Loss function: 5.006, Average Loss: 5.098, avg. samples / sec: 538.40
Iteration:   4480, Loss function: 5.050, Average Loss: 5.096, avg. samples / sec: 537.28
Iteration:   4500, Loss function: 4.833, Average Loss: 5.093, avg. samples / sec: 539.84
Iteration:   4520, Loss function: 4.560, Average Loss: 5.089, avg. samples / sec: 537.74
Iteration:   4540, Loss function: 5.042, Average Loss: 5.085, avg. samples / sec: 538.95
Iteration:   4560, Loss function: 4.692, Average Loss: 5.081, avg. samples / sec: 537.68
Iteration:   4580, Loss function: 4.776, Average Loss: 5.078, avg. samples / sec: 540.55
Iteration:   4600, Loss function: 4.744, Average Loss: 5.074, avg. samples / sec: 539.65
Iteration:   4620, Loss function: 4.817, Average Loss: 5.070, avg. samples / sec: 539.20
Iteration:   4640, Loss function: 4.695, Average Loss: 5.066, avg. samples / sec: 539.94
Iteration:   4660, Loss function: 4.703, Average Loss: 5.061, avg. samples / sec: 539.01
Iteration:   4680, Loss function: 5.338, Average Loss: 5.057, avg. samples / sec: 539.48
Iteration:   4700, Loss function: 4.728, Average Loss: 5.053, avg. samples / sec: 540.58
Iteration:   4720, Loss function: 4.804, Average Loss: 5.048, avg. samples / sec: 537.70
Iteration:   4740, Loss function: 4.932, Average Loss: 5.044, avg. samples / sec: 537.74
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 537.94
Iteration:   4780, Loss function: 4.983, Average Loss: 5.037, avg. samples / sec: 538.88
Iteration:   4800, Loss function: 4.854, Average Loss: 5.034, avg. samples / sec: 537.25
Iteration:   4820, Loss function: 4.745, Average Loss: 5.030, avg. samples / sec: 536.93
Iteration:   4840, Loss function: 5.195, Average Loss: 5.027, avg. samples / sec: 538.11
Iteration:   4860, Loss function: 4.661, Average Loss: 5.023, avg. samples / sec: 538.43
Iteration:   4880, Loss function: 5.137, Average Loss: 5.019, avg. samples / sec: 538.88
Iteration:   4900, Loss function: 4.620, Average Loss: 5.015, avg. samples / sec: 538.06
Iteration:   4920, Loss function: 4.758, Average Loss: 5.011, avg. samples / sec: 538.60
Iteration:   4940, Loss function: 4.891, Average Loss: 5.006, avg. samples / sec: 538.85
Iteration:   4960, Loss function: 4.544, Average Loss: 5.002, avg. samples / sec: 538.30
Iteration:   4980, Loss function: 4.596, Average Loss: 4.998, avg. samples / sec: 535.16
Iteration:   5000, Loss function: 5.178, Average Loss: 4.996, avg. samples / sec: 537.36
Iteration:   5020, Loss function: 5.111, Average Loss: 4.993, avg. samples / sec: 536.39
Iteration:   5040, Loss function: 4.814, Average Loss: 4.990, avg. samples / sec: 539.62
Iteration:   5060, Loss function: 4.638, Average Loss: 4.986, avg. samples / sec: 539.11
Iteration:   5080, Loss function: 4.424, Average Loss: 4.982, avg. samples / sec: 537.49
Iteration:   5100, Loss function: 4.723, Average Loss: 4.979, avg. samples / sec: 537.50
Iteration:   5120, Loss function: 4.504, Average Loss: 4.976, avg. samples / sec: 534.61
Iteration:   5140, Loss function: 4.893, Average Loss: 4.972, avg. samples / sec: 537.95
:::MLLOG {"namespace": "", "time_ms": 1639759918281, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.02 s
:::MLLOG {"namespace": "", "time_ms": 1639759949358, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759949414, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759949414, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10512
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21474
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09325
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18553
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13416
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19627
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10512 AP goal: 0.10000
Iteration:   5160, Loss function: 5.037, Average Loss: 4.968, avg. samples / sec: 64.57
:::MLLOG {"namespace": "", "time_ms": 1639759952957, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759952958, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10512171909471935, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759952958, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759953177, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 16:52:34 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 16:52:34 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758776886, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758776989, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2616521706, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2616521706
:::MLLOG {"namespace": "", "time_ms": 1639758778854, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758778855, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758778858, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758778858, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758778859, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758825554, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758825555, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758826984, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758826985, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827283, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827283, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827284, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.654, Average Loss: 0.023, avg. samples / sec: 2.37
Iteration:     20, Loss function: 21.111, Average Loss: 0.455, avg. samples / sec: 523.79
Iteration:     40, Loss function: 20.711, Average Loss: 0.856, avg. samples / sec: 533.53
Iteration:     60, Loss function: 20.365, Average Loss: 1.246, avg. samples / sec: 535.10
Iteration:     80, Loss function: 19.751, Average Loss: 1.619, avg. samples / sec: 535.69
Iteration:    100, Loss function: 14.684, Average Loss: 1.937, avg. samples / sec: 455.27
Iteration:    120, Loss function: 11.265, Average Loss: 2.140, avg. samples / sec: 536.57
Iteration:    140, Loss function: 9.695, Average Loss: 2.298, avg. samples / sec: 537.84
Iteration:    160, Loss function: 9.158, Average Loss: 2.439, avg. samples / sec: 537.86
Iteration:    180, Loss function: 9.173, Average Loss: 2.570, avg. samples / sec: 537.90
Iteration:    200, Loss function: 8.690, Average Loss: 2.695, avg. samples / sec: 538.79
Iteration:    220, Loss function: 8.497, Average Loss: 2.816, avg. samples / sec: 537.56
Iteration:    240, Loss function: 8.547, Average Loss: 2.933, avg. samples / sec: 536.53
Iteration:    260, Loss function: 8.600, Average Loss: 3.044, avg. samples / sec: 532.97
Iteration:    280, Loss function: 8.434, Average Loss: 3.153, avg. samples / sec: 537.55
Iteration:    300, Loss function: 8.261, Average Loss: 3.257, avg. samples / sec: 538.03
Iteration:    320, Loss function: 8.412, Average Loss: 3.360, avg. samples / sec: 537.64
Iteration:    340, Loss function: 8.294, Average Loss: 3.458, avg. samples / sec: 538.61
Iteration:    360, Loss function: 8.076, Average Loss: 3.551, avg. samples / sec: 537.08
Iteration:    380, Loss function: 7.980, Average Loss: 3.640, avg. samples / sec: 538.91
Iteration:    400, Loss function: 7.947, Average Loss: 3.724, avg. samples / sec: 491.64
Iteration:    420, Loss function: 7.708, Average Loss: 3.807, avg. samples / sec: 533.16
Iteration:    440, Loss function: 7.891, Average Loss: 3.886, avg. samples / sec: 536.59
Iteration:    460, Loss function: 7.755, Average Loss: 3.961, avg. samples / sec: 534.90
Iteration:    480, Loss function: 7.464, Average Loss: 4.035, avg. samples / sec: 535.59
Iteration:    500, Loss function: 7.517, Average Loss: 4.105, avg. samples / sec: 536.85
Iteration:    520, Loss function: 7.425, Average Loss: 4.172, avg. samples / sec: 537.04
Iteration:    540, Loss function: 7.493, Average Loss: 4.238, avg. samples / sec: 537.11
Iteration:    560, Loss function: 7.129, Average Loss: 4.300, avg. samples / sec: 538.78
Iteration:    580, Loss function: 7.299, Average Loss: 4.361, avg. samples / sec: 537.94
Iteration:    600, Loss function: 7.334, Average Loss: 4.421, avg. samples / sec: 538.42
Iteration:    620, Loss function: 6.913, Average Loss: 4.476, avg. samples / sec: 537.23
Iteration:    640, Loss function: 6.840, Average Loss: 4.531, avg. samples / sec: 538.70
Iteration:    660, Loss function: 7.221, Average Loss: 4.583, avg. samples / sec: 533.98
Iteration:    680, Loss function: 7.305, Average Loss: 4.634, avg. samples / sec: 537.80
Iteration:    700, Loss function: 6.925, Average Loss: 4.682, avg. samples / sec: 539.92
Iteration:    720, Loss function: 7.174, Average Loss: 4.732, avg. samples / sec: 537.38
Iteration:    740, Loss function: 6.872, Average Loss: 4.776, avg. samples / sec: 538.56
Iteration:    760, Loss function: 6.957, Average Loss: 4.820, avg. samples / sec: 535.62
Iteration:    780, Loss function: 6.699, Average Loss: 4.862, avg. samples / sec: 539.32
Iteration:    800, Loss function: 7.070, Average Loss: 4.900, avg. samples / sec: 539.98
Iteration:    820, Loss function: 6.869, Average Loss: 4.938, avg. samples / sec: 540.28
Iteration:    840, Loss function: 6.668, Average Loss: 4.974, avg. samples / sec: 539.44
Iteration:    860, Loss function: 6.795, Average Loss: 5.009, avg. samples / sec: 538.76
Iteration:    880, Loss function: 6.785, Average Loss: 5.042, avg. samples / sec: 538.40
Iteration:    900, Loss function: 6.803, Average Loss: 5.073, avg. samples / sec: 539.05
Iteration:    920, Loss function: 6.498, Average Loss: 5.102, avg. samples / sec: 538.91
Iteration:    940, Loss function: 6.590, Average Loss: 5.131, avg. samples / sec: 538.59
Iteration:    960, Loss function: 6.338, Average Loss: 5.159, avg. samples / sec: 536.27
Iteration:    980, Loss function: 6.467, Average Loss: 5.186, avg. samples / sec: 538.02
Iteration:   1000, Loss function: 6.572, Average Loss: 5.212, avg. samples / sec: 538.20
Iteration:   1020, Loss function: 6.318, Average Loss: 5.236, avg. samples / sec: 537.07
:::MLLOG {"namespace": "", "time_ms": 1639759046717, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759046718, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.581, Average Loss: 5.260, avg. samples / sec: 538.08
Iteration:   1060, Loss function: 6.352, Average Loss: 5.283, avg. samples / sec: 537.98
Iteration:   1080, Loss function: 6.324, Average Loss: 5.306, avg. samples / sec: 535.88
Iteration:   1100, Loss function: 6.063, Average Loss: 5.326, avg. samples / sec: 538.48
Iteration:   1120, Loss function: 6.328, Average Loss: 5.345, avg. samples / sec: 537.56
Iteration:   1140, Loss function: 6.330, Average Loss: 5.364, avg. samples / sec: 537.19
Iteration:   1160, Loss function: 6.091, Average Loss: 5.382, avg. samples / sec: 539.35
Iteration:   1180, Loss function: 6.346, Average Loss: 5.399, avg. samples / sec: 537.83
Iteration:   1200, Loss function: 6.224, Average Loss: 5.415, avg. samples / sec: 540.53
Iteration:   1220, Loss function: 6.239, Average Loss: 5.430, avg. samples / sec: 540.20
Iteration:   1240, Loss function: 5.998, Average Loss: 5.442, avg. samples / sec: 537.86
Iteration:   1260, Loss function: 5.963, Average Loss: 5.455, avg. samples / sec: 540.65
Iteration:   1280, Loss function: 5.957, Average Loss: 5.467, avg. samples / sec: 540.03
Iteration:   1300, Loss function: 6.149, Average Loss: 5.479, avg. samples / sec: 538.97
Iteration:   1320, Loss function: 6.012, Average Loss: 5.491, avg. samples / sec: 539.29
Iteration:   1340, Loss function: 5.922, Average Loss: 5.501, avg. samples / sec: 538.57
Iteration:   1360, Loss function: 5.953, Average Loss: 5.511, avg. samples / sec: 538.68
Iteration:   1380, Loss function: 6.244, Average Loss: 5.521, avg. samples / sec: 540.63
Iteration:   1400, Loss function: 6.101, Average Loss: 5.530, avg. samples / sec: 538.90
Iteration:   1420, Loss function: 5.967, Average Loss: 5.538, avg. samples / sec: 539.12
Iteration:   1440, Loss function: 6.312, Average Loss: 5.547, avg. samples / sec: 539.45
Iteration:   1460, Loss function: 6.092, Average Loss: 5.556, avg. samples / sec: 538.29
Iteration:   1480, Loss function: 5.979, Average Loss: 5.564, avg. samples / sec: 540.46
Iteration:   1500, Loss function: 6.086, Average Loss: 5.572, avg. samples / sec: 537.53
Iteration:   1520, Loss function: 5.854, Average Loss: 5.577, avg. samples / sec: 536.20
Iteration:   1540, Loss function: 5.964, Average Loss: 5.581, avg. samples / sec: 537.55
Iteration:   1560, Loss function: 5.614, Average Loss: 5.586, avg. samples / sec: 539.78
Iteration:   1580, Loss function: 5.478, Average Loss: 5.591, avg. samples / sec: 536.28
Iteration:   1600, Loss function: 6.100, Average Loss: 5.597, avg. samples / sec: 539.91
Iteration:   1620, Loss function: 5.696, Average Loss: 5.602, avg. samples / sec: 538.14
Iteration:   1640, Loss function: 6.105, Average Loss: 5.605, avg. samples / sec: 538.01
Iteration:   1660, Loss function: 5.914, Average Loss: 5.610, avg. samples / sec: 538.84
Iteration:   1680, Loss function: 5.632, Average Loss: 5.613, avg. samples / sec: 538.67
Iteration:   1700, Loss function: 5.177, Average Loss: 5.616, avg. samples / sec: 538.61
Iteration:   1720, Loss function: 5.746, Average Loss: 5.619, avg. samples / sec: 538.00
Iteration:   1740, Loss function: 5.832, Average Loss: 5.621, avg. samples / sec: 535.48
Iteration:   1760, Loss function: 5.567, Average Loss: 5.624, avg. samples / sec: 537.70
Iteration:   1780, Loss function: 5.676, Average Loss: 5.625, avg. samples / sec: 539.09
Iteration:   1800, Loss function: 5.632, Average Loss: 5.627, avg. samples / sec: 537.60
Iteration:   1820, Loss function: 5.998, Average Loss: 5.629, avg. samples / sec: 539.35
Iteration:   1840, Loss function: 5.980, Average Loss: 5.631, avg. samples / sec: 538.01
Iteration:   1860, Loss function: 5.634, Average Loss: 5.630, avg. samples / sec: 538.39
Iteration:   1880, Loss function: 5.941, Average Loss: 5.632, avg. samples / sec: 538.60
Iteration:   1900, Loss function: 5.982, Average Loss: 5.633, avg. samples / sec: 538.39
Iteration:   1920, Loss function: 5.696, Average Loss: 5.631, avg. samples / sec: 537.39
Iteration:   1940, Loss function: 5.632, Average Loss: 5.630, avg. samples / sec: 536.83
Iteration:   1960, Loss function: 5.731, Average Loss: 5.630, avg. samples / sec: 536.51
Iteration:   1980, Loss function: 5.688, Average Loss: 5.630, avg. samples / sec: 538.76
Iteration:   2000, Loss function: 5.575, Average Loss: 5.630, avg. samples / sec: 537.83
Iteration:   2020, Loss function: 5.689, Average Loss: 5.629, avg. samples / sec: 538.17
Iteration:   2040, Loss function: 5.561, Average Loss: 5.629, avg. samples / sec: 539.09
:::MLLOG {"namespace": "", "time_ms": 1639759264604, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759264606, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.459, Average Loss: 5.627, avg. samples / sec: 538.55
Iteration:   2080, Loss function: 5.013, Average Loss: 5.624, avg. samples / sec: 538.76
Iteration:   2100, Loss function: 5.539, Average Loss: 5.622, avg. samples / sec: 538.00
Iteration:   2120, Loss function: 5.326, Average Loss: 5.619, avg. samples / sec: 536.69
Iteration:   2140, Loss function: 5.358, Average Loss: 5.617, avg. samples / sec: 538.72
Iteration:   2160, Loss function: 5.269, Average Loss: 5.615, avg. samples / sec: 537.77
Iteration:   2180, Loss function: 5.233, Average Loss: 5.612, avg. samples / sec: 538.58
Iteration:   2200, Loss function: 5.560, Average Loss: 5.608, avg. samples / sec: 539.08
Iteration:   2220, Loss function: 5.605, Average Loss: 5.605, avg. samples / sec: 539.03
Iteration:   2240, Loss function: 5.228, Average Loss: 5.603, avg. samples / sec: 538.84
Iteration:   2260, Loss function: 5.366, Average Loss: 5.600, avg. samples / sec: 538.52
Iteration:   2280, Loss function: 5.420, Average Loss: 5.598, avg. samples / sec: 538.98
Iteration:   2300, Loss function: 5.170, Average Loss: 5.596, avg. samples / sec: 537.54
Iteration:   2320, Loss function: 5.300, Average Loss: 5.594, avg. samples / sec: 537.31
Iteration:   2340, Loss function: 5.389, Average Loss: 5.590, avg. samples / sec: 538.99
Iteration:   2360, Loss function: 5.315, Average Loss: 5.587, avg. samples / sec: 539.19
Iteration:   2380, Loss function: 5.327, Average Loss: 5.583, avg. samples / sec: 538.00
Iteration:   2400, Loss function: 5.605, Average Loss: 5.578, avg. samples / sec: 537.20
Iteration:   2420, Loss function: 5.350, Average Loss: 5.573, avg. samples / sec: 538.38
Iteration:   2440, Loss function: 5.569, Average Loss: 5.570, avg. samples / sec: 535.98
Iteration:   2460, Loss function: 5.242, Average Loss: 5.567, avg. samples / sec: 539.66
Iteration:   2480, Loss function: 5.454, Average Loss: 5.563, avg. samples / sec: 534.99
Iteration:   2500, Loss function: 5.302, Average Loss: 5.559, avg. samples / sec: 537.33
Iteration:   2520, Loss function: 5.361, Average Loss: 5.555, avg. samples / sec: 537.18
Iteration:   2540, Loss function: 5.551, Average Loss: 5.551, avg. samples / sec: 537.82
Iteration:   2560, Loss function: 5.282, Average Loss: 5.547, avg. samples / sec: 537.85
Iteration:   2580, Loss function: 5.150, Average Loss: 5.543, avg. samples / sec: 538.29
Iteration:   2600, Loss function: 5.387, Average Loss: 5.539, avg. samples / sec: 538.53
Iteration:   2620, Loss function: 5.501, Average Loss: 5.535, avg. samples / sec: 538.57
Iteration:   2640, Loss function: 5.270, Average Loss: 5.532, avg. samples / sec: 537.49
Iteration:   2660, Loss function: 5.082, Average Loss: 5.529, avg. samples / sec: 538.80
Iteration:   2680, Loss function: 5.216, Average Loss: 5.525, avg. samples / sec: 538.34
Iteration:   2700, Loss function: 5.132, Average Loss: 5.521, avg. samples / sec: 537.52
Iteration:   2720, Loss function: 5.405, Average Loss: 5.517, avg. samples / sec: 538.70
Iteration:   2740, Loss function: 5.106, Average Loss: 5.513, avg. samples / sec: 537.56
Iteration:   2760, Loss function: 5.114, Average Loss: 5.508, avg. samples / sec: 537.80
Iteration:   2780, Loss function: 5.513, Average Loss: 5.504, avg. samples / sec: 537.63
Iteration:   2800, Loss function: 5.189, Average Loss: 5.500, avg. samples / sec: 538.47
Iteration:   2820, Loss function: 5.351, Average Loss: 5.496, avg. samples / sec: 540.10
Iteration:   2840, Loss function: 5.248, Average Loss: 5.492, avg. samples / sec: 539.99
Iteration:   2860, Loss function: 5.010, Average Loss: 5.486, avg. samples / sec: 539.23
Iteration:   2880, Loss function: 5.182, Average Loss: 5.482, avg. samples / sec: 538.06
Iteration:   2900, Loss function: 5.008, Average Loss: 5.477, avg. samples / sec: 538.08
Iteration:   2920, Loss function: 5.061, Average Loss: 5.472, avg. samples / sec: 539.22
Iteration:   2940, Loss function: 4.830, Average Loss: 5.467, avg. samples / sec: 537.65
Iteration:   2960, Loss function: 5.519, Average Loss: 5.463, avg. samples / sec: 538.31
Iteration:   2980, Loss function: 5.191, Average Loss: 5.459, avg. samples / sec: 537.49
Iteration:   3000, Loss function: 5.345, Average Loss: 5.453, avg. samples / sec: 537.40
Iteration:   3020, Loss function: 5.358, Average Loss: 5.447, avg. samples / sec: 538.93
Iteration:   3040, Loss function: 5.308, Average Loss: 5.443, avg. samples / sec: 536.93
Iteration:   3060, Loss function: 5.044, Average Loss: 5.437, avg. samples / sec: 536.71
Iteration:   3080, Loss function: 4.809, Average Loss: 5.431, avg. samples / sec: 538.07
:::MLLOG {"namespace": "", "time_ms": 1639759482401, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759482403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.134, Average Loss: 5.426, avg. samples / sec: 538.54
Iteration:   3120, Loss function: 5.061, Average Loss: 5.420, avg. samples / sec: 539.90
Iteration:   3140, Loss function: 5.329, Average Loss: 5.416, avg. samples / sec: 539.29
Iteration:   3160, Loss function: 5.527, Average Loss: 5.410, avg. samples / sec: 538.86
Iteration:   3180, Loss function: 5.027, Average Loss: 5.406, avg. samples / sec: 538.09
Iteration:   3200, Loss function: 5.106, Average Loss: 5.400, avg. samples / sec: 539.69
Iteration:   3220, Loss function: 5.184, Average Loss: 5.395, avg. samples / sec: 538.54
Iteration:   3240, Loss function: 5.117, Average Loss: 5.389, avg. samples / sec: 537.48
Iteration:   3260, Loss function: 5.112, Average Loss: 5.384, avg. samples / sec: 537.17
Iteration:   3280, Loss function: 4.781, Average Loss: 5.379, avg. samples / sec: 538.45
Iteration:   3300, Loss function: 4.697, Average Loss: 5.373, avg. samples / sec: 537.06
Iteration:   3320, Loss function: 5.009, Average Loss: 5.370, avg. samples / sec: 537.94
Iteration:   3340, Loss function: 5.060, Average Loss: 5.365, avg. samples / sec: 538.30
Iteration:   3360, Loss function: 5.203, Average Loss: 5.359, avg. samples / sec: 536.74
Iteration:   3380, Loss function: 5.213, Average Loss: 5.352, avg. samples / sec: 536.16
Iteration:   3400, Loss function: 4.823, Average Loss: 5.348, avg. samples / sec: 537.91
Iteration:   3420, Loss function: 5.180, Average Loss: 5.343, avg. samples / sec: 539.15
Iteration:   3440, Loss function: 4.807, Average Loss: 5.338, avg. samples / sec: 538.66
Iteration:   3460, Loss function: 5.314, Average Loss: 5.334, avg. samples / sec: 536.48
Iteration:   3480, Loss function: 5.408, Average Loss: 5.330, avg. samples / sec: 537.62
Iteration:   3500, Loss function: 5.320, Average Loss: 5.326, avg. samples / sec: 539.71
Iteration:   3520, Loss function: 4.915, Average Loss: 5.323, avg. samples / sec: 538.67
Iteration:   3540, Loss function: 5.165, Average Loss: 5.318, avg. samples / sec: 538.60
Iteration:   3560, Loss function: 5.015, Average Loss: 5.314, avg. samples / sec: 538.06
Iteration:   3580, Loss function: 5.154, Average Loss: 5.311, avg. samples / sec: 537.85
Iteration:   3600, Loss function: 5.289, Average Loss: 5.305, avg. samples / sec: 540.60
Iteration:   3620, Loss function: 4.674, Average Loss: 5.299, avg. samples / sec: 539.43
Iteration:   3640, Loss function: 4.821, Average Loss: 5.295, avg. samples / sec: 537.26
Iteration:   3660, Loss function: 4.830, Average Loss: 5.290, avg. samples / sec: 536.25
Iteration:   3680, Loss function: 5.157, Average Loss: 5.284, avg. samples / sec: 537.68
Iteration:   3700, Loss function: 4.843, Average Loss: 5.279, avg. samples / sec: 536.86
Iteration:   3720, Loss function: 4.895, Average Loss: 5.273, avg. samples / sec: 536.57
Iteration:   3740, Loss function: 5.137, Average Loss: 5.268, avg. samples / sec: 537.18
Iteration:   3760, Loss function: 4.900, Average Loss: 5.264, avg. samples / sec: 537.93
Iteration:   3780, Loss function: 5.071, Average Loss: 5.258, avg. samples / sec: 538.79
Iteration:   3800, Loss function: 5.018, Average Loss: 5.254, avg. samples / sec: 536.98
Iteration:   3820, Loss function: 5.119, Average Loss: 5.249, avg. samples / sec: 537.03
Iteration:   3840, Loss function: 4.838, Average Loss: 5.244, avg. samples / sec: 537.61
Iteration:   3860, Loss function: 4.834, Average Loss: 5.239, avg. samples / sec: 537.58
Iteration:   3880, Loss function: 5.103, Average Loss: 5.233, avg. samples / sec: 538.20
Iteration:   3900, Loss function: 5.121, Average Loss: 5.228, avg. samples / sec: 537.53
Iteration:   3920, Loss function: 5.114, Average Loss: 5.223, avg. samples / sec: 538.73
Iteration:   3940, Loss function: 5.114, Average Loss: 5.219, avg. samples / sec: 538.15
Iteration:   3960, Loss function: 5.003, Average Loss: 5.215, avg. samples / sec: 538.35
Iteration:   3980, Loss function: 4.963, Average Loss: 5.210, avg. samples / sec: 539.05
Iteration:   4000, Loss function: 5.296, Average Loss: 5.206, avg. samples / sec: 539.16
Iteration:   4020, Loss function: 5.095, Average Loss: 5.203, avg. samples / sec: 537.86
Iteration:   4040, Loss function: 5.075, Average Loss: 5.199, avg. samples / sec: 539.68
Iteration:   4060, Loss function: 5.260, Average Loss: 5.195, avg. samples / sec: 536.52
Iteration:   4080, Loss function: 5.069, Average Loss: 5.190, avg. samples / sec: 539.30
Iteration:   4100, Loss function: 5.166, Average Loss: 5.187, avg. samples / sec: 537.51
:::MLLOG {"namespace": "", "time_ms": 1639759700385, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759700386, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.067, Average Loss: 5.183, avg. samples / sec: 538.78
Iteration:   4140, Loss function: 4.914, Average Loss: 5.178, avg. samples / sec: 539.76
Iteration:   4160, Loss function: 4.812, Average Loss: 5.171, avg. samples / sec: 539.68
Iteration:   4180, Loss function: 4.854, Average Loss: 5.165, avg. samples / sec: 540.30
Iteration:   4200, Loss function: 4.697, Average Loss: 5.161, avg. samples / sec: 538.56
Iteration:   4220, Loss function: 4.913, Average Loss: 5.157, avg. samples / sec: 540.42
Iteration:   4240, Loss function: 4.873, Average Loss: 5.151, avg. samples / sec: 539.39
Iteration:   4260, Loss function: 4.946, Average Loss: 5.146, avg. samples / sec: 537.34
Iteration:   4280, Loss function: 5.196, Average Loss: 5.141, avg. samples / sec: 540.27
Iteration:   4300, Loss function: 4.730, Average Loss: 5.135, avg. samples / sec: 539.32
Iteration:   4320, Loss function: 4.704, Average Loss: 5.130, avg. samples / sec: 537.63
Iteration:   4340, Loss function: 4.566, Average Loss: 5.125, avg. samples / sec: 535.86
Iteration:   4360, Loss function: 4.790, Average Loss: 5.121, avg. samples / sec: 537.64
Iteration:   4380, Loss function: 5.091, Average Loss: 5.117, avg. samples / sec: 538.80
Iteration:   4400, Loss function: 4.980, Average Loss: 5.113, avg. samples / sec: 538.76
Iteration:   4420, Loss function: 4.746, Average Loss: 5.108, avg. samples / sec: 537.18
Iteration:   4440, Loss function: 4.865, Average Loss: 5.103, avg. samples / sec: 537.54
Iteration:   4460, Loss function: 5.006, Average Loss: 5.098, avg. samples / sec: 538.40
Iteration:   4480, Loss function: 5.050, Average Loss: 5.096, avg. samples / sec: 537.28
Iteration:   4500, Loss function: 4.833, Average Loss: 5.093, avg. samples / sec: 539.84
Iteration:   4520, Loss function: 4.560, Average Loss: 5.089, avg. samples / sec: 537.74
Iteration:   4540, Loss function: 5.042, Average Loss: 5.085, avg. samples / sec: 538.95
Iteration:   4560, Loss function: 4.692, Average Loss: 5.081, avg. samples / sec: 537.68
Iteration:   4580, Loss function: 4.776, Average Loss: 5.078, avg. samples / sec: 540.55
Iteration:   4600, Loss function: 4.744, Average Loss: 5.074, avg. samples / sec: 539.65
Iteration:   4620, Loss function: 4.817, Average Loss: 5.070, avg. samples / sec: 539.20
Iteration:   4640, Loss function: 4.695, Average Loss: 5.066, avg. samples / sec: 539.94
Iteration:   4660, Loss function: 4.703, Average Loss: 5.061, avg. samples / sec: 539.01
Iteration:   4680, Loss function: 5.338, Average Loss: 5.057, avg. samples / sec: 539.48
Iteration:   4700, Loss function: 4.728, Average Loss: 5.053, avg. samples / sec: 540.58
Iteration:   4720, Loss function: 4.804, Average Loss: 5.048, avg. samples / sec: 537.70
Iteration:   4740, Loss function: 4.932, Average Loss: 5.044, avg. samples / sec: 537.74
Iteration:   4760, Loss function: 4.708, Average Loss: 5.041, avg. samples / sec: 537.94
Iteration:   4780, Loss function: 4.983, Average Loss: 5.037, avg. samples / sec: 538.88
Iteration:   4800, Loss function: 4.854, Average Loss: 5.034, avg. samples / sec: 537.25
Iteration:   4820, Loss function: 4.745, Average Loss: 5.030, avg. samples / sec: 536.93
Iteration:   4840, Loss function: 5.195, Average Loss: 5.027, avg. samples / sec: 538.11
Iteration:   4860, Loss function: 4.661, Average Loss: 5.023, avg. samples / sec: 538.43
Iteration:   4880, Loss function: 5.137, Average Loss: 5.019, avg. samples / sec: 538.88
Iteration:   4900, Loss function: 4.620, Average Loss: 5.015, avg. samples / sec: 538.06
Iteration:   4920, Loss function: 4.758, Average Loss: 5.011, avg. samples / sec: 538.60
Iteration:   4940, Loss function: 4.891, Average Loss: 5.006, avg. samples / sec: 538.85
Iteration:   4960, Loss function: 4.544, Average Loss: 5.002, avg. samples / sec: 538.30
Iteration:   4980, Loss function: 4.596, Average Loss: 4.998, avg. samples / sec: 535.16
Iteration:   5000, Loss function: 5.178, Average Loss: 4.996, avg. samples / sec: 537.36
Iteration:   5020, Loss function: 5.111, Average Loss: 4.993, avg. samples / sec: 536.39
Iteration:   5040, Loss function: 4.814, Average Loss: 4.990, avg. samples / sec: 539.62
Iteration:   5060, Loss function: 4.638, Average Loss: 4.986, avg. samples / sec: 539.11
Iteration:   5080, Loss function: 4.424, Average Loss: 4.982, avg. samples / sec: 537.49
Iteration:   5100, Loss function: 4.723, Average Loss: 4.979, avg. samples / sec: 537.50
Iteration:   5120, Loss function: 4.504, Average Loss: 4.976, avg. samples / sec: 534.61
Iteration:   5140, Loss function: 4.893, Average Loss: 4.972, avg. samples / sec: 537.95
:::MLLOG {"namespace": "", "time_ms": 1639759918281, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.02 s
:::MLLOG {"namespace": "", "time_ms": 1639759949358, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759949414, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759949414, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.74s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10512
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21474
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09325
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18553
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13416
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19627
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20820
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10512 AP goal: 0.10000
Iteration:   5160, Loss function: 5.037, Average Loss: 4.968, avg. samples / sec: 64.57
:::MLLOG {"namespace": "", "time_ms": 1639759952957, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759952958, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10512171909471935, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759952958, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759953177, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639759954
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 04:52:34 PM'
START TIMING RUN WAS 2021-12-17 04:32:49 PM
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:49 PM'
ENDING TIMING RUN AT 2021-12-17 04:52:34 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 04:52:34 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
+ result=1185
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,1185,nvidia,2021-12-17 04:32:49 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1185,nvidia,2021-12-17 04:32:49 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
