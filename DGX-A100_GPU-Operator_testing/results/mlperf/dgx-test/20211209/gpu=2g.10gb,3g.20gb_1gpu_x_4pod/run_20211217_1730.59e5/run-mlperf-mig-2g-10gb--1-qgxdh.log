8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151
+ MIG_MODE=1
Found 1 MIG instances: MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758767
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:47 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:47 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:47 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ echo 'running benchmark'
running benchmark
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_16-55-50 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ rm -f /data/coco2017/sync/2021-12-17_16-55-50
+ set +x
Fri Dec 17 16:32:47 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-2g-10gb--1-qgxdh to the sync file ...
run-mlperf-mig-2g-10gb--1-qgxdh Found 1 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
Fri Dec 17 16:32:52 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ tee -a /tmp/benchmark_all.log
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
:::MLLOG {"namespace": "", "time_ms": 1639758774635, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758774739, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1956532733, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1956532733
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758776417, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758776418, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758877832, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758877833, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758879187, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758879188, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758879494, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758879494, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758879495, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.080, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.090, Average Loss: 0.458, avg. samples / sec: 335.19
Iteration:     40, Loss function: 20.791, Average Loss: 0.859, avg. samples / sec: 345.78
Iteration:     60, Loss function: 20.410, Average Loss: 1.247, avg. samples / sec: 345.16
Iteration:     80, Loss function: 19.816, Average Loss: 1.619, avg. samples / sec: 345.59
Iteration:    100, Loss function: 14.955, Average Loss: 1.940, avg. samples / sec: 310.78
Iteration:    120, Loss function: 10.629, Average Loss: 2.138, avg. samples / sec: 350.16
Iteration:    140, Loss function: 9.868, Average Loss: 2.303, avg. samples / sec: 349.54
Iteration:    160, Loss function: 9.285, Average Loss: 2.445, avg. samples / sec: 348.67
Iteration:    180, Loss function: 8.935, Average Loss: 2.577, avg. samples / sec: 350.48
Iteration:    200, Loss function: 8.873, Average Loss: 2.704, avg. samples / sec: 350.46
Iteration:    220, Loss function: 8.731, Average Loss: 2.827, avg. samples / sec: 349.78
Iteration:    240, Loss function: 8.738, Average Loss: 2.944, avg. samples / sec: 350.62
Iteration:    260, Loss function: 8.779, Average Loss: 3.057, avg. samples / sec: 350.94
Iteration:    280, Loss function: 8.518, Average Loss: 3.169, avg. samples / sec: 349.32
Iteration:    300, Loss function: 8.385, Average Loss: 3.275, avg. samples / sec: 327.42
Iteration:    320, Loss function: 8.406, Average Loss: 3.376, avg. samples / sec: 348.84
Iteration:    340, Loss function: 8.392, Average Loss: 3.473, avg. samples / sec: 350.87
Iteration:    360, Loss function: 8.188, Average Loss: 3.566, avg. samples / sec: 351.43
Iteration:    380, Loss function: 7.948, Average Loss: 3.655, avg. samples / sec: 351.18
Iteration:    400, Loss function: 8.011, Average Loss: 3.741, avg. samples / sec: 350.74
Iteration:    420, Loss function: 7.691, Average Loss: 3.824, avg. samples / sec: 351.23
Iteration:    440, Loss function: 7.846, Average Loss: 3.904, avg. samples / sec: 351.09
Iteration:    460, Loss function: 7.649, Average Loss: 3.979, avg. samples / sec: 351.43
Iteration:    480, Loss function: 7.604, Average Loss: 4.052, avg. samples / sec: 351.96
Iteration:    500, Loss function: 7.671, Average Loss: 4.124, avg. samples / sec: 305.20
Iteration:    520, Loss function: 7.548, Average Loss: 4.193, avg. samples / sec: 351.88
Iteration:    540, Loss function: 7.419, Average Loss: 4.258, avg. samples / sec: 351.83
Iteration:    560, Loss function: 7.143, Average Loss: 4.319, avg. samples / sec: 350.10
Iteration:    580, Loss function: 7.203, Average Loss: 4.379, avg. samples / sec: 351.74
Iteration:    600, Loss function: 7.304, Average Loss: 4.438, avg. samples / sec: 350.36
Iteration:    620, Loss function: 7.022, Average Loss: 4.494, avg. samples / sec: 351.19
Iteration:    640, Loss function: 6.825, Average Loss: 4.548, avg. samples / sec: 351.33
Iteration:    660, Loss function: 7.187, Average Loss: 4.601, avg. samples / sec: 351.09
Iteration:    680, Loss function: 7.165, Average Loss: 4.652, avg. samples / sec: 351.70
Iteration:    700, Loss function: 6.764, Average Loss: 4.700, avg. samples / sec: 351.33
Iteration:    720, Loss function: 6.927, Average Loss: 4.749, avg. samples / sec: 351.36
Iteration:    740, Loss function: 7.051, Average Loss: 4.795, avg. samples / sec: 351.46
Iteration:    760, Loss function: 7.067, Average Loss: 4.838, avg. samples / sec: 351.52
Iteration:    780, Loss function: 6.778, Average Loss: 4.881, avg. samples / sec: 351.57
Iteration:    800, Loss function: 7.094, Average Loss: 4.920, avg. samples / sec: 351.98
Iteration:    820, Loss function: 6.867, Average Loss: 4.957, avg. samples / sec: 351.14
Iteration:    840, Loss function: 6.631, Average Loss: 4.993, avg. samples / sec: 351.52
Iteration:    860, Loss function: 6.933, Average Loss: 5.027, avg. samples / sec: 351.40
Iteration:    880, Loss function: 6.798, Average Loss: 5.060, avg. samples / sec: 351.40
Iteration:    900, Loss function: 6.825, Average Loss: 5.091, avg. samples / sec: 351.51
Iteration:    920, Loss function: 6.706, Average Loss: 5.120, avg. samples / sec: 351.56
Iteration:    940, Loss function: 6.986, Average Loss: 5.150, avg. samples / sec: 351.84
Iteration:    960, Loss function: 6.632, Average Loss: 5.178, avg. samples / sec: 351.33
Iteration:    980, Loss function: 6.361, Average Loss: 5.205, avg. samples / sec: 350.86
Iteration:   1000, Loss function: 6.645, Average Loss: 5.231, avg. samples / sec: 351.83
Iteration:   1020, Loss function: 6.221, Average Loss: 5.254, avg. samples / sec: 351.29
:::MLLOG {"namespace": "", "time_ms": 1639759216405, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759216406, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.430, Average Loss: 5.278, avg. samples / sec: 351.36
Iteration:   1060, Loss function: 6.308, Average Loss: 5.301, avg. samples / sec: 351.76
Iteration:   1080, Loss function: 6.331, Average Loss: 5.322, avg. samples / sec: 351.50
Iteration:   1100, Loss function: 6.201, Average Loss: 5.342, avg. samples / sec: 351.31
Iteration:   1120, Loss function: 6.329, Average Loss: 5.360, avg. samples / sec: 351.47
Iteration:   1140, Loss function: 6.513, Average Loss: 5.380, avg. samples / sec: 351.76
Iteration:   1160, Loss function: 6.274, Average Loss: 5.397, avg. samples / sec: 351.33
Iteration:   1180, Loss function: 6.052, Average Loss: 5.413, avg. samples / sec: 351.60
Iteration:   1200, Loss function: 6.255, Average Loss: 5.428, avg. samples / sec: 351.58
Iteration:   1220, Loss function: 6.126, Average Loss: 5.443, avg. samples / sec: 351.86
Iteration:   1240, Loss function: 6.218, Average Loss: 5.456, avg. samples / sec: 351.64
Iteration:   1260, Loss function: 5.947, Average Loss: 5.470, avg. samples / sec: 351.27
Iteration:   1280, Loss function: 5.888, Average Loss: 5.482, avg. samples / sec: 351.46
Iteration:   1300, Loss function: 6.195, Average Loss: 5.495, avg. samples / sec: 351.36
Iteration:   1320, Loss function: 6.072, Average Loss: 5.507, avg. samples / sec: 351.52
Iteration:   1340, Loss function: 5.924, Average Loss: 5.516, avg. samples / sec: 351.78
Iteration:   1360, Loss function: 6.126, Average Loss: 5.527, avg. samples / sec: 351.60
Iteration:   1380, Loss function: 6.186, Average Loss: 5.537, avg. samples / sec: 351.79
Iteration:   1400, Loss function: 6.007, Average Loss: 5.545, avg. samples / sec: 351.24
Iteration:   1420, Loss function: 5.880, Average Loss: 5.553, avg. samples / sec: 350.71
Iteration:   1440, Loss function: 6.216, Average Loss: 5.561, avg. samples / sec: 351.53
Iteration:   1460, Loss function: 6.185, Average Loss: 5.569, avg. samples / sec: 351.11
Iteration:   1480, Loss function: 5.896, Average Loss: 5.578, avg. samples / sec: 350.75
Iteration:   1500, Loss function: 6.131, Average Loss: 5.586, avg. samples / sec: 351.37
Iteration:   1520, Loss function: 5.908, Average Loss: 5.591, avg. samples / sec: 351.52
Iteration:   1540, Loss function: 6.075, Average Loss: 5.595, avg. samples / sec: 351.39
Iteration:   1560, Loss function: 5.783, Average Loss: 5.600, avg. samples / sec: 351.73
Iteration:   1580, Loss function: 5.538, Average Loss: 5.604, avg. samples / sec: 351.59
Iteration:   1600, Loss function: 6.162, Average Loss: 5.610, avg. samples / sec: 352.09
Iteration:   1620, Loss function: 5.620, Average Loss: 5.615, avg. samples / sec: 351.48
Iteration:   1640, Loss function: 6.027, Average Loss: 5.618, avg. samples / sec: 351.19
Iteration:   1660, Loss function: 5.735, Average Loss: 5.623, avg. samples / sec: 351.56
Iteration:   1680, Loss function: 5.763, Average Loss: 5.625, avg. samples / sec: 351.25
Iteration:   1700, Loss function: 5.721, Average Loss: 5.629, avg. samples / sec: 351.54
Iteration:   1720, Loss function: 5.834, Average Loss: 5.630, avg. samples / sec: 351.31
Iteration:   1740, Loss function: 5.823, Average Loss: 5.633, avg. samples / sec: 350.83
Iteration:   1760, Loss function: 5.470, Average Loss: 5.634, avg. samples / sec: 351.64
Iteration:   1780, Loss function: 5.680, Average Loss: 5.635, avg. samples / sec: 351.57
Iteration:   1800, Loss function: 5.601, Average Loss: 5.637, avg. samples / sec: 351.21
Iteration:   1820, Loss function: 6.022, Average Loss: 5.639, avg. samples / sec: 351.30
Iteration:   1840, Loss function: 5.920, Average Loss: 5.640, avg. samples / sec: 351.25
Iteration:   1860, Loss function: 5.790, Average Loss: 5.640, avg. samples / sec: 350.72
Iteration:   1880, Loss function: 5.877, Average Loss: 5.642, avg. samples / sec: 351.39
Iteration:   1900, Loss function: 5.875, Average Loss: 5.642, avg. samples / sec: 350.36
Iteration:   1920, Loss function: 5.639, Average Loss: 5.641, avg. samples / sec: 351.53
Iteration:   1940, Loss function: 5.693, Average Loss: 5.640, avg. samples / sec: 351.17
Iteration:   1960, Loss function: 5.528, Average Loss: 5.639, avg. samples / sec: 351.03
Iteration:   1980, Loss function: 5.567, Average Loss: 5.638, avg. samples / sec: 350.67
Iteration:   2000, Loss function: 5.461, Average Loss: 5.638, avg. samples / sec: 351.60
Iteration:   2020, Loss function: 5.565, Average Loss: 5.637, avg. samples / sec: 351.19
Iteration:   2040, Loss function: 5.784, Average Loss: 5.636, avg. samples / sec: 351.92
:::MLLOG {"namespace": "", "time_ms": 1639759550233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759550234, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.493, Average Loss: 5.633, avg. samples / sec: 351.93
Iteration:   2080, Loss function: 5.141, Average Loss: 5.632, avg. samples / sec: 351.82
Iteration:   2100, Loss function: 5.570, Average Loss: 5.630, avg. samples / sec: 351.92
Iteration:   2120, Loss function: 5.450, Average Loss: 5.627, avg. samples / sec: 351.46
Iteration:   2140, Loss function: 5.348, Average Loss: 5.624, avg. samples / sec: 351.44
Iteration:   2160, Loss function: 5.234, Average Loss: 5.621, avg. samples / sec: 351.14
Iteration:   2180, Loss function: 5.373, Average Loss: 5.618, avg. samples / sec: 351.83
Iteration:   2200, Loss function: 5.379, Average Loss: 5.614, avg. samples / sec: 351.47
Iteration:   2220, Loss function: 5.618, Average Loss: 5.613, avg. samples / sec: 351.57
Iteration:   2240, Loss function: 5.435, Average Loss: 5.611, avg. samples / sec: 351.24
Iteration:   2260, Loss function: 5.370, Average Loss: 5.608, avg. samples / sec: 351.32
Iteration:   2280, Loss function: 5.389, Average Loss: 5.606, avg. samples / sec: 350.35
Iteration:   2300, Loss function: 5.057, Average Loss: 5.603, avg. samples / sec: 351.43
Iteration:   2320, Loss function: 5.375, Average Loss: 5.601, avg. samples / sec: 351.42
Iteration:   2340, Loss function: 5.393, Average Loss: 5.597, avg. samples / sec: 351.46
Iteration:   2360, Loss function: 5.395, Average Loss: 5.593, avg. samples / sec: 351.50
Iteration:   2380, Loss function: 5.450, Average Loss: 5.591, avg. samples / sec: 351.52
Iteration:   2400, Loss function: 5.540, Average Loss: 5.587, avg. samples / sec: 351.11
Iteration:   2420, Loss function: 5.442, Average Loss: 5.583, avg. samples / sec: 351.53
Iteration:   2440, Loss function: 5.366, Average Loss: 5.579, avg. samples / sec: 351.59
Iteration:   2460, Loss function: 5.221, Average Loss: 5.575, avg. samples / sec: 351.08
Iteration:   2480, Loss function: 5.343, Average Loss: 5.572, avg. samples / sec: 351.44
Iteration:   2500, Loss function: 5.586, Average Loss: 5.568, avg. samples / sec: 351.53
Iteration:   2520, Loss function: 5.376, Average Loss: 5.564, avg. samples / sec: 351.99
Iteration:   2540, Loss function: 5.546, Average Loss: 5.561, avg. samples / sec: 352.24
Iteration:   2560, Loss function: 5.357, Average Loss: 5.558, avg. samples / sec: 351.69
Iteration:   2580, Loss function: 5.245, Average Loss: 5.555, avg. samples / sec: 351.98
Iteration:   2600, Loss function: 5.580, Average Loss: 5.553, avg. samples / sec: 352.09
Iteration:   2620, Loss function: 5.557, Average Loss: 5.548, avg. samples / sec: 352.15
Iteration:   2640, Loss function: 5.138, Average Loss: 5.545, avg. samples / sec: 351.44
Iteration:   2660, Loss function: 5.156, Average Loss: 5.541, avg. samples / sec: 351.44
Iteration:   2680, Loss function: 5.071, Average Loss: 5.538, avg. samples / sec: 351.75
Iteration:   2700, Loss function: 5.359, Average Loss: 5.533, avg. samples / sec: 351.63
Iteration:   2720, Loss function: 5.329, Average Loss: 5.530, avg. samples / sec: 351.80
Iteration:   2740, Loss function: 5.097, Average Loss: 5.525, avg. samples / sec: 351.90
Iteration:   2760, Loss function: 4.855, Average Loss: 5.519, avg. samples / sec: 351.45
Iteration:   2780, Loss function: 5.452, Average Loss: 5.516, avg. samples / sec: 351.57
Iteration:   2800, Loss function: 5.191, Average Loss: 5.512, avg. samples / sec: 351.23
Iteration:   2820, Loss function: 5.529, Average Loss: 5.508, avg. samples / sec: 351.90
Iteration:   2840, Loss function: 5.357, Average Loss: 5.504, avg. samples / sec: 351.61
Iteration:   2860, Loss function: 5.148, Average Loss: 5.499, avg. samples / sec: 351.77
Iteration:   2880, Loss function: 5.327, Average Loss: 5.495, avg. samples / sec: 351.76
Iteration:   2900, Loss function: 5.083, Average Loss: 5.489, avg. samples / sec: 351.50
Iteration:   2920, Loss function: 5.150, Average Loss: 5.483, avg. samples / sec: 351.49
Iteration:   2940, Loss function: 5.077, Average Loss: 5.479, avg. samples / sec: 351.53
Iteration:   2960, Loss function: 5.414, Average Loss: 5.475, avg. samples / sec: 351.84
Iteration:   2980, Loss function: 5.245, Average Loss: 5.471, avg. samples / sec: 351.17
Iteration:   3000, Loss function: 5.319, Average Loss: 5.467, avg. samples / sec: 351.53
Iteration:   3020, Loss function: 5.306, Average Loss: 5.460, avg. samples / sec: 351.53
Iteration:   3040, Loss function: 5.265, Average Loss: 5.456, avg. samples / sec: 351.19
Iteration:   3060, Loss function: 5.039, Average Loss: 5.450, avg. samples / sec: 351.33
Iteration:   3080, Loss function: 4.976, Average Loss: 5.445, avg. samples / sec: 351.17
:::MLLOG {"namespace": "", "time_ms": 1639759883601, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759883602, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.064, Average Loss: 5.440, avg. samples / sec: 351.36
Iteration:   3120, Loss function: 5.061, Average Loss: 5.434, avg. samples / sec: 351.44
Iteration:   3140, Loss function: 5.201, Average Loss: 5.430, avg. samples / sec: 351.59
Iteration:   3160, Loss function: 5.375, Average Loss: 5.425, avg. samples / sec: 351.15
Iteration:   3180, Loss function: 5.173, Average Loss: 5.421, avg. samples / sec: 351.19
Iteration:   3200, Loss function: 5.264, Average Loss: 5.416, avg. samples / sec: 351.41
Iteration:   3220, Loss function: 5.165, Average Loss: 5.410, avg. samples / sec: 351.53
Iteration:   3240, Loss function: 5.399, Average Loss: 5.406, avg. samples / sec: 350.63
Iteration:   3260, Loss function: 5.102, Average Loss: 5.400, avg. samples / sec: 350.79
Iteration:   3280, Loss function: 4.820, Average Loss: 5.394, avg. samples / sec: 352.05
Iteration:   3300, Loss function: 4.798, Average Loss: 5.389, avg. samples / sec: 351.83
Iteration:   3320, Loss function: 5.033, Average Loss: 5.385, avg. samples / sec: 352.56
Iteration:   3340, Loss function: 5.201, Average Loss: 5.380, avg. samples / sec: 351.88
Iteration:   3360, Loss function: 5.150, Average Loss: 5.373, avg. samples / sec: 351.96
Iteration:   3380, Loss function: 5.007, Average Loss: 5.367, avg. samples / sec: 352.25
Iteration:   3400, Loss function: 4.753, Average Loss: 5.362, avg. samples / sec: 352.91
Iteration:   3420, Loss function: 5.302, Average Loss: 5.357, avg. samples / sec: 352.83
Iteration:   3440, Loss function: 4.897, Average Loss: 5.352, avg. samples / sec: 352.59
Iteration:   3460, Loss function: 5.055, Average Loss: 5.347, avg. samples / sec: 352.66
Iteration:   3480, Loss function: 5.225, Average Loss: 5.342, avg. samples / sec: 352.47
Iteration:   3500, Loss function: 5.367, Average Loss: 5.339, avg. samples / sec: 352.49
Iteration:   3520, Loss function: 5.166, Average Loss: 5.335, avg. samples / sec: 352.49
Iteration:   3540, Loss function: 5.072, Average Loss: 5.331, avg. samples / sec: 352.59
Iteration:   3560, Loss function: 4.935, Average Loss: 5.327, avg. samples / sec: 351.73
Iteration:   3580, Loss function: 5.352, Average Loss: 5.323, avg. samples / sec: 351.79
Iteration:   3600, Loss function: 4.988, Average Loss: 5.316, avg. samples / sec: 352.31
Iteration:   3620, Loss function: 4.842, Average Loss: 5.311, avg. samples / sec: 352.25
Iteration:   3640, Loss function: 4.896, Average Loss: 5.306, avg. samples / sec: 352.34
Iteration:   3660, Loss function: 4.867, Average Loss: 5.301, avg. samples / sec: 352.25
Iteration:   3680, Loss function: 5.017, Average Loss: 5.294, avg. samples / sec: 352.25
Iteration:   3700, Loss function: 4.907, Average Loss: 5.288, avg. samples / sec: 352.24
Iteration:   3720, Loss function: 4.977, Average Loss: 5.282, avg. samples / sec: 352.60
Iteration:   3740, Loss function: 5.074, Average Loss: 5.277, avg. samples / sec: 352.32
Iteration:   3760, Loss function: 4.993, Average Loss: 5.272, avg. samples / sec: 351.76
Iteration:   3780, Loss function: 4.898, Average Loss: 5.267, avg. samples / sec: 352.26
Iteration:   3800, Loss function: 5.241, Average Loss: 5.264, avg. samples / sec: 352.30
Iteration:   3820, Loss function: 5.152, Average Loss: 5.259, avg. samples / sec: 352.23
Iteration:   3840, Loss function: 4.956, Average Loss: 5.254, avg. samples / sec: 352.54
Iteration:   3860, Loss function: 4.994, Average Loss: 5.250, avg. samples / sec: 352.67
Iteration:   3880, Loss function: 5.043, Average Loss: 5.244, avg. samples / sec: 353.08
Iteration:   3900, Loss function: 5.075, Average Loss: 5.239, avg. samples / sec: 353.55
Iteration:   3920, Loss function: 5.288, Average Loss: 5.235, avg. samples / sec: 352.68
Iteration:   3940, Loss function: 5.162, Average Loss: 5.230, avg. samples / sec: 352.56
Iteration:   3960, Loss function: 4.871, Average Loss: 5.226, avg. samples / sec: 353.06
Iteration:   3980, Loss function: 4.963, Average Loss: 5.220, avg. samples / sec: 352.62
Iteration:   4000, Loss function: 5.046, Average Loss: 5.216, avg. samples / sec: 352.27
Iteration:   4020, Loss function: 4.932, Average Loss: 5.210, avg. samples / sec: 352.03
Iteration:   4040, Loss function: 5.007, Average Loss: 5.207, avg. samples / sec: 351.85
Iteration:   4060, Loss function: 5.348, Average Loss: 5.203, avg. samples / sec: 353.51
Iteration:   4080, Loss function: 5.286, Average Loss: 5.199, avg. samples / sec: 353.34
Iteration:   4100, Loss function: 5.280, Average Loss: 5.195, avg. samples / sec: 353.01
:::MLLOG {"namespace": "", "time_ms": 1639760216622, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760216622, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.087, Average Loss: 5.191, avg. samples / sec: 352.95
Iteration:   4140, Loss function: 4.974, Average Loss: 5.185, avg. samples / sec: 353.11
Iteration:   4160, Loss function: 5.106, Average Loss: 5.179, avg. samples / sec: 353.05
Iteration:   4180, Loss function: 4.791, Average Loss: 5.174, avg. samples / sec: 352.43
Iteration:   4200, Loss function: 4.664, Average Loss: 5.170, avg. samples / sec: 352.13
Iteration:   4220, Loss function: 4.902, Average Loss: 5.164, avg. samples / sec: 352.05
Iteration:   4240, Loss function: 5.000, Average Loss: 5.160, avg. samples / sec: 352.36
Iteration:   4260, Loss function: 5.086, Average Loss: 5.155, avg. samples / sec: 352.50
Iteration:   4280, Loss function: 5.085, Average Loss: 5.150, avg. samples / sec: 352.14
Iteration:   4300, Loss function: 4.777, Average Loss: 5.144, avg. samples / sec: 352.17
Iteration:   4320, Loss function: 4.754, Average Loss: 5.139, avg. samples / sec: 352.62
Iteration:   4340, Loss function: 4.959, Average Loss: 5.133, avg. samples / sec: 352.56
Iteration:   4360, Loss function: 4.991, Average Loss: 5.130, avg. samples / sec: 352.55
Iteration:   4380, Loss function: 4.902, Average Loss: 5.125, avg. samples / sec: 352.71
Iteration:   4400, Loss function: 4.965, Average Loss: 5.120, avg. samples / sec: 352.69
Iteration:   4420, Loss function: 4.933, Average Loss: 5.115, avg. samples / sec: 352.43
Iteration:   4440, Loss function: 4.917, Average Loss: 5.110, avg. samples / sec: 352.61
Iteration:   4460, Loss function: 5.245, Average Loss: 5.106, avg. samples / sec: 352.49
Iteration:   4480, Loss function: 5.059, Average Loss: 5.103, avg. samples / sec: 352.59
Iteration:   4500, Loss function: 4.843, Average Loss: 5.100, avg. samples / sec: 352.65
Iteration:   4520, Loss function: 4.822, Average Loss: 5.095, avg. samples / sec: 352.74
Iteration:   4540, Loss function: 5.081, Average Loss: 5.091, avg. samples / sec: 352.62
Iteration:   4560, Loss function: 4.707, Average Loss: 5.086, avg. samples / sec: 352.48
Iteration:   4580, Loss function: 4.825, Average Loss: 5.084, avg. samples / sec: 352.37
Iteration:   4600, Loss function: 4.816, Average Loss: 5.079, avg. samples / sec: 352.46
Iteration:   4620, Loss function: 4.749, Average Loss: 5.075, avg. samples / sec: 352.36
Iteration:   4640, Loss function: 4.570, Average Loss: 5.070, avg. samples / sec: 351.77
Iteration:   4660, Loss function: 4.758, Average Loss: 5.067, avg. samples / sec: 351.76
Iteration:   4680, Loss function: 5.294, Average Loss: 5.062, avg. samples / sec: 352.34
Iteration:   4700, Loss function: 4.768, Average Loss: 5.059, avg. samples / sec: 353.04
Iteration:   4720, Loss function: 4.660, Average Loss: 5.054, avg. samples / sec: 352.88
Iteration:   4740, Loss function: 4.698, Average Loss: 5.051, avg. samples / sec: 352.76
Iteration:   4760, Loss function: 4.572, Average Loss: 5.048, avg. samples / sec: 352.84
Iteration:   4780, Loss function: 5.165, Average Loss: 5.044, avg. samples / sec: 352.63
Iteration:   4800, Loss function: 4.914, Average Loss: 5.041, avg. samples / sec: 352.56
Iteration:   4820, Loss function: 4.780, Average Loss: 5.037, avg. samples / sec: 352.62
Iteration:   4840, Loss function: 5.107, Average Loss: 5.034, avg. samples / sec: 352.72
Iteration:   4860, Loss function: 4.785, Average Loss: 5.029, avg. samples / sec: 352.73
Iteration:   4880, Loss function: 5.162, Average Loss: 5.026, avg. samples / sec: 352.67
Iteration:   4900, Loss function: 4.570, Average Loss: 5.022, avg. samples / sec: 352.63
Iteration:   4920, Loss function: 4.769, Average Loss: 5.019, avg. samples / sec: 352.56
Iteration:   4940, Loss function: 4.742, Average Loss: 5.014, avg. samples / sec: 352.52
Iteration:   4960, Loss function: 4.711, Average Loss: 5.011, avg. samples / sec: 352.52
Iteration:   4980, Loss function: 4.524, Average Loss: 5.007, avg. samples / sec: 352.36
Iteration:   5000, Loss function: 4.771, Average Loss: 5.003, avg. samples / sec: 352.67
Iteration:   5020, Loss function: 5.073, Average Loss: 4.999, avg. samples / sec: 352.37
Iteration:   5040, Loss function: 4.736, Average Loss: 4.996, avg. samples / sec: 352.53
Iteration:   5060, Loss function: 4.738, Average Loss: 4.993, avg. samples / sec: 352.14
Iteration:   5080, Loss function: 4.548, Average Loss: 4.989, avg. samples / sec: 352.13
Iteration:   5100, Loss function: 5.131, Average Loss: 4.987, avg. samples / sec: 352.66
Iteration:   5120, Loss function: 4.543, Average Loss: 4.984, avg. samples / sec: 353.23
Iteration:   5140, Loss function: 4.928, Average Loss: 4.981, avg. samples / sec: 352.64
:::MLLOG {"namespace": "", "time_ms": 1639760549376, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.57 s
:::MLLOG {"namespace": "", "time_ms": 1639760582995, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760583036, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760583036, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10422
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09435
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18656
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13492
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20935
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20935
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10422 AP goal: 0.10000
Iteration:   5160, Loss function: 5.041, Average Loss: 4.976, avg. samples / sec: 57.05
:::MLLOG {"namespace": "", "time_ms": 1639760588369, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588370, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10422430640037833, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588370, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588652, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 17:03:09 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 17:03:09 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758774635, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758774739, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1956532733, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1956532733
:::MLLOG {"namespace": "", "time_ms": 1639758776417, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758776418, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758776422, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758877832, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758877833, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758879187, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758879188, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758879494, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758879494, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758879495, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 23.080, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.090, Average Loss: 0.458, avg. samples / sec: 335.19
Iteration:     40, Loss function: 20.791, Average Loss: 0.859, avg. samples / sec: 345.78
Iteration:     60, Loss function: 20.410, Average Loss: 1.247, avg. samples / sec: 345.16
Iteration:     80, Loss function: 19.816, Average Loss: 1.619, avg. samples / sec: 345.59
Iteration:    100, Loss function: 14.955, Average Loss: 1.940, avg. samples / sec: 310.78
Iteration:    120, Loss function: 10.629, Average Loss: 2.138, avg. samples / sec: 350.16
Iteration:    140, Loss function: 9.868, Average Loss: 2.303, avg. samples / sec: 349.54
Iteration:    160, Loss function: 9.285, Average Loss: 2.445, avg. samples / sec: 348.67
Iteration:    180, Loss function: 8.935, Average Loss: 2.577, avg. samples / sec: 350.48
Iteration:    200, Loss function: 8.873, Average Loss: 2.704, avg. samples / sec: 350.46
Iteration:    220, Loss function: 8.731, Average Loss: 2.827, avg. samples / sec: 349.78
Iteration:    240, Loss function: 8.738, Average Loss: 2.944, avg. samples / sec: 350.62
Iteration:    260, Loss function: 8.779, Average Loss: 3.057, avg. samples / sec: 350.94
Iteration:    280, Loss function: 8.518, Average Loss: 3.169, avg. samples / sec: 349.32
Iteration:    300, Loss function: 8.385, Average Loss: 3.275, avg. samples / sec: 327.42
Iteration:    320, Loss function: 8.406, Average Loss: 3.376, avg. samples / sec: 348.84
Iteration:    340, Loss function: 8.392, Average Loss: 3.473, avg. samples / sec: 350.87
Iteration:    360, Loss function: 8.188, Average Loss: 3.566, avg. samples / sec: 351.43
Iteration:    380, Loss function: 7.948, Average Loss: 3.655, avg. samples / sec: 351.18
Iteration:    400, Loss function: 8.011, Average Loss: 3.741, avg. samples / sec: 350.74
Iteration:    420, Loss function: 7.691, Average Loss: 3.824, avg. samples / sec: 351.23
Iteration:    440, Loss function: 7.846, Average Loss: 3.904, avg. samples / sec: 351.09
Iteration:    460, Loss function: 7.649, Average Loss: 3.979, avg. samples / sec: 351.43
Iteration:    480, Loss function: 7.604, Average Loss: 4.052, avg. samples / sec: 351.96
Iteration:    500, Loss function: 7.671, Average Loss: 4.124, avg. samples / sec: 305.20
Iteration:    520, Loss function: 7.548, Average Loss: 4.193, avg. samples / sec: 351.88
Iteration:    540, Loss function: 7.419, Average Loss: 4.258, avg. samples / sec: 351.83
Iteration:    560, Loss function: 7.143, Average Loss: 4.319, avg. samples / sec: 350.10
Iteration:    580, Loss function: 7.203, Average Loss: 4.379, avg. samples / sec: 351.74
Iteration:    600, Loss function: 7.304, Average Loss: 4.438, avg. samples / sec: 350.36
Iteration:    620, Loss function: 7.022, Average Loss: 4.494, avg. samples / sec: 351.19
Iteration:    640, Loss function: 6.825, Average Loss: 4.548, avg. samples / sec: 351.33
Iteration:    660, Loss function: 7.187, Average Loss: 4.601, avg. samples / sec: 351.09
Iteration:    680, Loss function: 7.165, Average Loss: 4.652, avg. samples / sec: 351.70
Iteration:    700, Loss function: 6.764, Average Loss: 4.700, avg. samples / sec: 351.33
Iteration:    720, Loss function: 6.927, Average Loss: 4.749, avg. samples / sec: 351.36
Iteration:    740, Loss function: 7.051, Average Loss: 4.795, avg. samples / sec: 351.46
Iteration:    760, Loss function: 7.067, Average Loss: 4.838, avg. samples / sec: 351.52
Iteration:    780, Loss function: 6.778, Average Loss: 4.881, avg. samples / sec: 351.57
Iteration:    800, Loss function: 7.094, Average Loss: 4.920, avg. samples / sec: 351.98
Iteration:    820, Loss function: 6.867, Average Loss: 4.957, avg. samples / sec: 351.14
Iteration:    840, Loss function: 6.631, Average Loss: 4.993, avg. samples / sec: 351.52
Iteration:    860, Loss function: 6.933, Average Loss: 5.027, avg. samples / sec: 351.40
Iteration:    880, Loss function: 6.798, Average Loss: 5.060, avg. samples / sec: 351.40
Iteration:    900, Loss function: 6.825, Average Loss: 5.091, avg. samples / sec: 351.51
Iteration:    920, Loss function: 6.706, Average Loss: 5.120, avg. samples / sec: 351.56
Iteration:    940, Loss function: 6.986, Average Loss: 5.150, avg. samples / sec: 351.84
Iteration:    960, Loss function: 6.632, Average Loss: 5.178, avg. samples / sec: 351.33
Iteration:    980, Loss function: 6.361, Average Loss: 5.205, avg. samples / sec: 350.86
Iteration:   1000, Loss function: 6.645, Average Loss: 5.231, avg. samples / sec: 351.83
Iteration:   1020, Loss function: 6.221, Average Loss: 5.254, avg. samples / sec: 351.29
:::MLLOG {"namespace": "", "time_ms": 1639759216405, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759216406, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.430, Average Loss: 5.278, avg. samples / sec: 351.36
Iteration:   1060, Loss function: 6.308, Average Loss: 5.301, avg. samples / sec: 351.76
Iteration:   1080, Loss function: 6.331, Average Loss: 5.322, avg. samples / sec: 351.50
Iteration:   1100, Loss function: 6.201, Average Loss: 5.342, avg. samples / sec: 351.31
Iteration:   1120, Loss function: 6.329, Average Loss: 5.360, avg. samples / sec: 351.47
Iteration:   1140, Loss function: 6.513, Average Loss: 5.380, avg. samples / sec: 351.76
Iteration:   1160, Loss function: 6.274, Average Loss: 5.397, avg. samples / sec: 351.33
Iteration:   1180, Loss function: 6.052, Average Loss: 5.413, avg. samples / sec: 351.60
Iteration:   1200, Loss function: 6.255, Average Loss: 5.428, avg. samples / sec: 351.58
Iteration:   1220, Loss function: 6.126, Average Loss: 5.443, avg. samples / sec: 351.86
Iteration:   1240, Loss function: 6.218, Average Loss: 5.456, avg. samples / sec: 351.64
Iteration:   1260, Loss function: 5.947, Average Loss: 5.470, avg. samples / sec: 351.27
Iteration:   1280, Loss function: 5.888, Average Loss: 5.482, avg. samples / sec: 351.46
Iteration:   1300, Loss function: 6.195, Average Loss: 5.495, avg. samples / sec: 351.36
Iteration:   1320, Loss function: 6.072, Average Loss: 5.507, avg. samples / sec: 351.52
Iteration:   1340, Loss function: 5.924, Average Loss: 5.516, avg. samples / sec: 351.78
Iteration:   1360, Loss function: 6.126, Average Loss: 5.527, avg. samples / sec: 351.60
Iteration:   1380, Loss function: 6.186, Average Loss: 5.537, avg. samples / sec: 351.79
Iteration:   1400, Loss function: 6.007, Average Loss: 5.545, avg. samples / sec: 351.24
Iteration:   1420, Loss function: 5.880, Average Loss: 5.553, avg. samples / sec: 350.71
Iteration:   1440, Loss function: 6.216, Average Loss: 5.561, avg. samples / sec: 351.53
Iteration:   1460, Loss function: 6.185, Average Loss: 5.569, avg. samples / sec: 351.11
Iteration:   1480, Loss function: 5.896, Average Loss: 5.578, avg. samples / sec: 350.75
Iteration:   1500, Loss function: 6.131, Average Loss: 5.586, avg. samples / sec: 351.37
Iteration:   1520, Loss function: 5.908, Average Loss: 5.591, avg. samples / sec: 351.52
Iteration:   1540, Loss function: 6.075, Average Loss: 5.595, avg. samples / sec: 351.39
Iteration:   1560, Loss function: 5.783, Average Loss: 5.600, avg. samples / sec: 351.73
Iteration:   1580, Loss function: 5.538, Average Loss: 5.604, avg. samples / sec: 351.59
Iteration:   1600, Loss function: 6.162, Average Loss: 5.610, avg. samples / sec: 352.09
Iteration:   1620, Loss function: 5.620, Average Loss: 5.615, avg. samples / sec: 351.48
Iteration:   1640, Loss function: 6.027, Average Loss: 5.618, avg. samples / sec: 351.19
Iteration:   1660, Loss function: 5.735, Average Loss: 5.623, avg. samples / sec: 351.56
Iteration:   1680, Loss function: 5.763, Average Loss: 5.625, avg. samples / sec: 351.25
Iteration:   1700, Loss function: 5.721, Average Loss: 5.629, avg. samples / sec: 351.54
Iteration:   1720, Loss function: 5.834, Average Loss: 5.630, avg. samples / sec: 351.31
Iteration:   1740, Loss function: 5.823, Average Loss: 5.633, avg. samples / sec: 350.83
Iteration:   1760, Loss function: 5.470, Average Loss: 5.634, avg. samples / sec: 351.64
Iteration:   1780, Loss function: 5.680, Average Loss: 5.635, avg. samples / sec: 351.57
Iteration:   1800, Loss function: 5.601, Average Loss: 5.637, avg. samples / sec: 351.21
Iteration:   1820, Loss function: 6.022, Average Loss: 5.639, avg. samples / sec: 351.30
Iteration:   1840, Loss function: 5.920, Average Loss: 5.640, avg. samples / sec: 351.25
Iteration:   1860, Loss function: 5.790, Average Loss: 5.640, avg. samples / sec: 350.72
Iteration:   1880, Loss function: 5.877, Average Loss: 5.642, avg. samples / sec: 351.39
Iteration:   1900, Loss function: 5.875, Average Loss: 5.642, avg. samples / sec: 350.36
Iteration:   1920, Loss function: 5.639, Average Loss: 5.641, avg. samples / sec: 351.53
Iteration:   1940, Loss function: 5.693, Average Loss: 5.640, avg. samples / sec: 351.17
Iteration:   1960, Loss function: 5.528, Average Loss: 5.639, avg. samples / sec: 351.03
Iteration:   1980, Loss function: 5.567, Average Loss: 5.638, avg. samples / sec: 350.67
Iteration:   2000, Loss function: 5.461, Average Loss: 5.638, avg. samples / sec: 351.60
Iteration:   2020, Loss function: 5.565, Average Loss: 5.637, avg. samples / sec: 351.19
Iteration:   2040, Loss function: 5.784, Average Loss: 5.636, avg. samples / sec: 351.92
:::MLLOG {"namespace": "", "time_ms": 1639759550233, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759550234, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.493, Average Loss: 5.633, avg. samples / sec: 351.93
Iteration:   2080, Loss function: 5.141, Average Loss: 5.632, avg. samples / sec: 351.82
Iteration:   2100, Loss function: 5.570, Average Loss: 5.630, avg. samples / sec: 351.92
Iteration:   2120, Loss function: 5.450, Average Loss: 5.627, avg. samples / sec: 351.46
Iteration:   2140, Loss function: 5.348, Average Loss: 5.624, avg. samples / sec: 351.44
Iteration:   2160, Loss function: 5.234, Average Loss: 5.621, avg. samples / sec: 351.14
Iteration:   2180, Loss function: 5.373, Average Loss: 5.618, avg. samples / sec: 351.83
Iteration:   2200, Loss function: 5.379, Average Loss: 5.614, avg. samples / sec: 351.47
Iteration:   2220, Loss function: 5.618, Average Loss: 5.613, avg. samples / sec: 351.57
Iteration:   2240, Loss function: 5.435, Average Loss: 5.611, avg. samples / sec: 351.24
Iteration:   2260, Loss function: 5.370, Average Loss: 5.608, avg. samples / sec: 351.32
Iteration:   2280, Loss function: 5.389, Average Loss: 5.606, avg. samples / sec: 350.35
Iteration:   2300, Loss function: 5.057, Average Loss: 5.603, avg. samples / sec: 351.43
Iteration:   2320, Loss function: 5.375, Average Loss: 5.601, avg. samples / sec: 351.42
Iteration:   2340, Loss function: 5.393, Average Loss: 5.597, avg. samples / sec: 351.46
Iteration:   2360, Loss function: 5.395, Average Loss: 5.593, avg. samples / sec: 351.50
Iteration:   2380, Loss function: 5.450, Average Loss: 5.591, avg. samples / sec: 351.52
Iteration:   2400, Loss function: 5.540, Average Loss: 5.587, avg. samples / sec: 351.11
Iteration:   2420, Loss function: 5.442, Average Loss: 5.583, avg. samples / sec: 351.53
Iteration:   2440, Loss function: 5.366, Average Loss: 5.579, avg. samples / sec: 351.59
Iteration:   2460, Loss function: 5.221, Average Loss: 5.575, avg. samples / sec: 351.08
Iteration:   2480, Loss function: 5.343, Average Loss: 5.572, avg. samples / sec: 351.44
Iteration:   2500, Loss function: 5.586, Average Loss: 5.568, avg. samples / sec: 351.53
Iteration:   2520, Loss function: 5.376, Average Loss: 5.564, avg. samples / sec: 351.99
Iteration:   2540, Loss function: 5.546, Average Loss: 5.561, avg. samples / sec: 352.24
Iteration:   2560, Loss function: 5.357, Average Loss: 5.558, avg. samples / sec: 351.69
Iteration:   2580, Loss function: 5.245, Average Loss: 5.555, avg. samples / sec: 351.98
Iteration:   2600, Loss function: 5.580, Average Loss: 5.553, avg. samples / sec: 352.09
Iteration:   2620, Loss function: 5.557, Average Loss: 5.548, avg. samples / sec: 352.15
Iteration:   2640, Loss function: 5.138, Average Loss: 5.545, avg. samples / sec: 351.44
Iteration:   2660, Loss function: 5.156, Average Loss: 5.541, avg. samples / sec: 351.44
Iteration:   2680, Loss function: 5.071, Average Loss: 5.538, avg. samples / sec: 351.75
Iteration:   2700, Loss function: 5.359, Average Loss: 5.533, avg. samples / sec: 351.63
Iteration:   2720, Loss function: 5.329, Average Loss: 5.530, avg. samples / sec: 351.80
Iteration:   2740, Loss function: 5.097, Average Loss: 5.525, avg. samples / sec: 351.90
Iteration:   2760, Loss function: 4.855, Average Loss: 5.519, avg. samples / sec: 351.45
Iteration:   2780, Loss function: 5.452, Average Loss: 5.516, avg. samples / sec: 351.57
Iteration:   2800, Loss function: 5.191, Average Loss: 5.512, avg. samples / sec: 351.23
Iteration:   2820, Loss function: 5.529, Average Loss: 5.508, avg. samples / sec: 351.90
Iteration:   2840, Loss function: 5.357, Average Loss: 5.504, avg. samples / sec: 351.61
Iteration:   2860, Loss function: 5.148, Average Loss: 5.499, avg. samples / sec: 351.77
Iteration:   2880, Loss function: 5.327, Average Loss: 5.495, avg. samples / sec: 351.76
Iteration:   2900, Loss function: 5.083, Average Loss: 5.489, avg. samples / sec: 351.50
Iteration:   2920, Loss function: 5.150, Average Loss: 5.483, avg. samples / sec: 351.49
Iteration:   2940, Loss function: 5.077, Average Loss: 5.479, avg. samples / sec: 351.53
Iteration:   2960, Loss function: 5.414, Average Loss: 5.475, avg. samples / sec: 351.84
Iteration:   2980, Loss function: 5.245, Average Loss: 5.471, avg. samples / sec: 351.17
Iteration:   3000, Loss function: 5.319, Average Loss: 5.467, avg. samples / sec: 351.53
Iteration:   3020, Loss function: 5.306, Average Loss: 5.460, avg. samples / sec: 351.53
Iteration:   3040, Loss function: 5.265, Average Loss: 5.456, avg. samples / sec: 351.19
Iteration:   3060, Loss function: 5.039, Average Loss: 5.450, avg. samples / sec: 351.33
Iteration:   3080, Loss function: 4.976, Average Loss: 5.445, avg. samples / sec: 351.17
:::MLLOG {"namespace": "", "time_ms": 1639759883601, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759883602, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.064, Average Loss: 5.440, avg. samples / sec: 351.36
Iteration:   3120, Loss function: 5.061, Average Loss: 5.434, avg. samples / sec: 351.44
Iteration:   3140, Loss function: 5.201, Average Loss: 5.430, avg. samples / sec: 351.59
Iteration:   3160, Loss function: 5.375, Average Loss: 5.425, avg. samples / sec: 351.15
Iteration:   3180, Loss function: 5.173, Average Loss: 5.421, avg. samples / sec: 351.19
Iteration:   3200, Loss function: 5.264, Average Loss: 5.416, avg. samples / sec: 351.41
Iteration:   3220, Loss function: 5.165, Average Loss: 5.410, avg. samples / sec: 351.53
Iteration:   3240, Loss function: 5.399, Average Loss: 5.406, avg. samples / sec: 350.63
Iteration:   3260, Loss function: 5.102, Average Loss: 5.400, avg. samples / sec: 350.79
Iteration:   3280, Loss function: 4.820, Average Loss: 5.394, avg. samples / sec: 352.05
Iteration:   3300, Loss function: 4.798, Average Loss: 5.389, avg. samples / sec: 351.83
Iteration:   3320, Loss function: 5.033, Average Loss: 5.385, avg. samples / sec: 352.56
Iteration:   3340, Loss function: 5.201, Average Loss: 5.380, avg. samples / sec: 351.88
Iteration:   3360, Loss function: 5.150, Average Loss: 5.373, avg. samples / sec: 351.96
Iteration:   3380, Loss function: 5.007, Average Loss: 5.367, avg. samples / sec: 352.25
Iteration:   3400, Loss function: 4.753, Average Loss: 5.362, avg. samples / sec: 352.91
Iteration:   3420, Loss function: 5.302, Average Loss: 5.357, avg. samples / sec: 352.83
Iteration:   3440, Loss function: 4.897, Average Loss: 5.352, avg. samples / sec: 352.59
Iteration:   3460, Loss function: 5.055, Average Loss: 5.347, avg. samples / sec: 352.66
Iteration:   3480, Loss function: 5.225, Average Loss: 5.342, avg. samples / sec: 352.47
Iteration:   3500, Loss function: 5.367, Average Loss: 5.339, avg. samples / sec: 352.49
Iteration:   3520, Loss function: 5.166, Average Loss: 5.335, avg. samples / sec: 352.49
Iteration:   3540, Loss function: 5.072, Average Loss: 5.331, avg. samples / sec: 352.59
Iteration:   3560, Loss function: 4.935, Average Loss: 5.327, avg. samples / sec: 351.73
Iteration:   3580, Loss function: 5.352, Average Loss: 5.323, avg. samples / sec: 351.79
Iteration:   3600, Loss function: 4.988, Average Loss: 5.316, avg. samples / sec: 352.31
Iteration:   3620, Loss function: 4.842, Average Loss: 5.311, avg. samples / sec: 352.25
Iteration:   3640, Loss function: 4.896, Average Loss: 5.306, avg. samples / sec: 352.34
Iteration:   3660, Loss function: 4.867, Average Loss: 5.301, avg. samples / sec: 352.25
Iteration:   3680, Loss function: 5.017, Average Loss: 5.294, avg. samples / sec: 352.25
Iteration:   3700, Loss function: 4.907, Average Loss: 5.288, avg. samples / sec: 352.24
Iteration:   3720, Loss function: 4.977, Average Loss: 5.282, avg. samples / sec: 352.60
Iteration:   3740, Loss function: 5.074, Average Loss: 5.277, avg. samples / sec: 352.32
Iteration:   3760, Loss function: 4.993, Average Loss: 5.272, avg. samples / sec: 351.76
Iteration:   3780, Loss function: 4.898, Average Loss: 5.267, avg. samples / sec: 352.26
Iteration:   3800, Loss function: 5.241, Average Loss: 5.264, avg. samples / sec: 352.30
Iteration:   3820, Loss function: 5.152, Average Loss: 5.259, avg. samples / sec: 352.23
Iteration:   3840, Loss function: 4.956, Average Loss: 5.254, avg. samples / sec: 352.54
Iteration:   3860, Loss function: 4.994, Average Loss: 5.250, avg. samples / sec: 352.67
Iteration:   3880, Loss function: 5.043, Average Loss: 5.244, avg. samples / sec: 353.08
Iteration:   3900, Loss function: 5.075, Average Loss: 5.239, avg. samples / sec: 353.55
Iteration:   3920, Loss function: 5.288, Average Loss: 5.235, avg. samples / sec: 352.68
Iteration:   3940, Loss function: 5.162, Average Loss: 5.230, avg. samples / sec: 352.56
Iteration:   3960, Loss function: 4.871, Average Loss: 5.226, avg. samples / sec: 353.06
Iteration:   3980, Loss function: 4.963, Average Loss: 5.220, avg. samples / sec: 352.62
Iteration:   4000, Loss function: 5.046, Average Loss: 5.216, avg. samples / sec: 352.27
Iteration:   4020, Loss function: 4.932, Average Loss: 5.210, avg. samples / sec: 352.03
Iteration:   4040, Loss function: 5.007, Average Loss: 5.207, avg. samples / sec: 351.85
Iteration:   4060, Loss function: 5.348, Average Loss: 5.203, avg. samples / sec: 353.51
Iteration:   4080, Loss function: 5.286, Average Loss: 5.199, avg. samples / sec: 353.34
Iteration:   4100, Loss function: 5.280, Average Loss: 5.195, avg. samples / sec: 353.01
:::MLLOG {"namespace": "", "time_ms": 1639760216622, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639760216622, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.087, Average Loss: 5.191, avg. samples / sec: 352.95
Iteration:   4140, Loss function: 4.974, Average Loss: 5.185, avg. samples / sec: 353.11
Iteration:   4160, Loss function: 5.106, Average Loss: 5.179, avg. samples / sec: 353.05
Iteration:   4180, Loss function: 4.791, Average Loss: 5.174, avg. samples / sec: 352.43
Iteration:   4200, Loss function: 4.664, Average Loss: 5.170, avg. samples / sec: 352.13
Iteration:   4220, Loss function: 4.902, Average Loss: 5.164, avg. samples / sec: 352.05
Iteration:   4240, Loss function: 5.000, Average Loss: 5.160, avg. samples / sec: 352.36
Iteration:   4260, Loss function: 5.086, Average Loss: 5.155, avg. samples / sec: 352.50
Iteration:   4280, Loss function: 5.085, Average Loss: 5.150, avg. samples / sec: 352.14
Iteration:   4300, Loss function: 4.777, Average Loss: 5.144, avg. samples / sec: 352.17
Iteration:   4320, Loss function: 4.754, Average Loss: 5.139, avg. samples / sec: 352.62
Iteration:   4340, Loss function: 4.959, Average Loss: 5.133, avg. samples / sec: 352.56
Iteration:   4360, Loss function: 4.991, Average Loss: 5.130, avg. samples / sec: 352.55
Iteration:   4380, Loss function: 4.902, Average Loss: 5.125, avg. samples / sec: 352.71
Iteration:   4400, Loss function: 4.965, Average Loss: 5.120, avg. samples / sec: 352.69
Iteration:   4420, Loss function: 4.933, Average Loss: 5.115, avg. samples / sec: 352.43
Iteration:   4440, Loss function: 4.917, Average Loss: 5.110, avg. samples / sec: 352.61
Iteration:   4460, Loss function: 5.245, Average Loss: 5.106, avg. samples / sec: 352.49
Iteration:   4480, Loss function: 5.059, Average Loss: 5.103, avg. samples / sec: 352.59
Iteration:   4500, Loss function: 4.843, Average Loss: 5.100, avg. samples / sec: 352.65
Iteration:   4520, Loss function: 4.822, Average Loss: 5.095, avg. samples / sec: 352.74
Iteration:   4540, Loss function: 5.081, Average Loss: 5.091, avg. samples / sec: 352.62
Iteration:   4560, Loss function: 4.707, Average Loss: 5.086, avg. samples / sec: 352.48
Iteration:   4580, Loss function: 4.825, Average Loss: 5.084, avg. samples / sec: 352.37
Iteration:   4600, Loss function: 4.816, Average Loss: 5.079, avg. samples / sec: 352.46
Iteration:   4620, Loss function: 4.749, Average Loss: 5.075, avg. samples / sec: 352.36
Iteration:   4640, Loss function: 4.570, Average Loss: 5.070, avg. samples / sec: 351.77
Iteration:   4660, Loss function: 4.758, Average Loss: 5.067, avg. samples / sec: 351.76
Iteration:   4680, Loss function: 5.294, Average Loss: 5.062, avg. samples / sec: 352.34
Iteration:   4700, Loss function: 4.768, Average Loss: 5.059, avg. samples / sec: 353.04
Iteration:   4720, Loss function: 4.660, Average Loss: 5.054, avg. samples / sec: 352.88
Iteration:   4740, Loss function: 4.698, Average Loss: 5.051, avg. samples / sec: 352.76
Iteration:   4760, Loss function: 4.572, Average Loss: 5.048, avg. samples / sec: 352.84
Iteration:   4780, Loss function: 5.165, Average Loss: 5.044, avg. samples / sec: 352.63
Iteration:   4800, Loss function: 4.914, Average Loss: 5.041, avg. samples / sec: 352.56
Iteration:   4820, Loss function: 4.780, Average Loss: 5.037, avg. samples / sec: 352.62
Iteration:   4840, Loss function: 5.107, Average Loss: 5.034, avg. samples / sec: 352.72
Iteration:   4860, Loss function: 4.785, Average Loss: 5.029, avg. samples / sec: 352.73
Iteration:   4880, Loss function: 5.162, Average Loss: 5.026, avg. samples / sec: 352.67
Iteration:   4900, Loss function: 4.570, Average Loss: 5.022, avg. samples / sec: 352.63
Iteration:   4920, Loss function: 4.769, Average Loss: 5.019, avg. samples / sec: 352.56
Iteration:   4940, Loss function: 4.742, Average Loss: 5.014, avg. samples / sec: 352.52
Iteration:   4960, Loss function: 4.711, Average Loss: 5.011, avg. samples / sec: 352.52
Iteration:   4980, Loss function: 4.524, Average Loss: 5.007, avg. samples / sec: 352.36
Iteration:   5000, Loss function: 4.771, Average Loss: 5.003, avg. samples / sec: 352.67
Iteration:   5020, Loss function: 5.073, Average Loss: 4.999, avg. samples / sec: 352.37
Iteration:   5040, Loss function: 4.736, Average Loss: 4.996, avg. samples / sec: 352.53
Iteration:   5060, Loss function: 4.738, Average Loss: 4.993, avg. samples / sec: 352.14
Iteration:   5080, Loss function: 4.548, Average Loss: 4.989, avg. samples / sec: 352.13
Iteration:   5100, Loss function: 5.131, Average Loss: 4.987, avg. samples / sec: 352.66
Iteration:   5120, Loss function: 4.543, Average Loss: 4.984, avg. samples / sec: 353.23
Iteration:   5140, Loss function: 4.928, Average Loss: 4.981, avg. samples / sec: 352.64
:::MLLOG {"namespace": "", "time_ms": 1639760549376, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 33.57 s
:::MLLOG {"namespace": "", "time_ms": 1639760582995, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639760583036, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760583036, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.25s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10422
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09435
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.18656
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13492
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.19739
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.20935
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.20935
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10422 AP goal: 0.10000
Iteration:   5160, Loss function: 5.041, Average Loss: 4.976, avg. samples / sec: 57.05
:::MLLOG {"namespace": "", "time_ms": 1639760588369, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588370, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10422430640037833, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588370, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639760588652, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639760589
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 05:03:09 PM'
START TIMING RUN WAS 2021-12-17 04:32:47 PM
ENDING TIMING RUN AT 2021-12-17 05:03:09 PM
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:47 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-17 05:03:09 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 2g.10gb     Device  0: (UUID: MIG-d90f70b8-86a0-5ece-acf1-c41cce6d4151)
+ result=1822
RESULT,SINGLE_STAGE_DETECTOR,,1822,nvidia,2021-12-17 04:32:47 PM
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1822,nvidia,2021-12-17 04:32:47 PM'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
