8<--8<--8<--8<--
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
8<--8<--8<--8<--
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-4c7db5d8-f005-5927-803e-9ee984a56e15
+ MIG_MODE=1
Found 1 MIG instances: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15'
+ [[ 1 == 0 ]]
+ [[ 1 != 1 ]]
++ date +%s
+ start=1639758770
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-17 04:32:50 PM'
STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'STARTING TIMING RUN AT 2021-12-17 04:32:50 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
+ set -x
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ [[ ssd == \m\a\s\k\r\c\n\n ]]
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()$/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ [[ ssd == \s\s\d ]]
+ echo 'Setting up the SSD benchmark...'
Setting up the SSD benchmark...
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ NUMEPOCHS=80
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
Running in FAST mode
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ [[ fast == \d\r\y ]]
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-17_17-30-42 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\1\7\_\1\7\-\3\0\-\4\2 ]]
+ set +x
Fri Dec 17 16:32:50 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-mlperf-mig-3g-20gb--1-klqk6 to the sync file ...
run-mlperf-mig-3g-20gb--1-klqk6 Found 6 Pods, waiting to have 8 ...
     1	run-mlperf-mig-2g-10gb--1-qgxdh
     2	run-mlperf-mig-2g-10gb--1-ggjwh
     3	run-mlperf-mig-3g-20gb--1-r7rqb
     4	run-mlperf-mig-2g-10gb--1-jgktz
     5	run-mlperf-mig-3g-20gb--1-c7j5c
     6	run-mlperf-mig-3g-20gb--1-klqk6
Fri Dec 17 16:32:55 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/benchmark_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777356, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777553, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1411738825, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1411738825
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639758779464, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779464, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779469, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758826103, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758826103, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639758827406, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758827407, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827660, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827661, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827662, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.419, Average Loss: 0.022, avg. samples / sec: 2.38
Iteration:     20, Loss function: 20.980, Average Loss: 0.452, avg. samples / sec: 518.53
Iteration:     40, Loss function: 20.636, Average Loss: 0.853, avg. samples / sec: 531.30
Iteration:     60, Loss function: 20.438, Average Loss: 1.242, avg. samples / sec: 533.44
Iteration:     80, Loss function: 19.909, Average Loss: 1.617, avg. samples / sec: 534.29
Iteration:    100, Loss function: 15.609, Average Loss: 1.944, avg. samples / sec: 460.73
Iteration:    120, Loss function: 10.907, Average Loss: 2.150, avg. samples / sec: 536.48
Iteration:    140, Loss function: 9.724, Average Loss: 2.307, avg. samples / sec: 537.05
Iteration:    160, Loss function: 9.290, Average Loss: 2.448, avg. samples / sec: 537.31
Iteration:    180, Loss function: 8.908, Average Loss: 2.577, avg. samples / sec: 538.53
Iteration:    200, Loss function: 8.687, Average Loss: 2.701, avg. samples / sec: 538.61
Iteration:    220, Loss function: 8.549, Average Loss: 2.820, avg. samples / sec: 537.52
Iteration:    240, Loss function: 8.669, Average Loss: 2.938, avg. samples / sec: 535.73
Iteration:    260, Loss function: 9.004, Average Loss: 3.053, avg. samples / sec: 536.61
Iteration:    280, Loss function: 8.736, Average Loss: 3.165, avg. samples / sec: 537.91
Iteration:    300, Loss function: 8.249, Average Loss: 3.270, avg. samples / sec: 537.98
Iteration:    320, Loss function: 8.289, Average Loss: 3.371, avg. samples / sec: 535.83
Iteration:    340, Loss function: 8.276, Average Loss: 3.468, avg. samples / sec: 537.34
Iteration:    360, Loss function: 7.961, Average Loss: 3.561, avg. samples / sec: 538.20
Iteration:    380, Loss function: 8.000, Average Loss: 3.652, avg. samples / sec: 536.97
Iteration:    400, Loss function: 7.937, Average Loss: 3.737, avg. samples / sec: 536.19
Iteration:    420, Loss function: 7.731, Average Loss: 3.818, avg. samples / sec: 538.22
Iteration:    440, Loss function: 7.915, Average Loss: 3.899, avg. samples / sec: 539.37
Iteration:    460, Loss function: 7.758, Average Loss: 3.975, avg. samples / sec: 539.00
Iteration:    480, Loss function: 7.448, Average Loss: 4.049, avg. samples / sec: 536.84
Iteration:    500, Loss function: 7.426, Average Loss: 4.119, avg. samples / sec: 538.73
Iteration:    520, Loss function: 7.488, Average Loss: 4.187, avg. samples / sec: 537.91
Iteration:    540, Loss function: 7.495, Average Loss: 4.251, avg. samples / sec: 536.56
Iteration:    560, Loss function: 7.183, Average Loss: 4.313, avg. samples / sec: 533.07
Iteration:    580, Loss function: 7.259, Average Loss: 4.375, avg. samples / sec: 540.15
Iteration:    600, Loss function: 7.065, Average Loss: 4.433, avg. samples / sec: 539.16
Iteration:    620, Loss function: 7.186, Average Loss: 4.490, avg. samples / sec: 540.53
Iteration:    640, Loss function: 7.137, Average Loss: 4.544, avg. samples / sec: 540.23
Iteration:    660, Loss function: 7.101, Average Loss: 4.596, avg. samples / sec: 540.31
Iteration:    680, Loss function: 7.061, Average Loss: 4.646, avg. samples / sec: 536.97
Iteration:    700, Loss function: 6.803, Average Loss: 4.694, avg. samples / sec: 540.32
Iteration:    720, Loss function: 6.798, Average Loss: 4.742, avg. samples / sec: 539.11
Iteration:    740, Loss function: 6.929, Average Loss: 4.787, avg. samples / sec: 540.04
Iteration:    760, Loss function: 7.097, Average Loss: 4.830, avg. samples / sec: 541.21
Iteration:    780, Loss function: 6.669, Average Loss: 4.872, avg. samples / sec: 539.23
Iteration:    800, Loss function: 6.917, Average Loss: 4.910, avg. samples / sec: 540.38
Iteration:    820, Loss function: 6.732, Average Loss: 4.948, avg. samples / sec: 539.02
Iteration:    840, Loss function: 6.738, Average Loss: 4.985, avg. samples / sec: 539.02
Iteration:    860, Loss function: 6.832, Average Loss: 5.019, avg. samples / sec: 541.08
Iteration:    880, Loss function: 6.681, Average Loss: 5.051, avg. samples / sec: 540.23
Iteration:    900, Loss function: 6.718, Average Loss: 5.081, avg. samples / sec: 539.88
Iteration:    920, Loss function: 6.554, Average Loss: 5.111, avg. samples / sec: 540.39
Iteration:    940, Loss function: 6.743, Average Loss: 5.141, avg. samples / sec: 540.41
Iteration:    960, Loss function: 6.335, Average Loss: 5.168, avg. samples / sec: 539.98
Iteration:    980, Loss function: 6.400, Average Loss: 5.195, avg. samples / sec: 541.65
Iteration:   1000, Loss function: 6.555, Average Loss: 5.222, avg. samples / sec: 539.34
Iteration:   1020, Loss function: 6.352, Average Loss: 5.246, avg. samples / sec: 541.31
:::MLLOG {"namespace": "", "time_ms": 1639759046332, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759046333, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.452, Average Loss: 5.269, avg. samples / sec: 539.53
Iteration:   1060, Loss function: 6.315, Average Loss: 5.291, avg. samples / sec: 537.70
Iteration:   1080, Loss function: 6.371, Average Loss: 5.313, avg. samples / sec: 541.33
Iteration:   1100, Loss function: 6.069, Average Loss: 5.331, avg. samples / sec: 539.15
Iteration:   1120, Loss function: 6.294, Average Loss: 5.351, avg. samples / sec: 537.65
Iteration:   1140, Loss function: 6.455, Average Loss: 5.370, avg. samples / sec: 538.47
Iteration:   1160, Loss function: 6.291, Average Loss: 5.388, avg. samples / sec: 538.15
Iteration:   1180, Loss function: 6.158, Average Loss: 5.404, avg. samples / sec: 539.49
Iteration:   1200, Loss function: 6.393, Average Loss: 5.420, avg. samples / sec: 539.71
Iteration:   1220, Loss function: 6.049, Average Loss: 5.435, avg. samples / sec: 539.49
Iteration:   1240, Loss function: 6.135, Average Loss: 5.448, avg. samples / sec: 539.37
Iteration:   1260, Loss function: 5.899, Average Loss: 5.460, avg. samples / sec: 539.40
Iteration:   1280, Loss function: 5.850, Average Loss: 5.472, avg. samples / sec: 541.71
Iteration:   1300, Loss function: 6.252, Average Loss: 5.485, avg. samples / sec: 539.12
Iteration:   1320, Loss function: 6.241, Average Loss: 5.496, avg. samples / sec: 538.53
Iteration:   1340, Loss function: 5.849, Average Loss: 5.506, avg. samples / sec: 538.56
Iteration:   1360, Loss function: 5.801, Average Loss: 5.516, avg. samples / sec: 539.69
Iteration:   1380, Loss function: 5.949, Average Loss: 5.525, avg. samples / sec: 537.53
Iteration:   1400, Loss function: 6.124, Average Loss: 5.534, avg. samples / sec: 540.60
Iteration:   1420, Loss function: 6.089, Average Loss: 5.542, avg. samples / sec: 541.02
Iteration:   1440, Loss function: 6.214, Average Loss: 5.550, avg. samples / sec: 540.71
Iteration:   1460, Loss function: 6.091, Average Loss: 5.559, avg. samples / sec: 538.10
Iteration:   1480, Loss function: 5.932, Average Loss: 5.568, avg. samples / sec: 539.14
Iteration:   1500, Loss function: 6.137, Average Loss: 5.576, avg. samples / sec: 540.94
Iteration:   1520, Loss function: 5.874, Average Loss: 5.581, avg. samples / sec: 538.51
Iteration:   1540, Loss function: 6.087, Average Loss: 5.586, avg. samples / sec: 536.70
Iteration:   1560, Loss function: 5.590, Average Loss: 5.591, avg. samples / sec: 540.87
Iteration:   1580, Loss function: 5.691, Average Loss: 5.597, avg. samples / sec: 538.36
Iteration:   1600, Loss function: 6.261, Average Loss: 5.602, avg. samples / sec: 539.90
Iteration:   1620, Loss function: 5.801, Average Loss: 5.607, avg. samples / sec: 538.14
Iteration:   1640, Loss function: 5.909, Average Loss: 5.610, avg. samples / sec: 540.55
Iteration:   1660, Loss function: 5.971, Average Loss: 5.615, avg. samples / sec: 538.83
Iteration:   1680, Loss function: 5.732, Average Loss: 5.619, avg. samples / sec: 540.30
Iteration:   1700, Loss function: 5.308, Average Loss: 5.622, avg. samples / sec: 542.44
Iteration:   1720, Loss function: 5.909, Average Loss: 5.624, avg. samples / sec: 540.32
Iteration:   1740, Loss function: 5.884, Average Loss: 5.627, avg. samples / sec: 539.95
Iteration:   1760, Loss function: 5.524, Average Loss: 5.629, avg. samples / sec: 536.99
Iteration:   1780, Loss function: 5.690, Average Loss: 5.630, avg. samples / sec: 539.73
Iteration:   1800, Loss function: 5.441, Average Loss: 5.632, avg. samples / sec: 539.34
Iteration:   1820, Loss function: 5.977, Average Loss: 5.634, avg. samples / sec: 540.02
Iteration:   1840, Loss function: 5.903, Average Loss: 5.635, avg. samples / sec: 539.78
Iteration:   1860, Loss function: 5.594, Average Loss: 5.635, avg. samples / sec: 540.97
Iteration:   1880, Loss function: 5.905, Average Loss: 5.637, avg. samples / sec: 540.65
Iteration:   1900, Loss function: 5.874, Average Loss: 5.638, avg. samples / sec: 538.96
Iteration:   1920, Loss function: 5.848, Average Loss: 5.637, avg. samples / sec: 541.74
Iteration:   1940, Loss function: 5.772, Average Loss: 5.637, avg. samples / sec: 540.54
Iteration:   1960, Loss function: 5.590, Average Loss: 5.636, avg. samples / sec: 542.17
Iteration:   1980, Loss function: 5.731, Average Loss: 5.636, avg. samples / sec: 536.99
Iteration:   2000, Loss function: 5.749, Average Loss: 5.635, avg. samples / sec: 539.28
Iteration:   2020, Loss function: 5.597, Average Loss: 5.634, avg. samples / sec: 539.83
Iteration:   2040, Loss function: 5.741, Average Loss: 5.633, avg. samples / sec: 537.99
:::MLLOG {"namespace": "", "time_ms": 1639759263783, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759263785, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.506, Average Loss: 5.632, avg. samples / sec: 539.10
Iteration:   2080, Loss function: 5.074, Average Loss: 5.629, avg. samples / sec: 539.35
Iteration:   2100, Loss function: 5.578, Average Loss: 5.628, avg. samples / sec: 538.27
Iteration:   2120, Loss function: 5.299, Average Loss: 5.624, avg. samples / sec: 539.42
Iteration:   2140, Loss function: 5.383, Average Loss: 5.621, avg. samples / sec: 540.66
Iteration:   2160, Loss function: 5.419, Average Loss: 5.618, avg. samples / sec: 538.78
Iteration:   2180, Loss function: 5.315, Average Loss: 5.615, avg. samples / sec: 540.67
Iteration:   2200, Loss function: 5.482, Average Loss: 5.612, avg. samples / sec: 538.99
Iteration:   2220, Loss function: 5.550, Average Loss: 5.609, avg. samples / sec: 538.92
Iteration:   2240, Loss function: 5.512, Average Loss: 5.606, avg. samples / sec: 537.68
Iteration:   2260, Loss function: 5.309, Average Loss: 5.602, avg. samples / sec: 539.21
Iteration:   2280, Loss function: 5.238, Average Loss: 5.599, avg. samples / sec: 540.88
Iteration:   2300, Loss function: 5.163, Average Loss: 5.597, avg. samples / sec: 539.37
Iteration:   2320, Loss function: 5.338, Average Loss: 5.594, avg. samples / sec: 541.13
Iteration:   2340, Loss function: 5.517, Average Loss: 5.591, avg. samples / sec: 538.82
Iteration:   2360, Loss function: 5.451, Average Loss: 5.588, avg. samples / sec: 540.62
Iteration:   2380, Loss function: 5.411, Average Loss: 5.584, avg. samples / sec: 538.82
Iteration:   2400, Loss function: 5.556, Average Loss: 5.580, avg. samples / sec: 539.41
Iteration:   2420, Loss function: 5.511, Average Loss: 5.576, avg. samples / sec: 541.23
Iteration:   2440, Loss function: 5.415, Average Loss: 5.573, avg. samples / sec: 540.03
Iteration:   2460, Loss function: 5.289, Average Loss: 5.569, avg. samples / sec: 540.85
Iteration:   2480, Loss function: 5.428, Average Loss: 5.565, avg. samples / sec: 536.76
Iteration:   2500, Loss function: 5.425, Average Loss: 5.561, avg. samples / sec: 540.02
Iteration:   2520, Loss function: 5.180, Average Loss: 5.556, avg. samples / sec: 538.20
Iteration:   2540, Loss function: 5.212, Average Loss: 5.552, avg. samples / sec: 536.33
Iteration:   2560, Loss function: 5.224, Average Loss: 5.548, avg. samples / sec: 539.01
Iteration:   2580, Loss function: 5.289, Average Loss: 5.545, avg. samples / sec: 536.28
Iteration:   2600, Loss function: 5.506, Average Loss: 5.542, avg. samples / sec: 540.59
Iteration:   2620, Loss function: 5.564, Average Loss: 5.538, avg. samples / sec: 540.60
Iteration:   2640, Loss function: 5.305, Average Loss: 5.536, avg. samples / sec: 538.96
Iteration:   2660, Loss function: 5.141, Average Loss: 5.533, avg. samples / sec: 538.54
Iteration:   2680, Loss function: 5.264, Average Loss: 5.530, avg. samples / sec: 539.27
Iteration:   2700, Loss function: 5.277, Average Loss: 5.525, avg. samples / sec: 540.06
Iteration:   2720, Loss function: 5.622, Average Loss: 5.521, avg. samples / sec: 539.61
Iteration:   2740, Loss function: 5.027, Average Loss: 5.518, avg. samples / sec: 537.93
Iteration:   2760, Loss function: 4.950, Average Loss: 5.512, avg. samples / sec: 538.88
Iteration:   2780, Loss function: 5.692, Average Loss: 5.510, avg. samples / sec: 539.30
Iteration:   2800, Loss function: 5.287, Average Loss: 5.506, avg. samples / sec: 540.56
Iteration:   2820, Loss function: 5.465, Average Loss: 5.502, avg. samples / sec: 538.81
Iteration:   2840, Loss function: 5.163, Average Loss: 5.497, avg. samples / sec: 538.50
Iteration:   2860, Loss function: 5.193, Average Loss: 5.492, avg. samples / sec: 538.51
Iteration:   2880, Loss function: 5.318, Average Loss: 5.488, avg. samples / sec: 537.44
Iteration:   2900, Loss function: 5.285, Average Loss: 5.484, avg. samples / sec: 539.98
Iteration:   2920, Loss function: 5.286, Average Loss: 5.479, avg. samples / sec: 540.97
Iteration:   2940, Loss function: 4.928, Average Loss: 5.475, avg. samples / sec: 541.19
Iteration:   2960, Loss function: 5.282, Average Loss: 5.470, avg. samples / sec: 541.44
Iteration:   2980, Loss function: 5.197, Average Loss: 5.466, avg. samples / sec: 540.39
Iteration:   3000, Loss function: 5.170, Average Loss: 5.460, avg. samples / sec: 540.80
Iteration:   3020, Loss function: 5.398, Average Loss: 5.454, avg. samples / sec: 537.64
Iteration:   3040, Loss function: 5.221, Average Loss: 5.449, avg. samples / sec: 535.61
Iteration:   3060, Loss function: 5.218, Average Loss: 5.443, avg. samples / sec: 537.28
Iteration:   3080, Loss function: 4.877, Average Loss: 5.438, avg. samples / sec: 538.66
:::MLLOG {"namespace": "", "time_ms": 1639759481121, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759481123, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.302, Average Loss: 5.433, avg. samples / sec: 540.09
Iteration:   3120, Loss function: 4.866, Average Loss: 5.427, avg. samples / sec: 540.75
Iteration:   3140, Loss function: 5.295, Average Loss: 5.422, avg. samples / sec: 538.86
Iteration:   3160, Loss function: 5.291, Average Loss: 5.416, avg. samples / sec: 539.43
Iteration:   3180, Loss function: 5.009, Average Loss: 5.411, avg. samples / sec: 539.59
Iteration:   3200, Loss function: 5.129, Average Loss: 5.406, avg. samples / sec: 540.74
Iteration:   3220, Loss function: 5.109, Average Loss: 5.400, avg. samples / sec: 540.90
Iteration:   3240, Loss function: 5.179, Average Loss: 5.396, avg. samples / sec: 539.45
Iteration:   3260, Loss function: 4.974, Average Loss: 5.391, avg. samples / sec: 540.49
Iteration:   3280, Loss function: 4.822, Average Loss: 5.384, avg. samples / sec: 540.39
Iteration:   3300, Loss function: 4.901, Average Loss: 5.379, avg. samples / sec: 542.48
Iteration:   3320, Loss function: 5.069, Average Loss: 5.374, avg. samples / sec: 540.88
Iteration:   3340, Loss function: 5.220, Average Loss: 5.371, avg. samples / sec: 540.31
Iteration:   3360, Loss function: 5.115, Average Loss: 5.364, avg. samples / sec: 539.26
Iteration:   3380, Loss function: 5.131, Average Loss: 5.356, avg. samples / sec: 538.97
Iteration:   3400, Loss function: 4.784, Average Loss: 5.351, avg. samples / sec: 538.45
Iteration:   3420, Loss function: 5.066, Average Loss: 5.345, avg. samples / sec: 539.48
Iteration:   3440, Loss function: 4.900, Average Loss: 5.341, avg. samples / sec: 538.16
Iteration:   3460, Loss function: 5.183, Average Loss: 5.336, avg. samples / sec: 539.47
Iteration:   3480, Loss function: 5.240, Average Loss: 5.330, avg. samples / sec: 540.54
Iteration:   3500, Loss function: 5.162, Average Loss: 5.326, avg. samples / sec: 540.22
Iteration:   3520, Loss function: 5.185, Average Loss: 5.324, avg. samples / sec: 539.17
Iteration:   3540, Loss function: 5.023, Average Loss: 5.318, avg. samples / sec: 536.86
Iteration:   3560, Loss function: 5.073, Average Loss: 5.314, avg. samples / sec: 537.81
Iteration:   3580, Loss function: 4.925, Average Loss: 5.310, avg. samples / sec: 536.81
Iteration:   3600, Loss function: 5.193, Average Loss: 5.305, avg. samples / sec: 538.93
Iteration:   3620, Loss function: 4.780, Average Loss: 5.299, avg. samples / sec: 539.52
Iteration:   3640, Loss function: 4.676, Average Loss: 5.294, avg. samples / sec: 538.00
Iteration:   3660, Loss function: 5.000, Average Loss: 5.289, avg. samples / sec: 538.68
Iteration:   3680, Loss function: 5.167, Average Loss: 5.283, avg. samples / sec: 538.30
Iteration:   3700, Loss function: 5.116, Average Loss: 5.279, avg. samples / sec: 541.59
Iteration:   3720, Loss function: 4.894, Average Loss: 5.273, avg. samples / sec: 538.59
Iteration:   3740, Loss function: 5.036, Average Loss: 5.269, avg. samples / sec: 541.48
Iteration:   3760, Loss function: 5.150, Average Loss: 5.265, avg. samples / sec: 540.29
Iteration:   3780, Loss function: 5.015, Average Loss: 5.260, avg. samples / sec: 539.57
Iteration:   3800, Loss function: 5.107, Average Loss: 5.257, avg. samples / sec: 541.30
Iteration:   3820, Loss function: 5.172, Average Loss: 5.253, avg. samples / sec: 540.32
Iteration:   3840, Loss function: 4.895, Average Loss: 5.248, avg. samples / sec: 538.95
Iteration:   3860, Loss function: 5.006, Average Loss: 5.242, avg. samples / sec: 534.84
Iteration:   3880, Loss function: 5.019, Average Loss: 5.236, avg. samples / sec: 537.98
Iteration:   3900, Loss function: 5.172, Average Loss: 5.232, avg. samples / sec: 535.74
Iteration:   3920, Loss function: 5.249, Average Loss: 5.226, avg. samples / sec: 540.00
Iteration:   3940, Loss function: 4.976, Average Loss: 5.221, avg. samples / sec: 541.67
Iteration:   3960, Loss function: 4.865, Average Loss: 5.217, avg. samples / sec: 538.24
Iteration:   3980, Loss function: 4.960, Average Loss: 5.211, avg. samples / sec: 540.53
Iteration:   4000, Loss function: 5.201, Average Loss: 5.206, avg. samples / sec: 538.92
Iteration:   4020, Loss function: 5.082, Average Loss: 5.202, avg. samples / sec: 539.57
Iteration:   4040, Loss function: 4.963, Average Loss: 5.199, avg. samples / sec: 539.59
Iteration:   4060, Loss function: 5.241, Average Loss: 5.195, avg. samples / sec: 538.20
Iteration:   4080, Loss function: 5.067, Average Loss: 5.190, avg. samples / sec: 537.62
Iteration:   4100, Loss function: 5.122, Average Loss: 5.186, avg. samples / sec: 534.93
:::MLLOG {"namespace": "", "time_ms": 1639759698659, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759698660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.982, Average Loss: 5.183, avg. samples / sec: 537.93
Iteration:   4140, Loss function: 4.781, Average Loss: 5.177, avg. samples / sec: 539.83
Iteration:   4160, Loss function: 4.925, Average Loss: 5.171, avg. samples / sec: 541.24
Iteration:   4180, Loss function: 4.833, Average Loss: 5.165, avg. samples / sec: 539.93
Iteration:   4200, Loss function: 4.674, Average Loss: 5.160, avg. samples / sec: 540.64
Iteration:   4220, Loss function: 4.911, Average Loss: 5.155, avg. samples / sec: 540.38
Iteration:   4240, Loss function: 4.906, Average Loss: 5.150, avg. samples / sec: 538.59
Iteration:   4260, Loss function: 4.988, Average Loss: 5.146, avg. samples / sec: 539.66
Iteration:   4280, Loss function: 4.905, Average Loss: 5.140, avg. samples / sec: 541.24
Iteration:   4300, Loss function: 4.823, Average Loss: 5.134, avg. samples / sec: 542.58
Iteration:   4320, Loss function: 4.854, Average Loss: 5.129, avg. samples / sec: 538.63
Iteration:   4340, Loss function: 5.074, Average Loss: 5.124, avg. samples / sec: 540.39
Iteration:   4360, Loss function: 4.941, Average Loss: 5.119, avg. samples / sec: 539.19
Iteration:   4380, Loss function: 4.900, Average Loss: 5.114, avg. samples / sec: 538.94
Iteration:   4400, Loss function: 4.953, Average Loss: 5.110, avg. samples / sec: 538.94
Iteration:   4420, Loss function: 4.942, Average Loss: 5.106, avg. samples / sec: 540.35
Iteration:   4440, Loss function: 4.960, Average Loss: 5.102, avg. samples / sec: 542.24
Iteration:   4460, Loss function: 4.964, Average Loss: 5.098, avg. samples / sec: 538.95
Iteration:   4480, Loss function: 4.910, Average Loss: 5.094, avg. samples / sec: 540.33
Iteration:   4500, Loss function: 4.950, Average Loss: 5.092, avg. samples / sec: 539.45
Iteration:   4520, Loss function: 4.733, Average Loss: 5.087, avg. samples / sec: 540.36
Iteration:   4540, Loss function: 5.045, Average Loss: 5.082, avg. samples / sec: 538.44
Iteration:   4560, Loss function: 4.762, Average Loss: 5.079, avg. samples / sec: 537.56
Iteration:   4580, Loss function: 4.784, Average Loss: 5.076, avg. samples / sec: 539.84
Iteration:   4600, Loss function: 4.850, Average Loss: 5.073, avg. samples / sec: 538.78
Iteration:   4620, Loss function: 4.728, Average Loss: 5.068, avg. samples / sec: 539.10
Iteration:   4640, Loss function: 4.728, Average Loss: 5.064, avg. samples / sec: 540.02
Iteration:   4660, Loss function: 4.907, Average Loss: 5.061, avg. samples / sec: 537.07
Iteration:   4680, Loss function: 5.221, Average Loss: 5.057, avg. samples / sec: 539.21
Iteration:   4700, Loss function: 4.853, Average Loss: 5.054, avg. samples / sec: 540.05
Iteration:   4720, Loss function: 4.768, Average Loss: 5.049, avg. samples / sec: 540.60
Iteration:   4740, Loss function: 4.764, Average Loss: 5.045, avg. samples / sec: 539.04
Iteration:   4760, Loss function: 4.699, Average Loss: 5.042, avg. samples / sec: 540.78
Iteration:   4780, Loss function: 5.051, Average Loss: 5.038, avg. samples / sec: 541.98
Iteration:   4800, Loss function: 5.084, Average Loss: 5.035, avg. samples / sec: 540.69
Iteration:   4820, Loss function: 4.665, Average Loss: 5.031, avg. samples / sec: 541.24
Iteration:   4840, Loss function: 5.170, Average Loss: 5.027, avg. samples / sec: 540.43
Iteration:   4860, Loss function: 4.537, Average Loss: 5.022, avg. samples / sec: 540.21
Iteration:   4880, Loss function: 5.241, Average Loss: 5.018, avg. samples / sec: 539.80
Iteration:   4900, Loss function: 4.587, Average Loss: 5.013, avg. samples / sec: 541.61
Iteration:   4920, Loss function: 4.667, Average Loss: 5.010, avg. samples / sec: 540.67
Iteration:   4940, Loss function: 4.707, Average Loss: 5.006, avg. samples / sec: 539.91
Iteration:   4960, Loss function: 4.661, Average Loss: 5.002, avg. samples / sec: 540.15
Iteration:   4980, Loss function: 4.593, Average Loss: 4.999, avg. samples / sec: 539.17
Iteration:   5000, Loss function: 5.115, Average Loss: 4.996, avg. samples / sec: 540.77
Iteration:   5020, Loss function: 5.140, Average Loss: 4.993, avg. samples / sec: 541.25
Iteration:   5040, Loss function: 4.797, Average Loss: 4.990, avg. samples / sec: 539.67
Iteration:   5060, Loss function: 4.895, Average Loss: 4.986, avg. samples / sec: 540.07
Iteration:   5080, Loss function: 4.554, Average Loss: 4.981, avg. samples / sec: 538.13
Iteration:   5100, Loss function: 4.739, Average Loss: 4.979, avg. samples / sec: 540.31
Iteration:   5120, Loss function: 4.748, Average Loss: 4.976, avg. samples / sec: 540.08
Iteration:   5140, Loss function: 4.848, Average Loss: 4.973, avg. samples / sec: 538.64
:::MLLOG {"namespace": "", "time_ms": 1639759915930, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.26 s
:::MLLOG {"namespace": "", "time_ms": 1639759947248, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759947303, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947305, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.72s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10668
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21841
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09452
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19054
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10668 AP goal: 0.10000
Iteration:   5160, Loss function: 4.932, Average Loss: 4.968, avg. samples / sec: 64.20
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10667658298150287, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759951015, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
Fri Dec 17 16:52:32 UTC 2021: done waiting for 1 executions
+ echo 'Fri Dec 17 16:52:32 UTC 2021: done waiting for 1 executions'
+ ls /tmp/benchmark_all.log
/tmp/benchmark_all.log
+ grep . /tmp/benchmark_all.log
:::MLLOG {"namespace": "", "time_ms": 1639758777356, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639758777553, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1411738825, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1411738825
:::MLLOG {"namespace": "", "time_ms": 1639758779464, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639758779464, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639758779468, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639758779469, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639758826103, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639758826103, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639758827406, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639758827407, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639758827660, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639758827661, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639758827662, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.419, Average Loss: 0.022, avg. samples / sec: 2.38
Iteration:     20, Loss function: 20.980, Average Loss: 0.452, avg. samples / sec: 518.53
Iteration:     40, Loss function: 20.636, Average Loss: 0.853, avg. samples / sec: 531.30
Iteration:     60, Loss function: 20.438, Average Loss: 1.242, avg. samples / sec: 533.44
Iteration:     80, Loss function: 19.909, Average Loss: 1.617, avg. samples / sec: 534.29
Iteration:    100, Loss function: 15.609, Average Loss: 1.944, avg. samples / sec: 460.73
Iteration:    120, Loss function: 10.907, Average Loss: 2.150, avg. samples / sec: 536.48
Iteration:    140, Loss function: 9.724, Average Loss: 2.307, avg. samples / sec: 537.05
Iteration:    160, Loss function: 9.290, Average Loss: 2.448, avg. samples / sec: 537.31
Iteration:    180, Loss function: 8.908, Average Loss: 2.577, avg. samples / sec: 538.53
Iteration:    200, Loss function: 8.687, Average Loss: 2.701, avg. samples / sec: 538.61
Iteration:    220, Loss function: 8.549, Average Loss: 2.820, avg. samples / sec: 537.52
Iteration:    240, Loss function: 8.669, Average Loss: 2.938, avg. samples / sec: 535.73
Iteration:    260, Loss function: 9.004, Average Loss: 3.053, avg. samples / sec: 536.61
Iteration:    280, Loss function: 8.736, Average Loss: 3.165, avg. samples / sec: 537.91
Iteration:    300, Loss function: 8.249, Average Loss: 3.270, avg. samples / sec: 537.98
Iteration:    320, Loss function: 8.289, Average Loss: 3.371, avg. samples / sec: 535.83
Iteration:    340, Loss function: 8.276, Average Loss: 3.468, avg. samples / sec: 537.34
Iteration:    360, Loss function: 7.961, Average Loss: 3.561, avg. samples / sec: 538.20
Iteration:    380, Loss function: 8.000, Average Loss: 3.652, avg. samples / sec: 536.97
Iteration:    400, Loss function: 7.937, Average Loss: 3.737, avg. samples / sec: 536.19
Iteration:    420, Loss function: 7.731, Average Loss: 3.818, avg. samples / sec: 538.22
Iteration:    440, Loss function: 7.915, Average Loss: 3.899, avg. samples / sec: 539.37
Iteration:    460, Loss function: 7.758, Average Loss: 3.975, avg. samples / sec: 539.00
Iteration:    480, Loss function: 7.448, Average Loss: 4.049, avg. samples / sec: 536.84
Iteration:    500, Loss function: 7.426, Average Loss: 4.119, avg. samples / sec: 538.73
Iteration:    520, Loss function: 7.488, Average Loss: 4.187, avg. samples / sec: 537.91
Iteration:    540, Loss function: 7.495, Average Loss: 4.251, avg. samples / sec: 536.56
Iteration:    560, Loss function: 7.183, Average Loss: 4.313, avg. samples / sec: 533.07
Iteration:    580, Loss function: 7.259, Average Loss: 4.375, avg. samples / sec: 540.15
Iteration:    600, Loss function: 7.065, Average Loss: 4.433, avg. samples / sec: 539.16
Iteration:    620, Loss function: 7.186, Average Loss: 4.490, avg. samples / sec: 540.53
Iteration:    640, Loss function: 7.137, Average Loss: 4.544, avg. samples / sec: 540.23
Iteration:    660, Loss function: 7.101, Average Loss: 4.596, avg. samples / sec: 540.31
Iteration:    680, Loss function: 7.061, Average Loss: 4.646, avg. samples / sec: 536.97
Iteration:    700, Loss function: 6.803, Average Loss: 4.694, avg. samples / sec: 540.32
Iteration:    720, Loss function: 6.798, Average Loss: 4.742, avg. samples / sec: 539.11
Iteration:    740, Loss function: 6.929, Average Loss: 4.787, avg. samples / sec: 540.04
Iteration:    760, Loss function: 7.097, Average Loss: 4.830, avg. samples / sec: 541.21
Iteration:    780, Loss function: 6.669, Average Loss: 4.872, avg. samples / sec: 539.23
Iteration:    800, Loss function: 6.917, Average Loss: 4.910, avg. samples / sec: 540.38
Iteration:    820, Loss function: 6.732, Average Loss: 4.948, avg. samples / sec: 539.02
Iteration:    840, Loss function: 6.738, Average Loss: 4.985, avg. samples / sec: 539.02
Iteration:    860, Loss function: 6.832, Average Loss: 5.019, avg. samples / sec: 541.08
Iteration:    880, Loss function: 6.681, Average Loss: 5.051, avg. samples / sec: 540.23
Iteration:    900, Loss function: 6.718, Average Loss: 5.081, avg. samples / sec: 539.88
Iteration:    920, Loss function: 6.554, Average Loss: 5.111, avg. samples / sec: 540.39
Iteration:    940, Loss function: 6.743, Average Loss: 5.141, avg. samples / sec: 540.41
Iteration:    960, Loss function: 6.335, Average Loss: 5.168, avg. samples / sec: 539.98
Iteration:    980, Loss function: 6.400, Average Loss: 5.195, avg. samples / sec: 541.65
Iteration:   1000, Loss function: 6.555, Average Loss: 5.222, avg. samples / sec: 539.34
Iteration:   1020, Loss function: 6.352, Average Loss: 5.246, avg. samples / sec: 541.31
:::MLLOG {"namespace": "", "time_ms": 1639759046332, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759046333, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.452, Average Loss: 5.269, avg. samples / sec: 539.53
Iteration:   1060, Loss function: 6.315, Average Loss: 5.291, avg. samples / sec: 537.70
Iteration:   1080, Loss function: 6.371, Average Loss: 5.313, avg. samples / sec: 541.33
Iteration:   1100, Loss function: 6.069, Average Loss: 5.331, avg. samples / sec: 539.15
Iteration:   1120, Loss function: 6.294, Average Loss: 5.351, avg. samples / sec: 537.65
Iteration:   1140, Loss function: 6.455, Average Loss: 5.370, avg. samples / sec: 538.47
Iteration:   1160, Loss function: 6.291, Average Loss: 5.388, avg. samples / sec: 538.15
Iteration:   1180, Loss function: 6.158, Average Loss: 5.404, avg. samples / sec: 539.49
Iteration:   1200, Loss function: 6.393, Average Loss: 5.420, avg. samples / sec: 539.71
Iteration:   1220, Loss function: 6.049, Average Loss: 5.435, avg. samples / sec: 539.49
Iteration:   1240, Loss function: 6.135, Average Loss: 5.448, avg. samples / sec: 539.37
Iteration:   1260, Loss function: 5.899, Average Loss: 5.460, avg. samples / sec: 539.40
Iteration:   1280, Loss function: 5.850, Average Loss: 5.472, avg. samples / sec: 541.71
Iteration:   1300, Loss function: 6.252, Average Loss: 5.485, avg. samples / sec: 539.12
Iteration:   1320, Loss function: 6.241, Average Loss: 5.496, avg. samples / sec: 538.53
Iteration:   1340, Loss function: 5.849, Average Loss: 5.506, avg. samples / sec: 538.56
Iteration:   1360, Loss function: 5.801, Average Loss: 5.516, avg. samples / sec: 539.69
Iteration:   1380, Loss function: 5.949, Average Loss: 5.525, avg. samples / sec: 537.53
Iteration:   1400, Loss function: 6.124, Average Loss: 5.534, avg. samples / sec: 540.60
Iteration:   1420, Loss function: 6.089, Average Loss: 5.542, avg. samples / sec: 541.02
Iteration:   1440, Loss function: 6.214, Average Loss: 5.550, avg. samples / sec: 540.71
Iteration:   1460, Loss function: 6.091, Average Loss: 5.559, avg. samples / sec: 538.10
Iteration:   1480, Loss function: 5.932, Average Loss: 5.568, avg. samples / sec: 539.14
Iteration:   1500, Loss function: 6.137, Average Loss: 5.576, avg. samples / sec: 540.94
Iteration:   1520, Loss function: 5.874, Average Loss: 5.581, avg. samples / sec: 538.51
Iteration:   1540, Loss function: 6.087, Average Loss: 5.586, avg. samples / sec: 536.70
Iteration:   1560, Loss function: 5.590, Average Loss: 5.591, avg. samples / sec: 540.87
Iteration:   1580, Loss function: 5.691, Average Loss: 5.597, avg. samples / sec: 538.36
Iteration:   1600, Loss function: 6.261, Average Loss: 5.602, avg. samples / sec: 539.90
Iteration:   1620, Loss function: 5.801, Average Loss: 5.607, avg. samples / sec: 538.14
Iteration:   1640, Loss function: 5.909, Average Loss: 5.610, avg. samples / sec: 540.55
Iteration:   1660, Loss function: 5.971, Average Loss: 5.615, avg. samples / sec: 538.83
Iteration:   1680, Loss function: 5.732, Average Loss: 5.619, avg. samples / sec: 540.30
Iteration:   1700, Loss function: 5.308, Average Loss: 5.622, avg. samples / sec: 542.44
Iteration:   1720, Loss function: 5.909, Average Loss: 5.624, avg. samples / sec: 540.32
Iteration:   1740, Loss function: 5.884, Average Loss: 5.627, avg. samples / sec: 539.95
Iteration:   1760, Loss function: 5.524, Average Loss: 5.629, avg. samples / sec: 536.99
Iteration:   1780, Loss function: 5.690, Average Loss: 5.630, avg. samples / sec: 539.73
Iteration:   1800, Loss function: 5.441, Average Loss: 5.632, avg. samples / sec: 539.34
Iteration:   1820, Loss function: 5.977, Average Loss: 5.634, avg. samples / sec: 540.02
Iteration:   1840, Loss function: 5.903, Average Loss: 5.635, avg. samples / sec: 539.78
Iteration:   1860, Loss function: 5.594, Average Loss: 5.635, avg. samples / sec: 540.97
Iteration:   1880, Loss function: 5.905, Average Loss: 5.637, avg. samples / sec: 540.65
Iteration:   1900, Loss function: 5.874, Average Loss: 5.638, avg. samples / sec: 538.96
Iteration:   1920, Loss function: 5.848, Average Loss: 5.637, avg. samples / sec: 541.74
Iteration:   1940, Loss function: 5.772, Average Loss: 5.637, avg. samples / sec: 540.54
Iteration:   1960, Loss function: 5.590, Average Loss: 5.636, avg. samples / sec: 542.17
Iteration:   1980, Loss function: 5.731, Average Loss: 5.636, avg. samples / sec: 536.99
Iteration:   2000, Loss function: 5.749, Average Loss: 5.635, avg. samples / sec: 539.28
Iteration:   2020, Loss function: 5.597, Average Loss: 5.634, avg. samples / sec: 539.83
Iteration:   2040, Loss function: 5.741, Average Loss: 5.633, avg. samples / sec: 537.99
:::MLLOG {"namespace": "", "time_ms": 1639759263783, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639759263785, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.506, Average Loss: 5.632, avg. samples / sec: 539.10
Iteration:   2080, Loss function: 5.074, Average Loss: 5.629, avg. samples / sec: 539.35
Iteration:   2100, Loss function: 5.578, Average Loss: 5.628, avg. samples / sec: 538.27
Iteration:   2120, Loss function: 5.299, Average Loss: 5.624, avg. samples / sec: 539.42
Iteration:   2140, Loss function: 5.383, Average Loss: 5.621, avg. samples / sec: 540.66
Iteration:   2160, Loss function: 5.419, Average Loss: 5.618, avg. samples / sec: 538.78
Iteration:   2180, Loss function: 5.315, Average Loss: 5.615, avg. samples / sec: 540.67
Iteration:   2200, Loss function: 5.482, Average Loss: 5.612, avg. samples / sec: 538.99
Iteration:   2220, Loss function: 5.550, Average Loss: 5.609, avg. samples / sec: 538.92
Iteration:   2240, Loss function: 5.512, Average Loss: 5.606, avg. samples / sec: 537.68
Iteration:   2260, Loss function: 5.309, Average Loss: 5.602, avg. samples / sec: 539.21
Iteration:   2280, Loss function: 5.238, Average Loss: 5.599, avg. samples / sec: 540.88
Iteration:   2300, Loss function: 5.163, Average Loss: 5.597, avg. samples / sec: 539.37
Iteration:   2320, Loss function: 5.338, Average Loss: 5.594, avg. samples / sec: 541.13
Iteration:   2340, Loss function: 5.517, Average Loss: 5.591, avg. samples / sec: 538.82
Iteration:   2360, Loss function: 5.451, Average Loss: 5.588, avg. samples / sec: 540.62
Iteration:   2380, Loss function: 5.411, Average Loss: 5.584, avg. samples / sec: 538.82
Iteration:   2400, Loss function: 5.556, Average Loss: 5.580, avg. samples / sec: 539.41
Iteration:   2420, Loss function: 5.511, Average Loss: 5.576, avg. samples / sec: 541.23
Iteration:   2440, Loss function: 5.415, Average Loss: 5.573, avg. samples / sec: 540.03
Iteration:   2460, Loss function: 5.289, Average Loss: 5.569, avg. samples / sec: 540.85
Iteration:   2480, Loss function: 5.428, Average Loss: 5.565, avg. samples / sec: 536.76
Iteration:   2500, Loss function: 5.425, Average Loss: 5.561, avg. samples / sec: 540.02
Iteration:   2520, Loss function: 5.180, Average Loss: 5.556, avg. samples / sec: 538.20
Iteration:   2540, Loss function: 5.212, Average Loss: 5.552, avg. samples / sec: 536.33
Iteration:   2560, Loss function: 5.224, Average Loss: 5.548, avg. samples / sec: 539.01
Iteration:   2580, Loss function: 5.289, Average Loss: 5.545, avg. samples / sec: 536.28
Iteration:   2600, Loss function: 5.506, Average Loss: 5.542, avg. samples / sec: 540.59
Iteration:   2620, Loss function: 5.564, Average Loss: 5.538, avg. samples / sec: 540.60
Iteration:   2640, Loss function: 5.305, Average Loss: 5.536, avg. samples / sec: 538.96
Iteration:   2660, Loss function: 5.141, Average Loss: 5.533, avg. samples / sec: 538.54
Iteration:   2680, Loss function: 5.264, Average Loss: 5.530, avg. samples / sec: 539.27
Iteration:   2700, Loss function: 5.277, Average Loss: 5.525, avg. samples / sec: 540.06
Iteration:   2720, Loss function: 5.622, Average Loss: 5.521, avg. samples / sec: 539.61
Iteration:   2740, Loss function: 5.027, Average Loss: 5.518, avg. samples / sec: 537.93
Iteration:   2760, Loss function: 4.950, Average Loss: 5.512, avg. samples / sec: 538.88
Iteration:   2780, Loss function: 5.692, Average Loss: 5.510, avg. samples / sec: 539.30
Iteration:   2800, Loss function: 5.287, Average Loss: 5.506, avg. samples / sec: 540.56
Iteration:   2820, Loss function: 5.465, Average Loss: 5.502, avg. samples / sec: 538.81
Iteration:   2840, Loss function: 5.163, Average Loss: 5.497, avg. samples / sec: 538.50
Iteration:   2860, Loss function: 5.193, Average Loss: 5.492, avg. samples / sec: 538.51
Iteration:   2880, Loss function: 5.318, Average Loss: 5.488, avg. samples / sec: 537.44
Iteration:   2900, Loss function: 5.285, Average Loss: 5.484, avg. samples / sec: 539.98
Iteration:   2920, Loss function: 5.286, Average Loss: 5.479, avg. samples / sec: 540.97
Iteration:   2940, Loss function: 4.928, Average Loss: 5.475, avg. samples / sec: 541.19
Iteration:   2960, Loss function: 5.282, Average Loss: 5.470, avg. samples / sec: 541.44
Iteration:   2980, Loss function: 5.197, Average Loss: 5.466, avg. samples / sec: 540.39
Iteration:   3000, Loss function: 5.170, Average Loss: 5.460, avg. samples / sec: 540.80
Iteration:   3020, Loss function: 5.398, Average Loss: 5.454, avg. samples / sec: 537.64
Iteration:   3040, Loss function: 5.221, Average Loss: 5.449, avg. samples / sec: 535.61
Iteration:   3060, Loss function: 5.218, Average Loss: 5.443, avg. samples / sec: 537.28
Iteration:   3080, Loss function: 4.877, Average Loss: 5.438, avg. samples / sec: 538.66
:::MLLOG {"namespace": "", "time_ms": 1639759481121, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639759481123, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.302, Average Loss: 5.433, avg. samples / sec: 540.09
Iteration:   3120, Loss function: 4.866, Average Loss: 5.427, avg. samples / sec: 540.75
Iteration:   3140, Loss function: 5.295, Average Loss: 5.422, avg. samples / sec: 538.86
Iteration:   3160, Loss function: 5.291, Average Loss: 5.416, avg. samples / sec: 539.43
Iteration:   3180, Loss function: 5.009, Average Loss: 5.411, avg. samples / sec: 539.59
Iteration:   3200, Loss function: 5.129, Average Loss: 5.406, avg. samples / sec: 540.74
Iteration:   3220, Loss function: 5.109, Average Loss: 5.400, avg. samples / sec: 540.90
Iteration:   3240, Loss function: 5.179, Average Loss: 5.396, avg. samples / sec: 539.45
Iteration:   3260, Loss function: 4.974, Average Loss: 5.391, avg. samples / sec: 540.49
Iteration:   3280, Loss function: 4.822, Average Loss: 5.384, avg. samples / sec: 540.39
Iteration:   3300, Loss function: 4.901, Average Loss: 5.379, avg. samples / sec: 542.48
Iteration:   3320, Loss function: 5.069, Average Loss: 5.374, avg. samples / sec: 540.88
Iteration:   3340, Loss function: 5.220, Average Loss: 5.371, avg. samples / sec: 540.31
Iteration:   3360, Loss function: 5.115, Average Loss: 5.364, avg. samples / sec: 539.26
Iteration:   3380, Loss function: 5.131, Average Loss: 5.356, avg. samples / sec: 538.97
Iteration:   3400, Loss function: 4.784, Average Loss: 5.351, avg. samples / sec: 538.45
Iteration:   3420, Loss function: 5.066, Average Loss: 5.345, avg. samples / sec: 539.48
Iteration:   3440, Loss function: 4.900, Average Loss: 5.341, avg. samples / sec: 538.16
Iteration:   3460, Loss function: 5.183, Average Loss: 5.336, avg. samples / sec: 539.47
Iteration:   3480, Loss function: 5.240, Average Loss: 5.330, avg. samples / sec: 540.54
Iteration:   3500, Loss function: 5.162, Average Loss: 5.326, avg. samples / sec: 540.22
Iteration:   3520, Loss function: 5.185, Average Loss: 5.324, avg. samples / sec: 539.17
Iteration:   3540, Loss function: 5.023, Average Loss: 5.318, avg. samples / sec: 536.86
Iteration:   3560, Loss function: 5.073, Average Loss: 5.314, avg. samples / sec: 537.81
Iteration:   3580, Loss function: 4.925, Average Loss: 5.310, avg. samples / sec: 536.81
Iteration:   3600, Loss function: 5.193, Average Loss: 5.305, avg. samples / sec: 538.93
Iteration:   3620, Loss function: 4.780, Average Loss: 5.299, avg. samples / sec: 539.52
Iteration:   3640, Loss function: 4.676, Average Loss: 5.294, avg. samples / sec: 538.00
Iteration:   3660, Loss function: 5.000, Average Loss: 5.289, avg. samples / sec: 538.68
Iteration:   3680, Loss function: 5.167, Average Loss: 5.283, avg. samples / sec: 538.30
Iteration:   3700, Loss function: 5.116, Average Loss: 5.279, avg. samples / sec: 541.59
Iteration:   3720, Loss function: 4.894, Average Loss: 5.273, avg. samples / sec: 538.59
Iteration:   3740, Loss function: 5.036, Average Loss: 5.269, avg. samples / sec: 541.48
Iteration:   3760, Loss function: 5.150, Average Loss: 5.265, avg. samples / sec: 540.29
Iteration:   3780, Loss function: 5.015, Average Loss: 5.260, avg. samples / sec: 539.57
Iteration:   3800, Loss function: 5.107, Average Loss: 5.257, avg. samples / sec: 541.30
Iteration:   3820, Loss function: 5.172, Average Loss: 5.253, avg. samples / sec: 540.32
Iteration:   3840, Loss function: 4.895, Average Loss: 5.248, avg. samples / sec: 538.95
Iteration:   3860, Loss function: 5.006, Average Loss: 5.242, avg. samples / sec: 534.84
Iteration:   3880, Loss function: 5.019, Average Loss: 5.236, avg. samples / sec: 537.98
Iteration:   3900, Loss function: 5.172, Average Loss: 5.232, avg. samples / sec: 535.74
Iteration:   3920, Loss function: 5.249, Average Loss: 5.226, avg. samples / sec: 540.00
Iteration:   3940, Loss function: 4.976, Average Loss: 5.221, avg. samples / sec: 541.67
Iteration:   3960, Loss function: 4.865, Average Loss: 5.217, avg. samples / sec: 538.24
Iteration:   3980, Loss function: 4.960, Average Loss: 5.211, avg. samples / sec: 540.53
Iteration:   4000, Loss function: 5.201, Average Loss: 5.206, avg. samples / sec: 538.92
Iteration:   4020, Loss function: 5.082, Average Loss: 5.202, avg. samples / sec: 539.57
Iteration:   4040, Loss function: 4.963, Average Loss: 5.199, avg. samples / sec: 539.59
Iteration:   4060, Loss function: 5.241, Average Loss: 5.195, avg. samples / sec: 538.20
Iteration:   4080, Loss function: 5.067, Average Loss: 5.190, avg. samples / sec: 537.62
Iteration:   4100, Loss function: 5.122, Average Loss: 5.186, avg. samples / sec: 534.93
:::MLLOG {"namespace": "", "time_ms": 1639759698659, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639759698660, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 4.982, Average Loss: 5.183, avg. samples / sec: 537.93
Iteration:   4140, Loss function: 4.781, Average Loss: 5.177, avg. samples / sec: 539.83
Iteration:   4160, Loss function: 4.925, Average Loss: 5.171, avg. samples / sec: 541.24
Iteration:   4180, Loss function: 4.833, Average Loss: 5.165, avg. samples / sec: 539.93
Iteration:   4200, Loss function: 4.674, Average Loss: 5.160, avg. samples / sec: 540.64
Iteration:   4220, Loss function: 4.911, Average Loss: 5.155, avg. samples / sec: 540.38
Iteration:   4240, Loss function: 4.906, Average Loss: 5.150, avg. samples / sec: 538.59
Iteration:   4260, Loss function: 4.988, Average Loss: 5.146, avg. samples / sec: 539.66
Iteration:   4280, Loss function: 4.905, Average Loss: 5.140, avg. samples / sec: 541.24
Iteration:   4300, Loss function: 4.823, Average Loss: 5.134, avg. samples / sec: 542.58
Iteration:   4320, Loss function: 4.854, Average Loss: 5.129, avg. samples / sec: 538.63
Iteration:   4340, Loss function: 5.074, Average Loss: 5.124, avg. samples / sec: 540.39
Iteration:   4360, Loss function: 4.941, Average Loss: 5.119, avg. samples / sec: 539.19
Iteration:   4380, Loss function: 4.900, Average Loss: 5.114, avg. samples / sec: 538.94
Iteration:   4400, Loss function: 4.953, Average Loss: 5.110, avg. samples / sec: 538.94
Iteration:   4420, Loss function: 4.942, Average Loss: 5.106, avg. samples / sec: 540.35
Iteration:   4440, Loss function: 4.960, Average Loss: 5.102, avg. samples / sec: 542.24
Iteration:   4460, Loss function: 4.964, Average Loss: 5.098, avg. samples / sec: 538.95
Iteration:   4480, Loss function: 4.910, Average Loss: 5.094, avg. samples / sec: 540.33
Iteration:   4500, Loss function: 4.950, Average Loss: 5.092, avg. samples / sec: 539.45
Iteration:   4520, Loss function: 4.733, Average Loss: 5.087, avg. samples / sec: 540.36
Iteration:   4540, Loss function: 5.045, Average Loss: 5.082, avg. samples / sec: 538.44
Iteration:   4560, Loss function: 4.762, Average Loss: 5.079, avg. samples / sec: 537.56
Iteration:   4580, Loss function: 4.784, Average Loss: 5.076, avg. samples / sec: 539.84
Iteration:   4600, Loss function: 4.850, Average Loss: 5.073, avg. samples / sec: 538.78
Iteration:   4620, Loss function: 4.728, Average Loss: 5.068, avg. samples / sec: 539.10
Iteration:   4640, Loss function: 4.728, Average Loss: 5.064, avg. samples / sec: 540.02
Iteration:   4660, Loss function: 4.907, Average Loss: 5.061, avg. samples / sec: 537.07
Iteration:   4680, Loss function: 5.221, Average Loss: 5.057, avg. samples / sec: 539.21
Iteration:   4700, Loss function: 4.853, Average Loss: 5.054, avg. samples / sec: 540.05
Iteration:   4720, Loss function: 4.768, Average Loss: 5.049, avg. samples / sec: 540.60
Iteration:   4740, Loss function: 4.764, Average Loss: 5.045, avg. samples / sec: 539.04
Iteration:   4760, Loss function: 4.699, Average Loss: 5.042, avg. samples / sec: 540.78
Iteration:   4780, Loss function: 5.051, Average Loss: 5.038, avg. samples / sec: 541.98
Iteration:   4800, Loss function: 5.084, Average Loss: 5.035, avg. samples / sec: 540.69
Iteration:   4820, Loss function: 4.665, Average Loss: 5.031, avg. samples / sec: 541.24
Iteration:   4840, Loss function: 5.170, Average Loss: 5.027, avg. samples / sec: 540.43
Iteration:   4860, Loss function: 4.537, Average Loss: 5.022, avg. samples / sec: 540.21
Iteration:   4880, Loss function: 5.241, Average Loss: 5.018, avg. samples / sec: 539.80
Iteration:   4900, Loss function: 4.587, Average Loss: 5.013, avg. samples / sec: 541.61
Iteration:   4920, Loss function: 4.667, Average Loss: 5.010, avg. samples / sec: 540.67
Iteration:   4940, Loss function: 4.707, Average Loss: 5.006, avg. samples / sec: 539.91
Iteration:   4960, Loss function: 4.661, Average Loss: 5.002, avg. samples / sec: 540.15
Iteration:   4980, Loss function: 4.593, Average Loss: 4.999, avg. samples / sec: 539.17
Iteration:   5000, Loss function: 5.115, Average Loss: 4.996, avg. samples / sec: 540.77
Iteration:   5020, Loss function: 5.140, Average Loss: 4.993, avg. samples / sec: 541.25
Iteration:   5040, Loss function: 4.797, Average Loss: 4.990, avg. samples / sec: 539.67
Iteration:   5060, Loss function: 4.895, Average Loss: 4.986, avg. samples / sec: 540.07
Iteration:   5080, Loss function: 4.554, Average Loss: 4.981, avg. samples / sec: 538.13
Iteration:   5100, Loss function: 4.739, Average Loss: 4.979, avg. samples / sec: 540.31
Iteration:   5120, Loss function: 4.748, Average Loss: 4.976, avg. samples / sec: 540.08
Iteration:   5140, Loss function: 4.848, Average Loss: 4.973, avg. samples / sec: 538.64
:::MLLOG {"namespace": "", "time_ms": 1639759915930, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 31.26 s
:::MLLOG {"namespace": "", "time_ms": 1639759947248, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639759947303, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759947305, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.72s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.46s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10668
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21841
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09452
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19054
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20176
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21442
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10668 AP goal: 0.10000
Iteration:   5160, Loss function: 4.932, Average Loss: 4.968, avg. samples / sec: 64.20
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10667658298150287, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759950811, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639759951015, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639759952
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-17 04:52:32 PM'
+ echo 'START TIMING RUN WAS 2021-12-17 04:32:50 PM'
START TIMING RUN WAS 2021-12-17 04:32:50 PM
ENDING TIMING RUN AT 2021-12-17 04:52:32 PM
+ echo 'ENDING TIMING RUN AT 2021-12-17 04:52:32 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
+ result=1182
+ [[ ssd == \s\s\d ]]
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,1182,nvidia,2021-12-17 04:32:50 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1182,nvidia,2021-12-17 04:32:50 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
