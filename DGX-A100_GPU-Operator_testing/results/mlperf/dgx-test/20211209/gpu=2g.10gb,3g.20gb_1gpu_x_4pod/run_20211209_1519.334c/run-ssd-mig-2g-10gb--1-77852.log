+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-77852.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-77852.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-77852.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a
+ MIG_MODE=1
Found 1 MIG instances: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639071109
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 05:31:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_12-30-31 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\2\-\3\0\-\3\1 ]]
+ set +x
Thu Dec  9 17:31:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd-mig-2g-10gb--1-77852 to the sync file ...
Thu Dec  9 17:31:49 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071111918, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071112016, "event_type": "POINT_IN_TIME", "key": "seed", "value": 681161604, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 681161604
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639071113528, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071113529, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071214706, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071214706, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639071216042, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071216043, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071216310, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071216310, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071216312, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.879, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.201, Average Loss: 0.456, avg. samples / sec: 339.87
Iteration:     40, Loss function: 20.800, Average Loss: 0.858, avg. samples / sec: 344.82
Iteration:     60, Loss function: 20.444, Average Loss: 1.248, avg. samples / sec: 307.94
Iteration:     80, Loss function: 20.152, Average Loss: 1.622, avg. samples / sec: 347.66
Iteration:    100, Loss function: 16.334, Average Loss: 1.958, avg. samples / sec: 348.17
Iteration:    120, Loss function: 11.677, Average Loss: 2.176, avg. samples / sec: 348.69
Iteration:    140, Loss function: 9.824, Average Loss: 2.336, avg. samples / sec: 346.01
Iteration:    160, Loss function: 9.241, Average Loss: 2.477, avg. samples / sec: 346.72
Iteration:    180, Loss function: 8.791, Average Loss: 2.607, avg. samples / sec: 349.09
Iteration:    200, Loss function: 8.593, Average Loss: 2.730, avg. samples / sec: 348.15
Iteration:    220, Loss function: 8.730, Average Loss: 2.849, avg. samples / sec: 348.67
Iteration:    240, Loss function: 8.669, Average Loss: 2.967, avg. samples / sec: 348.37
Iteration:    260, Loss function: 8.745, Average Loss: 3.079, avg. samples / sec: 336.84
Iteration:    280, Loss function: 8.567, Average Loss: 3.188, avg. samples / sec: 348.77
Iteration:    300, Loss function: 8.375, Average Loss: 3.292, avg. samples / sec: 348.67
Iteration:    320, Loss function: 8.417, Average Loss: 3.393, avg. samples / sec: 349.46
Iteration:    340, Loss function: 8.192, Average Loss: 3.489, avg. samples / sec: 350.08
Iteration:    360, Loss function: 7.943, Average Loss: 3.582, avg. samples / sec: 348.52
Iteration:    380, Loss function: 8.208, Average Loss: 3.675, avg. samples / sec: 349.74
Iteration:    400, Loss function: 7.903, Average Loss: 3.760, avg. samples / sec: 349.50
Iteration:    420, Loss function: 7.675, Average Loss: 3.842, avg. samples / sec: 350.23
Iteration:    440, Loss function: 7.788, Average Loss: 3.920, avg. samples / sec: 349.40
Iteration:    460, Loss function: 7.964, Average Loss: 3.996, avg. samples / sec: 350.37
Iteration:    480, Loss function: 7.436, Average Loss: 4.068, avg. samples / sec: 350.40
Iteration:    500, Loss function: 7.702, Average Loss: 4.139, avg. samples / sec: 350.31
Iteration:    520, Loss function: 7.479, Average Loss: 4.205, avg. samples / sec: 350.42
Iteration:    540, Loss function: 7.524, Average Loss: 4.269, avg. samples / sec: 350.24
Iteration:    560, Loss function: 7.108, Average Loss: 4.332, avg. samples / sec: 349.46
Iteration:    580, Loss function: 7.194, Average Loss: 4.392, avg. samples / sec: 349.67
Iteration:    600, Loss function: 7.249, Average Loss: 4.452, avg. samples / sec: 349.98
Iteration:    620, Loss function: 6.909, Average Loss: 4.506, avg. samples / sec: 349.84
Iteration:    640, Loss function: 6.880, Average Loss: 4.561, avg. samples / sec: 348.59
Iteration:    660, Loss function: 7.017, Average Loss: 4.613, avg. samples / sec: 348.05
Iteration:    680, Loss function: 6.960, Average Loss: 4.664, avg. samples / sec: 350.17
Iteration:    700, Loss function: 6.930, Average Loss: 4.711, avg. samples / sec: 350.31
Iteration:    720, Loss function: 6.905, Average Loss: 4.758, avg. samples / sec: 350.82
Iteration:    740, Loss function: 6.869, Average Loss: 4.803, avg. samples / sec: 350.26
Iteration:    760, Loss function: 7.180, Average Loss: 4.846, avg. samples / sec: 350.70
Iteration:    780, Loss function: 6.781, Average Loss: 4.888, avg. samples / sec: 350.40
Iteration:    800, Loss function: 7.199, Average Loss: 4.927, avg. samples / sec: 349.83
Iteration:    820, Loss function: 6.967, Average Loss: 4.963, avg. samples / sec: 350.22
Iteration:    840, Loss function: 6.695, Average Loss: 4.999, avg. samples / sec: 344.92
Iteration:    860, Loss function: 6.737, Average Loss: 5.032, avg. samples / sec: 350.56
Iteration:    880, Loss function: 6.760, Average Loss: 5.065, avg. samples / sec: 350.24
Iteration:    900, Loss function: 6.780, Average Loss: 5.095, avg. samples / sec: 350.65
Iteration:    920, Loss function: 6.614, Average Loss: 5.124, avg. samples / sec: 350.15
Iteration:    940, Loss function: 6.766, Average Loss: 5.154, avg. samples / sec: 350.27
Iteration:    960, Loss function: 6.509, Average Loss: 5.182, avg. samples / sec: 350.58
Iteration:    980, Loss function: 6.549, Average Loss: 5.209, avg. samples / sec: 350.24
Iteration:   1000, Loss function: 6.388, Average Loss: 5.235, avg. samples / sec: 350.18
Iteration:   1020, Loss function: 6.397, Average Loss: 5.259, avg. samples / sec: 350.18
:::MLLOG {"namespace": "", "time_ms": 1639071553211, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071553212, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.609, Average Loss: 5.282, avg. samples / sec: 349.72
Iteration:   1060, Loss function: 6.294, Average Loss: 5.305, avg. samples / sec: 350.31
Iteration:   1080, Loss function: 6.279, Average Loss: 5.325, avg. samples / sec: 350.64
Iteration:   1100, Loss function: 6.081, Average Loss: 5.345, avg. samples / sec: 350.23
Iteration:   1120, Loss function: 6.252, Average Loss: 5.363, avg. samples / sec: 350.51
Iteration:   1140, Loss function: 6.359, Average Loss: 5.382, avg. samples / sec: 350.20
Iteration:   1160, Loss function: 6.137, Average Loss: 5.399, avg. samples / sec: 350.54
Iteration:   1180, Loss function: 6.268, Average Loss: 5.415, avg. samples / sec: 350.45
Iteration:   1200, Loss function: 6.116, Average Loss: 5.430, avg. samples / sec: 350.17
Iteration:   1220, Loss function: 6.109, Average Loss: 5.444, avg. samples / sec: 350.54
Iteration:   1240, Loss function: 5.866, Average Loss: 5.456, avg. samples / sec: 350.14
Iteration:   1260, Loss function: 5.936, Average Loss: 5.468, avg. samples / sec: 349.98
Iteration:   1280, Loss function: 5.931, Average Loss: 5.480, avg. samples / sec: 350.54
Iteration:   1300, Loss function: 6.011, Average Loss: 5.493, avg. samples / sec: 350.24
Iteration:   1320, Loss function: 6.013, Average Loss: 5.505, avg. samples / sec: 350.47
Iteration:   1340, Loss function: 5.871, Average Loss: 5.515, avg. samples / sec: 350.29
Iteration:   1360, Loss function: 5.988, Average Loss: 5.526, avg. samples / sec: 350.17
Iteration:   1380, Loss function: 6.173, Average Loss: 5.535, avg. samples / sec: 350.31
Iteration:   1400, Loss function: 6.058, Average Loss: 5.544, avg. samples / sec: 350.20
Iteration:   1420, Loss function: 5.859, Average Loss: 5.552, avg. samples / sec: 350.51
Iteration:   1440, Loss function: 6.174, Average Loss: 5.560, avg. samples / sec: 350.13
Iteration:   1460, Loss function: 6.197, Average Loss: 5.568, avg. samples / sec: 350.42
Iteration:   1480, Loss function: 5.852, Average Loss: 5.576, avg. samples / sec: 350.22
Iteration:   1500, Loss function: 5.857, Average Loss: 5.584, avg. samples / sec: 350.56
Iteration:   1520, Loss function: 6.013, Average Loss: 5.589, avg. samples / sec: 350.32
Iteration:   1540, Loss function: 5.903, Average Loss: 5.594, avg. samples / sec: 349.61
Iteration:   1560, Loss function: 5.723, Average Loss: 5.597, avg. samples / sec: 350.41
Iteration:   1580, Loss function: 5.740, Average Loss: 5.602, avg. samples / sec: 350.42
Iteration:   1600, Loss function: 6.260, Average Loss: 5.607, avg. samples / sec: 350.29
Iteration:   1620, Loss function: 5.793, Average Loss: 5.612, avg. samples / sec: 350.60
Iteration:   1640, Loss function: 5.906, Average Loss: 5.616, avg. samples / sec: 350.67
Iteration:   1660, Loss function: 5.793, Average Loss: 5.620, avg. samples / sec: 350.63
Iteration:   1680, Loss function: 5.774, Average Loss: 5.623, avg. samples / sec: 350.74
Iteration:   1700, Loss function: 5.428, Average Loss: 5.626, avg. samples / sec: 350.13
Iteration:   1720, Loss function: 5.585, Average Loss: 5.628, avg. samples / sec: 350.43
Iteration:   1740, Loss function: 6.020, Average Loss: 5.630, avg. samples / sec: 350.25
Iteration:   1760, Loss function: 5.466, Average Loss: 5.632, avg. samples / sec: 350.07
Iteration:   1780, Loss function: 5.711, Average Loss: 5.633, avg. samples / sec: 350.42
Iteration:   1800, Loss function: 5.637, Average Loss: 5.636, avg. samples / sec: 350.43
Iteration:   1820, Loss function: 6.001, Average Loss: 5.638, avg. samples / sec: 350.18
Iteration:   1840, Loss function: 5.971, Average Loss: 5.639, avg. samples / sec: 350.66
Iteration:   1860, Loss function: 5.686, Average Loss: 5.638, avg. samples / sec: 350.44
Iteration:   1880, Loss function: 5.873, Average Loss: 5.640, avg. samples / sec: 350.59
Iteration:   1900, Loss function: 6.020, Average Loss: 5.641, avg. samples / sec: 350.31
Iteration:   1920, Loss function: 5.891, Average Loss: 5.641, avg. samples / sec: 350.33
Iteration:   1940, Loss function: 5.858, Average Loss: 5.641, avg. samples / sec: 350.18
Iteration:   1960, Loss function: 5.514, Average Loss: 5.640, avg. samples / sec: 350.49
Iteration:   1980, Loss function: 5.600, Average Loss: 5.638, avg. samples / sec: 349.93
Iteration:   2000, Loss function: 5.563, Average Loss: 5.638, avg. samples / sec: 349.53
Iteration:   2020, Loss function: 5.526, Average Loss: 5.636, avg. samples / sec: 349.88
Iteration:   2040, Loss function: 5.876, Average Loss: 5.636, avg. samples / sec: 350.18
:::MLLOG {"namespace": "", "time_ms": 1639071888088, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071888089, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.664, Average Loss: 5.634, avg. samples / sec: 349.91
Iteration:   2080, Loss function: 5.155, Average Loss: 5.632, avg. samples / sec: 349.94
Iteration:   2100, Loss function: 5.378, Average Loss: 5.629, avg. samples / sec: 350.24
Iteration:   2120, Loss function: 5.456, Average Loss: 5.626, avg. samples / sec: 350.55
Iteration:   2140, Loss function: 5.351, Average Loss: 5.623, avg. samples / sec: 349.91
Iteration:   2160, Loss function: 5.425, Average Loss: 5.621, avg. samples / sec: 350.10
Iteration:   2180, Loss function: 5.202, Average Loss: 5.618, avg. samples / sec: 350.20
Iteration:   2200, Loss function: 5.412, Average Loss: 5.614, avg. samples / sec: 350.39
Iteration:   2220, Loss function: 5.587, Average Loss: 5.612, avg. samples / sec: 350.35
Iteration:   2240, Loss function: 5.471, Average Loss: 5.608, avg. samples / sec: 350.05
Iteration:   2260, Loss function: 5.432, Average Loss: 5.605, avg. samples / sec: 350.40
Iteration:   2280, Loss function: 5.226, Average Loss: 5.603, avg. samples / sec: 350.60
Iteration:   2300, Loss function: 5.290, Average Loss: 5.599, avg. samples / sec: 350.15
Iteration:   2320, Loss function: 5.298, Average Loss: 5.597, avg. samples / sec: 350.25
Iteration:   2340, Loss function: 5.594, Average Loss: 5.593, avg. samples / sec: 350.51
Iteration:   2360, Loss function: 5.293, Average Loss: 5.589, avg. samples / sec: 350.31
Iteration:   2380, Loss function: 5.391, Average Loss: 5.586, avg. samples / sec: 350.03
Iteration:   2400, Loss function: 5.538, Average Loss: 5.581, avg. samples / sec: 350.20
Iteration:   2420, Loss function: 5.435, Average Loss: 5.577, avg. samples / sec: 349.28
Iteration:   2440, Loss function: 5.358, Average Loss: 5.574, avg. samples / sec: 350.47
Iteration:   2460, Loss function: 5.078, Average Loss: 5.570, avg. samples / sec: 350.50
Iteration:   2480, Loss function: 5.490, Average Loss: 5.567, avg. samples / sec: 350.51
Iteration:   2500, Loss function: 5.399, Average Loss: 5.563, avg. samples / sec: 350.74
Iteration:   2520, Loss function: 5.381, Average Loss: 5.558, avg. samples / sec: 350.25
Iteration:   2540, Loss function: 5.516, Average Loss: 5.555, avg. samples / sec: 350.03
Iteration:   2560, Loss function: 5.379, Average Loss: 5.552, avg. samples / sec: 350.64
Iteration:   2580, Loss function: 5.308, Average Loss: 5.549, avg. samples / sec: 350.89
Iteration:   2600, Loss function: 5.392, Average Loss: 5.545, avg. samples / sec: 350.03
Iteration:   2620, Loss function: 5.570, Average Loss: 5.541, avg. samples / sec: 350.82
Iteration:   2640, Loss function: 5.353, Average Loss: 5.538, avg. samples / sec: 350.51
Iteration:   2660, Loss function: 5.102, Average Loss: 5.534, avg. samples / sec: 350.06
Iteration:   2680, Loss function: 5.064, Average Loss: 5.530, avg. samples / sec: 349.57
Iteration:   2700, Loss function: 5.154, Average Loss: 5.525, avg. samples / sec: 350.15
Iteration:   2720, Loss function: 5.246, Average Loss: 5.521, avg. samples / sec: 350.52
Iteration:   2740, Loss function: 5.081, Average Loss: 5.516, avg. samples / sec: 350.10
Iteration:   2760, Loss function: 4.890, Average Loss: 5.510, avg. samples / sec: 350.11
Iteration:   2780, Loss function: 5.508, Average Loss: 5.507, avg. samples / sec: 350.21
Iteration:   2800, Loss function: 5.140, Average Loss: 5.502, avg. samples / sec: 350.28
Iteration:   2820, Loss function: 5.532, Average Loss: 5.498, avg. samples / sec: 350.09
Iteration:   2840, Loss function: 5.146, Average Loss: 5.493, avg. samples / sec: 350.45
Iteration:   2860, Loss function: 5.172, Average Loss: 5.489, avg. samples / sec: 350.36
Iteration:   2880, Loss function: 5.432, Average Loss: 5.485, avg. samples / sec: 350.04
Iteration:   2900, Loss function: 5.184, Average Loss: 5.482, avg. samples / sec: 350.21
Iteration:   2920, Loss function: 5.192, Average Loss: 5.476, avg. samples / sec: 350.37
Iteration:   2940, Loss function: 5.022, Average Loss: 5.472, avg. samples / sec: 350.24
Iteration:   2960, Loss function: 5.368, Average Loss: 5.467, avg. samples / sec: 350.30
Iteration:   2980, Loss function: 5.205, Average Loss: 5.463, avg. samples / sec: 349.91
Iteration:   3000, Loss function: 5.289, Average Loss: 5.458, avg. samples / sec: 350.14
Iteration:   3020, Loss function: 5.211, Average Loss: 5.451, avg. samples / sec: 350.18
Iteration:   3040, Loss function: 5.090, Average Loss: 5.447, avg. samples / sec: 350.03
Iteration:   3060, Loss function: 5.051, Average Loss: 5.440, avg. samples / sec: 350.56
Iteration:   3080, Loss function: 4.910, Average Loss: 5.434, avg. samples / sec: 350.24
:::MLLOG {"namespace": "", "time_ms": 1639072222684, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639072222685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.200, Average Loss: 5.429, avg. samples / sec: 350.11
Iteration:   3120, Loss function: 4.894, Average Loss: 5.423, avg. samples / sec: 349.78
Iteration:   3140, Loss function: 5.122, Average Loss: 5.418, avg. samples / sec: 350.48
Iteration:   3160, Loss function: 5.693, Average Loss: 5.414, avg. samples / sec: 350.32
Iteration:   3180, Loss function: 5.015, Average Loss: 5.408, avg. samples / sec: 350.62
Iteration:   3200, Loss function: 5.341, Average Loss: 5.403, avg. samples / sec: 350.12
Iteration:   3220, Loss function: 5.298, Average Loss: 5.398, avg. samples / sec: 350.47
Iteration:   3240, Loss function: 5.053, Average Loss: 5.392, avg. samples / sec: 350.59
Iteration:   3260, Loss function: 5.031, Average Loss: 5.386, avg. samples / sec: 350.09
Iteration:   3280, Loss function: 4.888, Average Loss: 5.380, avg. samples / sec: 350.52
Iteration:   3300, Loss function: 4.813, Average Loss: 5.375, avg. samples / sec: 350.43
Iteration:   3320, Loss function: 4.866, Average Loss: 5.369, avg. samples / sec: 350.53
Iteration:   3340, Loss function: 4.962, Average Loss: 5.365, avg. samples / sec: 350.56
Iteration:   3360, Loss function: 5.185, Average Loss: 5.359, avg. samples / sec: 350.84
Iteration:   3380, Loss function: 5.286, Average Loss: 5.352, avg. samples / sec: 351.06
Iteration:   3400, Loss function: 4.817, Average Loss: 5.346, avg. samples / sec: 351.09
Iteration:   3420, Loss function: 5.194, Average Loss: 5.340, avg. samples / sec: 351.01
Iteration:   3440, Loss function: 4.786, Average Loss: 5.335, avg. samples / sec: 351.27
Iteration:   3460, Loss function: 5.166, Average Loss: 5.330, avg. samples / sec: 350.98
Iteration:   3480, Loss function: 5.217, Average Loss: 5.324, avg. samples / sec: 351.07
Iteration:   3500, Loss function: 5.315, Average Loss: 5.320, avg. samples / sec: 350.73
Iteration:   3520, Loss function: 5.202, Average Loss: 5.317, avg. samples / sec: 350.65
Iteration:   3540, Loss function: 4.865, Average Loss: 5.312, avg. samples / sec: 350.80
Iteration:   3560, Loss function: 4.972, Average Loss: 5.308, avg. samples / sec: 351.17
Iteration:   3580, Loss function: 4.998, Average Loss: 5.303, avg. samples / sec: 350.90
Iteration:   3600, Loss function: 5.137, Average Loss: 5.298, avg. samples / sec: 350.74
Iteration:   3620, Loss function: 4.942, Average Loss: 5.293, avg. samples / sec: 351.15
Iteration:   3640, Loss function: 4.820, Average Loss: 5.288, avg. samples / sec: 351.26
Iteration:   3660, Loss function: 5.040, Average Loss: 5.283, avg. samples / sec: 351.26
Iteration:   3680, Loss function: 5.087, Average Loss: 5.278, avg. samples / sec: 351.37
Iteration:   3700, Loss function: 4.989, Average Loss: 5.273, avg. samples / sec: 351.11
Iteration:   3720, Loss function: 5.016, Average Loss: 5.267, avg. samples / sec: 350.71
Iteration:   3740, Loss function: 5.139, Average Loss: 5.263, avg. samples / sec: 351.07
Iteration:   3760, Loss function: 4.967, Average Loss: 5.260, avg. samples / sec: 351.14
Iteration:   3780, Loss function: 4.923, Average Loss: 5.255, avg. samples / sec: 351.19
Iteration:   3800, Loss function: 5.054, Average Loss: 5.251, avg. samples / sec: 351.38
Iteration:   3820, Loss function: 5.185, Average Loss: 5.246, avg. samples / sec: 351.30
Iteration:   3840, Loss function: 4.846, Average Loss: 5.242, avg. samples / sec: 351.32
Iteration:   3860, Loss function: 4.939, Average Loss: 5.237, avg. samples / sec: 351.28
Iteration:   3880, Loss function: 5.006, Average Loss: 5.231, avg. samples / sec: 351.22
Iteration:   3900, Loss function: 5.047, Average Loss: 5.226, avg. samples / sec: 350.86
Iteration:   3920, Loss function: 4.994, Average Loss: 5.222, avg. samples / sec: 350.71
Iteration:   3940, Loss function: 4.905, Average Loss: 5.217, avg. samples / sec: 351.26
Iteration:   3960, Loss function: 4.869, Average Loss: 5.212, avg. samples / sec: 351.22
Iteration:   3980, Loss function: 4.916, Average Loss: 5.207, avg. samples / sec: 351.26
Iteration:   4000, Loss function: 5.053, Average Loss: 5.203, avg. samples / sec: 351.12
Iteration:   4020, Loss function: 5.050, Average Loss: 5.198, avg. samples / sec: 351.12
Iteration:   4040, Loss function: 5.091, Average Loss: 5.196, avg. samples / sec: 351.10
Iteration:   4060, Loss function: 5.175, Average Loss: 5.192, avg. samples / sec: 350.96
Iteration:   4080, Loss function: 5.211, Average Loss: 5.187, avg. samples / sec: 351.12
Iteration:   4100, Loss function: 5.216, Average Loss: 5.185, avg. samples / sec: 351.12
:::MLLOG {"namespace": "", "time_ms": 1639072556990, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072556991, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.027, Average Loss: 5.180, avg. samples / sec: 350.86
Iteration:   4140, Loss function: 5.103, Average Loss: 5.175, avg. samples / sec: 350.91
Iteration:   4160, Loss function: 4.909, Average Loss: 5.170, avg. samples / sec: 351.22
Iteration:   4180, Loss function: 4.863, Average Loss: 5.164, avg. samples / sec: 351.03
Iteration:   4200, Loss function: 4.839, Average Loss: 5.160, avg. samples / sec: 351.21
Iteration:   4220, Loss function: 4.805, Average Loss: 5.155, avg. samples / sec: 351.08
Iteration:   4240, Loss function: 4.826, Average Loss: 5.150, avg. samples / sec: 351.17
Iteration:   4260, Loss function: 5.010, Average Loss: 5.145, avg. samples / sec: 351.17
Iteration:   4280, Loss function: 4.955, Average Loss: 5.139, avg. samples / sec: 351.33
Iteration:   4300, Loss function: 4.994, Average Loss: 5.133, avg. samples / sec: 351.29
Iteration:   4320, Loss function: 4.616, Average Loss: 5.128, avg. samples / sec: 351.19
Iteration:   4340, Loss function: 4.718, Average Loss: 5.124, avg. samples / sec: 351.21
Iteration:   4360, Loss function: 4.993, Average Loss: 5.120, avg. samples / sec: 351.28
Iteration:   4380, Loss function: 4.902, Average Loss: 5.115, avg. samples / sec: 351.10
Iteration:   4400, Loss function: 4.959, Average Loss: 5.111, avg. samples / sec: 351.01
Iteration:   4420, Loss function: 5.008, Average Loss: 5.106, avg. samples / sec: 350.65
Iteration:   4440, Loss function: 4.908, Average Loss: 5.101, avg. samples / sec: 350.44
Iteration:   4460, Loss function: 5.124, Average Loss: 5.097, avg. samples / sec: 350.60
Iteration:   4480, Loss function: 4.903, Average Loss: 5.094, avg. samples / sec: 350.52
Iteration:   4500, Loss function: 4.833, Average Loss: 5.090, avg. samples / sec: 350.59
Iteration:   4520, Loss function: 4.704, Average Loss: 5.086, avg. samples / sec: 351.16
Iteration:   4540, Loss function: 5.211, Average Loss: 5.082, avg. samples / sec: 351.26
Iteration:   4560, Loss function: 4.606, Average Loss: 5.078, avg. samples / sec: 351.11
Iteration:   4580, Loss function: 4.874, Average Loss: 5.075, avg. samples / sec: 351.04
Iteration:   4600, Loss function: 4.794, Average Loss: 5.071, avg. samples / sec: 351.11
Iteration:   4620, Loss function: 4.799, Average Loss: 5.067, avg. samples / sec: 351.08
Iteration:   4640, Loss function: 4.694, Average Loss: 5.061, avg. samples / sec: 351.04
Iteration:   4660, Loss function: 4.792, Average Loss: 5.057, avg. samples / sec: 351.27
Iteration:   4680, Loss function: 5.247, Average Loss: 5.053, avg. samples / sec: 350.99
Iteration:   4700, Loss function: 4.615, Average Loss: 5.050, avg. samples / sec: 351.10
Iteration:   4720, Loss function: 4.745, Average Loss: 5.045, avg. samples / sec: 350.95
Iteration:   4740, Loss function: 4.764, Average Loss: 5.041, avg. samples / sec: 350.54
Iteration:   4760, Loss function: 4.787, Average Loss: 5.038, avg. samples / sec: 350.60
Iteration:   4780, Loss function: 4.877, Average Loss: 5.034, avg. samples / sec: 350.64
Iteration:   4800, Loss function: 4.827, Average Loss: 5.031, avg. samples / sec: 350.62
Iteration:   4820, Loss function: 4.750, Average Loss: 5.029, avg. samples / sec: 350.46
Iteration:   4840, Loss function: 5.280, Average Loss: 5.026, avg. samples / sec: 350.21
Iteration:   4860, Loss function: 4.753, Average Loss: 5.021, avg. samples / sec: 351.28
Iteration:   4880, Loss function: 5.221, Average Loss: 5.018, avg. samples / sec: 351.39
Iteration:   4900, Loss function: 4.589, Average Loss: 5.013, avg. samples / sec: 351.46
Iteration:   4920, Loss function: 4.847, Average Loss: 5.010, avg. samples / sec: 351.24
Iteration:   4940, Loss function: 4.639, Average Loss: 5.006, avg. samples / sec: 351.00
Iteration:   4960, Loss function: 4.651, Average Loss: 5.003, avg. samples / sec: 351.13
Iteration:   4980, Loss function: 4.518, Average Loss: 4.999, avg. samples / sec: 350.66
Iteration:   5000, Loss function: 4.883, Average Loss: 4.995, avg. samples / sec: 350.57
Iteration:   5020, Loss function: 5.087, Average Loss: 4.992, avg. samples / sec: 350.44
Iteration:   5040, Loss function: 4.852, Average Loss: 4.990, avg. samples / sec: 350.40
Iteration:   5060, Loss function: 4.699, Average Loss: 4.987, avg. samples / sec: 350.53
Iteration:   5080, Loss function: 4.604, Average Loss: 4.982, avg. samples / sec: 350.76
Iteration:   5100, Loss function: 4.691, Average Loss: 4.980, avg. samples / sec: 351.06
Iteration:   5120, Loss function: 4.534, Average Loss: 4.977, avg. samples / sec: 350.92
Iteration:   5140, Loss function: 4.794, Average Loss: 4.973, avg. samples / sec: 350.92
:::MLLOG {"namespace": "", "time_ms": 1639072891258, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.95 s
:::MLLOG {"namespace": "", "time_ms": 1639072924251, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072924290, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072924290, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.00s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10765
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22115
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09662
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19053
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20091
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10765 AP goal: 0.10000
Iteration:   5160, Loss function: 4.835, Average Loss: 4.968, avg. samples / sec: 57.93
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10765276570611071, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929935, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:02:10 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:02:10 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071111918, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071112016, "event_type": "POINT_IN_TIME", "key": "seed", "value": 681161604, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 681161604
:::MLLOG {"namespace": "", "time_ms": 1639071113528, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071113529, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071113532, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071113533, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071214706, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071214706, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639071216042, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071216043, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071216310, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071216310, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071216312, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.879, Average Loss: 0.023, avg. samples / sec: 1.11
Iteration:     20, Loss function: 21.201, Average Loss: 0.456, avg. samples / sec: 339.87
Iteration:     40, Loss function: 20.800, Average Loss: 0.858, avg. samples / sec: 344.82
Iteration:     60, Loss function: 20.444, Average Loss: 1.248, avg. samples / sec: 307.94
Iteration:     80, Loss function: 20.152, Average Loss: 1.622, avg. samples / sec: 347.66
Iteration:    100, Loss function: 16.334, Average Loss: 1.958, avg. samples / sec: 348.17
Iteration:    120, Loss function: 11.677, Average Loss: 2.176, avg. samples / sec: 348.69
Iteration:    140, Loss function: 9.824, Average Loss: 2.336, avg. samples / sec: 346.01
Iteration:    160, Loss function: 9.241, Average Loss: 2.477, avg. samples / sec: 346.72
Iteration:    180, Loss function: 8.791, Average Loss: 2.607, avg. samples / sec: 349.09
Iteration:    200, Loss function: 8.593, Average Loss: 2.730, avg. samples / sec: 348.15
Iteration:    220, Loss function: 8.730, Average Loss: 2.849, avg. samples / sec: 348.67
Iteration:    240, Loss function: 8.669, Average Loss: 2.967, avg. samples / sec: 348.37
Iteration:    260, Loss function: 8.745, Average Loss: 3.079, avg. samples / sec: 336.84
Iteration:    280, Loss function: 8.567, Average Loss: 3.188, avg. samples / sec: 348.77
Iteration:    300, Loss function: 8.375, Average Loss: 3.292, avg. samples / sec: 348.67
Iteration:    320, Loss function: 8.417, Average Loss: 3.393, avg. samples / sec: 349.46
Iteration:    340, Loss function: 8.192, Average Loss: 3.489, avg. samples / sec: 350.08
Iteration:    360, Loss function: 7.943, Average Loss: 3.582, avg. samples / sec: 348.52
Iteration:    380, Loss function: 8.208, Average Loss: 3.675, avg. samples / sec: 349.74
Iteration:    400, Loss function: 7.903, Average Loss: 3.760, avg. samples / sec: 349.50
Iteration:    420, Loss function: 7.675, Average Loss: 3.842, avg. samples / sec: 350.23
Iteration:    440, Loss function: 7.788, Average Loss: 3.920, avg. samples / sec: 349.40
Iteration:    460, Loss function: 7.964, Average Loss: 3.996, avg. samples / sec: 350.37
Iteration:    480, Loss function: 7.436, Average Loss: 4.068, avg. samples / sec: 350.40
Iteration:    500, Loss function: 7.702, Average Loss: 4.139, avg. samples / sec: 350.31
Iteration:    520, Loss function: 7.479, Average Loss: 4.205, avg. samples / sec: 350.42
Iteration:    540, Loss function: 7.524, Average Loss: 4.269, avg. samples / sec: 350.24
Iteration:    560, Loss function: 7.108, Average Loss: 4.332, avg. samples / sec: 349.46
Iteration:    580, Loss function: 7.194, Average Loss: 4.392, avg. samples / sec: 349.67
Iteration:    600, Loss function: 7.249, Average Loss: 4.452, avg. samples / sec: 349.98
Iteration:    620, Loss function: 6.909, Average Loss: 4.506, avg. samples / sec: 349.84
Iteration:    640, Loss function: 6.880, Average Loss: 4.561, avg. samples / sec: 348.59
Iteration:    660, Loss function: 7.017, Average Loss: 4.613, avg. samples / sec: 348.05
Iteration:    680, Loss function: 6.960, Average Loss: 4.664, avg. samples / sec: 350.17
Iteration:    700, Loss function: 6.930, Average Loss: 4.711, avg. samples / sec: 350.31
Iteration:    720, Loss function: 6.905, Average Loss: 4.758, avg. samples / sec: 350.82
Iteration:    740, Loss function: 6.869, Average Loss: 4.803, avg. samples / sec: 350.26
Iteration:    760, Loss function: 7.180, Average Loss: 4.846, avg. samples / sec: 350.70
Iteration:    780, Loss function: 6.781, Average Loss: 4.888, avg. samples / sec: 350.40
Iteration:    800, Loss function: 7.199, Average Loss: 4.927, avg. samples / sec: 349.83
Iteration:    820, Loss function: 6.967, Average Loss: 4.963, avg. samples / sec: 350.22
Iteration:    840, Loss function: 6.695, Average Loss: 4.999, avg. samples / sec: 344.92
Iteration:    860, Loss function: 6.737, Average Loss: 5.032, avg. samples / sec: 350.56
Iteration:    880, Loss function: 6.760, Average Loss: 5.065, avg. samples / sec: 350.24
Iteration:    900, Loss function: 6.780, Average Loss: 5.095, avg. samples / sec: 350.65
Iteration:    920, Loss function: 6.614, Average Loss: 5.124, avg. samples / sec: 350.15
Iteration:    940, Loss function: 6.766, Average Loss: 5.154, avg. samples / sec: 350.27
Iteration:    960, Loss function: 6.509, Average Loss: 5.182, avg. samples / sec: 350.58
Iteration:    980, Loss function: 6.549, Average Loss: 5.209, avg. samples / sec: 350.24
Iteration:   1000, Loss function: 6.388, Average Loss: 5.235, avg. samples / sec: 350.18
Iteration:   1020, Loss function: 6.397, Average Loss: 5.259, avg. samples / sec: 350.18
:::MLLOG {"namespace": "", "time_ms": 1639071553211, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071553212, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.609, Average Loss: 5.282, avg. samples / sec: 349.72
Iteration:   1060, Loss function: 6.294, Average Loss: 5.305, avg. samples / sec: 350.31
Iteration:   1080, Loss function: 6.279, Average Loss: 5.325, avg. samples / sec: 350.64
Iteration:   1100, Loss function: 6.081, Average Loss: 5.345, avg. samples / sec: 350.23
Iteration:   1120, Loss function: 6.252, Average Loss: 5.363, avg. samples / sec: 350.51
Iteration:   1140, Loss function: 6.359, Average Loss: 5.382, avg. samples / sec: 350.20
Iteration:   1160, Loss function: 6.137, Average Loss: 5.399, avg. samples / sec: 350.54
Iteration:   1180, Loss function: 6.268, Average Loss: 5.415, avg. samples / sec: 350.45
Iteration:   1200, Loss function: 6.116, Average Loss: 5.430, avg. samples / sec: 350.17
Iteration:   1220, Loss function: 6.109, Average Loss: 5.444, avg. samples / sec: 350.54
Iteration:   1240, Loss function: 5.866, Average Loss: 5.456, avg. samples / sec: 350.14
Iteration:   1260, Loss function: 5.936, Average Loss: 5.468, avg. samples / sec: 349.98
Iteration:   1280, Loss function: 5.931, Average Loss: 5.480, avg. samples / sec: 350.54
Iteration:   1300, Loss function: 6.011, Average Loss: 5.493, avg. samples / sec: 350.24
Iteration:   1320, Loss function: 6.013, Average Loss: 5.505, avg. samples / sec: 350.47
Iteration:   1340, Loss function: 5.871, Average Loss: 5.515, avg. samples / sec: 350.29
Iteration:   1360, Loss function: 5.988, Average Loss: 5.526, avg. samples / sec: 350.17
Iteration:   1380, Loss function: 6.173, Average Loss: 5.535, avg. samples / sec: 350.31
Iteration:   1400, Loss function: 6.058, Average Loss: 5.544, avg. samples / sec: 350.20
Iteration:   1420, Loss function: 5.859, Average Loss: 5.552, avg. samples / sec: 350.51
Iteration:   1440, Loss function: 6.174, Average Loss: 5.560, avg. samples / sec: 350.13
Iteration:   1460, Loss function: 6.197, Average Loss: 5.568, avg. samples / sec: 350.42
Iteration:   1480, Loss function: 5.852, Average Loss: 5.576, avg. samples / sec: 350.22
Iteration:   1500, Loss function: 5.857, Average Loss: 5.584, avg. samples / sec: 350.56
Iteration:   1520, Loss function: 6.013, Average Loss: 5.589, avg. samples / sec: 350.32
Iteration:   1540, Loss function: 5.903, Average Loss: 5.594, avg. samples / sec: 349.61
Iteration:   1560, Loss function: 5.723, Average Loss: 5.597, avg. samples / sec: 350.41
Iteration:   1580, Loss function: 5.740, Average Loss: 5.602, avg. samples / sec: 350.42
Iteration:   1600, Loss function: 6.260, Average Loss: 5.607, avg. samples / sec: 350.29
Iteration:   1620, Loss function: 5.793, Average Loss: 5.612, avg. samples / sec: 350.60
Iteration:   1640, Loss function: 5.906, Average Loss: 5.616, avg. samples / sec: 350.67
Iteration:   1660, Loss function: 5.793, Average Loss: 5.620, avg. samples / sec: 350.63
Iteration:   1680, Loss function: 5.774, Average Loss: 5.623, avg. samples / sec: 350.74
Iteration:   1700, Loss function: 5.428, Average Loss: 5.626, avg. samples / sec: 350.13
Iteration:   1720, Loss function: 5.585, Average Loss: 5.628, avg. samples / sec: 350.43
Iteration:   1740, Loss function: 6.020, Average Loss: 5.630, avg. samples / sec: 350.25
Iteration:   1760, Loss function: 5.466, Average Loss: 5.632, avg. samples / sec: 350.07
Iteration:   1780, Loss function: 5.711, Average Loss: 5.633, avg. samples / sec: 350.42
Iteration:   1800, Loss function: 5.637, Average Loss: 5.636, avg. samples / sec: 350.43
Iteration:   1820, Loss function: 6.001, Average Loss: 5.638, avg. samples / sec: 350.18
Iteration:   1840, Loss function: 5.971, Average Loss: 5.639, avg. samples / sec: 350.66
Iteration:   1860, Loss function: 5.686, Average Loss: 5.638, avg. samples / sec: 350.44
Iteration:   1880, Loss function: 5.873, Average Loss: 5.640, avg. samples / sec: 350.59
Iteration:   1900, Loss function: 6.020, Average Loss: 5.641, avg. samples / sec: 350.31
Iteration:   1920, Loss function: 5.891, Average Loss: 5.641, avg. samples / sec: 350.33
Iteration:   1940, Loss function: 5.858, Average Loss: 5.641, avg. samples / sec: 350.18
Iteration:   1960, Loss function: 5.514, Average Loss: 5.640, avg. samples / sec: 350.49
Iteration:   1980, Loss function: 5.600, Average Loss: 5.638, avg. samples / sec: 349.93
Iteration:   2000, Loss function: 5.563, Average Loss: 5.638, avg. samples / sec: 349.53
Iteration:   2020, Loss function: 5.526, Average Loss: 5.636, avg. samples / sec: 349.88
Iteration:   2040, Loss function: 5.876, Average Loss: 5.636, avg. samples / sec: 350.18
:::MLLOG {"namespace": "", "time_ms": 1639071888088, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071888089, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.664, Average Loss: 5.634, avg. samples / sec: 349.91
Iteration:   2080, Loss function: 5.155, Average Loss: 5.632, avg. samples / sec: 349.94
Iteration:   2100, Loss function: 5.378, Average Loss: 5.629, avg. samples / sec: 350.24
Iteration:   2120, Loss function: 5.456, Average Loss: 5.626, avg. samples / sec: 350.55
Iteration:   2140, Loss function: 5.351, Average Loss: 5.623, avg. samples / sec: 349.91
Iteration:   2160, Loss function: 5.425, Average Loss: 5.621, avg. samples / sec: 350.10
Iteration:   2180, Loss function: 5.202, Average Loss: 5.618, avg. samples / sec: 350.20
Iteration:   2200, Loss function: 5.412, Average Loss: 5.614, avg. samples / sec: 350.39
Iteration:   2220, Loss function: 5.587, Average Loss: 5.612, avg. samples / sec: 350.35
Iteration:   2240, Loss function: 5.471, Average Loss: 5.608, avg. samples / sec: 350.05
Iteration:   2260, Loss function: 5.432, Average Loss: 5.605, avg. samples / sec: 350.40
Iteration:   2280, Loss function: 5.226, Average Loss: 5.603, avg. samples / sec: 350.60
Iteration:   2300, Loss function: 5.290, Average Loss: 5.599, avg. samples / sec: 350.15
Iteration:   2320, Loss function: 5.298, Average Loss: 5.597, avg. samples / sec: 350.25
Iteration:   2340, Loss function: 5.594, Average Loss: 5.593, avg. samples / sec: 350.51
Iteration:   2360, Loss function: 5.293, Average Loss: 5.589, avg. samples / sec: 350.31
Iteration:   2380, Loss function: 5.391, Average Loss: 5.586, avg. samples / sec: 350.03
Iteration:   2400, Loss function: 5.538, Average Loss: 5.581, avg. samples / sec: 350.20
Iteration:   2420, Loss function: 5.435, Average Loss: 5.577, avg. samples / sec: 349.28
Iteration:   2440, Loss function: 5.358, Average Loss: 5.574, avg. samples / sec: 350.47
Iteration:   2460, Loss function: 5.078, Average Loss: 5.570, avg. samples / sec: 350.50
Iteration:   2480, Loss function: 5.490, Average Loss: 5.567, avg. samples / sec: 350.51
Iteration:   2500, Loss function: 5.399, Average Loss: 5.563, avg. samples / sec: 350.74
Iteration:   2520, Loss function: 5.381, Average Loss: 5.558, avg. samples / sec: 350.25
Iteration:   2540, Loss function: 5.516, Average Loss: 5.555, avg. samples / sec: 350.03
Iteration:   2560, Loss function: 5.379, Average Loss: 5.552, avg. samples / sec: 350.64
Iteration:   2580, Loss function: 5.308, Average Loss: 5.549, avg. samples / sec: 350.89
Iteration:   2600, Loss function: 5.392, Average Loss: 5.545, avg. samples / sec: 350.03
Iteration:   2620, Loss function: 5.570, Average Loss: 5.541, avg. samples / sec: 350.82
Iteration:   2640, Loss function: 5.353, Average Loss: 5.538, avg. samples / sec: 350.51
Iteration:   2660, Loss function: 5.102, Average Loss: 5.534, avg. samples / sec: 350.06
Iteration:   2680, Loss function: 5.064, Average Loss: 5.530, avg. samples / sec: 349.57
Iteration:   2700, Loss function: 5.154, Average Loss: 5.525, avg. samples / sec: 350.15
Iteration:   2720, Loss function: 5.246, Average Loss: 5.521, avg. samples / sec: 350.52
Iteration:   2740, Loss function: 5.081, Average Loss: 5.516, avg. samples / sec: 350.10
Iteration:   2760, Loss function: 4.890, Average Loss: 5.510, avg. samples / sec: 350.11
Iteration:   2780, Loss function: 5.508, Average Loss: 5.507, avg. samples / sec: 350.21
Iteration:   2800, Loss function: 5.140, Average Loss: 5.502, avg. samples / sec: 350.28
Iteration:   2820, Loss function: 5.532, Average Loss: 5.498, avg. samples / sec: 350.09
Iteration:   2840, Loss function: 5.146, Average Loss: 5.493, avg. samples / sec: 350.45
Iteration:   2860, Loss function: 5.172, Average Loss: 5.489, avg. samples / sec: 350.36
Iteration:   2880, Loss function: 5.432, Average Loss: 5.485, avg. samples / sec: 350.04
Iteration:   2900, Loss function: 5.184, Average Loss: 5.482, avg. samples / sec: 350.21
Iteration:   2920, Loss function: 5.192, Average Loss: 5.476, avg. samples / sec: 350.37
Iteration:   2940, Loss function: 5.022, Average Loss: 5.472, avg. samples / sec: 350.24
Iteration:   2960, Loss function: 5.368, Average Loss: 5.467, avg. samples / sec: 350.30
Iteration:   2980, Loss function: 5.205, Average Loss: 5.463, avg. samples / sec: 349.91
Iteration:   3000, Loss function: 5.289, Average Loss: 5.458, avg. samples / sec: 350.14
Iteration:   3020, Loss function: 5.211, Average Loss: 5.451, avg. samples / sec: 350.18
Iteration:   3040, Loss function: 5.090, Average Loss: 5.447, avg. samples / sec: 350.03
Iteration:   3060, Loss function: 5.051, Average Loss: 5.440, avg. samples / sec: 350.56
Iteration:   3080, Loss function: 4.910, Average Loss: 5.434, avg. samples / sec: 350.24
:::MLLOG {"namespace": "", "time_ms": 1639072222684, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639072222685, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.200, Average Loss: 5.429, avg. samples / sec: 350.11
Iteration:   3120, Loss function: 4.894, Average Loss: 5.423, avg. samples / sec: 349.78
Iteration:   3140, Loss function: 5.122, Average Loss: 5.418, avg. samples / sec: 350.48
Iteration:   3160, Loss function: 5.693, Average Loss: 5.414, avg. samples / sec: 350.32
Iteration:   3180, Loss function: 5.015, Average Loss: 5.408, avg. samples / sec: 350.62
Iteration:   3200, Loss function: 5.341, Average Loss: 5.403, avg. samples / sec: 350.12
Iteration:   3220, Loss function: 5.298, Average Loss: 5.398, avg. samples / sec: 350.47
Iteration:   3240, Loss function: 5.053, Average Loss: 5.392, avg. samples / sec: 350.59
Iteration:   3260, Loss function: 5.031, Average Loss: 5.386, avg. samples / sec: 350.09
Iteration:   3280, Loss function: 4.888, Average Loss: 5.380, avg. samples / sec: 350.52
Iteration:   3300, Loss function: 4.813, Average Loss: 5.375, avg. samples / sec: 350.43
Iteration:   3320, Loss function: 4.866, Average Loss: 5.369, avg. samples / sec: 350.53
Iteration:   3340, Loss function: 4.962, Average Loss: 5.365, avg. samples / sec: 350.56
Iteration:   3360, Loss function: 5.185, Average Loss: 5.359, avg. samples / sec: 350.84
Iteration:   3380, Loss function: 5.286, Average Loss: 5.352, avg. samples / sec: 351.06
Iteration:   3400, Loss function: 4.817, Average Loss: 5.346, avg. samples / sec: 351.09
Iteration:   3420, Loss function: 5.194, Average Loss: 5.340, avg. samples / sec: 351.01
Iteration:   3440, Loss function: 4.786, Average Loss: 5.335, avg. samples / sec: 351.27
Iteration:   3460, Loss function: 5.166, Average Loss: 5.330, avg. samples / sec: 350.98
Iteration:   3480, Loss function: 5.217, Average Loss: 5.324, avg. samples / sec: 351.07
Iteration:   3500, Loss function: 5.315, Average Loss: 5.320, avg. samples / sec: 350.73
Iteration:   3520, Loss function: 5.202, Average Loss: 5.317, avg. samples / sec: 350.65
Iteration:   3540, Loss function: 4.865, Average Loss: 5.312, avg. samples / sec: 350.80
Iteration:   3560, Loss function: 4.972, Average Loss: 5.308, avg. samples / sec: 351.17
Iteration:   3580, Loss function: 4.998, Average Loss: 5.303, avg. samples / sec: 350.90
Iteration:   3600, Loss function: 5.137, Average Loss: 5.298, avg. samples / sec: 350.74
Iteration:   3620, Loss function: 4.942, Average Loss: 5.293, avg. samples / sec: 351.15
Iteration:   3640, Loss function: 4.820, Average Loss: 5.288, avg. samples / sec: 351.26
Iteration:   3660, Loss function: 5.040, Average Loss: 5.283, avg. samples / sec: 351.26
Iteration:   3680, Loss function: 5.087, Average Loss: 5.278, avg. samples / sec: 351.37
Iteration:   3700, Loss function: 4.989, Average Loss: 5.273, avg. samples / sec: 351.11
Iteration:   3720, Loss function: 5.016, Average Loss: 5.267, avg. samples / sec: 350.71
Iteration:   3740, Loss function: 5.139, Average Loss: 5.263, avg. samples / sec: 351.07
Iteration:   3760, Loss function: 4.967, Average Loss: 5.260, avg. samples / sec: 351.14
Iteration:   3780, Loss function: 4.923, Average Loss: 5.255, avg. samples / sec: 351.19
Iteration:   3800, Loss function: 5.054, Average Loss: 5.251, avg. samples / sec: 351.38
Iteration:   3820, Loss function: 5.185, Average Loss: 5.246, avg. samples / sec: 351.30
Iteration:   3840, Loss function: 4.846, Average Loss: 5.242, avg. samples / sec: 351.32
Iteration:   3860, Loss function: 4.939, Average Loss: 5.237, avg. samples / sec: 351.28
Iteration:   3880, Loss function: 5.006, Average Loss: 5.231, avg. samples / sec: 351.22
Iteration:   3900, Loss function: 5.047, Average Loss: 5.226, avg. samples / sec: 350.86
Iteration:   3920, Loss function: 4.994, Average Loss: 5.222, avg. samples / sec: 350.71
Iteration:   3940, Loss function: 4.905, Average Loss: 5.217, avg. samples / sec: 351.26
Iteration:   3960, Loss function: 4.869, Average Loss: 5.212, avg. samples / sec: 351.22
Iteration:   3980, Loss function: 4.916, Average Loss: 5.207, avg. samples / sec: 351.26
Iteration:   4000, Loss function: 5.053, Average Loss: 5.203, avg. samples / sec: 351.12
Iteration:   4020, Loss function: 5.050, Average Loss: 5.198, avg. samples / sec: 351.12
Iteration:   4040, Loss function: 5.091, Average Loss: 5.196, avg. samples / sec: 351.10
Iteration:   4060, Loss function: 5.175, Average Loss: 5.192, avg. samples / sec: 350.96
Iteration:   4080, Loss function: 5.211, Average Loss: 5.187, avg. samples / sec: 351.12
Iteration:   4100, Loss function: 5.216, Average Loss: 5.185, avg. samples / sec: 351.12
:::MLLOG {"namespace": "", "time_ms": 1639072556990, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072556991, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.027, Average Loss: 5.180, avg. samples / sec: 350.86
Iteration:   4140, Loss function: 5.103, Average Loss: 5.175, avg. samples / sec: 350.91
Iteration:   4160, Loss function: 4.909, Average Loss: 5.170, avg. samples / sec: 351.22
Iteration:   4180, Loss function: 4.863, Average Loss: 5.164, avg. samples / sec: 351.03
Iteration:   4200, Loss function: 4.839, Average Loss: 5.160, avg. samples / sec: 351.21
Iteration:   4220, Loss function: 4.805, Average Loss: 5.155, avg. samples / sec: 351.08
Iteration:   4240, Loss function: 4.826, Average Loss: 5.150, avg. samples / sec: 351.17
Iteration:   4260, Loss function: 5.010, Average Loss: 5.145, avg. samples / sec: 351.17
Iteration:   4280, Loss function: 4.955, Average Loss: 5.139, avg. samples / sec: 351.33
Iteration:   4300, Loss function: 4.994, Average Loss: 5.133, avg. samples / sec: 351.29
Iteration:   4320, Loss function: 4.616, Average Loss: 5.128, avg. samples / sec: 351.19
Iteration:   4340, Loss function: 4.718, Average Loss: 5.124, avg. samples / sec: 351.21
Iteration:   4360, Loss function: 4.993, Average Loss: 5.120, avg. samples / sec: 351.28
Iteration:   4380, Loss function: 4.902, Average Loss: 5.115, avg. samples / sec: 351.10
Iteration:   4400, Loss function: 4.959, Average Loss: 5.111, avg. samples / sec: 351.01
Iteration:   4420, Loss function: 5.008, Average Loss: 5.106, avg. samples / sec: 350.65
Iteration:   4440, Loss function: 4.908, Average Loss: 5.101, avg. samples / sec: 350.44
Iteration:   4460, Loss function: 5.124, Average Loss: 5.097, avg. samples / sec: 350.60
Iteration:   4480, Loss function: 4.903, Average Loss: 5.094, avg. samples / sec: 350.52
Iteration:   4500, Loss function: 4.833, Average Loss: 5.090, avg. samples / sec: 350.59
Iteration:   4520, Loss function: 4.704, Average Loss: 5.086, avg. samples / sec: 351.16
Iteration:   4540, Loss function: 5.211, Average Loss: 5.082, avg. samples / sec: 351.26
Iteration:   4560, Loss function: 4.606, Average Loss: 5.078, avg. samples / sec: 351.11
Iteration:   4580, Loss function: 4.874, Average Loss: 5.075, avg. samples / sec: 351.04
Iteration:   4600, Loss function: 4.794, Average Loss: 5.071, avg. samples / sec: 351.11
Iteration:   4620, Loss function: 4.799, Average Loss: 5.067, avg. samples / sec: 351.08
Iteration:   4640, Loss function: 4.694, Average Loss: 5.061, avg. samples / sec: 351.04
Iteration:   4660, Loss function: 4.792, Average Loss: 5.057, avg. samples / sec: 351.27
Iteration:   4680, Loss function: 5.247, Average Loss: 5.053, avg. samples / sec: 350.99
Iteration:   4700, Loss function: 4.615, Average Loss: 5.050, avg. samples / sec: 351.10
Iteration:   4720, Loss function: 4.745, Average Loss: 5.045, avg. samples / sec: 350.95
Iteration:   4740, Loss function: 4.764, Average Loss: 5.041, avg. samples / sec: 350.54
Iteration:   4760, Loss function: 4.787, Average Loss: 5.038, avg. samples / sec: 350.60
Iteration:   4780, Loss function: 4.877, Average Loss: 5.034, avg. samples / sec: 350.64
Iteration:   4800, Loss function: 4.827, Average Loss: 5.031, avg. samples / sec: 350.62
Iteration:   4820, Loss function: 4.750, Average Loss: 5.029, avg. samples / sec: 350.46
Iteration:   4840, Loss function: 5.280, Average Loss: 5.026, avg. samples / sec: 350.21
Iteration:   4860, Loss function: 4.753, Average Loss: 5.021, avg. samples / sec: 351.28
Iteration:   4880, Loss function: 5.221, Average Loss: 5.018, avg. samples / sec: 351.39
Iteration:   4900, Loss function: 4.589, Average Loss: 5.013, avg. samples / sec: 351.46
Iteration:   4920, Loss function: 4.847, Average Loss: 5.010, avg. samples / sec: 351.24
Iteration:   4940, Loss function: 4.639, Average Loss: 5.006, avg. samples / sec: 351.00
Iteration:   4960, Loss function: 4.651, Average Loss: 5.003, avg. samples / sec: 351.13
Iteration:   4980, Loss function: 4.518, Average Loss: 4.999, avg. samples / sec: 350.66
Iteration:   5000, Loss function: 4.883, Average Loss: 4.995, avg. samples / sec: 350.57
Iteration:   5020, Loss function: 5.087, Average Loss: 4.992, avg. samples / sec: 350.44
Iteration:   5040, Loss function: 4.852, Average Loss: 4.990, avg. samples / sec: 350.40
Iteration:   5060, Loss function: 4.699, Average Loss: 4.987, avg. samples / sec: 350.53
Iteration:   5080, Loss function: 4.604, Average Loss: 4.982, avg. samples / sec: 350.76
Iteration:   5100, Loss function: 4.691, Average Loss: 4.980, avg. samples / sec: 351.06
Iteration:   5120, Loss function: 4.534, Average Loss: 4.977, avg. samples / sec: 350.92
Iteration:   5140, Loss function: 4.794, Average Loss: 4.973, avg. samples / sec: 350.92
:::MLLOG {"namespace": "", "time_ms": 1639072891258, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.95 s
:::MLLOG {"namespace": "", "time_ms": 1639072924251, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072924290, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072924290, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.00s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10765
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22115
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09662
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19053
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13624
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20091
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21212
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10765 AP goal: 0.10000
Iteration:   5160, Loss function: 4.835, Average Loss: 4.968, avg. samples / sec: 57.93
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10765276570611071, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929644, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072929935, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639072930
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:02:10 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 05:31:49 PM'
START TIMING RUN WAS 2021-12-09 05:31:49 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:02:10 PM'
ENDING TIMING RUN AT 2021-12-09 06:02:10 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-fccb396c-ecba-9822-6217-a790cd2c9d3f)
  MIG 2g.10gb     Device  0: (UUID: MIG-1765bea3-82da-57d7-b4d7-21c06f58c24a)
+ result=1821
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1821,nvidia,2021-12-09 05:31:49 PM'
RESULT,SINGLE_STAGE_DETECTOR,,1821,nvidia,2021-12-09 05:31:49 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
