+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-5z86n.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-5z86n.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd-mig-2g-10gb--1-5z86n.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-80e9f71f-918d-56db-8088-733180854815)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-80e9f71f-918d-56db-8088-733180854815
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-80e9f71f-918d-56db-8088-733180854815
+ echo 'Found 1 MIG instances: MIG-80e9f71f-918d-56db-8088-733180854815'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639071109
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 05:31:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_12-30-31 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\2\-\3\0\-\3\1 ]]
+ set +x
Thu Dec  9 17:31:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd-mig-2g-10gb--1-5z86n to the sync file ...
run-ssd-mig-2g-10gb--1-5z86n Found 7 Pods, waiting to have 8 ...
     1	run-ssd-mig-2g-10gb--1-hds46
     2	run-ssd-mig-3g-20gb--1-pvzvf
     3	run-ssd-mig-3g-20gb--1-dqcx5
     4	run-ssd-mig-2g-10gb--1-6z6jg
     5	run-ssd-mig-3g-20gb--1-hvdn7
     6	run-ssd-mig-3g-20gb--1-sjj5v
     7	run-ssd-mig-2g-10gb--1-5z86n
Thu Dec  9 17:31:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-80e9f71f-918d-56db-8088-733180854815)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071117229, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071117337, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3905170041, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3905170041
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639071119238, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071119238, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071221019, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071221020, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639071222489, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071222489, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071222777, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071222778, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071222779, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.997, Average Loss: 0.023, avg. samples / sec: 1.10
Iteration:     20, Loss function: 21.130, Average Loss: 0.459, avg. samples / sec: 334.20
Iteration:     40, Loss function: 20.599, Average Loss: 0.861, avg. samples / sec: 309.92
Iteration:     60, Loss function: 20.464, Average Loss: 1.251, avg. samples / sec: 346.53
Iteration:     80, Loss function: 19.963, Average Loss: 1.624, avg. samples / sec: 345.06
Iteration:    100, Loss function: 15.234, Average Loss: 1.947, avg. samples / sec: 347.15
Iteration:    120, Loss function: 11.478, Average Loss: 2.151, avg. samples / sec: 347.92
Iteration:    140, Loss function: 9.590, Average Loss: 2.315, avg. samples / sec: 346.58
Iteration:    160, Loss function: 9.369, Average Loss: 2.457, avg. samples / sec: 347.56
Iteration:    180, Loss function: 9.112, Average Loss: 2.588, avg. samples / sec: 349.45
Iteration:    200, Loss function: 8.672, Average Loss: 2.714, avg. samples / sec: 348.00
Iteration:    220, Loss function: 8.669, Average Loss: 2.836, avg. samples / sec: 348.62
Iteration:    240, Loss function: 8.591, Average Loss: 2.953, avg. samples / sec: 336.49
Iteration:    260, Loss function: 8.814, Average Loss: 3.066, avg. samples / sec: 349.25
Iteration:    280, Loss function: 8.454, Average Loss: 3.175, avg. samples / sec: 348.90
Iteration:    300, Loss function: 8.464, Average Loss: 3.280, avg. samples / sec: 349.71
Iteration:    320, Loss function: 8.410, Average Loss: 3.383, avg. samples / sec: 349.08
Iteration:    340, Loss function: 8.201, Average Loss: 3.481, avg. samples / sec: 348.59
Iteration:    360, Loss function: 8.095, Average Loss: 3.573, avg. samples / sec: 350.14
Iteration:    380, Loss function: 7.860, Average Loss: 3.661, avg. samples / sec: 349.35
Iteration:    400, Loss function: 7.924, Average Loss: 3.745, avg. samples / sec: 350.46
Iteration:    420, Loss function: 7.697, Average Loss: 3.826, avg. samples / sec: 350.30
Iteration:    440, Loss function: 7.727, Average Loss: 3.903, avg. samples / sec: 349.58
Iteration:    460, Loss function: 7.778, Average Loss: 3.978, avg. samples / sec: 350.45
Iteration:    480, Loss function: 7.492, Average Loss: 4.050, avg. samples / sec: 349.96
Iteration:    500, Loss function: 7.339, Average Loss: 4.119, avg. samples / sec: 349.33
Iteration:    520, Loss function: 7.606, Average Loss: 4.186, avg. samples / sec: 349.91
Iteration:    540, Loss function: 7.495, Average Loss: 4.253, avg. samples / sec: 350.46
Iteration:    560, Loss function: 7.198, Average Loss: 4.316, avg. samples / sec: 350.07
Iteration:    580, Loss function: 7.095, Average Loss: 4.376, avg. samples / sec: 350.28
Iteration:    600, Loss function: 7.286, Average Loss: 4.434, avg. samples / sec: 349.77
Iteration:    620, Loss function: 7.015, Average Loss: 4.490, avg. samples / sec: 332.75
Iteration:    640, Loss function: 7.042, Average Loss: 4.545, avg. samples / sec: 350.71
Iteration:    660, Loss function: 7.250, Average Loss: 4.598, avg. samples / sec: 349.91
Iteration:    680, Loss function: 7.288, Average Loss: 4.648, avg. samples / sec: 350.28
Iteration:    700, Loss function: 6.748, Average Loss: 4.697, avg. samples / sec: 350.00
Iteration:    720, Loss function: 6.898, Average Loss: 4.744, avg. samples / sec: 350.22
Iteration:    740, Loss function: 6.953, Average Loss: 4.790, avg. samples / sec: 350.62
Iteration:    760, Loss function: 6.950, Average Loss: 4.834, avg. samples / sec: 349.23
Iteration:    780, Loss function: 6.744, Average Loss: 4.875, avg. samples / sec: 350.14
Iteration:    800, Loss function: 7.047, Average Loss: 4.915, avg. samples / sec: 349.53
Iteration:    820, Loss function: 6.884, Average Loss: 4.952, avg. samples / sec: 349.72
Iteration:    840, Loss function: 6.792, Average Loss: 4.988, avg. samples / sec: 349.69
Iteration:    860, Loss function: 6.700, Average Loss: 5.022, avg. samples / sec: 350.47
Iteration:    880, Loss function: 6.765, Average Loss: 5.055, avg. samples / sec: 350.20
Iteration:    900, Loss function: 6.771, Average Loss: 5.085, avg. samples / sec: 350.66
Iteration:    920, Loss function: 6.652, Average Loss: 5.114, avg. samples / sec: 350.98
Iteration:    940, Loss function: 6.634, Average Loss: 5.143, avg. samples / sec: 350.25
Iteration:    960, Loss function: 6.513, Average Loss: 5.172, avg. samples / sec: 350.67
Iteration:    980, Loss function: 6.583, Average Loss: 5.199, avg. samples / sec: 350.24
Iteration:   1000, Loss function: 6.511, Average Loss: 5.224, avg. samples / sec: 350.34
Iteration:   1020, Loss function: 6.310, Average Loss: 5.248, avg. samples / sec: 350.36
:::MLLOG {"namespace": "", "time_ms": 1639071559938, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071559939, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.391, Average Loss: 5.271, avg. samples / sec: 350.14
Iteration:   1060, Loss function: 6.359, Average Loss: 5.293, avg. samples / sec: 350.27
Iteration:   1080, Loss function: 6.369, Average Loss: 5.314, avg. samples / sec: 350.38
Iteration:   1100, Loss function: 6.011, Average Loss: 5.334, avg. samples / sec: 350.53
Iteration:   1120, Loss function: 6.358, Average Loss: 5.354, avg. samples / sec: 350.40
Iteration:   1140, Loss function: 6.414, Average Loss: 5.373, avg. samples / sec: 350.30
Iteration:   1160, Loss function: 6.392, Average Loss: 5.390, avg. samples / sec: 350.31
Iteration:   1180, Loss function: 6.273, Average Loss: 5.407, avg. samples / sec: 349.85
Iteration:   1200, Loss function: 6.357, Average Loss: 5.422, avg. samples / sec: 349.69
Iteration:   1220, Loss function: 6.302, Average Loss: 5.438, avg. samples / sec: 333.79
Iteration:   1240, Loss function: 6.043, Average Loss: 5.452, avg. samples / sec: 350.35
Iteration:   1260, Loss function: 5.994, Average Loss: 5.464, avg. samples / sec: 349.98
Iteration:   1280, Loss function: 5.943, Average Loss: 5.476, avg. samples / sec: 350.37
Iteration:   1300, Loss function: 6.130, Average Loss: 5.490, avg. samples / sec: 350.30
Iteration:   1320, Loss function: 6.299, Average Loss: 5.502, avg. samples / sec: 350.78
Iteration:   1340, Loss function: 5.692, Average Loss: 5.512, avg. samples / sec: 349.77
Iteration:   1360, Loss function: 6.146, Average Loss: 5.523, avg. samples / sec: 350.17
Iteration:   1380, Loss function: 5.915, Average Loss: 5.533, avg. samples / sec: 350.39
Iteration:   1400, Loss function: 6.173, Average Loss: 5.543, avg. samples / sec: 350.74
Iteration:   1420, Loss function: 5.853, Average Loss: 5.551, avg. samples / sec: 351.36
Iteration:   1440, Loss function: 6.293, Average Loss: 5.560, avg. samples / sec: 350.52
Iteration:   1460, Loss function: 6.138, Average Loss: 5.568, avg. samples / sec: 350.33
Iteration:   1480, Loss function: 5.858, Average Loss: 5.576, avg. samples / sec: 350.48
Iteration:   1500, Loss function: 6.029, Average Loss: 5.584, avg. samples / sec: 350.25
Iteration:   1520, Loss function: 5.988, Average Loss: 5.590, avg. samples / sec: 350.71
Iteration:   1540, Loss function: 5.968, Average Loss: 5.595, avg. samples / sec: 350.48
Iteration:   1560, Loss function: 5.632, Average Loss: 5.599, avg. samples / sec: 350.81
Iteration:   1580, Loss function: 5.603, Average Loss: 5.604, avg. samples / sec: 350.58
Iteration:   1600, Loss function: 5.975, Average Loss: 5.609, avg. samples / sec: 350.67
Iteration:   1620, Loss function: 5.706, Average Loss: 5.614, avg. samples / sec: 350.54
Iteration:   1640, Loss function: 5.943, Average Loss: 5.617, avg. samples / sec: 350.88
Iteration:   1660, Loss function: 5.847, Average Loss: 5.622, avg. samples / sec: 350.81
Iteration:   1680, Loss function: 5.800, Average Loss: 5.625, avg. samples / sec: 350.53
Iteration:   1700, Loss function: 5.377, Average Loss: 5.629, avg. samples / sec: 350.49
Iteration:   1720, Loss function: 5.684, Average Loss: 5.631, avg. samples / sec: 351.03
Iteration:   1740, Loss function: 5.923, Average Loss: 5.634, avg. samples / sec: 350.62
Iteration:   1760, Loss function: 5.507, Average Loss: 5.636, avg. samples / sec: 350.89
Iteration:   1780, Loss function: 5.693, Average Loss: 5.637, avg. samples / sec: 350.86
Iteration:   1800, Loss function: 5.630, Average Loss: 5.639, avg. samples / sec: 350.72
Iteration:   1820, Loss function: 6.067, Average Loss: 5.643, avg. samples / sec: 350.74
Iteration:   1840, Loss function: 5.902, Average Loss: 5.644, avg. samples / sec: 350.75
Iteration:   1860, Loss function: 5.569, Average Loss: 5.643, avg. samples / sec: 350.68
Iteration:   1880, Loss function: 6.043, Average Loss: 5.646, avg. samples / sec: 350.66
Iteration:   1900, Loss function: 5.670, Average Loss: 5.647, avg. samples / sec: 350.51
Iteration:   1920, Loss function: 5.896, Average Loss: 5.648, avg. samples / sec: 350.36
Iteration:   1940, Loss function: 5.777, Average Loss: 5.648, avg. samples / sec: 349.93
Iteration:   1960, Loss function: 5.568, Average Loss: 5.647, avg. samples / sec: 350.89
Iteration:   1980, Loss function: 5.756, Average Loss: 5.647, avg. samples / sec: 350.61
Iteration:   2000, Loss function: 5.806, Average Loss: 5.646, avg. samples / sec: 350.85
Iteration:   2020, Loss function: 5.573, Average Loss: 5.644, avg. samples / sec: 350.63
Iteration:   2040, Loss function: 5.655, Average Loss: 5.643, avg. samples / sec: 350.56
:::MLLOG {"namespace": "", "time_ms": 1639071894937, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071894938, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.578, Average Loss: 5.642, avg. samples / sec: 350.72
Iteration:   2080, Loss function: 5.019, Average Loss: 5.640, avg. samples / sec: 350.52
Iteration:   2100, Loss function: 5.408, Average Loss: 5.638, avg. samples / sec: 350.58
Iteration:   2120, Loss function: 5.396, Average Loss: 5.635, avg. samples / sec: 350.38
Iteration:   2140, Loss function: 5.373, Average Loss: 5.631, avg. samples / sec: 350.61
Iteration:   2160, Loss function: 5.323, Average Loss: 5.630, avg. samples / sec: 349.81
Iteration:   2180, Loss function: 5.378, Average Loss: 5.628, avg. samples / sec: 349.79
Iteration:   2200, Loss function: 5.454, Average Loss: 5.624, avg. samples / sec: 350.46
Iteration:   2220, Loss function: 5.676, Average Loss: 5.623, avg. samples / sec: 350.47
Iteration:   2240, Loss function: 5.449, Average Loss: 5.620, avg. samples / sec: 350.61
Iteration:   2260, Loss function: 5.378, Average Loss: 5.618, avg. samples / sec: 350.28
Iteration:   2280, Loss function: 5.300, Average Loss: 5.615, avg. samples / sec: 350.38
Iteration:   2300, Loss function: 5.222, Average Loss: 5.613, avg. samples / sec: 350.13
Iteration:   2320, Loss function: 5.302, Average Loss: 5.611, avg. samples / sec: 350.65
Iteration:   2340, Loss function: 5.283, Average Loss: 5.607, avg. samples / sec: 350.39
Iteration:   2360, Loss function: 5.374, Average Loss: 5.603, avg. samples / sec: 350.69
Iteration:   2380, Loss function: 5.483, Average Loss: 5.599, avg. samples / sec: 350.68
Iteration:   2400, Loss function: 5.574, Average Loss: 5.595, avg. samples / sec: 350.90
Iteration:   2420, Loss function: 5.382, Average Loss: 5.592, avg. samples / sec: 349.72
Iteration:   2440, Loss function: 5.422, Average Loss: 5.589, avg. samples / sec: 350.19
Iteration:   2460, Loss function: 5.169, Average Loss: 5.586, avg. samples / sec: 350.74
Iteration:   2480, Loss function: 5.477, Average Loss: 5.582, avg. samples / sec: 350.40
Iteration:   2500, Loss function: 5.266, Average Loss: 5.578, avg. samples / sec: 350.59
Iteration:   2520, Loss function: 5.371, Average Loss: 5.573, avg. samples / sec: 350.31
Iteration:   2540, Loss function: 5.554, Average Loss: 5.570, avg. samples / sec: 350.46
Iteration:   2560, Loss function: 5.297, Average Loss: 5.567, avg. samples / sec: 350.92
Iteration:   2580, Loss function: 5.330, Average Loss: 5.564, avg. samples / sec: 350.45
Iteration:   2600, Loss function: 5.515, Average Loss: 5.561, avg. samples / sec: 350.22
Iteration:   2620, Loss function: 5.558, Average Loss: 5.557, avg. samples / sec: 350.97
Iteration:   2640, Loss function: 5.348, Average Loss: 5.553, avg. samples / sec: 350.51
Iteration:   2660, Loss function: 5.120, Average Loss: 5.550, avg. samples / sec: 350.25
Iteration:   2680, Loss function: 4.964, Average Loss: 5.546, avg. samples / sec: 350.13
Iteration:   2700, Loss function: 5.287, Average Loss: 5.541, avg. samples / sec: 350.03
Iteration:   2720, Loss function: 5.400, Average Loss: 5.536, avg. samples / sec: 350.38
Iteration:   2740, Loss function: 5.268, Average Loss: 5.532, avg. samples / sec: 350.04
Iteration:   2760, Loss function: 5.143, Average Loss: 5.526, avg. samples / sec: 350.44
Iteration:   2780, Loss function: 5.474, Average Loss: 5.522, avg. samples / sec: 350.71
Iteration:   2800, Loss function: 5.098, Average Loss: 5.518, avg. samples / sec: 350.24
Iteration:   2820, Loss function: 5.607, Average Loss: 5.514, avg. samples / sec: 350.45
Iteration:   2840, Loss function: 5.292, Average Loss: 5.510, avg. samples / sec: 350.44
Iteration:   2860, Loss function: 5.282, Average Loss: 5.504, avg. samples / sec: 350.21
Iteration:   2880, Loss function: 5.297, Average Loss: 5.500, avg. samples / sec: 350.26
Iteration:   2900, Loss function: 5.003, Average Loss: 5.496, avg. samples / sec: 350.57
Iteration:   2920, Loss function: 5.344, Average Loss: 5.491, avg. samples / sec: 350.04
Iteration:   2940, Loss function: 5.115, Average Loss: 5.486, avg. samples / sec: 349.80
Iteration:   2960, Loss function: 5.234, Average Loss: 5.481, avg. samples / sec: 350.42
Iteration:   2980, Loss function: 5.241, Average Loss: 5.478, avg. samples / sec: 350.16
Iteration:   3000, Loss function: 5.224, Average Loss: 5.472, avg. samples / sec: 350.48
Iteration:   3020, Loss function: 5.330, Average Loss: 5.465, avg. samples / sec: 350.68
Iteration:   3040, Loss function: 5.304, Average Loss: 5.460, avg. samples / sec: 350.58
Iteration:   3060, Loss function: 5.143, Average Loss: 5.455, avg. samples / sec: 350.69
Iteration:   3080, Loss function: 4.896, Average Loss: 5.450, avg. samples / sec: 350.29
:::MLLOG {"namespace": "", "time_ms": 1639072229402, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639072229403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.243, Average Loss: 5.446, avg. samples / sec: 350.98
Iteration:   3120, Loss function: 4.935, Average Loss: 5.439, avg. samples / sec: 350.30
Iteration:   3140, Loss function: 5.055, Average Loss: 5.434, avg. samples / sec: 350.47
Iteration:   3160, Loss function: 5.579, Average Loss: 5.428, avg. samples / sec: 350.83
Iteration:   3180, Loss function: 5.040, Average Loss: 5.424, avg. samples / sec: 350.71
Iteration:   3200, Loss function: 5.341, Average Loss: 5.419, avg. samples / sec: 350.49
Iteration:   3220, Loss function: 5.094, Average Loss: 5.413, avg. samples / sec: 350.71
Iteration:   3240, Loss function: 5.101, Average Loss: 5.409, avg. samples / sec: 350.69
Iteration:   3260, Loss function: 4.995, Average Loss: 5.403, avg. samples / sec: 350.67
Iteration:   3280, Loss function: 4.945, Average Loss: 5.396, avg. samples / sec: 350.92
Iteration:   3300, Loss function: 4.931, Average Loss: 5.391, avg. samples / sec: 351.53
Iteration:   3320, Loss function: 4.911, Average Loss: 5.385, avg. samples / sec: 351.57
Iteration:   3340, Loss function: 5.100, Average Loss: 5.381, avg. samples / sec: 351.21
Iteration:   3360, Loss function: 5.120, Average Loss: 5.375, avg. samples / sec: 351.00
Iteration:   3380, Loss function: 5.185, Average Loss: 5.369, avg. samples / sec: 351.15
Iteration:   3400, Loss function: 4.859, Average Loss: 5.363, avg. samples / sec: 350.93
Iteration:   3420, Loss function: 5.119, Average Loss: 5.358, avg. samples / sec: 350.86
Iteration:   3440, Loss function: 4.958, Average Loss: 5.352, avg. samples / sec: 351.11
Iteration:   3460, Loss function: 5.268, Average Loss: 5.347, avg. samples / sec: 351.08
Iteration:   3480, Loss function: 5.099, Average Loss: 5.342, avg. samples / sec: 351.09
Iteration:   3500, Loss function: 5.085, Average Loss: 5.338, avg. samples / sec: 350.94
Iteration:   3520, Loss function: 4.925, Average Loss: 5.333, avg. samples / sec: 351.22
Iteration:   3540, Loss function: 4.827, Average Loss: 5.328, avg. samples / sec: 351.21
Iteration:   3560, Loss function: 5.009, Average Loss: 5.324, avg. samples / sec: 351.09
Iteration:   3580, Loss function: 5.011, Average Loss: 5.320, avg. samples / sec: 351.32
Iteration:   3600, Loss function: 5.394, Average Loss: 5.314, avg. samples / sec: 351.32
Iteration:   3620, Loss function: 4.917, Average Loss: 5.309, avg. samples / sec: 351.28
Iteration:   3640, Loss function: 4.865, Average Loss: 5.304, avg. samples / sec: 351.24
Iteration:   3660, Loss function: 4.994, Average Loss: 5.300, avg. samples / sec: 351.35
Iteration:   3680, Loss function: 5.082, Average Loss: 5.293, avg. samples / sec: 351.28
Iteration:   3700, Loss function: 5.091, Average Loss: 5.288, avg. samples / sec: 351.39
Iteration:   3720, Loss function: 4.919, Average Loss: 5.283, avg. samples / sec: 351.21
Iteration:   3740, Loss function: 5.112, Average Loss: 5.280, avg. samples / sec: 350.93
Iteration:   3760, Loss function: 4.882, Average Loss: 5.276, avg. samples / sec: 351.01
Iteration:   3780, Loss function: 4.997, Average Loss: 5.270, avg. samples / sec: 351.30
Iteration:   3800, Loss function: 5.120, Average Loss: 5.267, avg. samples / sec: 351.19
Iteration:   3820, Loss function: 5.217, Average Loss: 5.262, avg. samples / sec: 351.30
Iteration:   3840, Loss function: 4.909, Average Loss: 5.257, avg. samples / sec: 351.33
Iteration:   3860, Loss function: 4.979, Average Loss: 5.252, avg. samples / sec: 351.28
Iteration:   3880, Loss function: 4.990, Average Loss: 5.246, avg. samples / sec: 351.27
Iteration:   3900, Loss function: 5.186, Average Loss: 5.241, avg. samples / sec: 351.19
Iteration:   3920, Loss function: 5.133, Average Loss: 5.235, avg. samples / sec: 351.18
Iteration:   3940, Loss function: 5.071, Average Loss: 5.230, avg. samples / sec: 351.21
Iteration:   3960, Loss function: 4.829, Average Loss: 5.225, avg. samples / sec: 351.31
Iteration:   3980, Loss function: 4.907, Average Loss: 5.221, avg. samples / sec: 351.40
Iteration:   4000, Loss function: 5.217, Average Loss: 5.218, avg. samples / sec: 350.95
Iteration:   4020, Loss function: 5.061, Average Loss: 5.213, avg. samples / sec: 351.31
Iteration:   4040, Loss function: 4.956, Average Loss: 5.210, avg. samples / sec: 351.25
Iteration:   4060, Loss function: 5.250, Average Loss: 5.206, avg. samples / sec: 351.09
Iteration:   4080, Loss function: 5.215, Average Loss: 5.202, avg. samples / sec: 351.21
Iteration:   4100, Loss function: 5.034, Average Loss: 5.199, avg. samples / sec: 350.93
:::MLLOG {"namespace": "", "time_ms": 1639072563516, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072563517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.006, Average Loss: 5.196, avg. samples / sec: 351.46
Iteration:   4140, Loss function: 4.972, Average Loss: 5.190, avg. samples / sec: 351.12
Iteration:   4160, Loss function: 4.964, Average Loss: 5.184, avg. samples / sec: 351.18
Iteration:   4180, Loss function: 4.837, Average Loss: 5.177, avg. samples / sec: 351.19
Iteration:   4200, Loss function: 4.761, Average Loss: 5.171, avg. samples / sec: 351.32
Iteration:   4220, Loss function: 4.795, Average Loss: 5.166, avg. samples / sec: 351.24
Iteration:   4240, Loss function: 4.998, Average Loss: 5.162, avg. samples / sec: 350.70
Iteration:   4260, Loss function: 5.178, Average Loss: 5.157, avg. samples / sec: 351.16
Iteration:   4280, Loss function: 5.249, Average Loss: 5.151, avg. samples / sec: 351.17
Iteration:   4300, Loss function: 4.712, Average Loss: 5.145, avg. samples / sec: 351.14
Iteration:   4320, Loss function: 4.867, Average Loss: 5.140, avg. samples / sec: 351.27
Iteration:   4340, Loss function: 4.782, Average Loss: 5.135, avg. samples / sec: 350.84
Iteration:   4360, Loss function: 4.949, Average Loss: 5.130, avg. samples / sec: 350.64
Iteration:   4380, Loss function: 4.990, Average Loss: 5.125, avg. samples / sec: 350.73
Iteration:   4400, Loss function: 4.860, Average Loss: 5.120, avg. samples / sec: 351.21
Iteration:   4420, Loss function: 4.900, Average Loss: 5.115, avg. samples / sec: 350.87
Iteration:   4440, Loss function: 4.807, Average Loss: 5.110, avg. samples / sec: 351.30
Iteration:   4460, Loss function: 5.208, Average Loss: 5.106, avg. samples / sec: 351.06
Iteration:   4480, Loss function: 5.034, Average Loss: 5.103, avg. samples / sec: 350.91
Iteration:   4500, Loss function: 4.866, Average Loss: 5.100, avg. samples / sec: 351.03
Iteration:   4520, Loss function: 4.847, Average Loss: 5.095, avg. samples / sec: 351.27
Iteration:   4540, Loss function: 5.046, Average Loss: 5.091, avg. samples / sec: 351.24
Iteration:   4560, Loss function: 4.604, Average Loss: 5.087, avg. samples / sec: 351.12
Iteration:   4580, Loss function: 4.875, Average Loss: 5.085, avg. samples / sec: 351.12
Iteration:   4600, Loss function: 4.912, Average Loss: 5.081, avg. samples / sec: 351.10
Iteration:   4620, Loss function: 4.879, Average Loss: 5.076, avg. samples / sec: 351.15
Iteration:   4640, Loss function: 4.878, Average Loss: 5.072, avg. samples / sec: 351.15
Iteration:   4660, Loss function: 4.801, Average Loss: 5.068, avg. samples / sec: 351.23
Iteration:   4680, Loss function: 5.280, Average Loss: 5.063, avg. samples / sec: 351.10
Iteration:   4700, Loss function: 4.695, Average Loss: 5.060, avg. samples / sec: 350.99
Iteration:   4720, Loss function: 4.804, Average Loss: 5.055, avg. samples / sec: 351.19
Iteration:   4740, Loss function: 4.841, Average Loss: 5.051, avg. samples / sec: 351.25
Iteration:   4760, Loss function: 4.456, Average Loss: 5.048, avg. samples / sec: 351.06
Iteration:   4780, Loss function: 5.012, Average Loss: 5.043, avg. samples / sec: 351.02
Iteration:   4800, Loss function: 5.000, Average Loss: 5.041, avg. samples / sec: 350.80
Iteration:   4820, Loss function: 4.749, Average Loss: 5.037, avg. samples / sec: 351.27
Iteration:   4840, Loss function: 5.045, Average Loss: 5.035, avg. samples / sec: 351.63
Iteration:   4860, Loss function: 4.579, Average Loss: 5.030, avg. samples / sec: 351.69
Iteration:   4880, Loss function: 5.406, Average Loss: 5.026, avg. samples / sec: 351.67
Iteration:   4900, Loss function: 4.651, Average Loss: 5.022, avg. samples / sec: 351.50
Iteration:   4920, Loss function: 4.812, Average Loss: 5.020, avg. samples / sec: 351.34
Iteration:   4940, Loss function: 4.850, Average Loss: 5.015, avg. samples / sec: 351.27
Iteration:   4960, Loss function: 4.647, Average Loss: 5.012, avg. samples / sec: 350.43
Iteration:   4980, Loss function: 4.622, Average Loss: 5.008, avg. samples / sec: 350.28
Iteration:   5000, Loss function: 4.895, Average Loss: 5.004, avg. samples / sec: 350.46
Iteration:   5020, Loss function: 4.961, Average Loss: 5.000, avg. samples / sec: 351.17
Iteration:   5040, Loss function: 4.819, Average Loss: 4.997, avg. samples / sec: 351.06
Iteration:   5060, Loss function: 4.874, Average Loss: 4.995, avg. samples / sec: 350.85
Iteration:   5080, Loss function: 4.532, Average Loss: 4.990, avg. samples / sec: 350.87
Iteration:   5100, Loss function: 4.961, Average Loss: 4.988, avg. samples / sec: 350.75
Iteration:   5120, Loss function: 4.717, Average Loss: 4.986, avg. samples / sec: 350.83
Iteration:   5140, Loss function: 4.953, Average Loss: 4.982, avg. samples / sec: 351.04
:::MLLOG {"namespace": "", "time_ms": 1639072897646, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.85 s
:::MLLOG {"namespace": "", "time_ms": 1639072930536, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072930578, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072930578, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11097
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22203
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10079
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19852
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14329
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11097 AP goal: 0.10000
Iteration:   5160, Loss function: 4.809, Average Loss: 4.978, avg. samples / sec: 58.07
:::MLLOG {"namespace": "", "time_ms": 1639072935935, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072935936, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11097378885660789, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072935936, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072936213, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 18:02:17 UTC 2021: done waiting for 1 executions'
Thu Dec  9 18:02:17 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071117229, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071117337, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3905170041, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3905170041
:::MLLOG {"namespace": "", "time_ms": 1639071119238, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071119238, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071119242, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071221019, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071221020, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639071222489, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071222489, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.14s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071222777, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071222778, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071222779, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.997, Average Loss: 0.023, avg. samples / sec: 1.10
Iteration:     20, Loss function: 21.130, Average Loss: 0.459, avg. samples / sec: 334.20
Iteration:     40, Loss function: 20.599, Average Loss: 0.861, avg. samples / sec: 309.92
Iteration:     60, Loss function: 20.464, Average Loss: 1.251, avg. samples / sec: 346.53
Iteration:     80, Loss function: 19.963, Average Loss: 1.624, avg. samples / sec: 345.06
Iteration:    100, Loss function: 15.234, Average Loss: 1.947, avg. samples / sec: 347.15
Iteration:    120, Loss function: 11.478, Average Loss: 2.151, avg. samples / sec: 347.92
Iteration:    140, Loss function: 9.590, Average Loss: 2.315, avg. samples / sec: 346.58
Iteration:    160, Loss function: 9.369, Average Loss: 2.457, avg. samples / sec: 347.56
Iteration:    180, Loss function: 9.112, Average Loss: 2.588, avg. samples / sec: 349.45
Iteration:    200, Loss function: 8.672, Average Loss: 2.714, avg. samples / sec: 348.00
Iteration:    220, Loss function: 8.669, Average Loss: 2.836, avg. samples / sec: 348.62
Iteration:    240, Loss function: 8.591, Average Loss: 2.953, avg. samples / sec: 336.49
Iteration:    260, Loss function: 8.814, Average Loss: 3.066, avg. samples / sec: 349.25
Iteration:    280, Loss function: 8.454, Average Loss: 3.175, avg. samples / sec: 348.90
Iteration:    300, Loss function: 8.464, Average Loss: 3.280, avg. samples / sec: 349.71
Iteration:    320, Loss function: 8.410, Average Loss: 3.383, avg. samples / sec: 349.08
Iteration:    340, Loss function: 8.201, Average Loss: 3.481, avg. samples / sec: 348.59
Iteration:    360, Loss function: 8.095, Average Loss: 3.573, avg. samples / sec: 350.14
Iteration:    380, Loss function: 7.860, Average Loss: 3.661, avg. samples / sec: 349.35
Iteration:    400, Loss function: 7.924, Average Loss: 3.745, avg. samples / sec: 350.46
Iteration:    420, Loss function: 7.697, Average Loss: 3.826, avg. samples / sec: 350.30
Iteration:    440, Loss function: 7.727, Average Loss: 3.903, avg. samples / sec: 349.58
Iteration:    460, Loss function: 7.778, Average Loss: 3.978, avg. samples / sec: 350.45
Iteration:    480, Loss function: 7.492, Average Loss: 4.050, avg. samples / sec: 349.96
Iteration:    500, Loss function: 7.339, Average Loss: 4.119, avg. samples / sec: 349.33
Iteration:    520, Loss function: 7.606, Average Loss: 4.186, avg. samples / sec: 349.91
Iteration:    540, Loss function: 7.495, Average Loss: 4.253, avg. samples / sec: 350.46
Iteration:    560, Loss function: 7.198, Average Loss: 4.316, avg. samples / sec: 350.07
Iteration:    580, Loss function: 7.095, Average Loss: 4.376, avg. samples / sec: 350.28
Iteration:    600, Loss function: 7.286, Average Loss: 4.434, avg. samples / sec: 349.77
Iteration:    620, Loss function: 7.015, Average Loss: 4.490, avg. samples / sec: 332.75
Iteration:    640, Loss function: 7.042, Average Loss: 4.545, avg. samples / sec: 350.71
Iteration:    660, Loss function: 7.250, Average Loss: 4.598, avg. samples / sec: 349.91
Iteration:    680, Loss function: 7.288, Average Loss: 4.648, avg. samples / sec: 350.28
Iteration:    700, Loss function: 6.748, Average Loss: 4.697, avg. samples / sec: 350.00
Iteration:    720, Loss function: 6.898, Average Loss: 4.744, avg. samples / sec: 350.22
Iteration:    740, Loss function: 6.953, Average Loss: 4.790, avg. samples / sec: 350.62
Iteration:    760, Loss function: 6.950, Average Loss: 4.834, avg. samples / sec: 349.23
Iteration:    780, Loss function: 6.744, Average Loss: 4.875, avg. samples / sec: 350.14
Iteration:    800, Loss function: 7.047, Average Loss: 4.915, avg. samples / sec: 349.53
Iteration:    820, Loss function: 6.884, Average Loss: 4.952, avg. samples / sec: 349.72
Iteration:    840, Loss function: 6.792, Average Loss: 4.988, avg. samples / sec: 349.69
Iteration:    860, Loss function: 6.700, Average Loss: 5.022, avg. samples / sec: 350.47
Iteration:    880, Loss function: 6.765, Average Loss: 5.055, avg. samples / sec: 350.20
Iteration:    900, Loss function: 6.771, Average Loss: 5.085, avg. samples / sec: 350.66
Iteration:    920, Loss function: 6.652, Average Loss: 5.114, avg. samples / sec: 350.98
Iteration:    940, Loss function: 6.634, Average Loss: 5.143, avg. samples / sec: 350.25
Iteration:    960, Loss function: 6.513, Average Loss: 5.172, avg. samples / sec: 350.67
Iteration:    980, Loss function: 6.583, Average Loss: 5.199, avg. samples / sec: 350.24
Iteration:   1000, Loss function: 6.511, Average Loss: 5.224, avg. samples / sec: 350.34
Iteration:   1020, Loss function: 6.310, Average Loss: 5.248, avg. samples / sec: 350.36
:::MLLOG {"namespace": "", "time_ms": 1639071559938, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071559939, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.391, Average Loss: 5.271, avg. samples / sec: 350.14
Iteration:   1060, Loss function: 6.359, Average Loss: 5.293, avg. samples / sec: 350.27
Iteration:   1080, Loss function: 6.369, Average Loss: 5.314, avg. samples / sec: 350.38
Iteration:   1100, Loss function: 6.011, Average Loss: 5.334, avg. samples / sec: 350.53
Iteration:   1120, Loss function: 6.358, Average Loss: 5.354, avg. samples / sec: 350.40
Iteration:   1140, Loss function: 6.414, Average Loss: 5.373, avg. samples / sec: 350.30
Iteration:   1160, Loss function: 6.392, Average Loss: 5.390, avg. samples / sec: 350.31
Iteration:   1180, Loss function: 6.273, Average Loss: 5.407, avg. samples / sec: 349.85
Iteration:   1200, Loss function: 6.357, Average Loss: 5.422, avg. samples / sec: 349.69
Iteration:   1220, Loss function: 6.302, Average Loss: 5.438, avg. samples / sec: 333.79
Iteration:   1240, Loss function: 6.043, Average Loss: 5.452, avg. samples / sec: 350.35
Iteration:   1260, Loss function: 5.994, Average Loss: 5.464, avg. samples / sec: 349.98
Iteration:   1280, Loss function: 5.943, Average Loss: 5.476, avg. samples / sec: 350.37
Iteration:   1300, Loss function: 6.130, Average Loss: 5.490, avg. samples / sec: 350.30
Iteration:   1320, Loss function: 6.299, Average Loss: 5.502, avg. samples / sec: 350.78
Iteration:   1340, Loss function: 5.692, Average Loss: 5.512, avg. samples / sec: 349.77
Iteration:   1360, Loss function: 6.146, Average Loss: 5.523, avg. samples / sec: 350.17
Iteration:   1380, Loss function: 5.915, Average Loss: 5.533, avg. samples / sec: 350.39
Iteration:   1400, Loss function: 6.173, Average Loss: 5.543, avg. samples / sec: 350.74
Iteration:   1420, Loss function: 5.853, Average Loss: 5.551, avg. samples / sec: 351.36
Iteration:   1440, Loss function: 6.293, Average Loss: 5.560, avg. samples / sec: 350.52
Iteration:   1460, Loss function: 6.138, Average Loss: 5.568, avg. samples / sec: 350.33
Iteration:   1480, Loss function: 5.858, Average Loss: 5.576, avg. samples / sec: 350.48
Iteration:   1500, Loss function: 6.029, Average Loss: 5.584, avg. samples / sec: 350.25
Iteration:   1520, Loss function: 5.988, Average Loss: 5.590, avg. samples / sec: 350.71
Iteration:   1540, Loss function: 5.968, Average Loss: 5.595, avg. samples / sec: 350.48
Iteration:   1560, Loss function: 5.632, Average Loss: 5.599, avg. samples / sec: 350.81
Iteration:   1580, Loss function: 5.603, Average Loss: 5.604, avg. samples / sec: 350.58
Iteration:   1600, Loss function: 5.975, Average Loss: 5.609, avg. samples / sec: 350.67
Iteration:   1620, Loss function: 5.706, Average Loss: 5.614, avg. samples / sec: 350.54
Iteration:   1640, Loss function: 5.943, Average Loss: 5.617, avg. samples / sec: 350.88
Iteration:   1660, Loss function: 5.847, Average Loss: 5.622, avg. samples / sec: 350.81
Iteration:   1680, Loss function: 5.800, Average Loss: 5.625, avg. samples / sec: 350.53
Iteration:   1700, Loss function: 5.377, Average Loss: 5.629, avg. samples / sec: 350.49
Iteration:   1720, Loss function: 5.684, Average Loss: 5.631, avg. samples / sec: 351.03
Iteration:   1740, Loss function: 5.923, Average Loss: 5.634, avg. samples / sec: 350.62
Iteration:   1760, Loss function: 5.507, Average Loss: 5.636, avg. samples / sec: 350.89
Iteration:   1780, Loss function: 5.693, Average Loss: 5.637, avg. samples / sec: 350.86
Iteration:   1800, Loss function: 5.630, Average Loss: 5.639, avg. samples / sec: 350.72
Iteration:   1820, Loss function: 6.067, Average Loss: 5.643, avg. samples / sec: 350.74
Iteration:   1840, Loss function: 5.902, Average Loss: 5.644, avg. samples / sec: 350.75
Iteration:   1860, Loss function: 5.569, Average Loss: 5.643, avg. samples / sec: 350.68
Iteration:   1880, Loss function: 6.043, Average Loss: 5.646, avg. samples / sec: 350.66
Iteration:   1900, Loss function: 5.670, Average Loss: 5.647, avg. samples / sec: 350.51
Iteration:   1920, Loss function: 5.896, Average Loss: 5.648, avg. samples / sec: 350.36
Iteration:   1940, Loss function: 5.777, Average Loss: 5.648, avg. samples / sec: 349.93
Iteration:   1960, Loss function: 5.568, Average Loss: 5.647, avg. samples / sec: 350.89
Iteration:   1980, Loss function: 5.756, Average Loss: 5.647, avg. samples / sec: 350.61
Iteration:   2000, Loss function: 5.806, Average Loss: 5.646, avg. samples / sec: 350.85
Iteration:   2020, Loss function: 5.573, Average Loss: 5.644, avg. samples / sec: 350.63
Iteration:   2040, Loss function: 5.655, Average Loss: 5.643, avg. samples / sec: 350.56
:::MLLOG {"namespace": "", "time_ms": 1639071894937, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071894938, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.578, Average Loss: 5.642, avg. samples / sec: 350.72
Iteration:   2080, Loss function: 5.019, Average Loss: 5.640, avg. samples / sec: 350.52
Iteration:   2100, Loss function: 5.408, Average Loss: 5.638, avg. samples / sec: 350.58
Iteration:   2120, Loss function: 5.396, Average Loss: 5.635, avg. samples / sec: 350.38
Iteration:   2140, Loss function: 5.373, Average Loss: 5.631, avg. samples / sec: 350.61
Iteration:   2160, Loss function: 5.323, Average Loss: 5.630, avg. samples / sec: 349.81
Iteration:   2180, Loss function: 5.378, Average Loss: 5.628, avg. samples / sec: 349.79
Iteration:   2200, Loss function: 5.454, Average Loss: 5.624, avg. samples / sec: 350.46
Iteration:   2220, Loss function: 5.676, Average Loss: 5.623, avg. samples / sec: 350.47
Iteration:   2240, Loss function: 5.449, Average Loss: 5.620, avg. samples / sec: 350.61
Iteration:   2260, Loss function: 5.378, Average Loss: 5.618, avg. samples / sec: 350.28
Iteration:   2280, Loss function: 5.300, Average Loss: 5.615, avg. samples / sec: 350.38
Iteration:   2300, Loss function: 5.222, Average Loss: 5.613, avg. samples / sec: 350.13
Iteration:   2320, Loss function: 5.302, Average Loss: 5.611, avg. samples / sec: 350.65
Iteration:   2340, Loss function: 5.283, Average Loss: 5.607, avg. samples / sec: 350.39
Iteration:   2360, Loss function: 5.374, Average Loss: 5.603, avg. samples / sec: 350.69
Iteration:   2380, Loss function: 5.483, Average Loss: 5.599, avg. samples / sec: 350.68
Iteration:   2400, Loss function: 5.574, Average Loss: 5.595, avg. samples / sec: 350.90
Iteration:   2420, Loss function: 5.382, Average Loss: 5.592, avg. samples / sec: 349.72
Iteration:   2440, Loss function: 5.422, Average Loss: 5.589, avg. samples / sec: 350.19
Iteration:   2460, Loss function: 5.169, Average Loss: 5.586, avg. samples / sec: 350.74
Iteration:   2480, Loss function: 5.477, Average Loss: 5.582, avg. samples / sec: 350.40
Iteration:   2500, Loss function: 5.266, Average Loss: 5.578, avg. samples / sec: 350.59
Iteration:   2520, Loss function: 5.371, Average Loss: 5.573, avg. samples / sec: 350.31
Iteration:   2540, Loss function: 5.554, Average Loss: 5.570, avg. samples / sec: 350.46
Iteration:   2560, Loss function: 5.297, Average Loss: 5.567, avg. samples / sec: 350.92
Iteration:   2580, Loss function: 5.330, Average Loss: 5.564, avg. samples / sec: 350.45
Iteration:   2600, Loss function: 5.515, Average Loss: 5.561, avg. samples / sec: 350.22
Iteration:   2620, Loss function: 5.558, Average Loss: 5.557, avg. samples / sec: 350.97
Iteration:   2640, Loss function: 5.348, Average Loss: 5.553, avg. samples / sec: 350.51
Iteration:   2660, Loss function: 5.120, Average Loss: 5.550, avg. samples / sec: 350.25
Iteration:   2680, Loss function: 4.964, Average Loss: 5.546, avg. samples / sec: 350.13
Iteration:   2700, Loss function: 5.287, Average Loss: 5.541, avg. samples / sec: 350.03
Iteration:   2720, Loss function: 5.400, Average Loss: 5.536, avg. samples / sec: 350.38
Iteration:   2740, Loss function: 5.268, Average Loss: 5.532, avg. samples / sec: 350.04
Iteration:   2760, Loss function: 5.143, Average Loss: 5.526, avg. samples / sec: 350.44
Iteration:   2780, Loss function: 5.474, Average Loss: 5.522, avg. samples / sec: 350.71
Iteration:   2800, Loss function: 5.098, Average Loss: 5.518, avg. samples / sec: 350.24
Iteration:   2820, Loss function: 5.607, Average Loss: 5.514, avg. samples / sec: 350.45
Iteration:   2840, Loss function: 5.292, Average Loss: 5.510, avg. samples / sec: 350.44
Iteration:   2860, Loss function: 5.282, Average Loss: 5.504, avg. samples / sec: 350.21
Iteration:   2880, Loss function: 5.297, Average Loss: 5.500, avg. samples / sec: 350.26
Iteration:   2900, Loss function: 5.003, Average Loss: 5.496, avg. samples / sec: 350.57
Iteration:   2920, Loss function: 5.344, Average Loss: 5.491, avg. samples / sec: 350.04
Iteration:   2940, Loss function: 5.115, Average Loss: 5.486, avg. samples / sec: 349.80
Iteration:   2960, Loss function: 5.234, Average Loss: 5.481, avg. samples / sec: 350.42
Iteration:   2980, Loss function: 5.241, Average Loss: 5.478, avg. samples / sec: 350.16
Iteration:   3000, Loss function: 5.224, Average Loss: 5.472, avg. samples / sec: 350.48
Iteration:   3020, Loss function: 5.330, Average Loss: 5.465, avg. samples / sec: 350.68
Iteration:   3040, Loss function: 5.304, Average Loss: 5.460, avg. samples / sec: 350.58
Iteration:   3060, Loss function: 5.143, Average Loss: 5.455, avg. samples / sec: 350.69
Iteration:   3080, Loss function: 4.896, Average Loss: 5.450, avg. samples / sec: 350.29
:::MLLOG {"namespace": "", "time_ms": 1639072229402, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639072229403, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.243, Average Loss: 5.446, avg. samples / sec: 350.98
Iteration:   3120, Loss function: 4.935, Average Loss: 5.439, avg. samples / sec: 350.30
Iteration:   3140, Loss function: 5.055, Average Loss: 5.434, avg. samples / sec: 350.47
Iteration:   3160, Loss function: 5.579, Average Loss: 5.428, avg. samples / sec: 350.83
Iteration:   3180, Loss function: 5.040, Average Loss: 5.424, avg. samples / sec: 350.71
Iteration:   3200, Loss function: 5.341, Average Loss: 5.419, avg. samples / sec: 350.49
Iteration:   3220, Loss function: 5.094, Average Loss: 5.413, avg. samples / sec: 350.71
Iteration:   3240, Loss function: 5.101, Average Loss: 5.409, avg. samples / sec: 350.69
Iteration:   3260, Loss function: 4.995, Average Loss: 5.403, avg. samples / sec: 350.67
Iteration:   3280, Loss function: 4.945, Average Loss: 5.396, avg. samples / sec: 350.92
Iteration:   3300, Loss function: 4.931, Average Loss: 5.391, avg. samples / sec: 351.53
Iteration:   3320, Loss function: 4.911, Average Loss: 5.385, avg. samples / sec: 351.57
Iteration:   3340, Loss function: 5.100, Average Loss: 5.381, avg. samples / sec: 351.21
Iteration:   3360, Loss function: 5.120, Average Loss: 5.375, avg. samples / sec: 351.00
Iteration:   3380, Loss function: 5.185, Average Loss: 5.369, avg. samples / sec: 351.15
Iteration:   3400, Loss function: 4.859, Average Loss: 5.363, avg. samples / sec: 350.93
Iteration:   3420, Loss function: 5.119, Average Loss: 5.358, avg. samples / sec: 350.86
Iteration:   3440, Loss function: 4.958, Average Loss: 5.352, avg. samples / sec: 351.11
Iteration:   3460, Loss function: 5.268, Average Loss: 5.347, avg. samples / sec: 351.08
Iteration:   3480, Loss function: 5.099, Average Loss: 5.342, avg. samples / sec: 351.09
Iteration:   3500, Loss function: 5.085, Average Loss: 5.338, avg. samples / sec: 350.94
Iteration:   3520, Loss function: 4.925, Average Loss: 5.333, avg. samples / sec: 351.22
Iteration:   3540, Loss function: 4.827, Average Loss: 5.328, avg. samples / sec: 351.21
Iteration:   3560, Loss function: 5.009, Average Loss: 5.324, avg. samples / sec: 351.09
Iteration:   3580, Loss function: 5.011, Average Loss: 5.320, avg. samples / sec: 351.32
Iteration:   3600, Loss function: 5.394, Average Loss: 5.314, avg. samples / sec: 351.32
Iteration:   3620, Loss function: 4.917, Average Loss: 5.309, avg. samples / sec: 351.28
Iteration:   3640, Loss function: 4.865, Average Loss: 5.304, avg. samples / sec: 351.24
Iteration:   3660, Loss function: 4.994, Average Loss: 5.300, avg. samples / sec: 351.35
Iteration:   3680, Loss function: 5.082, Average Loss: 5.293, avg. samples / sec: 351.28
Iteration:   3700, Loss function: 5.091, Average Loss: 5.288, avg. samples / sec: 351.39
Iteration:   3720, Loss function: 4.919, Average Loss: 5.283, avg. samples / sec: 351.21
Iteration:   3740, Loss function: 5.112, Average Loss: 5.280, avg. samples / sec: 350.93
Iteration:   3760, Loss function: 4.882, Average Loss: 5.276, avg. samples / sec: 351.01
Iteration:   3780, Loss function: 4.997, Average Loss: 5.270, avg. samples / sec: 351.30
Iteration:   3800, Loss function: 5.120, Average Loss: 5.267, avg. samples / sec: 351.19
Iteration:   3820, Loss function: 5.217, Average Loss: 5.262, avg. samples / sec: 351.30
Iteration:   3840, Loss function: 4.909, Average Loss: 5.257, avg. samples / sec: 351.33
Iteration:   3860, Loss function: 4.979, Average Loss: 5.252, avg. samples / sec: 351.28
Iteration:   3880, Loss function: 4.990, Average Loss: 5.246, avg. samples / sec: 351.27
Iteration:   3900, Loss function: 5.186, Average Loss: 5.241, avg. samples / sec: 351.19
Iteration:   3920, Loss function: 5.133, Average Loss: 5.235, avg. samples / sec: 351.18
Iteration:   3940, Loss function: 5.071, Average Loss: 5.230, avg. samples / sec: 351.21
Iteration:   3960, Loss function: 4.829, Average Loss: 5.225, avg. samples / sec: 351.31
Iteration:   3980, Loss function: 4.907, Average Loss: 5.221, avg. samples / sec: 351.40
Iteration:   4000, Loss function: 5.217, Average Loss: 5.218, avg. samples / sec: 350.95
Iteration:   4020, Loss function: 5.061, Average Loss: 5.213, avg. samples / sec: 351.31
Iteration:   4040, Loss function: 4.956, Average Loss: 5.210, avg. samples / sec: 351.25
Iteration:   4060, Loss function: 5.250, Average Loss: 5.206, avg. samples / sec: 351.09
Iteration:   4080, Loss function: 5.215, Average Loss: 5.202, avg. samples / sec: 351.21
Iteration:   4100, Loss function: 5.034, Average Loss: 5.199, avg. samples / sec: 350.93
:::MLLOG {"namespace": "", "time_ms": 1639072563516, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072563517, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.006, Average Loss: 5.196, avg. samples / sec: 351.46
Iteration:   4140, Loss function: 4.972, Average Loss: 5.190, avg. samples / sec: 351.12
Iteration:   4160, Loss function: 4.964, Average Loss: 5.184, avg. samples / sec: 351.18
Iteration:   4180, Loss function: 4.837, Average Loss: 5.177, avg. samples / sec: 351.19
Iteration:   4200, Loss function: 4.761, Average Loss: 5.171, avg. samples / sec: 351.32
Iteration:   4220, Loss function: 4.795, Average Loss: 5.166, avg. samples / sec: 351.24
Iteration:   4240, Loss function: 4.998, Average Loss: 5.162, avg. samples / sec: 350.70
Iteration:   4260, Loss function: 5.178, Average Loss: 5.157, avg. samples / sec: 351.16
Iteration:   4280, Loss function: 5.249, Average Loss: 5.151, avg. samples / sec: 351.17
Iteration:   4300, Loss function: 4.712, Average Loss: 5.145, avg. samples / sec: 351.14
Iteration:   4320, Loss function: 4.867, Average Loss: 5.140, avg. samples / sec: 351.27
Iteration:   4340, Loss function: 4.782, Average Loss: 5.135, avg. samples / sec: 350.84
Iteration:   4360, Loss function: 4.949, Average Loss: 5.130, avg. samples / sec: 350.64
Iteration:   4380, Loss function: 4.990, Average Loss: 5.125, avg. samples / sec: 350.73
Iteration:   4400, Loss function: 4.860, Average Loss: 5.120, avg. samples / sec: 351.21
Iteration:   4420, Loss function: 4.900, Average Loss: 5.115, avg. samples / sec: 350.87
Iteration:   4440, Loss function: 4.807, Average Loss: 5.110, avg. samples / sec: 351.30
Iteration:   4460, Loss function: 5.208, Average Loss: 5.106, avg. samples / sec: 351.06
Iteration:   4480, Loss function: 5.034, Average Loss: 5.103, avg. samples / sec: 350.91
Iteration:   4500, Loss function: 4.866, Average Loss: 5.100, avg. samples / sec: 351.03
Iteration:   4520, Loss function: 4.847, Average Loss: 5.095, avg. samples / sec: 351.27
Iteration:   4540, Loss function: 5.046, Average Loss: 5.091, avg. samples / sec: 351.24
Iteration:   4560, Loss function: 4.604, Average Loss: 5.087, avg. samples / sec: 351.12
Iteration:   4580, Loss function: 4.875, Average Loss: 5.085, avg. samples / sec: 351.12
Iteration:   4600, Loss function: 4.912, Average Loss: 5.081, avg. samples / sec: 351.10
Iteration:   4620, Loss function: 4.879, Average Loss: 5.076, avg. samples / sec: 351.15
Iteration:   4640, Loss function: 4.878, Average Loss: 5.072, avg. samples / sec: 351.15
Iteration:   4660, Loss function: 4.801, Average Loss: 5.068, avg. samples / sec: 351.23
Iteration:   4680, Loss function: 5.280, Average Loss: 5.063, avg. samples / sec: 351.10
Iteration:   4700, Loss function: 4.695, Average Loss: 5.060, avg. samples / sec: 350.99
Iteration:   4720, Loss function: 4.804, Average Loss: 5.055, avg. samples / sec: 351.19
Iteration:   4740, Loss function: 4.841, Average Loss: 5.051, avg. samples / sec: 351.25
Iteration:   4760, Loss function: 4.456, Average Loss: 5.048, avg. samples / sec: 351.06
Iteration:   4780, Loss function: 5.012, Average Loss: 5.043, avg. samples / sec: 351.02
Iteration:   4800, Loss function: 5.000, Average Loss: 5.041, avg. samples / sec: 350.80
Iteration:   4820, Loss function: 4.749, Average Loss: 5.037, avg. samples / sec: 351.27
Iteration:   4840, Loss function: 5.045, Average Loss: 5.035, avg. samples / sec: 351.63
Iteration:   4860, Loss function: 4.579, Average Loss: 5.030, avg. samples / sec: 351.69
Iteration:   4880, Loss function: 5.406, Average Loss: 5.026, avg. samples / sec: 351.67
Iteration:   4900, Loss function: 4.651, Average Loss: 5.022, avg. samples / sec: 351.50
Iteration:   4920, Loss function: 4.812, Average Loss: 5.020, avg. samples / sec: 351.34
Iteration:   4940, Loss function: 4.850, Average Loss: 5.015, avg. samples / sec: 351.27
Iteration:   4960, Loss function: 4.647, Average Loss: 5.012, avg. samples / sec: 350.43
Iteration:   4980, Loss function: 4.622, Average Loss: 5.008, avg. samples / sec: 350.28
Iteration:   5000, Loss function: 4.895, Average Loss: 5.004, avg. samples / sec: 350.46
Iteration:   5020, Loss function: 4.961, Average Loss: 5.000, avg. samples / sec: 351.17
Iteration:   5040, Loss function: 4.819, Average Loss: 4.997, avg. samples / sec: 351.06
Iteration:   5060, Loss function: 4.874, Average Loss: 4.995, avg. samples / sec: 350.85
Iteration:   5080, Loss function: 4.532, Average Loss: 4.990, avg. samples / sec: 350.87
Iteration:   5100, Loss function: 4.961, Average Loss: 4.988, avg. samples / sec: 350.75
Iteration:   5120, Loss function: 4.717, Average Loss: 4.986, avg. samples / sec: 350.83
Iteration:   5140, Loss function: 4.953, Average Loss: 4.982, avg. samples / sec: 351.04
:::MLLOG {"namespace": "", "time_ms": 1639072897646, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 32.85 s
:::MLLOG {"namespace": "", "time_ms": 1639072930536, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072930578, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072930578, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.57s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=1.81s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.11097
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22203
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.10079
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19852
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.14329
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20907
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.22072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.22072
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.11097 AP goal: 0.10000
Iteration:   5160, Loss function: 4.809, Average Loss: 4.978, avg. samples / sec: 58.07
:::MLLOG {"namespace": "", "time_ms": 1639072935935, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072935936, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.11097378885660789, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072935936, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072936213, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639072937
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 06:02:17 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 05:31:49 PM'
START TIMING RUN WAS 2021-12-09 05:31:49 PM
ENDING TIMING RUN AT 2021-12-09 06:02:17 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 06:02:17 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-c9297a60-5079-9a56-b935-51e08dc0f65e)
  MIG 2g.10gb     Device  0: (UUID: MIG-80e9f71f-918d-56db-8088-733180854815)
+ result=1828
+ result_name=SINGLE_STAGE_DETECTOR
RESULT,SINGLE_STAGE_DETECTOR,,1828,nvidia,2021-12-09 05:31:49 PM
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1828,nvidia,2021-12-09 05:31:49 PM'
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
