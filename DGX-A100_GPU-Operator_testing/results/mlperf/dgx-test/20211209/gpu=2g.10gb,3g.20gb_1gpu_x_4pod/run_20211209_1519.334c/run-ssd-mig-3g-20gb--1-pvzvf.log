+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-pvzvf.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-pvzvf.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-pvzvf.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-4c7db5d8-f005-5927-803e-9ee984a56e15
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15'
Found 1 MIG instances: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639071108
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 05:31:48 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 05:31:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
STARTING TIMING RUN AT 2021-12-09 05:31:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
Running in parallel mode.
+ echo 'Running in parallel mode.'
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_12-30-31 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\2\-\3\0\-\3\1 ]]
+ set +x
Thu Dec  9 17:31:48 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd-mig-3g-20gb--1-pvzvf to the sync file ...
run-ssd-mig-3g-20gb--1-pvzvf Found 2 Pods, waiting to have 8 ...
     1	run-ssd-mig-2g-10gb--1-hds46
     2	run-ssd-mig-3g-20gb--1-pvzvf
Thu Dec  9 17:31:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071115492, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071115596, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3036739162, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3036739162
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639071117227, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071117227, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071117232, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071117232, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071163488, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071163488, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639071164737, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071164738, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071165011, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071165011, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071165012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.632, Average Loss: 0.023, avg. samples / sec: 2.40
Iteration:     20, Loss function: 21.040, Average Loss: 0.455, avg. samples / sec: 519.05
Iteration:     40, Loss function: 20.691, Average Loss: 0.856, avg. samples / sec: 479.65
Iteration:     60, Loss function: 20.321, Average Loss: 1.245, avg. samples / sec: 536.95
Iteration:     80, Loss function: 19.364, Average Loss: 1.613, avg. samples / sec: 536.50
Iteration:    100, Loss function: 13.555, Average Loss: 1.909, avg. samples / sec: 534.52
Iteration:    120, Loss function: 10.490, Average Loss: 2.097, avg. samples / sec: 536.12
Iteration:    140, Loss function: 9.348, Average Loss: 2.247, avg. samples / sec: 536.44
Iteration:    160, Loss function: 9.140, Average Loss: 2.384, avg. samples / sec: 539.03
Iteration:    180, Loss function: 9.035, Average Loss: 2.513, avg. samples / sec: 536.13
Iteration:    200, Loss function: 8.480, Average Loss: 2.638, avg. samples / sec: 535.89
Iteration:    220, Loss function: 8.573, Average Loss: 2.760, avg. samples / sec: 539.25
Iteration:    240, Loss function: 9.032, Average Loss: 2.881, avg. samples / sec: 539.06
Iteration:    260, Loss function: 8.972, Average Loss: 2.999, avg. samples / sec: 533.20
Iteration:    280, Loss function: 8.393, Average Loss: 3.110, avg. samples / sec: 534.59
Iteration:    300, Loss function: 8.339, Average Loss: 3.213, avg. samples / sec: 538.35
Iteration:    320, Loss function: 8.217, Average Loss: 3.314, avg. samples / sec: 535.96
Iteration:    340, Loss function: 8.567, Average Loss: 3.413, avg. samples / sec: 537.17
Iteration:    360, Loss function: 8.008, Average Loss: 3.509, avg. samples / sec: 535.72
Iteration:    380, Loss function: 7.843, Average Loss: 3.598, avg. samples / sec: 536.86
Iteration:    400, Loss function: 7.921, Average Loss: 3.684, avg. samples / sec: 538.59
Iteration:    420, Loss function: 7.615, Average Loss: 3.768, avg. samples / sec: 539.36
Iteration:    440, Loss function: 7.888, Average Loss: 3.847, avg. samples / sec: 539.27
Iteration:    460, Loss function: 7.895, Average Loss: 3.926, avg. samples / sec: 539.56
Iteration:    480, Loss function: 7.459, Average Loss: 4.000, avg. samples / sec: 538.80
Iteration:    500, Loss function: 7.782, Average Loss: 4.070, avg. samples / sec: 536.86
Iteration:    520, Loss function: 7.615, Average Loss: 4.141, avg. samples / sec: 538.46
Iteration:    540, Loss function: 7.487, Average Loss: 4.207, avg. samples / sec: 536.33
Iteration:    560, Loss function: 7.212, Average Loss: 4.269, avg. samples / sec: 534.03
Iteration:    580, Loss function: 7.199, Average Loss: 4.331, avg. samples / sec: 535.20
Iteration:    600, Loss function: 7.348, Average Loss: 4.391, avg. samples / sec: 538.56
Iteration:    620, Loss function: 6.992, Average Loss: 4.447, avg. samples / sec: 536.37
Iteration:    640, Loss function: 6.796, Average Loss: 4.502, avg. samples / sec: 536.55
Iteration:    660, Loss function: 7.186, Average Loss: 4.554, avg. samples / sec: 537.00
Iteration:    680, Loss function: 7.320, Average Loss: 4.606, avg. samples / sec: 538.25
Iteration:    700, Loss function: 6.784, Average Loss: 4.655, avg. samples / sec: 537.88
Iteration:    720, Loss function: 7.022, Average Loss: 4.705, avg. samples / sec: 536.85
Iteration:    740, Loss function: 6.981, Average Loss: 4.751, avg. samples / sec: 537.69
Iteration:    760, Loss function: 7.194, Average Loss: 4.796, avg. samples / sec: 538.16
Iteration:    780, Loss function: 6.781, Average Loss: 4.838, avg. samples / sec: 535.60
Iteration:    800, Loss function: 7.236, Average Loss: 4.879, avg. samples / sec: 537.67
Iteration:    820, Loss function: 6.776, Average Loss: 4.918, avg. samples / sec: 536.85
Iteration:    840, Loss function: 6.821, Average Loss: 4.955, avg. samples / sec: 539.88
Iteration:    860, Loss function: 6.897, Average Loss: 4.990, avg. samples / sec: 538.57
Iteration:    880, Loss function: 6.780, Average Loss: 5.023, avg. samples / sec: 539.22
Iteration:    900, Loss function: 6.851, Average Loss: 5.055, avg. samples / sec: 534.51
Iteration:    920, Loss function: 6.681, Average Loss: 5.085, avg. samples / sec: 538.76
Iteration:    940, Loss function: 6.829, Average Loss: 5.115, avg. samples / sec: 539.15
Iteration:    960, Loss function: 6.520, Average Loss: 5.144, avg. samples / sec: 536.69
Iteration:    980, Loss function: 6.481, Average Loss: 5.171, avg. samples / sec: 537.01
Iteration:   1000, Loss function: 6.754, Average Loss: 5.198, avg. samples / sec: 535.78
Iteration:   1020, Loss function: 6.338, Average Loss: 5.224, avg. samples / sec: 537.24
:::MLLOG {"namespace": "", "time_ms": 1639071383928, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071383929, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.422, Average Loss: 5.246, avg. samples / sec: 538.30
Iteration:   1060, Loss function: 6.420, Average Loss: 5.269, avg. samples / sec: 536.73
Iteration:   1080, Loss function: 6.296, Average Loss: 5.291, avg. samples / sec: 538.21
Iteration:   1100, Loss function: 6.200, Average Loss: 5.312, avg. samples / sec: 536.34
Iteration:   1120, Loss function: 6.180, Average Loss: 5.332, avg. samples / sec: 538.27
Iteration:   1140, Loss function: 6.538, Average Loss: 5.351, avg. samples / sec: 537.42
Iteration:   1160, Loss function: 6.098, Average Loss: 5.370, avg. samples / sec: 535.22
Iteration:   1180, Loss function: 6.259, Average Loss: 5.389, avg. samples / sec: 539.45
Iteration:   1200, Loss function: 6.392, Average Loss: 5.406, avg. samples / sec: 538.03
Iteration:   1220, Loss function: 6.092, Average Loss: 5.421, avg. samples / sec: 536.87
Iteration:   1240, Loss function: 5.966, Average Loss: 5.434, avg. samples / sec: 538.37
Iteration:   1260, Loss function: 6.167, Average Loss: 5.447, avg. samples / sec: 535.08
Iteration:   1280, Loss function: 5.911, Average Loss: 5.460, avg. samples / sec: 538.21
Iteration:   1300, Loss function: 6.159, Average Loss: 5.473, avg. samples / sec: 538.96
Iteration:   1320, Loss function: 5.914, Average Loss: 5.485, avg. samples / sec: 539.34
Iteration:   1340, Loss function: 5.890, Average Loss: 5.496, avg. samples / sec: 536.01
Iteration:   1360, Loss function: 5.969, Average Loss: 5.507, avg. samples / sec: 537.87
Iteration:   1380, Loss function: 6.135, Average Loss: 5.517, avg. samples / sec: 537.85
Iteration:   1400, Loss function: 5.965, Average Loss: 5.526, avg. samples / sec: 537.64
Iteration:   1420, Loss function: 5.922, Average Loss: 5.534, avg. samples / sec: 538.74
Iteration:   1440, Loss function: 6.426, Average Loss: 5.543, avg. samples / sec: 538.99
Iteration:   1460, Loss function: 6.269, Average Loss: 5.551, avg. samples / sec: 537.44
Iteration:   1480, Loss function: 5.936, Average Loss: 5.560, avg. samples / sec: 536.88
Iteration:   1500, Loss function: 6.014, Average Loss: 5.568, avg. samples / sec: 538.35
Iteration:   1520, Loss function: 6.062, Average Loss: 5.574, avg. samples / sec: 538.73
Iteration:   1540, Loss function: 5.874, Average Loss: 5.580, avg. samples / sec: 539.88
Iteration:   1560, Loss function: 5.651, Average Loss: 5.584, avg. samples / sec: 538.30
Iteration:   1580, Loss function: 5.605, Average Loss: 5.590, avg. samples / sec: 538.65
Iteration:   1600, Loss function: 6.194, Average Loss: 5.597, avg. samples / sec: 535.49
Iteration:   1620, Loss function: 5.643, Average Loss: 5.601, avg. samples / sec: 537.50
Iteration:   1640, Loss function: 5.931, Average Loss: 5.605, avg. samples / sec: 538.17
Iteration:   1660, Loss function: 5.967, Average Loss: 5.609, avg. samples / sec: 537.57
Iteration:   1680, Loss function: 5.714, Average Loss: 5.613, avg. samples / sec: 536.73
Iteration:   1700, Loss function: 5.290, Average Loss: 5.616, avg. samples / sec: 538.44
Iteration:   1720, Loss function: 5.720, Average Loss: 5.618, avg. samples / sec: 539.13
Iteration:   1740, Loss function: 5.885, Average Loss: 5.621, avg. samples / sec: 537.43
Iteration:   1760, Loss function: 5.407, Average Loss: 5.622, avg. samples / sec: 536.46
Iteration:   1780, Loss function: 5.607, Average Loss: 5.624, avg. samples / sec: 537.94
Iteration:   1800, Loss function: 5.638, Average Loss: 5.626, avg. samples / sec: 537.45
Iteration:   1820, Loss function: 5.938, Average Loss: 5.628, avg. samples / sec: 539.09
Iteration:   1840, Loss function: 5.783, Average Loss: 5.630, avg. samples / sec: 536.90
Iteration:   1860, Loss function: 5.470, Average Loss: 5.629, avg. samples / sec: 538.39
Iteration:   1880, Loss function: 5.938, Average Loss: 5.630, avg. samples / sec: 535.93
Iteration:   1900, Loss function: 5.899, Average Loss: 5.631, avg. samples / sec: 538.36
Iteration:   1920, Loss function: 5.551, Average Loss: 5.631, avg. samples / sec: 538.75
Iteration:   1940, Loss function: 5.859, Average Loss: 5.630, avg. samples / sec: 534.02
Iteration:   1960, Loss function: 5.494, Average Loss: 5.629, avg. samples / sec: 537.50
Iteration:   1980, Loss function: 5.646, Average Loss: 5.630, avg. samples / sec: 539.34
Iteration:   2000, Loss function: 5.526, Average Loss: 5.629, avg. samples / sec: 537.64
Iteration:   2020, Loss function: 5.701, Average Loss: 5.628, avg. samples / sec: 538.29
Iteration:   2040, Loss function: 5.571, Average Loss: 5.627, avg. samples / sec: 539.13
:::MLLOG {"namespace": "", "time_ms": 1639071602081, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071602082, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.467, Average Loss: 5.625, avg. samples / sec: 536.55
Iteration:   2080, Loss function: 5.150, Average Loss: 5.623, avg. samples / sec: 537.40
Iteration:   2100, Loss function: 5.442, Average Loss: 5.620, avg. samples / sec: 535.24
Iteration:   2120, Loss function: 5.225, Average Loss: 5.617, avg. samples / sec: 537.27
Iteration:   2140, Loss function: 5.323, Average Loss: 5.614, avg. samples / sec: 539.59
Iteration:   2160, Loss function: 5.179, Average Loss: 5.612, avg. samples / sec: 538.71
Iteration:   2180, Loss function: 5.380, Average Loss: 5.610, avg. samples / sec: 539.05
Iteration:   2200, Loss function: 5.541, Average Loss: 5.607, avg. samples / sec: 537.06
Iteration:   2220, Loss function: 5.613, Average Loss: 5.605, avg. samples / sec: 537.98
Iteration:   2240, Loss function: 5.708, Average Loss: 5.602, avg. samples / sec: 537.87
Iteration:   2260, Loss function: 5.438, Average Loss: 5.599, avg. samples / sec: 535.90
Iteration:   2280, Loss function: 5.365, Average Loss: 5.596, avg. samples / sec: 538.65
Iteration:   2300, Loss function: 5.175, Average Loss: 5.594, avg. samples / sec: 538.36
Iteration:   2320, Loss function: 5.378, Average Loss: 5.591, avg. samples / sec: 534.99
Iteration:   2340, Loss function: 5.410, Average Loss: 5.588, avg. samples / sec: 538.21
Iteration:   2360, Loss function: 5.305, Average Loss: 5.584, avg. samples / sec: 538.49
Iteration:   2380, Loss function: 5.438, Average Loss: 5.581, avg. samples / sec: 538.97
Iteration:   2400, Loss function: 5.526, Average Loss: 5.576, avg. samples / sec: 538.48
Iteration:   2420, Loss function: 5.569, Average Loss: 5.573, avg. samples / sec: 537.41
Iteration:   2440, Loss function: 5.339, Average Loss: 5.571, avg. samples / sec: 538.52
Iteration:   2460, Loss function: 5.588, Average Loss: 5.567, avg. samples / sec: 538.66
Iteration:   2480, Loss function: 5.232, Average Loss: 5.563, avg. samples / sec: 537.99
Iteration:   2500, Loss function: 5.486, Average Loss: 5.559, avg. samples / sec: 535.80
Iteration:   2520, Loss function: 5.455, Average Loss: 5.554, avg. samples / sec: 537.85
Iteration:   2540, Loss function: 5.427, Average Loss: 5.550, avg. samples / sec: 537.77
Iteration:   2560, Loss function: 5.451, Average Loss: 5.547, avg. samples / sec: 538.35
Iteration:   2580, Loss function: 5.315, Average Loss: 5.544, avg. samples / sec: 538.02
Iteration:   2600, Loss function: 5.410, Average Loss: 5.542, avg. samples / sec: 539.41
Iteration:   2620, Loss function: 5.566, Average Loss: 5.537, avg. samples / sec: 536.98
Iteration:   2640, Loss function: 5.219, Average Loss: 5.535, avg. samples / sec: 537.49
Iteration:   2660, Loss function: 5.178, Average Loss: 5.532, avg. samples / sec: 537.51
Iteration:   2680, Loss function: 5.161, Average Loss: 5.528, avg. samples / sec: 539.30
Iteration:   2700, Loss function: 5.323, Average Loss: 5.524, avg. samples / sec: 537.53
Iteration:   2720, Loss function: 5.379, Average Loss: 5.519, avg. samples / sec: 538.90
Iteration:   2740, Loss function: 4.970, Average Loss: 5.514, avg. samples / sec: 536.87
Iteration:   2760, Loss function: 4.990, Average Loss: 5.509, avg. samples / sec: 537.33
Iteration:   2780, Loss function: 5.426, Average Loss: 5.505, avg. samples / sec: 538.65
Iteration:   2800, Loss function: 5.268, Average Loss: 5.500, avg. samples / sec: 536.64
Iteration:   2820, Loss function: 5.328, Average Loss: 5.496, avg. samples / sec: 537.03
Iteration:   2840, Loss function: 5.148, Average Loss: 5.492, avg. samples / sec: 537.94
Iteration:   2860, Loss function: 4.950, Average Loss: 5.487, avg. samples / sec: 537.79
Iteration:   2880, Loss function: 5.314, Average Loss: 5.482, avg. samples / sec: 539.92
Iteration:   2900, Loss function: 5.062, Average Loss: 5.478, avg. samples / sec: 538.38
Iteration:   2920, Loss function: 5.119, Average Loss: 5.472, avg. samples / sec: 537.31
Iteration:   2940, Loss function: 4.939, Average Loss: 5.468, avg. samples / sec: 540.30
Iteration:   2960, Loss function: 5.574, Average Loss: 5.463, avg. samples / sec: 539.11
Iteration:   2980, Loss function: 5.238, Average Loss: 5.460, avg. samples / sec: 539.90
Iteration:   3000, Loss function: 5.292, Average Loss: 5.455, avg. samples / sec: 538.66
Iteration:   3020, Loss function: 5.139, Average Loss: 5.449, avg. samples / sec: 539.27
Iteration:   3040, Loss function: 5.215, Average Loss: 5.444, avg. samples / sec: 537.72
Iteration:   3060, Loss function: 4.983, Average Loss: 5.439, avg. samples / sec: 534.62
Iteration:   3080, Loss function: 5.061, Average Loss: 5.434, avg. samples / sec: 537.33
:::MLLOG {"namespace": "", "time_ms": 1639071819947, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071819948, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.223, Average Loss: 5.429, avg. samples / sec: 537.89
Iteration:   3120, Loss function: 5.108, Average Loss: 5.425, avg. samples / sec: 536.91
Iteration:   3140, Loss function: 5.263, Average Loss: 5.420, avg. samples / sec: 535.98
Iteration:   3160, Loss function: 5.540, Average Loss: 5.414, avg. samples / sec: 537.49
Iteration:   3180, Loss function: 5.032, Average Loss: 5.410, avg. samples / sec: 536.75
Iteration:   3200, Loss function: 5.330, Average Loss: 5.405, avg. samples / sec: 538.54
Iteration:   3220, Loss function: 5.169, Average Loss: 5.400, avg. samples / sec: 536.50
Iteration:   3240, Loss function: 5.134, Average Loss: 5.395, avg. samples / sec: 534.49
Iteration:   3260, Loss function: 5.086, Average Loss: 5.389, avg. samples / sec: 538.13
Iteration:   3280, Loss function: 4.705, Average Loss: 5.383, avg. samples / sec: 538.49
Iteration:   3300, Loss function: 4.879, Average Loss: 5.378, avg. samples / sec: 539.16
Iteration:   3320, Loss function: 5.038, Average Loss: 5.373, avg. samples / sec: 538.48
Iteration:   3340, Loss function: 5.197, Average Loss: 5.369, avg. samples / sec: 538.14
Iteration:   3360, Loss function: 5.210, Average Loss: 5.362, avg. samples / sec: 537.69
Iteration:   3380, Loss function: 5.190, Average Loss: 5.355, avg. samples / sec: 536.33
Iteration:   3400, Loss function: 4.840, Average Loss: 5.351, avg. samples / sec: 538.03
Iteration:   3420, Loss function: 5.163, Average Loss: 5.345, avg. samples / sec: 537.16
Iteration:   3440, Loss function: 4.841, Average Loss: 5.340, avg. samples / sec: 537.75
Iteration:   3460, Loss function: 5.166, Average Loss: 5.335, avg. samples / sec: 537.00
Iteration:   3480, Loss function: 5.099, Average Loss: 5.330, avg. samples / sec: 538.38
Iteration:   3500, Loss function: 5.293, Average Loss: 5.326, avg. samples / sec: 537.72
Iteration:   3520, Loss function: 5.039, Average Loss: 5.322, avg. samples / sec: 536.34
Iteration:   3540, Loss function: 5.108, Average Loss: 5.318, avg. samples / sec: 539.16
Iteration:   3560, Loss function: 4.867, Average Loss: 5.313, avg. samples / sec: 536.25
Iteration:   3580, Loss function: 5.271, Average Loss: 5.309, avg. samples / sec: 537.85
Iteration:   3600, Loss function: 5.236, Average Loss: 5.303, avg. samples / sec: 534.65
Iteration:   3620, Loss function: 4.812, Average Loss: 5.299, avg. samples / sec: 538.47
Iteration:   3640, Loss function: 4.811, Average Loss: 5.294, avg. samples / sec: 539.09
Iteration:   3660, Loss function: 4.933, Average Loss: 5.289, avg. samples / sec: 534.20
Iteration:   3680, Loss function: 5.025, Average Loss: 5.283, avg. samples / sec: 538.25
Iteration:   3700, Loss function: 4.939, Average Loss: 5.278, avg. samples / sec: 538.22
Iteration:   3720, Loss function: 5.080, Average Loss: 5.272, avg. samples / sec: 540.20
Iteration:   3740, Loss function: 5.094, Average Loss: 5.268, avg. samples / sec: 536.44
Iteration:   3760, Loss function: 5.000, Average Loss: 5.264, avg. samples / sec: 537.35
Iteration:   3780, Loss function: 5.107, Average Loss: 5.260, avg. samples / sec: 538.50
Iteration:   3800, Loss function: 4.999, Average Loss: 5.256, avg. samples / sec: 537.08
Iteration:   3820, Loss function: 5.120, Average Loss: 5.251, avg. samples / sec: 537.73
Iteration:   3840, Loss function: 4.834, Average Loss: 5.247, avg. samples / sec: 536.75
Iteration:   3860, Loss function: 4.903, Average Loss: 5.242, avg. samples / sec: 535.43
Iteration:   3880, Loss function: 5.121, Average Loss: 5.237, avg. samples / sec: 540.58
Iteration:   3900, Loss function: 5.055, Average Loss: 5.231, avg. samples / sec: 538.62
Iteration:   3920, Loss function: 5.152, Average Loss: 5.226, avg. samples / sec: 534.92
Iteration:   3940, Loss function: 5.035, Average Loss: 5.220, avg. samples / sec: 537.78
Iteration:   3960, Loss function: 4.822, Average Loss: 5.216, avg. samples / sec: 538.67
Iteration:   3980, Loss function: 4.879, Average Loss: 5.211, avg. samples / sec: 535.11
Iteration:   4000, Loss function: 5.227, Average Loss: 5.207, avg. samples / sec: 536.44
Iteration:   4020, Loss function: 5.052, Average Loss: 5.202, avg. samples / sec: 537.96
Iteration:   4040, Loss function: 5.027, Average Loss: 5.199, avg. samples / sec: 535.70
Iteration:   4060, Loss function: 5.069, Average Loss: 5.194, avg. samples / sec: 537.66
Iteration:   4080, Loss function: 4.891, Average Loss: 5.189, avg. samples / sec: 538.84
Iteration:   4100, Loss function: 5.050, Average Loss: 5.185, avg. samples / sec: 537.38
:::MLLOG {"namespace": "", "time_ms": 1639072038221, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072038222, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.205, Average Loss: 5.181, avg. samples / sec: 538.78
Iteration:   4140, Loss function: 4.893, Average Loss: 5.177, avg. samples / sec: 537.40
Iteration:   4160, Loss function: 4.931, Average Loss: 5.169, avg. samples / sec: 538.42
Iteration:   4180, Loss function: 4.873, Average Loss: 5.163, avg. samples / sec: 536.73
Iteration:   4200, Loss function: 4.678, Average Loss: 5.158, avg. samples / sec: 539.18
Iteration:   4220, Loss function: 4.867, Average Loss: 5.153, avg. samples / sec: 536.32
Iteration:   4240, Loss function: 5.001, Average Loss: 5.148, avg. samples / sec: 537.62
Iteration:   4260, Loss function: 5.033, Average Loss: 5.144, avg. samples / sec: 537.52
Iteration:   4280, Loss function: 4.914, Average Loss: 5.138, avg. samples / sec: 537.45
Iteration:   4300, Loss function: 4.761, Average Loss: 5.132, avg. samples / sec: 539.16
Iteration:   4320, Loss function: 4.781, Average Loss: 5.126, avg. samples / sec: 535.00
Iteration:   4340, Loss function: 4.744, Average Loss: 5.121, avg. samples / sec: 537.44
Iteration:   4360, Loss function: 4.914, Average Loss: 5.118, avg. samples / sec: 539.52
Iteration:   4380, Loss function: 5.045, Average Loss: 5.113, avg. samples / sec: 536.99
Iteration:   4400, Loss function: 4.905, Average Loss: 5.108, avg. samples / sec: 536.57
Iteration:   4420, Loss function: 5.061, Average Loss: 5.103, avg. samples / sec: 539.78
Iteration:   4440, Loss function: 4.892, Average Loss: 5.098, avg. samples / sec: 540.00
Iteration:   4460, Loss function: 5.030, Average Loss: 5.094, avg. samples / sec: 536.90
Iteration:   4480, Loss function: 5.063, Average Loss: 5.092, avg. samples / sec: 535.87
Iteration:   4500, Loss function: 4.910, Average Loss: 5.088, avg. samples / sec: 538.33
Iteration:   4520, Loss function: 4.582, Average Loss: 5.083, avg. samples / sec: 536.16
Iteration:   4540, Loss function: 5.014, Average Loss: 5.078, avg. samples / sec: 538.53
Iteration:   4560, Loss function: 4.647, Average Loss: 5.074, avg. samples / sec: 538.02
Iteration:   4580, Loss function: 4.681, Average Loss: 5.071, avg. samples / sec: 538.77
Iteration:   4600, Loss function: 4.815, Average Loss: 5.067, avg. samples / sec: 539.23
Iteration:   4620, Loss function: 4.882, Average Loss: 5.063, avg. samples / sec: 535.55
Iteration:   4640, Loss function: 4.627, Average Loss: 5.058, avg. samples / sec: 538.42
Iteration:   4660, Loss function: 4.743, Average Loss: 5.055, avg. samples / sec: 538.37
Iteration:   4680, Loss function: 5.147, Average Loss: 5.050, avg. samples / sec: 537.57
Iteration:   4700, Loss function: 4.742, Average Loss: 5.047, avg. samples / sec: 536.12
Iteration:   4720, Loss function: 4.637, Average Loss: 5.042, avg. samples / sec: 537.24
Iteration:   4740, Loss function: 4.641, Average Loss: 5.038, avg. samples / sec: 535.83
Iteration:   4760, Loss function: 4.684, Average Loss: 5.034, avg. samples / sec: 539.09
Iteration:   4780, Loss function: 4.854, Average Loss: 5.029, avg. samples / sec: 537.04
Iteration:   4800, Loss function: 4.922, Average Loss: 5.027, avg. samples / sec: 536.56
Iteration:   4820, Loss function: 4.875, Average Loss: 5.023, avg. samples / sec: 539.31
Iteration:   4840, Loss function: 5.224, Average Loss: 5.020, avg. samples / sec: 536.87
Iteration:   4860, Loss function: 4.678, Average Loss: 5.015, avg. samples / sec: 538.50
Iteration:   4880, Loss function: 5.084, Average Loss: 5.012, avg. samples / sec: 538.34
Iteration:   4900, Loss function: 4.532, Average Loss: 5.009, avg. samples / sec: 538.64
Iteration:   4920, Loss function: 4.740, Average Loss: 5.005, avg. samples / sec: 535.55
Iteration:   4940, Loss function: 4.906, Average Loss: 5.002, avg. samples / sec: 538.10
Iteration:   4960, Loss function: 4.773, Average Loss: 4.998, avg. samples / sec: 538.69
Iteration:   4980, Loss function: 4.648, Average Loss: 4.995, avg. samples / sec: 538.41
Iteration:   5000, Loss function: 4.786, Average Loss: 4.992, avg. samples / sec: 538.12
Iteration:   5020, Loss function: 5.019, Average Loss: 4.988, avg. samples / sec: 538.02
Iteration:   5040, Loss function: 4.697, Average Loss: 4.985, avg. samples / sec: 537.84
Iteration:   5060, Loss function: 4.671, Average Loss: 4.982, avg. samples / sec: 537.16
Iteration:   5080, Loss function: 4.528, Average Loss: 4.979, avg. samples / sec: 537.49
Iteration:   5100, Loss function: 4.764, Average Loss: 4.977, avg. samples / sec: 537.84
Iteration:   5120, Loss function: 4.563, Average Loss: 4.973, avg. samples / sec: 538.17
Iteration:   5140, Loss function: 4.961, Average Loss: 4.970, avg. samples / sec: 539.33
:::MLLOG {"namespace": "", "time_ms": 1639072256379, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.28 s
:::MLLOG {"namespace": "", "time_ms": 1639072286714, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072286753, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072286753, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.71s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10613
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21564
Iteration:   5160, Loss function: 5.015, Average Loss: 4.966, avg. samples / sec: 66.03
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09369
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19004
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13990
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20328
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10613 AP goal: 0.10000
Iteration:   5180, Loss function: 4.805, Average Loss: 4.961, avg. samples / sec: 537.61
:::MLLOG {"namespace": "", "time_ms": 1639072294508, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294508, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10613363427151536, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294509, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294723, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 17:51:35 UTC 2021: done waiting for 1 executions'
Thu Dec  9 17:51:35 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071115492, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071115596, "event_type": "POINT_IN_TIME", "key": "seed", "value": 3036739162, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 3036739162
:::MLLOG {"namespace": "", "time_ms": 1639071117227, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071117227, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071117231, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071117232, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071117232, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071163488, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071163488, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639071164737, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071164738, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.16s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071165011, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071165011, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071165012, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.632, Average Loss: 0.023, avg. samples / sec: 2.40
Iteration:     20, Loss function: 21.040, Average Loss: 0.455, avg. samples / sec: 519.05
Iteration:     40, Loss function: 20.691, Average Loss: 0.856, avg. samples / sec: 479.65
Iteration:     60, Loss function: 20.321, Average Loss: 1.245, avg. samples / sec: 536.95
Iteration:     80, Loss function: 19.364, Average Loss: 1.613, avg. samples / sec: 536.50
Iteration:    100, Loss function: 13.555, Average Loss: 1.909, avg. samples / sec: 534.52
Iteration:    120, Loss function: 10.490, Average Loss: 2.097, avg. samples / sec: 536.12
Iteration:    140, Loss function: 9.348, Average Loss: 2.247, avg. samples / sec: 536.44
Iteration:    160, Loss function: 9.140, Average Loss: 2.384, avg. samples / sec: 539.03
Iteration:    180, Loss function: 9.035, Average Loss: 2.513, avg. samples / sec: 536.13
Iteration:    200, Loss function: 8.480, Average Loss: 2.638, avg. samples / sec: 535.89
Iteration:    220, Loss function: 8.573, Average Loss: 2.760, avg. samples / sec: 539.25
Iteration:    240, Loss function: 9.032, Average Loss: 2.881, avg. samples / sec: 539.06
Iteration:    260, Loss function: 8.972, Average Loss: 2.999, avg. samples / sec: 533.20
Iteration:    280, Loss function: 8.393, Average Loss: 3.110, avg. samples / sec: 534.59
Iteration:    300, Loss function: 8.339, Average Loss: 3.213, avg. samples / sec: 538.35
Iteration:    320, Loss function: 8.217, Average Loss: 3.314, avg. samples / sec: 535.96
Iteration:    340, Loss function: 8.567, Average Loss: 3.413, avg. samples / sec: 537.17
Iteration:    360, Loss function: 8.008, Average Loss: 3.509, avg. samples / sec: 535.72
Iteration:    380, Loss function: 7.843, Average Loss: 3.598, avg. samples / sec: 536.86
Iteration:    400, Loss function: 7.921, Average Loss: 3.684, avg. samples / sec: 538.59
Iteration:    420, Loss function: 7.615, Average Loss: 3.768, avg. samples / sec: 539.36
Iteration:    440, Loss function: 7.888, Average Loss: 3.847, avg. samples / sec: 539.27
Iteration:    460, Loss function: 7.895, Average Loss: 3.926, avg. samples / sec: 539.56
Iteration:    480, Loss function: 7.459, Average Loss: 4.000, avg. samples / sec: 538.80
Iteration:    500, Loss function: 7.782, Average Loss: 4.070, avg. samples / sec: 536.86
Iteration:    520, Loss function: 7.615, Average Loss: 4.141, avg. samples / sec: 538.46
Iteration:    540, Loss function: 7.487, Average Loss: 4.207, avg. samples / sec: 536.33
Iteration:    560, Loss function: 7.212, Average Loss: 4.269, avg. samples / sec: 534.03
Iteration:    580, Loss function: 7.199, Average Loss: 4.331, avg. samples / sec: 535.20
Iteration:    600, Loss function: 7.348, Average Loss: 4.391, avg. samples / sec: 538.56
Iteration:    620, Loss function: 6.992, Average Loss: 4.447, avg. samples / sec: 536.37
Iteration:    640, Loss function: 6.796, Average Loss: 4.502, avg. samples / sec: 536.55
Iteration:    660, Loss function: 7.186, Average Loss: 4.554, avg. samples / sec: 537.00
Iteration:    680, Loss function: 7.320, Average Loss: 4.606, avg. samples / sec: 538.25
Iteration:    700, Loss function: 6.784, Average Loss: 4.655, avg. samples / sec: 537.88
Iteration:    720, Loss function: 7.022, Average Loss: 4.705, avg. samples / sec: 536.85
Iteration:    740, Loss function: 6.981, Average Loss: 4.751, avg. samples / sec: 537.69
Iteration:    760, Loss function: 7.194, Average Loss: 4.796, avg. samples / sec: 538.16
Iteration:    780, Loss function: 6.781, Average Loss: 4.838, avg. samples / sec: 535.60
Iteration:    800, Loss function: 7.236, Average Loss: 4.879, avg. samples / sec: 537.67
Iteration:    820, Loss function: 6.776, Average Loss: 4.918, avg. samples / sec: 536.85
Iteration:    840, Loss function: 6.821, Average Loss: 4.955, avg. samples / sec: 539.88
Iteration:    860, Loss function: 6.897, Average Loss: 4.990, avg. samples / sec: 538.57
Iteration:    880, Loss function: 6.780, Average Loss: 5.023, avg. samples / sec: 539.22
Iteration:    900, Loss function: 6.851, Average Loss: 5.055, avg. samples / sec: 534.51
Iteration:    920, Loss function: 6.681, Average Loss: 5.085, avg. samples / sec: 538.76
Iteration:    940, Loss function: 6.829, Average Loss: 5.115, avg. samples / sec: 539.15
Iteration:    960, Loss function: 6.520, Average Loss: 5.144, avg. samples / sec: 536.69
Iteration:    980, Loss function: 6.481, Average Loss: 5.171, avg. samples / sec: 537.01
Iteration:   1000, Loss function: 6.754, Average Loss: 5.198, avg. samples / sec: 535.78
Iteration:   1020, Loss function: 6.338, Average Loss: 5.224, avg. samples / sec: 537.24
:::MLLOG {"namespace": "", "time_ms": 1639071383928, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071383929, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.422, Average Loss: 5.246, avg. samples / sec: 538.30
Iteration:   1060, Loss function: 6.420, Average Loss: 5.269, avg. samples / sec: 536.73
Iteration:   1080, Loss function: 6.296, Average Loss: 5.291, avg. samples / sec: 538.21
Iteration:   1100, Loss function: 6.200, Average Loss: 5.312, avg. samples / sec: 536.34
Iteration:   1120, Loss function: 6.180, Average Loss: 5.332, avg. samples / sec: 538.27
Iteration:   1140, Loss function: 6.538, Average Loss: 5.351, avg. samples / sec: 537.42
Iteration:   1160, Loss function: 6.098, Average Loss: 5.370, avg. samples / sec: 535.22
Iteration:   1180, Loss function: 6.259, Average Loss: 5.389, avg. samples / sec: 539.45
Iteration:   1200, Loss function: 6.392, Average Loss: 5.406, avg. samples / sec: 538.03
Iteration:   1220, Loss function: 6.092, Average Loss: 5.421, avg. samples / sec: 536.87
Iteration:   1240, Loss function: 5.966, Average Loss: 5.434, avg. samples / sec: 538.37
Iteration:   1260, Loss function: 6.167, Average Loss: 5.447, avg. samples / sec: 535.08
Iteration:   1280, Loss function: 5.911, Average Loss: 5.460, avg. samples / sec: 538.21
Iteration:   1300, Loss function: 6.159, Average Loss: 5.473, avg. samples / sec: 538.96
Iteration:   1320, Loss function: 5.914, Average Loss: 5.485, avg. samples / sec: 539.34
Iteration:   1340, Loss function: 5.890, Average Loss: 5.496, avg. samples / sec: 536.01
Iteration:   1360, Loss function: 5.969, Average Loss: 5.507, avg. samples / sec: 537.87
Iteration:   1380, Loss function: 6.135, Average Loss: 5.517, avg. samples / sec: 537.85
Iteration:   1400, Loss function: 5.965, Average Loss: 5.526, avg. samples / sec: 537.64
Iteration:   1420, Loss function: 5.922, Average Loss: 5.534, avg. samples / sec: 538.74
Iteration:   1440, Loss function: 6.426, Average Loss: 5.543, avg. samples / sec: 538.99
Iteration:   1460, Loss function: 6.269, Average Loss: 5.551, avg. samples / sec: 537.44
Iteration:   1480, Loss function: 5.936, Average Loss: 5.560, avg. samples / sec: 536.88
Iteration:   1500, Loss function: 6.014, Average Loss: 5.568, avg. samples / sec: 538.35
Iteration:   1520, Loss function: 6.062, Average Loss: 5.574, avg. samples / sec: 538.73
Iteration:   1540, Loss function: 5.874, Average Loss: 5.580, avg. samples / sec: 539.88
Iteration:   1560, Loss function: 5.651, Average Loss: 5.584, avg. samples / sec: 538.30
Iteration:   1580, Loss function: 5.605, Average Loss: 5.590, avg. samples / sec: 538.65
Iteration:   1600, Loss function: 6.194, Average Loss: 5.597, avg. samples / sec: 535.49
Iteration:   1620, Loss function: 5.643, Average Loss: 5.601, avg. samples / sec: 537.50
Iteration:   1640, Loss function: 5.931, Average Loss: 5.605, avg. samples / sec: 538.17
Iteration:   1660, Loss function: 5.967, Average Loss: 5.609, avg. samples / sec: 537.57
Iteration:   1680, Loss function: 5.714, Average Loss: 5.613, avg. samples / sec: 536.73
Iteration:   1700, Loss function: 5.290, Average Loss: 5.616, avg. samples / sec: 538.44
Iteration:   1720, Loss function: 5.720, Average Loss: 5.618, avg. samples / sec: 539.13
Iteration:   1740, Loss function: 5.885, Average Loss: 5.621, avg. samples / sec: 537.43
Iteration:   1760, Loss function: 5.407, Average Loss: 5.622, avg. samples / sec: 536.46
Iteration:   1780, Loss function: 5.607, Average Loss: 5.624, avg. samples / sec: 537.94
Iteration:   1800, Loss function: 5.638, Average Loss: 5.626, avg. samples / sec: 537.45
Iteration:   1820, Loss function: 5.938, Average Loss: 5.628, avg. samples / sec: 539.09
Iteration:   1840, Loss function: 5.783, Average Loss: 5.630, avg. samples / sec: 536.90
Iteration:   1860, Loss function: 5.470, Average Loss: 5.629, avg. samples / sec: 538.39
Iteration:   1880, Loss function: 5.938, Average Loss: 5.630, avg. samples / sec: 535.93
Iteration:   1900, Loss function: 5.899, Average Loss: 5.631, avg. samples / sec: 538.36
Iteration:   1920, Loss function: 5.551, Average Loss: 5.631, avg. samples / sec: 538.75
Iteration:   1940, Loss function: 5.859, Average Loss: 5.630, avg. samples / sec: 534.02
Iteration:   1960, Loss function: 5.494, Average Loss: 5.629, avg. samples / sec: 537.50
Iteration:   1980, Loss function: 5.646, Average Loss: 5.630, avg. samples / sec: 539.34
Iteration:   2000, Loss function: 5.526, Average Loss: 5.629, avg. samples / sec: 537.64
Iteration:   2020, Loss function: 5.701, Average Loss: 5.628, avg. samples / sec: 538.29
Iteration:   2040, Loss function: 5.571, Average Loss: 5.627, avg. samples / sec: 539.13
:::MLLOG {"namespace": "", "time_ms": 1639071602081, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071602082, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.467, Average Loss: 5.625, avg. samples / sec: 536.55
Iteration:   2080, Loss function: 5.150, Average Loss: 5.623, avg. samples / sec: 537.40
Iteration:   2100, Loss function: 5.442, Average Loss: 5.620, avg. samples / sec: 535.24
Iteration:   2120, Loss function: 5.225, Average Loss: 5.617, avg. samples / sec: 537.27
Iteration:   2140, Loss function: 5.323, Average Loss: 5.614, avg. samples / sec: 539.59
Iteration:   2160, Loss function: 5.179, Average Loss: 5.612, avg. samples / sec: 538.71
Iteration:   2180, Loss function: 5.380, Average Loss: 5.610, avg. samples / sec: 539.05
Iteration:   2200, Loss function: 5.541, Average Loss: 5.607, avg. samples / sec: 537.06
Iteration:   2220, Loss function: 5.613, Average Loss: 5.605, avg. samples / sec: 537.98
Iteration:   2240, Loss function: 5.708, Average Loss: 5.602, avg. samples / sec: 537.87
Iteration:   2260, Loss function: 5.438, Average Loss: 5.599, avg. samples / sec: 535.90
Iteration:   2280, Loss function: 5.365, Average Loss: 5.596, avg. samples / sec: 538.65
Iteration:   2300, Loss function: 5.175, Average Loss: 5.594, avg. samples / sec: 538.36
Iteration:   2320, Loss function: 5.378, Average Loss: 5.591, avg. samples / sec: 534.99
Iteration:   2340, Loss function: 5.410, Average Loss: 5.588, avg. samples / sec: 538.21
Iteration:   2360, Loss function: 5.305, Average Loss: 5.584, avg. samples / sec: 538.49
Iteration:   2380, Loss function: 5.438, Average Loss: 5.581, avg. samples / sec: 538.97
Iteration:   2400, Loss function: 5.526, Average Loss: 5.576, avg. samples / sec: 538.48
Iteration:   2420, Loss function: 5.569, Average Loss: 5.573, avg. samples / sec: 537.41
Iteration:   2440, Loss function: 5.339, Average Loss: 5.571, avg. samples / sec: 538.52
Iteration:   2460, Loss function: 5.588, Average Loss: 5.567, avg. samples / sec: 538.66
Iteration:   2480, Loss function: 5.232, Average Loss: 5.563, avg. samples / sec: 537.99
Iteration:   2500, Loss function: 5.486, Average Loss: 5.559, avg. samples / sec: 535.80
Iteration:   2520, Loss function: 5.455, Average Loss: 5.554, avg. samples / sec: 537.85
Iteration:   2540, Loss function: 5.427, Average Loss: 5.550, avg. samples / sec: 537.77
Iteration:   2560, Loss function: 5.451, Average Loss: 5.547, avg. samples / sec: 538.35
Iteration:   2580, Loss function: 5.315, Average Loss: 5.544, avg. samples / sec: 538.02
Iteration:   2600, Loss function: 5.410, Average Loss: 5.542, avg. samples / sec: 539.41
Iteration:   2620, Loss function: 5.566, Average Loss: 5.537, avg. samples / sec: 536.98
Iteration:   2640, Loss function: 5.219, Average Loss: 5.535, avg. samples / sec: 537.49
Iteration:   2660, Loss function: 5.178, Average Loss: 5.532, avg. samples / sec: 537.51
Iteration:   2680, Loss function: 5.161, Average Loss: 5.528, avg. samples / sec: 539.30
Iteration:   2700, Loss function: 5.323, Average Loss: 5.524, avg. samples / sec: 537.53
Iteration:   2720, Loss function: 5.379, Average Loss: 5.519, avg. samples / sec: 538.90
Iteration:   2740, Loss function: 4.970, Average Loss: 5.514, avg. samples / sec: 536.87
Iteration:   2760, Loss function: 4.990, Average Loss: 5.509, avg. samples / sec: 537.33
Iteration:   2780, Loss function: 5.426, Average Loss: 5.505, avg. samples / sec: 538.65
Iteration:   2800, Loss function: 5.268, Average Loss: 5.500, avg. samples / sec: 536.64
Iteration:   2820, Loss function: 5.328, Average Loss: 5.496, avg. samples / sec: 537.03
Iteration:   2840, Loss function: 5.148, Average Loss: 5.492, avg. samples / sec: 537.94
Iteration:   2860, Loss function: 4.950, Average Loss: 5.487, avg. samples / sec: 537.79
Iteration:   2880, Loss function: 5.314, Average Loss: 5.482, avg. samples / sec: 539.92
Iteration:   2900, Loss function: 5.062, Average Loss: 5.478, avg. samples / sec: 538.38
Iteration:   2920, Loss function: 5.119, Average Loss: 5.472, avg. samples / sec: 537.31
Iteration:   2940, Loss function: 4.939, Average Loss: 5.468, avg. samples / sec: 540.30
Iteration:   2960, Loss function: 5.574, Average Loss: 5.463, avg. samples / sec: 539.11
Iteration:   2980, Loss function: 5.238, Average Loss: 5.460, avg. samples / sec: 539.90
Iteration:   3000, Loss function: 5.292, Average Loss: 5.455, avg. samples / sec: 538.66
Iteration:   3020, Loss function: 5.139, Average Loss: 5.449, avg. samples / sec: 539.27
Iteration:   3040, Loss function: 5.215, Average Loss: 5.444, avg. samples / sec: 537.72
Iteration:   3060, Loss function: 4.983, Average Loss: 5.439, avg. samples / sec: 534.62
Iteration:   3080, Loss function: 5.061, Average Loss: 5.434, avg. samples / sec: 537.33
:::MLLOG {"namespace": "", "time_ms": 1639071819947, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071819948, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.223, Average Loss: 5.429, avg. samples / sec: 537.89
Iteration:   3120, Loss function: 5.108, Average Loss: 5.425, avg. samples / sec: 536.91
Iteration:   3140, Loss function: 5.263, Average Loss: 5.420, avg. samples / sec: 535.98
Iteration:   3160, Loss function: 5.540, Average Loss: 5.414, avg. samples / sec: 537.49
Iteration:   3180, Loss function: 5.032, Average Loss: 5.410, avg. samples / sec: 536.75
Iteration:   3200, Loss function: 5.330, Average Loss: 5.405, avg. samples / sec: 538.54
Iteration:   3220, Loss function: 5.169, Average Loss: 5.400, avg. samples / sec: 536.50
Iteration:   3240, Loss function: 5.134, Average Loss: 5.395, avg. samples / sec: 534.49
Iteration:   3260, Loss function: 5.086, Average Loss: 5.389, avg. samples / sec: 538.13
Iteration:   3280, Loss function: 4.705, Average Loss: 5.383, avg. samples / sec: 538.49
Iteration:   3300, Loss function: 4.879, Average Loss: 5.378, avg. samples / sec: 539.16
Iteration:   3320, Loss function: 5.038, Average Loss: 5.373, avg. samples / sec: 538.48
Iteration:   3340, Loss function: 5.197, Average Loss: 5.369, avg. samples / sec: 538.14
Iteration:   3360, Loss function: 5.210, Average Loss: 5.362, avg. samples / sec: 537.69
Iteration:   3380, Loss function: 5.190, Average Loss: 5.355, avg. samples / sec: 536.33
Iteration:   3400, Loss function: 4.840, Average Loss: 5.351, avg. samples / sec: 538.03
Iteration:   3420, Loss function: 5.163, Average Loss: 5.345, avg. samples / sec: 537.16
Iteration:   3440, Loss function: 4.841, Average Loss: 5.340, avg. samples / sec: 537.75
Iteration:   3460, Loss function: 5.166, Average Loss: 5.335, avg. samples / sec: 537.00
Iteration:   3480, Loss function: 5.099, Average Loss: 5.330, avg. samples / sec: 538.38
Iteration:   3500, Loss function: 5.293, Average Loss: 5.326, avg. samples / sec: 537.72
Iteration:   3520, Loss function: 5.039, Average Loss: 5.322, avg. samples / sec: 536.34
Iteration:   3540, Loss function: 5.108, Average Loss: 5.318, avg. samples / sec: 539.16
Iteration:   3560, Loss function: 4.867, Average Loss: 5.313, avg. samples / sec: 536.25
Iteration:   3580, Loss function: 5.271, Average Loss: 5.309, avg. samples / sec: 537.85
Iteration:   3600, Loss function: 5.236, Average Loss: 5.303, avg. samples / sec: 534.65
Iteration:   3620, Loss function: 4.812, Average Loss: 5.299, avg. samples / sec: 538.47
Iteration:   3640, Loss function: 4.811, Average Loss: 5.294, avg. samples / sec: 539.09
Iteration:   3660, Loss function: 4.933, Average Loss: 5.289, avg. samples / sec: 534.20
Iteration:   3680, Loss function: 5.025, Average Loss: 5.283, avg. samples / sec: 538.25
Iteration:   3700, Loss function: 4.939, Average Loss: 5.278, avg. samples / sec: 538.22
Iteration:   3720, Loss function: 5.080, Average Loss: 5.272, avg. samples / sec: 540.20
Iteration:   3740, Loss function: 5.094, Average Loss: 5.268, avg. samples / sec: 536.44
Iteration:   3760, Loss function: 5.000, Average Loss: 5.264, avg. samples / sec: 537.35
Iteration:   3780, Loss function: 5.107, Average Loss: 5.260, avg. samples / sec: 538.50
Iteration:   3800, Loss function: 4.999, Average Loss: 5.256, avg. samples / sec: 537.08
Iteration:   3820, Loss function: 5.120, Average Loss: 5.251, avg. samples / sec: 537.73
Iteration:   3840, Loss function: 4.834, Average Loss: 5.247, avg. samples / sec: 536.75
Iteration:   3860, Loss function: 4.903, Average Loss: 5.242, avg. samples / sec: 535.43
Iteration:   3880, Loss function: 5.121, Average Loss: 5.237, avg. samples / sec: 540.58
Iteration:   3900, Loss function: 5.055, Average Loss: 5.231, avg. samples / sec: 538.62
Iteration:   3920, Loss function: 5.152, Average Loss: 5.226, avg. samples / sec: 534.92
Iteration:   3940, Loss function: 5.035, Average Loss: 5.220, avg. samples / sec: 537.78
Iteration:   3960, Loss function: 4.822, Average Loss: 5.216, avg. samples / sec: 538.67
Iteration:   3980, Loss function: 4.879, Average Loss: 5.211, avg. samples / sec: 535.11
Iteration:   4000, Loss function: 5.227, Average Loss: 5.207, avg. samples / sec: 536.44
Iteration:   4020, Loss function: 5.052, Average Loss: 5.202, avg. samples / sec: 537.96
Iteration:   4040, Loss function: 5.027, Average Loss: 5.199, avg. samples / sec: 535.70
Iteration:   4060, Loss function: 5.069, Average Loss: 5.194, avg. samples / sec: 537.66
Iteration:   4080, Loss function: 4.891, Average Loss: 5.189, avg. samples / sec: 538.84
Iteration:   4100, Loss function: 5.050, Average Loss: 5.185, avg. samples / sec: 537.38
:::MLLOG {"namespace": "", "time_ms": 1639072038221, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072038222, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.205, Average Loss: 5.181, avg. samples / sec: 538.78
Iteration:   4140, Loss function: 4.893, Average Loss: 5.177, avg. samples / sec: 537.40
Iteration:   4160, Loss function: 4.931, Average Loss: 5.169, avg. samples / sec: 538.42
Iteration:   4180, Loss function: 4.873, Average Loss: 5.163, avg. samples / sec: 536.73
Iteration:   4200, Loss function: 4.678, Average Loss: 5.158, avg. samples / sec: 539.18
Iteration:   4220, Loss function: 4.867, Average Loss: 5.153, avg. samples / sec: 536.32
Iteration:   4240, Loss function: 5.001, Average Loss: 5.148, avg. samples / sec: 537.62
Iteration:   4260, Loss function: 5.033, Average Loss: 5.144, avg. samples / sec: 537.52
Iteration:   4280, Loss function: 4.914, Average Loss: 5.138, avg. samples / sec: 537.45
Iteration:   4300, Loss function: 4.761, Average Loss: 5.132, avg. samples / sec: 539.16
Iteration:   4320, Loss function: 4.781, Average Loss: 5.126, avg. samples / sec: 535.00
Iteration:   4340, Loss function: 4.744, Average Loss: 5.121, avg. samples / sec: 537.44
Iteration:   4360, Loss function: 4.914, Average Loss: 5.118, avg. samples / sec: 539.52
Iteration:   4380, Loss function: 5.045, Average Loss: 5.113, avg. samples / sec: 536.99
Iteration:   4400, Loss function: 4.905, Average Loss: 5.108, avg. samples / sec: 536.57
Iteration:   4420, Loss function: 5.061, Average Loss: 5.103, avg. samples / sec: 539.78
Iteration:   4440, Loss function: 4.892, Average Loss: 5.098, avg. samples / sec: 540.00
Iteration:   4460, Loss function: 5.030, Average Loss: 5.094, avg. samples / sec: 536.90
Iteration:   4480, Loss function: 5.063, Average Loss: 5.092, avg. samples / sec: 535.87
Iteration:   4500, Loss function: 4.910, Average Loss: 5.088, avg. samples / sec: 538.33
Iteration:   4520, Loss function: 4.582, Average Loss: 5.083, avg. samples / sec: 536.16
Iteration:   4540, Loss function: 5.014, Average Loss: 5.078, avg. samples / sec: 538.53
Iteration:   4560, Loss function: 4.647, Average Loss: 5.074, avg. samples / sec: 538.02
Iteration:   4580, Loss function: 4.681, Average Loss: 5.071, avg. samples / sec: 538.77
Iteration:   4600, Loss function: 4.815, Average Loss: 5.067, avg. samples / sec: 539.23
Iteration:   4620, Loss function: 4.882, Average Loss: 5.063, avg. samples / sec: 535.55
Iteration:   4640, Loss function: 4.627, Average Loss: 5.058, avg. samples / sec: 538.42
Iteration:   4660, Loss function: 4.743, Average Loss: 5.055, avg. samples / sec: 538.37
Iteration:   4680, Loss function: 5.147, Average Loss: 5.050, avg. samples / sec: 537.57
Iteration:   4700, Loss function: 4.742, Average Loss: 5.047, avg. samples / sec: 536.12
Iteration:   4720, Loss function: 4.637, Average Loss: 5.042, avg. samples / sec: 537.24
Iteration:   4740, Loss function: 4.641, Average Loss: 5.038, avg. samples / sec: 535.83
Iteration:   4760, Loss function: 4.684, Average Loss: 5.034, avg. samples / sec: 539.09
Iteration:   4780, Loss function: 4.854, Average Loss: 5.029, avg. samples / sec: 537.04
Iteration:   4800, Loss function: 4.922, Average Loss: 5.027, avg. samples / sec: 536.56
Iteration:   4820, Loss function: 4.875, Average Loss: 5.023, avg. samples / sec: 539.31
Iteration:   4840, Loss function: 5.224, Average Loss: 5.020, avg. samples / sec: 536.87
Iteration:   4860, Loss function: 4.678, Average Loss: 5.015, avg. samples / sec: 538.50
Iteration:   4880, Loss function: 5.084, Average Loss: 5.012, avg. samples / sec: 538.34
Iteration:   4900, Loss function: 4.532, Average Loss: 5.009, avg. samples / sec: 538.64
Iteration:   4920, Loss function: 4.740, Average Loss: 5.005, avg. samples / sec: 535.55
Iteration:   4940, Loss function: 4.906, Average Loss: 5.002, avg. samples / sec: 538.10
Iteration:   4960, Loss function: 4.773, Average Loss: 4.998, avg. samples / sec: 538.69
Iteration:   4980, Loss function: 4.648, Average Loss: 4.995, avg. samples / sec: 538.41
Iteration:   5000, Loss function: 4.786, Average Loss: 4.992, avg. samples / sec: 538.12
Iteration:   5020, Loss function: 5.019, Average Loss: 4.988, avg. samples / sec: 538.02
Iteration:   5040, Loss function: 4.697, Average Loss: 4.985, avg. samples / sec: 537.84
Iteration:   5060, Loss function: 4.671, Average Loss: 4.982, avg. samples / sec: 537.16
Iteration:   5080, Loss function: 4.528, Average Loss: 4.979, avg. samples / sec: 537.49
Iteration:   5100, Loss function: 4.764, Average Loss: 4.977, avg. samples / sec: 537.84
Iteration:   5120, Loss function: 4.563, Average Loss: 4.973, avg. samples / sec: 538.17
Iteration:   5140, Loss function: 4.961, Average Loss: 4.970, avg. samples / sec: 539.33
:::MLLOG {"namespace": "", "time_ms": 1639072256379, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.28 s
:::MLLOG {"namespace": "", "time_ms": 1639072286714, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072286753, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072286753, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.71s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.71s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10613
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21564
Iteration:   5160, Loss function: 5.015, Average Loss: 4.966, avg. samples / sec: 66.03
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09369
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19004
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13990
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20328
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10613 AP goal: 0.10000
Iteration:   5180, Loss function: 4.805, Average Loss: 4.961, avg. samples / sec: 537.61
:::MLLOG {"namespace": "", "time_ms": 1639072294508, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294508, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.10613363427151536, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294509, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072294723, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639072295
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 05:51:35 PM'
START TIMING RUN WAS 2021-12-09 05:31:48 PM
ENDING TIMING RUN AT 2021-12-09 05:51:35 PM
+ echo 'START TIMING RUN WAS 2021-12-09 05:31:48 PM'
+ echo 'ENDING TIMING RUN AT 2021-12-09 05:51:35 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-55b69871-247e-9b99-a60a-7daca59a4108)
  MIG 3g.20gb     Device  0: (UUID: MIG-4c7db5d8-f005-5927-803e-9ee984a56e15)
+ result=1187
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1187,nvidia,2021-12-09 05:31:48 PM'
RESULT,SINGLE_STAGE_DETECTOR,,1187,nvidia,2021-12-09 05:31:48 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
