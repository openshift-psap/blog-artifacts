+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-dqcx5.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-dqcx5.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-dqcx5.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-7af93043-695c-54c5-90f5-b698832ab413
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
Found 1 MIG instances: MIG-7af93043-695c-54c5-90f5-b698832ab413
+ echo 'Found 1 MIG instances: MIG-7af93043-695c-54c5-90f5-b698832ab413'
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639071108
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 05:31:48 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 05:31:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
STARTING TIMING RUN AT 2021-12-09 05:31:48 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_12-30-31 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\2\-\3\0\-\3\1 ]]
+ set +x
Thu Dec  9 17:31:48 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd-mig-3g-20gb--1-dqcx5 to the sync file ...
run-ssd-mig-3g-20gb--1-dqcx5 Found 3 Pods, waiting to have 8 ...
     1	run-ssd-mig-2g-10gb--1-hds46
     2	run-ssd-mig-3g-20gb--1-pvzvf
     3	run-ssd-mig-3g-20gb--1-dqcx5
Thu Dec  9 17:31:53 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
+ echo 'Running on the MIG GPU'
Running on the MIG GPU
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071115870, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071115979, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2213797239, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2213797239
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639071117626, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071117627, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071117630, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071163804, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071163804, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639071165052, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071165053, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071165297, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071165298, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071165299, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.487, Average Loss: 0.022, avg. samples / sec: 2.41
Iteration:     20, Loss function: 21.102, Average Loss: 0.453, avg. samples / sec: 464.76
Iteration:     40, Loss function: 20.625, Average Loss: 0.855, avg. samples / sec: 533.84
Iteration:     60, Loss function: 20.388, Average Loss: 1.246, avg. samples / sec: 534.32
Iteration:     80, Loss function: 20.284, Average Loss: 1.622, avg. samples / sec: 534.45
Iteration:    100, Loss function: 17.355, Average Loss: 1.968, avg. samples / sec: 536.68
Iteration:    120, Loss function: 11.817, Average Loss: 2.202, avg. samples / sec: 537.19
Iteration:    140, Loss function: 9.700, Average Loss: 2.362, avg. samples / sec: 533.99
Iteration:    160, Loss function: 9.106, Average Loss: 2.502, avg. samples / sec: 536.31
Iteration:    180, Loss function: 8.887, Average Loss: 2.630, avg. samples / sec: 535.89
Iteration:    200, Loss function: 8.573, Average Loss: 2.753, avg. samples / sec: 538.08
Iteration:    220, Loss function: 8.611, Average Loss: 2.872, avg. samples / sec: 536.74
Iteration:    240, Loss function: 8.903, Average Loss: 2.990, avg. samples / sec: 537.20
Iteration:    260, Loss function: 8.772, Average Loss: 3.105, avg. samples / sec: 536.26
Iteration:    280, Loss function: 8.575, Average Loss: 3.215, avg. samples / sec: 535.81
Iteration:    300, Loss function: 8.374, Average Loss: 3.318, avg. samples / sec: 536.18
Iteration:    320, Loss function: 8.400, Average Loss: 3.417, avg. samples / sec: 495.74
Iteration:    340, Loss function: 8.261, Average Loss: 3.513, avg. samples / sec: 536.47
Iteration:    360, Loss function: 8.067, Average Loss: 3.605, avg. samples / sec: 536.85
Iteration:    380, Loss function: 7.879, Average Loss: 3.693, avg. samples / sec: 537.27
Iteration:    400, Loss function: 8.107, Average Loss: 3.779, avg. samples / sec: 536.57
Iteration:    420, Loss function: 7.500, Average Loss: 3.861, avg. samples / sec: 537.38
Iteration:    440, Loss function: 7.654, Average Loss: 3.939, avg. samples / sec: 539.65
Iteration:    460, Loss function: 7.709, Average Loss: 4.014, avg. samples / sec: 540.02
Iteration:    480, Loss function: 7.432, Average Loss: 4.085, avg. samples / sec: 539.75
Iteration:    500, Loss function: 7.664, Average Loss: 4.155, avg. samples / sec: 535.83
Iteration:    520, Loss function: 7.519, Average Loss: 4.224, avg. samples / sec: 539.09
Iteration:    540, Loss function: 7.593, Average Loss: 4.289, avg. samples / sec: 538.16
Iteration:    560, Loss function: 7.318, Average Loss: 4.351, avg. samples / sec: 538.21
Iteration:    580, Loss function: 7.227, Average Loss: 4.411, avg. samples / sec: 538.54
Iteration:    600, Loss function: 7.249, Average Loss: 4.468, avg. samples / sec: 538.57
Iteration:    620, Loss function: 6.948, Average Loss: 4.523, avg. samples / sec: 513.86
Iteration:    640, Loss function: 6.968, Average Loss: 4.577, avg. samples / sec: 537.88
Iteration:    660, Loss function: 7.242, Average Loss: 4.631, avg. samples / sec: 536.00
Iteration:    680, Loss function: 7.319, Average Loss: 4.682, avg. samples / sec: 539.18
Iteration:    700, Loss function: 6.783, Average Loss: 4.729, avg. samples / sec: 536.88
Iteration:    720, Loss function: 6.979, Average Loss: 4.777, avg. samples / sec: 537.40
Iteration:    740, Loss function: 7.032, Average Loss: 4.821, avg. samples / sec: 537.35
Iteration:    760, Loss function: 7.149, Average Loss: 4.865, avg. samples / sec: 535.62
Iteration:    780, Loss function: 6.706, Average Loss: 4.907, avg. samples / sec: 537.30
Iteration:    800, Loss function: 7.162, Average Loss: 4.946, avg. samples / sec: 536.69
Iteration:    820, Loss function: 6.794, Average Loss: 4.983, avg. samples / sec: 536.93
Iteration:    840, Loss function: 6.762, Average Loss: 5.020, avg. samples / sec: 536.12
Iteration:    860, Loss function: 6.739, Average Loss: 5.053, avg. samples / sec: 537.68
Iteration:    880, Loss function: 6.675, Average Loss: 5.085, avg. samples / sec: 541.06
Iteration:    900, Loss function: 6.916, Average Loss: 5.115, avg. samples / sec: 539.17
Iteration:    920, Loss function: 6.633, Average Loss: 5.144, avg. samples / sec: 537.59
Iteration:    940, Loss function: 6.815, Average Loss: 5.172, avg. samples / sec: 539.11
Iteration:    960, Loss function: 6.338, Average Loss: 5.200, avg. samples / sec: 537.98
Iteration:    980, Loss function: 6.384, Average Loss: 5.226, avg. samples / sec: 535.99
Iteration:   1000, Loss function: 6.670, Average Loss: 5.252, avg. samples / sec: 535.96
Iteration:   1020, Loss function: 6.348, Average Loss: 5.275, avg. samples / sec: 537.98
:::MLLOG {"namespace": "", "time_ms": 1639071384766, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071384767, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.531, Average Loss: 5.298, avg. samples / sec: 535.52
Iteration:   1060, Loss function: 6.308, Average Loss: 5.320, avg. samples / sec: 538.09
Iteration:   1080, Loss function: 6.243, Average Loss: 5.341, avg. samples / sec: 536.65
Iteration:   1100, Loss function: 6.159, Average Loss: 5.360, avg. samples / sec: 537.63
Iteration:   1120, Loss function: 6.296, Average Loss: 5.379, avg. samples / sec: 537.41
Iteration:   1140, Loss function: 6.497, Average Loss: 5.397, avg. samples / sec: 537.79
Iteration:   1160, Loss function: 6.206, Average Loss: 5.413, avg. samples / sec: 537.71
Iteration:   1180, Loss function: 6.342, Average Loss: 5.429, avg. samples / sec: 537.30
Iteration:   1200, Loss function: 6.107, Average Loss: 5.444, avg. samples / sec: 536.66
Iteration:   1220, Loss function: 6.065, Average Loss: 5.458, avg. samples / sec: 536.04
Iteration:   1240, Loss function: 6.000, Average Loss: 5.470, avg. samples / sec: 537.03
Iteration:   1260, Loss function: 5.975, Average Loss: 5.481, avg. samples / sec: 538.89
Iteration:   1280, Loss function: 5.841, Average Loss: 5.492, avg. samples / sec: 538.71
Iteration:   1300, Loss function: 6.025, Average Loss: 5.505, avg. samples / sec: 537.93
Iteration:   1320, Loss function: 5.925, Average Loss: 5.516, avg. samples / sec: 537.39
Iteration:   1340, Loss function: 5.769, Average Loss: 5.525, avg. samples / sec: 537.53
Iteration:   1360, Loss function: 6.039, Average Loss: 5.535, avg. samples / sec: 537.98
Iteration:   1380, Loss function: 6.193, Average Loss: 5.545, avg. samples / sec: 538.02
Iteration:   1400, Loss function: 6.082, Average Loss: 5.553, avg. samples / sec: 536.68
Iteration:   1420, Loss function: 5.816, Average Loss: 5.560, avg. samples / sec: 536.70
Iteration:   1440, Loss function: 6.390, Average Loss: 5.568, avg. samples / sec: 538.15
Iteration:   1460, Loss function: 6.123, Average Loss: 5.576, avg. samples / sec: 538.15
Iteration:   1480, Loss function: 5.945, Average Loss: 5.584, avg. samples / sec: 539.15
Iteration:   1500, Loss function: 5.871, Average Loss: 5.591, avg. samples / sec: 537.27
Iteration:   1520, Loss function: 6.029, Average Loss: 5.597, avg. samples / sec: 538.09
Iteration:   1540, Loss function: 6.019, Average Loss: 5.601, avg. samples / sec: 538.89
Iteration:   1560, Loss function: 5.691, Average Loss: 5.606, avg. samples / sec: 539.66
Iteration:   1580, Loss function: 5.711, Average Loss: 5.610, avg. samples / sec: 539.62
Iteration:   1600, Loss function: 6.066, Average Loss: 5.616, avg. samples / sec: 536.46
Iteration:   1620, Loss function: 5.681, Average Loss: 5.620, avg. samples / sec: 537.11
Iteration:   1640, Loss function: 5.861, Average Loss: 5.623, avg. samples / sec: 537.76
Iteration:   1660, Loss function: 5.917, Average Loss: 5.626, avg. samples / sec: 537.56
Iteration:   1680, Loss function: 5.712, Average Loss: 5.628, avg. samples / sec: 537.26
Iteration:   1700, Loss function: 5.363, Average Loss: 5.632, avg. samples / sec: 537.55
Iteration:   1720, Loss function: 5.815, Average Loss: 5.634, avg. samples / sec: 538.07
Iteration:   1740, Loss function: 5.859, Average Loss: 5.636, avg. samples / sec: 538.94
Iteration:   1760, Loss function: 5.459, Average Loss: 5.638, avg. samples / sec: 539.04
Iteration:   1780, Loss function: 5.691, Average Loss: 5.638, avg. samples / sec: 535.83
Iteration:   1800, Loss function: 5.485, Average Loss: 5.640, avg. samples / sec: 537.74
Iteration:   1820, Loss function: 5.939, Average Loss: 5.641, avg. samples / sec: 539.35
Iteration:   1840, Loss function: 6.075, Average Loss: 5.643, avg. samples / sec: 539.81
Iteration:   1860, Loss function: 5.648, Average Loss: 5.642, avg. samples / sec: 537.58
Iteration:   1880, Loss function: 5.832, Average Loss: 5.643, avg. samples / sec: 537.38
Iteration:   1900, Loss function: 5.827, Average Loss: 5.643, avg. samples / sec: 536.72
Iteration:   1920, Loss function: 5.552, Average Loss: 5.643, avg. samples / sec: 535.29
Iteration:   1940, Loss function: 5.977, Average Loss: 5.643, avg. samples / sec: 535.64
Iteration:   1960, Loss function: 5.662, Average Loss: 5.641, avg. samples / sec: 537.62
Iteration:   1980, Loss function: 5.779, Average Loss: 5.640, avg. samples / sec: 539.42
Iteration:   2000, Loss function: 5.590, Average Loss: 5.640, avg. samples / sec: 536.55
Iteration:   2020, Loss function: 5.668, Average Loss: 5.639, avg. samples / sec: 538.18
Iteration:   2040, Loss function: 5.706, Average Loss: 5.639, avg. samples / sec: 538.99
:::MLLOG {"namespace": "", "time_ms": 1639071602929, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071602930, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.665, Average Loss: 5.637, avg. samples / sec: 538.39
Iteration:   2080, Loss function: 5.142, Average Loss: 5.634, avg. samples / sec: 537.50
Iteration:   2100, Loss function: 5.463, Average Loss: 5.631, avg. samples / sec: 539.31
Iteration:   2120, Loss function: 5.403, Average Loss: 5.629, avg. samples / sec: 539.52
Iteration:   2140, Loss function: 5.364, Average Loss: 5.625, avg. samples / sec: 537.87
Iteration:   2160, Loss function: 5.511, Average Loss: 5.623, avg. samples / sec: 537.85
Iteration:   2180, Loss function: 5.522, Average Loss: 5.621, avg. samples / sec: 535.36
Iteration:   2200, Loss function: 5.521, Average Loss: 5.617, avg. samples / sec: 536.68
Iteration:   2220, Loss function: 5.559, Average Loss: 5.614, avg. samples / sec: 537.53
Iteration:   2240, Loss function: 5.484, Average Loss: 5.611, avg. samples / sec: 538.89
Iteration:   2260, Loss function: 5.419, Average Loss: 5.607, avg. samples / sec: 538.53
Iteration:   2280, Loss function: 5.322, Average Loss: 5.604, avg. samples / sec: 536.89
Iteration:   2300, Loss function: 5.137, Average Loss: 5.599, avg. samples / sec: 536.73
Iteration:   2320, Loss function: 5.343, Average Loss: 5.596, avg. samples / sec: 538.61
Iteration:   2340, Loss function: 5.521, Average Loss: 5.594, avg. samples / sec: 539.38
Iteration:   2360, Loss function: 5.299, Average Loss: 5.590, avg. samples / sec: 536.27
Iteration:   2380, Loss function: 5.385, Average Loss: 5.586, avg. samples / sec: 537.81
Iteration:   2400, Loss function: 5.701, Average Loss: 5.583, avg. samples / sec: 538.37
Iteration:   2420, Loss function: 5.474, Average Loss: 5.578, avg. samples / sec: 538.03
Iteration:   2440, Loss function: 5.397, Average Loss: 5.575, avg. samples / sec: 537.29
Iteration:   2460, Loss function: 5.122, Average Loss: 5.571, avg. samples / sec: 537.28
Iteration:   2480, Loss function: 5.345, Average Loss: 5.568, avg. samples / sec: 538.59
Iteration:   2500, Loss function: 5.413, Average Loss: 5.564, avg. samples / sec: 536.40
Iteration:   2520, Loss function: 5.225, Average Loss: 5.559, avg. samples / sec: 535.47
Iteration:   2540, Loss function: 5.491, Average Loss: 5.556, avg. samples / sec: 539.06
Iteration:   2560, Loss function: 5.315, Average Loss: 5.553, avg. samples / sec: 538.39
Iteration:   2580, Loss function: 5.271, Average Loss: 5.549, avg. samples / sec: 536.78
Iteration:   2600, Loss function: 5.454, Average Loss: 5.547, avg. samples / sec: 537.85
Iteration:   2620, Loss function: 5.425, Average Loss: 5.542, avg. samples / sec: 538.07
Iteration:   2640, Loss function: 5.149, Average Loss: 5.538, avg. samples / sec: 538.66
Iteration:   2660, Loss function: 5.001, Average Loss: 5.534, avg. samples / sec: 536.93
Iteration:   2680, Loss function: 5.224, Average Loss: 5.531, avg. samples / sec: 538.79
Iteration:   2700, Loss function: 5.139, Average Loss: 5.525, avg. samples / sec: 538.58
Iteration:   2720, Loss function: 5.332, Average Loss: 5.520, avg. samples / sec: 538.24
Iteration:   2740, Loss function: 4.976, Average Loss: 5.515, avg. samples / sec: 537.27
Iteration:   2760, Loss function: 4.976, Average Loss: 5.510, avg. samples / sec: 536.87
Iteration:   2780, Loss function: 5.477, Average Loss: 5.507, avg. samples / sec: 534.93
Iteration:   2800, Loss function: 5.327, Average Loss: 5.502, avg. samples / sec: 537.90
Iteration:   2820, Loss function: 5.388, Average Loss: 5.498, avg. samples / sec: 535.25
Iteration:   2840, Loss function: 5.135, Average Loss: 5.494, avg. samples / sec: 537.02
Iteration:   2860, Loss function: 5.151, Average Loss: 5.488, avg. samples / sec: 537.69
Iteration:   2880, Loss function: 5.095, Average Loss: 5.483, avg. samples / sec: 537.28
Iteration:   2900, Loss function: 4.856, Average Loss: 5.478, avg. samples / sec: 538.23
Iteration:   2920, Loss function: 5.233, Average Loss: 5.472, avg. samples / sec: 538.32
Iteration:   2940, Loss function: 4.940, Average Loss: 5.468, avg. samples / sec: 537.31
Iteration:   2960, Loss function: 5.525, Average Loss: 5.463, avg. samples / sec: 538.56
Iteration:   2980, Loss function: 5.266, Average Loss: 5.459, avg. samples / sec: 539.38
Iteration:   3000, Loss function: 5.159, Average Loss: 5.453, avg. samples / sec: 538.68
Iteration:   3020, Loss function: 5.201, Average Loss: 5.446, avg. samples / sec: 539.10
Iteration:   3040, Loss function: 5.275, Average Loss: 5.441, avg. samples / sec: 538.97
Iteration:   3060, Loss function: 5.107, Average Loss: 5.435, avg. samples / sec: 539.63
Iteration:   3080, Loss function: 4.968, Average Loss: 5.429, avg. samples / sec: 538.48
:::MLLOG {"namespace": "", "time_ms": 1639071820840, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071820841, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.179, Average Loss: 5.424, avg. samples / sec: 536.44
Iteration:   3120, Loss function: 4.910, Average Loss: 5.418, avg. samples / sec: 537.18
Iteration:   3140, Loss function: 5.002, Average Loss: 5.412, avg. samples / sec: 539.14
Iteration:   3160, Loss function: 5.455, Average Loss: 5.408, avg. samples / sec: 539.54
Iteration:   3180, Loss function: 5.229, Average Loss: 5.403, avg. samples / sec: 537.44
Iteration:   3200, Loss function: 5.201, Average Loss: 5.397, avg. samples / sec: 538.81
Iteration:   3220, Loss function: 5.153, Average Loss: 5.392, avg. samples / sec: 537.18
Iteration:   3240, Loss function: 5.168, Average Loss: 5.385, avg. samples / sec: 536.94
Iteration:   3260, Loss function: 5.049, Average Loss: 5.380, avg. samples / sec: 538.73
Iteration:   3280, Loss function: 4.747, Average Loss: 5.374, avg. samples / sec: 538.62
Iteration:   3300, Loss function: 4.861, Average Loss: 5.368, avg. samples / sec: 538.56
Iteration:   3320, Loss function: 4.891, Average Loss: 5.363, avg. samples / sec: 538.36
Iteration:   3340, Loss function: 5.249, Average Loss: 5.358, avg. samples / sec: 538.00
Iteration:   3360, Loss function: 5.269, Average Loss: 5.352, avg. samples / sec: 537.52
Iteration:   3380, Loss function: 5.213, Average Loss: 5.346, avg. samples / sec: 538.35
Iteration:   3400, Loss function: 4.980, Average Loss: 5.342, avg. samples / sec: 536.89
Iteration:   3420, Loss function: 5.092, Average Loss: 5.336, avg. samples / sec: 538.86
Iteration:   3440, Loss function: 5.006, Average Loss: 5.331, avg. samples / sec: 534.12
Iteration:   3460, Loss function: 5.209, Average Loss: 5.326, avg. samples / sec: 538.20
Iteration:   3480, Loss function: 5.050, Average Loss: 5.321, avg. samples / sec: 537.37
Iteration:   3500, Loss function: 5.245, Average Loss: 5.317, avg. samples / sec: 536.51
Iteration:   3520, Loss function: 5.032, Average Loss: 5.313, avg. samples / sec: 537.10
Iteration:   3540, Loss function: 4.976, Average Loss: 5.307, avg. samples / sec: 536.78
Iteration:   3560, Loss function: 4.826, Average Loss: 5.303, avg. samples / sec: 537.35
Iteration:   3580, Loss function: 5.066, Average Loss: 5.298, avg. samples / sec: 536.31
Iteration:   3600, Loss function: 5.124, Average Loss: 5.293, avg. samples / sec: 535.92
Iteration:   3620, Loss function: 4.725, Average Loss: 5.287, avg. samples / sec: 537.58
Iteration:   3640, Loss function: 4.895, Average Loss: 5.282, avg. samples / sec: 537.76
Iteration:   3660, Loss function: 5.053, Average Loss: 5.277, avg. samples / sec: 537.98
Iteration:   3680, Loss function: 5.117, Average Loss: 5.271, avg. samples / sec: 537.14
Iteration:   3700, Loss function: 5.110, Average Loss: 5.266, avg. samples / sec: 537.37
Iteration:   3720, Loss function: 4.978, Average Loss: 5.260, avg. samples / sec: 538.73
Iteration:   3740, Loss function: 5.052, Average Loss: 5.257, avg. samples / sec: 535.87
Iteration:   3760, Loss function: 4.967, Average Loss: 5.253, avg. samples / sec: 538.58
Iteration:   3780, Loss function: 5.060, Average Loss: 5.248, avg. samples / sec: 538.55
Iteration:   3800, Loss function: 5.374, Average Loss: 5.245, avg. samples / sec: 537.26
Iteration:   3820, Loss function: 5.228, Average Loss: 5.241, avg. samples / sec: 538.64
Iteration:   3840, Loss function: 4.884, Average Loss: 5.236, avg. samples / sec: 538.82
Iteration:   3860, Loss function: 4.832, Average Loss: 5.230, avg. samples / sec: 536.84
Iteration:   3880, Loss function: 5.014, Average Loss: 5.225, avg. samples / sec: 537.71
Iteration:   3900, Loss function: 5.163, Average Loss: 5.221, avg. samples / sec: 536.69
Iteration:   3920, Loss function: 4.984, Average Loss: 5.216, avg. samples / sec: 537.24
Iteration:   3940, Loss function: 5.034, Average Loss: 5.211, avg. samples / sec: 538.09
Iteration:   3960, Loss function: 4.863, Average Loss: 5.208, avg. samples / sec: 537.17
Iteration:   3980, Loss function: 4.828, Average Loss: 5.203, avg. samples / sec: 536.79
Iteration:   4000, Loss function: 4.902, Average Loss: 5.198, avg. samples / sec: 538.26
Iteration:   4020, Loss function: 5.281, Average Loss: 5.194, avg. samples / sec: 536.21
Iteration:   4040, Loss function: 5.107, Average Loss: 5.189, avg. samples / sec: 537.41
Iteration:   4060, Loss function: 5.343, Average Loss: 5.186, avg. samples / sec: 537.23
Iteration:   4080, Loss function: 4.973, Average Loss: 5.181, avg. samples / sec: 538.60
Iteration:   4100, Loss function: 5.262, Average Loss: 5.179, avg. samples / sec: 538.36
:::MLLOG {"namespace": "", "time_ms": 1639072039058, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072039059, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.026, Average Loss: 5.175, avg. samples / sec: 538.05
Iteration:   4140, Loss function: 4.886, Average Loss: 5.169, avg. samples / sec: 536.87
Iteration:   4160, Loss function: 4.850, Average Loss: 5.162, avg. samples / sec: 536.43
Iteration:   4180, Loss function: 4.931, Average Loss: 5.155, avg. samples / sec: 536.49
Iteration:   4200, Loss function: 4.726, Average Loss: 5.150, avg. samples / sec: 537.68
Iteration:   4220, Loss function: 5.008, Average Loss: 5.145, avg. samples / sec: 539.86
Iteration:   4240, Loss function: 4.923, Average Loss: 5.141, avg. samples / sec: 537.59
Iteration:   4260, Loss function: 4.938, Average Loss: 5.136, avg. samples / sec: 537.00
Iteration:   4280, Loss function: 4.850, Average Loss: 5.130, avg. samples / sec: 537.72
Iteration:   4300, Loss function: 4.931, Average Loss: 5.125, avg. samples / sec: 536.86
Iteration:   4320, Loss function: 4.799, Average Loss: 5.120, avg. samples / sec: 538.10
Iteration:   4340, Loss function: 4.734, Average Loss: 5.115, avg. samples / sec: 536.00
Iteration:   4360, Loss function: 4.983, Average Loss: 5.111, avg. samples / sec: 538.23
Iteration:   4380, Loss function: 5.007, Average Loss: 5.106, avg. samples / sec: 537.84
Iteration:   4400, Loss function: 4.923, Average Loss: 5.102, avg. samples / sec: 539.05
Iteration:   4420, Loss function: 5.002, Average Loss: 5.098, avg. samples / sec: 537.55
Iteration:   4440, Loss function: 4.905, Average Loss: 5.094, avg. samples / sec: 538.74
Iteration:   4460, Loss function: 5.071, Average Loss: 5.090, avg. samples / sec: 539.12
Iteration:   4480, Loss function: 4.992, Average Loss: 5.087, avg. samples / sec: 537.17
Iteration:   4500, Loss function: 4.978, Average Loss: 5.083, avg. samples / sec: 536.57
Iteration:   4520, Loss function: 4.593, Average Loss: 5.078, avg. samples / sec: 539.03
Iteration:   4540, Loss function: 5.175, Average Loss: 5.074, avg. samples / sec: 534.21
Iteration:   4560, Loss function: 4.640, Average Loss: 5.070, avg. samples / sec: 536.98
Iteration:   4580, Loss function: 4.829, Average Loss: 5.068, avg. samples / sec: 537.83
Iteration:   4600, Loss function: 4.801, Average Loss: 5.064, avg. samples / sec: 538.34
Iteration:   4620, Loss function: 4.819, Average Loss: 5.060, avg. samples / sec: 537.79
Iteration:   4640, Loss function: 4.897, Average Loss: 5.055, avg. samples / sec: 537.83
Iteration:   4660, Loss function: 4.650, Average Loss: 5.052, avg. samples / sec: 537.53
Iteration:   4680, Loss function: 5.148, Average Loss: 5.047, avg. samples / sec: 537.09
Iteration:   4700, Loss function: 4.690, Average Loss: 5.043, avg. samples / sec: 537.75
Iteration:   4720, Loss function: 4.686, Average Loss: 5.038, avg. samples / sec: 536.79
Iteration:   4740, Loss function: 4.736, Average Loss: 5.035, avg. samples / sec: 537.01
Iteration:   4760, Loss function: 4.620, Average Loss: 5.031, avg. samples / sec: 537.08
Iteration:   4780, Loss function: 5.307, Average Loss: 5.028, avg. samples / sec: 537.34
Iteration:   4800, Loss function: 4.821, Average Loss: 5.024, avg. samples / sec: 535.93
Iteration:   4820, Loss function: 4.777, Average Loss: 5.021, avg. samples / sec: 537.88
Iteration:   4840, Loss function: 4.884, Average Loss: 5.017, avg. samples / sec: 539.40
Iteration:   4860, Loss function: 4.720, Average Loss: 5.013, avg. samples / sec: 537.34
Iteration:   4880, Loss function: 5.162, Average Loss: 5.009, avg. samples / sec: 537.76
Iteration:   4900, Loss function: 4.566, Average Loss: 5.005, avg. samples / sec: 538.60
Iteration:   4920, Loss function: 4.729, Average Loss: 5.002, avg. samples / sec: 538.26
Iteration:   4940, Loss function: 4.865, Average Loss: 4.998, avg. samples / sec: 537.22
Iteration:   4960, Loss function: 4.822, Average Loss: 4.995, avg. samples / sec: 538.41
Iteration:   4980, Loss function: 4.651, Average Loss: 4.992, avg. samples / sec: 538.41
Iteration:   5000, Loss function: 4.760, Average Loss: 4.989, avg. samples / sec: 538.98
Iteration:   5020, Loss function: 5.078, Average Loss: 4.986, avg. samples / sec: 538.24
Iteration:   5040, Loss function: 4.813, Average Loss: 4.983, avg. samples / sec: 538.57
Iteration:   5060, Loss function: 4.658, Average Loss: 4.979, avg. samples / sec: 537.35
Iteration:   5080, Loss function: 4.537, Average Loss: 4.975, avg. samples / sec: 539.17
Iteration:   5100, Loss function: 4.735, Average Loss: 4.972, avg. samples / sec: 538.28
Iteration:   5120, Loss function: 4.563, Average Loss: 4.969, avg. samples / sec: 537.76
Iteration:   5140, Loss function: 4.937, Average Loss: 4.966, avg. samples / sec: 537.12
:::MLLOG {"namespace": "", "time_ms": 1639072257227, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.41 s
:::MLLOG {"namespace": "", "time_ms": 1639072285679, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072285740, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072285741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.32s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10772
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21960
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09497
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19493
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13844
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10772 AP goal: 0.10000
Iteration:   5160, Loss function: 4.824, Average Loss: 4.961, avg. samples / sec: 69.80
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1077207379579572, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289468, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 17:51:30 UTC 2021: done waiting for 1 executions'
Thu Dec  9 17:51:30 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071115870, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071115979, "event_type": "POINT_IN_TIME", "key": "seed", "value": 2213797239, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 2213797239
:::MLLOG {"namespace": "", "time_ms": 1639071117626, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071117627, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071117630, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071117631, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071163804, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071163804, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639071165052, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071165053, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.13s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071165297, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071165298, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071165299, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.487, Average Loss: 0.022, avg. samples / sec: 2.41
Iteration:     20, Loss function: 21.102, Average Loss: 0.453, avg. samples / sec: 464.76
Iteration:     40, Loss function: 20.625, Average Loss: 0.855, avg. samples / sec: 533.84
Iteration:     60, Loss function: 20.388, Average Loss: 1.246, avg. samples / sec: 534.32
Iteration:     80, Loss function: 20.284, Average Loss: 1.622, avg. samples / sec: 534.45
Iteration:    100, Loss function: 17.355, Average Loss: 1.968, avg. samples / sec: 536.68
Iteration:    120, Loss function: 11.817, Average Loss: 2.202, avg. samples / sec: 537.19
Iteration:    140, Loss function: 9.700, Average Loss: 2.362, avg. samples / sec: 533.99
Iteration:    160, Loss function: 9.106, Average Loss: 2.502, avg. samples / sec: 536.31
Iteration:    180, Loss function: 8.887, Average Loss: 2.630, avg. samples / sec: 535.89
Iteration:    200, Loss function: 8.573, Average Loss: 2.753, avg. samples / sec: 538.08
Iteration:    220, Loss function: 8.611, Average Loss: 2.872, avg. samples / sec: 536.74
Iteration:    240, Loss function: 8.903, Average Loss: 2.990, avg. samples / sec: 537.20
Iteration:    260, Loss function: 8.772, Average Loss: 3.105, avg. samples / sec: 536.26
Iteration:    280, Loss function: 8.575, Average Loss: 3.215, avg. samples / sec: 535.81
Iteration:    300, Loss function: 8.374, Average Loss: 3.318, avg. samples / sec: 536.18
Iteration:    320, Loss function: 8.400, Average Loss: 3.417, avg. samples / sec: 495.74
Iteration:    340, Loss function: 8.261, Average Loss: 3.513, avg. samples / sec: 536.47
Iteration:    360, Loss function: 8.067, Average Loss: 3.605, avg. samples / sec: 536.85
Iteration:    380, Loss function: 7.879, Average Loss: 3.693, avg. samples / sec: 537.27
Iteration:    400, Loss function: 8.107, Average Loss: 3.779, avg. samples / sec: 536.57
Iteration:    420, Loss function: 7.500, Average Loss: 3.861, avg. samples / sec: 537.38
Iteration:    440, Loss function: 7.654, Average Loss: 3.939, avg. samples / sec: 539.65
Iteration:    460, Loss function: 7.709, Average Loss: 4.014, avg. samples / sec: 540.02
Iteration:    480, Loss function: 7.432, Average Loss: 4.085, avg. samples / sec: 539.75
Iteration:    500, Loss function: 7.664, Average Loss: 4.155, avg. samples / sec: 535.83
Iteration:    520, Loss function: 7.519, Average Loss: 4.224, avg. samples / sec: 539.09
Iteration:    540, Loss function: 7.593, Average Loss: 4.289, avg. samples / sec: 538.16
Iteration:    560, Loss function: 7.318, Average Loss: 4.351, avg. samples / sec: 538.21
Iteration:    580, Loss function: 7.227, Average Loss: 4.411, avg. samples / sec: 538.54
Iteration:    600, Loss function: 7.249, Average Loss: 4.468, avg. samples / sec: 538.57
Iteration:    620, Loss function: 6.948, Average Loss: 4.523, avg. samples / sec: 513.86
Iteration:    640, Loss function: 6.968, Average Loss: 4.577, avg. samples / sec: 537.88
Iteration:    660, Loss function: 7.242, Average Loss: 4.631, avg. samples / sec: 536.00
Iteration:    680, Loss function: 7.319, Average Loss: 4.682, avg. samples / sec: 539.18
Iteration:    700, Loss function: 6.783, Average Loss: 4.729, avg. samples / sec: 536.88
Iteration:    720, Loss function: 6.979, Average Loss: 4.777, avg. samples / sec: 537.40
Iteration:    740, Loss function: 7.032, Average Loss: 4.821, avg. samples / sec: 537.35
Iteration:    760, Loss function: 7.149, Average Loss: 4.865, avg. samples / sec: 535.62
Iteration:    780, Loss function: 6.706, Average Loss: 4.907, avg. samples / sec: 537.30
Iteration:    800, Loss function: 7.162, Average Loss: 4.946, avg. samples / sec: 536.69
Iteration:    820, Loss function: 6.794, Average Loss: 4.983, avg. samples / sec: 536.93
Iteration:    840, Loss function: 6.762, Average Loss: 5.020, avg. samples / sec: 536.12
Iteration:    860, Loss function: 6.739, Average Loss: 5.053, avg. samples / sec: 537.68
Iteration:    880, Loss function: 6.675, Average Loss: 5.085, avg. samples / sec: 541.06
Iteration:    900, Loss function: 6.916, Average Loss: 5.115, avg. samples / sec: 539.17
Iteration:    920, Loss function: 6.633, Average Loss: 5.144, avg. samples / sec: 537.59
Iteration:    940, Loss function: 6.815, Average Loss: 5.172, avg. samples / sec: 539.11
Iteration:    960, Loss function: 6.338, Average Loss: 5.200, avg. samples / sec: 537.98
Iteration:    980, Loss function: 6.384, Average Loss: 5.226, avg. samples / sec: 535.99
Iteration:   1000, Loss function: 6.670, Average Loss: 5.252, avg. samples / sec: 535.96
Iteration:   1020, Loss function: 6.348, Average Loss: 5.275, avg. samples / sec: 537.98
:::MLLOG {"namespace": "", "time_ms": 1639071384766, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071384767, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.531, Average Loss: 5.298, avg. samples / sec: 535.52
Iteration:   1060, Loss function: 6.308, Average Loss: 5.320, avg. samples / sec: 538.09
Iteration:   1080, Loss function: 6.243, Average Loss: 5.341, avg. samples / sec: 536.65
Iteration:   1100, Loss function: 6.159, Average Loss: 5.360, avg. samples / sec: 537.63
Iteration:   1120, Loss function: 6.296, Average Loss: 5.379, avg. samples / sec: 537.41
Iteration:   1140, Loss function: 6.497, Average Loss: 5.397, avg. samples / sec: 537.79
Iteration:   1160, Loss function: 6.206, Average Loss: 5.413, avg. samples / sec: 537.71
Iteration:   1180, Loss function: 6.342, Average Loss: 5.429, avg. samples / sec: 537.30
Iteration:   1200, Loss function: 6.107, Average Loss: 5.444, avg. samples / sec: 536.66
Iteration:   1220, Loss function: 6.065, Average Loss: 5.458, avg. samples / sec: 536.04
Iteration:   1240, Loss function: 6.000, Average Loss: 5.470, avg. samples / sec: 537.03
Iteration:   1260, Loss function: 5.975, Average Loss: 5.481, avg. samples / sec: 538.89
Iteration:   1280, Loss function: 5.841, Average Loss: 5.492, avg. samples / sec: 538.71
Iteration:   1300, Loss function: 6.025, Average Loss: 5.505, avg. samples / sec: 537.93
Iteration:   1320, Loss function: 5.925, Average Loss: 5.516, avg. samples / sec: 537.39
Iteration:   1340, Loss function: 5.769, Average Loss: 5.525, avg. samples / sec: 537.53
Iteration:   1360, Loss function: 6.039, Average Loss: 5.535, avg. samples / sec: 537.98
Iteration:   1380, Loss function: 6.193, Average Loss: 5.545, avg. samples / sec: 538.02
Iteration:   1400, Loss function: 6.082, Average Loss: 5.553, avg. samples / sec: 536.68
Iteration:   1420, Loss function: 5.816, Average Loss: 5.560, avg. samples / sec: 536.70
Iteration:   1440, Loss function: 6.390, Average Loss: 5.568, avg. samples / sec: 538.15
Iteration:   1460, Loss function: 6.123, Average Loss: 5.576, avg. samples / sec: 538.15
Iteration:   1480, Loss function: 5.945, Average Loss: 5.584, avg. samples / sec: 539.15
Iteration:   1500, Loss function: 5.871, Average Loss: 5.591, avg. samples / sec: 537.27
Iteration:   1520, Loss function: 6.029, Average Loss: 5.597, avg. samples / sec: 538.09
Iteration:   1540, Loss function: 6.019, Average Loss: 5.601, avg. samples / sec: 538.89
Iteration:   1560, Loss function: 5.691, Average Loss: 5.606, avg. samples / sec: 539.66
Iteration:   1580, Loss function: 5.711, Average Loss: 5.610, avg. samples / sec: 539.62
Iteration:   1600, Loss function: 6.066, Average Loss: 5.616, avg. samples / sec: 536.46
Iteration:   1620, Loss function: 5.681, Average Loss: 5.620, avg. samples / sec: 537.11
Iteration:   1640, Loss function: 5.861, Average Loss: 5.623, avg. samples / sec: 537.76
Iteration:   1660, Loss function: 5.917, Average Loss: 5.626, avg. samples / sec: 537.56
Iteration:   1680, Loss function: 5.712, Average Loss: 5.628, avg. samples / sec: 537.26
Iteration:   1700, Loss function: 5.363, Average Loss: 5.632, avg. samples / sec: 537.55
Iteration:   1720, Loss function: 5.815, Average Loss: 5.634, avg. samples / sec: 538.07
Iteration:   1740, Loss function: 5.859, Average Loss: 5.636, avg. samples / sec: 538.94
Iteration:   1760, Loss function: 5.459, Average Loss: 5.638, avg. samples / sec: 539.04
Iteration:   1780, Loss function: 5.691, Average Loss: 5.638, avg. samples / sec: 535.83
Iteration:   1800, Loss function: 5.485, Average Loss: 5.640, avg. samples / sec: 537.74
Iteration:   1820, Loss function: 5.939, Average Loss: 5.641, avg. samples / sec: 539.35
Iteration:   1840, Loss function: 6.075, Average Loss: 5.643, avg. samples / sec: 539.81
Iteration:   1860, Loss function: 5.648, Average Loss: 5.642, avg. samples / sec: 537.58
Iteration:   1880, Loss function: 5.832, Average Loss: 5.643, avg. samples / sec: 537.38
Iteration:   1900, Loss function: 5.827, Average Loss: 5.643, avg. samples / sec: 536.72
Iteration:   1920, Loss function: 5.552, Average Loss: 5.643, avg. samples / sec: 535.29
Iteration:   1940, Loss function: 5.977, Average Loss: 5.643, avg. samples / sec: 535.64
Iteration:   1960, Loss function: 5.662, Average Loss: 5.641, avg. samples / sec: 537.62
Iteration:   1980, Loss function: 5.779, Average Loss: 5.640, avg. samples / sec: 539.42
Iteration:   2000, Loss function: 5.590, Average Loss: 5.640, avg. samples / sec: 536.55
Iteration:   2020, Loss function: 5.668, Average Loss: 5.639, avg. samples / sec: 538.18
Iteration:   2040, Loss function: 5.706, Average Loss: 5.639, avg. samples / sec: 538.99
:::MLLOG {"namespace": "", "time_ms": 1639071602929, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071602930, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.665, Average Loss: 5.637, avg. samples / sec: 538.39
Iteration:   2080, Loss function: 5.142, Average Loss: 5.634, avg. samples / sec: 537.50
Iteration:   2100, Loss function: 5.463, Average Loss: 5.631, avg. samples / sec: 539.31
Iteration:   2120, Loss function: 5.403, Average Loss: 5.629, avg. samples / sec: 539.52
Iteration:   2140, Loss function: 5.364, Average Loss: 5.625, avg. samples / sec: 537.87
Iteration:   2160, Loss function: 5.511, Average Loss: 5.623, avg. samples / sec: 537.85
Iteration:   2180, Loss function: 5.522, Average Loss: 5.621, avg. samples / sec: 535.36
Iteration:   2200, Loss function: 5.521, Average Loss: 5.617, avg. samples / sec: 536.68
Iteration:   2220, Loss function: 5.559, Average Loss: 5.614, avg. samples / sec: 537.53
Iteration:   2240, Loss function: 5.484, Average Loss: 5.611, avg. samples / sec: 538.89
Iteration:   2260, Loss function: 5.419, Average Loss: 5.607, avg. samples / sec: 538.53
Iteration:   2280, Loss function: 5.322, Average Loss: 5.604, avg. samples / sec: 536.89
Iteration:   2300, Loss function: 5.137, Average Loss: 5.599, avg. samples / sec: 536.73
Iteration:   2320, Loss function: 5.343, Average Loss: 5.596, avg. samples / sec: 538.61
Iteration:   2340, Loss function: 5.521, Average Loss: 5.594, avg. samples / sec: 539.38
Iteration:   2360, Loss function: 5.299, Average Loss: 5.590, avg. samples / sec: 536.27
Iteration:   2380, Loss function: 5.385, Average Loss: 5.586, avg. samples / sec: 537.81
Iteration:   2400, Loss function: 5.701, Average Loss: 5.583, avg. samples / sec: 538.37
Iteration:   2420, Loss function: 5.474, Average Loss: 5.578, avg. samples / sec: 538.03
Iteration:   2440, Loss function: 5.397, Average Loss: 5.575, avg. samples / sec: 537.29
Iteration:   2460, Loss function: 5.122, Average Loss: 5.571, avg. samples / sec: 537.28
Iteration:   2480, Loss function: 5.345, Average Loss: 5.568, avg. samples / sec: 538.59
Iteration:   2500, Loss function: 5.413, Average Loss: 5.564, avg. samples / sec: 536.40
Iteration:   2520, Loss function: 5.225, Average Loss: 5.559, avg. samples / sec: 535.47
Iteration:   2540, Loss function: 5.491, Average Loss: 5.556, avg. samples / sec: 539.06
Iteration:   2560, Loss function: 5.315, Average Loss: 5.553, avg. samples / sec: 538.39
Iteration:   2580, Loss function: 5.271, Average Loss: 5.549, avg. samples / sec: 536.78
Iteration:   2600, Loss function: 5.454, Average Loss: 5.547, avg. samples / sec: 537.85
Iteration:   2620, Loss function: 5.425, Average Loss: 5.542, avg. samples / sec: 538.07
Iteration:   2640, Loss function: 5.149, Average Loss: 5.538, avg. samples / sec: 538.66
Iteration:   2660, Loss function: 5.001, Average Loss: 5.534, avg. samples / sec: 536.93
Iteration:   2680, Loss function: 5.224, Average Loss: 5.531, avg. samples / sec: 538.79
Iteration:   2700, Loss function: 5.139, Average Loss: 5.525, avg. samples / sec: 538.58
Iteration:   2720, Loss function: 5.332, Average Loss: 5.520, avg. samples / sec: 538.24
Iteration:   2740, Loss function: 4.976, Average Loss: 5.515, avg. samples / sec: 537.27
Iteration:   2760, Loss function: 4.976, Average Loss: 5.510, avg. samples / sec: 536.87
Iteration:   2780, Loss function: 5.477, Average Loss: 5.507, avg. samples / sec: 534.93
Iteration:   2800, Loss function: 5.327, Average Loss: 5.502, avg. samples / sec: 537.90
Iteration:   2820, Loss function: 5.388, Average Loss: 5.498, avg. samples / sec: 535.25
Iteration:   2840, Loss function: 5.135, Average Loss: 5.494, avg. samples / sec: 537.02
Iteration:   2860, Loss function: 5.151, Average Loss: 5.488, avg. samples / sec: 537.69
Iteration:   2880, Loss function: 5.095, Average Loss: 5.483, avg. samples / sec: 537.28
Iteration:   2900, Loss function: 4.856, Average Loss: 5.478, avg. samples / sec: 538.23
Iteration:   2920, Loss function: 5.233, Average Loss: 5.472, avg. samples / sec: 538.32
Iteration:   2940, Loss function: 4.940, Average Loss: 5.468, avg. samples / sec: 537.31
Iteration:   2960, Loss function: 5.525, Average Loss: 5.463, avg. samples / sec: 538.56
Iteration:   2980, Loss function: 5.266, Average Loss: 5.459, avg. samples / sec: 539.38
Iteration:   3000, Loss function: 5.159, Average Loss: 5.453, avg. samples / sec: 538.68
Iteration:   3020, Loss function: 5.201, Average Loss: 5.446, avg. samples / sec: 539.10
Iteration:   3040, Loss function: 5.275, Average Loss: 5.441, avg. samples / sec: 538.97
Iteration:   3060, Loss function: 5.107, Average Loss: 5.435, avg. samples / sec: 539.63
Iteration:   3080, Loss function: 4.968, Average Loss: 5.429, avg. samples / sec: 538.48
:::MLLOG {"namespace": "", "time_ms": 1639071820840, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071820841, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.179, Average Loss: 5.424, avg. samples / sec: 536.44
Iteration:   3120, Loss function: 4.910, Average Loss: 5.418, avg. samples / sec: 537.18
Iteration:   3140, Loss function: 5.002, Average Loss: 5.412, avg. samples / sec: 539.14
Iteration:   3160, Loss function: 5.455, Average Loss: 5.408, avg. samples / sec: 539.54
Iteration:   3180, Loss function: 5.229, Average Loss: 5.403, avg. samples / sec: 537.44
Iteration:   3200, Loss function: 5.201, Average Loss: 5.397, avg. samples / sec: 538.81
Iteration:   3220, Loss function: 5.153, Average Loss: 5.392, avg. samples / sec: 537.18
Iteration:   3240, Loss function: 5.168, Average Loss: 5.385, avg. samples / sec: 536.94
Iteration:   3260, Loss function: 5.049, Average Loss: 5.380, avg. samples / sec: 538.73
Iteration:   3280, Loss function: 4.747, Average Loss: 5.374, avg. samples / sec: 538.62
Iteration:   3300, Loss function: 4.861, Average Loss: 5.368, avg. samples / sec: 538.56
Iteration:   3320, Loss function: 4.891, Average Loss: 5.363, avg. samples / sec: 538.36
Iteration:   3340, Loss function: 5.249, Average Loss: 5.358, avg. samples / sec: 538.00
Iteration:   3360, Loss function: 5.269, Average Loss: 5.352, avg. samples / sec: 537.52
Iteration:   3380, Loss function: 5.213, Average Loss: 5.346, avg. samples / sec: 538.35
Iteration:   3400, Loss function: 4.980, Average Loss: 5.342, avg. samples / sec: 536.89
Iteration:   3420, Loss function: 5.092, Average Loss: 5.336, avg. samples / sec: 538.86
Iteration:   3440, Loss function: 5.006, Average Loss: 5.331, avg. samples / sec: 534.12
Iteration:   3460, Loss function: 5.209, Average Loss: 5.326, avg. samples / sec: 538.20
Iteration:   3480, Loss function: 5.050, Average Loss: 5.321, avg. samples / sec: 537.37
Iteration:   3500, Loss function: 5.245, Average Loss: 5.317, avg. samples / sec: 536.51
Iteration:   3520, Loss function: 5.032, Average Loss: 5.313, avg. samples / sec: 537.10
Iteration:   3540, Loss function: 4.976, Average Loss: 5.307, avg. samples / sec: 536.78
Iteration:   3560, Loss function: 4.826, Average Loss: 5.303, avg. samples / sec: 537.35
Iteration:   3580, Loss function: 5.066, Average Loss: 5.298, avg. samples / sec: 536.31
Iteration:   3600, Loss function: 5.124, Average Loss: 5.293, avg. samples / sec: 535.92
Iteration:   3620, Loss function: 4.725, Average Loss: 5.287, avg. samples / sec: 537.58
Iteration:   3640, Loss function: 4.895, Average Loss: 5.282, avg. samples / sec: 537.76
Iteration:   3660, Loss function: 5.053, Average Loss: 5.277, avg. samples / sec: 537.98
Iteration:   3680, Loss function: 5.117, Average Loss: 5.271, avg. samples / sec: 537.14
Iteration:   3700, Loss function: 5.110, Average Loss: 5.266, avg. samples / sec: 537.37
Iteration:   3720, Loss function: 4.978, Average Loss: 5.260, avg. samples / sec: 538.73
Iteration:   3740, Loss function: 5.052, Average Loss: 5.257, avg. samples / sec: 535.87
Iteration:   3760, Loss function: 4.967, Average Loss: 5.253, avg. samples / sec: 538.58
Iteration:   3780, Loss function: 5.060, Average Loss: 5.248, avg. samples / sec: 538.55
Iteration:   3800, Loss function: 5.374, Average Loss: 5.245, avg. samples / sec: 537.26
Iteration:   3820, Loss function: 5.228, Average Loss: 5.241, avg. samples / sec: 538.64
Iteration:   3840, Loss function: 4.884, Average Loss: 5.236, avg. samples / sec: 538.82
Iteration:   3860, Loss function: 4.832, Average Loss: 5.230, avg. samples / sec: 536.84
Iteration:   3880, Loss function: 5.014, Average Loss: 5.225, avg. samples / sec: 537.71
Iteration:   3900, Loss function: 5.163, Average Loss: 5.221, avg. samples / sec: 536.69
Iteration:   3920, Loss function: 4.984, Average Loss: 5.216, avg. samples / sec: 537.24
Iteration:   3940, Loss function: 5.034, Average Loss: 5.211, avg. samples / sec: 538.09
Iteration:   3960, Loss function: 4.863, Average Loss: 5.208, avg. samples / sec: 537.17
Iteration:   3980, Loss function: 4.828, Average Loss: 5.203, avg. samples / sec: 536.79
Iteration:   4000, Loss function: 4.902, Average Loss: 5.198, avg. samples / sec: 538.26
Iteration:   4020, Loss function: 5.281, Average Loss: 5.194, avg. samples / sec: 536.21
Iteration:   4040, Loss function: 5.107, Average Loss: 5.189, avg. samples / sec: 537.41
Iteration:   4060, Loss function: 5.343, Average Loss: 5.186, avg. samples / sec: 537.23
Iteration:   4080, Loss function: 4.973, Average Loss: 5.181, avg. samples / sec: 538.60
Iteration:   4100, Loss function: 5.262, Average Loss: 5.179, avg. samples / sec: 538.36
:::MLLOG {"namespace": "", "time_ms": 1639072039058, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072039059, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.026, Average Loss: 5.175, avg. samples / sec: 538.05
Iteration:   4140, Loss function: 4.886, Average Loss: 5.169, avg. samples / sec: 536.87
Iteration:   4160, Loss function: 4.850, Average Loss: 5.162, avg. samples / sec: 536.43
Iteration:   4180, Loss function: 4.931, Average Loss: 5.155, avg. samples / sec: 536.49
Iteration:   4200, Loss function: 4.726, Average Loss: 5.150, avg. samples / sec: 537.68
Iteration:   4220, Loss function: 5.008, Average Loss: 5.145, avg. samples / sec: 539.86
Iteration:   4240, Loss function: 4.923, Average Loss: 5.141, avg. samples / sec: 537.59
Iteration:   4260, Loss function: 4.938, Average Loss: 5.136, avg. samples / sec: 537.00
Iteration:   4280, Loss function: 4.850, Average Loss: 5.130, avg. samples / sec: 537.72
Iteration:   4300, Loss function: 4.931, Average Loss: 5.125, avg. samples / sec: 536.86
Iteration:   4320, Loss function: 4.799, Average Loss: 5.120, avg. samples / sec: 538.10
Iteration:   4340, Loss function: 4.734, Average Loss: 5.115, avg. samples / sec: 536.00
Iteration:   4360, Loss function: 4.983, Average Loss: 5.111, avg. samples / sec: 538.23
Iteration:   4380, Loss function: 5.007, Average Loss: 5.106, avg. samples / sec: 537.84
Iteration:   4400, Loss function: 4.923, Average Loss: 5.102, avg. samples / sec: 539.05
Iteration:   4420, Loss function: 5.002, Average Loss: 5.098, avg. samples / sec: 537.55
Iteration:   4440, Loss function: 4.905, Average Loss: 5.094, avg. samples / sec: 538.74
Iteration:   4460, Loss function: 5.071, Average Loss: 5.090, avg. samples / sec: 539.12
Iteration:   4480, Loss function: 4.992, Average Loss: 5.087, avg. samples / sec: 537.17
Iteration:   4500, Loss function: 4.978, Average Loss: 5.083, avg. samples / sec: 536.57
Iteration:   4520, Loss function: 4.593, Average Loss: 5.078, avg. samples / sec: 539.03
Iteration:   4540, Loss function: 5.175, Average Loss: 5.074, avg. samples / sec: 534.21
Iteration:   4560, Loss function: 4.640, Average Loss: 5.070, avg. samples / sec: 536.98
Iteration:   4580, Loss function: 4.829, Average Loss: 5.068, avg. samples / sec: 537.83
Iteration:   4600, Loss function: 4.801, Average Loss: 5.064, avg. samples / sec: 538.34
Iteration:   4620, Loss function: 4.819, Average Loss: 5.060, avg. samples / sec: 537.79
Iteration:   4640, Loss function: 4.897, Average Loss: 5.055, avg. samples / sec: 537.83
Iteration:   4660, Loss function: 4.650, Average Loss: 5.052, avg. samples / sec: 537.53
Iteration:   4680, Loss function: 5.148, Average Loss: 5.047, avg. samples / sec: 537.09
Iteration:   4700, Loss function: 4.690, Average Loss: 5.043, avg. samples / sec: 537.75
Iteration:   4720, Loss function: 4.686, Average Loss: 5.038, avg. samples / sec: 536.79
Iteration:   4740, Loss function: 4.736, Average Loss: 5.035, avg. samples / sec: 537.01
Iteration:   4760, Loss function: 4.620, Average Loss: 5.031, avg. samples / sec: 537.08
Iteration:   4780, Loss function: 5.307, Average Loss: 5.028, avg. samples / sec: 537.34
Iteration:   4800, Loss function: 4.821, Average Loss: 5.024, avg. samples / sec: 535.93
Iteration:   4820, Loss function: 4.777, Average Loss: 5.021, avg. samples / sec: 537.88
Iteration:   4840, Loss function: 4.884, Average Loss: 5.017, avg. samples / sec: 539.40
Iteration:   4860, Loss function: 4.720, Average Loss: 5.013, avg. samples / sec: 537.34
Iteration:   4880, Loss function: 5.162, Average Loss: 5.009, avg. samples / sec: 537.76
Iteration:   4900, Loss function: 4.566, Average Loss: 5.005, avg. samples / sec: 538.60
Iteration:   4920, Loss function: 4.729, Average Loss: 5.002, avg. samples / sec: 538.26
Iteration:   4940, Loss function: 4.865, Average Loss: 4.998, avg. samples / sec: 537.22
Iteration:   4960, Loss function: 4.822, Average Loss: 4.995, avg. samples / sec: 538.41
Iteration:   4980, Loss function: 4.651, Average Loss: 4.992, avg. samples / sec: 538.41
Iteration:   5000, Loss function: 4.760, Average Loss: 4.989, avg. samples / sec: 538.98
Iteration:   5020, Loss function: 5.078, Average Loss: 4.986, avg. samples / sec: 538.24
Iteration:   5040, Loss function: 4.813, Average Loss: 4.983, avg. samples / sec: 538.57
Iteration:   5060, Loss function: 4.658, Average Loss: 4.979, avg. samples / sec: 537.35
Iteration:   5080, Loss function: 4.537, Average Loss: 4.975, avg. samples / sec: 539.17
Iteration:   5100, Loss function: 4.735, Average Loss: 4.972, avg. samples / sec: 538.28
Iteration:   5120, Loss function: 4.563, Average Loss: 4.969, avg. samples / sec: 537.76
Iteration:   5140, Loss function: 4.937, Average Loss: 4.966, avg. samples / sec: 537.12
:::MLLOG {"namespace": "", "time_ms": 1639072257227, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 28.41 s
:::MLLOG {"namespace": "", "time_ms": 1639072285679, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072285740, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072285741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.65s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.32s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10772
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.21960
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09497
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19493
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13844
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20426
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10772 AP goal: 0.10000
Iteration:   5160, Loss function: 4.824, Average Loss: 4.961, avg. samples / sec: 69.80
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1077207379579572, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289260, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072289468, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639072290
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 05:51:30 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 05:31:48 PM'
START TIMING RUN WAS 2021-12-09 05:31:48 PM
ENDING TIMING RUN AT 2021-12-09 05:51:30 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 05:51:30 PM'
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-9e13f17f-a213-eb38-9a9c-0b2a540e4908)
  MIG 3g.20gb     Device  0: (UUID: MIG-7af93043-695c-54c5-90f5-b698832ab413)
+ result=1182
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1182,nvidia,2021-12-09 05:31:48 PM'
RESULT,SINGLE_STAGE_DETECTOR,,1182,nvidia,2021-12-09 05:31:48 PM
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
