+ test -f /etc/shinit_v2
+ source /etc/shinit_v2
+++ sed -n 's/^NVRM.*Kernel Module *\([^() ]*\).*$/\1/p' /proc/driver/nvidia/version
+++ sed 's/^$/unknown/'
++ NV_DRIVER_VERS=470.82.01
++ export _CUDA_COMPAT_PATH=/usr/local/cuda/compat
++ _CUDA_COMPAT_PATH=/usr/local/cuda/compat
+++ hostname
++ _CUDA_COMPAT_CHECKFILE=/usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-hvdn7.checked
++ _CUDA_COMPAT_REALLIB=/usr/local/cuda/compat/lib.real
++ _CUDA_COMPAT_SYMLINK=/usr/local/cuda/compat/lib
++ '[' -n 470.82.01 -a -e /dev/nvidiactl -a '!' -e /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-hvdn7.checked ']'
++ touch /usr/local/cuda/compat/.470.82.01.run-ssd-mig-3g-20gb--1-hvdn7.checked
++ rm -f /usr/local/cuda/compat/lib
++ TIMEOUT=35
+++ LD_LIBRARY_PATH=/usr/local/cuda/compat/lib.real
+++ timeout -s KILL 35 /usr/local/bin/cudaCheck
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ export '_CUDA_COMPAT_STATUS=CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ _CUDA_COMPAT_STATUS='CUDA Driver UNAVAILABLE (cuInit(0) returned 100)'
++ '[' 'CUDA Driver UNAVAILABLE (cuInit(0) returned 100)' = 'CUDA Driver OK' ']'
++ unset _CUDA_COMPAT_CHECKFILE
++ unset _CUDA_COMPAT_REALLIB
++ unset _CUDA_COMPAT_SYMLINK
+ '[' -z '' ']'
+ return
+ export NCCL_DEBUG=INFO
+ NCCL_DEBUG=INFO
+ set -e
+ set -x
+ set -o pipefail
+ set -o nounset
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 3g.20gb     Device  0: (UUID: MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc)
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ wc -l
+ NB_GPUS=1
+ [[ 1 == 0 ]]
++ nvidia-smi -L
++ grep 'UUID: MIG-'
++ awk '{ printf $6"\n"}'
++ cut '-d)' -f1
+ ALL_GPUS=MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc
+ MIG_MODE=1
+ [[ 2g.10gb,3g.20gb == \f\u\l\l ]]
+ echo 'Found 1 MIG instances: MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc'
Found 1 MIG instances: MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc
+ [[ 1 != 1 ]]
+ SSD_THRESHOLD=0.1
++ date +%s
+ start=1639071109
++ date '+%Y-%m-%d %r'
+ start_fmt='2021-12-09 05:31:49 PM'
+ echo 'STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
STARTING TIMING RUN AT 2021-12-09 05:31:49 PM GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
+ set -x
+ NUMEPOCHS=80
running benchmark
+ echo 'running benchmark'
+ export DATASET_DIR=/data/coco2017
+ DATASET_DIR=/data/coco2017
+ export TORCH_HOME=/data/coco2017/torchvision
+ TORCH_HOME=/data/coco2017/torchvision
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_val2017.json ']'
+ '[' '!' -f /data/coco2017/annotations/bbox_only_instances_train2017.json ']'
+ EXTRA_PARAMS='--batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4'
+ DGXNSOCKET=1
+ DGXSOCKETCORES=8
+ [[ 1 == \1 ]]
+ DGXNGPU=1
+ echo 'Running in parallel mode.'
Running in parallel mode.
+ declare -a CMD
Patching 'bind_launch.py' to err-exit on failure ...
+ echo 'Patching '\''bind_launch.py'\'' to err-exit on failure ...'
+ sed 's/process.wait()/if process.wait(): sys.exit(1)/' -i bind_launch.py
+ CMD=('python' '-u' '-m' 'bind_launch' "--nsockets_per_node=${DGXNSOCKET}" "--ncores_per_socket=${DGXSOCKETCORES}" "--nproc_per_node=${DGXNGPU}")
+ declare -a ARGS
+ ARGS=(train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs "${NUMEPOCHS}" --warmup-factor 0 --no-save --threshold=${SSD_THRESHOLD} --data ${DATASET_DIR} ${EXTRA_PARAMS})
+ [[ fast == \f\a\s\t ]]
+ echo 'Running in FAST mode'
Running in FAST mode
+ ARGS+=(--evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85)
+ trap 'date; echo failed; exit 1' ERR
+ [[ n != \y ]]
+ SYNC_DIR=/data/coco2017/sync
+ mkdir -p /data/coco2017/sync
+ for sync_f in "$SYNC_DIR/"*
+ [[ /data/coco2017/sync/2021-12-09_12-30-31 != \/\d\a\t\a\/\c\o\c\o\2\0\1\7\/\s\y\n\c\/\2\0\2\1\-\1\2\-\0\9\_\1\2\-\3\0\-\3\1 ]]
+ set +x
Thu Dec  9 17:31:49 UTC 2021 Waiting for all the 8 Pods to start ...
Adding run-ssd-mig-3g-20gb--1-hvdn7 to the sync file ...
run-ssd-mig-3g-20gb--1-hvdn7 Found 5 Pods, waiting to have 8 ...
     1	run-ssd-mig-2g-10gb--1-hds46
     2	run-ssd-mig-3g-20gb--1-pvzvf
     3	run-ssd-mig-3g-20gb--1-dqcx5
     4	run-ssd-mig-2g-10gb--1-6z6jg
     5	run-ssd-mig-3g-20gb--1-hvdn7
Thu Dec  9 17:31:54 UTC 2021 All the 8 Pods are running, launch the GPU workload.
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 3g.20gb     Device  0: (UUID: MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc)
+ [[ 1 == 1 ]]
+ [[ 1 != 1 ]]
+ dest=/tmp/ssd_all.log
+ [[ 1 == 1 ]]
Running on the MIG GPU
+ echo 'Running on the MIG GPU'
+ python -u -m bind_launch --nsockets_per_node=1 --ncores_per_socket=8 --nproc_per_node=1 train.py --use-fp16 --nhwc --pad-input --jit --delay-allreduce --opt-loss --epochs 80 --warmup-factor 0 --no-save --threshold=0.1 --data /data/coco2017 --batch-size=114 --warmup=650 --lr=3.2e-3 --wd=1.3e-4 --evaluation 5 10 15 20 25 30 35 40 50 55 60 65 70 75 80 85
+ tee -a /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071116788, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071116901, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1326086835, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1326086835
/opt/conda/lib/python3.6/site-packages/torch/nn/_reduction.py:44: UserWarning: size_average and reduce args will be deprecated, please use reduction='none' instead.
  warnings.warn(warning.format(ret))
:::MLLOG {"namespace": "", "time_ms": 1639071118700, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071118701, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.

Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071118706, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071118706, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071164741, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071164741, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
[/opt/dali/dali/operators/image/crop/bbox_crop.cc:348] WARNING: `ltrb` is deprecated. Please use `bbox_layout` to specify the format of the bounding box. E.g. For 2D bounding boxes, `ltrb=True`` is equivalent to `bbox_layout="xyXY"`, and `ltrb=False` is equivalent to `bbox_layout="xyWH"`
:::MLLOG {"namespace": "", "time_ms": 1639071166029, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071166029, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071166322, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071166323, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071166324, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.983, Average Loss: 0.023, avg. samples / sec: 2.41
Iteration:     20, Loss function: 21.107, Average Loss: 0.456, avg. samples / sec: 447.22
Iteration:     40, Loss function: 20.774, Average Loss: 0.858, avg. samples / sec: 533.28
Iteration:     60, Loss function: 20.309, Average Loss: 1.247, avg. samples / sec: 535.16
Iteration:     80, Loss function: 20.022, Average Loss: 1.622, avg. samples / sec: 536.56
Iteration:    100, Loss function: 16.772, Average Loss: 1.962, avg. samples / sec: 537.46
Iteration:    120, Loss function: 11.282, Average Loss: 2.184, avg. samples / sec: 536.58
Iteration:    140, Loss function: 10.062, Average Loss: 2.347, avg. samples / sec: 535.84
Iteration:    160, Loss function: 9.124, Average Loss: 2.489, avg. samples / sec: 535.95
Iteration:    180, Loss function: 8.877, Average Loss: 2.618, avg. samples / sec: 536.59
Iteration:    200, Loss function: 8.748, Average Loss: 2.743, avg. samples / sec: 536.75
Iteration:    220, Loss function: 8.496, Average Loss: 2.863, avg. samples / sec: 538.80
Iteration:    240, Loss function: 8.351, Average Loss: 2.977, avg. samples / sec: 539.51
Iteration:    260, Loss function: 8.914, Average Loss: 3.089, avg. samples / sec: 537.81
Iteration:    280, Loss function: 8.718, Average Loss: 3.204, avg. samples / sec: 537.33
Iteration:    300, Loss function: 8.479, Average Loss: 3.311, avg. samples / sec: 536.77
Iteration:    320, Loss function: 8.342, Average Loss: 3.410, avg. samples / sec: 517.12
Iteration:    340, Loss function: 8.171, Average Loss: 3.507, avg. samples / sec: 537.39
Iteration:    360, Loss function: 7.845, Average Loss: 3.599, avg. samples / sec: 536.95
Iteration:    380, Loss function: 8.014, Average Loss: 3.688, avg. samples / sec: 537.07
Iteration:    400, Loss function: 7.963, Average Loss: 3.772, avg. samples / sec: 538.26
Iteration:    420, Loss function: 7.555, Average Loss: 3.853, avg. samples / sec: 534.97
Iteration:    440, Loss function: 7.858, Average Loss: 3.932, avg. samples / sec: 537.59
Iteration:    460, Loss function: 7.792, Average Loss: 4.008, avg. samples / sec: 538.93
Iteration:    480, Loss function: 7.394, Average Loss: 4.082, avg. samples / sec: 537.15
Iteration:    500, Loss function: 7.538, Average Loss: 4.153, avg. samples / sec: 537.11
Iteration:    520, Loss function: 7.441, Average Loss: 4.222, avg. samples / sec: 539.23
Iteration:    540, Loss function: 7.550, Average Loss: 4.287, avg. samples / sec: 534.95
Iteration:    560, Loss function: 7.103, Average Loss: 4.349, avg. samples / sec: 538.48
Iteration:    580, Loss function: 7.235, Average Loss: 4.409, avg. samples / sec: 536.13
Iteration:    600, Loss function: 7.361, Average Loss: 4.467, avg. samples / sec: 533.40
Iteration:    620, Loss function: 7.293, Average Loss: 4.523, avg. samples / sec: 534.82
Iteration:    640, Loss function: 7.017, Average Loss: 4.577, avg. samples / sec: 539.19
Iteration:    660, Loss function: 7.119, Average Loss: 4.629, avg. samples / sec: 536.67
Iteration:    680, Loss function: 7.305, Average Loss: 4.680, avg. samples / sec: 539.25
Iteration:    700, Loss function: 6.861, Average Loss: 4.727, avg. samples / sec: 538.47
Iteration:    720, Loss function: 7.052, Average Loss: 4.776, avg. samples / sec: 537.57
Iteration:    740, Loss function: 6.856, Average Loss: 4.820, avg. samples / sec: 538.39
Iteration:    760, Loss function: 7.059, Average Loss: 4.862, avg. samples / sec: 536.42
Iteration:    780, Loss function: 6.957, Average Loss: 4.904, avg. samples / sec: 536.06
Iteration:    800, Loss function: 7.144, Average Loss: 4.941, avg. samples / sec: 538.02
Iteration:    820, Loss function: 6.718, Average Loss: 4.978, avg. samples / sec: 539.18
Iteration:    840, Loss function: 6.817, Average Loss: 5.014, avg. samples / sec: 538.16
Iteration:    860, Loss function: 6.943, Average Loss: 5.048, avg. samples / sec: 537.76
Iteration:    880, Loss function: 6.526, Average Loss: 5.080, avg. samples / sec: 539.59
Iteration:    900, Loss function: 6.666, Average Loss: 5.110, avg. samples / sec: 537.30
Iteration:    920, Loss function: 6.567, Average Loss: 5.139, avg. samples / sec: 534.89
Iteration:    940, Loss function: 6.836, Average Loss: 5.168, avg. samples / sec: 536.25
Iteration:    960, Loss function: 6.441, Average Loss: 5.196, avg. samples / sec: 536.66
Iteration:    980, Loss function: 6.419, Average Loss: 5.224, avg. samples / sec: 538.94
Iteration:   1000, Loss function: 6.660, Average Loss: 5.248, avg. samples / sec: 537.95
Iteration:   1020, Loss function: 6.216, Average Loss: 5.271, avg. samples / sec: 536.51
:::MLLOG {"namespace": "", "time_ms": 1639071385625, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071385626, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.405, Average Loss: 5.294, avg. samples / sec: 536.93
Iteration:   1060, Loss function: 6.333, Average Loss: 5.317, avg. samples / sec: 538.20
Iteration:   1080, Loss function: 6.416, Average Loss: 5.338, avg. samples / sec: 536.90
Iteration:   1100, Loss function: 6.060, Average Loss: 5.357, avg. samples / sec: 536.96
Iteration:   1120, Loss function: 6.295, Average Loss: 5.377, avg. samples / sec: 538.14
Iteration:   1140, Loss function: 6.327, Average Loss: 5.395, avg. samples / sec: 536.97
Iteration:   1160, Loss function: 6.152, Average Loss: 5.411, avg. samples / sec: 537.73
Iteration:   1180, Loss function: 6.145, Average Loss: 5.427, avg. samples / sec: 538.14
Iteration:   1200, Loss function: 6.166, Average Loss: 5.442, avg. samples / sec: 537.12
Iteration:   1220, Loss function: 6.102, Average Loss: 5.457, avg. samples / sec: 537.51
Iteration:   1240, Loss function: 5.959, Average Loss: 5.470, avg. samples / sec: 536.38
Iteration:   1260, Loss function: 6.057, Average Loss: 5.481, avg. samples / sec: 538.46
Iteration:   1280, Loss function: 5.964, Average Loss: 5.494, avg. samples / sec: 537.70
Iteration:   1300, Loss function: 6.103, Average Loss: 5.505, avg. samples / sec: 537.18
Iteration:   1320, Loss function: 6.293, Average Loss: 5.517, avg. samples / sec: 536.80
Iteration:   1340, Loss function: 5.959, Average Loss: 5.527, avg. samples / sec: 538.84
Iteration:   1360, Loss function: 5.986, Average Loss: 5.537, avg. samples / sec: 538.57
Iteration:   1380, Loss function: 6.039, Average Loss: 5.546, avg. samples / sec: 536.34
Iteration:   1400, Loss function: 6.226, Average Loss: 5.555, avg. samples / sec: 538.61
Iteration:   1420, Loss function: 5.920, Average Loss: 5.562, avg. samples / sec: 537.19
Iteration:   1440, Loss function: 6.304, Average Loss: 5.571, avg. samples / sec: 538.50
Iteration:   1460, Loss function: 6.167, Average Loss: 5.578, avg. samples / sec: 538.97
Iteration:   1480, Loss function: 6.172, Average Loss: 5.587, avg. samples / sec: 537.10
Iteration:   1500, Loss function: 6.079, Average Loss: 5.595, avg. samples / sec: 537.24
Iteration:   1520, Loss function: 6.343, Average Loss: 5.602, avg. samples / sec: 538.13
Iteration:   1540, Loss function: 5.989, Average Loss: 5.606, avg. samples / sec: 537.40
Iteration:   1560, Loss function: 5.561, Average Loss: 5.610, avg. samples / sec: 537.40
Iteration:   1580, Loss function: 5.721, Average Loss: 5.615, avg. samples / sec: 537.76
Iteration:   1600, Loss function: 5.906, Average Loss: 5.619, avg. samples / sec: 537.25
Iteration:   1620, Loss function: 5.672, Average Loss: 5.623, avg. samples / sec: 539.10
Iteration:   1640, Loss function: 5.940, Average Loss: 5.627, avg. samples / sec: 536.91
Iteration:   1660, Loss function: 6.067, Average Loss: 5.631, avg. samples / sec: 539.31
Iteration:   1680, Loss function: 5.832, Average Loss: 5.634, avg. samples / sec: 537.86
Iteration:   1700, Loss function: 5.425, Average Loss: 5.637, avg. samples / sec: 538.00
Iteration:   1720, Loss function: 5.726, Average Loss: 5.639, avg. samples / sec: 538.79
Iteration:   1740, Loss function: 5.782, Average Loss: 5.642, avg. samples / sec: 537.91
Iteration:   1760, Loss function: 5.508, Average Loss: 5.643, avg. samples / sec: 537.07
Iteration:   1780, Loss function: 5.792, Average Loss: 5.644, avg. samples / sec: 537.95
Iteration:   1800, Loss function: 5.739, Average Loss: 5.648, avg. samples / sec: 538.02
Iteration:   1820, Loss function: 6.015, Average Loss: 5.649, avg. samples / sec: 537.22
Iteration:   1840, Loss function: 6.035, Average Loss: 5.650, avg. samples / sec: 537.18
Iteration:   1860, Loss function: 5.593, Average Loss: 5.649, avg. samples / sec: 538.86
Iteration:   1880, Loss function: 5.791, Average Loss: 5.650, avg. samples / sec: 539.58
Iteration:   1900, Loss function: 6.070, Average Loss: 5.651, avg. samples / sec: 536.12
Iteration:   1920, Loss function: 5.761, Average Loss: 5.651, avg. samples / sec: 538.27
Iteration:   1940, Loss function: 5.813, Average Loss: 5.650, avg. samples / sec: 534.61
Iteration:   1960, Loss function: 5.749, Average Loss: 5.650, avg. samples / sec: 538.23
Iteration:   1980, Loss function: 5.653, Average Loss: 5.649, avg. samples / sec: 539.04
Iteration:   2000, Loss function: 5.483, Average Loss: 5.648, avg. samples / sec: 537.29
Iteration:   2020, Loss function: 5.726, Average Loss: 5.646, avg. samples / sec: 535.84
Iteration:   2040, Loss function: 5.872, Average Loss: 5.647, avg. samples / sec: 538.16
:::MLLOG {"namespace": "", "time_ms": 1639071603793, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071603794, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.501, Average Loss: 5.644, avg. samples / sec: 538.19
Iteration:   2080, Loss function: 5.199, Average Loss: 5.641, avg. samples / sec: 537.80
Iteration:   2100, Loss function: 5.522, Average Loss: 5.638, avg. samples / sec: 538.13
Iteration:   2120, Loss function: 5.248, Average Loss: 5.636, avg. samples / sec: 539.47
Iteration:   2140, Loss function: 5.574, Average Loss: 5.633, avg. samples / sec: 537.28
Iteration:   2160, Loss function: 5.282, Average Loss: 5.630, avg. samples / sec: 537.35
Iteration:   2180, Loss function: 5.177, Average Loss: 5.627, avg. samples / sec: 538.29
Iteration:   2200, Loss function: 5.528, Average Loss: 5.624, avg. samples / sec: 534.14
Iteration:   2220, Loss function: 5.532, Average Loss: 5.622, avg. samples / sec: 538.18
Iteration:   2240, Loss function: 5.430, Average Loss: 5.619, avg. samples / sec: 538.69
Iteration:   2260, Loss function: 5.545, Average Loss: 5.616, avg. samples / sec: 537.71
Iteration:   2280, Loss function: 5.234, Average Loss: 5.612, avg. samples / sec: 537.15
Iteration:   2300, Loss function: 5.091, Average Loss: 5.608, avg. samples / sec: 538.55
Iteration:   2320, Loss function: 5.262, Average Loss: 5.606, avg. samples / sec: 537.16
Iteration:   2340, Loss function: 5.517, Average Loss: 5.602, avg. samples / sec: 537.26
Iteration:   2360, Loss function: 5.225, Average Loss: 5.597, avg. samples / sec: 539.06
Iteration:   2380, Loss function: 5.385, Average Loss: 5.594, avg. samples / sec: 536.68
Iteration:   2400, Loss function: 5.608, Average Loss: 5.590, avg. samples / sec: 537.80
Iteration:   2420, Loss function: 5.463, Average Loss: 5.586, avg. samples / sec: 538.62
Iteration:   2440, Loss function: 5.427, Average Loss: 5.581, avg. samples / sec: 538.97
Iteration:   2460, Loss function: 5.266, Average Loss: 5.577, avg. samples / sec: 539.56
Iteration:   2480, Loss function: 5.395, Average Loss: 5.573, avg. samples / sec: 537.44
Iteration:   2500, Loss function: 5.486, Average Loss: 5.569, avg. samples / sec: 537.55
Iteration:   2520, Loss function: 5.368, Average Loss: 5.563, avg. samples / sec: 537.90
Iteration:   2540, Loss function: 5.357, Average Loss: 5.559, avg. samples / sec: 539.23
Iteration:   2560, Loss function: 5.244, Average Loss: 5.556, avg. samples / sec: 537.10
Iteration:   2580, Loss function: 5.541, Average Loss: 5.553, avg. samples / sec: 537.80
Iteration:   2600, Loss function: 5.387, Average Loss: 5.549, avg. samples / sec: 538.98
Iteration:   2620, Loss function: 5.319, Average Loss: 5.544, avg. samples / sec: 535.43
Iteration:   2640, Loss function: 5.287, Average Loss: 5.542, avg. samples / sec: 538.47
Iteration:   2660, Loss function: 5.157, Average Loss: 5.538, avg. samples / sec: 535.77
Iteration:   2680, Loss function: 5.247, Average Loss: 5.535, avg. samples / sec: 538.47
Iteration:   2700, Loss function: 5.151, Average Loss: 5.530, avg. samples / sec: 536.69
Iteration:   2720, Loss function: 5.356, Average Loss: 5.527, avg. samples / sec: 538.04
Iteration:   2740, Loss function: 5.084, Average Loss: 5.522, avg. samples / sec: 536.99
Iteration:   2760, Loss function: 5.028, Average Loss: 5.517, avg. samples / sec: 537.15
Iteration:   2780, Loss function: 5.457, Average Loss: 5.513, avg. samples / sec: 539.25
Iteration:   2800, Loss function: 5.226, Average Loss: 5.509, avg. samples / sec: 534.29
Iteration:   2820, Loss function: 5.537, Average Loss: 5.505, avg. samples / sec: 537.03
Iteration:   2840, Loss function: 5.062, Average Loss: 5.501, avg. samples / sec: 537.56
Iteration:   2860, Loss function: 5.285, Average Loss: 5.496, avg. samples / sec: 537.58
Iteration:   2880, Loss function: 5.262, Average Loss: 5.492, avg. samples / sec: 539.45
Iteration:   2900, Loss function: 5.104, Average Loss: 5.487, avg. samples / sec: 536.53
Iteration:   2920, Loss function: 5.378, Average Loss: 5.481, avg. samples / sec: 538.90
Iteration:   2940, Loss function: 4.928, Average Loss: 5.476, avg. samples / sec: 537.84
Iteration:   2960, Loss function: 5.493, Average Loss: 5.472, avg. samples / sec: 534.62
Iteration:   2980, Loss function: 5.236, Average Loss: 5.469, avg. samples / sec: 538.01
Iteration:   3000, Loss function: 5.257, Average Loss: 5.464, avg. samples / sec: 537.37
Iteration:   3020, Loss function: 5.101, Average Loss: 5.458, avg. samples / sec: 539.73
Iteration:   3040, Loss function: 5.199, Average Loss: 5.452, avg. samples / sec: 539.06
Iteration:   3060, Loss function: 5.067, Average Loss: 5.446, avg. samples / sec: 539.92
Iteration:   3080, Loss function: 4.927, Average Loss: 5.441, avg. samples / sec: 539.80
:::MLLOG {"namespace": "", "time_ms": 1639071821704, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071821705, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.248, Average Loss: 5.436, avg. samples / sec: 537.99
Iteration:   3120, Loss function: 5.093, Average Loss: 5.430, avg. samples / sec: 537.72
Iteration:   3140, Loss function: 5.186, Average Loss: 5.425, avg. samples / sec: 539.59
Iteration:   3160, Loss function: 5.414, Average Loss: 5.419, avg. samples / sec: 539.36
Iteration:   3180, Loss function: 5.082, Average Loss: 5.413, avg. samples / sec: 536.05
Iteration:   3200, Loss function: 5.221, Average Loss: 5.406, avg. samples / sec: 538.81
Iteration:   3220, Loss function: 5.210, Average Loss: 5.401, avg. samples / sec: 538.83
Iteration:   3240, Loss function: 5.186, Average Loss: 5.396, avg. samples / sec: 536.82
Iteration:   3260, Loss function: 5.129, Average Loss: 5.390, avg. samples / sec: 537.20
Iteration:   3280, Loss function: 4.741, Average Loss: 5.384, avg. samples / sec: 536.61
Iteration:   3300, Loss function: 4.822, Average Loss: 5.379, avg. samples / sec: 538.25
Iteration:   3320, Loss function: 4.934, Average Loss: 5.374, avg. samples / sec: 539.68
Iteration:   3340, Loss function: 5.273, Average Loss: 5.370, avg. samples / sec: 537.27
Iteration:   3360, Loss function: 5.195, Average Loss: 5.363, avg. samples / sec: 537.79
Iteration:   3380, Loss function: 5.231, Average Loss: 5.357, avg. samples / sec: 538.28
Iteration:   3400, Loss function: 4.874, Average Loss: 5.352, avg. samples / sec: 537.98
Iteration:   3420, Loss function: 5.035, Average Loss: 5.346, avg. samples / sec: 536.47
Iteration:   3440, Loss function: 5.079, Average Loss: 5.341, avg. samples / sec: 537.00
Iteration:   3460, Loss function: 5.223, Average Loss: 5.335, avg. samples / sec: 536.78
Iteration:   3480, Loss function: 5.265, Average Loss: 5.331, avg. samples / sec: 537.99
Iteration:   3500, Loss function: 5.195, Average Loss: 5.327, avg. samples / sec: 536.95
Iteration:   3520, Loss function: 4.979, Average Loss: 5.323, avg. samples / sec: 537.10
Iteration:   3540, Loss function: 4.921, Average Loss: 5.318, avg. samples / sec: 535.99
Iteration:   3560, Loss function: 5.033, Average Loss: 5.314, avg. samples / sec: 537.33
Iteration:   3580, Loss function: 5.062, Average Loss: 5.309, avg. samples / sec: 537.82
Iteration:   3600, Loss function: 5.327, Average Loss: 5.303, avg. samples / sec: 537.97
Iteration:   3620, Loss function: 4.869, Average Loss: 5.298, avg. samples / sec: 537.67
Iteration:   3640, Loss function: 4.795, Average Loss: 5.293, avg. samples / sec: 539.27
Iteration:   3660, Loss function: 5.036, Average Loss: 5.287, avg. samples / sec: 536.24
Iteration:   3680, Loss function: 4.955, Average Loss: 5.282, avg. samples / sec: 537.13
Iteration:   3700, Loss function: 5.066, Average Loss: 5.277, avg. samples / sec: 537.70
Iteration:   3720, Loss function: 4.962, Average Loss: 5.270, avg. samples / sec: 537.61
Iteration:   3740, Loss function: 5.178, Average Loss: 5.266, avg. samples / sec: 536.89
Iteration:   3760, Loss function: 5.168, Average Loss: 5.264, avg. samples / sec: 536.84
Iteration:   3780, Loss function: 5.009, Average Loss: 5.258, avg. samples / sec: 538.66
Iteration:   3800, Loss function: 5.056, Average Loss: 5.254, avg. samples / sec: 539.85
Iteration:   3820, Loss function: 5.151, Average Loss: 5.249, avg. samples / sec: 537.03
Iteration:   3840, Loss function: 4.772, Average Loss: 5.245, avg. samples / sec: 538.32
Iteration:   3860, Loss function: 4.823, Average Loss: 5.239, avg. samples / sec: 537.67
Iteration:   3880, Loss function: 4.853, Average Loss: 5.233, avg. samples / sec: 538.38
Iteration:   3900, Loss function: 5.283, Average Loss: 5.230, avg. samples / sec: 536.45
Iteration:   3920, Loss function: 5.201, Average Loss: 5.224, avg. samples / sec: 537.15
Iteration:   3940, Loss function: 5.045, Average Loss: 5.218, avg. samples / sec: 536.53
Iteration:   3960, Loss function: 4.775, Average Loss: 5.214, avg. samples / sec: 537.51
Iteration:   3980, Loss function: 4.908, Average Loss: 5.209, avg. samples / sec: 538.08
Iteration:   4000, Loss function: 5.029, Average Loss: 5.205, avg. samples / sec: 535.39
Iteration:   4020, Loss function: 5.103, Average Loss: 5.200, avg. samples / sec: 537.06
Iteration:   4040, Loss function: 5.056, Average Loss: 5.197, avg. samples / sec: 536.63
Iteration:   4060, Loss function: 5.129, Average Loss: 5.193, avg. samples / sec: 538.65
Iteration:   4080, Loss function: 5.052, Average Loss: 5.189, avg. samples / sec: 539.18
Iteration:   4100, Loss function: 5.193, Average Loss: 5.186, avg. samples / sec: 537.65
:::MLLOG {"namespace": "", "time_ms": 1639072039915, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072039916, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.151, Average Loss: 5.182, avg. samples / sec: 537.20
Iteration:   4140, Loss function: 4.883, Average Loss: 5.177, avg. samples / sec: 537.69
Iteration:   4160, Loss function: 4.904, Average Loss: 5.170, avg. samples / sec: 537.22
Iteration:   4180, Loss function: 4.914, Average Loss: 5.164, avg. samples / sec: 537.94
Iteration:   4200, Loss function: 4.906, Average Loss: 5.160, avg. samples / sec: 537.73
Iteration:   4220, Loss function: 4.875, Average Loss: 5.155, avg. samples / sec: 537.38
Iteration:   4240, Loss function: 4.864, Average Loss: 5.150, avg. samples / sec: 537.66
Iteration:   4260, Loss function: 5.000, Average Loss: 5.144, avg. samples / sec: 538.53
Iteration:   4280, Loss function: 5.017, Average Loss: 5.138, avg. samples / sec: 537.40
Iteration:   4300, Loss function: 4.681, Average Loss: 5.133, avg. samples / sec: 538.80
Iteration:   4320, Loss function: 4.679, Average Loss: 5.127, avg. samples / sec: 535.09
Iteration:   4340, Loss function: 4.686, Average Loss: 5.122, avg. samples / sec: 535.80
Iteration:   4360, Loss function: 4.865, Average Loss: 5.118, avg. samples / sec: 538.67
Iteration:   4380, Loss function: 5.095, Average Loss: 5.114, avg. samples / sec: 536.54
Iteration:   4400, Loss function: 4.706, Average Loss: 5.110, avg. samples / sec: 538.06
Iteration:   4420, Loss function: 5.056, Average Loss: 5.106, avg. samples / sec: 538.10
Iteration:   4440, Loss function: 4.688, Average Loss: 5.101, avg. samples / sec: 537.77
Iteration:   4460, Loss function: 5.058, Average Loss: 5.096, avg. samples / sec: 538.99
Iteration:   4480, Loss function: 4.814, Average Loss: 5.093, avg. samples / sec: 538.30
Iteration:   4500, Loss function: 4.715, Average Loss: 5.089, avg. samples / sec: 537.26
Iteration:   4520, Loss function: 4.640, Average Loss: 5.084, avg. samples / sec: 537.23
Iteration:   4540, Loss function: 5.174, Average Loss: 5.080, avg. samples / sec: 538.13
Iteration:   4560, Loss function: 4.703, Average Loss: 5.076, avg. samples / sec: 538.72
Iteration:   4580, Loss function: 4.705, Average Loss: 5.072, avg. samples / sec: 537.34
Iteration:   4600, Loss function: 4.955, Average Loss: 5.069, avg. samples / sec: 535.13
Iteration:   4620, Loss function: 4.740, Average Loss: 5.065, avg. samples / sec: 537.97
Iteration:   4640, Loss function: 4.528, Average Loss: 5.060, avg. samples / sec: 537.20
Iteration:   4660, Loss function: 4.599, Average Loss: 5.055, avg. samples / sec: 538.47
Iteration:   4680, Loss function: 5.189, Average Loss: 5.051, avg. samples / sec: 538.48
Iteration:   4700, Loss function: 4.739, Average Loss: 5.047, avg. samples / sec: 538.29
Iteration:   4720, Loss function: 4.601, Average Loss: 5.042, avg. samples / sec: 537.52
Iteration:   4740, Loss function: 4.859, Average Loss: 5.039, avg. samples / sec: 537.75
Iteration:   4760, Loss function: 4.610, Average Loss: 5.036, avg. samples / sec: 536.47
Iteration:   4780, Loss function: 5.071, Average Loss: 5.032, avg. samples / sec: 537.77
Iteration:   4800, Loss function: 5.030, Average Loss: 5.030, avg. samples / sec: 536.75
Iteration:   4820, Loss function: 4.699, Average Loss: 5.027, avg. samples / sec: 537.87
Iteration:   4840, Loss function: 5.183, Average Loss: 5.023, avg. samples / sec: 538.31
Iteration:   4860, Loss function: 4.634, Average Loss: 5.018, avg. samples / sec: 537.90
Iteration:   4880, Loss function: 5.213, Average Loss: 5.015, avg. samples / sec: 536.54
Iteration:   4900, Loss function: 4.579, Average Loss: 5.012, avg. samples / sec: 535.78
Iteration:   4920, Loss function: 4.831, Average Loss: 5.010, avg. samples / sec: 538.21
Iteration:   4940, Loss function: 4.879, Average Loss: 5.006, avg. samples / sec: 537.36
Iteration:   4960, Loss function: 4.561, Average Loss: 5.003, avg. samples / sec: 538.91
Iteration:   4980, Loss function: 4.676, Average Loss: 4.999, avg. samples / sec: 537.64
Iteration:   5000, Loss function: 4.768, Average Loss: 4.996, avg. samples / sec: 537.72
Iteration:   5020, Loss function: 5.259, Average Loss: 4.993, avg. samples / sec: 538.30
Iteration:   5040, Loss function: 4.759, Average Loss: 4.991, avg. samples / sec: 539.08
Iteration:   5060, Loss function: 4.768, Average Loss: 4.988, avg. samples / sec: 537.82
Iteration:   5080, Loss function: 4.478, Average Loss: 4.984, avg. samples / sec: 538.47
Iteration:   5100, Loss function: 4.759, Average Loss: 4.981, avg. samples / sec: 536.96
Iteration:   5120, Loss function: 4.618, Average Loss: 4.978, avg. samples / sec: 538.53
Iteration:   5140, Loss function: 4.730, Average Loss: 4.974, avg. samples / sec: 538.48
:::MLLOG {"namespace": "", "time_ms": 1639072258088, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.22 s
:::MLLOG {"namespace": "", "time_ms": 1639072288391, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072288431, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072288431, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.76s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10746
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22079
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09518
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19349
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13738
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10746 AP goal: 0.10000
Iteration:   5160, Loss function: 4.871, Average Loss: 4.970, avg. samples / sec: 66.06
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1074598937344522, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072292172, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
+ [[ fast == \d\r\y ]]
++ date
+ echo 'Thu Dec  9 17:51:33 UTC 2021: done waiting for 1 executions'
Thu Dec  9 17:51:33 UTC 2021: done waiting for 1 executions
+ ls /tmp/ssd_all.log
/tmp/ssd_all.log
+ grep . /tmp/ssd_all.log
:::MLLOG {"namespace": "", "time_ms": 1639071116788, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train.py", "lineno": 434}}
:::MLLOG {"namespace": "", "time_ms": 1639071116901, "event_type": "POINT_IN_TIME", "key": "seed", "value": 1326086835, "metadata": {"file": "/workspace/single_stage_detector/mlperf_logger.py", "lineno": 92}}
0 Using seed = 1326086835
:::MLLOG {"namespace": "", "time_ms": 1639071118700, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 114, "metadata": {"file": "train.py", "lineno": 170}}
:::MLLOG {"namespace": "", "time_ms": 1639071118701, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 114, "metadata": {"file": "train.py", "lineno": 171}}
Selected optimization level O2:  FP16 training with FP32 batchnorm and FP32 master weights.
Defaults for this optimization level are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : dynamic
Processing user overrides (additional kwargs that are not None)...
After processing overrides, optimization options are:
enabled                : True
opt_level              : O2
cast_model_type        : torch.float16
patch_torch_functions  : False
keep_batchnorm_fp32    : True
master_weights         : True
loss_scale             : 128.0
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_base_learning_rate", "value": 0.0125, "metadata": {"file": "train.py", "lineno": 199}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_boundary_epochs", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 200}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_decay_steps", "value": [44, 55], "metadata": {"file": "train.py", "lineno": 201}}
:::MLLOG {"namespace": "", "time_ms": 1639071118705, "event_type": "POINT_IN_TIME", "key": "opt_weight_decay", "value": 0.00013, "metadata": {"file": "train.py", "lineno": 202}}
:::MLLOG {"namespace": "", "time_ms": 1639071118706, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_steps", "value": 650, "metadata": {"file": "train.py", "lineno": 204}}
:::MLLOG {"namespace": "", "time_ms": 1639071118706, "event_type": "POINT_IN_TIME", "key": "opt_learning_rate_warmup_factor", "value": 0, "metadata": {"file": "train.py", "lineno": 205}}
epoch nbatch loss
:::MLLOG {"namespace": "", "time_ms": 1639071164741, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train.py", "lineno": 267}}
:::MLLOG {"namespace": "", "time_ms": 1639071164741, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "train.py", "lineno": 274}}
:::MLLOG {"namespace": "", "time_ms": 1639071166029, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 117266, "metadata": {"file": "/workspace/single_stage_detector/data/build_pipeline.py", "lineno": 48}}
epoch size is:  117266  images
:::MLLOG {"namespace": "", "time_ms": 1639071166029, "event_type": "POINT_IN_TIME", "key": "max_samples", "value": 1, "metadata": {"file": "/workspace/single_stage_detector/utils.py", "lineno": 156}}
loading annotations into memory...
Done (t=0.12s)
creating index...
:::MLLOG {"namespace": "", "time_ms": 1639071166322, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 4952, "metadata": {"file": "/workspace/single_stage_detector/data/native_pipeline.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1639071166323, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 293, "first_epoch_num": 1, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639071166324, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 1, "current_iter_num": 0}}
Iteration:      0, Loss function: 22.983, Average Loss: 0.023, avg. samples / sec: 2.41
Iteration:     20, Loss function: 21.107, Average Loss: 0.456, avg. samples / sec: 447.22
Iteration:     40, Loss function: 20.774, Average Loss: 0.858, avg. samples / sec: 533.28
Iteration:     60, Loss function: 20.309, Average Loss: 1.247, avg. samples / sec: 535.16
Iteration:     80, Loss function: 20.022, Average Loss: 1.622, avg. samples / sec: 536.56
Iteration:    100, Loss function: 16.772, Average Loss: 1.962, avg. samples / sec: 537.46
Iteration:    120, Loss function: 11.282, Average Loss: 2.184, avg. samples / sec: 536.58
Iteration:    140, Loss function: 10.062, Average Loss: 2.347, avg. samples / sec: 535.84
Iteration:    160, Loss function: 9.124, Average Loss: 2.489, avg. samples / sec: 535.95
Iteration:    180, Loss function: 8.877, Average Loss: 2.618, avg. samples / sec: 536.59
Iteration:    200, Loss function: 8.748, Average Loss: 2.743, avg. samples / sec: 536.75
Iteration:    220, Loss function: 8.496, Average Loss: 2.863, avg. samples / sec: 538.80
Iteration:    240, Loss function: 8.351, Average Loss: 2.977, avg. samples / sec: 539.51
Iteration:    260, Loss function: 8.914, Average Loss: 3.089, avg. samples / sec: 537.81
Iteration:    280, Loss function: 8.718, Average Loss: 3.204, avg. samples / sec: 537.33
Iteration:    300, Loss function: 8.479, Average Loss: 3.311, avg. samples / sec: 536.77
Iteration:    320, Loss function: 8.342, Average Loss: 3.410, avg. samples / sec: 517.12
Iteration:    340, Loss function: 8.171, Average Loss: 3.507, avg. samples / sec: 537.39
Iteration:    360, Loss function: 7.845, Average Loss: 3.599, avg. samples / sec: 536.95
Iteration:    380, Loss function: 8.014, Average Loss: 3.688, avg. samples / sec: 537.07
Iteration:    400, Loss function: 7.963, Average Loss: 3.772, avg. samples / sec: 538.26
Iteration:    420, Loss function: 7.555, Average Loss: 3.853, avg. samples / sec: 534.97
Iteration:    440, Loss function: 7.858, Average Loss: 3.932, avg. samples / sec: 537.59
Iteration:    460, Loss function: 7.792, Average Loss: 4.008, avg. samples / sec: 538.93
Iteration:    480, Loss function: 7.394, Average Loss: 4.082, avg. samples / sec: 537.15
Iteration:    500, Loss function: 7.538, Average Loss: 4.153, avg. samples / sec: 537.11
Iteration:    520, Loss function: 7.441, Average Loss: 4.222, avg. samples / sec: 539.23
Iteration:    540, Loss function: 7.550, Average Loss: 4.287, avg. samples / sec: 534.95
Iteration:    560, Loss function: 7.103, Average Loss: 4.349, avg. samples / sec: 538.48
Iteration:    580, Loss function: 7.235, Average Loss: 4.409, avg. samples / sec: 536.13
Iteration:    600, Loss function: 7.361, Average Loss: 4.467, avg. samples / sec: 533.40
Iteration:    620, Loss function: 7.293, Average Loss: 4.523, avg. samples / sec: 534.82
Iteration:    640, Loss function: 7.017, Average Loss: 4.577, avg. samples / sec: 539.19
Iteration:    660, Loss function: 7.119, Average Loss: 4.629, avg. samples / sec: 536.67
Iteration:    680, Loss function: 7.305, Average Loss: 4.680, avg. samples / sec: 539.25
Iteration:    700, Loss function: 6.861, Average Loss: 4.727, avg. samples / sec: 538.47
Iteration:    720, Loss function: 7.052, Average Loss: 4.776, avg. samples / sec: 537.57
Iteration:    740, Loss function: 6.856, Average Loss: 4.820, avg. samples / sec: 538.39
Iteration:    760, Loss function: 7.059, Average Loss: 4.862, avg. samples / sec: 536.42
Iteration:    780, Loss function: 6.957, Average Loss: 4.904, avg. samples / sec: 536.06
Iteration:    800, Loss function: 7.144, Average Loss: 4.941, avg. samples / sec: 538.02
Iteration:    820, Loss function: 6.718, Average Loss: 4.978, avg. samples / sec: 539.18
Iteration:    840, Loss function: 6.817, Average Loss: 5.014, avg. samples / sec: 538.16
Iteration:    860, Loss function: 6.943, Average Loss: 5.048, avg. samples / sec: 537.76
Iteration:    880, Loss function: 6.526, Average Loss: 5.080, avg. samples / sec: 539.59
Iteration:    900, Loss function: 6.666, Average Loss: 5.110, avg. samples / sec: 537.30
Iteration:    920, Loss function: 6.567, Average Loss: 5.139, avg. samples / sec: 534.89
Iteration:    940, Loss function: 6.836, Average Loss: 5.168, avg. samples / sec: 536.25
Iteration:    960, Loss function: 6.441, Average Loss: 5.196, avg. samples / sec: 536.66
Iteration:    980, Loss function: 6.419, Average Loss: 5.224, avg. samples / sec: 538.94
Iteration:   1000, Loss function: 6.660, Average Loss: 5.248, avg. samples / sec: 537.95
Iteration:   1020, Loss function: 6.216, Average Loss: 5.271, avg. samples / sec: 536.51
:::MLLOG {"namespace": "", "time_ms": 1639071385625, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639071385626, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 2, "current_iter_num": 1029}}
Iteration:   1040, Loss function: 6.405, Average Loss: 5.294, avg. samples / sec: 536.93
Iteration:   1060, Loss function: 6.333, Average Loss: 5.317, avg. samples / sec: 538.20
Iteration:   1080, Loss function: 6.416, Average Loss: 5.338, avg. samples / sec: 536.90
Iteration:   1100, Loss function: 6.060, Average Loss: 5.357, avg. samples / sec: 536.96
Iteration:   1120, Loss function: 6.295, Average Loss: 5.377, avg. samples / sec: 538.14
Iteration:   1140, Loss function: 6.327, Average Loss: 5.395, avg. samples / sec: 536.97
Iteration:   1160, Loss function: 6.152, Average Loss: 5.411, avg. samples / sec: 537.73
Iteration:   1180, Loss function: 6.145, Average Loss: 5.427, avg. samples / sec: 538.14
Iteration:   1200, Loss function: 6.166, Average Loss: 5.442, avg. samples / sec: 537.12
Iteration:   1220, Loss function: 6.102, Average Loss: 5.457, avg. samples / sec: 537.51
Iteration:   1240, Loss function: 5.959, Average Loss: 5.470, avg. samples / sec: 536.38
Iteration:   1260, Loss function: 6.057, Average Loss: 5.481, avg. samples / sec: 538.46
Iteration:   1280, Loss function: 5.964, Average Loss: 5.494, avg. samples / sec: 537.70
Iteration:   1300, Loss function: 6.103, Average Loss: 5.505, avg. samples / sec: 537.18
Iteration:   1320, Loss function: 6.293, Average Loss: 5.517, avg. samples / sec: 536.80
Iteration:   1340, Loss function: 5.959, Average Loss: 5.527, avg. samples / sec: 538.84
Iteration:   1360, Loss function: 5.986, Average Loss: 5.537, avg. samples / sec: 538.57
Iteration:   1380, Loss function: 6.039, Average Loss: 5.546, avg. samples / sec: 536.34
Iteration:   1400, Loss function: 6.226, Average Loss: 5.555, avg. samples / sec: 538.61
Iteration:   1420, Loss function: 5.920, Average Loss: 5.562, avg. samples / sec: 537.19
Iteration:   1440, Loss function: 6.304, Average Loss: 5.571, avg. samples / sec: 538.50
Iteration:   1460, Loss function: 6.167, Average Loss: 5.578, avg. samples / sec: 538.97
Iteration:   1480, Loss function: 6.172, Average Loss: 5.587, avg. samples / sec: 537.10
Iteration:   1500, Loss function: 6.079, Average Loss: 5.595, avg. samples / sec: 537.24
Iteration:   1520, Loss function: 6.343, Average Loss: 5.602, avg. samples / sec: 538.13
Iteration:   1540, Loss function: 5.989, Average Loss: 5.606, avg. samples / sec: 537.40
Iteration:   1560, Loss function: 5.561, Average Loss: 5.610, avg. samples / sec: 537.40
Iteration:   1580, Loss function: 5.721, Average Loss: 5.615, avg. samples / sec: 537.76
Iteration:   1600, Loss function: 5.906, Average Loss: 5.619, avg. samples / sec: 537.25
Iteration:   1620, Loss function: 5.672, Average Loss: 5.623, avg. samples / sec: 539.10
Iteration:   1640, Loss function: 5.940, Average Loss: 5.627, avg. samples / sec: 536.91
Iteration:   1660, Loss function: 6.067, Average Loss: 5.631, avg. samples / sec: 539.31
Iteration:   1680, Loss function: 5.832, Average Loss: 5.634, avg. samples / sec: 537.86
Iteration:   1700, Loss function: 5.425, Average Loss: 5.637, avg. samples / sec: 538.00
Iteration:   1720, Loss function: 5.726, Average Loss: 5.639, avg. samples / sec: 538.79
Iteration:   1740, Loss function: 5.782, Average Loss: 5.642, avg. samples / sec: 537.91
Iteration:   1760, Loss function: 5.508, Average Loss: 5.643, avg. samples / sec: 537.07
Iteration:   1780, Loss function: 5.792, Average Loss: 5.644, avg. samples / sec: 537.95
Iteration:   1800, Loss function: 5.739, Average Loss: 5.648, avg. samples / sec: 538.02
Iteration:   1820, Loss function: 6.015, Average Loss: 5.649, avg. samples / sec: 537.22
Iteration:   1840, Loss function: 6.035, Average Loss: 5.650, avg. samples / sec: 537.18
Iteration:   1860, Loss function: 5.593, Average Loss: 5.649, avg. samples / sec: 538.86
Iteration:   1880, Loss function: 5.791, Average Loss: 5.650, avg. samples / sec: 539.58
Iteration:   1900, Loss function: 6.070, Average Loss: 5.651, avg. samples / sec: 536.12
Iteration:   1920, Loss function: 5.761, Average Loss: 5.651, avg. samples / sec: 538.27
Iteration:   1940, Loss function: 5.813, Average Loss: 5.650, avg. samples / sec: 534.61
Iteration:   1960, Loss function: 5.749, Average Loss: 5.650, avg. samples / sec: 538.23
Iteration:   1980, Loss function: 5.653, Average Loss: 5.649, avg. samples / sec: 539.04
Iteration:   2000, Loss function: 5.483, Average Loss: 5.648, avg. samples / sec: 537.29
Iteration:   2020, Loss function: 5.726, Average Loss: 5.646, avg. samples / sec: 535.84
Iteration:   2040, Loss function: 5.872, Average Loss: 5.647, avg. samples / sec: 538.16
:::MLLOG {"namespace": "", "time_ms": 1639071603793, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 2}}
:::MLLOG {"namespace": "", "time_ms": 1639071603794, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 3, "current_iter_num": 2058}}
Iteration:   2060, Loss function: 5.501, Average Loss: 5.644, avg. samples / sec: 538.19
Iteration:   2080, Loss function: 5.199, Average Loss: 5.641, avg. samples / sec: 537.80
Iteration:   2100, Loss function: 5.522, Average Loss: 5.638, avg. samples / sec: 538.13
Iteration:   2120, Loss function: 5.248, Average Loss: 5.636, avg. samples / sec: 539.47
Iteration:   2140, Loss function: 5.574, Average Loss: 5.633, avg. samples / sec: 537.28
Iteration:   2160, Loss function: 5.282, Average Loss: 5.630, avg. samples / sec: 537.35
Iteration:   2180, Loss function: 5.177, Average Loss: 5.627, avg. samples / sec: 538.29
Iteration:   2200, Loss function: 5.528, Average Loss: 5.624, avg. samples / sec: 534.14
Iteration:   2220, Loss function: 5.532, Average Loss: 5.622, avg. samples / sec: 538.18
Iteration:   2240, Loss function: 5.430, Average Loss: 5.619, avg. samples / sec: 538.69
Iteration:   2260, Loss function: 5.545, Average Loss: 5.616, avg. samples / sec: 537.71
Iteration:   2280, Loss function: 5.234, Average Loss: 5.612, avg. samples / sec: 537.15
Iteration:   2300, Loss function: 5.091, Average Loss: 5.608, avg. samples / sec: 538.55
Iteration:   2320, Loss function: 5.262, Average Loss: 5.606, avg. samples / sec: 537.16
Iteration:   2340, Loss function: 5.517, Average Loss: 5.602, avg. samples / sec: 537.26
Iteration:   2360, Loss function: 5.225, Average Loss: 5.597, avg. samples / sec: 539.06
Iteration:   2380, Loss function: 5.385, Average Loss: 5.594, avg. samples / sec: 536.68
Iteration:   2400, Loss function: 5.608, Average Loss: 5.590, avg. samples / sec: 537.80
Iteration:   2420, Loss function: 5.463, Average Loss: 5.586, avg. samples / sec: 538.62
Iteration:   2440, Loss function: 5.427, Average Loss: 5.581, avg. samples / sec: 538.97
Iteration:   2460, Loss function: 5.266, Average Loss: 5.577, avg. samples / sec: 539.56
Iteration:   2480, Loss function: 5.395, Average Loss: 5.573, avg. samples / sec: 537.44
Iteration:   2500, Loss function: 5.486, Average Loss: 5.569, avg. samples / sec: 537.55
Iteration:   2520, Loss function: 5.368, Average Loss: 5.563, avg. samples / sec: 537.90
Iteration:   2540, Loss function: 5.357, Average Loss: 5.559, avg. samples / sec: 539.23
Iteration:   2560, Loss function: 5.244, Average Loss: 5.556, avg. samples / sec: 537.10
Iteration:   2580, Loss function: 5.541, Average Loss: 5.553, avg. samples / sec: 537.80
Iteration:   2600, Loss function: 5.387, Average Loss: 5.549, avg. samples / sec: 538.98
Iteration:   2620, Loss function: 5.319, Average Loss: 5.544, avg. samples / sec: 535.43
Iteration:   2640, Loss function: 5.287, Average Loss: 5.542, avg. samples / sec: 538.47
Iteration:   2660, Loss function: 5.157, Average Loss: 5.538, avg. samples / sec: 535.77
Iteration:   2680, Loss function: 5.247, Average Loss: 5.535, avg. samples / sec: 538.47
Iteration:   2700, Loss function: 5.151, Average Loss: 5.530, avg. samples / sec: 536.69
Iteration:   2720, Loss function: 5.356, Average Loss: 5.527, avg. samples / sec: 538.04
Iteration:   2740, Loss function: 5.084, Average Loss: 5.522, avg. samples / sec: 536.99
Iteration:   2760, Loss function: 5.028, Average Loss: 5.517, avg. samples / sec: 537.15
Iteration:   2780, Loss function: 5.457, Average Loss: 5.513, avg. samples / sec: 539.25
Iteration:   2800, Loss function: 5.226, Average Loss: 5.509, avg. samples / sec: 534.29
Iteration:   2820, Loss function: 5.537, Average Loss: 5.505, avg. samples / sec: 537.03
Iteration:   2840, Loss function: 5.062, Average Loss: 5.501, avg. samples / sec: 537.56
Iteration:   2860, Loss function: 5.285, Average Loss: 5.496, avg. samples / sec: 537.58
Iteration:   2880, Loss function: 5.262, Average Loss: 5.492, avg. samples / sec: 539.45
Iteration:   2900, Loss function: 5.104, Average Loss: 5.487, avg. samples / sec: 536.53
Iteration:   2920, Loss function: 5.378, Average Loss: 5.481, avg. samples / sec: 538.90
Iteration:   2940, Loss function: 4.928, Average Loss: 5.476, avg. samples / sec: 537.84
Iteration:   2960, Loss function: 5.493, Average Loss: 5.472, avg. samples / sec: 534.62
Iteration:   2980, Loss function: 5.236, Average Loss: 5.469, avg. samples / sec: 538.01
Iteration:   3000, Loss function: 5.257, Average Loss: 5.464, avg. samples / sec: 537.37
Iteration:   3020, Loss function: 5.101, Average Loss: 5.458, avg. samples / sec: 539.73
Iteration:   3040, Loss function: 5.199, Average Loss: 5.452, avg. samples / sec: 539.06
Iteration:   3060, Loss function: 5.067, Average Loss: 5.446, avg. samples / sec: 539.92
Iteration:   3080, Loss function: 4.927, Average Loss: 5.441, avg. samples / sec: 539.80
:::MLLOG {"namespace": "", "time_ms": 1639071821704, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1639071821705, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 4, "current_iter_num": 3086}}
Iteration:   3100, Loss function: 5.248, Average Loss: 5.436, avg. samples / sec: 537.99
Iteration:   3120, Loss function: 5.093, Average Loss: 5.430, avg. samples / sec: 537.72
Iteration:   3140, Loss function: 5.186, Average Loss: 5.425, avg. samples / sec: 539.59
Iteration:   3160, Loss function: 5.414, Average Loss: 5.419, avg. samples / sec: 539.36
Iteration:   3180, Loss function: 5.082, Average Loss: 5.413, avg. samples / sec: 536.05
Iteration:   3200, Loss function: 5.221, Average Loss: 5.406, avg. samples / sec: 538.81
Iteration:   3220, Loss function: 5.210, Average Loss: 5.401, avg. samples / sec: 538.83
Iteration:   3240, Loss function: 5.186, Average Loss: 5.396, avg. samples / sec: 536.82
Iteration:   3260, Loss function: 5.129, Average Loss: 5.390, avg. samples / sec: 537.20
Iteration:   3280, Loss function: 4.741, Average Loss: 5.384, avg. samples / sec: 536.61
Iteration:   3300, Loss function: 4.822, Average Loss: 5.379, avg. samples / sec: 538.25
Iteration:   3320, Loss function: 4.934, Average Loss: 5.374, avg. samples / sec: 539.68
Iteration:   3340, Loss function: 5.273, Average Loss: 5.370, avg. samples / sec: 537.27
Iteration:   3360, Loss function: 5.195, Average Loss: 5.363, avg. samples / sec: 537.79
Iteration:   3380, Loss function: 5.231, Average Loss: 5.357, avg. samples / sec: 538.28
Iteration:   3400, Loss function: 4.874, Average Loss: 5.352, avg. samples / sec: 537.98
Iteration:   3420, Loss function: 5.035, Average Loss: 5.346, avg. samples / sec: 536.47
Iteration:   3440, Loss function: 5.079, Average Loss: 5.341, avg. samples / sec: 537.00
Iteration:   3460, Loss function: 5.223, Average Loss: 5.335, avg. samples / sec: 536.78
Iteration:   3480, Loss function: 5.265, Average Loss: 5.331, avg. samples / sec: 537.99
Iteration:   3500, Loss function: 5.195, Average Loss: 5.327, avg. samples / sec: 536.95
Iteration:   3520, Loss function: 4.979, Average Loss: 5.323, avg. samples / sec: 537.10
Iteration:   3540, Loss function: 4.921, Average Loss: 5.318, avg. samples / sec: 535.99
Iteration:   3560, Loss function: 5.033, Average Loss: 5.314, avg. samples / sec: 537.33
Iteration:   3580, Loss function: 5.062, Average Loss: 5.309, avg. samples / sec: 537.82
Iteration:   3600, Loss function: 5.327, Average Loss: 5.303, avg. samples / sec: 537.97
Iteration:   3620, Loss function: 4.869, Average Loss: 5.298, avg. samples / sec: 537.67
Iteration:   3640, Loss function: 4.795, Average Loss: 5.293, avg. samples / sec: 539.27
Iteration:   3660, Loss function: 5.036, Average Loss: 5.287, avg. samples / sec: 536.24
Iteration:   3680, Loss function: 4.955, Average Loss: 5.282, avg. samples / sec: 537.13
Iteration:   3700, Loss function: 5.066, Average Loss: 5.277, avg. samples / sec: 537.70
Iteration:   3720, Loss function: 4.962, Average Loss: 5.270, avg. samples / sec: 537.61
Iteration:   3740, Loss function: 5.178, Average Loss: 5.266, avg. samples / sec: 536.89
Iteration:   3760, Loss function: 5.168, Average Loss: 5.264, avg. samples / sec: 536.84
Iteration:   3780, Loss function: 5.009, Average Loss: 5.258, avg. samples / sec: 538.66
Iteration:   3800, Loss function: 5.056, Average Loss: 5.254, avg. samples / sec: 539.85
Iteration:   3820, Loss function: 5.151, Average Loss: 5.249, avg. samples / sec: 537.03
Iteration:   3840, Loss function: 4.772, Average Loss: 5.245, avg. samples / sec: 538.32
Iteration:   3860, Loss function: 4.823, Average Loss: 5.239, avg. samples / sec: 537.67
Iteration:   3880, Loss function: 4.853, Average Loss: 5.233, avg. samples / sec: 538.38
Iteration:   3900, Loss function: 5.283, Average Loss: 5.230, avg. samples / sec: 536.45
Iteration:   3920, Loss function: 5.201, Average Loss: 5.224, avg. samples / sec: 537.15
Iteration:   3940, Loss function: 5.045, Average Loss: 5.218, avg. samples / sec: 536.53
Iteration:   3960, Loss function: 4.775, Average Loss: 5.214, avg. samples / sec: 537.51
Iteration:   3980, Loss function: 4.908, Average Loss: 5.209, avg. samples / sec: 538.08
Iteration:   4000, Loss function: 5.029, Average Loss: 5.205, avg. samples / sec: 535.39
Iteration:   4020, Loss function: 5.103, Average Loss: 5.200, avg. samples / sec: 537.06
Iteration:   4040, Loss function: 5.056, Average Loss: 5.197, avg. samples / sec: 536.63
Iteration:   4060, Loss function: 5.129, Average Loss: 5.193, avg. samples / sec: 538.65
Iteration:   4080, Loss function: 5.052, Average Loss: 5.189, avg. samples / sec: 539.18
Iteration:   4100, Loss function: 5.193, Average Loss: 5.186, avg. samples / sec: 537.65
:::MLLOG {"namespace": "", "time_ms": 1639072039915, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1639072039916, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 5, "current_iter_num": 4115}}
Iteration:   4120, Loss function: 5.151, Average Loss: 5.182, avg. samples / sec: 537.20
Iteration:   4140, Loss function: 4.883, Average Loss: 5.177, avg. samples / sec: 537.69
Iteration:   4160, Loss function: 4.904, Average Loss: 5.170, avg. samples / sec: 537.22
Iteration:   4180, Loss function: 4.914, Average Loss: 5.164, avg. samples / sec: 537.94
Iteration:   4200, Loss function: 4.906, Average Loss: 5.160, avg. samples / sec: 537.73
Iteration:   4220, Loss function: 4.875, Average Loss: 5.155, avg. samples / sec: 537.38
Iteration:   4240, Loss function: 4.864, Average Loss: 5.150, avg. samples / sec: 537.66
Iteration:   4260, Loss function: 5.000, Average Loss: 5.144, avg. samples / sec: 538.53
Iteration:   4280, Loss function: 5.017, Average Loss: 5.138, avg. samples / sec: 537.40
Iteration:   4300, Loss function: 4.681, Average Loss: 5.133, avg. samples / sec: 538.80
Iteration:   4320, Loss function: 4.679, Average Loss: 5.127, avg. samples / sec: 535.09
Iteration:   4340, Loss function: 4.686, Average Loss: 5.122, avg. samples / sec: 535.80
Iteration:   4360, Loss function: 4.865, Average Loss: 5.118, avg. samples / sec: 538.67
Iteration:   4380, Loss function: 5.095, Average Loss: 5.114, avg. samples / sec: 536.54
Iteration:   4400, Loss function: 4.706, Average Loss: 5.110, avg. samples / sec: 538.06
Iteration:   4420, Loss function: 5.056, Average Loss: 5.106, avg. samples / sec: 538.10
Iteration:   4440, Loss function: 4.688, Average Loss: 5.101, avg. samples / sec: 537.77
Iteration:   4460, Loss function: 5.058, Average Loss: 5.096, avg. samples / sec: 538.99
Iteration:   4480, Loss function: 4.814, Average Loss: 5.093, avg. samples / sec: 538.30
Iteration:   4500, Loss function: 4.715, Average Loss: 5.089, avg. samples / sec: 537.26
Iteration:   4520, Loss function: 4.640, Average Loss: 5.084, avg. samples / sec: 537.23
Iteration:   4540, Loss function: 5.174, Average Loss: 5.080, avg. samples / sec: 538.13
Iteration:   4560, Loss function: 4.703, Average Loss: 5.076, avg. samples / sec: 538.72
Iteration:   4580, Loss function: 4.705, Average Loss: 5.072, avg. samples / sec: 537.34
Iteration:   4600, Loss function: 4.955, Average Loss: 5.069, avg. samples / sec: 535.13
Iteration:   4620, Loss function: 4.740, Average Loss: 5.065, avg. samples / sec: 537.97
Iteration:   4640, Loss function: 4.528, Average Loss: 5.060, avg. samples / sec: 537.20
Iteration:   4660, Loss function: 4.599, Average Loss: 5.055, avg. samples / sec: 538.47
Iteration:   4680, Loss function: 5.189, Average Loss: 5.051, avg. samples / sec: 538.48
Iteration:   4700, Loss function: 4.739, Average Loss: 5.047, avg. samples / sec: 538.29
Iteration:   4720, Loss function: 4.601, Average Loss: 5.042, avg. samples / sec: 537.52
Iteration:   4740, Loss function: 4.859, Average Loss: 5.039, avg. samples / sec: 537.75
Iteration:   4760, Loss function: 4.610, Average Loss: 5.036, avg. samples / sec: 536.47
Iteration:   4780, Loss function: 5.071, Average Loss: 5.032, avg. samples / sec: 537.77
Iteration:   4800, Loss function: 5.030, Average Loss: 5.030, avg. samples / sec: 536.75
Iteration:   4820, Loss function: 4.699, Average Loss: 5.027, avg. samples / sec: 537.87
Iteration:   4840, Loss function: 5.183, Average Loss: 5.023, avg. samples / sec: 538.31
Iteration:   4860, Loss function: 4.634, Average Loss: 5.018, avg. samples / sec: 537.90
Iteration:   4880, Loss function: 5.213, Average Loss: 5.015, avg. samples / sec: 536.54
Iteration:   4900, Loss function: 4.579, Average Loss: 5.012, avg. samples / sec: 535.78
Iteration:   4920, Loss function: 4.831, Average Loss: 5.010, avg. samples / sec: 538.21
Iteration:   4940, Loss function: 4.879, Average Loss: 5.006, avg. samples / sec: 537.36
Iteration:   4960, Loss function: 4.561, Average Loss: 5.003, avg. samples / sec: 538.91
Iteration:   4980, Loss function: 4.676, Average Loss: 4.999, avg. samples / sec: 537.64
Iteration:   5000, Loss function: 4.768, Average Loss: 4.996, avg. samples / sec: 537.72
Iteration:   5020, Loss function: 5.259, Average Loss: 4.993, avg. samples / sec: 538.30
Iteration:   5040, Loss function: 4.759, Average Loss: 4.991, avg. samples / sec: 539.08
Iteration:   5060, Loss function: 4.768, Average Loss: 4.988, avg. samples / sec: 537.82
Iteration:   5080, Loss function: 4.478, Average Loss: 4.984, avg. samples / sec: 538.47
Iteration:   5100, Loss function: 4.759, Average Loss: 4.981, avg. samples / sec: 536.96
Iteration:   5120, Loss function: 4.618, Average Loss: 4.978, avg. samples / sec: 538.53
Iteration:   5140, Loss function: 4.730, Average Loss: 4.974, avg. samples / sec: 538.48
:::MLLOG {"namespace": "", "time_ms": 1639072258088, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "train.py", "lineno": 427, "epoch_num": 5}}
Predicting Ended, total time: 30.22 s
:::MLLOG {"namespace": "", "time_ms": 1639072288391, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "train.py", "lineno": 331, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1639072288431, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "train.py", "lineno": 338, "first_epoch_num": 6, "epoch_count": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072288431, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "train.py", "lineno": 348, "epoch_num": 6, "current_iter_num": 5144}}
Loading and preparing results...
DONE (t=0.76s)
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=2.44s).
Accumulating evaluation results...
DONE (t=0.00s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.10746
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.22079
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.09518
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.19349
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.13738
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.20498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.21677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.21677
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.00000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.00000
Current AP: 0.10746 AP goal: 0.10000
Iteration:   5160, Loss function: 4.871, Average Loss: 4.970, avg. samples / sec: 66.06
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "train.py", "lineno": 85, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.1074598937344522, "metadata": {"file": "train.py", "lineno": 88, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072291967, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "train.py", "lineno": 89, "epoch_num": 5}}
:::MLLOG {"namespace": "", "time_ms": 1639072292172, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "train.py", "lineno": 449, "status": "success"}}
++ date +%s
+ end=1639072293
++ date '+%Y-%m-%d %r'
+ end_fmt='2021-12-09 05:51:33 PM'
+ echo 'START TIMING RUN WAS 2021-12-09 05:31:49 PM'
START TIMING RUN WAS 2021-12-09 05:31:49 PM
+ echo 'ENDING TIMING RUN AT 2021-12-09 05:51:33 PM'
ENDING TIMING RUN AT 2021-12-09 05:51:33 PM
+ nvidia-smi -L
GPU 0: NVIDIA A100-SXM4-40GB (UUID: GPU-1ae21a3c-f40b-77a7-002f-4b0b52b05f5b)
  MIG 3g.20gb     Device  0: (UUID: MIG-9120dbee-7e14-5b8e-b157-55fba77fc8fc)
+ result=1184
+ result_name=SINGLE_STAGE_DETECTOR
+ echo 'RESULT,SINGLE_STAGE_DETECTOR,,1184,nvidia,2021-12-09 05:31:49 PM'
RESULT,SINGLE_STAGE_DETECTOR,,1184,nvidia,2021-12-09 05:31:49 PM
+ echo 'ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods'
ALL FINISHED GPU: 1 x 2g.10gb,3g.20gb x 4 Pods
