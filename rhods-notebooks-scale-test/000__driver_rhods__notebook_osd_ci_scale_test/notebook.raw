{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8a462b8-349c-4411-83c6-fe14bc00cf80",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os, pathlib, datetime\n",
    "benchmark_path = pathlib.Path(os.environ[\"BENCHMARK_NAME\"])\n",
    "\n",
    "if benchmark_path.suffix == \".py\": benchmark_path = benchmark_path.with_suffix(\"\") # remove the .py suffix\n",
    "\n",
    "BENCHMARK_NAME = str(benchmark_path)\n",
    "BENCHMARK_NUMBER = int(os.environ[\"BENCHMARK_NUMBER\"])\n",
    "BENCHMARK_REPEAT = int(os.environ[\"BENCHMARK_REPEAT\"])\n",
    "\n",
    "print(f\"{datetime.datetime.now()} Configured: {BENCHMARK_NAME=}, {BENCHMARK_NUMBER=}, {BENCHMARK_REPEAT=}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd9ce053-685f-4e88-a522-1d0ea0651640",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import timeit\n",
    "\n",
    "mod = __import__(BENCHMARK_NAME)\n",
    "def run_benchmark(repeat, number):\n",
    "    return  mod.do_measure(repeat, number)\n",
    "\n",
    "print(f\"{datetime.datetime.now()} Prepared\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "492f2f4c-3792-4edc-a911-2e071ef4214c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "run_benchmark(1, 1)\n",
    "print(f\"{datetime.datetime.now()} Warmed up\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89d39b87-4f1f-4342-a9a4-dd6af0ad28d7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(f\"{datetime.datetime.now()} Running ...\")\n",
    "measures = run_benchmark(repeat=BENCHMARK_REPEAT, number=BENCHMARK_NUMBER)\n",
    "print(f\"{datetime.datetime.now()} Done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dbc5109-50de-40ac-89af-e2fee0d905dd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import json; results = json.dumps(dict(benchmark=BENCHMARK_NAME, repeat=BENCHMARK_REPEAT, number=BENCHMARK_NUMBER, measures=measures))\n",
    "print(f\"{datetime.datetime.now()} Results serialized\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f82ed13b-ac96-459a-8757-662a5be77610",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "dest = pathlib.Path(\"results\")\n",
    "dest.mkdir(exist_ok=True)\n",
    "with open(dest / \"benchmark_measures.json\", \"w\") as f: print(results, file=f)\n",
    "print(f\"{datetime.datetime.now()} Results saved to disk\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a1c656bb-e0d1-430e-8304-e3e3b9932752",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# show the results in the notebook\n",
    "print(results)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
